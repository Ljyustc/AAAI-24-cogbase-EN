{
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    initial_money = remaining_after_bag / 0.8\n\n    return initial_money\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_squares = (n*(n+1)*(2*n+1))//6 - ((first_term-1)*first_term*(2*(first_term-1)+1))//6\n    return sum_squares\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones = (27 / 103) * total_bones\n    finger_bones = (14 / 27) * hand_bones\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # 9:00 AM in minutes\n    end_time = 10 * 60   # 10:00 AM in minutes\n    duration = end_time - start_time  # The duration in minutes\n    return duration  # Return the duration in minutes\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # Assuming reasonable upper limit for class size\n        initial_square = n ** 2\n        students_initial = initial_square + 5\n        new_square = (n + 1) ** 2\n        students_needed = new_square - students_initial\n        if students_needed == 26:\n            return students_initial\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy_apples - x) apples\n    # After receiving x apples, John will have (john_apples + x) apples\n    # According to the problem, Amy will have 4 more apples than John\n    # So, we have the equation: (amy_apples - x) = (john_apples + x) + 4\n\n    # Amy's final count = John's final count + 4\n    # 37 - x = 15 + x + 4\n    # Solving for x we get:\n    x = (amy_apples - john_apples - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_ways = permutations(9, 4)\n\n    return total_ways\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations when wearing pants and a shirt\n    shirt_pants_shoes = shirts * pants * shoes\n    \n    # Combinations when wearing a dress\n    dress_shoes = dresses * shoes\n    dress_heels = dresses * heels\n    \n    # Total combinations\n    total_combinations = shirt_pants_shoes + dress_shoes + dress_heels\n    \n    return total_combinations\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # sold price of each house\n    sold_price = 99000\n\n    # profit and loss percentages\n    profit_percentage = 10\n    loss_percentage = 10\n\n    # calculate the purchase price of each house\n    purchase_price_profit_house = sold_price / ((100 + profit_percentage) / 100)\n    purchase_price_loss_house = sold_price / ((100 - loss_percentage) / 100)\n\n    # calculate the actual profit and loss\n    actual_profit = sold_price - purchase_price_profit_house\n    actual_loss = purchase_price_loss_house - sold_price\n\n    # calculate the overall profit or loss\n    overall_profit_loss = actual_profit - actual_loss\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n\n    solution = solve(equation, toms_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    ans = (2 + 3 + 5) * 17\n    return ans\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # In order for Fred to win, he must leave George with 4n (multiple of 4) on his turn.\n    # Fred can always win by making sure that after his turn, the number of oranges left is 4n,\n    # because then no matter how many oranges George takes (1, 2, or 3), Fred can then take the remainder to make the pile 4n again.\n    # The target for Fred at the end is to leave 4 oranges for George, ensuring his next move wins the game.\n\n    # The strategy is to reduce the number of oranges to a multiple of 4 on Fred's first move.\n    # Since 15 is not a multiple of 4, then Fred will remove a certain number to make the count a multiple of 4.\n    # Options for removal are 1, 2, or 3.\n    # We need to find which number to remove such that the remainder mod 4 is 0.\n\n    for first_move in range(1, 4):  # Fred's possible first move\n        if (15 - first_move) % 4 == 0:  # The leftover is a multiple of 4\n            return first_move\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n    \n    if fraction_value > decimal_value:\n        ans = \"3/20 is larger\"\n    else:\n        ans = \"0.16 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Jogging time and distance\n    jogging_speed = 8 # km per hour\n    jogging_time = 2 # hours (6:30 am to 8:30 am)\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Walking time and distance\n    walking_speed = jogging_speed / 2 # km per hour\n    walking_time = 1 # hour (8:30 am to 9:30 am)\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let the number of each type of note be 'n'.\n    # Each £5 note is worth 5,\n    # Each £10 note is worth 10,\n    # Each £20 note is worth 20.\n    # Hence, the total value is 5*n + 10*n + 20*n = 35*n.\n    # It is given that the total value in the purse is £280.\n    # So we have the equation:\n    # 35*n = 280\n    # Solving for 'n':\n    n = 280 // 35\n    # Since the number of each type of note is equal, the total number of notes is:\n    # 3 * n (for £5, £10, and £20 notes)\n    total_notes = 3 * n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    # For a three-digit palindromic number, the hundreds and ones places must be the same.\n    # There are ten possible digits (0-9), but the hundreds place cannot be 0, so there are 9 options for the first digit.\n    # The middle digit can be anything from 0 to 9, giving 10 options.\n    count = 9 * 10  # Number of hundreds digit possibilities times number of tens digit possibilities\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_op1(M, N):\n        return M * N + N + 1\n\n    def custom_op2(M, N):\n        return 8 * M - N * N\n\n    ans = custom_op2(custom_op1(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Last digit of powers of 2 cycle every 4: 2, 4, 8, 6\n    last_digit_2 = 6  # The last digit of 2^100 is the same as the last digit of 2^4\n    # Last digit of powers of 7 cycle every 4: 7, 9, 3, 1\n    last_digit_7 = 1  # The last digit of 7^100 is the same as the last digit of 7^4\n    # Last digit of powers of 9 cycle every 2: 9, 1\n    last_digit_9 = 1  # The last digit of 9^100 is the same as the last digit of 9^2\n    \n    # Calculate the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 1*60 + 30 + 20 + 15 + 12\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 10  # as we need to go from 1^2 to 19^2, there would be 10 terms if we consider only odd numbers\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Start from an odd number larger than 107 to skip even numbers\n    # and numbers too small to meet the condition p + 107 > p\n    p = 109\n    # Iterate until we find the prime p such that p + 107 is also a prime\n    while True:\n        if is_prime(p) and is_prime(p + 107):\n            break\n        p += 2\n\n    return p\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    minibus_capacity = 6\n    minibusses_needed = (students + minibus_capacity - 1) // minibus_capacity\n    \n    return minibusses_needed\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Because we need to minimize the largest pile,\n    # we start assigning from the smallest pile possible, which is 1 marble.\n    # Let's denote the piles in increasing order of marbles as:\n    # pile1 < pile2 < pile3 < pile4\n    # pile1 = 1 marble (minimum possible)\n    \n    # We need a total of 16 marbles, and we distribute them one by one in increasing order:\n    # We know that: pile1 + pile2 + pile3 + pile4 = 16\n    # And we have that: pile1 = 1\n    # Now, we must have that:\n    # pile2 > pile1\n    # pile3 > pile2\n    # pile4 > pile3\n    \n    # Let's find the smallest pile2. As pile2 > pile1, pile2 must be at least 2.\n    # Now for pile3, it must be more than pile2, so minimum for pile3 is pile2 + 1 = 3.\n    # Similarly for pile4, it must be more than pile3, so minimum for pile4 is pile3 + 1 = 4.\n    # Let's see the total sum so far: 1 + 2 + 3 + 4 = 10\n    # We still have 16 - 10 = 6 marbles remaining to reach 16.\n    \n    # We must add the remaining marbles to the largest pile to keep the piles different and increase the smallest possible number of the largest pile:\n    pile1 = 1\n    pile2 = 2\n    pile3 = 3\n    pile4 = 4 + (16 - (pile1 + pile2 + pile3))  # Add the remaining marbles to pile4\n    \n    # The smallest possible number of marbles in the largest pile:\n    ans = pile4\n    return ans\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    # Calculate the sum of the series by simplifying the fractions\n    sum_series = sum((i**2 + (i+1)**2) / (i * (i + 1)) for i in range(1, 2008))\n\n    # Round the result to the nearest whole number\n    ans = round(sum_series)\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    correct_avg_height = 163\n    incorrect_avg_height = 159\n    mistake_height = 126\n    actual_height = 162\n\n    difference_in_height = actual_height - mistake_height\n    difference_in_avg = correct_avg_height - incorrect_avg_height\n\n    number_of_girls = difference_in_height / difference_in_avg\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_floors = 4 - 1  # From first to fourth floor\n    target_floors = 2 - 1  # From first to second floor\n\n    time_for_one_floor = 12 / total_floors\n    time_for_target = time_for_one_floor * target_floors\n\n    return time_for_target\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 * 25 / 100\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + 1/i\n    return product\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    result = 201  # Start with 201 since 200 # 1 = 200*1 - 2*200 + 4 = 201\n    for b in range(199, 1, -1):\n        result = hash_op(result, b)\n    \n    return result\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # Since it's odd numbers, (13+1)/2 gives us the number of terms\n    sum_of_series = (n * (n + 1) // 2) ** 2  # Formula for the sum of cubes of first n natural numbers\n    return sum_of_series\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    capacity = 4\n    num_containers = (total_apples + capacity - 1) // capacity\n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of seashells that Beth and Ken have\n    beth, ken = symbols('beth ken')\n\n    # Given relation between the Ken's and Beth's number of seashells\n    # Ken had $75 more seashells than Beth.\n    equation1 = Eq(ken, beth + 75)\n\n    # 4/5 of the number of seashells Beth had was equal to 2/5 of the number of seashells Ken had.\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (beth, ken))\n\n    # Calculate total number of seashells\n    total_seashells = solutions[beth] + solutions[ken]\n\n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    initial_number = 9876543\n    final_number = initial_number + 10000\n    return final_number\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Greatest Common Divisor (GCD) function is used to find the greatest possible length\n    # for each portion, considering no remainders left from any ribbon.\n    length1 = 56\n    length2 = 42\n    length3 = 84\n\n    # Find the GCD of the first two lengths\n    gcd_value = gcd(length1, length2)\n\n    # Find the GCD of the gcd_value and the third length\n    gcd_value = gcd(gcd_value, length3)\n\n    # The GCD value is the greatest possible length of each portion\n    return gcd_value\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for i in range(1, 50):\n        cube = i ** 3\n        if (cube - 2) ** 0.5 == int((cube - 2) ** 0.5):\n            return cube - 2\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # The problem can be reformulated so that 13 - 3*2 oranges are to be divided.\n    oranges_left = 13 - 3*2\n    # The problem is equivalent to placing two dividers among the remaining oranges.\n    # The number of ways to place two dividers in (oranges_left + 2) positions.\n    total_ways = comb(oranges_left + 2, 2)\n    return total_ways\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of $10 and $2 notes\n    num_10_notes, num_2_notes = symbols('num_10_notes num_2_notes')\n\n    # Total number of notes is 40\n    eq_total_notes = Eq(num_10_notes + num_2_notes, 40)\n\n    # He spent 40% of the $10 notes and 25% of the $2 notes on a gift\n    spent_10_notes = 0.4 * num_10_notes\n    spent_2_notes = 0.25 * num_2_notes\n\n    # He had 4/5 as many $10 notes as $2 notes left\n    left_10_notes = num_10_notes - spent_10_notes\n    left_2_notes = num_2_notes - spent_2_notes\n    eq_left_notes_ratio = Eq(left_10_notes, (4/5) * left_2_notes)\n\n    # Solve the system of equations\n    solution = solve((eq_total_notes, eq_left_notes_ratio), (num_10_notes, num_2_notes))\n\n    # Calculate the total cost of the gift\n    total_cost = spent_10_notes.subs(num_10_notes, solution[num_10_notes]) * 10 + \\\n                 spent_2_notes.subs(num_2_notes, solution[num_2_notes]) * 2\n\n    return total_cost.evalf()\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(difference * 100)\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return result\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Bill, his son, and Bill's father\n    bill, son, father = symbols('bill son father')\n\n    # Equation 1: Bill is twice as old as his son\n    equation1 = Eq(bill, 2 * son)\n    # Equation 2: The son is 50 years younger than Bill's father\n    equation2 = Eq(son, father - 50)\n    # Equation 3: The total of their ages is 142\n    equation3 = Eq(bill + son + father, 142)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The given series evaluates to 2(1-1/(2^(2^n)))\n    # We can see that the terms in the product series increase in the exponents of 2 by powers of 2:\n    # (1+1/2), (1+1/4), (1+1/16), (1+1/256), ... The exponents follow 2^1, 2^2, 2^4, 2^8, ...\n    # It is clear that each term contributes to the final result doubling the part after 1- ...\n    # Therefore, the last term causes the (1-...) part to be halved\n    # So the series up until the second to last term contributes to 2(1-1/(2^(2^2009))), and the last term is (1+1/(2^(2^2009)))\n    # Since the series up until the second to last term already results in a doubling (2), the last term must represent the halving portion (1 - 1/(2^(2^2009)))\n    # Hence, n must be equal to 2009 since 2^2009 would be the exponent that causes the halving effect (1-1/2^(2^2009) = 1/2)\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define s as Sally's current age, and j as John's current age.\n    s, j = symbols('s j')\n\n    # In 3 years, Sally's age will be 6 times John's age.\n    equation1 = Eq(s + 3, 6 * (j + 3))\n\n    # The current total age of Sally and John is 50 years.\n    equation2 = Eq(s + j, 50)\n\n    # We will solve the system of equations for s and j.\n    ages = solve((equation1, equation2), (s, j))\n\n    return ages[s]\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # The first digit cannot be 0 in a 4-digit number\n            continue\n        paso = 1000*p + 100*a + 10*s + o\n        if a == (2*p) % 10 and s == (2*a) % 10 and o == (2*s) % 10:\n            return paso\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    # Using algebra to define the relationships between the numbers of stamps collected\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    # Create three equations based on the information given\n    equation1 = Eq(licia, 3 * krisnam)             # Licia collected three times as many stamps as Krisnam\n    equation2 = Eq(imran, licia + 138)              # Imran collected 138 more stamps than Licia\n    equation3 = Eq(licia + krisnam + imran, 2238)  # The total amount of stamps collected\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    # We need to find out how many stamps Imran collected\n    return solutions[imran]\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # 1/(man's rate) + 1/(wife's rate) = 1/(combined rate)\n    man_rate = 1/15\n    combined_rate = 1/12\n    wife_rate = combined_rate - man_rate  # Calculate wife's rate\n\n    wife_days = 1/wife_rate  # Find number of days it takes wife alone\n\n    return wife_days\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The difference between the beans peeled each hour remains constant.\n    # difference between beans peeled from 10 to 11 and beans peeled from 9 to 10\n    difference = 36 - 28\n    \n    # Calculate the number of beans peeled from 8 to 9 using the difference\n    beans_from_9_to_10 = 20\n    beans_from_8_to_9 = beans_from_9_to_10 - difference\n    \n    return beans_from_8_to_9\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "def solution():\n    from itertools import combinations\n\n    # Count the total number of ways to choose the balls\n    total_ways = 0\n    \n    for white_left in range(3, 9): # 3 to 8 white balls left in the bag\n        for red_left in range(2, 4): # 2 or 3 red balls left in the bag\n            black_left = 10 - (9 - white_left) - (5 - red_left) # Total balls picked is 10\n            # Ensure the number of black balls left is no more than 3\n            if 0 <= black_left <= 6:\n                # Calculate combinations for each color\n                white_ways = len(list(combinations(range(9), 9 - white_left)))\n                red_ways = len(list(combinations(range(5), 5 - red_left)))\n                black_ways = len(list(combinations(range(6), black_left)))\n                # Multiply the ways for each color to get the total ways\n                total_ways += white_ways * red_ways * black_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        if sum(digits) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # The sequence starts with 3 questions on Monday and ends with an unknown number on Sunday\n    # The common difference is 3 (each day 3 more questions than the previous day)\n    \n    # The number of terms in the sequence is 7, since there are 7 days from Monday to Sunday\n    num_terms = 7\n    \n    # The first term is 3\n    first_term = 3\n    \n    # The last term can be calculated using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (num_terms - 1) * common_difference\n    common_difference = 3\n    last_term = first_term + (num_terms - 1) * common_difference\n    \n    # The sum of an arithmetic sequence can be calculated using the formula:\n    # sum = num_terms * (first_term + last_term) / 2\n    total_questions = num_terms * (first_term + last_term) / 2\n    \n    return int(total_questions)\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    # Convert snake length from meters to centimeters\n    snake_length_cm = 1 * 100  # 1 meter is 100 centimeters\n\n    # Insect length in centimeters\n    insect_length_cm = 5\n\n    # Calculate how many times smaller is the insect than the snake\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    addend = 2\n    while True:\n        if term > 9 and term < 100:\n            prev_term = term\n        elif term >= 100:\n            return prev_term\n        addend += 2\n        term += addend\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The mean of three numbers is 120\n    mean_of_three = 120\n    total_of_three = mean_of_three * 3\n\n    # The mean of four numbers is 150\n    mean_of_four = 150\n    total_of_four = mean_of_four * 4\n\n    # The fourth number is the total of four minus the total of three\n    fourth_number = total_of_four - total_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the total number of pearls originally on the strand\n    # According to the problem, half, a fourth, and a sixth of the pearls are accounted for, along with 3 remaining on the strand.\n    # This gives us the equation: 1/2 * x + 1/4 * x + 1/6 * x + 3 = x\n\n    # Find a common denominator for the fractions: the common denominator for 2, 4, and 6 is 12.\n    # This gives us the equation: 6/12 * x + 3/12 * x + 2/12 * x + 3 = x\n\n    # Combine the fractions: (6/12 + 3/12 + 2/12) * x + 3 = x\n    # Simplify the fractions: (11/12) * x + 3 = x\n\n    # Subtract (11/12) * x from both sides: 3 = x - (11/12) * x\n    # Simplify the equation: 3 = (1/12) * x\n\n    # Multiply both sides by 12 to solve for x: 3 * 12 = x\n    x = 3 * 12\n\n    return x\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - (2 * mangoes_half_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    least_number, _ = solve_congruence(*congruences)\n\n    return least_number\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    # x ≡ 0 (mod 7)\n    # x+2 ≡ 0 (mod 8)\n    # according to the Chinese Remainder Theorem\n    congruences = [(0, 7), (-1, 8), (-2, 9)]\n\n    # Solve the congruences\n    x = solve_congruence(*congruences)\n\n    # The smallest possible sum of these three numbers is x + (x + 2) + (x + 4)\n    ans = x[0] * 3 + 6  # Summing the numbers\n\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    difference = (fourth_term - first_term) / (4 - 1)\n    last_term = first_term + (num_rows - 1) * difference\n    \n    total_athletes = (num_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 6 * 29\n    total_parents_age = total_family_age - 64\n    average_parents_age_3_years_ago = (total_parents_age / 2) - 3\n    return average_parents_age_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_used = 5\n    target_total_paintings = 56\n\n    paintings_per_day = total_paintings_done / total_days_used\n    remaining_paintings = target_total_paintings - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    multiplier = total_sum // 3\n    return multiplier\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, Bud is 6th from the back\n    # There are 5 children between Pip and Bud, so from Pip to Bud, there are 6 children in total including Bud\n    # Therefore, the distance from the front of the queue to Bud is Pip's position + 5 children in between\n    distance_to_bud = 6 + 5  # Pip's position plus the 5 children in between\n\n    # Now we know Bud is also 6th from the end of the queue\n    # So we just add Bud's position to the distance_to_bud to get the total number of children\n    total_children = distance_to_bud + 6 - 1  # Subtract 1 because Bud is counted twice\n\n    return total_children\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    fifth_term = 8\n    twelfth_term = 50\n    term_difference = 12 - 5\n    common_difference = (twelfth_term - fifth_term) / term_difference\n    return common_difference\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    # The times it takes each person to row the boat\n    times = [7, 9, 4, 10]\n    \n    # Initial best time set to a large number\n    best_time = float('inf')\n\n    # Calculate all the possible combinations of pairs that can cross together\n    for first_cross in combinations(times, 2):\n        for second_cross in combinations(set(times) - set(first_cross), 2):\n            # The fastest person returns after the first cross\n            fastest_return = min(first_cross)\n            # The second fastest person cross path\n            fastest_cross = min(set(times) - set(second_cross))\n            # The time taken in the scenario\n            total_time = sum(first_cross) + sum(second_cross) + fastest_return + fastest_cross\n            \n            # Keep the best (minimum) time encountered\n            best_time = min(best_time, total_time)\n\n    return best_time\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # Given 18 pieces of paper, a leaf is inserted after every 3 pieces of paper,\n    # which means that the leaves will be inserted at positions 1, 4, 7, ..., up to 18.\n    # This forms an arithmetic sequence starting at 1 with a difference of 3 between consecutive terms.\n    # We need to find the number of terms in this arithmetic sequence.\n    \n    # Convert the question into an arithmetic sequence problem where:\n    # the first term a = 1 (since the first leaf is after the first 3 pages), \n    # the common difference d = 3 (leaf after every three pieces of paper).\n\n    first_term = 1\n    common_difference = 3\n    last_term = 18  # since we have 18 pieces of paper\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * common_difference\n    # Solve for n to get the number of leaves (since a leaf comes after every 3rd paper, which is the nth term):\n    # n = (last_term - first_term) / common_difference + 1\n\n    num_leaves = (last_term - first_term) // common_difference + 1\n    return num_leaves\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    reference = 0.1\n    closest = min(numbers, key=lambda x: abs(x - reference))\n\n    return closest\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return only the numerical solution\n    return solution[0]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    number_of_sisters = 4\n    number_of_brothers = 3\n    jacob = 1  # Including Jacob himself\n\n    total_children = number_of_sisters + number_of_brothers + jacob\n\n    return total_children\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    # d is the total distance\n    # t is the time run before rain in minutes\n    d, t = symbols('d t')\n    \n    # Equation for distance run before rain (usual speed)\n    equation1 = Eq(t / 30, (d - 2400) / d)\n    \n    # Equation for time including the delay\n    # Since speed is reduced by 20%, time taken to cover the same distance increases by 25%\n    # (1 / (1 - 0.2)) = 1.25\n    equation2 = Eq(t + 5, 30 + (2400 / (d / 30)) * 1.25) \n    \n    # Solve the equations for t and d\n    solutions = solve((equation1, equation2), (t, d))\n    \n    # Return the length of the journey (distance d)\n    return solutions[d]\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Initial parameters of the arithmetic progression\n    first_term = 2\n    difference = 3  # Difference between consecutive terms\n\n    # Find the number of terms in the sequence until 242\n    last_term = 242\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of first three terms in the initial series\n    sum_of_first_three = first_term + (first_term + difference) + (first_term + 2 * difference)\n\n    # Update first term after removing first three and adding their sum\n    first_term += 3 * difference\n    num_terms -= 3  # Decrease the number of terms by 3\n\n    # The sequence has been reduced by 3 terms, the second term becomes the first\n    # and the sum of the first three added to the end changes the last term.\n    second_term = first_term\n\n    # Continue the process until only three terms are left on the blackboard\n    while num_terms > 3:\n        first_term += 3 * difference\n        num_terms -= 3\n\n    # At this point, we have only three terms left\n    # Since the second term was the first term after the initial operation and the difference is constant,\n    # its value has not changed throughout the process.\n    return second_term\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    # We have 5 people building a bridge in 15 days.\n    # Let x be the number of additional people needed.\n    # The work done by one person in one day is the inverse of the total time multiplied by the number of people.\n    # The total work done remains the same, so we can set up a proportion:\n    # 5 people * 15 days = (5 + x) people * 7 days\n    \n    # Following the inverse proportion:\n    total_work = 5 * 15\n    days_needed = 7\n\n    # We can now solve for x:\n    x = total_work / days_needed - 5\n    \n    return int(x)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # Temperature at 5:00 am\n    increase_per_hour = 2  # Increase in temperature per hour\n    hours_passed = 10.5 - 5  # Hours passed from 5:00 am to 10:30 am\n    \n    final_temp = initial_temp + increase_per_hour * hours_passed  # Final temperature at 10:30 am\n    \n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # x represents the initial amount of money\n    x = symbols('x')\n\n    # Calculate the money left after each shop\n    remaining_after_A = x / 2 - 1\n    remaining_after_B = remaining_after_A / 2 - 2\n    remaining_after_C = remaining_after_B - (remaining_after_B / 3 + 3)\n\n    # Set up the equation for the money left after shop C\n    equation = remaining_after_C - 49\n\n    # Solve the equation to find the initial amount of money\n    initial_money = solve(equation, x)[0]\n\n    return initial_money\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in school A as 'a'\n    # and the number of students in school B as 'b'.\n\n    a, b = symbols('a b')\n\n    # Equation 1: The total number of students in both schools\n    equation1 = Eq(a + b, 1050)\n\n    # Equation 2: After transferring 20 students from school A to B,\n    # school A has 10 more students than school B.\n    # So, a - 20 = b + 20 + 10 (10 additional to balance the shift)\n    equation2 = Eq(a - 20, b + 30)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = 7  # Number of shelves\n    total_books = 280  # Total number of books\n    \n    # Let the number of books on the top shelf be x\n    x = symbols('x')\n    \n    # The total number of books is the sum of an arithmetic series\n    # S_n = n/2 * (2a + (n - 1)d), where a is the first term and d is the common difference\n    # For this problem, a = x and d = -3 (3 fewer books on each next shelf)\n    equation = Eq(n/2 * (2*x + (n - 1)*(-3)), total_books)\n    \n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    number_boys = total_students * fraction_boys\n    number_girls = total_students - number_boys\n    return int(number_girls)\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # To ensure Darrell gets at least 1 green pencil, we consider the worst-case scenario\n    # where Darrell draws all pencils of the other colors first.\n    # There are 3 blue and 3 white pencils, so the maximum number of pencils \n    # that Darrell could draw without getting a green one is 3 (blue) + 3 (white) = 6 pencils.\n    # Thus, Darrell must draw one more pencil to be sure of getting at least 1 green pencil.\n    return 6 + 1\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    # Define the periods for each task in days\n    sweep = 3\n    mop = 5\n    cook = 9\n    clean_windows = 3 * 7  # 3 weeks\n\n    # Calculate the least common multiple of the four periods\n    ans = lcm(sweep, mop, cook, clean_windows)\n\n    return ans\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors\n\n    # 2240 = 2^5 * 5 * 7, so we need to find divisors that when we divide 2240 by them\n    # we still have a perfect square number.\n    divisors_of_2240 = divisors(2240)\n    for d in divisors_of_2240:\n        if (2240 / d).is_integer() and ((2240 // d) ** 0.5).is_integer():\n            ans = d\n            break\n        \n    return ans\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kids, candies = symbols('kids candies')\n\n    equation1 = Eq(kids * 18, candies - 12)\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    solutions = solve((equation1, equation2), (kids, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = 11 * cost_per_item\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt\n\n    result = 16.7 - pow((pow(-4.56, 2) - pow(8.1, 3)) / pow(7.2, 3) / (-sqrt(6 + 3/4) + 30.15), 1/3)\n    \n    return round(result, 3)\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    years_later = 0\n    while (oliver_current_age + lin_current_age) != target_sum_age:\n        years_later += 1\n        oliver_current_age += 1\n        lin_current_age += 1\n\n    return years_later\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Mr. Lim's and Mrs. Lim's current ages\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n    \n    # 7 years ago, the ratio of Mr. Lim's age to Mrs. Lim's age was 6:5\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6 / 5)\n    \n    # The sum of their current ages is 69 years old    \n    equation2 = Eq(mr_age + mrs_age, 69)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n    \n    # Mr. Lim's current age\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Calculate the total score of the 5 students\n    total_score_5_students = 5 * 87\n    # Calculate the total score of all 6 students after adding Jim's score\n    total_score_6_students = 6 * 88\n    # Jim's score is the difference between the two totals\n    jims_score = total_score_6_students - total_score_5_students\n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of stickers each originally had\n    sam, peter, john = symbols('sam peter john')\n    \n    # Equation representing the fact that John's stickers increased by 80%\n    equation1 = Eq(john * 1.8, sam * 0.2 + peter * 0.2 + john)\n    \n    # Equation representing the ratio of Sam's to Peter's stickers\n    equation2 = Eq(sam, peter * (7/5))\n    \n    # Equation representing that Sam had 20 stickers more than John in the end\n    equation3 = Eq(sam - (sam * 0.2), john + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    total_distance = 440\n    ratio_jayden = 7\n    ratio_carter = 4\n    total_ratio = ratio_jayden + ratio_carter\n\n    # When Jayden arrives at B, Carter covers a distance in the same time with his speed ratio\n    distance_covered_by_carter = (total_distance * ratio_carter) / total_ratio\n\n    # The remaining distance to cover for Carter is (total_distance - distance_covered_by_carter)\n    remaining_distance = total_distance - distance_covered_by_carter\n\n    # Now they start walking towards each other again and meet somewhere in the middle\n    # Their speed ratio is still the same, so Jayden to Carter distance covered in the remaining part will be in the ratio 7:4\n    # We can find out how much distance Jayden will cover from point B towards A\n    distance_jayden_covers_towards_A = (remaining_distance * ratio_jayden) / total_ratio\n\n    # The meeting point distance from A will be the total distance Jayden has walked:\n    # which is total_distance (from A to B) plus distance_jayden_covers_towards_A\n    meeting_point_from_A = total_distance + distance_jayden_covers_towards_A\n\n    return meeting_point_from_A\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 10 / 100\n    second_discount = 20 / 100\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # Given that one-fifth of the wood is 6 cm\n    full_length = one_fifth_length * 5  # Calculate the full length of the wood\n    one_third_length = full_length / 3  # Calculate one-third of the full length\n    return one_third_length\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    minibusses_needed = (boys + minibus_capacity - 1) // minibus_capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n    \n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair = symbols('chair')\n    table = chair + 160\n    total_cost = Eq(table + 5 * chair, 328)\n    chair_price = solve(total_cost, chair)[0]\n    \n    return chair_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats purchased.\n    x = symbols('x')\n\n    # Each bat was bought for $135 and sold for $185,\n    # hence the profit per bat is $185 - $135.\n    profit_per_bat = 185 - 135\n\n    # When the shop was left with 3 bats, the proceeds had covered\n    # the initial cost (135x) plus a profit of $2945,\n    # and the total selling price for (x - 3) bats is 185(x - 3).\n    equation = Eq(135 * x + 2945, 185 * (x - 3))\n\n    # Solve the equation for x.\n    num_bats = solve(equation, x)\n\n    return num_bats[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Create the equations based on the given relationships\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Find out how many triangles are equal to a diamond\n    num_triangles = solutions[diamond] / solutions[triangle]\n\n    return num_triangles\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Pip has 60p which is £0.60\n    pip_money = 0.60\n    \n    # Bud has £1.10\n    bud_money = 1.10\n    \n    # The total amount of money they have altogether\n    total_money = pip_money + bud_money\n    \n    return total_money\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_numbers = 10\n    total_sum = 1111 * 10\n    first_4_mean = 1111 - 240\n    last_6_mean = (total_sum - (first_4_mean * 4)) / 6\n\n    return last_6_mean\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 4):\n        i, s, p = int(p[0]), int(p[1]), int(p[2]) * 100 + int(p[3])\n        if i + i + i + i == p - s - s - s - s:\n            return p\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate the time spent on each part of the race\n    time_1 = 280 / 7  # time = distance / speed\n    time_2 = 400 / 5\n    time_3 = (800 - 280 - 400) / 8  # The last part of the race is 800 - 280 - 400 meters\n\n    # Total time is the sum of times spent on all parts\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let's denote the rate of the hot tap as h and the rate of the cold tap as c.\n    # The rates are in \"bath per minute\".\n    # According to the problem, c = 2h.\n    # Together they fill the bath in 10 minutes, so their combined rate is 1 bath/10 min or 1/10.\n\n    # 1/h + 1/c = 1/10\n    # 1/h + 1/(2h) = 1/10\n    # 3/(2h) = 1/10\n    # h = 3/20 (bath per minute)\n\n    # Now we need to find out how long (t) it takes for the cold tap to fill the bath on its own.\n    # c * t = 1 (filling one entire bath)\n    # (2h) * t = 1\n    # (2 * 3/20) * t = 1\n    # (3/10) * t = 1\n    # t = 10/3\n\n    # Thus, it takes 10/3 minutes, or 3 and 1/3 minutes, or 3 minutes and 20 seconds to fill the bath using just the cold tap.\n    \n    return 10/3\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    value_after_years = round(value_after_years, 1)\n\n    return value_after_years\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Rachel's and Alice's candy\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: After Rachel gives Alice 10 pieces, they have the same amount of candy\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total amount of candy\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_to_lori = 3 / 2  # Ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_to_lori  # Jocye's speed in meters per second\n\n    time = 10  # Time in seconds\n    distance_jocye_runs = jocye_speed * time  # Distance Jocye runs in 10 seconds\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    games_played = comb(num_teams, 2) # Combination for 2 teams to play out of 5\n    return games_played\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    # P(A living over 25 | A is already 20) = P(A living over 25 and over 20) / P(A is over 20)\n    probability_living_over_25_given_20 = 0.3 / 0.6\n    \n    return probability_living_over_25_given_20\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_used = 0\n    pages = 0\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1 if digits_used > total_digits else pages\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    total_distance = 780  # Total distance to the library in metres\n    meet_distance_from_home = 360  # Distance from home where they meet in metres\n\n    # Don's distance covered before meeting\n    don_distance_covered = meet_distance_from_home\n\n    # Danny's distance covered before meeting\n    danny_distance_covered = total_distance - meet_distance_from_home\n\n    # Calculate the time it took for Don to meet Danny\n    time_to_meet = don_distance_covered / don_speed\n\n    # Calculate Danny's speed based on the time to meet and the distance he covered\n    danny_speed = danny_distance_covered / time_to_meet\n\n    return danny_speed\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    total = 0\n    for i in range(1, 11):\n        for j in range(i, 11):\n            total += i / j\n    return total\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return 20 * 27 // 30\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can occupy two positions in two ways: AB or BA.\n    AB_positions = 2\n    \n    # After A and B are placed, there are 2 remaining positions which C and D\n    # can occupy in only one specific way: CD\n    CD_positions = 1\n    \n    # Finally, these two pairs can be flipped in two ways: ABCD or DCBA.\n    total_positions = AB_positions * CD_positions * 2 \n\n    return total_positions\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour_g = 1500  # 1 kg 500 g of flour in grams\n    sugar_g = 1200  # 1 kg 200 g of brown sugar in grams\n    butter_g = 900  # 900 g of butter\n\n    total_g = flour_g + sugar_g + butter_g  # Total weight of the mixture in grams\n    each_tin_g = total_g / 8  # Dividing the mix equally into 8 cake tins\n\n    return each_tin_g\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Possible worst-case scenarios before getting 4 marbles of the same color:\n    # - Taking 3 red, 3 blue and 3 green, which totals to 9 marbles.\n    # To ensure the 4th marble of the same color, we need to pick one more.\n    \n    ans = 3 * 3 + 1  # Three colors times 3 marbles each plus 1 to ensure the fourth marble.\n    return ans\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_number = float('inf')  # Set to infinity initially\n\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Check if the last digit is even\n            num = int(''.join(map(str, perm)))\n            if num < min_even_number:\n                min_even_number = num\n\n    return min_even_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Loop through all two-digit numbers\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_to_build_with_3_workers = 3\n\n    # Total work done is workers * days\n    total_work = workers * days_to_build_with_3_workers\n\n    # If 1 worker is building the same wall, it will take:\n    days_for_1_worker = total_work / 1\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n\n    pupils_per_row = total_pupils // rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables\n    a, b = symbols('a b')\n\n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n\n    # Solve for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Return the value of b\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the original expression as a lambda function for easy evaluation\n    original_expr = lambda: 285 + 15 / 5 - 2\n    \n    # Generate all possible bracket insertions for the expression\n    expressions = [\n        lambda: (285 + 15) / 5 - 2,\n        lambda: 285 + (15 / 5 - 2),\n        lambda: 285 + 15 / (5 - 2),\n        lambda: (285 + 15 / 5) - 2,\n        lambda: 285 + (15 / 5) - 2,\n        lambda: 285 + 15 / 5 - 2,  # No brackets, original expression\n    ]\n    \n    # Evaluate all expressions and store unique results in a set to avoid duplicates\n    results = set(expr() for expr in expressions)\n\n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's assumption is that B = 6 * A + 25 translates directly to the equation 60x + 6y + 25 = 200 + 10x + y\n    # Let's check if this assumption holds\n\n    # Equation from the problem: B = 6A + 25\n    # Translated to place values: 200x + 20y = 6(10x + y) + 25\n    # Simplify the equation\n    eq = 200*x + 20*y - 6*(10*x + y) - 25\n\n    # John's assumption simplifed would be: 50x + 5y = 25, which is not the same as the equation above\n    # Let's solve the correct equation using sympy\n\n    # Using sympy to solve the equation\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    eq = 200*x + 20*y - 6*(10*x + y) - 25\n    solution = solve(eq, (x, y))\n\n    # Finding a valid (x, y) pair such that x and y are both digits (0-9)\n    for x_val, y_val in solution:\n        if 0 <= x_val <= 9 and 0 <= y_val <= 9:\n            A = 10 * x_val + y_val\n            return A\n\n    # If we do not find a valid solution, return an indication that John's approach was wrong\n    return \"John's approach was wrong\"\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n\n    for locker in range(1, 101):\n        # Count the number of divisors that are perfect squares\n        divisors_count = 0\n        for i in range(1, locker+1):\n            if locker % (i * i) == 0:\n                divisors_count += 1\n\n        # A locker's final state depends on whether it has an odd number of such divisors\n        # Only lockers with perfect squares as numbers will be unlocked\n        if divisors_count % 2 == 1:\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        p = ''.join(p)\n        if (p.index('A') > p.index('B') and p.index('A') < p.index('C')) or (p.index('A') < p.index('B') and p.index('A') > p.index('C')):\n            if 'DE' not in p and 'ED' not in p:\n                if 'FG' in p or 'GF' in p:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Nicolas's starting level\n    nicolas_start = 1\n    # Yiding's starting level\n    yiding_start = 1\n\n    # Nicolas's current level when they are at the same time\n    nicolas_current = 4\n    # Yiding's current level when they are at the same time\n    yiding_current = 3\n\n    # The ratio of speeds based on the levels reached\n    speed_ratio = (nicolas_current - nicolas_start) / (yiding_current - yiding_start)\n\n    # Nicolas's target level\n    nicolas_target = 16\n    # Calculate Yiding's level when Nicolas reaches level 16\n    yiding_target = yiding_start + (nicolas_target - nicolas_start) / speed_ratio\n\n    return int(yiding_target)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost per cake and y be the amount of money Lucy has.\n    x, y = symbols('x y')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(y - 10 * x, -11)\n    equation2 = Eq(y - 13 * x, -26)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_children = 4 + 6\n    total_mass = total_mass_boys + total_mass_girls\n\n    average_mass = total_mass / total_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = quotient * divisor + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    total_runs = total_matches * 40  # Mean score * Number of matches\n    scored_runs = 37 + 53 + 29 + 41\n    x = total_runs - scored_runs\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    count = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    return count\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 9\n        new_number = int('9' + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = smallest_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_count = 0\n    \n    # Case 1: The three-digit numbers with exactly two sevens\n    for i in range(10):\n        if i == 7: continue  # Skip if the digit is 7\n        two_sevens_cases = ['77' + str(i), '7' + str(i) + '7', str(i) + '77']\n        for number_str in two_sevens_cases:\n            if number_str[0] != '0':  # The first digit should not be zero\n                total_count += 1\n    \n    # Case 2: The three-digit numbers with exactly three sevens (777)\n    total_count += 1\n    \n    return total_count\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Abigail's and Jonathan's current ages\n    abigail, jonathan = symbols('abigail jonathan')\n\n    # Abigail is 6 years older than Jonathan\n    equation1 = Eq(abigail, jonathan + 6)\n    \n    # Six years ago, Abigail was twice as old as Jonathan\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    # Return Jonathan's age\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_op(a, b):\n        return a * b + a - b\n\n    ans = custom_op(4, 3) - custom_op(3, 4)\n    return ans\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c as the number of cows and g as the number of goats initially\n    c, g = symbols('c g')\n\n    # Equation representing the initial percentage of cows which is 65%\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 more animals, the percentage of cows increased by 20%\n    equation2 = Eq(c + 240 * 0.85, 0.85 * (c + g + 240))\n\n    # The number of goats doubled\n    equation3 = Eq(2 * g, g + 240 * 0.15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Total work done is considered as 1 (the whole job)\n\n    # Alice's rate of working per day\n    alice_work_rate = 1 / 40\n    # Bob's rate of working per day\n    bob_work_rate = 1 / 60\n\n    # Combined work rate of Alice and Bob per day when both are working\n    combined_work_rate = alice_work_rate + bob_work_rate\n\n    # Let x be the number of days Alice takes off\n    # Total days worked by both Alice and Bob is (27 - x) days\n\n    # Equation based on the total work done:\n    # Bob works for all 27 days, Alice works for (27 - x) days\n    total_work_done = (bob_work_rate * 27) + (alice_work_rate * (27 - x))\n\n    # This needs to equal the entire job, which is 1\n    # Solve for x in the equation total_work_done == 1\n    # x = (Bob's total work + Alice's work without days off - 1) / Alice's work rate\n    x = (bob_work_rate * 27 + alice_work_rate * 27 - 1) / alice_work_rate\n\n    return x\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0 or C == 0:  # Skip if A or C is zero since they are the first digits\n            continue\n        num1 = 100 * A + 10 * B + A\n        num2 = 100 * C + 10 * D + C\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    # Pip has 2 more candies than Bud\n    equation1 = Eq(pip, bud + 2)\n    # Total candies they have\n    equation2 = Eq(pip + bud, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the price of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas based on the solved price of a banana\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # declaring symbols\n    days, pages = symbols('days pages')\n\n    # If Vanessa reads 30 pages a day, she finishes 2 days after deadline\n    eq1 = Eq(30 * (days + 2), pages)\n\n    # If she reads 39 pages a day, she finishes 4 days before deadline\n    eq2 = Eq(39 * (days - 4), pages)\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2), (days, pages))\n\n    return solutions\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202020220202020'  # one cycle of the sequence\n    cycle_length = len(sequence)\n    num_full_cycles = 535 // cycle_length\n    remaining_digits = 535 % cycle_length\n\n    twos_in_full_cycle = sequence.count('2')\n    twos_in_partial_cycle = sequence[:remaining_digits].count('2')\n\n    total_twos = (num_full_cycles * twos_in_full_cycle) + twos_in_partial_cycle\n    \n    return total_twos\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(x, y):\n        return x * x + y * y - x * y\n    \n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    equation1 = Eq(5*adults + 3*children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt = symbols('belt')\n    dress = 3 * belt\n    shirt = 2 * dress\n    difference_eq = Eq(shirt - belt, 155)\n\n    solutions = solve(difference_eq, belt)\n\n    belt_cost = solutions[0]\n    dress_cost = 3 * belt_cost\n    shirt_cost = 2 * dress_cost\n\n    cost_difference = dress_cost - shirt_cost\n\n    return cost_difference\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of fifty-cent coins Owen originally had\n    # Let y be the number of one-dollar coins Owen originally had\n    x, y = symbols('x y')\n    \n    # After receiving more coins Owen has:\n    # fifty-cent coins: x + 10 (each worth 0.50 dollars so 10*0.5 = 5 dollars)\n    # one-dollar coins: y + 10\n    \n    # According to the first condition: (2/7) of all coins are fifty-cent coins\n    # Hence, the rest, (5/7) of all coins are one-dollar coins.\n    equation1 = Eq(x / (x + y), 2 / 7)\n    \n    # In the end, he has twice as many one-dollar coins as fifty-cent coins\n    equation2 = Eq(y + 10, 2 * (x + 10))\n    \n    # Solve the two equations to find the original numbers of coins\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The total number of coins Owen originally had is sum of x and y\n    total_coins = solutions[x] + solutions[y]\n    \n    return total_coins\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_saved_per_day = 7\n    brenda_saved_per_day = 6\n    andy_total = 378\n\n    days_taken = andy_total // andy_saved_per_day\n    brenda_total = brenda_saved_per_day * days_taken\n\n    return brenda_total\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2 / 3\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # Define the variables\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n    \n    # Solve the system of equations\n    # Let x be the number of correct answers, therefore (10 - x) is the number of incorrect answers\n    # Equation: 6x - 2(10 - x) = 44\n    # Simplify the equation to find x\n    x = (total_points + 2 * total_questions) / (points_correct + abs(points_incorrect))\n    \n    # Return the number of correct answers\n    return int(x)\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    contestants = 8\n    ans = factorial(contestants) // factorial(contestants - 3)\n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_list = [30, 40, 50] * 3\n    ans = sum(sum_list)\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 1 - 0.60  # 100% - 60% = 40%\n    total_masks = int(360 / remaining_work_percentage)\n    return total_masks\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume proportion is 100%, let's denote it as 1 for calculation\n    original_volume_proportion = 1\n    \n    # Increase in length by 10% -> 1 + 10% = 1 + 0.10 = 1.10\n    new_length_proportion = 1.10\n    \n    # Reduction in breadth to 4/5 -> 4/5\n    new_breadth_proportion = 4/5\n    \n    # Ratio of new height to original height is 11:10 -> 11/10\n    new_height_proportion = 11/10\n\n    # New volume is the product of these changes in proportions\n    new_volume_proportion = original_volume_proportion * new_length_proportion * new_breadth_proportion * new_height_proportion\n    \n    # To express as a percentage, we multiply by 100\n    new_volume_percentage = new_volume_proportion * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles Anna, Betsy and Charlene end up with as A, B and C respectively\n    A, B, C = symbols('A B C')\n    \n    # Set up the equations based on the problem statement\n    # The total number of marbles is conserved and equals 168\n    total_marbles_eq = Eq(A + B + C, 168)\n    \n    # Charlene gives 15 marbles to Betsy\n    charlene_to_betsy_eq = Eq(C, B + 15)\n    \n    # Betsy gives 8 marbles to Anna\n    betsy_to_anna_eq = Eq(B, A + 8)\n    \n    # The final ratio of the marbles Anna, Betsy and Charlene have is 2:5:7\n    ratio_eq = Eq(2 * B, 5 * A)\n    ratio_eq_2 = Eq(2 * C, 7 * A)\n    \n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, charlene_to_betsy_eq, betsy_to_anna_eq, ratio_eq, ratio_eq_2), (A, B, C))\n    \n    # Calculate Betsy's original number of marbles before any transactions\n    betsy_original = solutions[B] + 15 - 8  # Betsy gives 8 to Anna and receives 15 from Charlene\n\n    return betsy_original\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    x = symbols('x') # Let x be the number of mushrooms gathered in the first hour\n    equation = Eq(x + 26, total_mushrooms - x)\n\n    mushrooms_first_hour = solve(equation, x)[0]\n    mushrooms_second_hour = total_mushrooms - mushrooms_first_hour\n\n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Let's assume Noa solves the most questions.\n    # To maximize the number of questions Noa solves, we need to minimize the number of questions the others solve.\n    # If the students are named A, B, C, D, and Noa, and each must solve a different number of questions.\n    # Give 1 question to A, 2 to B, 3 to C, and 4 to D.\n    # Now, we calculate the remaining questions for Noa.\n    \n    remaining_questions = 40 - (1 + 2 + 3 + 4)\n    return remaining_questions\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89  # Coldest temperature\n    hottest = 58   # Hottest temperature\n    # The difference is calculated by subtracting coldest from hottest\n    difference = hottest - coldest  \n    return difference\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    scan_age, ted_age = symbols('scan_age ted_age')\n\n    # Current age ratio equation: scan : ted = 1:4\n    current_ratio_eq = Eq(scan_age, ted_age / 4)\n\n    # Future age ratio equation: (scan+4) : (ted+4) = 1:3\n    future_ratio_eq = Eq(scan_age + 4, (ted_age + 4) / 3)\n\n    # Solve the system of equations to find current ages of Scan and Ted\n    current_ages = solve((current_ratio_eq, future_ratio_eq), (scan_age, ted_age))\n    scan_current_age = current_ages[scan_age]\n    ted_current_age = current_ages[ted_age]\n\n    # To find out the number of years ago the ratio was 1:9, we use\n    # the current ages of Scan and Ted and add an unknown number of years 'y'\n    # (scan - y) : (ted - y) = 1:9\n    # We rearrange and solve for 'y'\n    y = symbols('y')\n    past_ratio_eq = Eq(scan_current_age - y, 9 * (ted_current_age - y))\n\n    # Solve the equation for y\n    past_years = solve(past_ratio_eq, y)\n\n    return past_years[0]\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the distance Star jogs from 6:30 to 7:30 at 6.5 miles per hour\n    jogging_speed = 6.5  # miles per hour\n    jogging_time = 1  # hour (from 6:30 to 7:30 is one hour)\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance Star walks from 7:30 to 9:30 at 4.5 miles per hour\n    walking_speed = 4.5  # miles per hour\n    walking_time = 2  # hours (from 7:30 to 9:30 is two hours)\n    walking_distance = walking_speed * walking_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    nearest_1000 = round(number, -3)\n    return nearest_1000\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3\n    real_tree_height_m = 12\n\n    model_tree_height_cm = real_tree_height_m * scale_ratio * 100\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If we distribute 2 candies to each of the 20 students, it is possible that no one gets 3 candies.\n    # Therefore, we need to give out one more piece of candy to ensure at least one student gets 3 candies.\n    candies = 2 * 20 + 1\n    return candies\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of non-foldable bicycles and y be the number of foldable bicycles\n    x, y = symbols('x y')\n\n    # Total number of bicycles before sales\n    equation1 = Eq(x + y, 476)\n\n    # Bicycles sold (208) is equal to total - bicycles_left\n    # bicycles_left = non-foldable_left + foldable_left\n    # non-foldable_left = 5/9 * x, foldable_left = 4/7 * y\n    equation2 = Eq((5/9)*x + (4/7)*y + 208, 476)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the number of foldable bicycles sold\n    foldable_sold = solutions[y] - (4/7)*solutions[y]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # the snail climbs up 10 meters during the day\n        if height_climbed >= 45:\n            break  # the snail has reached or passed the top of the tower\n        height_climbed -= day  # the snail slides down x meters during the x-th night\n    return day\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = 5 * 34\n    return ans\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Given that number of mollies is 2 times the number of goldfish\n    # And number of goldfish is twice the number of guppies\n    # Let the number of guppies be x, thus the number of goldfish is 2x\n    # Therefore, the number of mollies is 2 * 2x = 4x\n    # According to the problem, there are 276 mollies in the pond, which means 4x = 276\n\n    # Now we solve for x\n    x = 276 // 4  # because 4x = 276\n\n    # Number of mollies is 276 (given)\n    num_mollies = 276\n    # Number of guppies is x\n    num_guppies = x\n\n    # Number of mollies more than guppies is the difference between the two\n    difference = num_mollies - num_guppies\n\n    return difference\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_per_correct = 8\n    score_per_wrong = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * score_per_correct + wrong_answers * score_per_wrong\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60\n    total_value = 765\n    percentage_value = (percentage / 100) * total_value\n    return percentage_value\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Yohan needs to take at most 1 white sock for a pair of white socks.\n    # But he might take red and black socks first.\n    # In the worst-case scenario, he will take all red and all black socks out\n    # before he starts taking white socks, to ensure he has at least one pair of white.\n    max_white_socks_without_pair = 1  # He can take one white sock without forming a pair\n\n    # The maximum number of red and black socks he can take without getting a white pair\n    max_red_black_socks = 10 + 10\n    \n    # Now, he takes one more white sock to get a pair\n    first_white_pair = max_white_socks_without_pair + 1\n    \n    # Total socks he must take to ensure he has a pair of white socks\n    max_socks = max_red_black_socks + first_white_pair\n\n    return max_socks\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    # If Jamie planted 3 flowers between every 2 lamp posts, then the number of gaps\n    # between lamp posts is equal to the total flowers divided by flowers per gap.\n    flowers_per_gap = 3\n    total_flowers = 30\n    total_gaps = total_flowers // flowers_per_gap\n\n    # The total number of gaps is one less than the number of lamp posts.\n    # Hence, the number of lamp posts is total_gaps + 1.\n    lamp_posts = total_gaps + 1\n\n    # The distance between every two lamp posts can be found by dividing\n    # the total road length by the number of gaps between the lamp posts.\n    road_length = 50  # meters\n    distance_between_lamp_posts = road_length / total_gaps\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_difference = 17\n    \n    final_temperature = initial_temperature - temperature_difference\n\n    return final_temperature\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return int(48 / (4/5))\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5  # We want to find the 5th number\n\n    # Since each number is found by dividing the previous by 4, this is a geometric sequence.\n    # The nth term of a geometric sequence is given by: a * r^(n-1), where\n    # a is the first term, r is the common ratio, and n is the term number.\n    nth_number = first_number * (ratio ** (n - 1))\n\n    return nth_number\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    friends = 6\n\n    sweets_per_friend = (total_sweets - for_sister) // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Effective length is the actual length available for planting bushes.\n    effective_length = side_length - 2 * distance_from_edge\n    # Number of bushes per side equals the effective length divided by the distance between bushes.\n    # Since bushes are also 1.5m away from the corners, no extra bush is needed at the ends.\n    bushes_per_side = effective_length // distance_between_bushes\n    # Total bushes required is 4 times bushes_per_side since there are 4 sides.\n    total_bushes_required = bushes_per_side * 4\n\n    return int(total_bushes_required)\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since each child must get at least one apple and no two can get the same number,\n    # we can start by giving each child one apple. This accounts for 5 apples,\n    # so we have 19 - 5 = 14 apples left to distribute.\n    \n    # We want to maximize the number of apples for the child with the most, so we\n    # distribute the remaining apples one by one to the children with the least apples.\n    # We can create an array to keep track of the apples each child has.\n    \n    children = [1, 1, 1, 1, 1] # Start each child with one apple\n    apples_left = 14\n\n    # Distribute the remaining apples, always giving to the child with the least\n    while apples_left > 0:\n        # Sort the children to ensure we're giving to the one with the least apples\n        children.sort()\n        # Give one apple to the child with the least apples\n        children[0] += 1\n        # One apple has been given out\n        apples_left -= 1\n\n    # Once there are no more apples to distribute, the child with the most apples\n    # will be the last element in the sorted array (since we sort it on each iteration)\n    max_apples = children[-1]\n\n    return max_apples\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van1 = 132  # speed of the faster van\n    speed_van2 = 78   # speed of the slower van\n    time = 8          # hours\n\n    distance_apart = (speed_van1 + speed_van2) * time\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Calculate the work done by P in one hour\n    p_work_per_hour = 1 / (12 * 8)\n    \n    # Calculate the work done by Q in one hour\n    q_work_per_hour = 1 / (8 * 10)\n    \n    # Calculate the combined work per hour when P and Q work together\n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n    \n    # Working 8 hours a day, calculate the total work done in one day by P and Q together\n    work_per_day = combined_work_per_hour * 8\n    \n    # Calculate the total number of days required to complete the job by P and Q together\n    total_days = 1 / work_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 0.60\n    total_masks = remaining_masks / (1 - completed_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    count = 0\n    for bags in range(2, num_apples + 1, 2):\n        if num_apples % bags == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original score\n    x = symbols('x')\n\n    # Create the equation based on the given information\n    equation = Eq(x - 30, (x / 2) + 10)\n\n    # Solve the equation for x\n    original_score = solve(equation, x)[0]\n\n    return original_score\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n    \n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given: 9 rabbits = 3 goats and 2 goats = 4 cows\n    # We need to find the number of rabbits that can be exchanged for 2 cows\n\n    # First, find how many goats can be exchanged for 2 cows\n    goats_for_cows = 2 / (4 / 2)  # From the relation 2 goats = 4 cows\n\n    # Now, find how many rabbits can be exchanged for the goats equivalent of 2 cows\n    rabbits_for_goats = (9 / 3) * goats_for_cows  # From the relation 9 rabbits = 3 goats\n\n    return rabbits_for_goats\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n\n    # Use the formula for the sum of an arithmetic series:\n    # Sum = n/2 * (2 * a + (n - 1) * d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n\n    # The general equation is:\n    # 4 * correct_answers - 1 * wrong_answers = total_score\n    # correct_answers + wrong_answers = attempted_questions\n\n    for correct_answers in range(attempted_questions + 1):\n        wrong_answers = attempted_questions - correct_answers\n        if 4 * correct_answers - wrong_answers == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = custom_op(10, 9)\n    ans = custom_op(ans, 8)\n    ans = custom_op(ans, 7)\n    ans = custom_op(ans, 6)\n    ans = custom_op(ans, 5)\n    ans = custom_op(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    planned_profit = 0.60\n    actual_profit = 0.80 * planned_profit\n\n    first_day_profit = 0.70 * (1 + 0.60)\n    second_day_books = 1 - 0.70\n    second_day_profit = second_day_books + second_day_books * actual_profit / (1 - actual_profit)\n\n    discount_rate = 1 - second_day_profit / second_day_books\n\n    return discount_rate\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    percent_boys = 40\n    num_girls = 72\n    percent_girls = 100 - percent_boys\n\n    total_children = (num_girls * 100) / percent_girls\n\n    return total_children\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let's denote x as the number of pencils and y as the number of pens originally\n    # We have the ratio 4x = 5y or y = (4/5)x\n    # When we take out a pen and replace it with a pencil, we have:\n    # New number of pencils is x + 1\n    # New number of pens is y - 1\n    # The new ratio is (x + 1)/(y - 1) = 7/8\n\n    # Setting up the system of equations based on the given ratios\n    # 4x = 5y\n    # 8(x + 1) = 7(y - 1)\n\n    # Solving the system\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(4 * x, 5 * y)\n    equation2 = Eq(8 * (x + 1), 7 * (y - 1))\n\n    solution = solve((equation1, equation2), (x, y))\n\n    # Adding up the total number of pencils and pens\n    total = solution[x] + solution[y]\n\n    return total\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    final_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    \n    return final_strawberries\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_numbers = set()\n\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:  # Two different numbers.\n                number = d1 * 10 + d2\n                if number % 2 == 1:  # It's an odd number.\n                    odd_numbers.add(number)\n\n    return len(odd_numbers)\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # The last page number before the missing pages is 14 and newspapers have\n    # pages such that the front and back of a single sheet have consecutive numbers.\n    # This means the first missing page number, which is on the back of the sheet\n    # with page number 14, is 15.\n    \n    # The first page number after the missing pages is 35, which means the missing\n    # pages continue until the page before it, which is page 34. Also, since page\n    # 35 is the first page seen after the missing pages, it must be on the front of\n    # a new sheet. Therefore, the last missing page, page 34, is on the back side\n    # of the last missing sheet.\n\n    # Calculate the total number of missing page numbers.\n    total_missing_pages = 35 - 15\n\n    # Since each sheet contains 2 pages (front and back), \n    # divide the total missing page numbers by 2 to get the number of sheets.\n    missing_sheets = total_missing_pages // 2\n\n    return missing_sheets\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_num = 10\n    end_num = 25\n    num_counted = end_num - start_num + 1\n    return num_counted\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    boys, girls = symbols('boys girls')\n\n    # Equation for the total number of children\n    equation1 = Eq(boys + girls, 38)\n\n    # Equation for the total number of balloons\n    equation2 = Eq(2 * boys + 4 * girls, 126)\n\n    # Solve the system of equations for the number of boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "from fractions import Fraction\n\ndef solution():\n    prod = 1\n    for i in range(3, 20, 2):\n        prod *= Fraction(1) + Fraction(2, i)\n    return prod\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_cm = 85\n    roll_length_m = 20\n    roll_length_cm = roll_length_m * 100  # convert meters to centimeters\n    strings_needed = 400\n\n    total_length_needed_cm = strings_needed * string_length_cm\n    rolls_needed = total_length_needed_cm / roll_length_cm\n\n    # Since she cannot buy a fraction of a roll, round up to the nearest whole number\n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Emma and John's current age\n    emma, john = symbols('emma john')\n\n    # Define the equations based on the problem\n    equation1 = Eq(john, emma + 7)                  # John is 7 years older than Emma\n    equation2 = Eq(emma + john + 2*3, 27)           # In 3 years, the sum of their ages will be 27\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    # Return Emma's age\n    return solutions[emma]\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the initial number of cows and 'g' the initial number of goats\n    c, g = symbols('c g')\n\n    # We are given that 65% of the animals were cows initially\n    # This means that the remaining 35% were goats\n    equation1 = Eq(c / (c + g), 65 / 100)\n\n    # 240 more cows and goats are added, cows become 85% of the total\n    # The number of goats doubled\n    equation2 = Eq((c + 240) / (c + g + 240), 85 / 100)\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # We want the number of goats initially, which is 'g'\n    return solutions[g]\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Mike's salary\n    salary = symbols('salary')\n\n    # Amount donated to charity\n    donation = salary / 4\n\n    # Amount spent on food\n    food = 5/6 * (salary - donation)\n\n    # Equation representing the condition given in the problem\n    equation = Eq(food, donation + 78)\n\n    # Solve for Mike's salary\n    salary_value = solve(equation, salary)\n\n    return salary_value[0]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # a_n = a_1 + (n-1)d\n    # 57 = a_1 + 6d\n    # 89 = a_1 + 14d\n    \n    # Solve the system of equations:\n    # a_1 + 6d = 57\n    # a_1 + 14d = 89\n    \n    # Subtract the first equation from the second one to find d:\n    # (a_1 + 14d) - (a_1 + 6d) = 89 - 57\n    # 8d = 32\n    # d = 32 / 8\n    d = (89 - 57) // (15 - 7)\n    \n    return d\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number only depends on the last digit of factors in multiplication\n    # The last digit of powers of 2 repeats with a cycle of 4: [2, 4, 8, 6]\n    # The last digit of powers of 3 repeats with a cycle of 4: [3, 9, 7, 1]\n    \n    # 2017 modulo 4 to find the position in the cycle\n    last_digit_2 = pow(2, 2017 % 4, 10)\n    last_digit_3 = pow(3, 2017 % 4, 10)\n\n    # Multiplying the last digits and taking the last digit of the result\n    ans = (last_digit_2 * last_digit_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 400:\n        return ans\n        ans += 2*3*5*7\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's call the time David walks with the initial speed \"t\" (in minutes)\n    # t = time at first speed 150m/min before increasing his speed\n    # because David increases his speed 10 minutes later, hence he walked at 150m/min for 10+t minutes\n    # After that, he walks with a new speed of 150m/min + 50m/min = 200m/min for some time \"t\" as well\n    \n    # Let's denote total_distance as the total distance David walks, which is 3700m\n    total_distance = 3700\n    \n    # The total distance before speed increase is speed * time\n    first_distance = 150 * (10 + t)\n    \n    # The total distance after speed increase is new_speed * same_time\n    second_distance = 200 * t\n    \n    # Total distance is the sum of both distances\n    total_distance_eq = Eq(first_distance + second_distance, total_distance)\n    \n    # We solve for t to get the time spent walking at 150m/min and at 200m/min\n    t = symbols('t')\n    t_solution = solve(total_distance_eq, t)\n    \n    # The sum of the time spent before and after speed increase is the total time David spent in the park\n    # which is 10 minutes (before speed increase) + 2*t (both periods at different speeds)\n    total_time = 10 + 2 * t_solution[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len(set([4, 7, A, 1, B, 9, C])) == 7:  # All digits must be different\n                    number = 4700000 + A * 10000 + 1000 + B * 10 + 9 * 100 + C\n                    if number % 9 == 0:  # The number must be divisible by 9\n                        return A + B + C, number\n\nans, number = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_bought_per_week = 45\n    sweets_eaten_per_week = 60\n    desired_sweets = 150\n\n    sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    weeks_needed = (initial_sweets - desired_sweets) / sweets_change_per_week\n\n    return weeks_needed\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for price of an apple and an orange\n    apple, orange = symbols('apple orange')\n\n    # Equation for Jessie: 2 apples + 1 orange = 40p\n    equation1 = Eq(2 * apple + orange, 40)\n\n    # Equation for Bella: 1 apple + 2 oranges = 35p\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    # Solve for price of an apple and an orange\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Equation for Carrie: 1 apple + 1 orange\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 1\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # As each place (hundreds, tens, ones) can have any of the three digits (5, 6, 7),\n    # and each digit can be used more than once, we have 3 choices for each place.\n    choices_per_place = 3\n    \n    # Since there are three places in a three-digit number, \n    # the total number of different numbers is simply 3^3.\n    total_numbers = choices_per_place ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    total_spent_on_rackets = 2 * racket_price\n    \n    remaining_money = total_money - total_spent_on_rackets\n    num_balls = remaining_money // ball_price\n    \n    return int(num_balls)\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # At worst, you may end up picking all balls of the two colors first.\n    # That would be 4 purple balls + 4 white balls.\n    # To ensure you have 3 different colored balls, you need to pick at least one more,\n    # which will definitely be the third color (red in this case).\n    worst_case_balls = 4 + 4 + 1\n    \n    return worst_case_balls\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n\n    while heinz_chocolates < jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n    \n    return week\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    durians_sold = total_durians * (4 / 6)\n    durians_left = total_durians - durians_sold\n    return durians_left\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    total_boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * total_boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # A right angled triangle can be formed by choosing a point (vertex of the right angle)\n    # and two other points that are two and four places away (in either direction).\n    # This way, the triangle has one side as the diameter of the inscribed circle.\n    # There are 12 such points, and for each point there are 2 ways to choose the remaining 2 points\n    # (clockwise and counterclockwise), giving us 4 right angled triangles per chosen point.\n    # Each of these triangles can be rotated 12 times (once for each point).\n    \n    # Calculating the total number of such triangles:\n    right_angled_triangles = 12 * 4\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n    return solutions[0]\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples], solutions[oranges]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    # r for racket and s for shuttlecock\n    first_eq = Eq(racket + 5 * shuttlecock, 205)\n    second_eq = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((first_eq, second_eq), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    position_from_start = 11\n    position_from_end = position_from_start\n    total_animals = position_from_start + position_from_end - 1\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy divides 24 roses into 3 vases.\n    roses_in_each_vase_first = 24 // 3\n    \n    # Her mother brings more roses which are then divided equally in 4 vases.\n    # Assuming the quantity brought by her mother is a multiple of 4, and each\n    # vase (including the 3 initial ones) now has the same amount of roses\n    \n    # Let's denote x as the total number of roses added by her mother\n    # Then each of the four new vases will have (24 + x) / 7 roses\n    # Therefore, we can establish that (24 + x) / 7 must be an integer that is also a multiple of 4\n    \n    # Loop through possible multiples of 4 and check which one yields a total number of roses (24 + x)\n    # that is divisible by 7\n    i = 1\n    while True:\n        if (24 + 4*i) % 7 == 0:\n            total_roses = 24 + 4*i\n            break\n        i += 1\n\n    return total_roses\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 50  # in cents\n    mamee_cost = haribo_cost - 30  # in cents, it costs 30 cents less than Haribo\n    big_jelly_cost = 6 * mamee_cost  # in cents, big packet of jelly costs 6 times Mamee\n\n    # Convert the final answer to dollars from cents\n    return big_jelly_cost / 100\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # These congruences represent the problem:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + -2) / 2\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    # Assuming Will hates mint, he won't eat the mint candy\n    # so we count all except the mint candy\n    candies_will_can_eat = lemon_candies + cherry_candies\n\n    return candies_will_can_eat\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    price_strawberry_cake = 3\n    price_marble_cake = price_strawberry_cake + 2\n    price_cheese_cake = 3 * price_marble_cake\n    price_two_cheese_cakes = 2 * price_cheese_cake\n    return price_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 80:\n        return num\n        num += 2 * 3 * 4 * 5\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    number_in_words = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four',\n        5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine',\n        10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen',\n        14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen',\n        18: 'eighteen', 19: 'nineteen', 20: 'twenty', 30: 'thirty',\n        40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy',\n        80: 'eighty', 90: 'ninety', 100: 'hundred',\n        1000: 'thousand'\n    }\n    \n    def two_digit_words(n):\n        if n <= 20:\n            return number_in_words[n]\n        elif n < 100:\n            if n % 10 == 0:\n                return number_in_words[n]\n            else:\n                return number_in_words[n // 10 * 10] + '-' + number_in_words[n % 10]\n        else:\n            return 'Invalid input for two_digit_words'\n    \n    def three_digit_words(n):\n        if n < 100:\n            return two_digit_words(n)\n        else:\n            remainder = n % 100\n            return number_in_words[n // 100] + ' hundred' + ((' and ' + two_digit_words(remainder)) if remainder else '')\n    \n    # Since the input number is at most four digits, we can directly use three_digit_words\n    words = ''\n    if number >= 1000:\n        thousands = number // 1000\n        words += three_digit_words(thousands) + ' thousand'\n        number %= 1000\n        if number:\n            words += ' '\n    if number:\n        words += three_digit_words(number)\n    \n    return words\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    number_of_teachers = 16\n    games_played = number_of_teachers - 1  # In a single elimination tournament, the number of games is always one less than the number of players\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(3 * x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n    \n    width = (ratio_width / ratio_height) * height\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    numbers_to_add = [20, 19, 18, 17, 16]\n    numbers_to_subtract = [15, 14, 13, 12, 11]\n\n    ans = sum(numbers_to_add) - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wallet, watch = symbols('wallet watch')\n    \n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n    \n    solutions = solve((equation1, equation2), (wallet, watch))\n    \n    return solutions[wallet]\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for ages of children\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Defining the equations based on provided information\n    equation1 = Eq(younger_son, older_daughter * 2)  # younger son is twice the age of older daughter\n    equation2 = Eq(older_son, younger_son + 3)  # two sons were born three years apart\n    equation3 = Eq(older_daughter, younger_daughter + 2)  # two daughters were born two years apart\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)  # sum of their ages is 55\n\n    # Solving the equations for the ages of the children\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # The youngest child could be the younger daughter or the younger son, depending on the solution\n    youngest_age = min(solutions[younger_daughter], solutions[younger_son])\n\n    return youngest_age\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurrent_sequence = \"428571\"  # Recurring sequence of digits for 3/7\n    num_of_digits = 58\n    sum_of_digits = 0\n\n    for i in range(num_of_digits):\n        sum_of_digits += int(recurrent_sequence[i % len(recurrent_sequence)])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Range of digits is 1 through 9 due to 'positive digits' constraint.\n    for A in range(1, 10):\n        for B in range(1, 10):\n            # B is different from A\n            if B == A:\n                continue\n            # AB is divisible by 2 if B is even\n            if B % 2 != 0:\n                continue\n            for C in range(1, 10):\n                # C is different from both B and A\n                if C == A or C == B:\n                    continue\n                # BC is divisible by 3 if sum B+C is divisible by 3\n                if (B + C) % 3 != 0:\n                    continue\n                for D in range(1, 10):\n                    # D is different from C, B, and A\n                    if D == A or D == B or D == C:\n                        continue\n                    # CD is divisible by 5 if D is 0 or 5; but D cannot be 0, so it must be 5.\n                    if D != 5:\n                        continue\n                    # ABC is divisible by 9 if sum A+B+C is divisible by 9\n                    if (A + B + C) % 9 != 0:\n                        continue\n                    # BCD is divisible by 11 if B+C-D or B-C+D is divisible by 11\n                    if (B + C - D) % 11 != 0 and (B - C + D) % 11 != 0:\n                        continue\n                    \n                    # If all conditions are satisfied, return the number\n                    return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    \n    # Calculate the factorial of the total number of books\n    total_permutations = factorial(total_books)\n\n    # Divide by factorial of the number of same books to account for indistinguishable permutations\n    ans = total_permutations // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    \n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string_length = 13\n    nick_string_length = tom_string_length + 25\n    difference_in_length = nick_string_length - tom_string_length\n    return difference_in_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Calculate the usable length after planting the first cauliflower\n    usable_length_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # Calculate the number of cauliflowers that can be planted\n    # Subtract one spacing because no space is needed after the last cauliflower\n    num_cauliflowers = (usable_length_cm + cauliflower_spacing_cm) // cauliflower_spacing_cm\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged from A to B.\n    x = symbols('x')\n\n    # After exchange, the amount of sugar in A becomes: (50 * 0.11 - 0.11 * x + 0.47 * x)\n    # And the sugar in B becomes: (50 * 0.47 - 0.47 * x + 0.11 * x)\n    # The final concentration in A and B should be equal:\n    equation = Eq((50 * 0.11 - 0.11 * x + 0.47 * x) / 50, (50 * 0.47 - 0.47 * x + 0.11 * x) / 50)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    from itertools import permutations\n    digits = ['1', '3', '6']\n    all_numbers = set(int(''.join(p)) for p in permutations(digits*3, 3))\n    three_digit_numbers = { number for number in all_numbers if number >= 100 }\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n\n    prime_numbers = []\n    for number in range(2, 51):\n        if isprime(number) and isprime(number + 6) and isprime(number - 6):\n            prime_numbers.append(number)\n    \n    ans = len(prime_numbers), prime_numbers\n    return ans\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    piles = 4\n    # We generate all possible combinations of 4 piles and then subtract from candies to get the possible combinations for the 4th pile.\n    all_combinations = combinations(range(1, candies - (piles - 1)), piles - 1)\n    \n    count = 0\n    for combination in all_combinations:\n        if sum(combination) < candies:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Adding 64cm to 3.7m after converting cm to m\n    total_to_subtract = 2 + 7 / 100  # Converting 7cm to m and then adding to 2m\n    ans = total_metres - total_to_subtract  # Subtracting the 2m 7cm from the total\n    return ans\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    sequence = [1, 2, 3, 5, 8, 13, 21]\n    next_number = sequence[-1] + sequence[-2]\n    return next_number\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n    \n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The given sequence is a geometric sequence where each term is the previous term multiplied by 2.\n    # To find the 20th term, we would do 2^(20-1) because the first term is 2^0 which is 1.\n    # To find the 17th term, we would do 2^(17-1) for the same reason.\n    \n    # 20th term\n    term_20 = 2 ** (20 - 1)\n    \n    # 17th term\n    term_17 = 2 ** (17 - 1)\n    \n    # Dividing the 20th term by the 17th term\n    ans = term_20 / term_17\n    \n    return ans\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    num_working_days = 6  # From Monday to Saturday\n\n    total_weekly_earnings = average_daily_earnings * num_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    average_initial = 60\n    people_initial = 3\n    total_books_initial = average_initial * people_initial\n\n    average_final = average_initial + 10\n    people_final = people_initial + 1\n    total_books_final = average_final * people_final\n\n    dennis_books = total_books_final - total_books_initial\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n\n    for x in range(1, sum_of_numbers // 2 + 1):\n        y = sum_of_numbers - x\n        product = x * y\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john_to_mike = 2 / 3\n    mikes_height = johns_height / ratio_john_to_mike\n    return mikes_height\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange\n\n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n    \n    # Initialize largest two-digit square\n    largest_two_digit_square = 9\n    for i in range(10, 100):\n        if i*i < 100:\n            largest_two_digit_square = i\n        else:\n            break\n    largest_two_digit_square = largest_two_digit_square ** 2\n\n    return smallest_two_digit_prime * largest_two_digit_square\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    # The distance between the 1st and 4th flag is the distance of 3 intervals\n    distance_1_to_4 = 9  # meters\n    \n    # Therefore, the distance between two consecutive flags is\n    distance_between_flags = distance_1_to_4 / 3\n    \n    # The distance between the 1st and 9th flag would be the distance of 8 intervals\n    distance_1_to_9 = distance_between_flags * 8\n    \n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    number = 4 + 0.6 + 0.07\n    return number\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Check if the total number of chocolate bars (233) is a prime number\n    # If it is a prime number, it means it cannot be divided evenly among students\n    # such that the number of students is greater than 1 and less than 233\n    # because a prime number has only two divisors: 1 and itself.\n    is_prime = True\n    for i in range(2, int(233**0.5) + 1):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_still_water = 22  # speed of the ship in still water in km/h\n    speed_current = 3       # speed of the current in km/h\n    distance = 200          # distance to travel downstream in km\n\n    speed_downstream = speed_still_water + speed_current  # speed downstream in km/h\n    time = distance / speed_downstream                    # time to travel downstream in hours\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Cost of one pencil\n    pencil_cost = 2\n    # Cost of one pen\n    pen_cost = 4\n\n    # Number of pencils per pen\n    pencils_per_pen = pen_cost / pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of peaches and the number of students in Class B\n    peaches, students_B = symbols('peaches students_B')\n    \n    # Equations based on the problem statement\n    # Equation for Class A: peaches = 5 * (students_B + 3) + 10\n    # Equation for Class B: peaches = 8 * students_B - 2\n    \n    # Set up the equations\n    equation1 = Eq(peaches, 5 * (students_B + 3) + 10)\n    equation2 = Eq(peaches, 8 * students_B - 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (peaches, students_B))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    final_score = 36\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of incorrect answers\n    # We can set up the equation based on the points system\n    # points_correct * x + points_incorrect * (total_questions - x) = final_score\n\n    # First, we simplify this equation\n    # 6x - 2(10 - x) = 36\n    # 6x - 20 + 2x = 36\n    # 8x = 36 + 20\n    # 8x = 56\n    # x = 56 / 8\n    correct_answers = (final_score + total_questions * points_incorrect) / (points_correct - points_incorrect)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    # Initialize the cube number\n    cube_number = 28512\n    \n    # Find the cube factors of 28512\n    for h in range(1, cube_number + 1):\n        if cube_number % h == 0:\n            cube_root = (cube_number // h) ** (1/3)\n            if cube_root.is_integer():\n                return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to make sure he gets 2 M&M's chips of different colors,\n    # Let's calculate the worst-case scenario for him.\n\n    # Worst case: he picks all chips of one color first before getting to the other colors.\n    # To ensure he gets two chips of different colors, he'd have to take all 3 red chips,\n    # then all 4 yellow chips, and then he'll get a different color chip on the next pick for sure.\n\n    # So he needs to take all of one color, plus all of another, then one more to guarantee a different color.\n    smallest_number_chips = 3 + 4 + 1  # All reds, all yellows, plus one more\n\n    return smallest_number_chips\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        # Use the formula: !n = (n - 1) * (!(n - 1) + !(n - 2))\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    return derangement(7)\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # There are initially 4 gaps created by the 3 playing a sketch performances\n    # We need to place at least 1 dancing performance in each, so we place them first\n    remaining_dancing = 7 - 3\n    \n    # Now, we have remaining_dancing performances left, which we can place in any of the 4 gaps\n    # between the playing performances or before the first or after the last playing performance,\n    # which in total gives us 5 positions to place the remaining dances.\n    positions = 5\n    \n    # Calculate the number of ways to distribute remaining_dancing dances into positions gaps\n    # This is a problem of finding combinations with repetition: C(n+k-1, k)\n    # where n is positions and k is remaining_dancing\n    ways_to_distribute_dancing = factorial(positions + remaining_dancing - 1) // (factorial(remaining_dancing) * factorial(positions - 1))\n    \n    # Calculate the number of ways to arrange the 3 playing a sketch performances\n    ways_to_arrange_playing = factorial(3)\n    \n    # The total number of ways is the product of ways_to_distribute_dancing and ways_to_arrange_playing\n    total_ways = ways_to_distribute_dancing * ways_to_arrange_playing\n    \n    return total_ways\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Using the difference of squares formula: a^2 - b^2 = (a - b)(a + b)\n    # Here, a is 31415926, and b is 31415925, hence a - b = 1, and a + b = 31415926 + 31415925\n    a_minus_b = 1\n    a_plus_b = 31415926 + 31415925\n\n    # Applying the difference of two squares formula reversely\n    ans = a_minus_b * a_plus_b\n\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n    \n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odd_digits_count = 5\n\n    # Each of the three digits in the number can be any of the 5 odd digits\n    # Multiplication rule (Law of Multiplication for counting)\n    total_count = odd_digits_count * odd_digits_count * odd_digits_count\n\n    return total_count\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number + 2009) % (17 * 19) == 0:\n            return number\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    decimal = \"85274\"\n    length = len(decimal)\n    index = (79 - 1) % length\n    return int(decimal[index])\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    missing_number = total_sum - 1939\n    return missing_number\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n\n    # Each father shakes hands with fathers, mothers, and children of other 9 families\n    # (2 fathers, 2 mothers and 1 child) - 1 (because he won't shake hands with family members)\n    father_handshakes = 9 * (2+2+1-1)\n    \n    # Each mother shakes hands with fathers and children of other 9 families\n    # (2 fathers and 1 child) - 1 (because she won't shake hands with her child)\n    mother_handshakes = 9 * (2+1-1)\n    \n    # Each child shakes hands with fathers and mothers of other 9 families\n    # (2 fathers and 2 mothers)\n    child_handshakes = 9 * (2+2)\n\n    # Total handshakes is the sum of father_handshakes, mother_handshakes and child_handshakes \n    # multiplied by 10 because there are 10 families\n    total_handshakes = (father_handshakes + mother_handshakes + child_handshakes) * families\n\n    return total_handshakes\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Maximum number of marbles picked without getting all 4 different colors.\n    # This would happen if we picked all but one color.\n    # Since we want at least one of each color, we take all of one color (7 green),\n    # and we're still able to pick 3 more from the rest without completing 4 different colors.\n    max_without_all_colors = 7 + 3\n    \n    # The next marble we pick must be the fourth different color.\n    ans = max_without_all_colors + 1\n    \n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    # starting from the lowest possible ticket number '000'\n    for i in range(999):\n        first_ticket = i\n        second_ticket = i + 1\n        if first_ticket + second_ticket == 777:\n            # The next ticket number after the pair that adds up to 777\n            return second_ticket + 1\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    # Calculate the bill for hours between 40 to 50\n    bill_over_40 = 5 * 10\n    # Calculate the bill for hours between 50 to 60\n    bill_over_50 = 8 * 10\n    hours = 40\n    if bill > bill_over_40:\n        bill -= bill_over_40\n        hours += 10\n    else:\n        hours += bill // 5\n        bill = 0\n\n    if bill > bill_over_50:\n        bill -= bill_over_50\n        hours += 10\n    else:\n        hours += bill // 8\n        bill = 0\n\n    if bill > 0:\n        hours += bill // 15\n\n    return hours\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    decimal_value = 5 / 16\n    return decimal_value\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_income_per_day = 60\n    days_in_a_week = 7\n    total_income = average_income_per_day * days_in_a_week\n    return total_income\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    return 3016 - 100\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def ways_to_step(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return ways_to_step(n-1) + ways_to_step(n-2) + ways_to_step(n-3)\n    \n    # Total ways to reach the fourth step\n    total_ways_to_fourth = ways_to_step(4)\n    \n    # Total ways to reach the last step from the fourth step, avoiding the fifth\n    # Which is equivalent to total ways to reach step 5 and each of those ways will have\n    # the same number of ways to reach step 10 as from step 4. Thus, multiply by number of ways to reach 10-5=5th step.\n    total_ways_from_fourth_to_last = total_ways_to_fourth * ways_to_step(10 - 5)\n    \n    return total_ways_from_fourth_to_last\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    max_possible = 85\n    for i in range(1, max_possible, 2):\n        for j in range(i + 2, max_possible, 2):\n            for k in range(j + 2, max_possible, 2):\n                for l in range(k + 2, max_possible, 2):\n                    for m in range(l + 2, max_possible, 2):\n                        if i + j + k + l + m == 85:\n                            max_possible = max(max_possible, m) \n    return max_possible\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    \n    n = minutes * seconds_per_minute\n    return int(n)\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    \n    remainder = total_coins % children\n    \n    return remainder\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    T = symbols('T')\n    income = symbols('income')\n\n    # First $30,000 taxed at T%\n    first_tax = T / 100 * 30000\n\n    # Amount above $30,000 taxed at (T+3)%\n    remaining_tax = (T + 3) / 100 * (income - 30000)\n\n    # Total tax\n    total_tax = first_tax + remaining_tax\n\n    # Income tax paid is (T+1)% of annual income\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n\n    # As income is more than $30,000, we set the condition income > 30000\n    solution = solve((equation, income > 30000), (T, income))\n\n    # Return only the income, as we are looking for Ryan's annual income\n    return solution[income]\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    for fifty_cent_coins in range(22):\n        twenty_cent_coins = 21 - fifty_cent_coins\n        if fifty_cent_coins * 50 + twenty_cent_coins * 20 == 630:\n            return fifty_cent_coins\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    number = 2\n\n    for _ in range(5):\n        if floor(sqrt(number)) == sqrt(number):\n            count += 1\n        number = number * 10 + 5\n        \n    return count\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 4 girls from 8\n    girl_ways = comb(8, 4)\n    # Number of ways to choose 3 boys from 12\n    boy_ways = comb(12, 3)\n    # Total number of different ways to choose 4 girls and 3 boys\n    total_ways = girl_ways * boy_ways\n    return total_ways\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_initial, tom_initial = symbols('alice_initial tom_initial')\n    alice_spent = 36\n    alice_remaining_comparison = 25.40\n    tom_has = 68.10\n\n    # Equation representing Alice's money after spending $36.\n    equation1 = Eq(alice_initial - alice_spent, tom_initial - alice_remaining_comparison)\n\n    # Equation representing Tom's money.\n    equation2 = Eq(tom_initial, tom_has)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alice_initial, tom_initial))\n\n    return solutions[alice_initial]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean1 = 28\n    total_numbers1 = 5\n    total_sum1 = mean1 * total_numbers1\n\n    mean2 = 11\n    total_numbers2 = 12\n    total_sum2 = mean2 * total_numbers2\n    \n    total_mean = (total_sum1 + total_sum2) / (total_numbers1 + total_numbers2)\n    return total_mean\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let's denote the speed of Phillip as S_P (in meters per minute),\n    # and the speed of Alan as S_A (in meters per minute).\n    # Let T_A be the time it takes for Alan to reach B (in minutes).\n    # Then, Phillip's time is T_P = T_A - 3 minutes.\n    \n    # Since Phillip arrives 3 minutes earlier, we get Phillip's time as follows:\n    T_P = 12  # Phillip's time\n    \n    # We can express Alan's time as follows:\n    T_A = T_P + 3  # Alan's time\n    \n    # We're told that Phillip walks 15 meters more per minute than Alan.\n    # S_P = S_A + 15\n    \n    # The distance between A and B for each person would be their speed times their time.\n    # Let the distance be D.\n    # D = S_A * T_A\n    # D = S_P * T_P\n    \n    # Replace S_P with S_A + 15 in the second equation.\n    # We get: S_A * T_A = (S_A + 15) * T_P\n    # Solve for S_A:\n    # S_A * T_A = S_A * T_P + 15 * T_P\n    # S_A * T_A - S_A * T_P = 15 * T_P\n    # S_A * (T_A - T_P) = 15 * T_P\n    \n    S_A = 15 * T_P / (T_A - T_P)  # speed of Alan\n    \n    # Now find the distance D using Alan's speed and time.\n    D = S_A * T_A\n    \n    return D\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 0.20\n    reduced_price = original_price * (1 - discount)\n\n    return reduced_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74  # total length of the road\n    distance_between_benches = 7  # distance from end to end of each bench\n    number_of_benches = 9  # total number of benches\n\n    # The total distance covered by the benches is the distance between each * (number of benches - 1)\n    total_bench_distance = total_distance - ((number_of_benches - 1) * distance_between_benches)\n    # the length of each bench is the total_bench_distance divided by the number of benches\n    bench_length = total_bench_distance / number_of_benches\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')  # total number of candies and number of students in class B\n    students_a = 2 * students_b  # the number of students in class A is twice that of class B\n\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    # Hence, we have: 4 * students_a = candies - 20\n    equation1 = Eq(4 * students_a, candies - 20)\n\n    # If each student in class B gets 6 candies, there will be 16 candies left.\n    # So, we have: 6 * students_b = candies - 16\n    equation2 = Eq(6 * students_b, candies - 16)\n\n    # Now we solve the system of equations for the number of candies\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # There are 6 gold and 6 silver coins in the wallet.\n    # We want 2 coins of different colors.\n\n    # If we want to make sure we get 2 coins of different colors,\n    # we must consider the worst-case scenario.\n    # In the worst case, we could take out all coins of one color first.\n    # There are 6 coins of each color.\n\n    # So after taking out 6 coins of one color (all gold or all silver),\n    # the next coin we take out must be of the other color.\n\n    # Therefore, we must take out 6 + 1 coins to ensure we have 2 different colored coins.\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Every time Peter cuts off a set of 5 arms, 1 new arm grows\n    # So effectively, with each cut, the number of arms decreases by 4 instead of 5\n    # Since he cut 21 arms in total\n\n    effective_cuts = 21 // 4   # Grown back arms do not contribute to the total cut arms\n    remaining_arms = 21 % 4    # These are the arms cut after the last cycle of regrowth\n\n    # Now we need to calculate the original number of arms the octopus bugbear had\n    original_arms = effective_cuts * 5 + remaining_arms\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Third greatest number is given as 246.\n    third_greatest = 246\n\n    # As we need minimum value of fourth greatest number,\n    # we can assume the first two numbers (which are greater\n    # than the third greatest number) are just 1 more than 246.\n    first_two = [third_greatest + 1, third_greatest + 2]  # 247, 248\n\n    # As we have 10 numbers in total, we need to distribute\n    # the remaining sum to the remaining 7 numbers after\n    # subtracting the sum of the three greatest numbers.\n    remaining_sum = 2021 - sum(first_two) - third_greatest\n\n    # The maximum value for the minimum of the other seven\n    # numbers will be achieved when six of them are as small\n    # as possible, that is 1, leaving the maximum possible\n    # sum for the fourth greatest number.\n    # So we assign 1 to six of the numbers.\n    minimum_six = [1] * 6  # Six numbers each being 1.\n\n    # Subtracting the sum of minimum six from remaining_sum\n    # gives us minimum value of fourth greatest number.\n    fourth_greatest_min = remaining_sum - sum(minimum_six)\n\n    return fourth_greatest_min\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_between_trees = 20 / (5 - 1)\n    distance_from_8_to_14 = distance_between_trees * (14 - 8)\n    return distance_from_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for i in range(1, 25):\n        for j in range(i+1, 25):\n            if gcd(i, j) == 1:\n                count += 1\n    # Each number can be part of two pairs, one where it's first and one where it's second\n    # since we're counting pairs, but for the circle, each number can only be in one pair.\n    ans = count // 2\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for page in range(1, 511):\n        count += str(page).count('5')\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_per_minute = 60  # meters per minute\n    time_in_seconds = 150\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_per_minute * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey, father = symbols('grey father')\n    equation1 = Eq(father, 30 + grey)\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator / denominator\n    ans = 10 * fraction\n    return ans\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jerry's and Devi's current ages\n    jerry, devi = symbols('jerry devi')\n\n    # Create an equation based on the information given\n    eq1 = Eq(devi, jerry + 8)  # Devi is 8 years older than Jerry\n    eq2 = Eq((jerry + 4) / (devi + 4), 5/7)  # In 4 years, the ratio of their ages will be 5:7\n\n    # Solve the system of equations for Jerry and Devi\n    solutions = solve((eq1, eq2), (jerry, devi))\n\n    # We want Jerry's current age, so we return that part of the solution\n    return solutions[jerry]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    \n    # Bud has x apples, thus Pip has 5x apples\n    bud = 1\n    pip = 5\n\n    # Create the parts graph\n    fig, ax = plt.subplots()\n    ax.barh(['Bud', 'Pip'], [bud, pip], color=[\"blue\", \"green\"])\n    \n    # Add labels and title\n    ax.set_xlabel('Number of Apples')\n    ax.set_title('Apples Comparison')\n    \n    # Save the graph as an image file\n    plt.savefig('parts_graph.png')\n    \n    # In an interactive environment, you would show the plot\n    # However, since this is a text-based interaction and the plot can't be rendered,\n    # We simply state that the plot has been saved\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # divide books by layers and take the ceiling to find the minimum on the most-loaded layer\n    min_books_most_layer = -(-total_books // layers)   # Using negative to apply ceiling with floor division\n\n    return min_books_most_layer\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    digits = [3, 6, 9]\n    count = 0\n    for first_digit in digits:\n        for second_digit in digits:\n            for third_digit in digits:\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    ans = 0\n    # For the first digit (hundreds place), we can only pick either 1 or 2 (2 options)\n    for first_digit in [1, 2]:\n        # For the second digit (tens place), we can pick 0, 1, or 2 (3 options)\n        for second_digit in [0, 1, 2]:\n            # For the third digit (ones place), we can pick 0, 1, or 2 (3 options)\n            for third_digit in [0, 1, 2]:\n                # Ensure we do not repeated digits to form a number\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    ans += 1\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = quotient + 1  # The smallest possible divisor gives the smallest dividend\n\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4\n    \n    # Calculate the number of rows\n    # The formula for the nth term of an arithmetic sequence is: a_n = a_1 + (n - 1) * d\n    # Rearrange to solve for n: n = ((a_n - a_1) / d) + 1\n    number_of_rows = ((last_row_seats - first_row_seats) / difference) + 1\n    \n    # Calculate the sum of the seats using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    total_seats = number_of_rows / 2 * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    y = symbols('y')                                  # Hazel's age in three years\n    hazel_current_age = y - 3                         # Hazel's current age\n    jessica_current_age = hazel_current_age - 3       # Jessica's current age\n\n    hazel_age_next_year = hazel_current_age + 1       # Hazel's age next year\n    jessica_age_next_year = jessica_current_age + 1   # Jessica's age next year\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year  # Total age next year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30  # already in cm\n    second_section_cm = 1.5 * 100  # converting meters to cm\n    third_section_cm = 150 / 10  # converting mm to cm\n    \n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    uncle_current_age = uncle_future_age - (uncle_future_age - melanie_age)\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote total animals initially as 't' and initial number of goats as 'g'.\n    t, g = symbols('t g')\n\n    # Initially, cows are 65% of total, so goats are 35% of total.\n    # Initial number of goats is therefore 0.35 * t.\n    equation1 = Eq(g, 0.35 * t)\n\n    # When 240 more cows and goats are added, the percentage of cows becomes 85%\n    # This means goats are now 15% of total and their number has also doubled.\n    # The equation is now 2*g = 0.15 * (t + 240).\n    equation2 = Eq(2 * g, 0.15 * (t + 240))\n\n    # Solving the system of equations for 't' and 'g'.\n    solutions = solve((equation1, equation2), (t, g))\n\n    # We need the initial number of goats.\n    return solutions[g]\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pounds = 300  # £3.00 is 300p\n    value = 15  # 15p\n\n    percentage = (value / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    return 18 + 3 - 8 + 17\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all its variables.\n    # For the monomial -x^3y^(2n), the degree is 3 + 2n.\n    # We are given that the degree is 5.\n    # Setting up the equation: 3 + 2n = 5\n    \n    # Solving for n\n    n = (5 - 3) / 2\n    \n    return n\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    max_different_cards = 13  # Maximum number of cards with different numbers/letters\n    cards_to_draw = max_different_cards * 4  # For each different card, we have 4 suits to draw from\n    return cards_to_draw + 1  # By pigeonhole principle, we need to draw one more to ensure a match\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    first_term = Fraction(2 * 8 + 3, 8)\n    second_term = Fraction(6 * 12 + 9, 12)\n    third_term = Fraction(1 * 16 + 14, 16)\n\n    # Perform the addition\n    result = first_term + second_term + third_term\n    \n    # Simplify if necessary and convert to mixed number\n    ans = result.numerator // result.denominator, Fraction(result.numerator % result.denominator, result.denominator)\n\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amy, sister = symbols('amy sister')\n\n    amy_current_age = 15  # Amy's current age\n    amy_age_5_years_ago = amy_current_age - 5\n    sister_age_3_years_later = sister + 3\n\n    equation = Eq(amy_age_5_years_ago, sister_age_3_years_later)\n\n    sister_age_now = solve(equation, sister)\n\n    return sister_age_now[0]\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_num = float('inf')  # Start with a very large number\n    # Loop through all 3-digit numbers\n    for i in range(100, 1000, 2):  # Even numbers only\n        if sum(map(int, str(i))) == 21:  # Check if sum of digits is 21\n            smallest_num = min(smallest_num, i)  # Update smallest number if smaller number found\n            break  # No need to continue as we found the smallest\n    return smallest_num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18  # The given fractional part in pence\n    fraction = 3 / 5  # The fraction mentioned 'three-fifths'\n    \n    # Calculate the whole amount by dividing the part by the fraction\n    whole_amount = part / fraction\n    \n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    # The smallest two-digit number divisible by both 3 and 7 is their least common multiple\n    # Typically, the least common multiple (LCM) of two numbers is their product divided by their greatest common divisor (GCD)\n    # But in the case of 3 and 7 which are primes, their LCM is simply their product.\n    lcm = 3 * 7\n    \n    # Since 21 is not a two-digit number, we need to find the smallest two-digit multiple of the LCM\n    # The smallest two-digit number is 10, so we divide it by lcm to find how many times lcm fits into it,\n    # and take the ceiling of that to find the next biggest multiple of lcm that is a two-digit number.\n\n    smallest_two_digit_multiple = lcm\n    while smallest_two_digit_multiple < 10:  # Make sure it's a two-digit number\n        smallest_two_digit_multiple += lcm\n    \n    return smallest_two_digit_multiple\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cacti and sunflowers\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    # Create the equations based on the problem statement\n    total_cost_eq = Eq(2 * cacti + 7 * sunflowers, 156)\n    more_cacti_eq = Eq(cacti, sunflowers + 6)\n\n    # Solve the equations\n    solutions = solve((total_cost_eq, more_cacti_eq), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    sarah_total = 8 * book_price + 3 * 0.40\n    rebecca_total = 3 * book_price + 8 * 0.40\n    equation = Eq(sarah_total, rebecca_total + 1)\n    \n    book_price_value = solve(equation, book_price)[0]\n\n    return book_price_value\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum([i**2 for i in range(2, 21, 2)])\n    odd_sum = sum([i**2 for i in range(1, 20, 2)])\n    \n    ans = even_sum - odd_sum\n    return ans\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'b' be the cost of one book in pounds\n    b = symbols('b')\n    \n    # Cost of pencils is given: 0.40 pounds each\n    pencil_cost = 0.40\n    \n    # Sarah's total cost: 8 books + 3 pencils\n    sarah_cost = 8 * b + 3 * pencil_cost\n    \n    # Rebecca's total cost: 3 books + 8 pencils\n    rebecca_cost = 3 * b + 8 * pencil_cost\n    \n    # Sarah paid 1.00 pound more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 1)\n    \n    # Solve for the cost of one book\n    book_cost = solve(equation, b)\n    \n    return book_cost[0]\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of fans\n    liverpool_fans_initial, manchester_fans_initial = symbols('liverpool_fans_initial manchester_fans_initial')\n\n    # Equation 1: Initial difference in fans\n    equation1 = Eq(liverpool_fans_initial - manchester_fans_initial, 1000)\n    \n    # Equation 2: After 30 minutes with additional fans\n    liverpool_fans_final = liverpool_fans_initial + 472\n    manchester_fans_final = manchester_fans_initial + 4836\n    equation2 = Eq(manchester_fans_final, 3 * liverpool_fans_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (liverpool_fans_initial, manchester_fans_initial))\n\n    return solutions[liverpool_fans_initial]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 2 + 3  # Since Andy had $3 left after giving Mike $2\n    remaining_after_nini = remaining_after_mike * 2  # Andy gave half to Nini\n    remaining_after_bob = remaining_after_nini * 2  # Andy gave half to Bob\n    original_amount = remaining_after_bob * 2  # Andy gave half to her mother\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    classA_students, classB_students, peaches = symbols('classA_students classB_students peaches')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(peaches, 5 * classA_students + 10)\n    equation2 = Eq(peaches, 8 * classB_students - 2)\n    equation3 = Eq(classA_students, classB_students + 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (classA_students, classB_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    digit = 2023\n    num_length = 0\n    i = 1\n    while num_length < digit:\n        num_length += len(str(i))\n        i += 1\n    # Now num_length is greater than or at least equal to digit.\n    # Need to step back i to get to the right number\n    i -= 1\n    # Calculate how many digits to move back\n    steps_back = num_length - digit\n    # Convert the number to string and access the digit\n    ans = int(str(i)[len(str(i)) - steps_back - 1])\n    return ans\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    current_year = 98\n    birth_year = current_year - 11\n    future_year = 1\n\n    age_in_future_year = future_year - birth_year\n\n    return age_in_future_year\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c')  # t for T-shirts and c for caps\n\n    # Ratio of the number of T-shirts to the number of caps: 8t = 5c\n    ratio_eq = Eq(8 * t, 5 * c)\n\n    # Total cost for the items sold: (1/4)t * $3 + (1/5)c * $5 = $132\n    sales_eq = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, sales_eq), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    result = 9.95 - 2.6 - 3.42\n    return result\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    max_students_per_boat = 6\n\n    if students % max_students_per_boat == 0:\n        trips = students // max_students_per_boat\n    else:\n        trips = students // max_students_per_boat + 1\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    target = 36\n\n    ordinal_number = (target - first_term) // common_difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 6, 2, 5]\n    all_possible_numbers = [int(''.join(map(str, perm))) for perm in permutations(digits)]\n    odd_numbers = [num for num in all_possible_numbers if num % 2 != 0]\n    smallest_odd_number = min(odd_numbers)\n    return smallest_odd_number\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catches = 8\n    run_aways = 5\n    additional_catches = 9\n\n    ans = initial_catches - run_aways + additional_catches\n    return ans\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # minutes\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for tens in [2, 3, 5, 7]: \n        for ones in [2, 3, 5, 7]:\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # The person with number 6 is directly opposite to the person with number 19\n    # This means half the circle contains 19 - 6 = 13 people\n    # Therefore, the full circle has twice that number of people\n    num_people = (19 - 6) * 2\n    return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        x2 = 10 - x1\n        if x1 != x2:\n            count += 1\n    return count // 2\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be number of game cards Eric has\n    x = Symbol('x')\n\n    # Joe has 7 times as many game cards as Eric\n    joe_has = 7 * x\n\n    # Set up the equation: Joe gives some cards to Eric, both should have 168 cards\n    equation = joe_has - (168 - x) - 168\n\n    # Solve the equation\n    cards_to_give = solve(equation, x)\n\n    # Get the number of cards Joe must give to Eric\n    joe_gives = 168 - cards_to_give[0]\n\n    return joe_gives\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    num_students = 5\n    ways_to_line_up = math.factorial(num_students)\n    return ways_to_line_up\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    # equation: Anne - 6 = Charlie + 6\n    # total pears: Anne + Charlie = 38\n    \n    for Anne in range(1, 38):\n        Charlie = 38 - Anne\n        if Anne - 6 == Charlie + 6:\n            return Anne\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    difference = amy_swims - joanne_swims\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation, (a, b, c, d))\n\n    return solutions[abcd]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    number = factorial(29)\n    count = 0\n\n    while number % 10 == 0:\n        count += 1\n        number //= 10\n\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N = int('12345654321', 8)  # Convert octal to decimal\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    ans = remainder_7 + remainder_9\n    return ans\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial conditions\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After Joseph received stamps\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters.\n    # Let Linda's speed be 3v and Ted's speed be 4v.\n    # When Linda has jogged 1200m, she has covered a distance of (3v * t).\n    # At the same time, Ted has covered a distance of (4v * t).\n    # The sum of the distances covered by both is equal to the length of the path (x).\n    # So we have 3v * t + 4v * t = x.\n    # Since Linda has jogged 1200m, we know that 3v * t = 1200.\n    # We need to find x.\n    # We can express Ted's covered distance in terms of Linda's (because the speed ratio is known):\n    # 4v * t = (4/3) * (3v * t) = (4/3) * 1200 = 1600.\n    # Now, we can find x by summing up the distances covered by Linda and Ted:\n    # x = 1200 + 1600.\n\n    linda_distance = 1200\n    ted_distance = (4/3) * linda_distance\n    path_length = linda_distance + ted_distance\n\n    return path_length\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Ryan has 5 squirrels in front of him\n    ryan_in_front = 5\n    \n    # 1 squirrel is between Ryan and Elvis\n    between_ryan_and_elvis = 1\n\n    # Elvis has 7 squirrels behind him\n    elvis_behind = 7\n\n    # The total number of squirrels buying acorns\n    # is the sum of Ryan's front, the squirrel between them,\n    # Elvis' behind, and Ryan and Elvis themselves\n    total_squirrels = ryan_in_front + between_ryan_and_elvis + elvis_behind + 2\n\n    return total_squirrels\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be a multiple of 9.\n    # The sum of the digits in 2018 is 2 + 0 + 1 + 8 = 11.\n    # To find the value that A must be, we find the next multiple of 9.\n    A = 9 - (11 % 9)\n    \n    # Once we have A, we can form the whole 5-digit number\n    number = int(f\"2018{A}\")\n    \n    # The remainder when this number is divided by 8 can be found using the modulo operation.\n    remainder = number % 8\n    \n    return remainder\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    num = 2019 + 2018 * 2020\n    den = 2019 * 2020 - 1\n    ans = num / den\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done = workers * days\n\n    days_for_one_worker = work_done / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal_amount = 3600\n    interest_rate = 0.02\n    time_in_years = 1\n\n    interest = principal_amount * interest_rate * time_in_years\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    amount = 64\n    ans = percentage * amount\n    return ans\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This problem is known as the \"Derangement problem\" or \"hats-check problem\".\n    # The number of derangements of n objects is denoted by D(n) or !n.\n    \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    def derangement(n):\n        # Using the formula for derangement:\n        # D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        a, b = 1, 0\n        for i in range(2, n + 1):\n            a, b = b, (i - 1) * (a + b)\n        return b\n    \n    return derangement(6)\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the original number of pupils in Schools P and Q\n    p, q = symbols('p q')\n    \n    # Write the equation based on the given ratios\n    # The ratio of pupils in School P and School Q is initially 2:3\n    equation1 = Eq(p / q, 2 / 3)\n    \n    # After admitting 240 primary one pupils in each school, the ratio became 3:4\n    equation2 = Eq((p + 240) / (q + 240), 3 / 4)\n    \n    # Solve the system of equations for p and q\n    solutions = solve((equation1, equation2), (p, q))\n    \n    # Return the number of pupils in School P initially\n    return solutions[p]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    bag_percentage = 70\n    bag_fraction = bag_percentage / 100\n    purse_fraction_of_remainder = 3 / 8\n\n    purse_percentage = (1 - bag_fraction) * purse_fraction_of_remainder * 100\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current_age = symbols('jack_current_age')\n    \n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n    age_now = solve(equation, jack_current_age)\n\n    return age_now[0]\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_student_count = 5 + 1\n    candies_per_student_after = total_candies // new_student_count\n    return candies_per_student_after\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    num_vowels = sum(1 for letter in word if letter in vowels)\n    num_consonants = len(word) - num_vowels\n\n    total_arrangements = factorial(len(word))\n    vowel_arrangements = factorial(num_vowels)\n\n    # Place the vowels together as a single entity\n    arrangements_with_vowels_together = vowel_arrangements * factorial(num_consonants + 1)\n\n    # Subtract arrangements where vowels are together from total arrangements\n    ways_with_vowels_never_together = total_arrangements - arrangements_with_vowels_together\n\n    return ways_with_vowels_never_together\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Angles in a triangle sum up to 180 degrees\n    m_angle_ABC = 180 - 50  # We know m∠BAC = 50 degrees\n    \n    # Given BP bisects ∠ABC, thus:\n    m_angle_ABP = m_angle_ABC / 2\n    \n    # Similarly, CP bisects ∠ACB, which is also m∠ABC since the triangle is isosceles\n    m_angle_ACP = m_angle_ABC / 2\n    \n    # m∠BPC can be found by subtracting the angles ∠ABP and ∠ACP from 180 degrees\n    m_angle_BPC = 180 - (m_angle_ABP + m_angle_ACP)\n    \n    return m_angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = 11\n    while wrappers >= 3:\n        exchange_sweets = wrappers // 3\n        sweets_bought += exchange_sweets\n        wrappers = wrappers % 3 + exchange_sweets\n    return sweets_bought\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    total_weight_kg = 5\n    weight_per_bag_kg = 0.250\n\n    number_of_bags = total_weight_kg / weight_per_bag_kg\n    total_revenue = number_of_bags * selling_price_per_bag\n    profit = total_revenue - cost_price\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # number of ways between Ayton and Beeton is 4\n    ayton_beeton = 4\n    \n    # number of ways between Beeton and Ceeton is 5\n    beeton_ceeton = 5\n    \n    # number of ways between Ceeton and Deeton is 6\n    ceeton_deeton = 6\n    \n    # number of ways directly between Ayton and Deeton is 3\n    ayton_deeton_direct = 3\n    \n    # ways passing through Beeton and Ceeton\n    ayton_beeton_ceeton_deeton = ayton_beeton * beeton_ceeton * ceeton_deeton\n    \n    # total ways = direct ways + indirect ways\n    total_ways = ayton_deeton_direct + ayton_beeton_ceeton_deeton\n    \n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    left_numerator = 15\n    left_denominator = 20\n    right_numerator = 3\n\n    ans = (left_denominator * right_numerator) / left_numerator\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t represent the number of two-tailed birds\n    # Let f represent the number of three-tailed birds\n    # Let s represent the number of six-tailed birds\n    # Let e represent the number of eight-tailed birds\n    \n    t, f, s, e = symbols('t f s e')\n\n    # Equation 1: The number of two-tailed birds is 5 more than twice the number of eight-tailed birds\n    equation1 = Eq(t, 5 + 2 * e)\n    \n    # Equation 2: The number of three-tailed birds is 2 more than half the number of six-tailed birds\n    equation2 = Eq(f, 2 + s / 2)\n    \n    # Equation 3: The total number of tails is 2 less than four times the total number of heads\n    equation3 = Eq(2*t + 3*f + 6*s + 8*e, 4*(t + f + s + 2*e) - 2)\n    \n    # Equation 4: The difference between the total number of heads and tails is 241\n    equation4 = Eq(t + f + s + 2*e - (2*t + 3*f + 6*s + 8*e), 241)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (t, f, s, e))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    n_tenth = 10\n    n_fifteenth = 15\n\n    common_difference = (fifteenth_term - tenth_term) / (n_fifteenth - n_tenth)\n    nth_term = lambda n, a, d: a + (n - n_tenth) * d\n    twelfth_term = nth_term(12, tenth_term, common_difference)\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    \n    # Multiples of 2 and 3 are underlined with red and blue\n    multiples_of_2_and_3 = set(range(2, 2017, 2)) & set(range(3, 2017, 3))\n    # Multiples of 2 and 4 are underlined with red and green, but these\n    # are the same as multiples of 4, which are already multiples of 2.\n    multiples_of_2_and_4 = set()\n    # Multiples of 3 and 4 are underlined with blue and green\n    multiples_of_3_and_4 = set(range(3, 2017, 3)) & set(range(4, 2017, 4))\n\n    # Numbers underlined exactly twice are in the union of the two sets\n    numbers_underlined_twice = multiples_of_2_and_3 | multiples_of_3_and_4\n    \n    # However, numbers that are multiples of 2, 3, and 4 are counted in both sets,\n    # so we need to subtract them out to get the exact count.\n    multiples_of_2_3_and_4 = set(range(2*3*4, 2017, 2*3*4))\n    \n    # Adjust the count for numbers that are underlined exactly twice\n    count = len(numbers_underlined_twice) - len(multiples_of_2_3_and_4)\n    \n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally = 3.75\n    joe = symbols('joe')\n\n    # Both spent $2.50 on an ice-cream cone\n    sally_left = sally - 2.50\n    joe_left = joe - 2.50\n\n    # Together they have $5 left\n    equation = Eq(sally_left + joe_left, 5)\n\n    # Solve for the amount Joe had at first\n    joe_original = solve(equation, joe)\n\n    return joe_original[joe]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    total_trees_first_3_days = 135 * 3\n    total_trees_last_5_days = 151 * 5\n    total_days = 8\n\n    average_trees = (total_trees_first_3_days + total_trees_last_5_days) / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Range for 3-digit numbers\n        if i % 2 == 0:  # Check for even numbers\n            digits_sum = sum(map(int, str(i)))  # Sum of the digits\n            if digits_sum == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all numbers in the sequence are prime\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boys_diff_girls = 32\n    total_students = 0\n    \n    for layer in range(1, 100):  # This limit should be enough to find the arrangement\n        boys = (layer * 2 + 1) ** 2 - (layer * 2 - 1) ** 2 if layer > 1 else 1\n        girls = ((layer * 2 - 1) ** 2 - (layer * 2 - 3) ** 2) if layer > 1 else 0\n        if boys - girls == boys_diff_girls:\n            total_students = (layer * 2 + 1) ** 2\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetable_dishes = 12\n    sandwiches = 6\n\n    # He can choose lunch in the following combinations:\n    # salad + soup, salad + vegetable dish, salad + sandwich\n    # soup + vegetable dish, soup + sandwich\n    # vegetable dish + sandwich\n    # Calculate each option separately and then sum them up\n\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable = comb(salads, 1) * comb(vegetable_dishes, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable = comb(soups, 1) * comb(vegetable_dishes, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich = comb(vegetable_dishes, 1) * comb(sandwiches, 1)\n\n    total_choices = (salad_soup + salad_vegetable + salad_sandwich +\n                     soup_vegetable + soup_sandwich + vegetable_sandwich)\n    return total_choices\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    # Total number of plasters available\n    total_plasters = 12 * 30\n    \n    # New daily usage\n    new_daily_usage = 20\n    \n    # Calculate how many days the plasters will last with the new daily usage\n    days_last = total_plasters / new_daily_usage\n    \n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes, strawberries + 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    \n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples, lemons + 12)\n\n    total_items_solution = solve(equation, total_items)\n    \n    lemons_solution = lemons.subs(total_items, total_items_solution[0])\n\n    return int(lemons_solution)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let m be the money Max had originally, and a be the money Anthony had.\n    m, a = symbols('m a')\n\n    # If Max bought the chocolates, the remaining amount of money is m - 12\n    # The ratio of the remaining amount of Max to Anthony is 2:5, so we have the equation:\n    equation1 = Eq((m - 12) / a, 2 / 5)\n\n    # If Anthony bought the chocolates, the remaining amount of money is a - 12\n    # The ratio of the remaining amount of Max to Anthony becomes 8:13, so we have the equation:\n    equation2 = Eq(m / (a - 12), 8 / 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # We're interested in the amount Max had originally, which is m\n    return solutions[m]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Since every kid has to get at least one pen, we give one pen to each one first.\n    # Now we have 20 - 6 = 14 pens left to divide.\n    # Let's use stars and bars method to find the number of ways 14 indistinguishable pens\n    # can be divided among 6 kids.\n\n    # We will have 14 stars (pens) and 5 bars (divisions between kids).\n    # Number of ways to arrange these is the number of combinations of 19 items taken 5 at a time.\n\n    # Calculate the number of combinations.\n    ans = factorial(14 + 6 - 1) // (factorial(6 - 1) * factorial(14))\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    # cycle of unit digits for powers of 4: 4, 6, 4, 6...\n    cycle_length = 2 \n    power = 2022\n    # Find the position in the cycle\n    cycle_position = power % cycle_length\n    # If cycle_position is 0, it means it is the last element of the cycle (6)\n    unit_digit = 6 if cycle_position == 0 else 4\n    return unit_digit\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let's denote r as the number of red stickers and b as the number of blue stickers.\n    # Given that Liz had an equal number of red and blue stickers, we have r = b.\n    # She then gave away 2/3 of her red stickers, leaving her with 1/3 of the red stickers.\n    # She was left with 1/4 of her stickers in total, which means (1/3)r + remaining_blue = (1/4)(r + b)\n    # We need to find out how many blue stickers she gave away as a fraction of her original blue stickers.\n    # This fraction would be (b - remaining_blue) / b.\n    \n    # Define the variables\n    r = symbols('r')\n    remaining_blue = symbols('remaining_blue')  # Let this be the number of blue stickers she was left with\n    \n    # Since r = b, we can just replace b with r in our equations.\n    # Original number of stickers together is r + r = 2r\n    # Number of red stickers left is (1/3)r\n    # Number of stickers left together is (1/4)(2r) = (1/2)r\n    # So, (1/3)r + remaining_blue = (1/2)r\n    # Solve remaining_blue from the equation above\n    equation = Eq((1/3)*r + remaining_blue, (1/2)*r)\n    solved_values = solve(equation, remaining_blue)\n    \n    # Calculate what fraction of blue stickers she gave away.\n    remaining_blue = solved_values[0]\n    fraction_of_blue_given_away = (r - remaining_blue) / r\n    \n    return fraction_of_blue_given_away\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    # Use arithmetic sum formula: sum = n/2 * (first_term + last_term)\n    total_pages = num_terms * (first_term + last_term) // 2\n\n    return total_pages\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Since we are trying to minimize the number of marbles in the largest pile,\n    # we should first distribute the marbles in the smallest piles possible.\n    # Starting with 1 marble in the first pile, 2 in the second, and so on,\n    # we can find the smallest number for the largest pile.\n\n    # Find the total marbles used in the three smallest piles.\n    # 1 + 2 + 3 = 6 marbles used.\n    # Remaining marbles to be in the largest pile = total marbles - marbles used in smaller piles.\n    remaining_marbles = 16 - (1 + 2 + 3)\n\n    # Therefore, the smallest possible number for the largest pile is:\n    return remaining_marbles\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    ans = smallest_6_digit - largest_5_digit\n    return ans\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all units to millimetres\n    lengths_mm = [\n        10,          # 10 millimetres\n        100 * 10,    # 100 centimetres -> mm\n        10 * 1000,   # 10 metres -> mm\n        2 * 1000 * 1000,   # 2 kilometres -> mm\n        2800 * 10,   # 2800 centimetres -> mm\n        2500 * 1000, # 2500 metres -> mm\n        100,         # 100 millimetres\n        100 * 1000   # 100 metres -> mm\n    ]\n    \n    # Find the smallest length\n    ans = min(lengths_mm)\n    return ans\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Three-digit odd numbers: _ _ _\n    # The last digit must be an odd number (1, 3, 5)\n    last_digit_options = 3      # There are 3 options for the last digit\n    \n    # The middle digit can be any of the remaining 5 digits\n    middle_digit_options = 5    # 5 options for the middle digit (after using one for the last)\n    \n    # The first digit can be any of the remaining 4 digits (not 0, because it's a three-digit number)\n    first_digit_options = 4     # 4 options for the first digit (after using two for the last and middle)\n    \n    # Apply the multiplication principle\n    total_ways = first_digit_options * middle_digit_options * last_digit_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    start = 1991\n    while True:\n        start += 1\n        if str(start) == str(start)[::-1]:\n            return start - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, (2/3)*B)\n    equation2 = Eq(B, (4/5)*C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    \n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if (cows * 4 + ducks * 2) == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students be 'x', and the total bookmarks be 'y'.\n    x, y = symbols('x y')\n\n    # If he gives each student 4 bookmarks, he'll have 8 leftover.\n    equation1 = Eq(4 * x + 8, y)\n\n    # If he gives each student 6 bookmarks, he'll be short of 10 bookmarks.\n    equation2 = Eq(6 * x - 10, y)\n    \n    # Solving the equations to find the value of 'y' which represents the bookmarks.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # We use the inductive method to find the maximum number of parts P\n    # that n lines can divide the plane into.\n    # The formula is: P(n) = P(n-1) + n\n    # Base case is: P(1) = 2 (1 line divides the plane into 2 parts)\n\n    # For the five triangles, we have a maximum of 5 * 3 = 15 lines.\n    # We apply the formula iteratively to find the maximum number of parts.\n\n    max_parts = 2  # With 1 line\n    for n in range(2, 16):  # Now we do this for 2 to 15 lines\n        max_parts += n\n\n    return max_parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the average height of girls and boys\n    avg_height_girls, avg_height_boys = symbols('avg_height_girls avg_height_boys')\n    \n    # Total number of children\n    total_children = 11 + 5\n    \n    # Given average height of the group\n    avg_height_group = 122.5\n    \n    # Given difference in average height\n    height_difference = 3.2\n    \n    # Equations based on the problem statement\n    equation1 = Eq(avg_height_girls, avg_height_boys + height_difference)\n    equation2 = Eq((11 * avg_height_girls + 5 * avg_height_boys) / total_children, avg_height_group)\n    \n    # Solve the equations to find the average height of girls\n    solutions = solve((equation1, equation2), (avg_height_girls, avg_height_boys))\n    \n    # Return the average height of the girls\n    return solutions[avg_height_girls]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # The sum of an arithmetic sequence is given by: sum = n/2 * (first_term + last_term)\n    # For 9 consecutive odd numbers (arithmetic sequence with common difference of 2),\n    # sum = n/2 * (first_term + first_term + (n - 1)*difference)\n    # Rearranging the terms: sum = n/2 * (2 * first_term + (n - 1)*difference)\n    # Given the sum (1503) and n (9), we can find the first_term.\n    \n    n = 9\n    sum_of_sequence = 1503\n    difference = 2\n    \n    # Rearranging the formula to solve for first_term:\n    # sum = n/2 * (2*first_term + (n - 1)*difference)\n    # 2 * sum / n = 2 * first_term + (n - 1) * difference\n    # 2 * sum / n - (n - 1) * difference = 2 * first_term\n    # first_term = (2*sum / n - (n - 1)*difference) / 2\n    \n    first_term = (2 * sum_of_sequence / n - (n - 1) * difference) / 2\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    n_32 = 32\n    n_108 = 108\n    \n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (term_108 - term_32) / (n_108 - n_32)\n    \n    # Calculate the first term using the common difference and the 32nd term\n    first_term = term_32 - (n_32 - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g = symbols('g')\n\n    # Total number of students\n    total_students = 70\n\n    # Since there are 70 students, number of boys = 70 - g\n    b = total_students - g\n\n    # We know the total score for all students\n    total_score = total_students * 66\n\n    # The total score for girls is the number of girls times their average score\n    total_score_girls = g * 70\n\n    # The total score for boys is the number of boys times their average score\n    total_score_boys = b * 63\n\n    # The sum of all scores from girls and boys should equal the total score\n    equation = Eq(total_score_girls + total_score_boys, total_score)\n\n    # Solving the equation for the number of girls g\n    num_girls = solve(equation, g)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "from itertools import permutations\n\ndef solution():\n    # Define the players\n    players = ['B', 'C', 'D']\n    \n    # Generate all possible permutations of 3 passes\n    pass_permutations = list(permutations(players, 3))\n    \n    # Filter permutations that end with 'A'\n    valid_passes = [combo for combo in pass_permutations if combo[0] != 'A' and combo[1] != 'A' and combo[2] != 'A']\n    \n    return len(valid_passes)\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books = 30\n    anthea_books = (jason_books - 4) / 2\n    difference = jason_books - anthea_books\n    return int(difference)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Let's denote the number of candies Kate had after eating as C.\n    # According to the problem, C = 42 is the number of candies left after Kate ate 1/4,\n    # meaning C is 3/4 of the amount before she ate,\n    # so the amount before she ate is 42 * 4 / 3.\n    before_kate_ate = 42 * 4 / 3\n\n    # Now, this is the amount Jane had and gave to Kate, so before Jane ate (1/3 + 4),\n    # we have to add those back to get the amount Jane was given.\n    jane_was_given = before_kate_ate + before_kate_ate / 3 + 4\n\n    # This amount is what remained after Donna kept half of her candies plus 3,\n    # meaning jane_was_given is half of the amount Donna had minus 3.\n    # So, Donna's initial amount of candies is twice of (jane_was_given + 3).\n    donna_initial_candies = 2 * (jane_was_given + 3)\n\n    return donna_initial_candies\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    for i in range(1, 4*10+1):  # Check up to the least common multiple of 4 and 10\n        if i % 4 == 0 and i % 10 == 0:  # i is a multiple of both 4 and 10\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    numbers = [27, 28, 29, 30, 31, 32, 33]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    # Create a list to store the possible two-digit numbers that QP could be.\n    valid_numbers = []\n\n    # Check all combinations of 2 different digits for Q and P where Q is not zero.\n    for Q in range(1, 10):\n        for P in range(0, 10):\n            if Q != P:\n                # Convert the two digits into a two-digit number and store it.\n                number = Q * 10 + P\n                valid_numbers.append(number)\n\n    # Since the question does not give a specific puzzle to solve, we would return the list of all potential 2-digit numbers with distinct digits. But, according to the instructions, the function should return a single `ans`. Since the information is not sufficient to determine a unique answer, and only a single value `ans` is to be returned, let's just return the first valid two-digit number as a placeholder.\n    ans = valid_numbers[0]\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_mps = 2\n    time_minutes = 12\n    time_seconds = time_minutes * 60\n    \n    distance = speed_mps * time_seconds\n    \n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor = 4\n    result = (2020 // common_factor) * (68 * common_factor) + (505 // common_factor) * (128 * common_factor)\n    return result\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's sugar solution\n    xavier_sugar = 100 * 0.25\n    # Yelena's sugar solution\n    yelena_sugar = 500 * 0.55\n    # Carol's sugar solution\n    carol_sugar = 400 * 0.35\n\n    # Total sugar\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    # Total solution weight\n    total_solution = 100 + 500 + 400\n\n    # Concentration of the resulting sugar solution\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    \n    equation1 = Eq(a, b * 2)\n    equation2 = Eq(1/a + 1/b, 1/(b - 12))\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    a_days = solutions[a]\n    b_days = solutions[b]\n\n    combined_efficiency = 1/a_days + 1/b_days\n\n    days_together = 1 / combined_efficiency\n\n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissue_cost = total_money - (newspaper_cost + change_received)\n\n    return tissue_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    for students in range(1, 1000):\n        boys = girls = students // 2\n        boys_left = boys - (3/5 * boys)\n        girls_left = girls - 42\n        if boys_left - girls_left == 12:\n            return students\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + 3 * baskets_of_tomatoes\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n    \n    # Let the distance be d km\n    # Time taken at 3 km/h is d/3 hours\n    # Time taken at 5 km/h is d/5 hours\n    # According to the problem:\n    # (d/3) - (d/5) = late_time + early_time\n    # (5d - 3d) / 15 = late_time + early_time\n    # 2d / 15 = late_time + early_time\n    # d = 15/2 * (late_time + early_time)\n    \n    d = (15 / 2) * (late_time + early_time)\n    \n    return d\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    eq1 = Eq(rachel - 10, alice + 10)\n    eq2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((eq1, eq2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the initial number of boys and y be the initial number of girls\n    x, y = symbols('x y')\n\n    # given equations based on ratios and new additions\n    equation1 = Eq(x / y, 3 / 2)\n    equation2 = Eq((x + 12) / (y + 12), 19 / 14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # extract solution for x and y\n    initial_boys, initial_girls = solutions[x], solutions[y]\n\n    # calculate the total number of children in the Botanic Gardens that afternoon\n    total_children_afternoon = (initial_boys + 12) + (initial_girls + 12)\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    single_cost = 6.25\n    total_cost = single_cost * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    initial_temp = -8\n    current_temp = 13\n    temp_increase = current_temp - initial_temp\n    return temp_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks\n    num_ways_diff_colored = factorial(4)  # 4!\n    \n    # For two different colored pairs of socks\n    pair_factorial = factorial(2)  # 2!\n    num_ways_pairs = factorial(4) // (pair_factorial**2)  # 4! / (2! * 2!)\n\n    return num_ways_diff_colored, num_ways_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n\n    total_value = card_A + card_B + card_C\n\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_a = 23\n    length_b = 37\n    welding_overlap = 3\n\n    total_length = length_a + length_b - welding_overlap\n\n    return total_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    period_earth = 1  # Period on Earth in seconds\n    g_earth = 9.81    # Gravitational acceleration on Earth in m/s^2\n    g_moon = g_earth / 6  # Gravitational acceleration on Moon in m/s^2\n\n    # Formula to calculate period of a pendulum T = 2 * pi * sqrt(l / g)\n    # Since the length of the pendulum remains the same, we can write T_moon/T_earth = sqrt(g_earth/g_moon)\n    period_moon = period_earth * sqrt(g_earth / g_moon)\n\n    return period_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = green_tiles = 0\n\n    while total_tiles > 0:\n        # Number of tiles in the current layer\n        layer_tiles = layer * 4 - 4 if layer > 1 else 1 \n        if total_tiles < layer_tiles:\n            layer_tiles = total_tiles\n        \n        # Alternating the color for layers\n        if layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n\n        # Update the number of tiles remaining and the layer number\n        total_tiles -= layer_tiles\n        layer += 1\n\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    tiles_more = abs(red_tiles - green_tiles)\n\n    return (dominant_color, tiles_more)\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('1 Mar 2021', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2021', '%d %b %Y')\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let's use j to represent the number of questions Justin answers correctly\n    # and w to represent the number of questions William answers correctly.\n    \n    # Each correct answer gives 6 points\n    # Each incorrect answer gives -2 points\n    # Total questions is 10\n    # The total points they get together is 96.\n    # The points Justin gets is 24 more than that William gets.\n\n    # We can write the following equations based on the above statements:\n    # 6j - 2(10 - j) + 6w - 2(10 - w) = 96 (total points together)\n    # 6j - 2(10 - j) = 6w - 2(10 - w) + 24 (Justin has 24 more points)\n\n    # Simplifying the equations, we get:\n    # 8j + 8w = 96 + 40 => j + w = 17 (1)\n    # 8j = 8w + 24 + 40 => j = w + 8 (2)\n\n    # Since j and w must be integers and j + w = 17,\n    # we can iterate over possible values for w and calculate j using equation (2).\n    for w in range(11): # w can be from 0 to 10\n        j = w + 8\n        if j + w == 17:\n            return w  # We return the number of questions William answers correctly\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since we need to find the value of A in a number puzzle,\n    # and we don't have the actual puzzle specified, a standard\n    # approach would be to assume A could be any digit from 0 to 9\n    # Then check the conditions of the puzzle to find the correct A.\n    # However, since A's puzzle is not provided, we are not able\n    # to write any specific code without more information about the puzzle.\n    # As such, the solution cannot be completed without further details.\n    ans = None\n    return ans\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    ans = 265 * 30\n    return ans\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    count = 0\n\n    while term > 0:\n        term += common_difference\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Assuming the square array has equal number of people on each side.\n    \n    # Calculate the side of the square array (number of people on one side)\n    side = int(100 ** 0.5)\n    \n    # The total number of people in outermost layer will be:\n    # The total number of people on the perimeter minus the overlapping 4 corner people (since each corner person is counted twice)\n    outermost_people = 4*side - 4\n    \n    return outermost_people\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate is 1/15 per day\n    # B's work rate is 1/10 per day\n\n    # Combined work rate in a day is:\n    combined_rate = (1/15) + (1/10)\n\n    # Total work done in 3 days\n    work_done = 3 * combined_rate\n\n    # Remaining work\n    remaining_work = 1 - work_done\n\n    # B's rate of doing work\n    B_rate = 1/10\n\n    # Days B will take to finish the remaining job\n    days_B = remaining_work / B_rate\n\n    return days_B\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had.\n    # Hugo gave 3/7 of his cash to his sister, so he has 4/7 left.\n    # Then he gave 1/8 of the remaining cash to his mum,\n    # which means he gave (1/8) * (4/7) * x to his mum. \n    # After that, he had 280 left, so:\n    # (1 - (1/8) * (4/7)) * x = 280\n    # (1 - 4/(8*7)) * x = 280\n    # (1 - 1/14) * x = 280\n    # (14/14 - 1/14) * x = 280\n    # (13/14) * x = 280\n    # x = 280 * (14/13)\n    x = 280 * (14/13)\n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]  # List of temperatures\n    difference = max(temperatures) - min(temperatures)  # Difference between hottest and coldest temperatures\n    return difference\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # we can remove those 3 apples from the total count,\n    # and then distribute one apple per student.\n    apples = 80\n    guaranteed_apples = 3\n    \n    # Removing the guaranteed apples from one student\n    remaining_apples = apples - guaranteed_apples\n    \n    # Now we distribute one apple per student,\n    # thus the number of students will be the remaining number of apples.\n    num_students = remaining_apples\n    \n    return num_students\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Since this is a variant of the game of Nim, the strategy involves the XOR operation.\n    # The player needs to leave the piles in a state where the XOR of the pile sizes is 0.\n    # Whoever can maintain this state and force the opponent to break it will win.\n\n    # The XOR of 88 and 52 is calculated to find the first move.\n    xor_result = 88 ^ 52\n\n    # Tom goes first\n    if xor_result == 0:\n        # If XOR of pile A and pile B is already 0, Tom can't apply the winning strategy on the first move.\n        # Hence, Tom does not have a guaranteed winning strategy.\n        move_pile = None\n        move_cards = None\n    else:\n        # If the XOR is not 0, Tom needs to make a move that results in an XOR of 0 for the two piles.\n        # To do this, Tom will pick a pile and remove enough cards so that the XOR of the new pile sizes is 0.\n        for pile_size in [88, 52]:\n            # We calculate what the pile size should be after Tom's move to make the piles in a winning position.\n            desired_pile_size = pile_size ^ xor_result\n            if desired_pile_size < pile_size:\n                # We found the correct pile and the number of cards to remove.\n                move_pile = 'A' if pile_size == 88 else 'B'\n                move_cards = pile_size - desired_pile_size\n                break\n\n    return (move_pile, move_cards)\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n    \n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n    \n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n    \n    cost_10_cheesecakes_logcakes = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    \n    return cost_10_cheesecakes_logcakes\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red balls be r, white balls be w, and black balls be b.\n    # According to the problem, we have the following ratios:\n    # r:w = 1:2 and w:b = 3:4\n    # That means r = w/2 and w = 3/4 * b\n    # We also know that r + w + b = 34 (total number of balls)\n    \n    # Let's express w and b in terms of r:\n    # w = 2r and b = 4/3 * w = 4/3 * 2r = 8/3 * r\n    \n    # Now we substitute w and b in terms of r into the total equation:\n    # r + 2r + 8r/3 = 34\n    # Combining like terms we get:\n    # 3r + 6r + 8r = 102 (multiplied both sides by 3 to remove fractions)\n    # 17r = 102\n    # r = 102 / 17\n    # r = 6 (number of red balls)\n\n    return 102 // 17\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # For any number greater than 9, the factorial of that number will include\n    # the term 10 (which is 5 * 2). Thus, the last digit will always be 0.\n    return 0\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    sum = 0\n    for i in range(1, 11):\n        sum += i * (2 * i - 1)\n    return sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    ratio = pen_cost // pencil_cost\n\n    return ratio\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    # Side length of the square base\n    side_length = 5\n    \n    # Area of the square base\n    base_area = side_length ** 2\n    \n    # Area of the square hole\n    hole_area = 1 * 1\n    \n    # Effective area contributing to the volume\n    effective_area = base_area - hole_area\n    \n    # Volume of the prism\n    volume = 480\n    \n    # Height of the prism calculated using the volume formula: volume = effective_area * height\n    height = volume / effective_area\n    \n    return height\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Let the original number of yellow beads be 3x and green beads be 2x\n    # After purchasing more beads, the quantities become 3x+5 (yellow) and 2x+20 (green)\n    # According to the new ratio, (2x+20) / (3x+5) = 3/2\n    # Solve for x to find the original quantities\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 20)/(3*x + 5), 3/2)\n    x_value = solve(equation, x)[0]\n    \n    # Calculate the original number of beads\n    original_yellow = 3 * x_value\n    original_green = 2 * x_value\n    total_beads = original_yellow + original_green\n    \n    return int(total_beads)\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left_with_henry = 16\n\n    initial_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left_with_henry\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2 and x1 != x2:\n                count += 1\n    return count // 6  # Divide by 6 to account for permutations of the numbers\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i - 1) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Count palindromic numbers between 10 and 100\n    for i in range(1, 10):\n        count += 1  # Only 10 possible two-digit palindromic numbers (11, 22, ..., 99)\n\n    # Count palindromic numbers between 100 and 1000\n    for i in range(1, 10):\n        for j in range(10):  # Middle digit can be anything from 0 to 9\n            count += 1  # Form the number as i * 101 + j * 10\n\n    return count\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60  # Amy's speed in mph\n    christen_speed = 40  # Christen's speed in mph\n    meet_time = 4  # Time after which they meet in hours\n\n    # The distance both of them have covered when they meet\n    distance_covered = (amy_speed + christen_speed) * meet_time\n\n    # Time it takes for Christen to reach Amy's starting point\n    time_for_christen = distance_covered / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n\n    ratio_sum = 4 + 5\n    lemon_cakes = (4 / ratio_sum) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    total_marks = 110\n    correct_mark = 4\n    wrong_mark = -1\n\n    # Let x be the number of correct answers, then 50 - x will be the number of wrong answers\n    # We can set up an equation:\n    # 4x - 1(50 - x) = 110\n    # Solving for x gives us the number of correct answers\n    \n    x = (total_marks + wrong_mark * total_questions) / (correct_mark - wrong_mark)\n    return int(x)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # 3-digit numbers start from 100\n        digits = set(str(i))    # Convert number to string and get unique digits\n        if len(digits) == 2:    # Check if there are exactly 2 different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = [digit for digit in digits if int(digit) % 2 == 0]\n    total_even_numbers = 0\n\n    # Iterate through each even number that can be the last digit of the 4-digit number.\n    for last_digit in even_digits:\n        remaining_digits = digits.copy()\n        remaining_digits.remove(last_digit)\n        # Permutate the remaining digits to find all possible 3-digit combinations\n        # (excluding the last digit since it's already determined).\n        for perm in permutations(remaining_digits, 3):\n            if perm[0] != '0':  # The first digit shouldn't be 0 for a 4-digit number.\n                total_even_numbers += 1\n\n    return total_even_numbers\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    # Average score on the first four assignments\n    average_first_four = 89\n    # Score on the fifth assignment\n    score_fifth = 94\n    # Total score for the first four assignments\n    total_first_four = average_first_four * 4\n    # Total score including the fifth assignment\n    total_five = total_first_four + score_fifth\n    # Average score on all five assignments\n    average_five = total_five / 5\n\n    return average_five\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the number of books Lily has and J be the number of books Judy has\n    L, J = symbols('L J')\n    \n    # If Lily gives S books to Judy, they will both have the same number of books\n    # So, the equation is L - S = J + S\n    # We also know that originally Lily had more books, so L = J + 2S\n    # We can solve these equations simultaneously to find the value of S\n\n    # Equation representing both having the same amount after Lily gives S books\n    equation1 = Eq(L - J, 2*S)\n    \n    # Since both would then have the same amount, we can set the above equation equal to 2 times\n    # any one of the resulting number of books (let's use J + S for simplicity)\n    equation2 = Eq(L - J, 2*(J + S))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, J, S))\n\n    # The difference in the number of books they originally had\n    return solutions[S]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Lily has 2 options for the first pass: Cici or April\n    first_pass_options = 2\n    \n    # After the first pass, the ball will be at Cici or April, each having 1 option: pass it to the one who doesn't have the ball\n    second_pass_options = 1\n    \n    # The total passing ways will be the product of the options for each pass\n    total_passing_ways = first_pass_options * second_pass_options\n    \n    return total_passing_ways\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(2 * david, chloe)\n    equation2 = Eq(3 * emily, david)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * total_wibbles\n    remaining_arms = total_arms - total_wibble_arms\n    wobble_arms = 5\n\n    num_wobbles = remaining_arms / wobble_arms\n    \n    return int(num_wobbles)\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        ones = hundreds - 1\n        tens = 2 * hundreds\n        if hundreds + tens + ones == 15:\n            return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n\n    return int(total_seconds)\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    # Set up the equation x * 9 + 5 = 113\n    # To find x, we move 5 to the other side (113 - 5) and then divide the result by 9.\n    return (113 - 5) / 9\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # The operation # can be rewritten as a function in Python\n    def hash_op(a, b):\n        return a + b - (a * b) / 910\n\n    # Starting from the right-most operation, since # is not associative\n    ans = 1\n    for num in range(2, 2017):\n        ans = hash_op(num, ans)\n        \n    return ans\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # There are 6 identical erasers to be distributed to 3 kids.\n    # We can simplify the problem by considering it as placing two partitions in the 5 gaps between the erasers.\n    # The number of ways to place these partitions is the same as choosing 2 positions from 5 possible placements.\n    # This is a combination problem: C(5, 2)\n\n    from math import comb\n    ans = comb(5, 2)\n    return ans\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    for correct_answers in range(7):\n        wrong_answers = 6 - correct_answers\n        score = (correct_answers * 5) - (wrong_answers * 2)\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total distance covered by the plum trees = (number of plum trees - 1) * distance between each plum tree\n    total_distance = (41 - 1) * 4\n    \n    # Number of pine trees = (total distance / distance between each pine tree) + 1\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Given values\n    distance_ahead = 10  # Kelvin is 10 km ahead\n    speed_maverick = 15  # Maverick's speed in km/h\n    speed_kelvin = 10    # Kelvin's speed in km/h\n    time_maverick = 24 / 60  # Maverick's time in hours to catch up (24 minutes)\n\n    # Calculate the distance Maverick travels in the given time\n    distance_maverick = speed_maverick * time_maverick\n\n    # Calculate the distance Kelvin travels in the same time\n    distance_kelvin = speed_kelvin * time_maverick\n\n    # Calculate the relative distance travelled by Maverick with respect to Kelvin\n    relative_distance = distance_maverick - distance_kelvin\n\n    # Calculate the time it would actually take for Maverick to catch up to Kelvin\n    catch_up_time = distance_ahead / (speed_maverick - speed_kelvin)  # Time in hours\n\n    # Check if Maverick's certainty of time is correct\n    if relative_distance >= distance_ahead:\n        # If relative distance covered is greater than or equal to the distance ahead, Maverick is correct\n        return 24  # Return time in minutes as originally stated by Maverick\n    else:\n        # Kelvin is correct and we convert the time from hours to minutes and return it\n        return catch_up_time * 60  # Convert hours to minutes\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_litres = week1 + week2 + week3\n\n    return total_litres\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    rate_per_person_per_hour = 1 / (10 * 9)  # The rate at which one person builds the bridge in an hour.\n    total_work = 1  # The total work represents the completion of one bridge.\n    \n    # Now we calculate how many people we need if we want to finish the work in 3 hours.\n    # Total rate needed to finish the work in 3 hours.\n    total_rate_needed = total_work / 3\n    \n    # Calculate number of people needed for the new rate.\n    people_needed = total_rate_needed / rate_per_person_per_hour\n    \n    return people_needed\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    for younger in range(1, 120):  # Assuming ages are reasonable within human lifespan\n        for older in range(younger, 120):\n            # When the older person was the same age as the younger person is now:\n            # The younger person was (older - younger) years younger\n            younger_age_when_older_was_youngers_age_now = 4\n            age_difference = older - younger\n\n            # When the younger person will be the same age as the older person is now:\n            # The younger person will be 61 years old\n            older_age_when_younger_will_be_as_old_as_older_is_now = 61\n\n            if younger - age_difference == younger_age_when_older_was_youngers_age_now and \\\n               older + age_difference == older_age_when_younger_will_be_as_old_as_older_is_now:\n                return younger\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6 - ((5 - 1) * 5 * (2 * (5 - 1) + 1)) // 6\n    return sum_squares\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    # Let's denote the total number of watermelons as x.\n    # According to the problem:\n    # First day, Helen sold 1/3 of her watermelons: (1/3) * x\n    # After first day, Helen had 2/3 of her watermelons left: (2/3) * x\n    # On the second day, Helen sold 60% of remaining watermelons: 0.60 * (2/3) * x\n    # After both days, Helen had 48 watermelons left:\n    # So we have: (2/3 * x) - (0.60 * (2/3) * x) = 48\n  \n    # Now we just need to solve for x using basic algebra\n    remaining_after_first = 2/3\n    sold_second_day = 0.60 * remaining_after_first\n    remaining_after_both_days = remaining_after_first - sold_second_day\n    x = 48 / remaining_after_both_days\n    \n    return int(x)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # ensure x2 > x1\n            for x3 in range(x2+1, 9):  # ensure x3 > x2\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # The number of desks in front of Jessica's desk\n    desks_in_front_of_jessica = 5\n    \n    # The number of desks behind Judy's desk\n    desks_behind_of_judy = 7\n    \n    # There is 1 desk (Jessica's) between the desks in front of Jessica and behind Judy\n    # Desks in front of Jessica's + Jessica's desk + Judy's desk + Desks behind Judy's\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_of_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    # Let's introduce a variable for the number of boys (b) in the school\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    # If we remove 1/11 of the boys and 5 girls, then the number of remaining boys is b - b/11\n    # The number of girls in the school would then be 152 - b (since total students are 152)\n    # After removing 5 girls, the number of remaining girls would be 152 - b - 5\n    # The problem states that after these removals, the number of remaining boys and girls is the same\n    equation = Eq(b - b/11, 152 - b - 5)\n    # Solving the equation for b (the original number of boys)\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(75 / 100 * x - 5, 2.5)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    return product % 100\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n\n    # Let's say Bud had \"initial_amount\" of money\n    # She spent 1/3 of it on a book\n    money_after_book = initial_amount - (initial_amount / 3)\n\n    # She then spent 2/5 of the remaining money on a bag\n    # This amount equals to 120\n    equation = Eq((2 / 5) * money_after_book, 120)\n\n    # Solve for the initial amount of money\n    initial_money_solution = solve(equation, initial_amount)\n\n    return initial_money_solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_value = 1000\n    difference = -11\n    term = initial_value\n    n = 0\n    \n    while term >= 0:\n        n += 1\n        term += difference\n        \n    return term + difference  # Return the first negative number\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    one_number = 0.11\n    other_number = (midpoint - one_number) + midpoint \n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    people = 17 + 1  # Sarah + 17 classmates\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_chocolate = 7 / 12\n    toffees = chocolates * toffees_per_chocolate\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factor for factor in range(1, num + 1) if num % factor == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_price_per_case = 56\n    mango_cases = 24\n    lychee_cases = 19\n    \n    total_cost = 2826\n    \n    lychee_price_per_case = (total_cost - (mango_price_per_case * mango_cases)) / lychee_cases\n    \n    return lychee_price_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    possible_totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                total = c1 + c2 + c3\n                possible_totals.add(total)\n    \n    return len(possible_totals)\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time for each game\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_to_decimal = 65 / 100\n    decimal_number = 0.507\n    fraction_to_decimal = 1 / 4\n    \n    ans = percentage_to_decimal + decimal_number + fraction_to_decimal\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A == 0:  # Skip leading zero for a three-digit number\n            continue\n        num1 = int(f\"{A}{B}{5}\")  # A and B are the missing digits, and 5 is given\n        num2 = int(f\"{C}2\")  # C is the missing digit and 2 is given\n        product = num1 * num2\n        # Check product to match pattern 794xx\n        if str(product).startswith(\"794\"):\n            return A + B + C\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "def solution():\n    from itertools import permutations\n\n    cards = ['1', '1', '2', '2']\n    possible_numbers = set()\n\n    for perm in permutations(cards, 3):\n        if perm[0] != '0':  # Exclude numbers that start with 0\n            possible_numbers.add(''.join(perm))\n\n    return len(possible_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Check the multiplication pattern\n                if (P * 100 + Q * 10 + R) * 4 == R * 100 + Q * 10 + P:\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    total_amount = 555\n    price_with_name = 15\n    price_without_name = 10\n    total_children = 50\n\n    # Number of children who did not have their names on the shirt\n    without_name = (total_amount - total_children * price_with_name) / (price_without_name - price_with_name)\n    # Number of children who had their names on the shirt\n    with_name = total_children - without_name\n    \n    return int(with_name)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan's jogging time in hours from 7:30 AM to 8:30 AM\n    jogging_time = 1\n    \n    # Susan's walking time in hours from 8:30 AM to 10:30 AM\n    walking_time = 2\n    \n    # Susan's jogging speed in miles per hour\n    jogging_speed = 5\n    \n    # Susan's walking speed in miles per hour\n    walking_speed = 3\n    \n    # Distance covered by jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Distance covered by walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Since they are consecutive, we can express them as x, x+1, x+2, x+3, x+4\n    # The sum of these five numbers will be 5x + 10 = 100\n    # Solving this equation for x will give us the smallest number\n    x = (100 - 10) // 5\n    return x\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    num_bags = (total_balls - 2) // balls_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    total_distance = 800\n    distance_between_trees = total_distance / (total_trees - 1)\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # You can draw one card from each pattern without getting three of the same number\n    # So 4 cards ensures no three cards have the same number\n    # The next card drawn will force at least three cards to have the same number\n    # So you must draw 4 + 1 cards to ensure three cards have the same number\n    return 4 + 1\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    # We are trying to find a value q such that 44000/q is a perfect cube\n    # First let's find the prime factorization of 44000 to see what q can be\n    from sympy import factorint\n    \n    # Factor 44000 into its prime factors\n    factors = factorint(44000)\n    \n    # Initialize an empty dictionary to keep track of the powers in the prime factorization\n    # that would make 44000/q a perfect cube\n    cube_factors = {}\n    \n    # Iterate through the prime factors and powers\n    for prime, power in factors.items():\n        # We need each power to be a multiple of 3 for 44000/q to be a cube. So, subtract the remainder\n        # when this power is divided by 3 from the power to make it a multiple of 3\n        cube_factors[prime] = power - (power % 3)\n    \n    # Now from the cube factors, find the product of primes raised to the appropriate power to get q\n    q = 1\n    for prime, cube_power in cube_factors.items():\n        q *= prime ** cube_power\n    \n    return q\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3 / 4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_gaps = 9 + 1 # There are 9 trees and 10 gaps between them (incl. the two buildings)\n\n    distance_between_each_tree = total_distance / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks_initial = andy_notebooks - andy_gives // 2  # This is Joey's incorrect calculation\n    correct_sister_notebooks_initial = (andy_notebooks - andy_gives) // 2  # This is the correct calculation\n    \n    if sister_notebooks_initial == correct_sister_notebooks_initial:\n        is_joey_correct = True\n    else:\n        is_joey_correct = False\n    \n    return correct_sister_notebooks_initial, is_joey_correct\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let the smaller number be x\n    # Then the larger number is 2x\n    # According to the problem, their sum is 72\n    # x + 2x = 72\n    # 3x = 72\n    # x = 72 / 3\n    # x = 24\n    # So the smaller number is 24\n    smaller_number = 72 // 3\n    return smaller_number\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    total_people = people_in_front_of_emily + danny_position_from_back + 1  # +1 for Emily herself\n\n    return total_people\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'spades': ['A', 'J', 'K'],\n        'hearts': ['3', '5', 'K'],\n        'diamonds': ['2', '7', 'J'],\n        'clubs': ['A', '7']\n    }\n    \n    # Eddie's and Avril's knowledge after James's announcements:\n    # 1. If the card is Ace (A), Eddie cannot be sure because there are two possibilities - spades or clubs\n    # 2. If the card number Eddie heard was J, K or 7, he cannot be sure because there are multiple possibilities\n    # 3. Since Eddie cannot be sure, these multiple possibility numbers must be ruled out since after Eddie says he's unsure, Avril is suddenly sure.\n    \n    # Avril's conclusion (he knows the card after Eddie's statement):\n    # Avril can be confident of the card only if the card number she heard has only one unique suit associated with it, considering Eddie's statement.\n    \n    # Eddie's final conclusion (after Avril's statement that she knows the card):\n    # Eddie now knows the suit and since he's sure after Avril's statement that she knows the card, the suit must have only one number associated with it that hasn't been ruled out by Eddie's previous analysis. \n    \n    # Possible card numbers after Eddie cannot be sure (removing J, K, 7, A since these have multiple suit options):\n    # It has to be a number unique to a suit after removing J, K, 7, and A.\n    \n    # Go through each suit and find unique card number that presents no ambiguities based on the given restrictions\n    for suit, numbers in possible_cards.items():\n        # Find if there's only one number for this suit that has not been ruled out.\n        unique_possible_numbers = [number for number in numbers if number not in ('J', 'K', '7', 'A')]\n        \n        # When we find a suit with exactly one such unique number\n        if len(unique_possible_numbers) == 1:\n            ans = (suit, unique_possible_numbers[0])\n            return ans\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    original_number = 200\n    for i in range(3):  # Three digits in 200 that we can change: hundreds, tens, or ones place\n        for digit in range(10):  # Possible digits from 0 to 9\n            if i == 0 and digit == 0:  # Skip changing the hundreds place to 0, as it would not be a 3-digit number\n                continue\n            if i == 2 and digit % 2 == 0:  # Skip even numbers for the ones place (only 2 is an even prime)\n                continue\n\n            # Create a new number by changing one digit at a time\n            number_as_list = list(str(original_number))\n            number_as_list[i] = str(digit)\n            new_number = int(''.join(number_as_list))\n\n            # Check if the new number is prime and count it\n            if isprime(new_number):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma takes 12 minutes to make 3 cuts to divide a wood into 4 sections\n    # The time Emma needs is directly proportional to the number of cuts she has to make\n    # For 5 cuts (since 5 cuts produce 6 sections), the time would be:\n    cuts_for_four_sections = 3\n    cuts_for_six_sections = 5\n    time_for_three_cuts = 12\n\n    # Calculate time for each cut\n    time_per_cut = time_for_three_cuts / cuts_for_four_sections\n\n    # Calculate total time for 5 cuts\n    total_time_for_five_cuts = time_per_cut * cuts_for_six_sections\n\n    return total_time_for_five_cuts\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    # Initialize page count and the number of times digit '5' appears\n    page_count = 0\n    digit_5_count = 0\n    \n    # Increment page count until the digit '5' appears 30 times\n    while digit_5_count < 30:\n        page_count += 1\n        digit_5_count += str(page_count).count('5')\n    \n    return page_count\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    cost_per_cup = total_cost / num_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    days = symbols('days')\n    pages = symbols('pages')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(30 * (days + 2), pages)  # Vanessa will finish 2 days later than the deadline reading 30 pages a day\n    equation2 = Eq(39 * (days - 4), pages)  # Vanessa will finish 4 days ahead of the deadline reading 39 pages a day\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (days, pages))\n    \n    # Extract the solutions for the number of days to finish reading and the total number of pages\n    num_days = solutions[days]\n    num_pages = solutions[pages]\n    \n    return num_days, num_pages\n\n# Call the solution function and store the results in the \"ans\" variable\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum_first_part = sum(range(6, 11))  # 10+9+8+7+6\n    sum_second_part = sum(range(1, 6))  # 5+4+3+2+1\n    ans = sum_first_part - sum_second_part\n    return ans\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges for 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n    # Jade buys 1 apple and 1 orange for 31p\n    equation2 = Eq(apple + orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n\n    days = (total_rooms / (rooms_per_worker_per_day * workers))\n\n    return days\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given_away = total_badges * (3/8)\n    badges_left = total_badges - badges_given_away\n    return badges_left\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money = symbols('pocket_money')\n    cost_per_ball = symbols('cost_per_ball')\n\n    equation1 = Eq(4 * cost_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * cost_per_ball + 151, pocket_money)\n\n    solutions = solve((equation1, equation2), (pocket_money, cost_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Elias had 5 times as many stickers as Aileen\n    equation1 = Eq(elias, 5 * aileen)\n\n    # After giving away and losing stickers, they have the same amount\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Calculate the number of stickers they each have left\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n\n    return (elias_final, aileen_final)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    \n    total_steps = steps_per_staircase * total_staircases\n    \n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    people_behind = 14\n    total_people = 23\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    ans = cookies_per_gram * 48\n    return int(ans)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4**2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    sum_decimal = num1 + num2\n    ans = oct(sum_decimal)[2:]\n    return ans\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    thomas, gerald = symbols('thomas gerald')\n\n    # Thomas is greedy: for every 3 pieces of cheese Gerald eats, Thomas eats 5\n    equation1 = Eq(thomas, (5/3) * gerald)\n\n    # The two of them eat 104 pieces of cheese in total\n    equation2 = Eq(thomas + gerald, 104)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    # How many more pieces of cheese did Thomas eat than Gerald\n    more_cheese = solutions[thomas] - solutions[gerald]\n\n    return more_cheese\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    amount = 1.54\n    result = fraction * amount\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let x be the total number of tennis rackets purchased initially.\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    total_profit = 525\n\n    # Cost price for x tennis rackets will be 150 * x.\n    # Revenue from selling (x - 8) tennis rackets will be 175 * (x - 8).\n    # The profit made from selling (x - 8) tennis rackets will be\n    # revenue - cost of (x - 8) rackets = 175 * (x - 8) - 150 * (x - 8).\n\n    # Set up the equation based on the information given:\n    # Total initial cost + Profit = Revenue from selling (x - 8) rackets\n    # 150 * x + 525 = 175 * (x - 8)\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(cost_price_per_racket * x + total_profit, selling_price_per_racket * (x - remaining_rackets))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b, girls be g, and adults be a.\n    # We then have the following relations:\n    # b = 2/7 * g (there were 2/7 as many boys as girls)\n    # a = 2/3 * (g + b) (there were 2/3 as many adults as children)\n    # a = 1228 + b\n\n    # By substitution:\n    # 1228 + b = 2/3 * (g + b)\n    # g = 7/2 * b\n\n    # Now we have:\n    # 1228 + b = 2/3 * (7/2 * b + b)\n    # 1228 + b = 2/3 * (7/2 * b + 2/2 * b)\n    # 1228 + b = 2/3 * (9/2 * b)\n    # 1228 + b = 3 * (3/2 * b)\n    # 1228 = 2 * (3/2 * b)\n    # 1228 = 3b\n    # b = 1228 / 3\n    b = 1228 / 3\n\n    # Calculate the number of girls\n    g = (7/2) * b\n\n    # Calculate the number of adults\n    a = 1228 + b\n\n    # The total number of people at the park is the sum of boys, girls, and adults\n    total_people = b + g + a\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n*(n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let the amount of money Chloe and Gordon had at first be x\n    # Number of Days both spent their money till Chloe had $157 and Gordon had $82\n    # Chloe spent: x - 157 = 20 * days\n    # Gordon spent: x - 82 = 25 * days\n    # Equating both we get: x - 157 = 20 * days and x - 82 = 25 * days\n    # Hence the difference (82-157) should be equal to 5 * days\n\n    difference_in_spending = 157 - 82\n    difference_in_daily_spend = 25 - 20\n\n    days = difference_in_spending // difference_in_daily_spend\n    gordon_initial_amount = 82 + 25 * days\n\n    return gordon_initial_amount\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    from math import factorial\n    \n    # Calculates factorial of 10\n    n = factorial(10)\n    \n    # Counts the number of trailing zeros by dividing the factorial by 10\n    # until the remainder is no longer zero\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost = 15\n    melons_bad = total_melons / 5\n    melons_sold = total_melons - melons_bad\n    selling_price_per_melon = 1.50\n\n    income = melons_sold * selling_price_per_melon\n    profit = income - cost\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # The number of oranges and apples left over are the remainders\n    # when dividing by the number of neighbours.\n    # Since the remainder is less than the number of neighbours,\n    # the number of neighbours must be a divisor of (oranges - remainder) and (apples - remainder).\n    oranges_remainder = 17\n    apples_remainder = 5\n    oranges = 150 - oranges_remainder\n    apples = 100 - apples_remainder\n\n    # We're looking for the greatest common divisor (GCD)\n    num_neighbours = gcd(oranges, apples)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # in cm\n    cross_interval = 1  # in cm\n\n    # +1 because we count the cross at the beginning as well\n    num_crosses = (line_length // cross_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # red, red, green, yellow, yellow, green\n    green_per_pattern = 2  # two green balloons per pattern\n\n    full_patterns = 75 // pattern_length\n    remaining_balloons = 75 % pattern_length\n\n    green_balloons = full_patterns * green_per_pattern\n    if remaining_balloons >= 3:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the total value of the jewels in P initially be x pounds.\n    # Let the total value of the jewels in Q initially be y pounds.\n    # When a jewel worth 5000 pounds is transferred from P to Q:\n    # New average value of jewels in P = (x - 5000) / 2 pounds\n    # New average value of jewels in Q = (y + 5000) / 2 pounds\n    # According to the problem:\n    # New average value of jewels in P = Old average value of jewels in P + 1000 pounds\n    # New average value of jewels in Q = Old average value of jewels in Q + 1000 pounds\n    # We have two equations:\n    # (x - 5000) / 2 = (x / 3) + 1000 and (y + 5000) / 2 = (y / 3) + 1000\n    \n    # Solving the equations:\n    # (x - 5000) / 2 = (x / 3) + 1000 => 3x - 15000 = 2x + 6000 => x = 21000\n    # (y + 5000) / 2 = (y / 3) + 1000 => 3y + 15000 = 2y + 6000 => y = 9000\n    \n    # Total value of jewels in both boxes\n    return 21000 + 9000\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    # Calculate the distance between two consecutive lamp posts\n    distance_between_two = 60 / (6 - 1)\n\n    # Calculate the distance between the 1st and the 9th lamp post\n    distance_between_first_and_ninth = distance_between_two * (9 - 1)\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n\n    return strawberries_left\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    # Let s be the original number of marbles Sandra had.\n    # Let j be the original number of marbles Jessica had.\n    from sympy import symbols, Eq, solve\n\n    s, j = symbols('s j')\n    # After giving 13 marbles away, Sandra has (s - 13) marbles.\n    # Jessica now has (j + 13) marbles.\n    # Sandra has 6 fewer marbles than Jessica after giving the 13 marbles.\n    equation = Eq(s - 13, j + 13 - 6)\n\n    # Solve for s in terms of j\n    solutions = solve(equation, s)\n\n    # The solution s will give us Sandra's original marbles in terms of Jessica's marbles.\n    # We want to know how many more marbles Sandra had compared to Jessica initially.\n    # So we calculate s - j using the expression we got for s.\n    marbles_more = solutions[0] - j\n\n    return marbles_more\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize count of digit '1' and digit '2'\n    count_1 = 0\n    count_2 = 0\n    n = 1\n    \n    # Iterate through the numbers until the counts match the conditions\n    while True:\n        # Convert the current number to string\n        # and count the occurrences of '1' and '2'\n        str_n = str(n)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n\n        # Check if the condition is met\n        if count_1 == 15 and count_2 == 14:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Assuming that each step Andy and Bob take is constant for each floor they climb.\n    # The ratio of Andy's progress to Bob's progress is 9:5 when Andy is at the 9th floor.\n    \n    andy_current_floor = 9\n    bob_current_floor = 5\n    total_floors = 25\n\n    # Calculate the floor Bob will reach using the ratio when Andy is at the top floor.\n    bob_final_floor = (bob_current_floor * total_floors) // andy_current_floor\n\n    return bob_final_floor\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    # Let's iterate through possible values for m (0 to 9, since m is one digit)\n    for m in range(10):\n        # Construct the numbers based on the given place value relationship and calculate their difference\n        if (12 * 10 + m) == (9 * (10 + m) - 2):\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of words he needs to type in total\n    # Let y be his original typing speed (words per minute)\n    x, y = symbols('x y')\n\n    # Original speed: he can finish the work in 3 minutes\n    equation1 = Eq(x, 3 * y)\n\n    # Increased speed: he can finish the work 1 minute earlier (in 2 minutes)\n    equation2 = Eq(x, 2 * (y + 30))\n\n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let the total initial number of candies be x.\n    # Kate ate 1/3 at home, so she took 2/3 to school.\n    # She shared the 2/3 among her seven friends, each receiving 26 candies,\n    # and she was left with 22 candies.\n\n    # Therefore, the equation to solve is:\n    # (2/3) * x - 7 * 26 = 22\n    # Simplify and solve for x:\n    # (2/3) * x = 22 + 7 * 26\n    # x = (22 + 7 * 26) * (3/2)\n\n    total_candies_at_school = 22 + (7 * 26)\n    initial_candies = total_candies_at_school * (3/2)\n\n    return int(initial_candies)\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights_status = [False] * 10  # Initial status of lights (all off)\n\n    # Ms. Lily presses each switch every other one (1, 3, 5, 7, 9)\n    for i in range(1, 11, 2):\n        lights_status[i - 1] = not lights_status[i - 1]\n\n    # Sam presses each switch with an even number 7 times\n    # Switching a light on and off 7 times will leave it in the inverse of its initial state\n    for i in range(2, 11, 2):\n        lights_status[i - 1] = not lights_status[i - 1]\n\n    # Count how many lights are on\n    ans = sum(lights_status)\n    return ans\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    net_distance = climb_distance - slip_distance\n    day = 0\n    \n    while total_distance > 0:\n        day += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slip_distance\n        \n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # A contains 2/3 as much water as B\n    equation1 = Eq(A, 2/3 * B)\n    \n    # When 4 litres of water is poured from B to A\n    # A will contain 7/8 as much water as B\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    time_spent = 2  # hours\n    total_parts_required = 100\n\n    parts_per_hour = parts_made / time_spent\n    total_time_needed = total_parts_required / parts_per_hour\n\n    additional_time_needed = total_time_needed - time_spent  # Subtract the time already spent\n\n    return additional_time_needed\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 6  # %\n    desired_sugar_percentage = 10  # %\n    \n    initial_sugar_content = initial_volume * (initial_sugar_percentage / 100)\n    final_sugar_content = (desired_sugar_percentage / 100) * initial_volume\n    \n    added_sugar = final_sugar_content - initial_sugar_content\n\n    return added_sugar\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    price_per_bar = 50\n    number_of_bars = 4\n    total_cost = price_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # If you pick 2 of each color, you still don't have 3 different colors guaranteed.\n    # Therefore, after you pick the 7th ball, no matter what, you will have 3 different colors.\n    # This is because in the worst-case scenario, you could pick 2 red, 2 white, and 2 yellow\n    # balls in the first 6 draws, and the 7th ball will ensure the third color.\n\n    return 2 * 3 + 1  # each color (2) times number of colors (3) plus 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade_4, grade_5, grade_6 = symbols('grade_4 grade_5 grade_6')\n\n    equation1 = Eq(grade_5, 4 + 2*grade_4)\n    equation2 = Eq(grade_6, 8 + 3*grade_4)\n    equation3 = Eq(grade_4 + grade_5 + grade_6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade_4, grade_5, grade_6))\n\n    return solutions[grade_6]\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    # Using pigeonhole principle since there are 5 different color combinations for 2 balls\n    # and if we have 6 people, two must have the same combination. (5 + 1)\n    # Since the order of the balls doesn't matter, calculate the combinations for choosing 2 out of 5 colors.\n    from math import comb\n\n    # Calculate the combinations of choosing 2 out of 5 colors\n    combinations = comb(5, 2)\n    # To find at least how many people are required for two of them to have the same color of balls,\n    # we use pigeonhole principle; by having combinations + 1 people, we ensure at least two have the same combination.\n    return combinations + 1\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # If we draw 1 number, there's no guarantee it will create a product divisible by 4 with another.\n    # Drawing 2 numbers, still if we draw 2 odd numbers, their product won't be divisible by 4.\n    # Drawing 3 numbers, according to the pigeonhole principle,\n    # we must draw at least one even number because the worst case would be:\n    # 2 odd numbers, and 1 even. The even could be a number that when multiplied with another even gives\n    # a product divisible by 4, but there is still a chance that it is not (e.g., multiple of 4 and an odd number).\n    # Drawing 4 numbers, we can have at most 2 odd numbers, and at least 2 even numbers.\n    # In the worst-case scenario, we have 2 odd numbers and 2 even numbers where one even must be a multiple of 4.\n    # So, there are definitely two numbers whose product is divisible by 4.\n\n    # Hence, to ensure that there are two numbers whose product is divisible by 4, we need to draw 4 numbers.\n    return 4\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    # Let the number of cards Hisham has be x.\n    # Then Melissa has 2x cards.\n    # Together, they have x + 2x = 3x cards.\n    # They have a total of 876 cards.\n    # So, 3x = 876 cards.\n    # We find x, which is the number of cards Hisham has.\n    x = 876 / 3\n\n    # Now, Melissa has 2x cards, and she should give away some cards to Hisham\n    # so that both of them have the same number of cards.\n    # If they end up with the same number of cards, they should each have half of the total.\n    # Half of 876 is 876 / 2 cards.\n    # The number of cards Melissa should give to Hisham is her current amount minus the half total.\n    cards_melissa_should_give = (2 * x) - (876 / 2)\n\n    return int(cards_melissa_should_give)\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50-i)*(50+i) for i in range(5))\n    return ans\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt, floor\n    \n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = min(primerange(10, 100))\n    \n    # Find the largest two-digit number that is a perfect square\n    largest_square = floor(sqrt(99)) ** 2\n    \n    # Calculate the product\n    result = smallest_two_digit_prime * largest_square\n    \n    return result\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40/(x+5), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    for future_years in range(1, 100):\n        new_brian_age = brian_age + future_years\n        new_father_age = father_age + future_years\n        if str(new_brian_age).zfill(2) == str(new_father_age).zfill(2)[::-1]:\n            return new_brian_age\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_usd = cost_in_euros * euro_to_usd\n    return cost_in_usd\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    \n    return lcm(12, 56)\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_n = float('-inf')\n    digits = range(1, 10)\n\n    # Generate all possible permutations of the digits 1 to 9\n    for perm in permutations(digits):\n        a, b, c, d, e, f, g, h, j = perm\n\n        # Calculate the expression for the current permutation\n        result = a + b/c + (d/e)*f - (g + h/j)\n\n        # Check if the result is a whole number and update max_n if the current result is greater\n        if result.is_integer() and result > max_n:\n            max_n = result\n\n    return int(max_n)\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_count = 12\n    seniors_count = 8\n    juniors_average = 10\n    total_average = 14\n    total_count = juniors_count + seniors_count\n\n    # Compute the total score of juniors\n    total_score_juniors = juniors_count * juniors_average\n    # Compute the total score of all participants\n    total_score_all = total_count * total_average\n    # Compute the total score of seniors\n    total_score_seniors = total_score_all - total_score_juniors\n    # Compute the average score of seniors\n    seniors_average = total_score_seniors / seniors_count\n\n    return seniors_average\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Define the total number of books before purchasing new ones\n    total_books_initial = 3900\n    \n    # Define the ratios for each type of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n    \n    # Calculate the number of books for each language initially\n    chinese_books_initial = (ratio_chinese / ratio_total) * total_books_initial\n    malay_books_initial = (ratio_malay / ratio_total) * total_books_initial\n    english_books_initial = (ratio_english / ratio_total) * total_books_initial\n    \n    # Calculate the total number of books after purchasing new ones\n    total_books_final = total_books_initial + 510\n    \n    # Calculate the number of books for Chinese and Malay after the increase\n    chinese_books_final = chinese_books_initial * 1.2  # Chinese books increased by 20%\n    malay_books_final = malay_books_initial * 1.1  # Malay books increased by 10%\n    \n    # The rest of the new books must therefore be English books\n    english_books_final = total_books_final - (chinese_books_final + malay_books_final)\n    \n    # Calculate the percentage increase in the number of English books\n    increase_english = english_books_final - english_books_initial\n    percentage_increase_english = (increase_english / english_books_initial) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    score_per_correct = 4\n    score_per_incorrect = -2\n    score_not_attempted = 0\n    final_score = 66\n\n    # Rex did not answer one question, so he attempted total_questions - 1 questions.\n    for correct_answers in range(total_questions):\n        incorrect_answers = (total_questions - 1) - correct_answers\n        score = (correct_answers * score_per_correct +\n                 incorrect_answers * score_per_incorrect +\n                 score_not_attempted)\n        if score == final_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    current_combined_age = 10 + (4 * 2)  # (4 years ago * 2 dogs)\n    future_combined_age = current_combined_age + (2 * 2)  # (in 2 years * 2 dogs)\n    return future_combined_age\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2021)\n    denominator = 92 / (10 ** 2022)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n\n    butter_needed = (butter_used * desired_cookies) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to Pigeonhole Principle, if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n\n    # In this case, we have 10 containers, and we want to know the minimum number\n    # of apples such that no matter the distribution, one container has at least 2 apples.\n\n    # If we had 9 apples, we could put 1 apple in each of the 9 containers, and the\n    # 10th container would be empty. To ensure at least 1 container has 2 apples,\n    # we need to add one more apple to any of the containers that already has 1 apple.\n\n    # So we need at least 9 + 1 = 10 apples.\n    return 10\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_percentage = 60 / 100\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n\n    total_correct = correct_percentage * total_questions\n    total_wrong = total_questions - total_correct\n    total_unanswered = total_questions - total_correct\n\n    # Let correct_answers be the number of questions Mochi correctly answered.\n    # Equation: correct_answers * correct_marks + (total_correct - correct_answers) * wrong_marks\n    # + total_unanswered * unanswered_marks = total score\n\n    for correct_answers in range(int(total_correct) + 1):\n        score = (correct_answers * correct_marks +\n                (total_correct - correct_answers) * wrong_marks +\n                total_unanswered * unanswered_marks)\n        if score == 264:\n            return correct_answers\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    digits = \"\"\n    i = 1\n    while len(digits) < 1000:\n        digits += str(i)\n        i += 1\n    ans = int(digits[999])\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # Using inverse operations to solve the equation\n    result = (19 + 2) // 3\n    return result\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each\n    dedra_received = dedra + 72\n    timm_received = timm + 72\n    \n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra_received, 2 * timm_received)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n    \n    return solutions[dedra]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Number of types of fruit containing each vitamin\n    A_only = 62\n    C_only = 90\n    E_only = 68\n\n    # Number of types of fruit containing two vitamins\n    AC = 48\n    AE = 36\n    CE = 50\n    \n    # Number of types of fruit containing all three vitamins\n    ACE = 25\n\n    # Use Inclusion-Exclusion Principle to find the total\n    total_fruits = (A_only + C_only + E_only \n                    - AC - AE - CE \n                    + ACE)\n\n    return total_fruits\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    total_pupils = 18\n    pupils_to_seat = 3\n\n    # Number of ways to choose 'pupils_to_seat' pupils out of 'total_pupils'\n    # and then arrange them in order.\n    ways = factorial(total_pupils) / factorial(total_pupils - pupils_to_seat)\n\n    return int(ways)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    return 6.31 - 3.2\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = 4\n    jason_age = symbols('jason_age')\n    bruce_age = jason_age\n    willie_age = jason_age\n\n    equation = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n\n    solutions = solve(equation, jason_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Assume that the number of friends is f\n    # If each friend receives 5 erasers, there would be 3 erasers left.\n    # So we have the equation: 5f + 3 = total erasers\n    # If each friend receives 6 erasers, there would be 2 erasers short.\n    # So we have the equation: 6f - 2 = total erasers\n    # Equating both expressions and solving for f\n    # 5f + 3 = 6f - 2\n    # f = 3 + 2 = 5 (number of friends)\n    f = 5\n    # Now, solve for the total number of erasers using either equation:\n    total_erasers = 5 * f + 3\n    return total_erasers\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum((i**2 + (i + 1)**2) / (i * (i + 1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Initialize all combinations with two pairs of brackets\n    expressions = [\n        '((15+5)*5+(15-6))+7',\n        '(15+(5*5+15)-6)+7',\n        '15+(5*(5+(15-6))+7)',\n        '15+((5*5)+(15-6+7))',\n        '(15+5)*(5+(15-(6+7)))'\n    ]\n    \n    # Evaluate each expression and find the one with the smallest result\n    smallest = eval(expressions[0])\n    for exp in expressions[1:]:\n        result = eval(exp)\n        if result < smallest:\n            smallest = result\n            \n    return smallest\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    youngest = symbols('youngest')\n\n    # The oldest child is six times the age of the youngest\n    oldest = 6 * youngest\n\n    # The difference in ages between each child is 15 months\n    # Since there are 9 children, there are 8 intervals of 15 months\n    age_diff_total = 15 * 8\n\n    # The age of the oldest child is the age of the youngest plus the total age difference\n    equation = Eq(oldest, youngest + age_diff_total)\n\n    # Solving for the age of the youngest child\n    solution = solve(equation, youngest)\n\n    return solution[0]\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        modified = original[-1] + original[1:3] + original[0]\n        if int(modified) - i == 5877:\n            return i\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n\n    ans = (last_multiple - first_multiple) // 11 + 1\n    return ans\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let Jiaxiang's sweets be x\n    # Then Cayden's sweets will be x + 5\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang's new sweet count is x + 10\n    # Cayden's new sweet count is (x + 5) - 10\n    # The difference in their sweet count is therefore:\n    # (x + 5) - 10 - (x + 10) = x + 5 - 10 - x - 10\n    # Simplifying, the difference is:\n    difference = 5 - 10 - 10\n    return difference\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    return 75 * 0.29 + 75 * 0.01 * 74 - 0.3 / (2 / 15)\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    initial_students = 5\n    initial_average = 72\n    total_initial_score = initial_students * initial_average\n    \n    new_students = 6\n    new_average = 75\n    total_new_score = new_students * new_average\n    \n    marys_score = total_new_score - total_initial_score\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # speed of the train in m/s\n\n    # The total distance the train needs to travel to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge = total distance to cover / speed of the train\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # We start with the largest 3-digit number that is odd, which is 999\n    # and decrement by 2 each step to check other odd numbers\n    for number in range(999, 100 - 1, -2):\n        # Check if the number is divisible by 9\n        if number % 9 == 0:\n            # Extract the tens digit and check if divisible by 4\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48  # meters\n    walking_speed = 8  # meters per minute\n    minutes_taken = distance_to_market / walking_speed\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the value of each coin as it is a multiple of 5 pence.\n    coins = [5, 10, 20, 50, 100]  # 5p, 10p, 20p, 50p, £1 (100p)\n\n    # The total change received after buying the items.\n    total_change = sum(coins)\n\n    # Calculate the amount spent.\n    # Five pound note is 500 pence.\n    amount_spent = 500 - total_change\n\n    return amount_spent\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Distributing 11 identical doughnuts to 4 students\n    # with at least one doughnut per student is equivalent\n    # to putting 11 identical items into 4 distinct boxes\n    # with no box being empty. This is equivalent to\n    # partitioning 11 items with 3 dividers.\n    \n    # Since each student must get at least one doughnut,\n    # we first give each student one doughnut which uses up\n    # 4 doughnuts, leaving us with 11 - 4 = 7 doughnuts to distribute.\n    \n    # Now we need to distribute these 7 doughnuts to 4 students\n    # which is like adding 3 dividers to create four segments\n    # in a line of 7 identical doughnuts.\n    \n    # The resulting configuration is a combination of 7 doughnuts\n    # and 3 dividers, which is the number of ways we can choose\n    # 3 positions from the 7 + 3 available (for the dividers), so\n    # we use the combination formula: comb(N, K)\n    \n    remaining_doughnuts = 7\n    dividers = 4 - 1 # because we need one less divider than the number of students\n    \n    # Calculate the number of possible combinations\n    ans = comb(remaining_doughnuts + dividers, dividers)\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    \n    return midnight_temp\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The worst case scenario to guarantee one of each color is to pick the maximum of one color first.\n    # Since we have the most green marbles, we can pick all 7, and then pick 1 of each of the other colors.\n    max_green = 7\n    one_red = 1\n    one_blue = 1\n    one_orange = 1\n\n    # The total number of marbles we need to pick\n    marbles_needed = max_green + one_red + one_blue + one_orange\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg\n    hives_for_90kg = 90 / honey_per_hive\n    additional_hives_needed = hives_for_90kg - hives_for_50kg\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the original number of erasers Ali had, and 'k' be what Kumar had.\n    a, k = symbols('a k')\n    \n    # Given the initial ratio of Ali to Kumar's erasers\n    initial_ratio = Eq(a / k, 7/5)\n    \n    # After giving erasers, the new ratio\n    new_ratio = Eq((a - 10) / (k + 10), 1/5)\n    \n    # Solve the system of equations \n    solutions = solve((initial_ratio, new_ratio), (a, k))\n    \n    # Total number of erasers they have together\n    total_erasers = solutions[a] + solutions[k]\n    \n    return total_erasers\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_min = 8 * 60 + 20  # Convert total hours and minutes to minutes\n    activity_and_break_min = 45 + 20  # Calculate the total time each activity along with its break takes\n    activities_count = total_min // activity_and_break_min  # Calculate number of full activities that can fit into the total time\n\n    return activities_count\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n\n    # Calculate the total distance traveled east-west and north-south.\n    east_west_distance = 15 - 9  # 15 km east then 9 km west\n    north_south_distance = 3 + 5  # 3 km north then 5 km north\n\n    # Calculate the shortest distance using the Pythagorean theorem.\n    shortest_distance = sqrt(east_west_distance**2 + north_south_distance**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of $10 notes be t, and the number of $2 notes be n.\n    t, n = symbols('t n')\n\n    # Given that the total number of notes is 38,\n    total_notes_eq = Eq(t + n, 38)\n\n    # He spent 80% of the $10 notes (i.e., 0.8 * t) and 75% of the $2 notes\n    # (i.e., 0.75 * n), and after spending, he had thrice as many $10\n    # notes as $2 notes. So the remaining $10 notes are (1 - 0.8) * t = 0.2 * t,\n    # and the remaining $2 notes are (1 - 0.75) * n = 0.25 * n.\n    remaining_notes_eq = Eq(0.2 * t, 3 * 0.25 * n)\n\n    # Solving the system of equations\n    solutions = solve((total_notes_eq, remaining_notes_eq), (t, n))\n\n    # The number of $10 and $2 notes before spending\n    ten_notes_before = solutions[t]\n    two_notes_before = solutions[n]\n\n    # The cost of the fan is the amount he spent: 80% of the $10 notes\n    # plus 75% of the $2 notes\n    cost_of_fan = 0.8 * ten_notes_before * 10 + 0.75 * two_notes_before * 2\n    \n    return cost_of_fan\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let\n    # Adam's weight = a\n    # Ben's weight = b\n    # Carl's weight = c\n\n    # According to the given conditions,\n    # Adam + Ben = 102  ... (1)\n    # Ben + Carl = 97   ... (2)\n    # Adam + Carl = 92  ... (3)\n\n    # Now adding all the equations, we get:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 92\n    # 2(Adam + Ben + Carl) = 291\n    # Adam + Ben + Carl = 291 / 2\n\n    total_weight = (102 + 97 + 92) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    remaining_length_m = 78 / 100  # Remaining length in meters (78 cm converted to meters)\n\n    melted_length_m = initial_length_m - remaining_length_m  # Length melted in meters\n\n    return melted_length_m\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days B takes to finish the work be 'b'\n    # Let the work done by B in one day be '1/b' (since work is reciprocal of time)\n    # A's efficiency is twice B's, so A's one day work will be '2/b'\n    # A takes 5 days less than B, so A's time to finish the work is 'b - 5'\n    # A's total work can be also represented as (b - 5) * (2/b)\n    \n    b = symbols('b')  # Declare the symbol\n    \n    # Since both A and B finish the same work, we can equate their work\n    equation = Eq((b - 5) * (2/b), 1)\n    \n    # Solve the equation for 'b'\n    days_for_b = solve(equation, b)\n\n    # We just need the positive value since time cannot be negative\n    days_for_b = [day for day in days_for_b if day > 0]\n\n    return days_for_b[0]\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    even_sum = sum(digits[1::2])\n    odd_sum = sum(digits[::2])\n    difference = odd_sum - even_sum\n    remainder = difference % 11\n    return remainder == 1, remainder  # Returns if George is correct as well as the actual remainder\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Create a list to hold the number of ways to climb to each step\n    ways = [0] * 10  # There are 10 positions, from step 0 to step 9\n    ways[0] = 1  # There is 1 way to be at the bottom (step 0) without moving\n\n    # Fill in the number of ways to reach each step\n    for step in range(1, 10):\n        # Pip can arrive at the current step either from a step 1 below or 4 below\n        if step - 1 >= 0:\n            ways[step] += ways[step - 1]  # One step from the previous step\n        if step - 4 >= 0:\n            ways[step] += ways[step - 4]  # Four steps from 4 steps before\n\n    # The answer is the number of ways to reach the 9th step\n    return ways[9]\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    # Initial number of passengers\n    passengers = 35\n    \n    # After first stop\n    passengers -= passengers * 2 // 5  # Two-fifths get off\n    passengers += 7                     # 7 get on\n\n    # After second stop\n    passengers -= passengers // 4       # A quarter gets off\n    passengers += 13                    # 13 get on\n\n    return passengers\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    rounding_error = 5 / 2  # half of the rounding range because it's to the nearest £5\n    actual_minimum_price = estimated_price - rounding_error\n    return actual_minimum_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    \n    years_until_sum_ages_40 = future_sum_ages - current_sum_ages\n    \n    return years_until_sum_ages_40\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # The given sequence consists of terms in increments of 0.5, starting at 0.5 and ending at 10\n    # First, we calculate the number of terms in the sequence\n    first_term = 0.5\n    last_term = 10\n    increment = 0.5\n\n    num_of_terms = int((last_term - first_term) / increment + 1)\n\n    # Now, we need to create the sequence of numbers that will be cubed\n    sequence = [first_term + i * increment for i in range(num_of_terms)]\n\n    # Next, we calculate the sum of the sequence which will give us 1 + 2 + 3 + ... + n\n    sum_of_sequence = sum(sequence)\n\n    # According to the given formula: 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    ans = sum_of_sequence ** 2\n\n    return ans\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    # Each school orders at least 98 magazines and at most 102 magazines.\n    # Loop through all possible orders for the first school.\n    for x in range(98, 103):\n        # Loop through all possible orders for the second school.\n        for y in range(98, 103):\n            # Calculate the order for the third school to reach the total of 300.\n            z = 300 - x - y\n            # Check if the order for the third school is within the allowed range.\n            if 98 <= z <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if all(pencils % n == n - 1 for n in range(2, 6)):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between = 5\n    rabbit_position_from_left = elephant_position_from_left - toys_between - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time Tim takes to write the book alone be t days.\n    tim = symbols('tim')\n\n    # Nancy's work rate per day is 1/6 and Tim's work rate per day is 1/t.\n    # Together, their combined work rate per day is 1/4 (since they complete the work in 4 days).\n    # Therefore, 1/6 + 1/t = 1/4\n\n    equation = Eq(1/6 + 1/tim, 1/4)\n\n    # Solve for Tim's time\n    tim_sol = solve(equation, tim)\n\n    return tim_sol[0]\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_sum = mean_value * (len(numbers) + 1)\n    missing_number_sum = total_sum - sum(numbers)\n    return missing_number_sum\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, let's use centimeters.\n    pink_length_cm = 2.5 * 100   # 2.5 meters to centimeters\n    blue_length_cm = 220         # already in centimeters\n    orange_length_cm = 30.5      # already in centimeters\n\n    # Compare the lengths to find the longest ribbon\n    longest_ribbon = max(pink_length_cm, blue_length_cm, orange_length_cm)\n    \n    if longest_ribbon == pink_length_cm:\n        return \"pink\"\n    elif longest_ribbon == blue_length_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # ratios for P, Q, R\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    \n    # mass per packet for P, Q, R in grams\n    mass_p = 300\n    mass_q = 400\n    mass_r = 500\n    \n    # total mass of the sauce in kilograms (convert to grams because mass per packet is in grams)\n    total_mass = 172000\n    \n    # total ratio units\n    total_ratio = ratio_p + ratio_q + ratio_r\n    \n    # mass of each ratio unit\n    mass_per_rat_unit = total_mass / total_ratio\n    \n    # calculate packets for each ingredient\n    packets_p = mass_per_rat_unit / mass_p * ratio_p\n    packets_q = mass_per_rat_unit / mass_q * ratio_q\n    packets_r = mass_per_rat_unit / mass_r * ratio_r\n    \n    # total packets used\n    total_packets = packets_p + packets_q + packets_r\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n    \n    total_time = preparation_time + baking_time + washing_time + eating_time\n    return total_time\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    # Convert all time intervals to seconds\n    first_light_interval = 1 * 60  # every minute\n    second_light_interval = int(1.5 * 60)  # every 1.5 minutes\n    # The lcm function gives us the interval at which the first two lights turn green together\n    interval_two_lights = lcm(first_light_interval, second_light_interval)\n    \n    # The third light should turn at the same time as the other two lights, so it should be a factor of their LCM\n    # Since its minimum duration is 30 seconds, we start checking from there\n    third_light_min_interval = 30\n    while third_light_min_interval < interval_two_lights:\n        if interval_two_lights % third_light_min_interval == 0:\n            return third_light_min_interval\n        third_light_min_interval += 30  # Increment by 30 seconds until we find the minimum change interval\n    \n    return interval_two_lights  # If no minimum was found, it means the maximum time is when all three change together\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% discount\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = sum(int('4' * i) for i in range(1, 4))\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    boys = 5\n    total_students = 25\n\n    percent_boys = (boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    \n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n    \n    total_people_carried = (red_cars * red_car_capacity +\n                            blue_cars * blue_car_capacity +\n                            green_cars * green_car_capacity)\n    \n    total_cars = red_cars + blue_cars + green_cars\n    \n    average_capacity = total_people_carried / total_cars\n    \n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84 # km/h\n    time_difference = 1.5 # hours\n    eleanor_time = 4 # hours\n    rachel_distance_to_f = 39 # km\n\n    # Rachel's distance traveled during the time difference\n    rachel_distance_traveled = rachel_speed * time_difference\n\n    # Total distance traveled by Rachel when Eleanor reaches City G\n    total_rachel_distance = rachel_distance_traveled + rachel_distance_to_f\n\n    # Eleanor's speed (distance/time)\n    eleanor_speed = total_rachel_distance / (eleanor_time - time_difference)\n\n    # Total distance between City F and G\n    total_distance = eleanor_speed * eleanor_time\n\n    return total_distance\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # The number of shelves from the front to the book is 8\n    # The number of shelves from the back to the book is 10\n    # Thus, the total number of shelves is 8 + 10 - 1 (since the book's shelf is counted twice)\n    total_shelves = 8 + 10 - 1\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    min_score = None\n    for a in range(0, 100):\n        for b in range(a + 1, 100):\n            for c in range(b + 1, 100):\n                for d in range(c + 1, 100):\n                    for e in range(d + 1, 100):\n                        if (a + b + c + d + e) / 5 == 90:\n                            min_score = a\n                            return min_score  # Return as soon as we find the solution\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef combination(n, r):\n    return factorial(n) // (factorial(r) * factorial(n-r))\n\ndef solution():\n    total_ways = combination(5, 3)\n\n    ways_with_A_and_B = combination(3, 1)\n\n    probability = ways_with_A_and_B / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the lengths of the ropes in cm\n    A, B, C = symbols('A B C')\n\n    # Equation 1: A is 3 times B\n    eq1 = Eq(A, 3 * B)\n    # Equation 2: C is 56 cm longer than B\n    eq2 = Eq(C, B + 56)\n    # Equation 3: A is 1 m 30 cm longer than C, converting meters to centimeters\n    eq3 = Eq(A, C + 130)\n\n    # Solve the equations\n    solution = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Calculate the total length\n    total_length = solution[A] + solution[B] + solution[C]\n\n    return total_length\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    total_fruit_juice = 200 * 0.35 + 300 * 0.50\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_males = 50\n    total_females = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n    \n    student_males = (student_male_percentage / 100) * total_males\n    student_females = (student_female_percentage / 100) * total_females\n    \n    total_students = student_males + student_females\n    total_members = total_males + total_females\n    \n    student_percentage = (total_students / total_members) * 100\n    \n    return student_percentage\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    target_difference = 4\n\n    apples_to_give = (amy_apples - john_apples - target_difference) / 2\n\n    return int(apples_to_give)\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given x:48 is as 3:4\n    # Therefore, x/48 = 3/4\n    # We can cross multiply to find x\n\n    x = (3 * 48) / 4  # Cross multiplying\n\n    return x  # This will return the value of x\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    markers_per_bag = 5\n    number_of_bags = markers_left // markers_per_bag\n    \n    return number_of_bags\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    chicken_more_than_vegetable = Fraction(chicken_pies - vegetable_pies, chicken_pies)\n    vegetable_less_than_fruit = Fraction(fruit_pies - vegetable_pies, vegetable_pies)\n\n    return chicken_more_than_vegetable, vegetable_less_than_fruit\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let x be the original number of papers the teacher planned to mark each hour\n    # Let N be the total number of papers\n    # For the first hour, the teacher marks x papers\n    # For the remaining 4 hours, she plans to mark x papers each, but now needs to mark x+6 papers each\n    # If she marks x+10 papers each hour, she will finish in 4 hours instead of 5\n    # Construct equations based on these conditions\n\n    # N = x + 4*(x+6)\n    # N = (x+10)*4\n    # Solve the two equations for N and x\n    from sympy import symbols, Eq, solve\n\n    x, N = symbols('x N')\n    equation1 = Eq(N, x + 4*(x + 6))\n    equation2 = Eq(N, (x + 10)*4)\n\n    solution = solve((equation1, equation2), (x, N))\n\n    return solution[N]\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_digits = 0\n    for page in range(1, 208):\n        for digit in str(page):\n            sum_digits += int(digit)\n    return sum_digits\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    # Loop through all 2-digit numbers for ab and ba\n    for a in range(1, 10):  # a must be non-zero\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8   # The greatest 1-digit even number\n    smallest_2_digit_odd = 11   # The smallest 2-digit odd number\n    ans = greatest_1_digit_even + smallest_2_digit_odd\n    return ans\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 5):  # Hundreds digit must be from 1 to 4\n        for tens in range(5):      # Tens digit can be from 0 to 4\n            for ones in range(5):  # Ones digit can be from 0 to 4\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the price of one wristband, c be the price of one cap.\n    c, w = symbols('c w')\n    \n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands.\n    cost_initial_caps_wristbands = Eq(4*c + 6*w, 2/5)\n    \n    # Cost of each cap is 3 times the cost of each wristband.\n    cost_relation_caps_wristbands = Eq(c, 3*w)\n    \n    # Solving for c (cap's cost) and w (wristband's cost)\n    solved_costs = solve((cost_initial_caps_wristbands, cost_relation_caps_wristbands), (c, w))\n    \n    # Getting the cost of 1 cap and the fraction of money spent.\n    cost_of_1_cap = solved_costs[c]\n    spent_fraction = 2/5\n    \n    # Money left after initial spending (spent 2/5, so 3/5 is remaining)\n    remaining_money_fraction = 1 - spent_fraction\n    \n    # He spent 1/3 of the remaining money to buy more caps.\n    # Since 3/5 of his money is left, he spends 1/3 of 3/5, which is 1/5 of the total.\n    spent_on_more_caps_fraction = 1/3 * remaining_money_fraction\n    cost_of_more_caps = cost_of_1_cap * spent_on_more_caps_fraction\n    \n    # Since we have normalized his total money spent on the initial caps and wristbands to 2/5,\n    # The number of additional caps he can buy with 1/5 of his money is 2 (since 2/5 was used to buy 4 caps, so half of that can buy half the caps)\n    additional_caps = 2 \n    \n    # Total caps bought is the initial 4 plus the additional caps.\n    total_caps = 4 + additional_caps\n    \n    return total_caps\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote v_final as the final speed we want to calculate\n    v_final, g, h_initial, h_final = symbols('v_final g h_initial h_final')\n    \n    # Constants\n    g_value = 9.81  # gravity acceleration in m/s^2\n    \n    # Conservation of energy (assuming air resistance is ignored)\n    # Initial Potential Energy + Initial Kinetic Energy = Final Potential Energy + Final Kinetic Energy\n    # m*g*h_initial + 0 = m*g*h_final + (1/2)*m*(v_final^2)\n    # After simplification and cancelling the mass (m)\n    \n    equation = Eq(g * h_initial, g * h_final + (1/2) * (v_final**2))\n    \n    # Substitute given values of the problem into the equation\n    substituted_eq = equation.subs({g: g_value, h_initial: 3000, h_final: 2000})\n    \n    # Solve the equation for the final speed (v_final)\n    solutions = solve(substituted_eq, v_final)\n    \n    # Since speed can't be negative in this context, we take the positive solution\n    ans = max(solutions)\n\n    return ans.evalf()\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since there are 13 different numbers, drawing 4 cards with consecutive numbers is the worst case\n    # In this scenario, if we draw three from each number, we still cannot ensure we have 4 consecutive cards\n    # Since if we take 3 cards from 1 to 12, we get 3 * 12 = 36 cards, and that doesn't guarantee 4 consecutive cards\n    # However, as soon as we draw the first card of the next number, we'll have 4 consecutive cards\n    # Therefore, we need to draw one more card in addition to the 36 cards\n    return 36 + 1\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    total_pages = 89\n    printed_pages = 0\n    page_number = 0\n\n    while printed_pages < total_pages:\n        page_number += 1\n        if (page_number - 1) % 3 != 0:  # Check for every third page\n            printed_pages += 1\n\n    return page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    total_tickets = 19\n    total_amount = 75\n    adult_ticket_price = 5\n    child_ticket_price = 3\n\n    # Let x be the number of adult tickets\n    # Then (total_tickets-x) will be the number of child tickets\n    for x in range(total_tickets + 1):\n        if adult_ticket_price * x + child_ticket_price * (total_tickets - x) == total_amount:\n            return x\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // (3 * 5)\n\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n\n    grandma_current_age = grandma_future_age - (tom_future_age - tom_current_age)\n    \n    return grandma_current_age\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if 10*ten_pence + 20*twenty_pence + 50*fifty_pence == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee two stickers of the same color:\n    # if you take one of each color, that's 2 stickers, but that does not ensure the same color\n    # so you need to draw one more to be sure that you get 2 stickers of the same color.\n    \n    # 1 red + 1 green = 2 different colors\n    # 1 more sticker drawn (worst case is it's a different color from the previous two) = 3 stickers drawn\n    # the next sticker drawn must be the same color as one of the previously drawn stickers\n    \n    return 4  # one more draw to ensure two stickers of the same color\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of candies Miss Jenny has\n    # let a be the number of students in class A\n    # let b be the number of students in class B\n\n    x, a, b = symbols('x a b')\n    equations = (\n        Eq(4 * a, x - 20), # If each student in class A gets 4 candies, 20 more candies are needed\n        Eq(6 * b, x + 16), # If each student in class B can get 6 candies, there will be 16 candies left\n        Eq(a, 2 * b)       # The number of students in class A is twice of class B\n    )\n\n    # Now we solve the system of equations\n    solutions = solve(equations, (x, a, b))\n\n    # Number of candies Miss Jenny has\n    return solutions[x]\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Number of balls of each color\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n\n    # Calculate the number of balls she needs to take out\n    # In the worst case scenario, she takes out all but three balls of one color,\n    # then one ball of each of the other colors. The next ball she takes out must\n    # be of the same color as the one she has the most of.\n    balls_to_take_out = (blue_balls - 1) + (orange_balls - 1) + (yellow_balls - 1) + 1\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    remaining_digits = set(range(10)) - {3, 1, 7}\n    for perm in permutations(remaining_digits):\n        # perm is a permutation of the remaining digits\n        # Construct the number with given A, C, and G\n        B, D, E, F, H, I, J = perm\n        \n        # Form the numbers ABCDEFGHIJ\n        digit_list = [3, B, 1, D, E, F, 7, H, I, J]\n        \n        # Check divisibility rules for each number formed\n        if all((\n            digit_list[0] % 1 == 0,\n            (10*digit_list[0] + digit_list[1]) % 2 == 0,\n            (100*digit_list[0] + 10*digit_list[1] + digit_list[2]) % 3 == 0,\n            (1000*digit_list[0] + 100*digit_list[1] + 10*digit_list[2] + digit_list[3]) % 4 == 0,\n            (10000*digit_list[0] + 1000*digit_list[1] + 100*digit_list[2] + 10*digit_list[3] + digit_list[4]) % 5 == 0,\n            (100000*digit_list[0] + 10000*digit_list[1] + 1000*digit_list[2] + 100*digit_list[3] + 10*digit_list[4] + digit_list[5]) % 6 == 0,\n            (1000000*digit_list[0] + 100000*digit_list[1] + 10000*digit_list[2] + 1000*digit_list[3] + 100*digit_list[4] + 10*digit_list[5] + digit_list[6]) % 7 == 0,\n            (10000000*digit_list[0] + 1000000*digit_list[1] + 100000*digit_list[2] + 10000*digit_list[3] + 1000*digit_list[4] + 100*digit_list[5] + 10*digit_list[6] + digit_list[7]) % 8 == 0,\n            (100000000*digit_list[0] + 10000000*digit_list[1] + 1000000*digit_list[2] + 100000*digit_list[3] + 10000*digit_list[4] + 1000*digit_list[5] + 100*digit_list[6] + 10*digit_list[7] + digit_list[8]) % 9 == 0,\n            (1000000000*digit_list[0] + 100000000*digit_list[1] + 10000000*digit_list[2] + 1000000*digit_list[3] + 100000*digit_list[4] + 10000*digit_list[5] + 1000*digit_list[6] + 100*digit_list[7] + 10*digit_list[8] + digit_list[9]) % 10 == 0\n        )):\n            return digit_list\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, lambs have 4 legs each\n    duckling_legs = 4 * 2\n    geese_legs = 2 * 2\n    remaining_legs = 36 - (duckling_legs + geese_legs)\n    # Each lamb has 4 legs\n    number_of_lambs = remaining_legs // 4\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    teams = 5\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    digits.sort()\n    smallest = int(''.join(map(str, digits)))\n    largest = int(''.join(map(str, digits[::-1])))\n    return largest - smallest\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Calculate the number of fruit boxes in each of the top three layers\n    # Topmost layer has 1^2 boxes\n    layer1 = 1 ** 2\n    # Second layer has 2^2 boxes\n    layer2 = 2 ** 2\n    # Third layer has 3^2 boxes\n    layer3 = 3 ** 2\n    \n    # Total number of fruit boxes is the sum of the three layers\n    total_boxes = layer1 + layer2 + layer3\n    return total_boxes\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_part = 1.2 + 1.23 + 1\n    product1 = sum_part * sum_part\n    product2 = sum_part * (1.2 + 1.23)\n    ans = product1 - product2\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 200):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    # Good copies needed from each photocopier\n    good_a = 600 * (3/5)\n    good_b = 600 * (2/5)\n\n    # Total copies needed from each photocopier including the bad ones\n    total_a = good_a * (5/4)  # Every 4 good ones come with 1 bad one, totaling 5\n    total_b = good_b * (6/5)  # Every 5 good ones come with 1 bad one, totaling 6\n\n    total_copies = total_a + total_b\n    return round(total_copies)\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.sqrt(num_students)\n    return int(side_length)\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    farmer_rate, son_rate = symbols('farmer_rate son_rate')\n\n    # equation representing the farmer's work when working alone\n    equation1 = Eq(farmer_rate * 24, 1)\n    # equation representing combined work of farmer and son\n    equation2 = Eq((farmer_rate + son_rate) * 16, 1)\n    # equation representing son's work for 6 hours\n    equation3 = Eq(son_rate * 6, farmer_rate * (16 - 6))\n\n    solutions = solve((equation1, equation2, equation3), (farmer_rate, son_rate))\n\n    son_hours = 1 / solutions[son_rate]\n\n    return son_hours\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    original_height = 10  # height from which the ball is dropped\n    bounce_height = original_height / 2  # height after the first bounce\n    total_distance = original_height + 2 * bounce_height  # down and up after the bounce\n    return total_distance\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the total amount of sugar Annie has\n    sugar_annie = 300 * 0.15\n    \n    # Calculate the total amount of sugar Becky has\n    sugar_becky = 400 * 0.25\n    \n    # Calculate the total amount of sugar Carol has\n    sugar_carol = 300 * 0.35\n    \n    # Calculate the total amount of sugar in the mixed solution\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n    \n    # Calculate the total mass of the mixed solutions\n    total_mass = 300 + 400 + 300\n    \n    # Calculate the concentration of sugar in the mixed solution\n    concentration = (total_sugar / total_mass) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    number_of_rolls = 30\n    probability_to_get_five = 1/6\n    expected_number = number_of_rolls * probability_to_get_five\n    return expected_number\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's incorrect reconstruction\n    incorrect_total = quotient * remainder + divisor\n    \n    # The correct way to find the original number\n    correct_total = quotient * divisor + remainder\n    \n    # Determine if Johnny's answer is correct\n    is_correct = incorrect_total == correct_total\n    \n    return correct_total, is_correct\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # Total permutations without restrictions\n    total_permutations = factorial(total_children)\n    \n    # Calculate permutations where Hugh is between Louise and Richard\n    # Treat Louise, Hugh, and Richard as one block. There are 3 ways to order them within the block.\n    # There are (total_children - 2)! ways to order the remaining blocks (this block + 2 other children).\n    blocked_permutations = factorial(total_children - 2) * 3\n    \n    # Subtract the permutations where Hugh is between Louise and Richard from the total permutations\n    count = total_permutations - blocked_permutations\n    \n    return count\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(40, 0, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price = 75  # price in pence\n    pen_price = 95  # price in pence\n    number_chocolates = 4\n    number_pens = 3\n    note_value = 1000  # £10 note value in pence\n\n    total_cost = (chocolate_price * number_chocolates) + (pen_price * number_pens)\n    change = note_value - total_cost\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_reduction = initial_price * 0.10\n    second_reduction = (initial_price - first_reduction) * 0.20\n\n    final_price = initial_price - first_reduction - second_reduction\n\n    return final_price\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from sympy import Rational, symbols, Eq, solve\n\n    total_matches = symbols('total_matches')\n    win_fraction = Rational(2, 5)\n    draw_fraction = Rational(7, 20)\n\n    won_matches = win_fraction * total_matches\n    drawn_matches = draw_fraction * total_matches\n    lost_matches = 10\n\n    points_for_win = 3\n    points_for_draw = 1\n    points_for_loss = 0  # No points for a loss\n\n    total_points = Eq((won_matches * points_for_win + drawn_matches * points_for_draw + lost_matches * points_for_loss), total_matches)\n\n    # Total played matches equation considering won, drawn and lost matches\n    total_matches_eq = Eq(won_matches + drawn_matches + lost_matches, total_matches)\n\n    # Solve both equations for total_matches\n    total_matches_solution = solve(total_matches_eq, total_matches)\n\n    # Calculate total points with the solved total_matches\n    total_points = won_matches.subs(total_matches, total_matches_solution[0]) * points_for_win + \\\n                   drawn_matches.subs(total_matches, total_matches_solution[0]) * points_for_draw + \\\n                   lost_matches * points_for_loss\n\n    return total_points.evalf()\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 5\n    # Direct proportion: people * days = constant work\n    work = original_people * original_days\n    # Calculate how many people needed for target_days\n    people_needed = work / target_days\n    # Calculate how many more people are needed\n    more_people_needed = people_needed - original_people\n\n    return int(more_people_needed)\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mean of the last 5 numbers\n    x = symbols('x')\n\n    # Total sum of 8 numbers is mean (555) multiplied by 8\n    total_sum = 555 * 8\n\n    # The mean of the first 3 numbers is x - 296\n    first_3_sum = (x - 296) * 3\n\n    # The mean of the last 5 numbers is x, so their total sum is 5 * x\n    last_5_sum = x * 5\n\n    # Equation based on the total sum\n    equation = Eq(first_3_sum + last_5_sum, total_sum)\n\n    # Solve for the mean of the last 5 numbers\n    mean_last_5 = solve(equation, x)[0]\n\n    return mean_last_5\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    between_pip_and_bud = 5\n    bud_position_from_front = pip_position + between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    count = 0\n    for number in range(2, 101, 2):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    age = symbols('age')\n    \n    # Age conditions based on remainders\n    condition1 = Eq(age % 4, 2)\n    condition2 = Eq(age % 5, 3)\n    condition3 = Eq(age % 9, 6)\n    \n    # Use sympy to solve the system of congruences\n    result = solve((condition1, condition2, condition3), (age))\n    \n    return result[age]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    lb_to_kg_ratio = 2.2\n    pounds = 154\n    kilograms = pounds / lb_to_kg_ratio\n    return kilograms\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of years ago\n    years_ago = symbols('years_ago')\n    \n    # Isaac's current age\n    isaac_now = 53\n    # His mother's current age\n    mother_now = 81\n    \n    # Isaac's age years ago\n    isaac_then = isaac_now - years_ago\n    # His mother's age years ago\n    mother_then = mother_now - years_ago\n    \n    # The equation that represents \"Isaac’s age was one third of his mother’s age\"\n    equation = Eq(isaac_then, mother_then / 3)\n    \n    # Solving for the number of years ago\n    years_ago_solution = solve(equation, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    return custom_op(5, 10) - custom_op(4, 9)\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3    # Cat's speed in m/s\n    distance_behind = 500  # Initial distance between them in meters\n\n    relative_speed = elena_speed - cat_speed  # Relative speed of Elena with respect to her cat\n\n    time_to_catch_up = distance_behind / relative_speed  # Time taken for Elena to catch up to her cat in seconds\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    perm = permutations(digits)\n    \n    count = 0\n    for _ in perm:\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]  # Given sequence\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    next_difference = differences[-1] + (differences[1] - differences[0])\n    next_number = sequence[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial\n    \n    last_digit_options = 2  # Only 2 or 4 can be the last digit\n    first_digit_options = 4  # Any of the remaining four digits can be the first\n    remaining_digits = factorial(3)  # The remaining three digits can be in any order\n    \n    total_ways = last_digit_options * first_digit_options * remaining_digits\n    \n    return total_ways\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for i in range(1, 10):  # The tens digit must be at least 1 for a two-digit number\n        for j in range(10):  # The ones digit can be from 0 to 9\n            if i + j == 15:  # If their sum is equal to 15\n                return i * 10 + j  # Return the smallest two-digit number formed\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Calculate lights that will remain on, which happens only for perfect square numbers\n    square_numbers = [i**2 for i in range(1, int(250**0.5) + 1)]\n\n    return len(square_numbers)\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    mean_weight_initial = 50\n    mean_weight_final = 52\n    apples_initial = 8\n    \n    total_weight_initial = mean_weight_initial * apples_initial\n    total_weight_final = mean_weight_final * (apples_initial + 1)\n    \n    weight_extra_apple = total_weight_final - total_weight_initial\n    \n    return weight_extra_apple\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    total_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n    \n    pages = Symbol('pages')\n    # Original rate and time\n    original_rate = 50\n    original_time = pages / original_rate\n    \n    # Increased rate and reduced time\n    increased_rate = original_rate + 20\n    reduced_time = original_time - 2\n    \n    # Set up the equation based on the new rate and reduced time\n    equation = Eq(pages / increased_rate, reduced_time)\n    \n    # Solve the equation for the number of pages\n    ans = solve(equation, pages)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Initialize the starting date\n    start_date = datetime(2013, 1, 28)\n\n    # Initialize a year increment\n    year_increment = 1\n\n    # Define a variable to store the year when the 28th of January\n    # will be a Monday again\n    next_monday_year = start_date.year\n\n    while True:\n        # Calculate the 28th of January for the next year\n        next_date = start_date.replace(year=start_date.year + year_increment)\n\n        # Check if the day of the week is Monday (0 represents Monday in Python's datetime module)\n        if next_date.weekday() == 0:\n            # If it is Monday, store that year\n            next_monday_year = next_date.year\n            break\n        else:\n            # If not, increment the year and check the next one\n            year_increment += 1\n\n    return next_monday_year\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # oranges are 194 more than apples\n    equation1 = Eq(oranges, apples + 194)\n    # the amount of orange is 4 more than 6 times that of apples\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    # Now solve the two equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Arbitrary upper bound for search\n        for dividend in range(1, 1000):  # Arbitrary upper bound for search\n            if dividend // divisor == 8 and dividend % divisor == 7:\n                return (dividend, divisor)\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n    \n    meters_per_company_per_day = total_expressway / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_money = 20\n    money_saved = 1 * 7  # $1 everyday for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    final_amount = initial_money + money_saved - lent_to_brother - spent_on_snacks\n    \n    return final_amount\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Time spent jogging: 7:30 a.m. - 6:30 a.m. = 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 6  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time  # Distance = Speed * Time\n    \n    # Time spent walking: 9:30 a.m. - 7:30 a.m. = 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 5  # in miles per hour\n    walking_distance = walking_speed * walking_time  # Distance = Speed * Time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = normal_cost * 0.10\n    discounted_cost = normal_cost - discount\n    number_of_members = 30\n    cost_per_member = discounted_cost / number_of_members\n    return cost_per_member\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    return last_digit\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 10) + (b % 10)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    # Price in dollars for a call up to 15 minutes\n    initial_price = 0.80\n\n    # Price in dollars for each additional minute\n    additional_price_per_minute = 0.05\n\n    # Total amount Ryan spent in dollars\n    total_price = 1.4\n\n    # Calculate the duration of the call\n    if total_price > initial_price:\n        extra_amount = total_price - initial_price\n        additional_minutes = extra_amount / additional_price_per_minute\n        total_minutes = 15 + additional_minutes\n    else:\n        total_minutes = 15\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x - 4) / 2 + 11, 37)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    start = (56 // 5) + (1 if 56 % 5 != 0 else 0)  # First multiple of 5 after 56\n    end = 120 // 5  # Last multiple of 5 before 120\n    count = end - start + 1  # Number of multiples of 5\n    return count\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    return 10034\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Calculate the difference in years between Gina and James\n    year_difference = 1997 - 2005\n    # Find Gina's age in 1997\n    gina_age_in_1997 = 50 + year_difference\n    # Calculate James' age when Gina was 35\n    james_age_when_gina_35 = (gina_age_in_1997 - 35) + 20\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    total_people = lucy_position + people_between + eddie_position\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # There are 4 quarters in a whole\n    quarters_per_whole = 4\n    # $2\\frac{1}{2}$ is 2.5 in decimal\n    number = 2 + 1/2\n    # Calculate the total number of quarters in $2\\frac{1}{2}$\n    total_quarters = number * quarters_per_whole\n    return int(total_quarters)\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import isprime\n\n    # Start checking from 2 because 1 is not considered a prime number\n    num = 1\n    while True:\n        num += 1\n        remainders = [num % 3, num % 5, num % 7, num % 8]\n        \n        # Check if all remainders are distinct and prime\n        if len(set(remainders)) == 4 and all(isprime(rem) for rem in remainders):\n            return num\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    cut_length_cm = 5 * 100 + 8      # Convert meters to centimeters\n    remaining_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_cm / 9\n\n    return stripe_length_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknown quantities\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratios and total flowers\n    total_flowers = 3616\n    flowers_left = 2644\n\n    # Equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, total_flowers)\n    equation2 = Eq(orchids / tulips, 3/5)\n    equation3 = Eq(orchids * 0.6 + tulips * 0.8 + roses * 0.75, flowers_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The max number of left-handed girls would be the total girls minus the non-right-handed pupils.\n    max_left_handed_girls = girls - (total_pupils - right_handed)\n    # The smallest number of right-handed girls would occur when there are the max left-handed girls.\n    smallest_right_handed_girls = girls - max_left_handed_girls\n    \n    return smallest_right_handed_girls\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, files = symbols('books files')\n    equation1 = Eq(12 * books + 9 * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(0, 11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario: Peter takes one of each color before he takes a pair. \n    # One red, one blue, and one black. After this, the next sock he takes \n    # must be of the same color as one he already has.\n    socks_taken_before_pair = 3 + 1\n    return socks_taken_before_pair\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    def last_digit(n):\n        last_digits = [n**i % 10 for i in range(1, 5)]\n        return last_digits[(2013 - 1) % 4]\n\n    ans = sum(last_digit(n) for n in range(1, 10)) % 10\n    return ans\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 10):\n        if 131 < 10**i:\n            total_digits += (131 - 10**(i-1) + 1) * i\n            break\n        else:\n            total_digits += 9 * (10**(i-1)) * i\n    return total_digits\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert all times to a 24-hour format for easier calculation\n    departure_time = 20  # 8 PM in 24-hour format\n    arrival_time = 1 + 24  # 1 AM the next day in 24-hour format\n\n    # Calculate the duration of the flight, correcting for the time zone difference\n    flight_duration = (arrival_time - departure_time) - 7  # France is 7 hours behind Japan\n\n    return flight_duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, sid = symbols('eugene sid')\n    \n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n    \n    solutions = solve((equation1, equation2), (eugene, sid))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_marks = 168\n    marks_per_correct = 4\n    marks_per_wrong = -1\n\n    # Let x be the number of correct answers\n    # Then (attempted_questions - x) is the number of wrong answers\n    # We set up the equation: 4x - (attempted_questions - x) = 168\n\n    for x in range(attempted_questions + 1):\n        if marks_per_correct * x + marks_per_wrong * (attempted_questions - x) == total_marks:\n            return x\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest of the five consecutive even numbers be x.\n    # Then the numbers are x, x+2, x+4, x+6, and x+8.\n    # The sum of these five numbers is given as x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 200\n    \n    # This simplifies to 5x + 20 = 200\n    # We solve for x to find the smallest number\n    x = (200 - 20) // 5\n    \n    return x\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # Each two-digit number is formed by picking a digit for the tens place and one for the ones place.\n    # For the tens place, we can pick either 1 or 2 (0 is not allowed as it would not make a 2-digit number).\n    # There are 2 possibilities for the tens place.\n    tens_place_options = 2\n\n    # For the ones place, we can pick 0, 1, or 2, so we have 3 possibilities.\n    ones_place_options = 3\n\n    # The total number of 2-digit numbers is the product of the possibilities for each place.\n    total_numbers = tens_place_options * ones_place_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from sympy import Rational\n\ndef solution():\n    ans = sum(Rational(100, 97) * Rational(99, 96) ** k for k in range(0, 96))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections.\n    # This means Katie makes 4 cuts in 8 minutes.\n    \n    # If her cutting speed remains the same and she needs to make 6 cuts:\n    # Number of sections desired = 7 (since 6 cuts creates 7 sections)\n    # Number of cuts needed = Number of sections desired - 1\n    num_of_cuts_needed = 7 - 1\n    \n    # Time per cut = Total time for previous cuts / Number of previous cuts\n    #               = 8 minutes / 4 cuts\n    time_per_cut = 8 / 4\n    \n    # Total time needed for the desired number of cuts\n    # = Time per cut * Number of cuts needed\n    total_time_needed = time_per_cut * num_of_cuts_needed\n    \n    return total_time_needed\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n    votes_others = 22 + 27\n    \n    # Total votes required to get a majority\n    majority_votes_needed = (total_votes // 2) + 1\n    \n    # Votes Peter needs to win\n    votes_needed_peter = majority_votes_needed - current_votes_peter\n    \n    # Check if Peter can win with the current total without other votes\n    if votes_needed_peter + current_votes_peter + votes_others > total_votes:\n        additional_votes_peter = votes_needed_peter\n    else:\n        additional_votes_peter = votes_needed_peter - (total_votes - (current_votes_peter + votes_others))\n    \n    return additional_votes_peter\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred from A to B and vice versa\n    x = symbols('x')\n\n    # For container A: Decrease the amount of sugar by 0.1x and the amount of water by x\n    # For container B: Increase the amount of sugar by 0.2x and the amount of water by x\n\n    # Final amount of sugar in A: 0.1 * 50 - 0.1 * x + 0.2 * x\n    # Final amount of water in A: 50 - x + x = 50\n\n    # Final amount of sugar in B: 0.2 * 30 - 0.2 * x + 0.1 * x\n    # Final amount of water in B: 30 - x + x = 30\n\n    # Concentrations should be equal: \n    # (0.1 * 50 - 0.1 * x + 0.2 * x) / 50 = (0.2 * 30 - 0.2 * x + 0.1 * x) / 30\n\n    equation = Eq((0.1 * 50 - 0.1 * x + 0.2 * x) / 50, (0.2 * 30 - 0.2 * x + 0.1 * x) / 30)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Extract the first (and only) solution\n    volume_transferred = solution[0]\n\n    return volume_transferred.evalf()\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # total amount in pence\n    for number_of_each_coin in range(1, 490):\n        if (5 * number_of_each_coin) + (10 * number_of_each_coin) + (20 * number_of_each_coin) == total_amount:\n            return number_of_each_coin * 3  # total number of coins is 3 times the number of each since there are 3 types\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    normal_cost = 540\n    reduction = 189\n    \n    percentage_reduction = (reduction / normal_cost) * 100\n    \n    return percentage_reduction\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # The problem simply asks which of the two numbers has the higher units value.\n    # To compare the units, we look at the last digit of each number.\n    number1 = 31\n    number2 = 32\n\n    # Extract the units digit from each number.\n    units_number1 = number1 % 10\n    units_number2 = number2 % 10\n\n    # Compare the units digits and return the higher one.\n    if units_number1 > units_number2:\n        ans = number1\n    else:\n        ans = number2\n\n    return ans\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    book_cost = 0.10 * initial_money\n    money_after_book = initial_money - book_cost\n    dvd_cost = 0.20 * money_after_book\n    money_left = money_after_book - dvd_cost\n    \n    return money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # in dollars\n    spent_money = 20  # in dollars\n    remaining_money = total_money - spent_money  # in dollars\n    remaining_money_cents = remaining_money * 100  # convert dollars to cents\n    return int(remaining_money_cents)\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Initializing variables for the arithmetic sequence\n    n = 9  # total number of terms (days)\n    S = 135  # sum of all sweets eaten in 9 days\n    # We know that S = n/2 * (2a + (n - 1)d)\n    # where 'a' is the first term and 'd' is the common difference.\n    # Since the common difference is given as 3, we'll use d=3\n    # We need to find 'a' first to find the last term.\n    # Rearranging S = n/2 * (2a + (n - 1)d) to solve for 'a':\n    # 2a = S/n - (n - 1)d\n    d = 3  # common difference\n    a = (S/n - (n - 1)*d) / 2\n    \n    # The last day's sweets eaten is the last term of the sequence,\n    # which can be found using the nth term formula: a + (n - 1)d\n    last_day_sweets = a + (n - 1) * d\n    \n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * (1 + rate) ** time\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    ans = (9 * 1) + (90 * 2) + ((185 - 99) * 3)\n    return ans\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 0.10\n    months_in_year = 12\n\n    pay_rise_amount = annual_salary * pay_rise_percentage\n    new_annual_salary = annual_salary + pay_rise_amount\n    new_monthly_salary = new_annual_salary / months_in_year\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):     # There are only 12 months\n        for day in range(1, 32):  # The maximum number of days is 31\n            if month * 31 + day * 12 == 376:\n                return f'{day:02d}{month:02d}'\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    total = 4.08\n    known_part = 1.08\n    missing_number = total - known_part\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    terms = [119, 117, -115, 113, -111, 109, -107, 105, -103, 101, -99]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = price_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40  \n    milk_needed = 80  \n    flour_available = 25  \n\n    milk_to_use = (flour_available / flour_needed) * milk_needed  \n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6\n    protractor_original_price = 0.30  # 30p is £0.30\n    calculator_discount = 0.25  # 25% is a 1/4 discount\n    protractor_discount = 0.50  # 50% is a 1/2 discount\n\n    calculator_sale_price = calculator_original_price * (1 - calculator_discount)\n    protractor_sale_price = protractor_original_price * (1 - protractor_discount)\n\n    calculators_quantity = 8\n    protractors_quantity = 20\n\n    total_paid = (calculator_sale_price * calculators_quantity) + (protractor_sale_price * protractors_quantity)\n    return total_paid\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Using the direct proportionality property (w * o = constant) \n    # where w = weeks and o = oxen.\n    # We have two situations to derive the constant:\n    # 27 oxen * 6 weeks = 23 oxen * 9 weeks = constant\n    # So, let's find the constant first\n    constant = 27 * 6  # You could also use 23 * 9, it's the same\n\n    # Now we want to find the number of weeks (w) for 21 oxen:\n    # 21 oxen * w weeks = constant\n    # Solving for w: w = constant / 21 oxen\n    weeks_for_21_oxen = constant / 21\n\n    return weeks_for_21_oxen\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x be the current age of the older elephant\n    # The difference in age between the two elephants is (x - 18) years\n    # When the younger elephant grows up to the current age of the older elephant, the older elephant will be (62 years old)\n    # Therefore, the younger elephant will take (x - 18) years to grow to the current age of the older elephant\n    # In (x - 18) years, the older elephant's age will be x + (x - 18)\n    # According to the problem, that should equal 62:\n    # x + (x - 18) = 62\n    # 2x - 18 = 62\n    # 2x = 62 + 18\n    # 2x = 80\n    # x = 80 / 2\n    # x = 40\n    x = 40\n    return x\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    weight_in_tonnes = 1.194\n    fraction = 2 / 3\n    weight_in_kilograms = weight_in_tonnes * fraction * 1000  # Convert tonnes to kilograms by multiplying with 1000\n\n    return weight_in_kilograms\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Bike trip details\n    bike_speed = 10  # in miles per hour\n    bike_start_time = 7.5  # in hours (7:30 AM is 7.5 hours from midnight)\n    bike_end_time = 8.5  # in hours (8:30 AM is 8.5 hours from midnight)\n    \n    # Train trip details\n    train_speed = 50  # in miles per hour\n    train_start_time = 8.5  # in hours (8:30 AM is the same as the bike end time)\n    train_end_time = 10.5  # in hours (10:30 AM is 10.5 hours from midnight)\n\n    # Calculate the distance Ellen travels by bike\n    bike_travel_time = bike_end_time - bike_start_time\n    bike_distance = bike_speed * bike_travel_time\n\n    # Calculate the distance Ellen travels by train\n    train_travel_time = train_end_time - train_start_time\n    train_distance = train_speed * train_travel_time\n\n    # Calculate total distance\n    total_distance = bike_distance + train_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Since the boxes are distinct but the balls are not, we can use the\n    # stars and bars method (also known as balls and urns).\n    # We need to place 2 dividers (bars) among the 5 balls (stars) to \n    # divide them into 3 groups (boxes). This is equivalent to choosing\n    # 2 positions for the dividers out of the 7 possible positions \n    # (5 balls + 2 dividers).\n    \n    # Number of ways to place 2 dividers among 7 positions:\n    from math import comb\n    ans = comb(5 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    # Total marbles\n    total_marbles = 112\n    \n    # Symbolically:\n    # blue_marbles + (blue_marbles + 25) + (blue_marbles + 25 + 32) = total_marbles\n    # Simplified:\n    # 3*blue_marbles + 82 = total_marbles\n    \n    # Solving for blue marbles\n    blue_marbles = (total_marbles - 82) // 3\n    \n    return blue_marbles\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    letters = 'TEENAGE'\n    letter_counts = {char: letters.count(char) for char in set(letters)}\n    \n    total_perms = factorial(len(letters))\n    for count in letter_counts.values():\n        total_perms //= factorial(count)\n    \n    return total_perms\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    rows = 3 + 2 - 1\n    columns = 4 + 3 - 1\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while sum(int(digit) for digit in str(num)) != 9:\n        num += 1\n    return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square_value = one_tenth_of_square * 10\n\n    return square_value\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Ema and Keng Wee's money\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # After spending their respective amounts, they have the same money left\n    equation2 = Eq(ema - ema / 4, keng_wee - (4 / 7) * keng_wee)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    # Return the amount of money Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    # Division of fractions is equivalent to multiplying by the reciprocal\n    ans = 5 * (4/1)\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from the front and 2nd from the back\n    # This means there are 3 people in the column (him included) since he's second from the back.\n    # In terms of rows, since Lucas is 4th from the left and 3rd from the right\n    # This means there are 4 + 3 - 1 = 6 people in total in the row (Lucas is counted in both directions).\n    # The total number of students is rows times columns\n    rows = 3\n    columns = 6\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Starts with the first term\n    for i in range(2, 11):\n        ans += sum(1/i for j in range(1, i)) + 1  # Adds the increasing sequence for each denominator\n        ans += sum(1/i for j in range(1, i))  # Adds the decreasing sequence for each denominator\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n\n    # Initially, the number of girls is 9/11 of the number of boys\n    # g = (9/11) * b  ... (1)\n\n    # After transfering 2 girls, the number of girls becomes 10/11 of the number of boys\n    # (g + 2) = (10/11) * b ... (2)\n\n    # We now have a system of two equations with two unknowns (g, b)\n    # To solve for b, we can express g in terms of b in equation (1) and substitute into equation (2)\n\n    # From equation (1) => g = (9/11) * b\n    # Substituting g into equation (2) =>\n    # ((9/11) * b) + 2 = (10/11) * b\n    # Multiplying both sides of the equation by 11 to clear the fractions =>\n    # 9b + 22 = 10b\n    # Rearranging terms, we get b - 9b = 22\n    # So, b = 22\n\n    # Now that we have b, we can find g using equation (1)\n    # g = (9/11) * b = (9/11) * 22 = 18\n\n    # The total number of students in the class now is the sum of boys and girls after the transfer\n    # Total students now = b + (g + 2)\n    b = 22\n    g = 18\n    total_students_now = b + (g + 2)\n\n    return total_students_now\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    x, y = symbols('x y')\n\n    # Create equation based on the given expression\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    # Solve the equation for (2x - y)\n    expression_to_find = 2 * x - y\n    solutions = solve(equation, expression_to_find)\n\n    return solutions[expression_to_find]\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_paid = 5 * 100  # Convert pounds to pence\n    total_cost = (3 * 31) + (2 * 17) + 78 + (1.05 * 100)  # Calculate total cost in pence\n\n    change = total_paid - total_cost  # Calculate the change in pence\n\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the tiles Mr Lim and Mr Tan have\n    lim_tiles, tan_tiles = symbols('lim_tiles tan_tiles')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(lim_tiles, 5 * tan_tiles)        # Mr Lim has 5 times as many tiles as Mr Tan\n    equation2 = Eq(lim_tiles + tan_tiles, 390)      # Together they have 390 tiles\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lim_tiles, tan_tiles))\n\n    # Calculate the difference in the number of tiles\n    more_tiles = solutions[lim_tiles] - solutions[tan_tiles]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_now = symbols('zehan_now')  # Define the symbol for Zehan's current age\n    eq = Eq(zehan_now + 12, 3 * zehan_now)  # Equation representing the age relationship\n\n    zehan_age_now = solve(eq, zehan_now)  # Solve for Zehan's current age\n\n    return zehan_age_now[0]  # Extract and return the solution\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Calculate the number of ways to choose 4 students from the remaining 12 (excluding A, B, C)\n    ways_to_choose_4 = comb(12, 4)\n    \n    # There are 3 ways to choose exactly one of A, B or C\n    ways_to_choose_1_of_3 = 3\n    \n    # Total ways is the product of the two values calculated above\n    total_ways = ways_to_choose_1_of_3 * ways_to_choose_4\n    \n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    decimal_value = 0.36\n    percent_value = decimal_value * 100\n    return percent_value\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of lemon juice in ml\n    x = symbols('x')\n    # Since the initial ratio is 2:3, the initial amount of water is 1.5 times x (3/2 * x)\n    water = 1.5 * x\n    # The final amount of lemon juice becomes x + 80 (since 80 ml is added)\n    final_lemon = x + 80\n    # The ratio becomes 6 to 5, which means final_lemon to water is 6:5\n    # Cross-multiply the ratios to form the equation\n    equation = Eq(6 * water, 5 * final_lemon)\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    equation = Eq((savings - 1/3 * savings - 177 - 129), 1/3 * savings / 2)\n\n    ans = solve(equation, savings)\n\n    return ans[0]\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Ratio of Savannah's sweets to Shaila's sweets is 5:6\n    ratio_savannah = 5\n    ratio_shaila = 6\n\n    # Shaila received 36 sweets\n    sweets_shaila = 36\n\n    # The total number of sweets, considering the ratio\n    total_sweets = sweets_shaila * (ratio_savannah + ratio_shaila) / ratio_shaila\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # Using the inclusion-exclusion principle to find those who know both French and Japanese\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    \n    # Those who only know French\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = 1.3 * usual_speed\n    increased_time_ratio = usual_speed / increased_speed\n    delayed_departure_in_hours = 9 / 60\n\n    travel_time_at_usual_speed = delayed_departure_in_hours / (1 - increased_time_ratio)\n    distance = travel_time_at_usual_speed * usual_speed\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    for red_ropes in range(11):\n        blue_ropes = 10 - red_ropes\n        total_length = red_ropes * 2 + blue_ropes * 3\n        if total_length == 26:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let the number we're looking for be x. We'll reverse the operations to find x.\n    # Starting with the final quotient of 80:\n    # Multiplying it by 8 (the inverse of dividing by 8)\n    q = 80 * 8\n    # Adding 8 (the inverse of subtracting 8)\n    p = q + 8\n    # Dividing by 8 (the inverse of multiplying by 8)\n    s = p / 8\n    # Subtracting 8 (the inverse of adding to 8)\n    x = s - 8\n    return x\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variables\n    original_speed, increased_speed, decreased_speed = symbols('original_speed increased_speed decreased_speed')\n    original_time, decreased_time, increased_time = symbols('original_time decreased_time increased_time')\n    distance = symbols('distance')\n\n    # We know that increasing the speed by 25% decreases the time by 20 minutes.\n    eq1 = Eq(increased_speed, original_speed * 1.25)\n    eq2 = Eq(decreased_time, original_time - 20/60)  # 20 minutes in hours\n\n    # We also know that decreasing the speed by 45 m/min increases the time by 75%.\n    eq3 = Eq(decreased_speed, original_speed - 45)\n    eq4 = Eq(increased_time, original_time * 1.75)\n\n    # Distance is the same for all cases\n    eq5 = Eq(distance, original_speed * original_time)\n    eq6 = Eq(distance, increased_speed * decreased_time)\n    eq7 = Eq(distance, decreased_speed * increased_time)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (original_speed, increased_speed, decreased_speed, original_time, decreased_time, increased_time, distance))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    p = (21 * 100) / 30\n    return p\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    total_second_half = average_second_half * 6  # 6 months in the second half of the year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12  # 12 months in a year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7+1):\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    ways = 0\n    for i in range(1, 22):\n        for j in range(1, 22):\n            if i + j == 22 and i != j:\n                ways += 1\n    return ways // 2  # Divide by 2 because ordering doesn't matter (5+17 and 17+5 are the same)\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    total_used = brownies + cookies + muffins\n    \n    return total_used.simplify()\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors = []\n\n    # Since the difference between the smallest and greatest factors is 41,\n    # We start by determining the possible pairs of factors\n    for i in range(1, 42):\n        if 41 % i == 0:\n            pair = (i, i + 41)\n            factors.append(pair)\n\n    # The number we are looking for is the greatest common divisor of the two numbers in a pair\n    # It must be the same for both numbers in a pair to ensure they are factors of A\n    # We only need to consider one pair since the difference is the same for A\n    A = max(factors[0])  # Greatest factor is max(i, i + 41), which is i + 41\n\n    # Calculate the 7th multiple of A\n    seventh_multiple = A * 7\n\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    # Given ratio height:width = 3:4, therefore width = (4/3) * height\n    width = (4/3) * height\n    \n    # Perimeter of the rectangle screen = 2*(height + width)\n    perimeter = 2 * (height + width)\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n\n    for i in range(2, 12):\n        result *= (1 + Fraction(1, i))\n\n    return float(result)\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n    \n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n    \n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let the two numbers be x (the larger number) and y (the smaller number)\n    # According to the problem:\n    # x - y = 36\n    # x + y = 98\n\n    # Sum and Difference of two numbers can be used to find the numbers\n    # Adding the above equations: 2x = 134 => x = 67\n    # Substituting x in x + y = 98 => 67 + y = 98 => y = 98 - 67\n\n    y = 98 - 36 // 2\n\n    return y\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    \n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    incorrect_marks = -1\n    score = 78\n\n    correct_answers = int(total_questions * correct_percentage)\n    wrong_answers = total_questions - correct_answers\n\n    for correct in range(correct_answers + 1):\n        wrong = correct_answers - correct\n        if correct * correct_marks + wrong * incorrect_marks == score:\n            return correct\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Let's denote the cost of one file as f and the cost of one ruler as r.\n    # We know from the problem that:\n    # 6 files and 10 rulers cost $40\n    # 6f + 10r = 40        ...(1)\n    \n    # We want to find the cost for 9 files and 15 rulers:\n    # 9f + 15r = ?         ...(2)\n    \n    # Notice that equation (1) can be scaled to make the coefficients of (2):\n    # If we multiply all terms in (1) by 3/2, we can get the desired coefficients of (2):\n    # (3/2)*(6f) + (3/2)*(10r) = (3/2)*40\n    # 9f + 15r = 60\n    \n    # Now we found the cost for 9 files and 15 rulers which is $60.\n    ans = 60\n    return ans\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # The last digit of a number after multiplication depends only on the last digits of the numbers being multiplied.\n    # Hence we look at the last digits of 4, 7, 9, and 11 raised to the power of 100.\n\n    # Last digit of 4^100: The pattern for the powers of 4 repeats every 2: 4, 6, 4, 6...\n    # Therefore, the last digit of 4^100 is the same as the last digit of 4^(100 mod 2) = 4^0 = 1.\n    last_digit_4 = (4 ** (100 % 2)) % 10\n\n    # Last digit of 7^100: The pattern for the powers of 7 repeats every 4: 7, 9, 3, 1, 7, 9, 3, 1...\n    # Therefore, the last digit of 7^100 is the same as the last digit of 7^(100 mod 4) = 7^0 = 1.\n    last_digit_7 = (7 ** (100 % 4)) % 10\n\n    # Last digit of 9^100: The pattern for the powers of 9 repeats every 2: 9, 1, 9, 1...\n    # Therefore, the last digit of 9^100 is the same as the last digit of 9^(100 mod 2) = 9^0 = 1.\n    last_digit_9 = (9 ** (100 % 2)) % 10\n\n    # Last digit of 11^100: The last digit of 11 is always 1 regardless of the power (11^n always ends in 1).\n    last_digit_11 = (11 ** 100) % 10\n\n    # Multiply the last digits and get the last digit of the result.\n    last_digit_product = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n\n    # John had 5/13 of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n\n    # Jessie transfers $600 to John\n    # John's new amount = john + 600\n    # Jessie's new amount = jessie - 600\n\n    # John's money becomes 50% of Jessie's money\n    equation2 = Eq(john + 600, 0.5 * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate total money they had initially\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 1\n\n    # Loop until the number of times the digit '1' has been used reaches 15\n    while count_1 < 15 or count_2 < 14:\n        # Convert the current number to a string to count the digits\n        str_N = str(N)\n        count_1 += str_N.count('1')\n        count_2 += str_N.count('2')\n\n        # Move to next number\n        N += 1\n\n    # The while loop will overshoot by 1, so subtract 1 to get the correct N\n    return N - 1\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    start_time = datetime.strptime(\"10:30\", \"%H:%M\")\n    end_time = datetime.strptime(\"11:00\", \"%H:%M\")\n\n    baking_time = end_time - start_time\n    return str(baking_time)\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of T-shirts and caps\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # Given ratio of T-shirts to caps\n    ratio_eq = Eq(t_shirts / caps, 8 / 5)\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps\n    # The total money collected from selling T-shirts and caps\n    total_sales_eq = Eq((t_shirts / 4) * 3 + (caps / 5) * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_sales_eq), (t_shirts, caps))\n\n    # The number of T-shirts Siti had at first\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    harvir_age = youngest_age + (number_of_children - 1) * age_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n\n    total_spent = calendar_cost + ball_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_muffins = 1/5\n    flour_cookies = 1/2\n    flour_left_kg = 360 / 1000  # Convert grams to kilograms\n    flour_initial = flour_muffins + flour_cookies + flour_left_kg\n\n    return flour_initial\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_banana = 12  # in pence\n    cost_apple = 11  # in pence\n    number_bananas = 3\n    number_apples = 5\n    total_cost_pence = (cost_banana * number_bananas) + (cost_apple * number_apples)\n    payment_pounds = 2  # in pounds\n    payment_pence = payment_pounds * 100  # convert pounds to pence\n    change_pence = payment_pence - total_cost_pence\n    change_pounds = change_pence / 100  # convert pence back to pounds\n    return round(change_pounds, 2)  # round to 2 decimal places to represent pounds and pence\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, fix one person's position and arrange the others\n    # Subtract one from the total count to account for the fixed position\n    num_people = 4 - 1 \n    \n    # Calculate permutations for the remaining people\n    ans = factorial(num_people)\n    \n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons', integer=True)\n\n    # Oranges cost 26p each and lemons cost 30p each.\n    # Gordon spent exactly £5 (which is 500p) on a mixture of oranges and lemons.\n    equation = Eq(26 * oranges + 30 * lemons, 500)\n\n    # Since Gordon can only buy whole oranges and lemons, we iterate over all possible\n    # number of oranges and solve the equation to find the number of lemons.\n    # Once we find a solution where both oranges and lemons are whole numbers,\n    # we return the sum of oranges and lemons.\n    solutions = [(o, solve(equation.subs(oranges, o), lemons)) for o in range(500//26 + 1)]\n    valid_solutions = [(o, sol[0]) for o, sol in solutions if sol and sol[0].is_integer]\n\n    total_fruits = sum([o + l for o, l in valid_solutions])\n    return total_fruits\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for male and female visitors\n    male, female = symbols('male female')\n\n    # Given conditions\n    equation1 = Eq(male, female + 450) # On the first day\n    equation2 = Eq(male * (1 - 0.18) + female * (1 + 0.15), 1354) # On the second day\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male, female))\n\n    # Number of visitors on the first day is the sum of male and female visitors\n    first_day_visitors = solutions[male] + solutions[female]\n\n    return first_day_visitors\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo, jason + 220)\n    equation2 = Eq(jason * 2, (leo + 180) + (jason + 1100))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    # Calculate permutations of all books\n    total_permutations = factorial(total_books)\n    # Divide by the permutations of the identical books to avoid overcounting\n    # for biographies (3!), science fictions (4!), magazines (2!), and schoolbooks (2!)\n    same_permutations = factorial(3) * factorial(4) * factorial(2) * factorial(2)\n    # The number of different ways to arrange the books\n    ans = total_permutations // same_permutations\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if (A + B + C + D + E) == 19:\n            return int(f'{E}{C}{B}{C}{A}H')\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    robots_per_week = robots_per_day * days_in_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    number = 345\n    while number >= 0:\n        number -= 9\n    last_positive_number = number + 9\n    return last_positive_number\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencil cases are identical, the order in which pencils are distributed doesn't matter.\n    # We are basically partitioning the number 7 into at most 3 parts.\n    # Possible partitions of 7 into at most 3 parts are:\n    # 7 = 7 + 0 + 0 (1 way)\n    # 7 = 6 + 1 + 0 (2 ways, since first and second pencil cases are identical)\n    # 7 = 5 + 2 + 0 (3 ways, two for distributing one pencil between first and second cases and one for the third case)\n    # 7 = 5 + 1 + 1 (1 way)\n    # 7 = 4 + 3 + 0 (3 ways)\n    # 7 = 4 + 2 + 1 (6 ways)\n    # 7 = 4 + 1 + 1 (1 way, all cases different)\n    # 7 = 3 + 3 + 1 (3 ways)\n    # 7 = 3 + 2 + 2 (1 way, all cases different)\n    # 7 = 2 + 2 + 1 (1 way, all cases different)\n\n    # Adding all the ways up:\n    ans = 1 + 2 + 3 + 1 + 3 + 6 + 1 + 3 + 1 + 1\n\n    return ans\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # total cost of the mansion in pounds\n    number_of_friends = 5  # number of friends sharing the cost\n\n    each_pay = total_cost / number_of_friends  # amount each friend has to pay\n\n    return each_pay\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    # defining the custom operations\n    def custom_multiply(a, b):\n        return 3 * a - 2 * b\n\n    def custom_add(a, b):\n        return 3 * a + 2 * b\n\n    # performing the given operations\n    result = custom_add(custom_multiply(custom_add(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_amount = 555\n    price_with_name = 15\n    price_without_name = 10\n    total_children = 50\n    \n    for with_name in range(total_children + 1):\n        without_name = total_children - with_name\n        if (with_name * price_with_name + without_name * price_without_name) == total_amount:\n            return with_name\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) he spends walking after increasing his speed\n    t = symbols('t')\n    # Speed before increasing is 150 meters/minute, and after increasing is 200 meters/minute\n    speed_before = 150\n    speed_after = 200\n    # He spends 10 minutes walking before increasing his speed\n    time_before = 10\n    \n    # Total distance covered before the speed increase\n    distance_before = speed_before * time_before\n    # Total distance covered after the speed increase\n    distance_after = speed_after * t\n\n    # Total distance walked is the sum of distances before and after the speed increase\n    total_distance = distance_before + distance_after\n\n    # Solve for t, with the total distance being 3700 meters\n    equation = Eq(total_distance, 3700)\n    t_solution = solve(equation, t)\n    \n    # Total time spent walking is the sum of the time before and after the speed increase\n    total_time = time_before + t_solution[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eggs_before = symbols('eggs_before')\n\n    equation = Eq(3 * eggs_before, eggs_before + 24)\n\n    solution = solve(equation, eggs_before)\n\n    return solution[0]\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors.\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # On the second day, the number of female visitors increased by 15%\n    female_second_day = female_first_day + 0.15 * female_first_day\n\n    # On the second day, the number of male visitors decreased by 18%\n    male_second_day = male_first_day - 0.18 * male_first_day\n\n    # The total number of visitors for the second day was 1354.\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time is 7 hours ahead of London time.\n    # Therefore, when it is 05:00 in Singapore, it is 05:00 - 7 hours = 22:00 (10:00 PM) of the previous day in London.\n\n    # Plane take-off time in Singapore as minutes from the start of the day.\n    takeoff_time_sg = 5 * 60  # Convert 05:00 to minutes (5 hours * 60 minutes/hour)\n    \n    # Plane landing time in London as minutes from the start of the day.\n    # Since landing time is 11:00 of the same day in London, we do not need to account for crossing into previous day.\n    landing_time_london = 11 * 60  # Convert 11:00 to minutes (11 hours * 60 minutes/hour)\n\n    # Convert London landing time to Singapore time by adding the time difference.\n    landing_time_sg = landing_time_london + (7 * 60)  # Add 7 hours in minutes to the London time to adjust for the time difference.\n\n    # Calculate the duration of the flight in minutes.\n    flight_duration_minutes = landing_time_sg - takeoff_time_sg\n\n    # Convert the flight duration to hours by dividing by 60.\n    flight_duration_hours = flight_duration_minutes / 60\n\n    return flight_duration_hours\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    hearts = 4\n    spades = 3\n    diamonds = 7\n    different_ways = factorial(total_cards) // (factorial(hearts) * factorial(spades) * factorial(diamonds))\n    return different_ways\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_last_day = 80\n    first_day = 20\n    increment = 5\n    \n    # Calculate the number of days excluding the last day\n    day = 1\n    total_pages = first_day\n    while True:\n        next_day_read = first_day + increment * day\n        if total_pages + next_day_read > total_pages_last_day:\n            break\n        total_pages += next_day_read\n        day += 1\n    \n    # Total pages is the sum of pages read on all days including the last day\n    total_pages += total_pages_last_day\n    \n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5                 # smallest multiple of 5 is 5 itself.\n    second_digit = 1                # smallest odd number among the natural numbers.\n    third_digit = 9                 # largest odd single digit number.\n    fourth_digit = 0                # smallest even number in nature.\n    fifth_digit = 8                 # largest single digit that is a multiple of 2.\n    sixth_digit = 3                 # smallest odd number greater than 1 in nature.\n    seventh_digit = 0               # seventh digit: any digit that makes the number \n                                    # a multiple of 2 and 5 is 0.\n    phone_number = f\"{first_digit}{second_digit}{third_digit}{fourth_digit}\"\\\n                   f\"{fifth_digit}{sixth_digit}{seventh_digit}\"\n    return phone_number\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    dividend_placeholder = 4 * 9 + 2  # This is the correct method to find the dividend\n    incorrect_dividend_provided_by_Johnny = (9 * 2) + 4  # Johnny's incorrect method\n    return incorrect_dividend_provided_by_Johnny == dividend_placeholder, dividend_placeholder\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    return sum([(-1)**(i+1) * (56 - 2*i) for i in range(1, 28)])\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    equation = Eq(4 * boys - 3 * girls, 62)\n    \n    number_of_boys = solve(equation, boys)[0]\n\n    return number_of_boys\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Create a list to hold the sequence \n    sequence = []\n\n    # Populate the sequence with the pattern until before the first 11 appears\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n\n    # Since the sequence is already sorted, find the median\n    n = len(sequence)\n    middle = n // 2\n\n    # Check if n is odd\n    if n % 2 == 1:\n        # If odd, return the middle element\n        median = sequence[middle]\n    else:\n        # If even, return the average of the two middle elements\n        median = (sequence[middle - 1] + sequence[middle]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the parts cut from each rope\n    part_a, part_b = symbols('part_a part_b')\n\n    # Create the equation for Rope A after cutting part_a\n    equation1 = Eq(65 - part_a, 3 * (29 - part_a))\n\n    # Since an equal part is cut from both, part_a should be equal to part_b\n    equation2 = Eq(part_a, part_b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (part_a, part_b))\n\n    return solutions[part_a]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:  # 'S' and 'G' cannot be 0 because they are the first digit\n            continue\n        \n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        \n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1 / 6\n    \n    expected_number_of_fives = total_rolls * probability_of_five\n    \n    return expected_number_of_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_to_match = 18\n    denominator_target = 6\n\n    # Using the property of equivalent fractions a/b = x/d => x = (a*d)/b\n    ans = (numerator * denominator_target) / denominator_to_match\n\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    total_spent = 441\n    number_of_dresses = 6\n    number_of_skirts = 3\n    cost_per_skirt = 35\n    total_cost_of_skirts = number_of_skirts * cost_per_skirt\n    \n    # Equation: 7x * number_of_dresses + total_cost_of_skirts = total_spent\n    cost_per_dress = (total_spent - total_cost_of_skirts) / number_of_dresses\n\n    return cost_per_dress\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011  # Based on the observed pattern\n    return k\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # After increasing the length by 12cm, the perimeter is 38cm\n    # Since increasing length by 12cm means increasing the perimeter by 2*12cm (both sides of the rectangle),\n    # We can calculate the original perimeter\n    increased_by = 12 * 2  # for both lengths\n    original_perimeter = 38 - increased_by\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n\n    # Work done by energetic decorator in one day\n    work_energetic = 1 / 12\n    # Work done by lazy decorator in one day\n    work_lazy = 1 / x\n    # Total work done by both in one day when working together\n    work_together = 1 / 8\n\n    # Equation based on the work done\n    equation = Eq(work_energetic + work_lazy, work_together)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    return remainder_sum % 3\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jamie-Anne's and Natasha's stamps\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    # Equation representing the ratio of stamps Jamie-Anne has to Natasha's\n    ratio_eq = Eq(jamie_anne, (5/3) * natasha)\n\n    # Equation representing Jamie-Anne having 18 more stamps than Natasha\n    difference_eq = Eq(jamie_anne - natasha, 18)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (jamie_anne, natasha))\n\n    # Total number of stamps is the sum of Jamie-Anne's and Natasha's stamps\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's the first digit of a two-digit number\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sana's and Mina's number of coins\n    sana, mina = symbols('sana mina')\n    \n    # Original situation: Sana had 8 times as many coins as Mina\n    eq1 = Eq(sana, 8 * mina)\n    \n    # Together they had 234 coins in total\n    eq2 = Eq(sana + mina, 234)\n    \n    # Find the number of coins each had originally\n    solutions = solve((eq1, eq2), (sana, mina))\n    \n    # Mina then gave away 12 coins\n    mina_left = solutions[mina] - 12\n    \n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    num_bags = remaining_after_tuesday / bag_weight\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    num_students = 123\n    total_flour = flour_per_student * num_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    term_index = 11\n\n    nth_term = first_term + (term_index - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pence_in_pound = pounds * 100\n    percentage = (pence / pence_in_pound) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count_7 = 0\n    for i in range(1, 121):\n        count_7 += str(i).count('7')\n    return count_7\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Given that 11 lamp posts take 50 seconds to cycle past,\n    # we can find the time taken to pass 1 lamp post.\n    time_per_lamp_post = 50 / (11 - 1)\n    \n    # Now, we find out how many lamp posts Uncle Sam passes in 80 seconds.\n    lamp_posts_in_80_seconds = 80 / time_per_lamp_post\n    \n    # Since he cycles past the first lamp post before starting the timer,\n    # we'll have to add 1 to the number of lamp posts he passes.\n    total_lamp_posts = int(lamp_posts_in_80_seconds) + 1\n    \n    return total_lamp_posts\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner is counted twice when multiplying side flower count by the number of sides\n    # because each corner is shared by two sides. So we need to subtract the overcounted corners.\n    flowers_per_side = 6\n    sides = 4\n    corners = 4\n    \n    # Engage in correct calculations\n    total_flowers = (flowers_per_side * sides) - (corners * (2 - 1))\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of lemons Rena bought\n    x = symbols('x')\n    \n    # Since she bought 12 more apples than lemons, the number of apples is x + 12\n    # Total items bought is the sum of the fractions of each item\n    # 2/3 for apples, 1/9 for bananas, and the rest 1 - (2/3 + 1/9) will be for lemons\n    # We set up the equation to represent the above information\n    equation = Eq((2/3) * (x + 12) + (1/9) * (x + 12) + x, (x + 12))\n    \n    # Solving the equation for x, which represents the number of lemons\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place is 800, thus it has to be 8 because it's a single digit value\n    hundreds_digit = 8\n    \n    # The digit in the ones place is the sum of all the factors of 4, which are 1, 2, and 4\n    ones_digit = sum([1, 2, 4])\n    \n    # The digit in the thousands place is 1 more than the hundreds place, which is 8 + 1\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the hundreds and ones places\n    tens_digit = hundreds_digit - ones_digit\n    \n    # Constructing the 5-digit number based on the given conditions\n    number = 4 * 10000 + thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + ones_digit\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n\n    football_field_length = basketball_court_length + additional_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percentage = ana_discount * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_steering_wheels = symbols('total')\n\n    equation = Eq((300 + 250) / total_steering_wheels, 5 / 6)\n\n    ans = solve(equation, total_steering_wheels)\n\n    return ans[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    s = 1\n    while True:\n        lower = (3 / 10) * s\n        upper = (5 / 16) * s\n        r = int(lower) + 1\n        if r/s > 3/10 and r/s < 5/16:\n            return s\n        else:\n            s += 1\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    max_children = 40\n    max_adults = 24\n    children_on_bus = 15\n\n    remaining_capacity_for_children = max_children - children_on_bus\n    adults_equivalent_to_remaining_children = (remaining_capacity_for_children * max_adults) // max_children\n    \n    return adults_equivalent_to_remaining_children\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n    # To make the number a perfect square, each prime factor's exponent must be even.\n    # Thus, we may need to multiply by a number that contains the prime factors raised\n    # to the power making them even if they aren't already.\n\n    # Initial multiplier starts at 1\n    multiplier = 1\n\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            # If exponent is odd, multiply by the prime itself to make it even\n            multiplier *= prime\n\n    return multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3   # minutes\n    pancakes_in_3_minutes = 2  # number of pancakes\n    total_time = 12            # minutes\n\n    # Calculate the number of pancakes that can be cooked in total_time minutes\n    pancakes_in_total_time = (pancakes_in_3_minutes / time_for_2_pancakes) * total_time\n\n    return int(pancakes_in_total_time)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    dvd_player_cost = 740\n    remaining_after_dvd = salary - dvd_player_cost\n    tv_cost = 3 / 4 * remaining_after_dvd\n    remaining_after_tv = salary - dvd_player_cost - tv_cost\n    final_remaining = 1 / 5 * salary\n\n    equation = Eq(remaining_after_tv, final_remaining)\n    \n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Russell's current age\n    russell = symbols('russell')\n\n    # Equation representing the given condition in the problem\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    # Solve the equation for Russell's current age\n    solution = solve(equation, russell)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n    \n    # According to the Pigeonhole Principle:\n    # if n items are put into m containers, with n > m, then at least one container must contain more than one item.\n    # In this case, if 35 students are divided among 3 sizes, we want to find the minimum number of students wearing the same size (maximum occupancy).\n    \n    min_students_same_size = (num_students // num_sizes) + 1\n    return min_students_same_size\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for people_count in range(1, 50):  # Assuming the number of people is less than 50 for simplicity\n        if (people_count // 2) == abs(6 - 19):\n            return people_count\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = 1000 * A + 100 * B + 10 * C + A\n                bud_number = 1000 * A + 100 * C + 10 * B + A\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, which results in 2 pieces.\n    # To have 5 pieces, we need 4 cuts in total.\n    cuts_required = 5 - 1\n    minutes_per_cut = 2\n    total_minutes = cuts_required * minutes_per_cut\n    return total_minutes\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_in_recipe = 100\n    chocolate_in_recipe = 40\n    available_biscuits = 75\n\n    # Find the ratio of chocolate to biscuits in the original recipe\n    chocolate_to_biscuits_ratio = chocolate_in_recipe / biscuits_in_recipe\n\n    # Calculate the amount of chocolate needed for the available biscuits\n    chocolate_needed = chocolate_to_biscuits_ratio * available_biscuits\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of students in 6A\n    x = symbols('x')\n    # The original number of students in 6B is then 9/4 * x\n    # After the reshuffle, the number of students in both classes are equal\n    # Class 6A received 18 students, and lost 3, so the new number is x - 3 + 18\n    # Class 6B lost 18 students, and gained 3, so the new number is (9/4 * x) - 18 + 3\n    # Setting these two equal gives us the equation:\n    equation = Eq(x - 3 + 18, (9 / 4 * x) - 18 + 3)\n\n    # Solving this equation will give us the original number of students in Class 6A\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let x be the number of shelves with math books\n    # Then (15 - x) will be the number of shelves with spelling books\n    # 4 * x will be the number of math books\n    # 9 * (15 - x) will be the number of spelling books\n    # We know there are 72 spelling books, so:\n    # 9 * (15 - x) = 72\n    # Solve for x:\n    x = (72 / 9) - 15\n    \n    # The total number of math books will then be 4 * x\n    num_math_books = 4 * x\n    \n    return int(num_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from first to fourth floor\n    time_first_to_fourth = 6  # minutes\n\n    # Floors covered from first to fourth floor\n    floors_first_to_fourth = 4 - 1  # because it's from first to fourth, so subtract 1\n\n    # Calculate time taken for each floor\n    time_per_floor = time_first_to_fourth / floors_first_to_fourth\n\n    # Floors to be covered from first to tenth floor\n    floors_first_to_tenth = 10 - 1  # because it's from first to tenth, so subtract 1\n\n    # Calculate time taken to walk from first to tenth floor\n    time_first_to_tenth = time_per_floor * floors_first_to_tenth\n\n    return time_first_to_tenth\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    num_days_in_week = 7\n    total_earnings = average_earnings_per_day * num_days_in_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n    harry_flowers = luna_flowers - difference\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    students_initial = 16 * 2\n    students_after = 22 * 2\n    new_students = students_after - students_initial\n    return new_students\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n\n    ans = solve(equation, n)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate time for each segment\n    time1 = 280 / 7  # Time for the first 280 meters\n    time2 = 400 / 5  # Time for the middle 400 meters\n    time3 = (800 - 280 - 400) / 8  # Time for the last part of the race\n\n    # Sum up the total time\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each girl has after the exchanges.\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # The total number of marbles after the exchanges.\n    total_marbles = anna + betsy + charlene\n\n    # Equation representing the total number of marbles after exchanges.\n    equation_total = Eq(total_marbles, 168)\n\n    # Equation representing the ratio of marbles after the exchanges.\n    equation_ratio = Eq(anna/betsy, 2/5) & Eq(betsy/charlene, 5/7)\n\n    # Adjusting for the transfer of marbles.\n    equation_transfers = Eq(charlene - betsy, 15) & Eq(betsy - anna, 8)\n\n    # Solve the system of equations.\n    solutions = solve((equation_total, equation_ratio, equation_transfers), (anna, betsy, charlene))\n\n    # Calculate Betsy's initial number of marbles.\n    betsy_initial = solutions[betsy] + 15 - 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the paper in centimeters\n    length_cm = 136  # Converted from meters to centimeters\n    width_cm = 80    # Converted from meters to centimeters\n\n    # Calculate the greatest common divisor (GCD)\n    square_size = gcd(length_cm, width_cm)\n    \n    # Calculate the number of squares that can be cut out\n    num_squares = (length_cm // square_size) * (width_cm // square_size)\n    \n    return num_squares\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    # Calculate the total number of permutations of all cards\n    total_permutations = factorial(total_cards)\n    # Divide by the repeated permutations for each color\n    same_yellow_permutations = factorial(yellow_cards)\n    same_red_permutations = factorial(red_cards)\n    same_green_permutations = factorial(green_cards)\n\n    # Final answer - different ways Tom can arrange the cards\n    ans = total_permutations // (same_yellow_permutations * same_red_permutations * same_green_permutations)\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lollipops, gum_drops = symbols('lollipops gum_drops')\n    \n    # Original ratio equation\n    equation1 = Eq(lollipops/gum_drops, 5/7)\n    \n    # New ratio equation after adding 120 pieces of each\n    equation2 = Eq((lollipops + 120)/(gum_drops + 120), 4/5)\n    \n    # Solve the system of equations\n    solved_values = solve((equation1, equation2), (lollipops, gum_drops))\n    \n    # Calculate total number of pieces after adding 120 of each kind\n    total_pieces = solved_values[lollipops] + solved_values[gum_drops] + 120 + 120\n    \n    return total_pieces\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n    \n    # Iterate through each place (hundreds, tens, ones) allowing repetitions\n    for hundreds in digits:\n        for tens in digits:\n            for ones in digits:\n                # Check if the number is odd: the ones place must be 5 or 7\n                if ones in [5, 7]:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    limit = 201\n    count_by_5 = (limit - 1) // 5\n    count_by_7 = (limit - 1) // 7\n    count_by_5_and_7 = (limit - 1) // (5 * 7)\n    \n    ans = count_by_5 + count_by_7 - count_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of teams as n\n    n = symbols('n')\n\n    # Each team plays each other team twice, so we have n*(n-1) matches (divided by 2 because each match is counted twice)\n    # The equation equates this number to the 30 matches we have in total\n    equation = Eq(n * (n - 1), 30 * 2)\n\n    # Solving for n\n    teams = solve(equation, n)\n\n    # Among the solutions we need only the positive integer one (the number of teams cannot be negative or non-integer)\n    ans = [s for s in teams if s.is_real and s > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote d as the cost of one durian, p as the cost of one pineapple, and w as the cost of one watermelon\n    d, p, w = symbols('d p w')\n\n    # We create two equations based on the problem statement\n    equation1 = Eq(1 * d + 2 * p + 3 * w, 440)  # Chris's purchase\n    equation2 = Eq(4 * d + 6 * p + 9 * w, 1625) # Dylan's purchase\n\n    # Solve the system of equations for the cost of one durian(d), one pineapple(p), and one watermelon(w)\n    solutions = solve((equation1, equation2), (d, p, w), dict=True)\n\n    # Extract the cost of one durian from the solutions\n    durian_cost = solutions[0][d]\n\n    return durian_cost\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    # Define a variable to represent the original number with the last digit as x\n    # The last digit x was forgotten, so the number is 10 times smaller without it.\n    # The number is also 135 less than the true value\n    \n    for x in range(10):  # The ones digit can be from 0 to 9\n        original_number = int('135' + str(x))\n        if original_number - 135 == (original_number // 10):\n            return original_number\n            \nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    trips = 0\n\n    # One trip consists of taking people to the other side and returning the empty boat.\n    # So, we divide the number of students by the capacity, but since the boat returns empty,\n    # we need to subtract one less person from the full boat capacity on every trip except the last one.\n    \n    if students % (boat_capacity - 1) == 0:\n        trips = (students // (boat_capacity - 1)) * 2 - 1  # For the last trip, the boat doesn't need to return.\n    else:\n        trips = ((students // (boat_capacity - 1)) + 1) * 2 - 1\n        \n    return trips\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    factorial_100 = 100\n    factorial_99 = 99\n    factorial_98 = 98 * 99\n\n    ans = factorial_100 / (factorial_99 + factorial_98)\n    \n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let the total number of students be x.\n    \n    # The number that chose Grade A Math is 80% of x.\n    # The number that chose Grade B Math is 35% of x.\n    # The number that chose neither is 10% of x.\n    # The number that chose both A and B Math is 75.\n    \n    # From the problem statement, we can set up an equation as follows:\n    # (Number that chose A) + (Number that chose B) - (Number that chose both) + (Number that chose neither) = Total number of students\n    # 0.80x + 0.35x - 75 + 0.10x = x\n    # 1.25x - 75 = x\n    # 0.25x = 75\n    # x = 75 / 0.25\n    # x = 300\n\n    total_students = 75 / 0.25\n\n    return int(total_students)\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n\n    # Calculate number of factors for a given number\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Create a list of odd numbers with a unique number of factors\n    unique_factors = {}\n    for number in range(1, 14, 2): # Only considering odd numbers\n        factors = num_factors(number)\n        if factors not in unique_factors:\n            unique_factors[factors] = number\n\n    # Find all combinations of 9 numbers from 1 to 13\n    combinations_of_nine = list(combinations(range(1, 14), 9))\n\n    # Function to check the conditions given in the problem statement\n    def check_conditions(comb):\n        for i, alice_num in enumerate(comb):\n            if num_factors(alice_num) in unique_factors and alice_num % 2 == 1:\n                remaining_nums = list(comb[:i] + comb[i+1:])\n                for may_num in remaining_nums:\n                    if may_num == alice_num - 2:\n                        remaining_nums.remove(may_num)\n                        for mark_num in remaining_nums:\n                            if may_num == mark_num + 1:\n                                return set(comb)\n        return None\n\n    # Find the combination that satisfies the conditions\n    for comb in combinations_of_nine:\n        result = check_conditions(comb)\n        if result:\n            not_picked_numbers = set(range(1, 14)) - result\n            product = 1\n            for num in not_picked_numbers:\n                product *= num\n            return product\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declaring symbols for each person's age\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Equations based on given problem statement\n    eq1 = Eq(frank - alex, alex - paul) # The age difference between Frank and Alex is the same as between Alex and Paul\n    eq2 = Eq(frank + alex + paul, 99)   # The sum of all their ages is 99\n\n    # Solving the equations\n    solutions = solve((eq1, eq2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for ones in range(10):\n        for tens in range(10):\n            if tens != ones and ones + tens == 15:\n                if ones % 2 == 0:\n                    return 900 + tens * 10 + ones\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible 4-digit permutations of the numbers 1, 4, 6, 9\n    perm = permutations([1, 4, 6, 9])\n    \n    sum_of_numbers = 0\n    count = 0\n    \n    for p in perm:\n        # Convert the permutation tuple to a single integer\n        number = int(''.join(map(str, p)))\n        sum_of_numbers += number\n        count += 1\n\n    # Calculate the average of all numbers\n    average = sum_of_numbers / count\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of boys as 'b' and the number of girls as 'g'.\n    b, g = symbols('b g')\n\n    # Initially, there was an equal number of boys and girls.\n    equation1 = Eq(b, g)\n\n    # After 60 boys and 12 girls left the gathering, twice as many girls as boys\n    # remained at the gathering.\n    equation2 = Eq(g - 12, 2 * (b - 60))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Only the number of boys initially is required to be returned.\n    return solutions[b]\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls fill 1 jug, so the ratio bowls to jugs is 3:1\n    bowls_per_jug = 3\n    # 2 jugs fill 1 pail, so the ratio jugs to pails is 2:1\n    jugs_per_pail = 2\n    \n    # To find out how many bowls are needed to fill 1 pail, multiply the ratios together\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km/h\n    car_speed = 120  # km/h\n\n    # The van has already traveled for 3 hours before the car started\n    van_advantage = van_speed * 3  # km\n\n    # Relative speed between the car and the van\n    relative_speed = car_speed - van_speed  # km/h\n\n    # Time taken for the car to catch up with the van\n    time_to_catch_up = van_advantage / relative_speed  # h\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert recurring decimal 0.010101... to a fraction\n    number = Fraction(1, 99)\n    \n    # Multiply the fraction by itself to find the square\n    product = number * number\n    \n    # The number of digits in one repetend of the product is equal to the denominator's number of unique prime factors\n    # Count the number of digits in the repetend by Euler's Totient function (phi)\n    phi = lambda n : len([i for i in range(1, n) if Fraction(i, n).denominator == n])\n\n    # Find the number of digits in one repetend\n    num_digits = phi(product.denominator)\n    \n    return num_digits\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A rate: 300 pages in 12 minutes\n    rate_A = 300 / 12\n    # Printer B rate: 300 pages in 10 minutes\n    rate_B = 300 / 10\n    # The time they work together is half an hour, which is 30 minutes\n    time = 30\n    # Using inclusion-exclusion principle to calculate total pages printed\n    total_pages = (rate_A + rate_B) * time\n\n    return total_pages\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # Since hats are optional, Wendy can choose to wear 0, 1, 2, 3, or 4 hats.\n    # There are 3 shirts, 2 pairs of pants, and 1 skirt, and these are not optional.\n    hats_combinations = 5 # Including the choice of wearing no hat\n    shirts_combinations = 3 # She has to choose 1 out of 3 shirts\n    pants_combinations = 2 # She has to choose 1 out of 2 pants\n    skirt_combinations = 1 # There is only 1 skirt\n    \n    # Applying the multiplication principle\n    total_combinations = hats_combinations * shirts_combinations * pants_combinations * skirt_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Create equations based on the problem statement\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation for the total number of items\n    items_sol = solve(equation, total_items)\n\n    # Calculate the number of lemons\n    num_lemons = items_sol[0] - (2/3) * items_sol[0] - (1/9) * items_sol[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if day is valid for the month\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n            date = f\"{day:02d}/{month:02d}/2019\"\n            count += date.count('3')\n    return count\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # Create the proportion equations based on the ratio and prices\n    equation1 = Eq(durian / chocolate, 3 / 4)\n    equation2 = Eq(chocolate / strawberry, 4 / 2)\n    equation3 = Eq(durian * 5 + chocolate * 3 + strawberry * 4, 560)\n\n    # Solve the system of equations for durian, chocolate, and strawberry\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Calculate the amount of money collected from the sale of durian puffs\n    money_from_durian_puffs = solutions[durian] * 5\n\n    return money_from_durian_puffs\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is cut into 490 small cubes, and the dimensions of the cuboid are 7x5x14,\n    # Each small cube is a 1x1x1 cube. \n\n    # Only the cubes that are at the corners can have exactly three faces painted.\n    # There are 8 corners in a cuboid, hence there will be 8 such small cubes.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_interest = 1.191  # 6% for the first three years\n    second_interest = 1.166  # 8% for the last two years\n\n    # First calculate the amount after three years with 6% interest\n    amount_after_three_years = initial_investment * first_interest\n    \n    # Then calculate the final amount after two more years with 8% interest\n    final_amount = amount_after_three_years * second_interest\n    \n    # Round the result to the nearest hundredth\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the heights for A, B, C, D, Zachary, Yvonne, Xavier and Waylon\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W')\n\n    # Constraints based on the information provided\n    constraints = [\n        A > C,            # A higher than C\n        A < D,            # A lower than D\n        B < X,            # B lower than Xavier\n        D == 5 * Y,       # D's unit is 5 times Yvonne's\n        Z + 2 - X == Z - W, # Difference equation for moving Zachary up 2 units\n        Z == Y + X,       # Zachary's level is the sum of Yvonne and Xavier's\n        \n        # All people live between level 1 and level 18\n        A >= 1, A <= 18,  \n        B >= 1, B <= 18,  \n        C >= 1, C <= 18,  \n        D >= 1, D <= 18,  \n        Z >= 1, Z <= 18,  \n        Y >= 1, Y <= 18,  \n        X >= 1, X <= 18,  \n        W >= 1, W <= 18,  \n        \n        # All levels are integers\n        Eq(A%1, 0), \n        Eq(B%1, 0), \n        Eq(C%1, 0), \n        Eq(D%1, 0), \n        Eq(Z%1, 0), \n        Eq(Y%1, 0), \n        Eq(X%1, 0), \n        Eq(W%1, 0), \n    ]\n\n    # Solve the set of equations\n    solutions = solve(constraints, (A, B, C, D, Z, Y, X, W))\n\n    # Extract the solution for A\n    return min(solutions, key=lambda x: x[A])[A]  # Use min to get the value of A from the solution tuple\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Each number n appears n times\n    half = total_numbers // 2\n\n    current_number = 1\n    cum_sum = 0\n\n    # Find the number that reaches or exceeds the median position\n    while cum_sum + current_number <= half:\n        cum_sum += current_number\n        current_number += 1\n\n    # As we have an even number of total items, the median is the average of the two middle numbers\n    median = current_number\n\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n    digits = [4, 5, 8]\n    all_possible_numbers = list(permutations(digits))\n    count = len(all_possible_numbers)\n    return count\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n\n    equation1 = Eq(raisin_roll, 3 * donut)\n    equation2 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n\n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n\n    # Finding the greatest common divisor (GCD) for the three numbers\n    gcd_12 = gcd(students_school1, students_school2)\n    gcd_123 = gcd(gcd_12, students_school3)\n\n    return gcd_123\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digit_nums = 9 - 7 + 1\n    two_digit_nums = 40 - 10 + 1\n    total_digits = single_digit_nums + (2 * two_digit_nums)\n    return total_digits\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Known sums\n    sum_of_9 = 99\n    sum_of_27 = 540\n\n    # Number of terms to find the sum of\n    n = 16\n\n    # Using the formula for the sum of an arithmetic series: S_n = n/2 * (2a + (n-1)d)\n    # We have two equations based on the sums provided:\n    # S_9 = 9/2 * (2a + 8d) = 99\n    # S_27 = 27/2 * (2a + 26d) = 540\n\n    # To find 'a' (first term) and 'd' (common difference), we can solve the linear equations\n    # First, simplify equations by dividing by 9/2 and 27/2 respectively:\n    # 2a + 8d = (99 * 2) / 9\n    # 2a + 26d = (540 * 2) / 27\n\n    # Calculate the simplified right-hand side values\n    rhs_1 = (99 * 2) / 9\n    rhs_2 = (540 * 2) / 27\n\n    # Set up the equations using the calculated rhs values\n    # Equation 1: 2a + 8d = rhs_1\n    # Equation 2: 2a + 26d = rhs_2\n\n    # Now solve the equations to find the values of 'a' and 'd'\n    # From Equation 1, we get a = (rhs_1 - 8d) / 2\n    # Substitute 'a' from Equation 1 into Equation 2:\n    # (rhs_1 - 8d) + 26d = rhs_2\n    # 18d = rhs_2 - rhs_1\n\n    # Solve for 'd'\n    d = (rhs_2 - rhs_1) / 18\n\n    # Now that we have 'd', solve for 'a'\n    a = (rhs_1 - 8 * d) / 2\n\n    # Now we can find the sum of the first 16 terms using the sum formula again\n    sum_of_16 = n / 2 * (2 * a + (n - 1) * d)\n\n    return sum_of_16\n\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_artist_paintings = 40\n    landscapes = int(0.40 * total_paintings)\n    french_artist_landscapes = 25\n\n    still_lifes = total_paintings - landscapes\n    french_artist_still_lifes = french_artist_paintings - french_artist_landscapes\n    non_french_artist_still_lifes = still_lifes - french_artist_still_lifes\n\n    return non_french_artist_still_lifes\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage games\n    # Each group has 4 teams and every team plays with every other team once.\n    # Number of games in one group is given by 4 choose 2 (combinatorial)\n    games_per_group = (4 * 3) // 2\n    # Total games in the group stage for all groups\n    group_stage_games = games_per_group * 8\n\n    # Knockout stage games\n    # Round of 16, quarter-finals, semi-finals, 3rd place playoff, and the final\n    # At each stage (except third place playoff), the number of games is half the number of teams.\n    knockout_games = 16 // 2 + 8 // 2 + 4 // 2 + 2 // 2 + 1  # +1 for the third place playoff\n\n    # Total number of games\n    total_games = group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4  # red light flashes per minute\n    green_flash_rate = 6  # green light flashes per minute\n\n    # LCM (Least Common Multiple) gives the number of minutes after which they will flash together\n    minutes = lcm(red_flash_rate, green_flash_rate) // red_flash_rate\n\n    # Number of times they flash together in one hour (60 minutes)\n    flashes_together = 60 // minutes + 1  # including the first and last time\n\n    return flashes_together\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink in ml\n    max_volume_per_glass = total_volume // 9  # Floor division to find the greatest volume per glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_in_first = 100 * 0.50\n    rice_in_second = 400 * 0.80\n    total_rice = rice_in_first + rice_in_second\n    concentration = total_rice / total_weight\n    return concentration\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # Calculate the sum S\n    S = sum(int('2' * i) for i in range(1, 2018))\n    \n    # Convert the sum to a string to get the last 5 digits\n    last_five_digits_string = str(S)[-5:]\n    \n    # Convert the last five digits back to an integer to sum them up\n    ans = sum(int(digit) for digit in last_five_digits_string)\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # Given values\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n    \n    # Calculate the total amount of hay needed for one horse for one day (unitary method)\n    hay_per_horse_per_day = 1 / (horses_initial * days_initial)\n    \n    # Calculate days the same pile of hay would feed 20 horses\n    days_final = (1 / hay_per_horse_per_day) / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit = i // 1000\n        remaining = i % 1000\n        new_number = remaining * 10 + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    ans = min(numbers, key=lambda x: abs(x - 1))\n    return ans\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    sum_of_ages_target = 48\n    years_later = 0\n\n    while (oliver_current_age + lin_current_age) < sum_of_ages_target:\n        years_later += 1\n        oliver_current_age += 1\n        lin_current_age += 1\n\n    return years_later\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    multiple = 35\n    while True:\n        if str(multiple).endswith('35') and sum(map(int, str(multiple))) == 35:\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age = 8\n    mother_age = 4 * sandra_age\n    difference_2_years_ago = (mother_age - 2) - (sandra_age - 2)\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    money_initial = 8 * y\n    money_spent_on_watch = 4 * y\n    money_spent_on_handbag = 20\n    money_each_child = y - 5\n\n    # Total money given to children\n    money_given_to_children = 2 * money_each_child\n\n    # Equation based on the total money Mrs. Lim spent and gave\n    equation = Eq(money_initial, money_spent_on_watch + money_spent_on_handbag + money_given_to_children)\n\n    # Solve the equation\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit_amount = 10\n    spend_amount = 8\n    cycle_days = 2\n\n    cycles_completed = days // cycle_days\n    remaining_days = days % cycle_days\n\n    total_deposits = deposit_amount * cycles_completed\n    total_spends = spend_amount * (cycles_completed if remaining_days == 0 else cycles_completed + 1)\n\n    amount_after_days = initial_amount + total_deposits - total_spends\n\n    return amount_after_days\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    # Define the range of years to calculate\n    start_year = 1901\n    end_year = 2000\n\n    # Count of normal years and leap years\n    normal_years = 0\n    leap_years = 0\n\n    for year in range(start_year, end_year + 1):\n        # Check for a leap year: divisible by 4 but not by 100, or divisible by 400\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            leap_years += 1\n        else:\n            normal_years += 1\n    \n    # Total number of days considering leap years have 366 days and normal years have 365 days\n    total_days = (leap_years * 366) + (normal_years * 365)\n\n    return total_days\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    numbers_less_than_100 = set(range(1, 100))\n    \n    divisible_by_3 = {i for i in numbers_less_than_100 if i % 3 == 0}\n    divisible_by_7 = {i for i in numbers_less_than_100 if i % 7 == 0}\n    \n    divisible_by_3_or_7 = divisible_by_3.union(divisible_by_7)\n    \n    not_divisible_by_3_or_7 = numbers_less_than_100.difference(divisible_by_3_or_7)\n    \n    ans = len(not_divisible_by_3_or_7)\n    return ans\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5 # weight of one ten-pence coin in grams\n    total_value = 40 # total value in pence\n    coin_value = 10 # value of one ten-pence coin in pence\n\n    number_of_coins = total_value / coin_value\n    total_weight = number_of_coins * weight_per_coin\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    equation1 = Eq(james + nina, 22)\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # Since the clock strikes according to the number of hours, it forms an arithmetic sequence:\n    # 1st hour => 1 strike\n    # 2nd hour => 2 strikes\n    # ...\n    # 12th hour => 12 strikes\n    # This is an arithmetic sequence where a_1 = 1 and a_n = 12 with a common difference of 1.\n    \n    # The sum of the first n terms of an arithmetic sequence is given by n/2 * (a_1 + a_n)\n    n = 12\n    a_1 = 1\n    a_n = n\n    sum_strikes = n/2 * (a_1 + a_n)\n\n    return int(sum_strikes)\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    score_deduction_wrong = 2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * score_for_correct - wrong * score_deduction_wrong\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    seat_numbers = 9\n    start_seat = 3\n\n    last_seat = (start_seat + total_candies - 1) % seat_numbers\n    last_seat = last_seat if last_seat != 0 else seat_numbers\n\n    return last_seat\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4  # Sum of the ratio parts\n    number_of_adults = (total_people * 1) // ratio_sum  # Calculate number of adults\n    \n    return number_of_adults\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # initial speed in m/s\n    angle = 37  # angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle to radians for calculations\n    angle_radians = math.radians(angle)\n\n    # Calculate the height using the formula: (initial_speed**2 * sin(angle)**2) / (2 * g)\n    height = (initial_speed**2 * math.sin(angle_radians)**2) / (2 * g)\n\n    # Calculate the distance along the ramp using the formula: height / sin(angle)\n    distance = height / math.sin(angle_radians)\n\n    return (height, distance)\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for racket and ball\n    racket, ball = symbols('racket ball')\n    \n    # Set up the two equations based on the problem statement\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n    \n    # Solve the system of equations\n    solved_values = solve((equation1, equation2), (racket, ball))\n    \n    # Extract the mass of the racket\n    racket_mass = solved_values[racket]\n    \n    return racket_mass\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # In the worst case scenario, Sheila takes out at least 3 blue balls, 3 orange balls,\n    # and 2 yellow balls without completing any group of 4 of the same color.\n    # That is 3 (blue) + 3 (orange) + 2 (yellow) = 8 balls in total.\n\n    # To ensure she gets 2 groups of 4 balls of the same color,\n    # she takes one more ball of each remaining color (blue and orange).\n    # That is 1 (blue) + 1 (orange), so in total 8 (previous) + 1 (blue) + 1 (orange) = 10.\n    # With these 10 balls, she will have at least 2 groups of 4 of the same color.\n\n    return 10\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # Number of players to start with\n    players = 64\n    # Number of matches, initially 0\n    matches = 0\n\n    # Each match reduces the player count by 3, since 1 wins and 3 are knocked out\n    while players > 1:\n        # Number of matches is the number of players divided by 4 (since 4 players per match)\n        matches += players // 4\n        # Update the number of players to the winners from each match\n        players //= 4\n\n    # Return the total number of matches needed\n    return matches\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n    \n    flour_weight = (total_weight - cheese_weight) / number_of_flour_bags\n    \n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming the question implies that Richard has £14 to spend\n    # and wants to know how many CDs he can buy in St Petersburg at the same price\n    # as in England.\n    # Given the cost of a CD in England is £14, if CDs in St Petersburg are at the same price:\n    \n    # Amount of money Richard has\n    richard_money = 14\n    \n    # Cost of one CD in St Petersburg (assuming it's the same as in England)\n    st_petersburg_cd_price = 14\n\n    # Number of CDs Richard can buy\n    number_of_cds = richard_money // st_petersburg_cd_price\n    \n    return number_of_cds\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10):\n                for digit4 in range(0, 10):\n                    original_num = digit1 * 1000 + digit2 * 100 + digit3 * 10 + digit4\n                    new_num = digit2 * 1000 + digit3 * 100 + digit4 * 10 + digit1\n                    if new_num - original_num == 4707:\n                        return original_num\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "from sympy import isprime, primerange\n\ndef solution():\n    # Iterate over possible ages and check conditions\n    for age in [28, 39, 52, 84]:\n        if (isprime(age + 1) and\n            any(age - 2 == x**2 for x in range(age)) and\n            any(age + 11 == y**3 for y in range(age))):\n            return age\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def vee_operation(a, b):\n        return a * b + a + b\n\n    for x in range(-100, 100):  # Define a reasonable range for x\n        if vee_operation(2, vee_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart needs to take at least one of each color to ensure he has two different colors\n    # Since he needs two different colors, the worst-case scenario is that he takes all M&M's of one color first\n    # So he would take all 5 brown ones, and since that's not enough, he would then take 1 from the remaining colors\n    # so, the answer is 5 (all of one color) + 1 (one of another color) which equals 6.\n\n    ans = 5 + 1\n\n    return ans\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    times_repeated = 43 // pattern_length\n    partial_pattern = pattern[:43 % pattern_length]\n    \n    total_sum = sum(map(int, pattern)) * times_repeated\n    total_sum += sum(map(int, partial_pattern))\n    \n    return total_sum\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of the speeds of Andrew and Bernice\n    andrew_bernice_speed_ratio = 5 / 3\n\n    # Ratio of the speeds of Bernice and Cassandra\n    # Bernice took as much time to get from level 3 to level 6 (3 levels) as Cassandra from some level to level 10, \n    # thus Cassandra went from level (10-3) = 7 to level 10 in this time.\n    bernice_cassandra_speed_ratio = 3 / (10 - 7)\n\n    # Combined ratio of the speeds of Andrew and Cassandra\n    # To get from Andrew to Bernice to Cassandra, we can multiply the ratios.\n    andrew_cassandra_speed_ratio = andrew_bernice_speed_ratio * bernice_cassandra_speed_ratio\n\n    # When Cassandra reaches level 19, we find Andrew's level using the speed ratio.\n    andrew_level_when_cassandra_19 = andrew_cassandra_speed_ratio * 19\n\n    return andrew_level_when_cassandra_19\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    num_quizzes = 4\n    total_minutes = time_per_quiz * num_quizzes\n    hours = total_minutes / 60\n    return hours\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    n1 = 9\n    S1 = 72\n    n2 = 23\n    S2 = 736\n    n3 = 16\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n\n    # We have two equations based on the sum of arithmetic sequence:\n    # S1 = n1/2 * (2a + (n1 - 1)d)\n    # S2 = n2/2 * (2a + (n2 - 1)d)\n\n    # From S1, we can express a as:\n    # a = (2S1/n1 - (n1 - 1)d)/2\n\n    # Plugging the value of a into the formula for S2 gives us:\n    # S2 = n2/2 * ((2(2S1/n1 - (n1 - 1)d)/2) + (n2 - 1)d)\n    # Simplifying the equation above gives us a linear equation in terms of d:\n    # S2 = S1*n2/n1 + (n2(n2 - 1)/2 - n2*(n1 - 1)/2)*d\n\n    # Now, we solve for d:\n    d = (S2 - S1*n2/n1) / ((n2*(n2 - 1)/2) - n2*(n1 - 1)/2)\n\n    # Having d, we can now solve for a:\n    a = (S1/n1 - (n1 - 1)/2*d)\n\n    # Now we can find S3:\n    S3 = n3/2 * (2*a + (n3 - 1)*d)\n\n    return S3\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometers = 4.7\n    centimeters_per_kilometer = 100000\n    centimeters = kilometers * centimeters_per_kilometer\n    return centimeters\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair_price, table_price = symbols('chair_price table_price')\n    \n    equation1 = Eq(table_price, 3 * chair_price)\n    equation2 = Eq(4 * table_price + 9 * chair_price, 504)\n    \n    solutions = solve((equation1, equation2), (chair_price, table_price))\n    \n    return solutions[chair_price]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(9):  # As the maximum number of 5p coins can be 8 (since 8*5p = 40p)\n        for ten_p in range(5):  # As the maximum number of 10p coins can be 4 (since 4*10p = 40p)\n            if (five_p * 5 + ten_p * 10 == 40):\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_driven_before_turning_back = 40 / 60\n\n    # Distance driven by Samuel before turning back\n    distance_before_turning_back = 66 * time_driven_before_turning_back\n\n    # Time taken by Shafur to reach Town Y\n    # It includes the time before Samuel turned back and the rest of the time after Samuel turned back\n    # Since they reached Town Y at the same time, this is also the total time taken by Samuel\n    total_time_taken = distance_before_turning_back / (66 - 54)\n\n    # Therefore, the distance between Town X and Town Y is Shafur's speed times the total time taken\n    distance_between_towns = 54 * total_time_taken\n\n    return distance_between_towns\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n\n    # Let x be the number of years in the future we are looking for.\n    # Calculate the sum of the grandsons' ages x years from now.\n    # It will be equal to the grandpa's age x years from now.\n    # So, we set up the equation: sum_of_grandsons_ages + 3x = grandpa_age + x\n    sum_of_grandsons_ages = sum(grandsons_ages)\n    grandpa_future_age = grandpa_age\n\n    # Solve for x using algebraic manipulation\n    # 3x - x = grandpa_age - sum_of_grandsons_ages\n    # 2x = grandpa_age - sum_of_grandsons_ages\n    x = (grandpa_age - sum_of_grandsons_ages) // 2\n\n    return x\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        product = digits[0] * digits[1] * digits[2]\n        if product > 99 and product < 1000:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity_per_vase = 9\n\n    num_vases, remainder = divmod(flowers, capacity_per_vase)\n    if remainder > 0:\n        num_vases += 1\n    \n    return num_vases\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is a decreasing sequence\n\n    # We want to find the first negative term, so we need to solve for n in the following equation:\n    # first_term + (n - 1) * difference < 0\n    # 50 + (n - 1) * (-4) < 0\n    # (n - 1) * (-4) < -50\n    # (n - 1) > 50 / 4\n    # n > 12.5 (since n must be an integer, we take the next whole number)\n    # Thus, n must be at least 13\n\n    n = 13\n    # Now check if n = 13 yields a negative term\n    while first_term + (n - 1) * difference >= 0:\n        n += 1\n\n    # Since we've found the first negative term, we return n - 1 as the answer\n    return n - 1\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First part of the expression\n    numerator1 = 7 / (-10 / 3)  # Converting -3.33... to -10/3\n    denominator1 = (-0.027) ** (1/3)  # cube root of -0.027\n    part1 = numerator1 / denominator1\n\n    # Second part of the expression\n    numerator2 = 2**3 / 4**2\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))\n    part2 = numerator2 / denominator2\n\n    # Third part of the expression\n    # Using fraction representation for repeating decimal 0.1/(1/7)\n    part3 = 0.1 / (1/7) + (2 * 0.3)\n\n    # Final calculation\n    ans = part1 + part2 - part3\n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)) % 3)  # First multiple of 3 greater than or equal to 38\n    last_multiple = 81 - (81 % 3)  # Last multiple of 3 less than or equal to 81\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 3 to 10\n    increasing_sum = sum(range(3, 11))\n    # Calculate the sum of the decreasing sequence from 10 to 3\n    decreasing_sum = sum(range(10, 2, -1))\n    # The total sum is the sum of both sequences\n    total_sum = increasing_sum + decreasing_sum\n    return total_sum\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_feb = 78\n    remaining_after_jan = (remaining_after_feb - 13) * 2\n    initial_phones = (remaining_after_jan + 22) * 2\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths = 18\n    full_number = (three_sevenths * 7) / 3\n    five_sixths = (full_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1\n    return num_games\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip - bud, 50)\n\n    # When Pip has spent 80% of his money, he has 20% left.\n    pip_left = pip * (1 - 0.80)\n\n    # When Bud has spent 3/4 of her money, she has 1/4 left.\n    bud_left = bud * (1 - 3/4)\n\n    # The ratio of Pip's leftover money to Bud's is 6:5\n    equation2 = Eq(pip_left / bud_left, 6 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n    total_apples = initial_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let's denote the number of pencils as x.\n    # Therefore, the number of pens will be x + more_pens.\n    # The total is the sum of pens and pencils: x + (x + more_pens) = total_items\n    # We solve for x: 2x + more_pens = total_items\n    # Then, x = (total_items - more_pens) / 2\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With 5 players, we need to eliminate 4 players to determine the winner.\n    # Hence, we need 4 games to determine the winner.\n    number_of_games = 5 - 1\n    return number_of_games\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Number of months from January to April\n    jan_to_apr = 4\n    # Number of months from May to July\n    may_to_jul = 3\n    # Number of months for August to September\n    aug_to_sep = 2\n    # Number of months from October to December\n    oct_to_dec = 3\n\n    # Monthly average spending from January to April\n    avg_jan_to_apr = 500\n    # Monthly average spending from May to July\n    avg_may_to_jul = 300\n    # Total spending for August and September\n    total_aug_to_sep = 400\n    # Monthly average spending from October to December\n    avg_oct_to_dec = 300\n\n    # Total spent from January to April\n    total_jan_to_apr = jan_to_apr * avg_jan_to_apr\n    # Total spent from May to July\n    total_may_to_jul = may_to_jul * avg_may_to_jul\n    # No need to calculate for August to September as it's already given as total\n    # Total spent from October to December\n    total_oct_to_dec = oct_to_dec * avg_oct_to_dec\n\n    # Total spent over the whole year\n    total_year = total_jan_to_apr + total_may_to_jul + total_aug_to_sep + total_oct_to_dec\n\n    # Total number of months in a year\n    months_in_year = 12\n\n    # Average spending per month from January to December\n    avg_per_month = total_year / months_in_year\n\n    return avg_per_month\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Count from the front, it's the 8th shelf, and from the back, it's the 10th.\n    # If we add these two positions together and subtract 1 (because we counted the shelf itself from both sides),\n    # we get the total number of shelves.\n    total_shelves = 8 + 10 - 1\n    return total_shelves\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Represent the initial number of marbles for Anna, Betsy, and Charlene with variables\n    a, b, c = symbols('a b c')\n\n    # Three equations based on the problem statement\n    equation1 = Eq(a + b + c, 168)             # The total number of marbles\n    equation2 = Eq(a + 8, 2/14 * (a + b + c))  # Anna's marbles after transactions, with the final ratio\n    equation3 = Eq(b - 8 + 15, 5/14 * (a + b + c))  # Betsy's marbles after transactions, with the final ratio\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Retrieve Betsy's initial number of marbles from the solutions\n    return solutions[b]\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    past_combined_age = 10\n    years_since_past = 4\n    years_until_future = 2\n\n    current_combined_age = past_combined_age + (years_since_past * 2)\n    future_combined_age = current_combined_age + (years_until_future * 2)\n\n    return future_combined_age\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris' position in the row: 7th from the front, 4th from the back.\n    # The total number of people in the row is one less than the sum of these two positions (because we double-counted Chris)\n    total_in_row = (7 + 4 - 1)\n\n    # Chris' position in the column: 3rd from the left, 7th from the right.\n    # The total number of people in the column is one less than the sum of these two positions (because we double-counted Chris)\n    total_in_column = (3 + 7 - 1)\n\n    # The total number of students is the product of the number of students in each row and the number of rows.\n    total_students = total_in_row * total_in_column\n\n    return total_students\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorize the number 2016\n    factors = factorint(2016)\n    \n    # The prime factorization of 2016 is 2^5 * 3^2 * 7\n    # Children's ages must be products of these primes\n    # Candidates for ages (besides 1): 2, 3, 4, 6, 7, 8, 9, 12, 14, 18, 21, 28, 36, 42, 56, 63, 72, 84\n    # Since all children are under 10, we can only have 2, 3, 4, 6, 7, 8, 9\n    \n    # Start with the highest prime factor that is less than 10, which is 7\n    # Remaining product is 2016 / 7 = 288\n    # Factorize 288 to find the rest of the ages\n    remaining_factors = factorint(288)\n    \n    # The factorization of 288 is 2^5 * 3^2\n    # Using the smallest factors possible for the other ages, we have 2, 3, and 4\n    # 2 * 3 * 4 = 2^3 * 3 = 24, so we need another 2 to get to 288\n    # Therefore, the children's ages are 2, 3, 4, and 7\n    \n    # Calculate sum of ages\n    sum_of_ages = 2 + 3 + 4 + 7\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 1)  # Each boy has as many sisters as brothers\n    equation2 = Eq(boys/2, girls - 1)  # Each girl has half as many sisters as brothers\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    # let x be the number of 10p coins\n    total_amount = 1575  # in pence\n    ten_pence = x = symbols('x')\n    twenty_pence = 2 * x  # twice as many 20p as 10p coins\n    five_pence = x / 2  # half as many 5p as 10p coins\n\n    # equation - the sum in pence of all the coins equals total_amount\n    equation = Eq(10 * ten_pence + 20 * twenty_pence + 5 * five_pence, total_amount)\n\n    solutions = solve(equation, x)\n\n    # since we need the number of 20p coins, multiply the solution by 2\n    return solutions[0] * 2\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    original_mass = 60 / remaining_fraction\n\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the variable for speed\n    x = symbols('x')\n    \n    # Distance = Speed * Time\n    # Since the total time is 90 minutes, we convert it into hours by dividing by 60\n    # Thus, each segment of 30 minutes is 0.5 hours\n    \n    # Equation for the first 30 minutes\n    distance_1 = x * 0.5\n    \n    # Equation for the second 30 minutes\n    distance_2 = (x - 20) * 0.5\n    \n    # Equation for the last 30 minutes\n    distance_3 = (x + 10) * 0.5\n    \n    # Total distance equation\n    total_distance_eq = Eq(distance_1 + distance_2 + distance_3, 70)\n    \n    # Solving for x\n    solution = solve(total_distance_eq, x)\n    \n    # Assuming x > 0 since speed cannot be negative\n    return [sol for sol in solution if sol > 0][0]\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    # Each grandchild was supposed to get $70, so for four grandchildren that is $70 * 4\n    total_needed = 70 * 4\n    \n    # But she was short of $15, so we subtract that from the total needed\n    money_she_had = total_needed - 15\n    \n    return money_she_had\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number = base_10_number // 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.5\n    number_of_people = 6\n    tip_percentage = 10\n    total_bill_paid_with = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * (tip_percentage / 100)\n    total_paid = total_cost + total_tip\n\n    change_received = total_bill_paid_with - total_paid\n\n    return change_received\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    climb_day = 4\n    slide_night = 2\n    current_height = 0\n    day = 0\n\n    while current_height < total_distance:\n        day += 1\n        current_height += climb_day\n\n        if current_height >= total_distance:\n            break\n\n        current_height -= slide_night\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To ensure a win, Jason should aim to leave a multiple of 4 marbles for Belinda. \n    # If Jason takes out x marbles, (26 - x) must be a multiple of 4.\n\n    for x in range(1, 4):\n        if (26 - x) % 4 == 0:\n            return x\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total_sum = 0\n    n = 1\n    while True:\n        total_sum += 5 * n\n        if total_sum % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # As we want to minimize the number of apples for the child with the most,\n    # we should first distribute the apples so that each child gets a different\n    # number starting from 1.\n    # Let's start with the smallest distribution that satisfies 'at least one apple'\n    # and all the children get a different number of apples: 1, 2, 3, 4, ...\n    # We continue this pattern until the rest of the apples can be distributed.\n    apples = 27\n    children = 5\n    min_distribution = sum(range(1, children + 1))\n    \n    # The rest of the apples (27 - min_distribution) can be given to the child with the most\n    # while still maintaining that each child has a different number of apples.\n    rest_apples = apples - min_distribution\n    \n    # Assign the rest of the apples to the child with the most.\n    # This child is currently having 'children' number of apples, because we started from 1.\n    most_apples_child = children + rest_apples\n    \n    return most_apples_child\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    all_combinations = []\n    for comb in combinations(range(1, 25), 7):\n        if sum(comb) == 25:\n            all_combinations.append(comb)\n    return all_combinations\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability of the alcoholic being at any one of the bars is the same since he chooses at random.\n    # If he is not at two of the bars, he must be at the third bar.\n    # Hence the probability of being in the third bar is 100% given that he is not at the two other bars.\n    return 1\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration_in_days = 3 * 7  # 3 weeks * 7 days per week\n\n    end_date = start_date + timedelta(days=duration_in_days)\n    ans = end_date.strftime('%Y-%m-%d')  # Returns the date in YYYY-MM-DD format\n\n    return ans\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer = 1\n    while True:\n        if (volunteer * 4 + 5) % 7 == 0:\n            break\n        volunteer += 1\n    trees = volunteer * 4 + 5\n    return volunteer, trees\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let's call the total amount of grass G (which grows at a rate of R per week).\n    # From the problem's description, we have:\n    # 120 cows eat up G + 12R of grass in 12 weeks.\n    # 150 cows eat up G + 8R of grass in 8 weeks.\n\n    # We can set up the equations as follows:\n    # 120 cows * 12 weeks = G + 12R => 120 * 12 = G + 12R (Equation 1)\n    # 150 cows * 8 weeks = G + 8R => 150 * 8 = G + 8R (Equation 2)\n\n    # Subtracting Equation 2 from Equation 1 to eliminate G, gives us:\n    # (120 * 12) - (150 * 8) = (G + 12R) - (G + 8R)\n    # 120 * 12 - 150 * 8 = 4R\n    \n    # Solving for R:\n    R = (120 * 12 - 150 * 8) / 4\n\n    # Now to find G using Equation 2:\n    G = 150 * 8 - 8 * R\n\n    # We need to find the number of cows that can sustain for 6 weeks.\n    # Let's call this number X cows, then we can write:\n    # X cows * 6 weeks = G + 6R\n\n    # Solving for X cows, we get:\n    X = (G + 6 * R) / 6\n\n    # Now plug in the values of G and R.\n    ans = int(X)\n\n    return ans\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    current_term = 5\n    difference = 6\n    while current_term <= 41:\n        current_term += difference\n    return current_term\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    missing_number = symbols('missing_number')\n    equation = Eq(10 / missing_number, 14 / 21)\n    solution = solve(equation, missing_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sum = 0\n    for i in range(15, 0, -2):\n        sum = sum - i + (i - 2)\n    return sum\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Since the students are arranged in a square, the number of students is some square number.\n    # Let's denote the side of the boy's layer as b, and the side of the girl's layer as b - 2.\n    # The total number of boys will be b^2, and the total number of girls will be (b - 2)^2, considering one layer of boys and one layer of girls.\n    # We know that there are 55 more boys than girls, so: b^2 - (b - 2)^2 = 55\n    # Let's iterate over potential side lengths and check for which b the condition holds true.\n    \n    b = 1  # We start checking from the smallest possible square with side 1\n    while True:\n        boys = b * b\n        girls = (b - 2)**2 if b - 2 > 0 else 0  # There might be no girls if b is 1 or 2\n        difference = boys - girls\n        \n        # Check if the difference matches the condition\n        if difference == 55:\n            # If the condition is met, calculate the total number of students (boys + girls)\n            ans = boys + girls\n            return ans\n        \n        # Move to the next potential square side length\n        b += 1\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # Let the initial number of stickers in Bag A be x\n    # Then, the number of stickers in Bag B initially would be 270 - x\n    # After moving 56 stickers from A to B, Bag A has x - 56 stickers\n    # and Bag B has (270 - x) + 56 stickers\n\n    # According to the given ratio, we have the following proportion:\n    # (Bag B after moving) / (Bag A after moving) = 3/2\n    # => ((270 - x) + 56) / (x - 56) = 3/2\n    # => 2 * ((270 - x) + 56) = 3 * (x - 56)\n    # => 540 - 2x + 112 = 3x - 168\n    # => 540 + 112 + 168 = 3x + 2x\n    # => 820 = 5x\n    # => x = 820 / 5\n    # => x = 164\n\n    # Therefore, there were 164 stickers in Bag A at first.\n    ans = 164\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    difference = 28 - 25\n\n    first_term = last_term - (term_number - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(num):\n        factors = [1]\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                factors.append(i)\n                if i != num // i:\n                    factors.append(num // i)\n        return sum(factors)\n\n    n = 2  # start from the smallest non-trivial number\n    while True:\n        if sum_of_factors(n) == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    friends = 6\n    \n    sweets_for_friends = (total_sweets - for_sister) // friends\n    \n    return sweets_for_friends\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    total_muffins = 3998\n    lovelle_sold = 462\n    makayla_sold_fraction = 2 / 5\n\n    # Lovelle sold 462 muffins\n    equation1 = Eq(lovelle - lovelle_sold, makayla - makayla_sold_fraction * makayla)\n    # Together they had 3998 muffins\n    equation2 = Eq(lovelle + makayla, total_muffins)\n\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the total amount of money Irene had at first\n    x = symbols('x')\n    \n    # Equation representing the situation\n    equation = Eq((1/4)*x + (2/7)*x, 225)\n    \n    # Solve for 'x'\n    ans = solve(equation, x)[0]\n    \n    return ans\n\n# Call the function and store the answer\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # Using the maximum number of 1's possible will give us the most number of terms.\n    # Start with 1 and keep subtracting from the total until 0 is left\n    total = 30\n    return total\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # If Jane drinks x ml, Alex drinks 1.5x ml\n    # Together, they drink x + 1.5x = 2.5x ml which equals the total juice\n    # So, we can solve for x: 2.5x = 150\n    # x = 150 / 2.5\n    jane_drinks = total_juice / 2.5\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance // speed\n    aunt_lina_time = 5\n    return correct_time\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "from math import factorial\n\ndef partitions(n, k):\n    # Partitions function counts the number of ways to write n as the sum of k\n    # positive integers, but without regard to the order. Each partition must be different.\n    # Since the boxes are identical, any permutation of the same partition should be\n    # considered the same distribution of stickers.\n    # However, the standard partitioning function includes the number itself, which violates\n    # the condition that each box should have a different number of stickers. Therefore,\n    # we will have to iterate through partitions and exclude those that are not allowed.\n    \n    count = 0\n    for x1 in range(1, n - (k - 2)):\n        for x2 in range(x1 + 1, n - (k - 3)):\n            for x3 in range(x2 + 1, n - (k - 4)):\n                if x1 + x2 + x3 == n:\n                    count += 1\n    return count\n\ndef solution():\n    # clara wants to distribute 9 stickers into 3 boxes.\n    ans = partitions(9, 3)\n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    fraction = 1 / 4\n    whole_number = 16\n    missing_number = (fraction * whole_number) * 2\n\n    return missing_number\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(12, 4)  # Total ways to choose 4 from 12 students\n    ways_with_no_boys = comb(5, 4)  # Ways to choose 4 from only the 5 girls\n    ways_with_at_least_one_boy = total_ways - ways_with_no_boys\n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (5 * 15) / 3\n    return x\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let the original amount of money be x\n    # She spent 1/4 of it on a book, so she has 3/4x left\n    # Then she spent 2/5 of the remaining on a bag: 2/5 * 3/4x\n    # According to the problem, 2/5 * 3/4x = 60\n    # Solving for x will give us the original amount of money Bud had\n\n    # Calculate the fraction of the original amount that was spent on the bag\n    fraction_spent_on_bag = (2/5) * (3/4)\n\n    # Calculate the original amount of money\n    original_amount = 60 / fraction_spent_on_bag\n\n    return original_amount\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits_per_page = 0\n    total_digits = 0\n    page = 0\n\n    while total_digits < 157:\n        page += 1\n        if page < 10:\n            digits_per_page = 1\n        elif page < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n        total_digits += digits_per_page\n\n    if total_digits > 157:\n        page -= 1\n\n    return page\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # Iterate through odd numbers between 200 and 241\n        if number % 3 == 0 and number % 7 == 0:\n            return number  # Return the first number that meets the conditions\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_gaps = 8 - 1\n    gap_length = 1.1\n\n    total_length = (number_of_gaps * gap_length) + gap_length\n\n    return total_length\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 // 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance covered by peach trees\n    total_distance = (41 - 1) * 3  # 41 trees, 40 intervals\n    # Since there are lamp posts at both ends, we add one lamp post \n    # at the beginning to account for the last interval\n    num_lamp_posts = (total_distance // 8) + 1\n    return num_lamp_posts\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # To ensure we have 10 cards of the same color,\n    # select the maximum possible cards without having 10 of the same color first\n    # this selection would be 9 from each color (which is not possible for colors with fewer cards)\n    # and then add one more card to guarantee 10 cards of the same color.\n\n    # Maximum selection without 10 of the same color\n    max_selection_without_10 = (4 - 1) * 9\n    # Adding one more card guarantees 10 of the same color\n    cards_to_select = max_selection_without_10 + 1\n\n    return cards_to_select\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    possible_prices = []\n    for x in range(10):\n        for y in range(10):\n            price = int(\"\".join([\"\", str(x), \"679\", str(y)]))\n            if price % 72 == 0:\n                possible_prices.append(price // 72)\n    \n    # As we're looking for the unit price of the apparatus\n    # there should only be one solution to this problem.\n    ans = possible_prices[0] if len(possible_prices) == 1 else None\n    \n    return ans\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of candies, students in class A and class B\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B  # class A has twice the number of students as class B\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    eq1 = Eq(students_A * 4, candies - 20)\n    # If each student in class B gets 6 candies, there will be 16 candies left\n    eq2 = Eq(students_B * 6, candies + 16)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (candies, students_B))\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in meters per second\n    \n    time_to_pass = train_length / speed  # time taken to pass the pole in seconds\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0: # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    initial_amount = 24\n    spent_on_dvd = initial_amount / 3\n    remaining_after_dvd = initial_amount - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits_initial = 32\n    years = 3\n    \n    for year in range(years):\n        rabbits_initial *= 3  # Rabbits multiply 3 times\n        rabbits_initial //= 2  # Wolves eat half the rabbits\n    \n    return rabbits_initial\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    return (target_amount // amount_per_wash) + 1\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time to travel each mile \n    time_for_first_mile = 1 / 60  # in hours\n    time_for_second_mile = 1 / 30  # in hours\n\n    # Total distance travelled\n    total_distance = 1 + 1  # in miles\n\n    # Total time taken\n    total_time = time_for_first_mile + time_for_second_mile  # in hours\n\n    # Calculate the average speed \n    average_speed = total_distance / total_time  # in miles per hour\n\n    return average_speed\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    multiplier = 2\n    day = 4\n\n    candies_eaten_on_fourth_day = initial_candies * (multiplier ** (day - 1))\n\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        I, S, P = perm\n        if P == 0:  # Skip if P is 0 as we need a non-zero digit for PI\n            continue\n        IS = I * 10 + S\n        PI = P * 10 + I\n        if 4 * IS == PI:\n            return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_ages = 765\n    num_members = 9\n    # Since the ages are consecutive numbers, the middle one is the average\n    middle_age = total_ages / num_members\n    \n    return middle_age\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define 'n' for the natural number and 'a' for the first remainder\n    n, a = symbols('n a', integer=True)\n\n    # Setting up the equations based on the problem statement\n    eq1 = Eq(290 % n, a)\n    eq2 = Eq(235 % n, a + 2)\n    eq3 = Eq(200 % n, a + 5)\n\n    # Solve the system of equations with the additional constraints\n    sol = solve((eq1, eq2, eq3, n > 1, a >= 0), (n, a))\n\n    # Filter results for only valid natural numbers \n    valid_solutions = [s[0] for s in sol if s[0].is_Integer and s[0] > 1]\n\n    # Return the natural number since there should be only one valid solution\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n    \n    # equation for the sum of angles in a triangle\n    equation1 = Eq(angle1 + angle2, 90)\n    # equation for the relationship between the two unknown angles\n    equation2 = Eq(angle2, 2 * angle1)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    # we want the largest angle between the two unknown angles\n    return solutions[angle2]\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # The total number of spaces between the trees is one less than the number of trees\n    num_spaces = 79 - 1\n    \n    # Divide the total length of the road by the number of spaces to find the distance between each tree\n    distance_between_trees = 320 / num_spaces\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # Equation originates from the problem statement\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine_for_week = total_sunshine_for_six_days + sunday_sunshine\n    average_sunshine_per_day = total_sunshine_for_week / 7\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # running speed is twice walking speed\n\n    walking_time_to_school = 24  # min\n    total_distance = walking_speed * walking_time_to_school  # total distance to school in meters\n\n    half_distance = total_distance / 2  # half of the distance\n\n    walking_time_half = half_distance / walking_speed\n    running_time_half = half_distance / running_speed\n\n    total_time = walking_time_half + running_time_half\n\n    return total_time\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    leftover = total_length % cut_length\n\n    return leftover\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_who_saw_movie = boys * 0.50\n    girls_who_saw_movie = girls * 0.60\n    total_pupils_who_saw_movie = boys_who_saw_movie + girls_who_saw_movie\n    return int(total_pupils_who_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    \n    # Kim gave 1/3 of her savings to her mother\n    gave_mother = (1/3) * savings\n    \n    # Kim bought dresses for $177 and earrings for $129\n    spent_dresses_and_earrings = 177 + 129\n    \n    # The amount left is 1/2 of what she gave her mother\n    amount_left = (1/2) * gave_mother\n    \n    # Equation representing the final amount of savings Kim has after all expenses\n    equation = Eq(savings - gave_mother - spent_dresses_and_earrings, amount_left)\n    \n    # Solve the equation to find the total savings Kim had originally\n    total_savings = solve(equation, savings)[0]\n    \n    return total_savings\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    from sympy import divisors\n\n    def partitions(n, k):\n        \"\"\"\n        Count the ways to partition n items into k parts.\n        \"\"\"\n        # Adding k-1 because we allow empty baskets\n        d = divisors(n + k - 1)\n        count = 0\n        for i in range(len(d)//2):\n            if d[i] <= k:\n                count += 1\n        return count\n\n    ans = partitions(6, 3)\n    return ans\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    # Each team plays all others once, so it's a combination of 8 teams taken 2 at a time\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    ans = sum(n for n in range(1, 2019) if 2018 % n == 11)\n    return ans\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    days = 9\n    total_skirts = sum([(skirts_per_day * worker) for worker in range(1, days + 1)])\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):  # Since there are 8 animals, chickens can't be more than 8\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    numbers_in_range = range(30, 61)\n    matching_numbers = [number for number in numbers_in_range if (number - first_term) % difference == 0]\n    return matching_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    current_length, i, digit_length = 0, 1, 1\n\n    while True:\n        number_length = digit_length * 9 * (10 ** (digit_length - 1))\n        if current_length + number_length >= 2023:\n            break\n        current_length += number_length\n        digit_length += 1\n\n    remaining_digits = 2023 - current_length\n    number_index, digit_index = divmod(remaining_digits - 1, digit_length)\n\n    start_number = 10 ** (digit_length - 1)\n    specific_number = start_number + number_index\n        \n    ans = int(str(specific_number)[digit_index])\n\n    return ans\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 24  # Woody answered all but one of the questions\n    total_score = 66\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * 4 - incorrect_answers * 2\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost for 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    income = 150000\n    taxed_income_1 = 50000\n    tax_rate_1 = 0.08\n    initial_tax_paid = taxed_income_1 * tax_rate_1\n\n    remaining_income = income - taxed_income_1\n    additional_tax_paid = 15000 - initial_tax_paid\n\n    tax_rate_2 = additional_tax_paid / remaining_income\n\n    T = tax_rate_2 - tax_rate_1\n    T_percent = T * 100\n\n    return T_percent\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    # Number of days in January\n    days_in_january = 31\n    # Number of boys in the football club\n    boys_in_club = 432\n    # Applying the Pigeonhole Principle\n    # At least one pigeonhole (day) should have ceil(boys / days) boys\n    boys_per_day = -(-boys_in_club // days_in_january)  # Ceiling division\n    return boys_per_day\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    spacing = 5\n\n    # Total length of cars\n    total_cars_length = first_car_length + (other_cars_length * number_of_other_cars)\n\n    # Total length of spaces\n    total_spaces_length = spacing * (31 + 1)\n\n    # Total length of the train\n    total_length = total_cars_length + total_spaces_length\n\n    return total_length\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of pieces of candy Rachel has,\n    # and a represent the number of pieces of candy Alice has.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they would have the same number:\n    # r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces of candy, Rachel has 3 times as many as Alice:\n    # (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of pieces of candy they had originally\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    term7 = 105\n    term8 = 120\n    term9 = 135\n\n    common_difference = term8 - term7\n\n    term100 = term7 + (100 - 7) * common_difference\n\n    return term100\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # We have 3 choices (0, 2, 3) for the hundreds place but we cannot use 0,\n    # so we have only 2 choices for the first digit (2 or 3).\n    # We have 3 choices for the tens place since we can use 0 here, but it cannot be\n    # the same as the hundreds place, so after choosing the hundreds place we're left with 2 options.\n    # For the units place, we have only 1 choice left because it cannot be the same \n    # as tens or hundreds places.\n    \n    hundreds_place_options = 2  # can be either 2 or 3, but not 0\n    tens_place_options = 2      # one number is used in hundreds place, two options left\n    units_place_options = 1     # one number is left after choosing for hundreds and tens places\n    \n    total_combinations = (hundreds_place_options * tens_place_options * units_place_options)\n    return total_combinations\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    initial_chocolates = 5 * 10\n    given_chocolates = 23\n    remaining_chocolates = initial_chocolates - given_chocolates\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n    return int(total_sweets)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    last_week_length = current_length / (1 + growth_rate)\n    return last_week_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n\n    total_apples = num_piles * apples_per_pile\n\n    return total_apples\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuit_cost = 7 * 73  # cost in pence\n    total_cake_cost = 9 * 113    # cost in pence, since £1.13 = 113p\n    \n    total_cost_in_pence = total_biscuit_cost + total_cake_cost\n    total_cost_in_pounds = total_cost_in_pence / 100  # convert pence to pounds\n    \n    change = 20 - total_cost_in_pounds  # change from a £20 note\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    all_students = 'BCDEFG'\n    for perm in permutations(all_students):\n        for i in range(len(perm)-1):\n            # Insert D and E next to each other\n            if perm[i] == 'D' and perm[i+1] == 'E':\n                # Find possible positions to insert A between B and C\n                for j in range(len(perm)+1):\n                    new_perm = perm[:j] + ('A',) + perm[j:]\n                    if 'B' in new_perm and 'C' in new_perm:\n                        b_index = new_perm.index('B')\n                        c_index = new_perm.index('C')\n                        # Ensure A is somewhere between B and C\n                        if b_index < c_index and b_index < j < c_index:\n                            count += 1\n                        elif c_index < b_index and c_index < j < b_index:\n                            count += 1\n            elif perm[i] == 'E' and perm[i+1] == 'D':\n                # Find possible positions to insert A between B and C\n                for j in range(len(perm)+1):\n                    new_perm = perm[:j] + ('A',) + perm[j:]\n                    if 'B' in new_perm and 'C' in new_perm:\n                        b_index = new_perm.index('B')\n                        c_index = new_perm.index('C')\n                        # Ensure A is somewhere between B and C\n                        if b_index < c_index and b_index < j < c_index:\n                            count += 1\n                        elif c_index < b_index and c_index < j < b_index:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_gave = sam * 0.20\n    peter_after_sam_gave = peter + sam_gave\n    sam_after_sam_gave = sam - sam_gave\n\n    # In return, Peter gave 25% of his stickers to Sam\n    peter_gave = peter_after_sam_gave * 0.25\n    sam_final = sam_after_sam_gave + peter_gave\n    peter_final = peter_after_sam_gave - peter_gave\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Total time spent before lunch\n    total_time_spent = timedelta(minutes=10+20+20)\n\n    # Time when Benson reached home\n    home_reached_time = lunch_finished_time - total_time_spent\n\n    return home_reached_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40 PM\", \"%I:%M %p\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    \n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef permutation(n, r):\n    return factorial(n) // factorial(n - r)\n\ndef solution():\n    # The number of 3-digit numbers (permutations of 3 out of 4 digits, excluding combinations starting with 0)\n    count_3_digit = permutation(3, 3) * (4 - 1)  # 4 digits but one is 0\n\n    # The number of 4-digit numbers (permutations of all 4 digits)\n    count_4_digit = permutation(4, 4)\n\n    # Total number of 3-digit and 4-digit numbers\n    total_count = count_3_digit + count_4_digit\n\n    return total_count\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and \\\n           (number % 4 == 2) and \\\n           (number % 5 == 2) and \\\n           (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    numerator = (6 * 2) + 1  # (whole number * denominator) + numerator of fraction\n    denominator = 2  # denominator of fraction\n    \n    # Numerator and denominator of the fraction to divide by (basically 1/2)\n    num_to_divide = 1\n    denom_to_divide = 2\n    \n    # Division of fractions is equivalent to multiplying with the reciprocal\n    result_numerator = numerator * denom_to_divide\n    result_denominator = denominator * num_to_divide\n    \n    # Simplify the fraction to mixed number, or whole number if denominator is 1\n    if result_denominator == 1:\n        ans = result_numerator\n    else:\n        ans = result_numerator / result_denominator\n    return ans\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of crystals Jason had at first.\n    x = symbols('x')\n\n    # According to the word problem, here is the equation:\n    # Jason sold (1/2)*x + 10 crystals to Yvonne, then he mined 20 more, then he sold 14 to Cherlyn, and has 35 left.\n    equation = Eq((1/2) * x + 10 - 14 + 20, x - 35)\n\n    # Solving the equation\n    initial_crystals = solve(equation, x)\n\n    # Returning the number of crystals Jason had at first as a number (not a list)\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    # Function to calculate number of 9s in a number\n    def count_nines(n):\n        nines = 0\n        for digit in str(n):\n            if digit == '9':\n                nines += 1\n        return nines\n\n    # Initialize variables\n    pages = 0\n    total_nines = 0\n\n    # Loop until we find the total number of 9s in all the page numbers\n    while total_nines < 181:\n        pages += 1\n        total_nines += count_nines(pages)\n\n    # Subtract 1 since we exit the loop after exceeding the desired number of 9s\n    return pages - 1\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i != j and i != k and j != k and i != 0:\n                    three_digit_numbers.append(i * 100 + j * 10 + k)\n\n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # We need to find the greatest common divisor of the number of students in each class\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_pattern = 2\n    pattern_length = 1 + 2 + 2  # black + white + grey\n    grey_rabbits = 14\n\n    patterns = grey_rabbits // grey_pattern\n    remaining_grey_rabbits = grey_rabbits % grey_pattern\n\n    total_rabbits = patterns * pattern_length\n    if remaining_grey_rabbits > 0:\n        total_rabbits += pattern_length\n\n    return total_rabbits\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    count = 0\n    for perm in permutations(digits):\n        if perm[-1] in '24':  # Checks last digit is even\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = 0\n    for i in range(1, 181):\n        if 180 % i == 0 and i % 9 == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n    \n    amount = principal * ((1 + rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    total_price = price_per_box * 12\n    return total_price\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since we need at least 1 ball in each box, we first distribute 1 ball to each box.\n    balls_left = 10 - 7\n\n    # Now we have 3 identical balls to distribute in 7 different boxes.\n    # This is equivalent to putting 3 indistinguishable items into 7 distinguishable bins.\n    # This is a combinations with repetition problem which can be calculated using the formula:\n    # Comb(n + k - 1, k), where n is the number of bins and k is the number of items.\n    ans = comb(7 + balls_left - 1, balls_left)\n    \n    return ans\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # £2 is equal to 200 pence\n    single_price = 12  # cost of one sweet\n    three_pack_price = 30  # cost of three sweets\n\n    # First, let's find out how many three-packs we can buy\n    max_three_packs = total_pence // three_pack_price\n    remaining_pence_after_three_packs = total_pence % three_pack_price\n\n    # Now let's see how many additional single sweets can be bought with the remaining pence\n    additional_sweets = remaining_pence_after_three_packs // single_price\n\n    # Total sweets will be the sweets in three-packs plus the additional single sweets\n    total_sweets = (max_three_packs * 3) + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_7 = 7\n    may_age_10 = 10\n    kenny_age_diff = 2\n    \n    # Let x be the age of Kenny's younger brother when May is 10\n    x = symbols('x')\n    \n    # When May is 10, the sum of the ages of Kenny's younger brother and Kenny will be 3 times May's age\n    equation = Eq(x + (x + kenny_age_diff), 3 * may_age_10)\n    \n    # Solve for x\n    younger_brother_age_when_may_is_10 = solve(equation, x)[0]\n    \n    # Calculate Kenny's age when May is 10\n    kenny_age_when_may_is_10 = younger_brother_age_when_may_is_10 + kenny_age_diff\n    \n    # Kenny is currently 2 years older than his brother, so we find his current age\n    # by adding 2 years to his brother's current age.\n    # His brother's current age can be calculated by deducting 3 years from his age when May is 10\n    kenny_current_age = kenny_age_when_may_is_10 - (10 - may_age_7)\n    \n    # The difference in age between Kenny and May currently\n    kenny_may_age_diff_current = kenny_current_age - may_age_7\n    \n    return kenny_may_age_diff_current\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # In order to win, Felix must ensure that he always leaves a number\n    # of candies such that John is forced to leave either 1 or 2 candies\n    # for Felix in his next turn. To ensure victory, Felix should strive\n    # to leave 4k + 1 candies after his turn (where k is a non-negative integer).\n\n    # Since the total number of candies is 10, if Felix goes first and eats 1 candy,\n    # 9 candies will be left. No matter if John eats 1 or 2 candies next, Felix can\n    # always eat candies in such a way that the remaining candies are 4k + 1 after Felix's turn.\n    \n    # For example:\n    # If Felix eats 1 and then John eats 2, 7 candies will be left. Felix then eats 2 to leave 5 candies.\n    # If Felix eats 1 and then John eats 1, 8 candies will be left. Felix then eats 2 to leave 6 candies.\n    # John eats 1 or 2 candies, and Felix can eat so there are 5 candies left after his turn.\n    \n    # Felix should go first, and he should always eat in such a way that the remaining\n    # number of candies after his turn is 5 or 1. This will always allow him to win.\n    \n    # The winning strategy for Felix is:\n    # - Eat 1 candy when there are 10 candies.\n    # - Then eat 2 candies if John eats 2 candies, or eat 1 candy if John eats 1 candy,\n    #   making sure that he leaves 4k + 1 candies for John.\n\n    # Thus Felix should go first.\n    winner = \"Felix\"  # Felix should go first to win\n    strategy = \"Go first and eat 1 candy. Then match John's moves by eating 2 if he eats 2 and 1 if he eats 1, to leave 5 or 1 candies.\"\n\n    return winner, strategy\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    number_of_pipes = total_length / pipe_length\n\n    return int(number_of_pipes) if total_length % pipe_length == 0 else int(number_of_pipes) + 1\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the number of 5-litre pails needed to exactly fill the fish tank\n    # When using 5-litre pails, x pails will fill the tank exactly, and one additional pail will cause 4 litres overflow\n    # This means the capacity of the tank is x * 5 - 4\n\n    # Let y be the number of 3-litre pails needed to exactly fill the fish tank\n    # When using 3-litre pails, (y - 4) pails leaves the tank 4 pails short, which means it needs 4 more pails to fill\n    # This means the capacity of the tank is (y - 4) * 3 + 4 * 3\n\n    # Therefore we have the equation:\n    # x * 5 - 4 = (y - 4) * 3 + 4 * 3\n    # Simplify by expanding and rearranging we get:\n    # 5x - 4 = 3y - 12 + 12\n    # 5x - 4 = 3y\n\n    # Now we need to find values of x and y that satisfy this equation and are positive integers.\n    for x in range(1, 1000):  # We limit our search to a reasonable range\n        for y in range(1, 1000):\n            if 5 * x - 4 == 3 * y:\n                # Once we have a match we know that x 5-litre pails will fill the tank\n                # so the capacity of the tank in litres is x * 5\n                return x * 5\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    brother_total = sum(zoey_coins) / 2\n\n    for lost_coin in zoey_coins:\n        if sum(zoey_coins) - lost_coin == brother_total * 2:\n            return lost_coin\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        underline_times = 0\n        if number % 2 == 0:\n            underline_times += 1\n        if number % 3 == 0:\n            underline_times += 1\n        if number % 4 == 0:\n            underline_times -= 1  # Subtract 1 because multiples of 4 were already counted as multiples of 2\n        if underline_times == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages_with_3 = 0\n    page = 0\n    # Single digit pages: 3\n    if pages_with_3 < 28:\n        pages_with_3 += 1\n        page = 3\n    \n    # Double digit pages: 13, 23, 30-39 (11 pages)\n    if pages_with_3 + 11 <= 28:\n        pages_with_3 += 11\n        page = 39\n    \n    # Triple digit pages: 103-193 (Every ten pages, e.g., 103, 113, ..., 193)\n    while pages_with_3 + 10 <= 28:\n        page += 100\n        pages_with_3 += 10\n    \n    # Remaining pages within the hundred frame\n    while pages_with_3 < 28:\n        page += 1\n        if '3' in str(page):\n            pages_with_3 += str(page).count('3')\n\n    return page\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert to minutes\n    second_bus_time = 16 * 60 + 35  # Convert to minutes\n    late_time = 4  # minutes late for the first bus\n    \n    arrival_time = first_bus_time + late_time\n    wait_time = second_bus_time - arrival_time\n    \n    return wait_time\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "import math\n\ndef solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = math.ceil(workers / capacity)\n    return lorries_needed\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    # Number of spaces between trees is one less than the number of trees\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    total_students = 152\n    equation = Eq(boys - boys/11, girls - 5)\n    \n    solutions = solve((equation, Eq(boys + girls, total_students)), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Average of 4 numbers multiplied by 4 gives us the sum of those 4 numbers.\n    # We are given the average of 4 different groups each excluding one of the numbers.\n    sums = [36*4, 38*4, 39*4, 45*4, 49*4]\n    \n    # The sum of all 5 numbers should be constant, and is equal to the sum of the sums divided by 4.\n    total_sum = sum(sums) / 4\n\n    # Since we are dealing with whole numbers, we need to make sure the total sum is a whole number.\n    # If not, there's an inconsistency in the problem.\n    assert total_sum.is_integer()\n    \n    # Find the largest sum to get the four smallest numbers and by subtraction get the fifth largest number.\n    largest_sum = max(sums)\n    largest_number = total_sum - largest_sum\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days_average = 20\n    last_two_days = 60\n\n    next_four_days = next_four_days_average * 4\n    total_pages = first_three_days + next_four_days + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n    return total_people\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the given information:\n    # x ≡ 3 (mod 4)\n    # x ≡ 3 (mod 5)\n    # x ≡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # Find the three-digit numbers less than 200 satisfying the conditions\n    ans = [num for num in range(x, 200, 180) if 100 <= num < 200]\n\n    return ans\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Andrew's and Louise's ages\n    andrew, louise = symbols('andrew louise')\n\n    # Equation 1: Andrew is three times as old as Louise\n    equation1 = Eq(andrew, 3 * louise)\n    # Equation 2: The sum of their ages is 84\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solve the system of equations for Andrew and Louise's ages\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room_with_4_students_overflow = 6\n    room_with_5_students_empty = 1\n\n    # If 1 room is empty when 5 students per room, then when 4 students per room,\n    # there must be 5 extra students (since 4 students go to the previously empty room, and 1 must be the overflow)\n    total_students = room_with_4_students_overflow + room_with_5_students_empty * 5\n\n    return total_students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die2 != die3 and die1 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    # Initial ages\n    bill_age = 70\n    grandson_ages = [6, 12, 18]\n    \n    # Calculate the difference in years between Bill's current age and the sum of his grandsons' ages\n    age_difference = sum(grandson_ages) - bill_age\n    \n    # Since every year Bill ages one year and the sum of his grandsons' ages increases by three years,\n    # we need to divide the age difference by the difference in yearly aging rate (3 - 1 = 2) to find\n    # out after how many years Bill's age will equal the sum of his grandsons' ages\n    years_until_sum = age_difference // 2\n    \n    # Calculate Bill's age at that time\n    bill_future_age = bill_age + years_until_sum\n    \n    return bill_future_age\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    initial_people = 120\n    people_left = initial_people * (1/3)\n    people_remaining = initial_people - people_left\n    return int(people_remaining)\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_final = 6 * 10\n    number_removed = total_initial - total_final\n    return number_removed\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    next_arrival_time = lcm(15, 12, 8)\n    hours, minutes = divmod(next_arrival_time, 60)\n    \n    # Since the trains coincide at 10:00 am, we add the hours to 10\n    next_time_hour = 10 + hours\n    next_time_minute = minutes\n    \n    # Adjust for 24-hour clock if the hour goes beyond 24\n    next_time_hour = next_time_hour % 24\n    \n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    wrong_deduction = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_marks + wrong * wrong_deduction == total_marks:\n            return correct\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4*(20 - 6*x), 48)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page_number in range(1, 106):\n        count += str(page_number).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    common_factor = 3999 * 2014\n    value = (common_factor * 2014.2014 + 3999.3999 * common_factor) / 12.0012\n    ans = value\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30\n    length_train_meters = 360\n    \n    # speed = distance / time\n    speed_m_per_s = length_train_meters / time_seconds\n    \n    # Convert m/s to km/h: 1 m/s = 3.6 km/h\n    speed_km_per_h = speed_m_per_s * 3.6\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # According to the Inclusion-Exclusion Principle for Three Sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # We want to minimize |A ∩ B ∩ C|\n    # We know that |A ∪ B ∪ C| = total_students and cannot be more than that.\n    # Hence, we can simplify the above formula to find the minimum of |A ∩ B ∩ C| as follows:\n    # |A ∩ B ∩ C| = |A| + |B| + |C| - |A ∪ B ∪ C|\n    # Since |A ∪ B ∪ C| can't be more than total_students, replace |A ∪ B ∪ C| with total_students\n\n    min_all_three = swimmers + cyclists + table_tennis_players - total_students\n\n    return min_all_three\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    days = 0\n    \n    while (days * net_distance + day_distance) < total_distance:\n        days += 1\n        \n    # Add one more day for the day the snail climbs out of the burrow\n    days += 1\n    \n    return days\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Since number 10 is directly opposite to number 24, they are halfway around the circle from each other.\n    # This means that the number of people N should satisfy the condition:\n    # N / 2 = (24 - 10) / 2\n    # Solve for N\n    N = 2 * (24 - 10)\n    \n    return N\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Since we want to ensure that we have 4 marbles of different colors,\n    # we need to consider the worst-case scenario following the pigeonhole principle.\n    # The worst case is that we take out all marbles of one color before getting a marble of a different color.\n\n    # The maximum number of marbles we might pick of the same color is for red,\n    # because we have the largest number of red marbles (12).\n\n    # If we pick out all red marbles, and then continue with blue, yellow, and the other red,\n    # we only need to pick one of each to ensure we have 4 marbles of different colors.\n\n    # So we pick out 12 red, 1 blue, 1 yellow, 1 red (from the \"other\" set of red marbles).\n    ans = 12 + 1 + 1 + 1\n\n    return ans \n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "from math import lcm\n\ndef solution():\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    books_and_stationery = 0.20 * total_money\n    # Let the money spent on transport be x, then food expenditure is 3x\n    # Savings is food expenditure - 6, so savings = 3x - 6\n    # Total expenditure = books_and_stationery + transport + food + savings\n    # Therefore, 80 = books_and_stationery + x + 3x + (3x - 6)\n    # Solve for x: 80 = (books_and_stationery + 7x - 6)\n    x = (total_money - books_and_stationery + 6) / 7\n\n    savings = 3 * x - 6\n    savings_percent = (savings / total_money) * 100\n    return savings_percent\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for num in range(10, 100): # 2-digit numbers range from 10 to 99\n        if 75 % num == 0 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless wrote 41 instead of 14\n    careless_subtrahend = 41\n    actual_subtrahend = 14\n    \n    # She got 50 as the incorrect answer\n    careless_difference = 50\n    \n    # Let's find the minuend\n    minuend = careless_difference + careless_subtrahend\n    \n    # Now we find the correct difference\n    correct_difference = minuend - actual_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40, 36, 32, 28, 24]) - sum([38, 34, 30, 26, 22])\n    return ans\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n\n    # Numbers starting with 3, 4 or 5 and four other distinct digits:\n    for first in [3, 4, 5]:\n        for second in range(1, 7):\n            if first != second:\n                for third in range(1, 7):\n                    if third != first and third != second:\n                        for fourth in range(1, 7):\n                            if fourth != first and fourth != second and fourth != third:\n                                for fifth in range(1, 7):\n                                    if fifth != first and fifth != second and fifth != third and fifth != fourth:\n                                        count += 1\n\n    # Numbers in the 5000s that start with 51 and three other distinct digits:\n    for third in range(1, 7):\n        if third != 5 and third != 1:\n            for fourth in range(1, 7):\n                if fourth != 5 and fourth != 1 and fourth != third:\n                    for fifth in range(1, 7):\n                        if fifth != 5 and fifth != 1 and fifth != third and fifth != fourth:\n                            count += 1\n\n    return count\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_each_ate = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_eaten = justin_ate + sisters_each_ate * sisters_count\n    initial_apples = total_eaten + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "网络故障，请重试"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    part1 = (3.2 + 6.77 + 8.88)\n    part2 = (6.77 + 8.88 + 6.3)\n    part3 = (3.2 + 6.77 + 8.88 + 6.3)\n    part4 = (6.77 + 8.88)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # Given equation is 3/x * 56 = 21\n    # Rearrange to find the value of x\n    x = 3 * 56 / 21\n    return x\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    total_seconds = seconds_per_minute * minutes\n    return total_seconds\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    soldiers = 31\n    # Let original number of columns and rows be n\n    # After adding 1 row and 1 column it becomes (n+1)\n    # Original square had n*n soldiers\n    # New formation has (n+1)*(n+1) soldiers\n    # Difference is 31 soldiers which translates to n*n + n + n + 1 = n*n + 2n + 1\n    # Thus 2n + 1 = 31, solving for n we get\n    n = (soldiers - 1) // 2\n    total = (n + 1) * (n + 1)\n    return total\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # in minutes\n    total_time_available = 80  # 1 hour and 20 minutes converted to minutes\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    min_apples_for_others = 1\n    other_children = 5\n    max_apples_for_Ann = total_apples - (min_apples_for_others * other_children)\n\n    return max_apples_for_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all 7-digit permutations of the given digits\n    perms = permutations('1356789')\n    for p in perms:\n        num1 = int(''.join(p))\n        # Calculate the second and third numbers based on the given conditions\n        num2 = 2 * num1\n        num3 = 4 * num1\n        # Convert numbers to sets of digits\n        set_num1 = set(str(num1))\n        set_num2 = set(str(num2))\n        set_num3 = set(str(num3))\n        # Ensure that all digits are used exactly once across the three numbers\n        if len(set_num1 | set_num2 | set_num3) == 7:\n            if set_num1 & set_num2 == set() and set_num1 & set_num3 == set() and set_num2 & set_num3 == set():\n                return num3\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with pants (shirt, pants, and shoes)\n    pants_combinations = shirts * pants * shoes\n\n    # Combinations with dress (dress with either shoes or heels)\n    dress_combinations = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = pants_combinations + dress_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for j in range(1, 101) for i in range(1, j+1))\n    return ans\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n\n    # The highest common factor is 75 = 3^1 * 5^2\n    # Each number has to be of the form 3^a * 5^b where a >= 1 and b >= 2\n    \n    # Initialize the sum of M and N\n    sum_of_M_and_N = 0\n    \n    # Find all combinations for M with 12 factors and N with 10 factors\n    # The number of factors for a number 3^a * 5^b is (a+1)(b+1)\n    for a_M in range(1, 12): # a_M must be less than 12 because 12 factors include a=0 combination.\n        for b_M in range(2, 12): # b_M must be greater than or equal to 2 because the lowest common factor is 5^2\n            if (a_M + 1) * (b_M + 1) == 12:\n                M = 3 ** a_M * 5 ** b_M\n                for a_N in range(1, 10): # a_N must be less than 10 because 10 factors include a=0 combination.\n                    for b_N in range(2, 10): # b_N must be greater than or equal to 2 for the same reason as b_M.\n                        if (a_N + 1) * (b_N + 1) == 10:\n                            N = 3 ** a_N * 5 ** b_N\n                            # Check if they share the highest common factor of 75\n                            if divisors(M)[-2] == 75 and divisors(N)[-2] == 75:\n                                sum_of_M_and_N = M + N\n                                return sum_of_M_and_N\n    return sum_of_M_and_N\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert total mass to grams\n    total_mass_g += total_mass_kg * 1000\n    # Convert soil mass to grams\n    soil_mass_g += soil_mass_kg * 1000\n    \n    # Calculate mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    # Calculate difference between the mass of the pack of soil and sand\n    difference = soil_mass_g - sand_mass_g\n    \n    # Convert the difference back to kg and g\n    difference_kg = difference // 1000  # integer division to get kg\n    difference_g = difference % 1000    # modulus to get remainder in g\n    \n    # Return the difference formatted as a tuple (kg, g)\n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let's assume James has J buttons and Nina has N buttons.\n    # According to the problem, we have two equations:\n    # Equation 1: J + N = 22\n    # Equation 2: After Nina gives 4 buttons to James, they have the same number:\n    # => N - 4 = J + 4\n    # Now we can solve these two equations to find the value of N.\n\n    # From Equation 2:\n    # N - J = 4 + 4\n    # N - J = 8\n    \n    # Let's substitute the value of J from Equation 1 to Equation 2:\n    # (22 - J) - J = 8\n    # 22 - 2J = 8\n    # 2J = 22 - 8\n    # 2J = 14\n    # J = 14 / 2\n    # J = 7\n\n    # Now we substitute the value of J in Equation 1 to find N\n    # J + N = 22\n    # 7 + N = 22\n    # N = 22 - 7\n    # N = 15\n\n    # Nina originally has 15 buttons.\n    return 15\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 4 - incorrect * 2\n        if score == 29:\n            return correct\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = '12345'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    complete_patterns = 52 // len(pattern)\n    remaining_digits = 52 % len(pattern)\n    \n    total_sum = complete_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    kites = total_paper // paper_per_kite\n\n    return int(kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_length = 320  # in meters\n\n    # The intervals are between the trees, so there is one less interval than the number of trees\n    number_of_intervals = total_trees - 1\n\n    # Distance between each tree is total length divided by the number of intervals\n    distance_between_each_tree = total_length / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    total_length = 10 + 4/5  # convert to improper fraction\n    short_rod_length = 3/10\n\n    num_short_rods = total_length // short_rod_length\n\n    return int(num_short_rods)\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost_total = 2800\n    deal_cost_each = deal_cost_total / 30\n    cost_without_deal = 20 * single_laptop_cost\n    savings = cost_without_deal - (20 * deal_cost_each)\n    return savings\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen to Oscar: 10 fish for 4 rabbits => ratio of fish to rabbits: 10/4\n    fish_to_rabbits_ratio = 10 / 4\n    \n    # Oscar to Dennis: 5 rabbits for 6 packs of wheat => ratio of rabbits to wheat: 5/6\n    rabbits_to_wheat_ratio = 5 / 6\n    \n    # Simplifying the continued ratio for fish to wheat\n    # Combined ratio: (fish_to_rabbits_ratio) * (rabbits_to_wheat_ratio) = fish_to_wheat_ratio\n    fish_to_wheat_ratio = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n    \n    # Owen to Dennis: How many fish for 12 packs of wheat?\n    # Using the combined ratio to find out the number of fish for 1 pack of wheat\n    fish_for_one_pack_wheat = fish_to_wheat_ratio\n    \n    # Therefore, for 12 packs of wheat:\n    fish_for_twelve_packs_wheat = fish_for_one_pack_wheat * 12\n    \n    return fish_for_twelve_packs_wheat\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    total_earnings = hourly_wage * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    # Jenny subtracted 26 from a certain number to obtain -14\n    # This means that the certain number - 26 = -14\n    # Rearranging the equation to isolate the certain number\n    certain_number = -14 + 26\n    \n    # The number Jenny should have obtained is the certain number plus 26\n    correct_result = certain_number + 26\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances: 6 (S)\n    # Total dancing performances: 4 (D)\n\n    # Since one S must be between every 2 Ds, \n    # consider the 3 'DS' blocks as individual units first. (DSDSDSD)\n    # We can slot the remaining S around them: _DS_D_S_D_SD_\n\n    # Now we have 7 positions to place 3 S: (7 choose 3)\n    sing_positions = factorial(7) // (factorial(3) * factorial(7 - 3))\n\n    # These initial 3 Ds and 3 Ss can be arranged in any order (permute)\n    # 3 Ss can be permuted in 3! ways\n    # 4 Ds can be permuted in 4! ways (3 in DS blocks and 1 remaining)\n    sing_permutes = factorial(3)\n    dance_permutes = factorial(4)\n\n    # Multiply all possible permutations\n    total_ways = sing_positions * sing_permutes * dance_permutes\n\n    return total_ways\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n    \n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    number = 80\n    \n    ans = (percentage / 100) * number\n    \n    return ans\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3 / 8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it is the first digit of a two-digit number\n        for b in range(10):  # 'b' can range from 0 to 9\n            if 10 * a + b + 10 * b + a + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Possible scores for the home team at half-time range from 0 to 3 (since they scored 3 in the end)\n    for home_half_time in range(4):\n        # Possible scores for the away team at half-time range from 0 to 2 (since they scored 2 in the end)\n        for away_half_time in range(3):\n            # Make sure half time scores do not exceed final scores\n            if home_half_time <= 3 and away_half_time <= 2:\n                # If home team's half time score is less than or equal to final score\n                # and away team's half time score is less than or equal to final score\n                # we have a valid half time score\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    emma_cookies = 1002 / (5 + 1)\n    return int(emma_cookies)\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    ans = comb(6, 2)\n    return ans\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since the number of students must form a rectangular array,\n    # we are essentially looking for two factors of the total number\n    # such that Mike is 2nd in line from every direction.\n    # This means, the total number of students - 1 (excluding Mike)\n    # must be divisible by both factors - 1 (since Mike is always 2nd).\n    \n    # Start with a reasonable upper limit for the classroom size,\n    # assuming no more than 1000 students in a class.\n    for total_students in range(2, 1001):\n        # Subtract Mike to exclude his position\n        remaining_students = total_students - 1\n        \n        # Check every possible pair of factors\n        for i in range(2, int(remaining_students**0.5) + 1):\n            if remaining_students % i == 0:\n                j = remaining_students // i\n                # Check if Mike could be 2nd in line with these dimensions\n                # If both dimensions minus 1 are exactly the factors we are testing\n                if (i + 1) * (j + 1) == total_students:\n                    return total_students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percent = 85\n    total_amount = 400\n\n    result = (percent / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    # Let x = the number of pupils who cannot swim\n    # Since there's an equal number of boys and girls who cannot swim, we have:\n    # x/2 girls cannot swim, x/2 boys cannot swim\n    \n    # The fractions of those who can swim:\n    fraction_girls_can_swim = 3 / 8\n    fraction_boys_can_swim = 3 / 5\n    \n    # The number of girls and boys who can swim:\n    # girls * fraction_girls_can_swim = girls - x/2\n    # boys * fraction_boys_can_swim = boys - x/2\n    \n    # Since 20 pupils cannot swim:\n    x = 20\n    \n    # Setting up the equations\n    equation1 = Eq(girls * fraction_girls_can_swim, girls - x/2)\n    equation2 = Eq(boys * fraction_boys_can_swim, boys - x/2)\n    \n    # Since there are equal numbers of girls and boys:\n    equation3 = Eq(girls, boys)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (girls, boys))\n    \n    # Find the total number of pupils in the class\n    total_pupils = solutions[girls] + solutions[boys]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3/5\n    total_sweets = bud_sweets / (1 - pip_fraction)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    percent_of_40 = (result / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    rabbits_in_big = big_mushroom_houses * 4\n\n    rabbits_in_small = total_rabbits - rabbits_in_big\n    rabbits_per_small_house = rabbits_in_small / small_mushroom_houses\n\n    return int(rabbits_per_small_house)\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_desired = 5\n\n    cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    total_cost_for_5_cups = cost_per_cup * number_of_cups_desired\n\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:  # even number, we add the difference of squares\n            ans += (i ** 2) - ((i - 1) ** 2)\n        else:  # odd number, we subtract the difference of squares\n            ans -= (i ** 2) - ((i - 1) ** 2)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # Base case: there's one way to stand still at the bottom\n\n    for step in range(1, 7):\n        ways[step] = ways[step - 1]  # One step\n        if step - 2 >= 0:\n            ways[step] += ways[step - 2]  # Two steps\n        if step - 3 >= 0:\n            ways[step] += ways[step - 3]  # Three steps\n\n    return ways[6]\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * num_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    for i in range(1, sum_of_numbers + 1):\n        if 2 * 3 * i == sum_of_numbers:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = (20.2 * 3.83) + (2.02 * 143.7) + (18.2 * 79.8)\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_of_ship = 33\n    speed_of_current = 3\n    speed_upstream = speed_of_ship - speed_of_current\n    distance = 150\n\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current ages of Abigail (A) and Ryan (R)\n    A, R = symbols('A R')\n\n    # A is 3 times R\n    equation1 = Eq(A, 3 * R)\n    # In 6 years, A will be 42\n    equation2 = Eq(A + 6, 42)\n\n    # Solve the equations for A and R\n    solutions = solve((equation1, equation2), (A, R))\n\n    # Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[R] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    start_number = 3.5\n    end_number = 6.9\n\n    ans = (start_number + end_number) / 2\n\n    return ans\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = 56 // 4 * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = 92 // 4 * 4\n\n    num_multiples = (last_multiple - first_multiple) / 4 + 1\n\n    return int(num_multiples)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    sum = 0\n    sign = 1\n    for number in range(60, 0, -1):\n        sum += sign * number\n        if number % 2 == 0:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # The ones digit of a number raised to a power follows a cycle.\n    # For 9, this cycle is: 9^1 -> 9, 9^2 -> 1, 9^3 -> 9, 9^4 -> 1, ...\n    # The cycle length is 2.\n    \n    # We can find the position in the cycle by taking the exponent modulo the cycle length.\n    # For 999^99, we are only interested in the last digit of 9 raised to the 99th power.\n    # Since 99 is odd, we can conclude that the ones digit is the same as 9^1, which is 9.\n    \n    ones_digit = 9\n    return ones_digit\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n    age_in_6_years = age_now + 6\n    equation = Eq(age_in_6_years, 3 * age_now)\n\n    claire_age_now = solve(equation, age_now)[0]\n    claire_age_in_2_years = claire_age_now + 2\n\n    return claire_age_in_2_years\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let t be the time the journey should have taken in minutes\n    # We know the journey took 11/12 of the time it should have done\n    \n    # The train arrived 5 minutes late but had left 15 minutes late\n    # This means the train took 10 minutes less than it should have\n    # (because it made up 15 - 5 = 10 minutes during the journey)\n    \n    # Therefore, the reduced journey time is (11/12)*t\n    # And we know that (11/12)*t = t - 10\n    # Solving for t gives us t - (11/12)*t = 10\n    \n    # Multiply through by 12 to avoid fractions\n    # 12*t - 11*t = 120\n    # t = 120\n    \n    # The original journey should have taken 120 minutes\n    return 120\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n\n    missing_number_product = total_product - known_product\n    missing_number = missing_number_product / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # The worst case for drawing 4 different coloured marbles involves:\n    # - Picking all marbles of the colour with the most quantity, except one. Because if we draw all, we'd have 4 different colours already.\n    # In this case, the largest quantity is green with 7 marbles, so we pick 6 green marbles.\n    # - Then drawing all marbles of the next highest quantity.\n    # The next highest quantity is blue with 6 marbles, so we draw all 6 blue marbles.\n    # - After that, draw all marbles of the next colour.\n    # This would be the red marbles, of which there are 4, so we draw all 4 red marbles.\n    # - At this point, we have 6 green, 6 blue, and 4 red marbles. The next marble we draw has to be orange.\n    # Because there are only 2 orange marbles, we must draw both to ensure we have 4 different colours.\n\n    # Therefore, the number of marbles Jane must draw is:\n    marbles_drawn = 6 + 6 + 4 + 1  # We add only 1 because we are asked about ensuring 4 different colors.\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # Assuming Susan uses the maximum denomination available which is 2 pounds (200 pence)\n    # to minimize the number of coins exchanged.\n    # The bus fare is 44 pence, so she needs 156 pence (200 - 44) in change.\n    fare = 44\n    \n    # Coins denominations in pence \n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Susan gives one coin of 200 pence\n    susan_coins = 1\n    change = denominations[0] - fare\n    coins_handed = 0  # Counter for coins exchanged\n    \n    # Calculate the smallest number of coins for the change\n    for coin in denominations:\n        while change >= coin:\n            change -= coin\n            coins_handed += 1\n\n    # Total coins exchanged is the sum of Susan's coin and the driver's change\n    total_coins = susan_coins + coins_handed\n\n    return total_coins\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # This is a problem of distributing n identical items to r distinct groups such that\n    # each group gets at least one item. The generalized formula is C(n - 1, r - 1),\n    # where n is the total number of items and r is the number of groups.\n\n    n = 19  # Total number of books\n    r = 4   # Number of kids\n    # Using the combinations formula C(n, k) = n! / (k! * (n - k)!)\n    ans = factorial(n - 1) // (factorial(r - 1) * factorial((n - 1) - (r - 1)))\n    return ans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b, c = 2, 3, 5  # Initialize the first three terms of the sequence\n    while c < 100:  # Loop until the first three digit number is found\n        a, b, c = b, c, b+c  # Update the terms following the sequence pattern\n    return c  # Return the first three digit number\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    daily_climb = 3\n    nightly_slide = 1\n    net_distance = daily_climb - nightly_slide\n    days = 0\n    \n    # Since the snail gets out on the last day without sliding back, we subtract the daily climb first.\n    remaining_distance = total_distance - daily_climb\n\n    # Number of full days with both climb and slide until remaining distance becomes <=0\n    days = remaining_distance // net_distance\n    \n    # If there is some distance still left after full days, it will get out on the next day.\n    if remaining_distance % net_distance > 0:\n        days += 1\n    \n    # Adding the last day when the snail climbs out\n    days += 1\n\n    return days\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    # b: number of motorbikes (each motorbike has 2 wheels)\n    # t: number of tricycles (each tricycle has 3 wheels)\n    # v: number of vans (each van has 4 wheels)\n    b, t, v = symbols('b t v')\n\n    # Set up equations based on the problem statement\n    # Total wheels\n    equation1 = Eq(2 * b + 3 * t + 4 * v, 101)\n    # Motorbikes + Vans wheels (35) more than Tricycle wheels\n    equation2 = Eq(2 * b + 4 * v - 3 * t, 35)\n    # Tricycles + Vans wheels (13) more than Motorbike wheels\n    equation3 = Eq(3 * t + 4 * v - 2 * b, 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (b, t, v))\n\n    # Calculate the difference between the number of motorbikes and vans\n    motorbikes_more_than_vans = solutions[b] - solutions[v]\n\n    return motorbikes_more_than_vans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 0\n    for case1 in range(1, 6):\n        for case2 in range(1, 6):\n            case3 = 6 - case1 - case2\n            if case3 > 0:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, 5 + C)\n    equation3 = Eq(C + D, A)\n    equation4 = Eq(D, 41)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = 0\n    for i in range(2, 41, 2):\n        ans += i**2 - (i - 2)**2\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    desired_cups = 30\n\n    gallons_needed = desired_cups / cups_per_gallon\n\n    return gallons_needed\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Since Pip is directly in front of Bud, they together count as 1\n    pip_and_bud = 1\n\n    # Total people in line is the sum of all three parts\n    total_people = people_in_front_of_pip + pip_and_bud + people_behind_bud\n\n    return total_people\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    existing_numbers = [4, 5, 6, 9, 3, 9]\n    total_existing = sum(existing_numbers)\n    number_of_numbers = 8\n    average = 6\n\n    # Calculate the total sum of all numbers using the average\n    total_sum = average * number_of_numbers\n    \n    # Calculate the sum of p and q\n    p_q_sum = total_sum - total_existing\n    \n    # The highest value currently is 9, and the lowest value is 3\n    highest_value = 9\n    lowest_value = 3\n    value_difference = highest_value - lowest_value\n    \n    # As per the condition, the difference between the highest and lowest value is 6\n    # and since q is larger than p, we start by finding the smallest p that fits the condition.\n    p = lowest_value + 6 - value_difference\n    \n    # Now calculate q\n    q = p_q_sum - p\n\n    return q\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(3, 7), (7, 11), (9, 13)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # Number of students who like football is 3 times those who like both\n    football = 3 * x\n\n    # Number of students who like basketball is 4 times those who like both\n    basketball = 4 * x\n\n    # Equation based on the inclusion-exclusion principle\n    equation = Eq(football + basketball - x, 36)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    count = 0\n    digits = [int(d) for d in str(year)] + [0, 1, 2]\n    digit_perms = set(permutations(digits, 8))\n    for perm in digit_perms:\n        month = perm[4] * 10 + perm[5]\n        day = perm[6] * 10 + perm[7]\n        if perm[0] != 0 and 1 <= month <= 12:\n            # Check if the day is valid\n            if month == 2:\n                is_leap_year = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n                if (is_leap_year and 1 <= day <= 29) or (not is_leap_year and 1 <= day <= 28):\n                    count += 1\n            elif month in [4, 6, 9, 11] and 1 <= day <= 30:\n                count += 1\n            elif month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:\n                count += 1\n    return count\n\ndef solution():\n    return count_valid_dates(2014)\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_mult(a, b):\n        return ((a * b + 16) / (a + b))**2\n\n    result = custom_mult(custom_mult(custom_mult(1, 2), 3), 4)\n    result = custom_mult(result, 5)\n    \n    return int(result)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Using the Pigeonhole Principle\n    max_cakes_in_layer = (total_cakes + layers - 1) // layers\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    paid_gst = 0.91\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # 252 can be factored into its prime factors: 2^2 * 3^2 * 7\n    # The total number of factors can be calculated by (a+1)(b+1)(c+1)... for primes p1^a * p2^b * p3^c *...\n    factors_2 = 2 + 1  # There are 2^2, so 2+1\n    factors_3 = 2 + 1  # There are 3^2, so 2+1\n    factors_7 = 1 + 1  # There is 7^1, so 1+1\n\n    total_factors = factors_2 * factors_3 * factors_7\n\n    return total_factors\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam\n    speed_adam = 60  # in km/h\n    # Speed of Jacob\n    speed_jacob = 80  # in km/h\n\n    # Time for Jacob to reach home\n    time_jacob = 3  # in hours\n    # Additional time for Adam to reach home\n    additional_time_adam = 30 / 60  # converting 30 minutes to hours\n\n    # Distance covered by Adam when Jacob reaches home\n    distance_adam = speed_adam * time_jacob\n    # Total distance covered by Adam to reach home\n    total_distance_adam = distance_adam + (speed_adam * additional_time_adam)\n    \n    # Distance covered by Jacob to reach home\n    distance_jacob = speed_jacob * time_jacob\n\n    # The total distance between their homes\n    total_distance = total_distance_adam + distance_jacob\n\n    return total_distance\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Maximum number of marbles Lucy can take without guaranteeing 2 of the same color is 3\n    # By taking 4 marbles, Lucy is guaranteed to have at least 2 marbles of the same color\n    return 4\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time_minutes = 60  # Total exercise time in minutes (1 hour)\n    cycling_time_fraction = 1/3\n\n    cycling_time_minutes = total_exercise_time_minutes * cycling_time_fraction\n    jogging_time_minutes = total_exercise_time_minutes - cycling_time_minutes\n\n    return jogging_time_minutes\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Converting all weights to grams.\n    weight1_kg = 2.49\n    weight1_g = weight1_kg * 1000\n    \n    weight2_g = 670\n    \n    weight3_kg = 3\n    weight3_extra_g = 80\n    weight3_g = weight3_kg * 1000 + weight3_extra_g\n    \n    # Adding the weights together.\n    total_weight_g = weight1_g + weight2_g + weight3_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Justin's current age\n    justin_age = symbols('justin_age')\n\n    # Create the equation based on the problem\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n\n    # Solve the equation\n    solution = solve(equation, justin_age)\n\n    # Return Justin's current age\n    return solution[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 18 - 22  # Calculate the common difference between terms\n    last_term = 2  # Last known term in the sequence\n    next_term = last_term + difference  # Calculate the next term using the common difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    max_apples = 30\n    num_children = 6\n    while True:\n        apples_seq = [1] * num_children\n        apples_seq[-1] = max_apples - sum(apples_seq[:-1])\n        if len(set(apples_seq)) == len(apples_seq):\n            return max(apples_seq)\n        max_apples -= 1\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n\n    # Calculate the least common multiple (LCM) of the three lap times\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n    \n    def lcm_of_three(a, b, c):\n        return lcm(a, lcm(b, c))\n\n    # Time taken by Ashley, Ben, and Charlie to complete a lap\n    ashley_lap_time = 56\n    ben_lap_time = 80\n    charlie_lap_time = 105\n\n    # Calculate the time when they meet at the starting point\n    meet_time_seconds = lcm_of_three(ashley_lap_time, ben_lap_time, charlie_lap_time)\n\n    # Calculate the hours and minutes when they meet\n    meet_time_minutes, seconds = divmod(meet_time_seconds, 60)\n    hours, minutes = divmod(meet_time_minutes, 60)\n\n    # Starting time is 10:00 am, so we add the hours and minutes\n    start_hour = 10\n    time_when_meet_hour = start_hour + hours\n    time_when_meet_minute = minutes\n    \n    # Adjust for 24-hour format if needed\n    time_when_meet_hour = time_when_meet_hour % 24\n\n    # Format the time when they meet\n    meet_time = f\"{time_when_meet_hour:02d}:{time_when_meet_minute:02d}\"\n\n    return meet_time\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_mileage = 72.8\n    tom_more_gallons = 6 + 3/4\n\n    sam_gallons = distance / sam_mileage\n    tom_gallons = sam_gallons + tom_more_gallons\n    tom_mileage = distance / tom_gallons\n\n    return tom_mileage\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # We can solve this problem using the Pigeonhole Principle\n    # Bart needs to take out as many M&Ms as possible without fulfilling his condition\n    # which is taking out as many as possible of the same color.\n    \n    # We know there are 3 colors of M&Ms\n    # So, if Bart takes one M&M from each color, he is sure to get different colors\n    # But to make sure he has 2 different colors, he can take out:\n    \n    # 3 reds (maximum number of red he could draw without drawing another color) +\n    # 4 yellows (all the yellows he could draw without drawing another color) +\n    # 1 (the next draw has to be different because no more red or yellows are left) =\n    # 3 + 4 + 1 = 8\n    \n    # Therefore, Bart needs to take out at least 8 M&Ms to guarantee 2 of different colours.\n    return 8\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum(i**2 for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # The given numbers form an arithmetic sequence\n    # The common difference can be determined by subtracting consecutive terms\n    difference = 120 - 105  # Difference between the 8th and 7th term\n\n    # To find the first term, we subtract (7 - 1) times the difference from the 7th term\n    first_term = 105 - (7 - 1) * difference  # 7th term is indexed as 6th in 0-indexing\n\n    # Once we have the first term, we can find the 100th term by adding the difference 99 times\n    hundredth_term = first_term + (100 - 1) * difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert to base 10, perform the addition, then convert back to base 7\n    base10_sum = int('45', 7) + int('66', 7)\n    if base10_sum == 0:\n        return '0'\n    digits = []\n    while base10_sum:\n        digits.append(str(base10_sum % 7))\n        base10_sum //= 7\n    return ''.join(digits[::-1])\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Looking at the sequence, we can observe that each number is a power of 3.\n    # 1 = 3^0, 3 = 3^1, 27 = 3^3, 81 = 3^4\n    # The missing term should be 3^2, which is 9.\n\n    return 9\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n\n    return total_carrots\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let the original number of oranges be 3x and lemons be 5x\n    # After selling 48 oranges, the new number of oranges is 3x - 48\n    # The ratio becomes (3x - 48) / 5x = 1 / 2 after selling the oranges\n    # Solve for x, then calculate the initial number of lemons, which is 5x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x - 48) / (5 * x), 1 / 2)\n\n    x_value = solve(equation, x)[0]\n    lemons_initial = 5 * x_value\n\n    return lemons_initial\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n    \n    combined_rate = horse_rate + cow_rate + sheep_rate\n    \n    total_days = 22 / combined_rate\n    \n    return total_days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5 / 8) * 160\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother, daughter = symbols('mother daughter')\n\n    # When the daughter reaches mother's current age, mother will be 75.\n    equation1 = Eq(mother + (mother - daughter), 75)\n    # When mother was the daughter's current age, the daughter was 3.\n    equation2 = Eq(daughter - (mother - daughter), 3)\n\n    solutions = solve((equation1, equation2), (mother, daughter))\n\n    return solutions[mother]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To ensure getting 3 red apples, Isabella might have to take out all non-red apples first.\n    # Number of non-red apples is the sum of green and yellow apples.\n    non_red_apples = 11 + 7  # Green + Yellow\n\n    # After taking all non-red apples, she needs to take out 3 more, which will be red for sure.\n    total_apples = non_red_apples + 3  # Non-Red + 3 Red\n\n    return total_apples\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Since we want to find the smallest number of right-handed girls,\n    # we assume all right-handed pupils apart from girls are boys.\n    # We calculate the maximum possible number of right-handed boys.\n    right_handed_boys = min(right_handed, total_pupils - girls)\n    \n    # The smallest number of right-handed girls would then be the\n    # total number of right-handed pupils minus the maximum possible\n    # number of right-handed boys.\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n\n    year = '2014'\n    ans = 0\n    \n    # For each month, check for all permutations of 'mmdd' where 0, 1, and 2 occur equally, i.e., two times.\n    for m in range(1, 13):\n        month = '{:02d}'.format(m)\n        for d in range(1, 32):\n            day = '{:02d}'.format(d)\n            \n            # Concatenate 'yyyy', 'mm', 'dd'\n            date = year + month + day\n            \n            # Check if date is valid considering the total days in each month and the number of 0s, 1s, and 2s\n            if ((m in (1, 3, 5, 7, 8, 10, 12) and d <= 31) or\n                (m == 2 and d <= 28) or \n                (m in (4, 6, 9, 11) and d <= 30)):\n                date_count = {x: date.count(x) for x in '012'}\n                if all(v == 2 for v in date_count.values()):\n                    ans += 1\n    \n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    spent = 6400\n    discount = 0.80\n    saved = spent / (1 - discount)\n    return saved - spent\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # There are 6 teams, and each team plays with each other team once.\n    # So there are C(6, 2) or \"6 choose 2\" games in total.\n\n    from math import comb\n\n    total_games = comb(6, 2)\n\n    # In each game, a total of 2 points are distributed (either 2 or 1-1).\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n\n    minibuses_needed = (children + minibus_capacity - 1) // minibus_capacity\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # To ensure 4 different coloured marbles, Jane must draw out all marbles of one color and at least one of each of the other colors.\n    # The worst-case scenario is that she draws all marbles of the most plentiful color first.\n    # The maximum number of a single color is 7 (green), so she draws all 7 green marbles.\n    \n    # After that, she must draw the other colors (red, blue, orange) at least once each.\n    \n    # Red: 1, Blue: 1, Orange: 1. Added to the 7 green, this makes 10.\n    # Thus, Jane has to draw at least 10 marbles to be sure to get 4 different colors.\n    \n    return 10\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # We need to find the largest value of n such that the factorial of n has 28 consecutive zeros\n    # This means that the prime factorization of n! has at least 28 factors of 5 (since 2s are more abundant)\n    # Start with 5 and increase by 5 each iteration to count the factors of 5\n    \n    zeros = 0\n    n = 5\n    while zeros < 28:\n        # Count the number of 5s contributing to factorial(n)\n        k = n\n        while k % 5 == 0:\n            zeros += 1\n            k //= 5\n        if zeros < 28:\n            n += 5\n    return n\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 41):\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('boys girls girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(boys + girls, 1690)\n    equation5 = Eq(girls, girls_swim + girls_not_swim)\n    equation6 = Eq(boys, boys_swim + boys_not_swim)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Total number pupils who can not swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    remaining_after_phone = salary - 740\n    rent_pay = 0.75 * remaining_after_phone\n    remaining_after_rent = remaining_after_phone - rent_pay\n\n    equation = Eq(remaining_after_rent, salary / 5)\n\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate the price per piece of the 4pc offer\n    price_per_piece_4pc = 7 / 4\n    \n    # Calculate the price per piece of the 6pc offer\n    price_per_piece_6pc = 8.5 / 6\n    \n    # Compare the two prices to find out which offer is better\n    if price_per_piece_4pc < price_per_piece_6pc:\n        better_buy = '4pc is a better buy'\n    else:\n        better_buy = '6pc is a better buy'\n    \n    # Return the result as a string\n    return better_buy\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # There are 36 possible outcomes when two dice are thrown\n    total_outcomes = 6 * 6\n    \n    # Sum greater than 10 can be achieved only with the following pairs: (5,6), (6,5), (6,6)\n    successful_outcomes = 2 + 1 # (5,6) and (6,5) and (6,6)\n    \n    # Probability of winning\n    probability_of_winning = successful_outcomes / total_outcomes\n    \n    # Expected winning per game is £10 times the probability of winning\n    expected_winning_per_game = 10 * probability_of_winning\n    \n    # Since the player bets £1 each time, expected net winning per game is expected winning per game minus bet\n    expected_net_winning_per_game = expected_winning_per_game - 1\n    \n    # Expected total net winning after 60 games\n    expected_total_net_winning = 60 * expected_net_winning_per_game\n    \n    # Since this is a loss, we take the negative value\n    return -expected_total_net_winning\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    total_weight_without_3_apples = 280\n    weight_of_3_apples = total_weight_with_apples - total_weight_without_3_apples\n    weight_of_5_apples = (weight_of_3_apples / 3) * 5\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    numbers = [2, 3, 4]\n    unique_numbers = set()\n\n    for i in range(1, len(numbers) + 1):\n        for permutation in permutations(numbers, i):\n            unique_numbers.add(int(''.join(map(str, permutation))))\n\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    time = 231  # time in HHMM format without the leading zero\n    time_limit = 2400  # 24 hours in HHMM format\n    time_to_wait = 0\n\n    while True:\n        time += 1\n        time_to_wait += 1\n        \n        # Handling the increment of hours and minutes\n        if time % 100 == 60:\n            time += 40  # going to next hour\n            \n        if time == time_limit:\n            time = 0  # resetting time after 24h cycle\n\n        digits = set(str(time))\n        if all(str(digit) in digits for digit in [0, 1, 2, 3]):\n            break\n\n    return time_to_wait\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150\n    drank_after_class = 100\n\n    half_remaining = remaining_after_class + drank_after_class\n    original_amount = half_remaining * 2\n\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = total_grapes * (3 / 7)\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = remaining_after_monday * (3 / 8)\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    weight_per_bag = 3 / 4\n\n    number_of_bags = remaining_after_tuesday / weight_per_bag\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percentage_sold = 60 / 100\n    remaining_tickets = 28\n    total_tickets = remaining_tickets / (1 - percentage_sold)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    # Equation representing the situation where both initially have the same amount\n    equation1 = Eq(lynn, mary)\n\n    # Equation representing the situation after spending money and the leftover ratio\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    # Amount Lynn have left\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    divisor = 27\n    remainder = 9\n    # The formula for the dividend given a divisor and remainder is: dividend = divisor * quotient + remainder\n    quotient = 1  # Start with the minimum possible quotient which will yield the minimum dividend\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    devi, jerry = symbols('devi jerry')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n    \n    solutions = solve((equation1, equation2), (devi, jerry))\n    \n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    result = sum([64-62, 60-58, 56-54, 52-50, 48-46, 44])\n    return result\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Assume the original number as xy (x is the tens place and y is the ones place)\n    # and the subtrahend as (x-3)(y+1) after swapping the digits\n    \n    # We know serene got a difference of 36\n    # Therefore the equation after her mistake will be\n    # (10x + y) - (10*(x-3) + (y+1)) = 36\n    \n    # Let's solve the equation\n    for x in range(1, 10):  # Loop for tens digit of the minuend (original number)\n        for y in range(0, 10):  # Loop for units digit of the minuend\n            if (10*x + y) - (10*(x-3) + (y+1)) == 36:\n                # Calculate the correct difference\n                correct_diff = (10*x + y) - (10*(x-5) + (y-1))\n                return correct_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    num_jugs = -(-total_ml // jug_capacity)  # Ceiling division to find the least number of jugs used\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Total is the count of red balls plus the blue ball.\n    \n    # Let x be the number of red balls to be removed.\n    # We want to find x such that the percentage of red balls is 90% (0.9) after removing x balls.\n    # The equation will be (49 - x) / (total_balls - x) = 0.9\n    \n    for x in range(49):\n        if (49 - x) / (total_balls - x) == 0.9:\n            return x\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum(100 / i for i in range(97, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    equation1 = Eq(cows + birds, 1300)\n    equation2 = Eq(4 * cows + 2 * birds, 3440)\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    greatest_number = 0\n    for i in range(100, 1000):   # Loop through all 3-digit numbers\n        if i % 9 == 0:           # Check divisible by 9\n            if i % 2 == 1:       # Check if the number is odd\n                tens_digit = (i // 10) % 10  # Extract the tens digit\n                if tens_digit % 4 == 0:     # Check if the tens digit is divisible by 4\n                    greatest_number = max(greatest_number, i)  # Update the greatest number found\n    return greatest_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    pens_jenny_has_after_giving = jenny_pens - pens_given_to_ben\n    pens_ben_has_at_first = pens_jenny_has_after_giving\n\n    return pens_ben_has_at_first\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_first_and_last_tree = (21 - 1) * 2\n    distance_for_lamp_posts = distance_between_first_and_last_tree + 2  # Including both ends\n    number_of_lamp_posts = (distance_for_lamp_posts // 10) + 1\n    \n    return int(number_of_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for velocities\n    v_final_x, v_final_y = symbols('v_final_x v_final_y')\n\n    # Mass of both cars\n    m1 = m2 = 500  # kg\n\n    # Initial velocities of the cars\n    v1_initial = 20  # m/s, car 1 going north\n    v2_initial = 30  # m/s, car 2 going west\n\n    # Conservation of momentum in the x and y directions\n    # m1 * u1 + m2 * u2 = (m1 + m2) * v_final\n    # Car 1 has no initial x-direction velocity (due north)\n    # Car 2 has no initial y-direction velocity (due west)\n    # Assuming north is positive y-direction, west as negative x-direction.\n    equation_x = Eq(0 - m2 * v2_initial, (m1 + m2) * v_final_x)\n    equation_y = Eq(m1 * v1_initial - 0, (m1 + m2) * v_final_y)\n\n    # Solve the equations for the final velocities\n    solutions = solve((equation_x, equation_y), (v_final_x, v_final_y))\n    v_final_x_val = solutions[v_final_x]\n    v_final_y_val = solutions[v_final_y]\n\n    # Calculate the magnitude and direction of the final velocity vector\n    v_final_magnitude = (v_final_x_val**2 + v_final_y_val**2)**0.5\n\n    return v_final_magnitude\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    laptop_price, dvd_price = symbols('laptop_price dvd_price')\n    \n    # 5 laptops + 4 DVD players = $14438\n    equation1 = Eq(5 * laptop_price + 4 * dvd_price, 14438)\n    # 1 laptop + 1 DVD player = $2960\n    equation2 = Eq(laptop_price + dvd_price, 2960)\n    \n    solutions = solve((equation1, equation2), (laptop_price, dvd_price))\n    \n    return solutions[dvd_price]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    # Each size can have any of the 5 colors, so for each size there are 5 options.\n    # Since there are 3 sizes and the choice of color is independent for each size,\n    # we can multiply the number of options for each size.\n    types_of_handbags = sizes * colors\n\n    return types_of_handbags\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # n is the number of people in the group before Aaron joined\n    # total_weight is the total weight of the people before Aaron joined\n    n, total_weight = symbols('n total_weight')\n\n    # The average weight before Aaron joined is total_weight / n\n    # After Aaron joined, the new average becomes (total_weight + 45) / (n + 1) = 61\n    equation1 = Eq((total_weight + 45) / (n + 1), 61)\n\n    # After Ben joined, the new average becomes (total_weight + 45 + 71) / (n + 2) = 62\n    equation2 = Eq((total_weight + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, total_weight))\n\n    # The original average weight is total_weight / n\n    original_average = solutions[total_weight] / solutions[n]\n\n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate through all permutations of numbers 0 to 9 for the letters ABCDEFG\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        # Triangle number A is on the triangle's top, B and C on the left,\n        # D and E on the right. We calculate F and G's values based on these.\n        F = A + B + C\n        G = A + D + E\n\n        # Now we check if F and G are unique digits and different from A, B, C, D, E\n        if F < 10 and G < 10 and len(set([A, B, C, D, E, F, G])) == 7:\n            return A\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize the counter for the number of pairs\n    count = 0\n    # Loop through the first number of the pair\n    for i in range(1, 101):\n        # Loop through the second number of the pair, ensuring it is distinct from the first\n        for j in range(i + 1, 101):\n            # Check if the sum of the pair is divisible by 5\n            if (i + j) % 5 == 0:\n                # If divisible, it forms a valid pair, so increment the counter\n                count += 1\n    return count\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n    \n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        passed = hour\n        remaining = 12 - hour\n        if passed == 2 * remaining:\n            return hour\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = '12345'\n    pattern_length = len(pattern)\n    total_digits = 2000\n\n    # Number of complete patterns contained in 2000 digits\n    complete_patterns = total_digits // pattern_length\n\n    # Digits from incomplete pattern at the end\n    remaining_digits = total_digits % pattern_length\n\n    # Sum of digits in one complete pattern\n    sum_of_pattern = sum(map(int, pattern))\n\n    # Sum of all complete patterns\n    sum_of_complete_patterns = complete_patterns * sum_of_pattern\n\n    # Sum of digits in the remaining part of the pattern\n    sum_of_remaining = sum(map(int, pattern[:remaining_digits]))\n\n    total_sum = sum_of_complete_patterns + sum_of_remaining\n\n    return total_sum\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Use the Pigeonhole Principle to determine the worst case\n\n    # To guarantee 4 balls of the same colour, first take the maximum number that could be taken without accomplishing this goal:\n    # Take 3 blue balls (since there are 5, we stop before getting the 4th that would guarantee the colour)\n    # Take 3 orange balls (for the same reason)\n    # Take 2 yellow balls (taking all yellow balls ensures that the next ball will give us 4 of a colour)\n    # At this point, we have 3 blue, 3 orange, and 2 yellow. No matter what we take next, we will get 4 of a colour.\n    # So we add 1 to the current total.\n    \n    # Initial balls taken without guaranteeing 4 of the same colour:\n    balls_taken_without_4_same = (3 + 3 + 2)\n    \n    # One more ball will guarantee 4 balls of the same colour:\n    balls_to_guarantee_4_same = 1\n    \n    # Total number of balls that must be taken out to guarantee 4 balls of the same colour:\n    ans = balls_taken_without_4_same + balls_to_guarantee_4_same\n    \n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Given numbers without 'a'\n    mean_value = 5  # Given mean value\n    total_numbers = len(numbers) + 1  # Including 'a'\n    \n    # mean = sum_of_all_numbers / total_numbers\n    # sum_of_all_numbers = mean * total_numbers\n    sum_of_all_numbers = mean_value * total_numbers\n    \n    # Calculate sum of given numbers\n    sum_of_given_numbers = sum(numbers)\n    \n    # The value of 'a' will be the total sum minus the sum of given numbers\n    a = sum_of_all_numbers - sum_of_given_numbers\n    \n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n    \n    work_done_in_4_days = 4 * (A_rate + B_rate)\n    remaining_work = 1 - work_done_in_4_days\n    days_for_B_to_finish = remaining_work / B_rate\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the sequence 1 to 13 using the formula for the sum of an arithmetic series: n*(n+1)/2\n    # where n is the last term in the sequence.\n    n = 13\n    sum_sequence = n * (n + 1) // 2\n\n    # Since the sequence is mirrored (e.g., 1 to 13 and then 13 to 1), we multiply the sum by 2.\n    # However, the term 13 is counted twice, so we subtract it once.\n    total_sum = sum_sequence * 2 - n\n\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_students = 0\n    boys_over_girls = 52\n    side_length = 1\n\n    while True:\n        if side_length % 2 == 0:\n            girls = (side_length - 1)**2\n            boys = side_length**2\n        else:\n            boys = (side_length - 1)**2\n            girls = side_length**2\n            \n        if boys - girls == boys_over_girls:\n            total_students = boys + girls\n            break\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    num_bottles = 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We use the Chinese Remainder Theorem to solve the congruences.\n    # We want to find a number that has a remainder of 1 when divided by 5, 6, and 7.\n    # The congruences are:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Using the sympy solve_congruence function to find the smallest non-negative solution\n    x, _ = solve_congruence(*congruences)\n\n    # Since we need to find the smallest three-digit number, we add the least common multiple of\n    # the moduli until we find a three-digit number.\n    lcm_moduli = 5 * 6 * 7  # Since 5, 6, and 7 are co-prime, their LCM is their product.\n    \n    while x < 100:  # 100 is the smallest three-digit number\n        x += lcm_moduli\n    \n    return x\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Given:\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    geese_legs = 2 * 2      # 2 baby geese with 2 legs each\n    total_legs = 36         # Total number of legs\n\n    # Subtract legs of ducklings and geese from total legs\n    remaining_legs = total_legs - (ducklings_legs + geese_legs)\n\n    # Divide the remaining legs by the number of legs a lamb has (4) to get the number of lambs\n    lambs = remaining_legs // 4\n\n    return lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Since 1 litre equals 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cookies = symbols('total_cookies')\n    \n    charlene_has = total_cookies / 2 + 8\n    emerald_gets = total_cookies - charlene_has\n    emerald_has = emerald_gets - (emerald_gets / 3 + 4)\n    hebe_gets = emerald_has\n    hebe_has = hebe_gets - (hebe_gets / 4)\n    \n    equation = Eq(hebe_has, 42)\n\n    solutions = solve(equation, total_cookies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    difference = 7\n    last_term = 150\n\n    num_kids = ((last_term - first_term) / difference) + 1\n\n    return int(num_kids)\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Assume there are n teams in the league, each team plays against every other team exactly twice (home and away).\n    # The total number of matches can be given by the formula: n*(n - 1).\n    # Since every match is between two teams, we divide by 2 to get the unique matches: n*(n - 1)/2.\n    # We set this equal to the total number of matches (30) and solve for n.\n    # n*(n - 1)/2 = 30\n    # n*(n - 1) = 60\n    # n^2 - n - 60 = 0 (quadratic equation)\n\n    # Solve the quadratic equation to find the number of teams\n    from math import sqrt\n    \n    # Calculate discriminant\n    discriminant = sqrt(1**2 - 4*1*(-60))\n    # Calculate two possible solutions for n\n    n1 = (1 + discriminant) / (2*1)\n    n2 = (1 - discriminant) / (2*1)\n    # Since the number of teams cannot be negative, we take the positive solution\n    # and since the number of teams must be an integer, we also round it\n    ans = int(max(n1, n2))\n\n    return ans\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, he ate 1/4 of the remaining number of sweets\n    # Therefore, 6 sweets were 3/4 of the amount before the fourth day\n    before_fourth_day = remaining_sweets / (3 / 4)\n\n    # On the third day, he ate 1/5 of the remaining number of sweets\n    # Therefore, before_fourth_day sweets were 4/5 of the amount before the third day\n    before_third_day = before_fourth_day / (4 / 5)\n\n    # On the second day, he ate 1/6 of the remaining number of sweets\n    # Therefore, before_third_day sweets were 5/6 of the amount before the second day\n    before_second_day = before_third_day / (5 / 6)\n\n    # On the first day, he ate 1/7 of the number of sweets\n    # Therefore, before_second_day sweets were 6/7 of the initial amount\n    initial_sweets = before_second_day / (6 / 7)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_for_720_sets = 5\n\n    # Calculate the daily production rate\n    daily_rate = made_in_5_days / days_for_720_sets\n\n    # Calculate the total days needed to complete the order\n    total_days = total_uniforms / daily_rate\n\n    return int(total_days)\n    \nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Define a function to calculate the number of ways to reach a given step\n    # considering Nelson's step rules (can take either 1 or 2 steps)\n    def ways_to_step(n):\n        if n == 0 or n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n - 1) + ways_to_step(n - 2)\n    \n    # First calculate the number of ways to reach the 5th step\n    ways_to_5 = ways_to_step(5)\n    \n    # Then calculate the number of ways to reach the 10th step from the 5th step\n    ways_5_to_10 = ways_to_step(10 - 5)\n    \n    # The total number of ways to reach the 10th step while stepping on the 5th\n    # is the product of ways to reach the 5th and ways to reach the 10th from the 5th\n    total_ways = ways_to_5 * ways_5_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first_number, second_number, third_number = symbols('first_number second_number third_number')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first_number, second_number + 1099)\n    equation2 = Eq(third_number, second_number - 877)\n    equation3 = Eq(first_number + second_number + third_number, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_number, second_number, third_number))\n\n    # Return the value of the second number\n    return solutions[second_number]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    \n    equation = Eq(3 * boys - 21, 45)\n    \n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    from math import sqrt, floor, ceil\n\n    lower_bound = ceil(sqrt(40))\n    upper_bound = floor(sqrt(50))\n\n    for n in range(lower_bound, upper_bound + 1):\n        if n * n > 40 and n * n < 50:\n            ans = n * n\n            return ans\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = initial_volume - cup_volume * cups_poured\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # Given product\n    product = 2*2*2*3*8*5*5*25\n    \n    # Prime factors of 10 are 2 and 5\n    # The number of zeros at the end of product is determined by the number of pairs of 2s and 5s\n    \n    # Count the number of 2s in the product\n    count_2 = 0\n    temp_product = product\n    while temp_product % 2 == 0:\n        temp_product //= 2\n        count_2 += 1\n    \n    # Count the number of 5s in the product\n    count_5 = 0\n    temp_product = product\n    while temp_product % 5 == 0:\n        temp_product //= 5\n        count_5 += 1\n    \n    # The smaller of the counts of 2s and 5s will give the number of zeros\n    ans = min(count_2, count_5)\n    \n    return ans\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from math import factorial\n\n    # Starting from 1 and continue to check the product of four consecutive natural numbers\n    n = 1\n    while factorial(n) * factorial(n + 1) * factorial(n + 2) * factorial(n + 3) != 3024:\n        n += 1\n    \n    # The largest number will be n+3 since we are looking for four consecutive numbers\n    return n + 3\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the items\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Now we set up our equations based on the given information\n    equation1 = Eq(notebook + pencil_case, 6)\n    equation2 = Eq(pencil_case + eraser, 8)\n    equation3 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n\n    # We will use sympy's solve function to find the values of the items\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for Alan and Bob's initial number of cards\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob $25 cards, and Bob now has $3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # find the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # the number of markers in the least common multiple of packs\n    markers_in_lcm = pack_lcm * (6 + 8 + 9 + 15) // 38 \n\n    # calculate the least number of packs needed to have at least 1000 markers\n    packs_needed = (1000 + markers_in_lcm - 1) // markers_in_lcm \n\n    # calculate the total minimum number of packs across all sizes\n    total_packs = packs_needed * pack_lcm // 6\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    students = 10\n    # Each handshake involves two students, so each pairing is unique\n    # Thus we divide by 2 to avoid counting the same handshake twice\n    handshakes = (students * (students - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne, maria = symbols('anne maria')\n    \n    # Maria has $20 apples more than Anne.\n    equation1 = Eq(maria, anne + 20)\n    \n    # Altogether they have $44 apples.\n    equation2 = Eq(anne + maria, 44)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (anne, maria))\n    \n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    n1 = 0.1 + 1/9 + 99251 / (9 * 10**5)\n    n2 = 0.2 + 3/9 + 456 / (9 * 10**6)\n\n    # Find continued fraction representation of the difference\n    from sympy import continued_fraction_reduce, continued_fraction_convergents\n    from fractions import Fraction\n\n    diff = abs(Fraction(n1).limit_denominator() - Fraction(n2).limit_denominator())\n    continued_frac = continued_fraction_reduce([int(part) for part in str(diff)])\n\n    convergents = list(continued_fraction_convergents(continued_frac))\n\n    # Find the convergent just before the difference exceeds 1/10^n for some n\n    for i, c in enumerate(convergents):\n        if 1/c > 1/10**(i+1):\n            n = i\n            break\n\n    return n\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100 * 90) - (90 / 100 * 20)\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # weight of orange in grams\n\n    # Calculate weight of water by cross-multiplication\n    water_weight = (water_ratio * orange_weight) / orange_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    required_total = 8.5 * 5\n    current_total = 7.9 + 8.3 + 8.8 + 8.6\n    \n    # score_needed is the lowest score Ellie needs from the final judge\n    score_needed = required_total - current_total\n    return score_needed\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as sister\n    equation2 = Eq(alice + 10 + sister + 10, 53)  # In 10 years, their total age will be 53\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the interest rate per year\n    principal = 10000\n    total_interest = 816\n    r = symbols('r')\n    \n    # The total interest for two years with simple interest formula\n    equation = Eq(principal * r * 2, total_interest)\n\n    # Solving for the interest rate per year\n    interest_rate = solve(equation, r)[0]\n    \n    return float(interest_rate)\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    original_number = (final_number - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # From the problem, we want to find the number that, when divided by 4, gives a quotient of 9 and a remainder of 2.\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's original final answer suggests the dividend\n    johnny_answer = (quotient * remainder) + divisor  # Incorrect calculation\n\n    # Correct calculation for the dividend is:\n    correct_dividend = (quotient * divisor) + remainder\n\n    # If Johnny's answer is not equal to the correct dividend, it's incorrect\n    is_correct = johnny_answer == correct_dividend\n\n    # Return the tuple stating whether Johnny was correct, the correct working dividend, and Johnny's incorrect calculation\n    return (is_correct, correct_dividend, johnny_answer)\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Hannah's speed\n    speed_hannah = symbols('speed_hannah')\n\n    # Given ratio of time taken\n    ratio_time_peter = 3\n    ratio_time_hannah = 4\n\n    # Speed of Peter is 15 cm/s faster than speed of Hannah\n    speed_peter = speed_hannah + 15\n\n    # Since distance is the same, we use the formula for time: time = distance/speed\n    # Therefore, the ratio of speeds should be inverted to the ratio of times\n    equation = Eq(speed_peter / speed_hannah, ratio_time_hannah / ratio_time_peter)\n\n    # Solve the equation for Hannah's speed\n    solution = solve(equation, speed_hannah)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for costs\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Equations based on the given information\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_mcq = 23\n    time_spent_fill_in_blank = 35\n\n    time_left_for_short_answers = total_time - (time_spent_mcq + time_spent_fill_in_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30 # meters per second\n    cross_time = 45 # seconds\n    train_length = 850 # meters\n\n    # Distance = Speed * Time\n    total_distance = train_speed * cross_time\n\n    # Length of the tunnel = Total distance - Train length\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of pages read more each day\n    d = symbols('d')\n    # Total pages to be read excluding the first and last day\n    pages_excluding_first_and_last = 550 - 30 - 70\n    \n    # The total number of pages read is the sum of an arithmetic series with:\n    # first term a1 = 30 + d (since the second day he reads 30 + d pages)\n    # last term an = 70 - d (since the second to last day he reads 70 - d pages)\n    # sum of pages S = n/2 * (a1 + an)\n    #\n    # The number of terms n is equal to the number of days minus 2,\n    # since we exclude the first and last days.\n    # For now, we express n in terms of d: n = (70 - d) / d\n\n    # Now we set up the equation based on the sum of arithmetic series S\n    # (n/2) * (a1 + an) = pages_excluding_first_and_last\n    # 2 * S = n * (a1 + an)\n    # But since a1 = 30 + d and an = 70 - d, we get:\n    # 2 * S = n * ((30 + d) + (70 - d))\n    # 2 * S = n * (100)\n    # n * d = 70 - 30\n    # n * d = 40\n\n    # Substitute n with 40/d:\n    # 2 * S = (40/d) * 100\n    eq = Eq(40 / d * (30 + d + 70 - d), pages_excluding_first_and_last)\n    \n    # Solve the equation for d\n    d_val = solve(eq, d)\n\n    # Since d could have two roots, one positive and one negative,\n    # we need to choose the positive one, as reading pages negative makes no sense\n    d_val = [val for val in d_val if val > 0]\n\n    return d_val[0]\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # Maximum parts with n circles is n^2 + n + 1\n    max_parts_circles = circles**2 + circles + 1\n    # Each line can intersect each circle at most 2 times, generating 2 new regions per circle\n    max_parts_line = max_parts_circles + 2 * circles\n    return max_parts_line\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    ways = 0\n    all_permutations = permutations(range(4), 3)\n    for Joe, Mike, Tina in all_permutations:\n        # Check if Joe and Mike enter through different entrances\n        if Joe != Mike:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of fifty-cent coins and y be the number of one-dollar coins\n    x, y = symbols('x y')\n\n    # Original ratio of fifty-cent coins to total coins is 2/7\n    # So, original number of one-dollar coins is total minus fifty-cent coins: (7/2)*x - x\n    # After receiving more coins, the number of fifty-cent coins becomes x + 10\n    # And one-dollar coins becomes y + 5*2 because each fifty-cent coin is half a dollar\n    # According to the problem, after receiving additional coins, one-dollar coins is twice the number of fifty-cent coins\n    # This gives us the equation: y + 10 = 2*(x + 5*2)\n    \n    # Original state: y = (7/2)*x - x\n    equation1 = Eq(y, (7/2)*x - x)\n\n    # Final state after receiving more coins\n    equation2 = Eq(y + 10, 2*(x + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Total number of coins originally is fifty-cent coins (x) plus one-dollar coins ((7/2)*x - x)\n    total_coins = solutions[x] + ((7/2)*solutions[x] - solutions[x])\n    \n    return total_coins\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # fixed costs and rate for the first 3 tons\n    fixed_service_fee = 4\n    first_3_tons_rate = 4\n    first_3_tons_cost = 3 * first_3_tons_rate\n\n    # additional costs\n    additional_rate_per_ton = 3\n    total_cost_allowance = 109\n\n    # Calculate cost for additional water usage\n    additional_cost_allowance = total_cost_allowance - (fixed_service_fee + first_3_tons_cost)\n\n    # Find out how many additional tons can be used\n    additional_tons = additional_cost_allowance // additional_rate_per_ton\n\n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let the amount spent on transportation be x\n    # Then the amount spent on food is 2x\n    # We know that x + 2x = spent_money\n    # So, 3x = spent_money\n    # x = spent_money / 3  (amount spent on transportation)\n    amount_spent_on_transportation = spent_money / 3\n    amount_spent_on_food = 2 * amount_spent_on_transportation\n    \n    return amount_spent_on_food\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Eve's and Alice's candies\n    number_of_girls = 3  # Eve, Alice, and Irene\n\n    # Divide the total candy among the girls\n    candy_per_girl = total_candy // number_of_girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    total_work = 1  # Represents the whole lawn\n    quick_gardener_rate = 1 / 12  # Quick gardener's rate of work per hour\n    combined_rate = 1 / 8  # Combined rate of work per hour\n\n    # Rate of work of lazy gardener is the combined rate minus the quick gardener's rate\n    lazy_gardener_rate = combined_rate - quick_gardener_rate\n\n    # Time taken by lazy gardener is the total work divided by his rate of work\n    lazy_gardener_time = total_work / lazy_gardener_rate\n\n    return lazy_gardener_time\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies each person has\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(bala, amelia + 320 - daniel)  # Bala has 320 more cookies than Daniel\n    equation2 = Eq(bala, amelia / 2)             # Bala has 1/2 as many cookies as Amelia, Carl, and Daniel\n    equation3 = Eq(carl, (3/4) * (amelia + bala + daniel)) # Carl has 3/4 as many cookies as Amelia, Bala, Daniel\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)    # Together they have 6230 cookies\n    equation5 = Eq(amelia, 160)                            # Amelia had 160 cookies\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    # Return the number of cookies Daniel had\n    return solutions[daniel]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Establish the equation based on the relationship between the apples and oranges\n    equation1 = Eq(oranges, apples + 32)\n\n    # Establish the equation based on the total number of fruits after giving away\n    equation2 = Eq((apples - apples / 3) + (oranges - oranges / 2), 100)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculate the total number of fruits at the beginning\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_after = belinda_tomatoes - 7\n    matthew_tomatoes = belinda_after\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Initial amount Jenny had.\n    initial_amount = 182\n    # Cost of each dress.\n    cost_dress = 5\n    # Cost of each skirt.\n    cost_skirt = 3\n    # Amount left.\n    amount_left = 5 * x\n\n    # Setting up the equation based on the problem statement.\n    equation = Eq(initial_amount - (cost_dress * x + cost_skirt * x), amount_left)\n\n    # Solving for x.\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n    \n    # Noah and Pete had $75 altogether\n    equation1 = Eq(noah + pete, 75)\n    \n    # Noah and Howard had $145 altogether\n    equation2 = Eq(noah + howard, 145)\n\n    # Howard had 3 times as much money as Pete\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug = jug_capacity_ml / 2\n    one_cup_capacity = half_jug / 3\n    return one_cup_capacity\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    total_sum = 0\n    for i in range(7):\n        product = 1\n        num = 2\n        for j in range(i + 1):\n            if j == 0:\n                product *= 1\n            elif j == 1:\n                product *= num\n                num += 1\n            else:\n                product *= num\n                num += 2\n        total_sum += product\n    return total_sum\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Distance covered by the first 100 trees\n    distance_covered_by_100_trees = 100 * 3  # in meters\n\n    # Time taken to cover distance by the first 100 trees in minutes\n    time_for_100_trees = 3  # in minutes\n\n    # Speed of walking in meters per minute\n    speed = distance_covered_by_100_trees / time_for_100_trees\n\n    # Total distance from school to home\n    total_distance = 4000  # in meters\n\n    # Total time to travel from school to home\n    total_time = total_distance / speed  # in minutes\n\n    return total_time\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # Green line sets out every 5 minutes\n    red_line_interval = 6    # Red line sets out every 6 minutes\n    \n    # Least common multiple (LCM) represents the first time they leave together again\n    lcm = (green_line_interval * red_line_interval) // math.gcd(green_line_interval, red_line_interval)\n    \n    # Convert minutes into hours and minutes to find the time\n    hours = 5 + lcm // 60\n    minutes = lcm % 60\n    \n    return f\"{hours}:{str(minutes).zfill(2)} am\"\n\nimport math\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    \n    position_from_back = total_cars - position_from_front + 1\n    \n    return position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded_number = round(number, -3)  # rounding to the nearest 1000\n    return rounded_number\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of an apple and banana\n    a, b = symbols('a b')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(a + b, 0.48)\n\n    # Solve the equations for the cost of an apple and a banana\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations(range(1, 4), 4):\n        if len(set(p)) >= 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Use the sum of squares formula:\n    # sum(i^2) = n(n + 1)(2n + 1) / 6 for i from 1 to n\n    # Adjust the formula for the series that goes from 4^2 to 124^2 in steps of 4:\n    # 4^2, 8^2, 12^2, ..., (4n)^2 is the same as (4^2)*(1^2), (4^2)*(2^2), (4^2)*(3^2), ..., (4^2)*(n^2)\n    # Factor out the (4^2):\n    # 4^2 * sum(i^2) for i from 1 to n where (4n) = 124 -> n = 124/4 = 31\n\n    # Number of terms in the sequence\n    n = 124 // 4\n\n    # Sum of squares\n    sum_of_squares = n * (n + 1) * (2 * n + 1) / 6\n\n    # Multiply by 4^2\n    ans = sum_of_squares * (4 ** 2)\n\n    return int(ans)\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen gives 5 fish for 2 rabbits: fish/rabbits = 5/2\n    # Oscar gives 4 rabbits for 7 packs of wheat: rabbits/wheat = 4/7\n\n    # To find out how many fish for 14 packs of wheat:\n    # fish/wheat = fish/rabbits * rabbits/wheat\n    # fish/wheat = (5/2) * (4/7)\n\n    # Simplifying continued ratio for 14 packs of wheat:\n    # Let x be the number of fish for 14 packs of wheat\n    # fish/wheat = x/14\n    # x/14 = (5/2) * (4/7)\n    # x = 14 * (5/2) * (4/7)\n    x = 14 * (5 / 2) * (4 / 7)\n    return x\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_score = 23\n    correct_mark = 5\n    incorrect_deduction = -2\n\n    # Assume all answers are correct, calculate the score and the excess\n    max_correct = total_score // correct_mark\n    for correct in range(max_correct + 1):\n        incorrect = 6 - correct\n        score = correct * correct_mark + incorrect * incorrect_deduction\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_age = symbols('justin_age')\n\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n\n    solution = solve(equation, justin_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n\n    total_time = time_per_drawing * number_of_drawings\n\n    return total_time\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # Starting from the least possible cookies that fulfill the first condition\n    cookies = 8\n    while True:\n        # Check if the current number of cookies leaves 1 cookie behind\n        # when divided amongst 9 cookie boxes\n        if cookies % 9 == 1:\n            return cookies\n        # Since, we are considering the cookies be packed in boxes of 8,\n        # we keep adding 8 at a time to fulfill the first condition\n        cookies += 8\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_amount = total_cost - discount\n\n    return final_amount\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem description (remainder, modulus)\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # Using the Chinese Remainder Theorem to find a solution\n    num, _ = solve_congruence(*congruences)\n\n    # Ensuring the number is less than 100\n    while num < 100:\n        result = num\n        num += 4 * 5 * 6\n\n    return result\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    # Number of books in each case\n    books_per_case = 10 // 2\n    # Total number of books in six cases\n    total_books = books_per_case * 6\n    return total_books\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        ""
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for age in ages:\n        if age % 3 == 0 and age != max(ages):\n            return age\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        ""
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    \n    while int(number * n) % 11 != 0:\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    return 224 - 75\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    b = symbols('b')\n    equation = Eq(4 * b - 9, 7)\n    solution = solve(equation, b)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Drawing all balls of the same color\n    same_color_balls = 5\n    # Minimum balls needed to ensure the next ball is of a different color\n    ensure_different = same_color_balls + 1\n    # Minimum balls needed to ensure the third ball is of a different color\n    # is by taking two more (1 from each of the remaining colors)\n    at_least_three_different = ensure_different + 2\n    \n    return at_least_three_different\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Since they can't have the same number of apples, we start with the smallest distribution for the other five children: 1, 2, 3, 4, 5 apples\n    # This is a total of 1+2+3+4+5 apples for the five children\n    used_apples = sum(range(1, 6))  # This is the sum for the other five children\n    remaining_apples = 28 - used_apples  # Subtract the used apples from the total, which leaves Avril's share\n    return remaining_apples\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    laptop_cost = total_money * fraction_spent\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed_m_per_s = 2\n    ratio_jocye_to_lori = 3 / 2\n    jocye_speed_m_per_s = lori_speed_m_per_s * ratio_jocye_to_lori\n    time_seconds = 10\n    distance_jocye_runs_m = jocye_speed_m_per_s * time_seconds\n    return distance_jocye_runs_m\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    initial_sum = initial_average * 2\n    final_sum = new_average * 3\n    added_number = final_sum - initial_sum\n\n    return added_number\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    triangle = symbols('triangle')\n\n    # First equation: triangle + triangle = square\n    square = 2 * triangle\n\n    # Second equation: square + triangle = circle\n    circle = square + triangle\n\n    # Third equation: diamond = circle + square + triangle\n    # Replacing circle and square with their expressions in terms of triangle\n    diamond = circle + square + triangle\n    diamond = (square + triangle) + square + triangle\n    diamond = (2 * triangle + triangle) + 2 * triangle + triangle\n    diamond = 2 * (2 * triangle) + 2 * triangle\n\n    # Simplifying to find out how many triangles equals diamond\n    ans = diamond / triangle\n    return ans\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_bus_caught = datetime.strptime('16:01', '%H:%M')\n    time_bus_trip = 18  # minutes\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    walking_time_to_bus_stop = (time_bus_caught - time_left_school).total_seconds() / 60\n    time_after_bus_trip = time_bus_caught + timedelta(minutes=time_bus_trip)\n    walking_time_from_bus_drop_off = (time_got_home - time_after_bus_trip).total_seconds() / 60\n    \n    total_walking_time = walking_time_to_bus_stop + walking_time_from_bus_drop_off\n\n    return total_walking_time\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    \n    # After giving amount_given to Lisa, Ken has $21 less than Lisa\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    return solutions[amount_given]\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # Trophy counts form a pyramid sequence: 1, 2, 3, 4, 5, 4, 3, 2, 1\n    # Summing these will give the total number of trophies\n    trophies = sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n    \n    return trophies\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # The sequence goes 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4...\n    # For each number n, there are n+1 instances. Let's find the total numbers first.\n    total_numbers = sum([n+1 for n in range(1, 9)])\n\n    # To find the median, we find the middle number in an odd-length list\n    # or the average of the middle two numbers in an even-length list.\n    if total_numbers % 2 == 1:\n        # It is an odd-length list, so median is the middle number\n        median_index = total_numbers // 2\n    else:\n        # It is an even-length list, median is average of middle two numbers\n        median_index = total_numbers // 2 - 1  # since index starts from 0\n\n    # Let's find out the actual number that occupies that median index.\n    cumulative_count = 0\n    for n in range(1, 9):\n        cumulative_count += n + 1\n        if cumulative_count > median_index:\n            return n\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_number = int(''.join(map(str, sorted(digits))))\n    difference = largest_number - smallest_number\n    return difference\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6\n\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d) = S\n    # where n is the number of terms, a is the first term, d is the common difference, and S is the sum\n    # Here n=5 (days), d=6 (more cookies each day), S=100 (total cookies)\n    # We need to find 'a', the number of cookies on the first day\n    # Rearranging the formula: a = (S/n - (n-1)d/2)\n\n    first_day_cookies = (total_cookies/days) - ((days - 1) * difference) / 2\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # To ensure getting 2 red marbles in the worst case scenario, we have to consider taking out all non-red marbles first.\n    # Total non-red marbles: blue + orange\n    non_red_marbles = 18 + 8\n    \n    # Since we want to ensure 2 red marbles are taken out, we must take out one extra marble after all non-red marbles are taken out.\n    marbles_to_ensure_red = non_red_marbles + 2 \n    \n    return marbles_to_ensure_red\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n\n    for student_number in range(1, 31):\n        # student_number will be facing the teacher again if flipped an even number of times\n        # flipping occurs if the number is a multiple of 2 or 3, so check how many of these conditions are met\n        flips = 0\n        if student_number % 2 == 0:\n            flips += 1\n        if student_number % 3 == 0:\n            flips += 1\n        if flips % 2 == 0:\n            facing_teacher += 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x**0.5 + 36**0.5, 81**0.5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    missing_number = 4 * 221\n    return missing_number\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10  # The number of athletes in the first row\n    n = 25  # The total number of rows\n\n    # Calculate the common difference 'd'\n    d = (25 - 10) / (4 - 1)  # The difference between each row\n\n    # The total number of athletes is the sum of an arithmetic series which is given by the formula:\n    # sum = n/2 * (2*a + (n - 1)*d)\n    # where a is the first term and d is the difference between the terms.\n    total_athletes = n / 2 * (2 * first_term + (n - 1) * d)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # If there are three doors and only one has a car (winning option) behind it,\n    # the probability of choosing the car at random initially is 1/3.\n    # When the host opens one of the doors that you didn't choose, revealing a goat,\n    # the probability of the car being behind the other unchosen door increases to 2/3.\n    # This is because the host will always open a door with a goat, never revealing the car.\n    # Therefore, switching doors (to door 2) increases your chances of winning the car.\n    # The Python code below doesn't actually calculate this probability,\n    # as the problem is a well-known probability puzzle (Monty Hall problem),\n    # and the answer is based on the explanation above.\n\n    # We return the gate number you should choose after being given the option to switch.\n    return 2\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    result = 468 / 9\n    return int(result)\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # x represents the amount spent each time\n    total_spent = 6 * x  # Multiply by the number of times Sean went to the restaurant\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total_sum = sum(i * (i + 1) for i in range(1, 32))\n    return total_sum\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total money David had originally.\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    # David is left with 1/3 of his original money after spending on CDs and batteries\n    # (x - 75) is the money left after buying CDs\n    # (x - 75) - 1/4 * (x - 75) is the money left after buying batteries\n    equation = Eq((x - 75) - 1/4 * (x - 75), x/3)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 trainers can catch 7 pokemon in 7 minutes, \n    # each trainer catches 1 pokemon in 7 minutes.\n    # Therefore, in 49 minutes, each trainer can catch 7 pokemon (49/7 = 7).\n    # So to catch 49 pokemon, we only need 49 / 7 = 7 trainers.\n\n    return 7\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 13  # Tommy and his 12 friends\n    minutes_per_person = 142\n\n    total_minutes = total_people * minutes_per_person\n    return total_minutes\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since order matters and each student gets exactly one book,\n    # this is a permutation problem.\n    total_books = 7\n    students = 3\n\n    # First, choose 3 books out of 7 \n    books_chosen = combinations(total_books, students)\n    \n    # Now, for each of those selections, there are 3! ways to distribute them\n    # because each student must get a different book\n    ans = books_chosen * factorial(students)\n\n    return ans\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The 99-digit number is a repetition of '928' 33 times.\n    # Since the number 928 itself is divisible by 9 (as 9+2+8=19, and 19 is divisible by 9),\n    # the remainder when the entire 99-digit number is divided by 9 will be the same as the \n    # remainder when 33 (the number of times '928' is repeated) is divided by 9.\n\n    # Calculate the remainder\n    remainder = 33 % 9\n\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown value\n    op = symbols('oplus')\n    \n    # Setup the equation based on the problem\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n    \n    # Solve for the unknown value\n    solutions = solve(equation, op)\n    \n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage = (incorrect_identifications / total_people) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # Total litres of orange juice\n    container_volume = 2  # Litres each container can hold\n\n    num_containers = total_volume // container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 0, 2, 9]\n    min_even_number = float('inf')\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Check if the last digit is even\n            num = int(''.join(map(str, perm)))  # Join the digits to form the number\n            if num >= 1000 and num < min_even_number:  # Must be a 4-digit number\n                min_even_number = num\n    return min_even_number\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Assume the number of bars each person bought is n\n    # Eliot's total cost in pennies is 12 * n\n    # Maya's total cost in pennies is 17 * n\n    # Eliot pays with 3 pounds in pennies, which is 3 * 100 pennies\n    # Maya pays with 4 pounds in pennies, which is 4 * 100 pennies\n    # They both receive the same amount of change\n    # So, the equation for the change received by both would be:\n    # 300 (Eliot's payment) - 12 * n (Eliot's cost) = 400 (Maya's payment) - 17 * n (Maya's cost)\n\n    # Solve for n\n    for n in range(1, 300//12 + 1):  # +1 because range is exclusive on the upper bound\n        eliot_change = 300 - 12 * n\n        maya_change = 400 - 17 * n\n        if eliot_change == maya_change:\n            return n\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let's denote the three numbers as a, b, and c with a being the smallest and c being the largest\n    # So, we can write the following equations from the given information:\n    # a + b + c = 56 (The sum of the three numbers is 56)\n    # (a + b) / 2 = 14 (The average of the smallest two numbers is 14)\n    # => a + b = 28\n    # (b + c) / 2 = 22 (The average of the largest two numbers is 22)\n    # => b + c = 44\n    # Now we'll subtract the second equation from the first to find 'c':\n    # (a + b + c) - (a + b) = 56 - 28\n    # => c = 56 - 28 = 28\n    # Now using c, we'll find 'b' from the third equation:\n    # b + c = 44\n    # => b = 44 - c\n    # => b = 44 - 28 = 16\n    # Finally, we substitute 'b' back into the second equation to find 'a':\n    # a + b = 28\n    # => a = 28 - b\n    # => a = 28 - 16 = 12\n    # Now that we have all three numbers, a=12, b=16, and c=28, the median is 'b' which is 16\n\n    return 16\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n    \n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare = 1.2\n    total_cost = 8.5\n    initial_km = 1.8\n    cost_above_base = total_cost - base_fare\n\n    additional_km = cost_above_base / additional_fare\n    total_km = initial_km + additional_km\n\n    return total_km\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    # Calculate the result of the first equation 66 * 2 + 66 * 3\n    result1 = 66 * 2 + 66 * 3\n    # Calculate the result of the second equation 66 * 5\n    result2 = 66 * 5\n    # Compare if the results are the same\n    return result1 == result2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + bun, 41)\n\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    min_apples_per_student = 3\n    # Using the Pigeonhole Principle, divide total apples by minimum number per student and round down.\n    max_students = apples // min_apples_per_student\n    \n    # Because at least one student gets at least 3 apples, subtract 2 because those 2 apples can be given to\n    # the other students with 1 apple less than minimum per student. So the class size is reduced by one.\n    class_size = max_students - 2\n    \n    return class_size\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    original_bars = bars_received * 2\n    return original_bars\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_current_age = julia_age + mother_age + father_age\n    required_total_age = 100\n    years_until_total_100 = required_total_age - total_current_age\n    return years_until_total_100\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    big_bumper_cars = 36 // 4\n    small_bumper_cars = 12 // 2\n    \n    total_cars = big_bumper_cars + small_bumper_cars\n    return total_cars\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_in_pound = 16\n    pounds_in_kg = 2.2\n    newborn_tiger_cubs_weight_ounces = 56\n\n    newborn_tiger_cubs_weight_pounds = newborn_tiger_cubs_weight_ounces / ounces_in_pound\n    newborn_tiger_cubs_weight_kg = newborn_tiger_cubs_weight_pounds / pounds_in_kg\n\n    return round(newborn_tiger_cubs_weight_kg, 1)\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    ascending_sum = sum(range(5, 81))\n    descending_sum = ascending_sum - 80\n    total_sum = ascending_sum + descending_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_discount_percentage = (total_discount / original_price) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Total number of people\n    total_people = 5\n    # The number of ways to arrange A, B, and C in the correct order\n    ordered_abc = 1\n    \n    # The number of ways to arrange the remaining two people\n    remaining_people = total_people - 3\n    arrangements_of_remaining = factorial(remaining_people)\n    \n    # The number of ways to insert A, B, and C sequence into the places of the 5 people\n    insert_positions = factorial(total_people - 2)\n    \n    count = ordered_abc * arrangements_of_remaining * insert_positions\n    \n    return count\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc = p[0]*100 + p[1]*10 + p[2]\n        bcd = p[1]*100 + p[2]*10 + p[3]\n        cde = p[2]*100 + p[3]*10 + p[4]\n        defg = p[3]*100 + p[4]*10 + p[5]\n        efg = p[4]*100 + p[5]*10 + p[6]\n        fgh = p[5]*100 + p[6]*10 + p[7]\n        ghi = p[6]*100 + p[7]*10 + p[8]\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        if A > max_A:\n            max_A = A\n    return max_A\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019/(7*i*(i+7)) for i in range(3, 2019, 7))\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    perm = sorted([''.join(p) for p in permutations(digits, 6)])\n    return perm[504]  # List indexing starts at 0, so the 505th element is at index 504\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 36)\n    equation2 = Eq(88 * girls + 91 * boys, 36 * 89)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Analyzing the given pattern:\n    # 10 * 10 = 1 suggests that we're looking for some property intrinsic to the number.\n    # Observing that 10 - 1 = 9 and 9 is the product of (10 - 1), a pattern arises:\n    # (First digit - 1) * (Second digit - 1)\n    # For 11*11 = (1-1)(1-1) = 0*0 = 0, but in the question, it is given as 4\n    # So the pattern seems to be the product of digit differences squared\n    # (First digit - 1) squared + (Second digit - 1) squared\n    # Apply this logic to 55*55:\n    # (5-1)(5-1) = 4*4 = 16\n\n    # As the same logic applied to the previous examples doesn't yield the given results,\n    # it seems we need to modify our approach.\n\n    # Looking at 11 * 11 = 4, it could be the pattern (1 * 1) + (1 * 1),\n    # Adding individual digit's squares.\n    # Therefore, for 55 * 55, it should be (5 * 5) + (5 * 5)\n\n    return (5**2) + (5**2)\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    digits = [0, 2, 3]\n    \n    count = 0\n    # Iterate over all possible placements for the hundreds, tens, and ones place\n    for hundred in digits:\n        if hundred != 0:  # hundred's place cannot be 0 in a three-digit number\n            for ten in digits:\n                for one in digits:\n                    if hundred != ten and hundred != one and ten != one:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    total_work = 1\n    alice_work_per_day = 1 / 40\n    bob_work_per_day = 1 / 60\n    total_days_worked = 27\n\n    # Let x be the days Alice takes off\n    # Bob works for all 27 days, Alice works for (27 - x) days\n    # Their combined work for the days worked should equal the total work (1 job)\n    # Equation: alice_work_per_day * (27 - x) + bob_work_per_day * 27 = total_work\n    # Solve for x\n\n    # Collect terms\n    x = (alice_work_per_day * total_days_worked + bob_work_per_day * total_days_worked - total_work) / alice_work_per_day\n\n    return int(x)\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_6 = {6 * i for i in range(1, 50//6 + 1)}\n    multiples_9 = {9 * j for j in range(1, 50//9 + 1)}\n\n    common_multiples = multiples_6.intersection(multiples_9)\n    ans = [cm for cm in common_multiples if cm > 20 and cm < 50]\n\n    return ans\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red, white / 2)\n    equation2 = Eq(white, 3 * black / 4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    common_difference = term_8 - term_7\n\n    term_100 = term_7 + (100 - 7) * common_difference\n\n    return term_100\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Since there are only 2 types of socks, red and blue,\n    # in the worst case scenario, we can draw one sock of each color without getting a pair.\n    # Therefore, we need to draw one more sock to be sure to have a matching pair.\n    return 2 + 1  # One red, one blue + one more sock\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    number_of_dogs = 3\n    years_passed_since_then = 4 + 2\n\n    combined_age_in_2_years = combined_age_4_years_ago + (number_of_dogs * years_passed_since_then)\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return n\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters = 4\n    sisters_apples_each = 5\n    apples_left = 20\n\n    total_apples = justin_apples + sisters * sisters_apples_each + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano = 30\n    violin = 41\n    both = 15\n    \n    # Total students is the sum of students who play piano and violin,\n    # minus the students who play both (since they have been counted twice).\n    total_students = piano + violin - both\n    \n    return total_students\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    # Initial ratio equation: ryan/audrey = 2/7\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    # Final ratio equation: (ryan + 20) / (audrey - 80) = 1/3\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hours = 8\n    minutes = 30\n    # Angle covered by the hour hand from 12'o clock:\n    hour_angle = (hours * 30) + (minutes * 0.5)\n    # Angle covered by the minute hand from 12'o clock:\n    minute_angle = minutes * 6\n    # Absolute angle between the two hands\n    angle = abs(hour_angle - minute_angle)\n    \n    # Smaller angle between hands\n    if angle > 180:\n        angle = 360 - angle\n    \n    return angle\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n\n    black_beads_in_full_patterns = full_patterns * 3\n    black_beads_in_partial_pattern = min(remaining_beads, 3)\n\n    total_black_beads = black_beads_in_full_patterns + black_beads_in_partial_pattern\n    \n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27  # Total minutes required for the morning routine\n    required_time = datetime.strptime(\"7:45\", \"%H:%M\")  # Time to arrive at school\n    \n    # Calculating the latest wake up time\n    latest_wake_up_time = required_time - timedelta(minutes=total_minutes)\n    \n    return latest_wake_up_time.strftime(\"%H:%M\")  # Returning the result in HH:MM format\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    total = 0\n    add = True\n\n    for i in range(60, 0, -1):\n        if add:\n            total += i\n        else:\n            total -= i\n        if i % 4 == 1:\n            add = not add  # Toggle the addition/subtraction after every fourth number\n\n    return total\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coin_values = [1, 2, 5]\n    possible_totals = set()\n    \n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                total = i + j + k\n                possible_totals.add(total)\n                \n    ans = len(possible_totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    entrances = [1, 2, 3, 4]\n    for order in permutations(['Joe', 'Mike', 'Tina']):\n        for entry_joe in entrances:\n            for entry_mike in entrances:\n                if entry_joe != entry_mike:  # Joe and Mike cannot join the same entrance\n                    for entry_tina in entrances:\n                        if entry_tina != entry_joe and entry_tina != entry_mike:\n                            total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice / 5\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    \n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    result = percentage * quantity\n    return result\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_hours = time_days * 24 + time_hours  # converting time to hours\n\n    average_speed = distance / total_hours  # calculating average speed\n\n    return round(average_speed)  # rounding to the nearest integer\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 0.40  # 40% in decimal form\n    volume2 = 3  # in liters\n    concentration2 = 0.70  # 70% in decimal form\n    \n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n    new_concentration = total_juice / total_volume\n    \n    return new_concentration * 100  # convert back to percentage\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    # Calculate the first multiple of 11 greater than or equal to 50\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    \n    # Calculate the last multiple of 11 less than or equal to 150\n    last_multiple = (150 // 11) * 11\n\n    # Calculate the number of multiples based on the distance between the first and last multiples\n    count = ((last_multiple - first_multiple) // 11) + 1\n    \n    return count\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n\n    # Since the number of chickens is equal to the number of ducks, let's say each pair has 2 heads and 4 chicken legs + 2 duck legs = 6 legs.\n    # Let c be the number of chicken-duck pairs and d be the number of cows.\n\n    # Given:\n    # c + d = total_heads (each pair of chicken and duck count as one head, and each cow has one head)\n    # c * 6 + d * 4 = total_legs (each chicken-duck pair has 6 legs, and each cow has 4 legs)\n\n    # Hence,\n    # c + d = 51\n    # 6c + 4d = 160\n\n    # From the first equation, d = 51 - c\n    # Replacing d in the second equation:\n    # 6c + 4(51 - c) = 160\n    # 6c + 204 - 4c = 160\n    # 2c = 160 - 204\n    # 2c = -44\n    # c = -44 / 2\n    # c = -22 (this is not a possible answer since c cannot be negative)\n\n    # There seems to be a mistake in the setup; let's correct it.\n    # The correct set up is 2c (chickens and ducks) + d (cows) = 51\n    # and 2*2c (chicken legs) + 2c (duck legs) + 4d (cow legs) = 160.\n    # The system of equations becomes:\n    # 2c + d = 51\n    # 4c + 2c + 4d = 160\n    # Simplifying the second equation:\n    # 6c + 4d = 160\n\n    # Now solving the system of equations:\n    for c in range(total_heads + 1):  # Chicken-duck pairs can be from 0 to 51\n        d = total_heads - 2 * c\n        if 6 * c + 4 * d == total_legs:\n            return c # Since chickens are equal to ducks, just return number of chickens, which is half of c\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_more = 777\n\n    remaining_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_more\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + Albert_and_Bella + people_behind_Albert\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Get a list of primes between 20 and 30\n    primes = list(primerange(20, 30))\n    \n    # Return the first prime in the list\n    return primes[0] if primes else None\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let the initial number of women be W and men be M\n    # After the first bus, W-36 = (3/5)(M)\n    # After the second bus, W-36 = M-48\n    # Solving these two equations, we get W = 84 and M = 120\n    # The total number of people initially is W + M\n    W_minus_36 = (3/5) * 48\n    W = W_minus_36 + 36\n    M = W_minus_36 + 48\n    total_people = W + M\n    return int(total_people)\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fatouma_age = symbols('fatouma_age')\n\n    equation = Eq(fatouma_age + 2, 2 * (fatouma_age - 5))\n\n    solutions = solve(equation, fatouma_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensure x2 is greater than x1 to avoid repeats\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:  # ensure x3 is greater than x2 to avoid repeats\n                ways.append((x1, x2, x3))\n    return ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # There are 9 different heights from 124cm to 132cm inclusive (132 - 124 + 1)\n    num_heights = 132 - 124 + 1\n\n    # To ensure that at least 4 students are of the same height (worst case scenario),\n    # we need one more than 3 students for each of the other heights.\n    # Thus, we take 3 students for each of the 8 possible heights (not including the one with 4 students)\n    # and add 1 student to ensure at least one height has 4 students.\n    class_size = 3 * (num_heights - 1) + 4\n\n    return class_size\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # The winning strategy for Fred is to always make the total number of oranges\n    # that have been taken by both players a multiple of 4 after his turn.\n    # This is because no matter what George does (taking 1, 2, or 3 oranges),\n    # Fred can always take a number that will sum up to a multiple of 4,\n    # and eventually Fred will take the last orange if he follows this strategy.\n    # Given there are 15 oranges, Fred needs to take away a number of oranges\n    # that will leave 12 on the table (the next multiple of 4 below 15).\n\n    oranges_initial = 15\n    oranges_after_fred_turn = 12\n    fred_first_turn = oranges_initial - oranges_after_fred_turn\n    return fred_first_turn\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    # Using the inclusion-exclusion principle\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years from now until their sum of ages is 48\n    # Oliver's age x years from now: 20 + x\n    # Lin's age x years from now: 26 + x\n    # Sum of their ages x years from now: (20 + x) + (26 + x)\n\n    # Equation for the sum of their ages being 48:\n    # (20 + x) + (26 + x) = 48\n    # 46 + 2x = 48\n    # 2x = 2\n    # x = 1\n\n    return 1\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n    \n    # Since there is no pole right outside her school and her house,\n    # the number of intervals is one less than the number of poles.\n    num_intervals = num_poles - 1\n    \n    total_distance = num_intervals * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    centimeters = 736\n    meters = centimeters / 100\n    return meters\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    # Find all factors of 245 and check if multiplying by them results in a perfect cube\n    from sympy import factorint\n\n    factors = factorint(245)\n    cube_factor = 1\n\n    for prime, power in factors.items():\n        # For each factor, we need to determine the power it should be raised \n        # to such that when multiplied by 245 it becomes a cube.\n        # A perfect cube has all prime factors to the power of a multiple of 3.\n        # Hence, we need to find the smallest multiple of 3 that is larger than the\n        # current power of the factor in 245 and then divide this by the current power.\n        \n        # Increase power to the next multiple of 3\n        while power % 3 != 0:\n            power += 1\n        \n        # Now, calculate how many times we need to multiply the prime factor to achieve the cube\n        cube_factor *= prime ** (power // 3)\n\n    return cube_factor\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        e, s, a, m, o = p\n        if e == '0' or s == '0' or a == '0' or m == '0' or o == '0':  # Ensuring none of the digits used is zero\n            continue\n        esse = int(e+s+s+e)\n        sasmo = int(s+a+s+m+o)\n        if esse + 2018 == sasmo:\n            return sum(int(digit) for digit in {s, a, m, o})\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    fraction = 1/4\n    last_year = this_year * fraction + this_year\n    \n    return last_year\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    series = [64, -62, 60, -58, 56, -54, 52, -50, 48, -46]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 1 - 1  # minus one for sick leave and one for personal leave\n    attendance_rate = (present_students / total_students) * 100\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator1 = 5\n    denominator1 = 15\n    numerator2 = 8\n    ans = (numerator2 * denominator1) / numerator1\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    common_difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_series = 0\n    \n    for i in range(2, 2018):\n        for j in range(1, i):\n            sum_series += j / i\n    \n    return sum_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x-100))\n    return closest_number\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # As per Tim's position:\n    # 4th from front means there are 3 people in front of him\n    # 3rd from back means there are 2 people behind him\n    # 1st from left means there is no one to his left\n    # 4th from right means there are 3 people to his right\n    # Total rows = people in front of Tim + Tim himself + people behind Tim\n    # Total columns = people to the right of Tim + Tim + people to his left\n    rows = 3 + 1 + 2\n    columns = 3 + 1 + 0\n    # Total number of band members = rows * columns\n    total_members = rows * columns\n    return total_members\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_saving = 2.40\n    target_amount = 150\n    days_needed = math.ceil(target_amount / daily_saving)\n    weeks_needed = math.ceil(days_needed / 7)\n\n    return weeks_needed\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for apples and oranges\n    apples, oranges = symbols('apples oranges')\n\n    # The initial ratio is 3:8, which means 3 parts apples and 8 parts oranges\n    initial_ratio = Eq(apples/oranges, 3/8)\n    \n    # After removing one apple, the ratio becomes 1:3\n    new_ratio = Eq((apples - 1)/oranges, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n\n    # Return the number of oranges\n    return solutions[oranges]\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = 6.5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = 'STATISTICS'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    word_length = len(word)\n    arrangements = factorial(word_length)\n\n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n\n    return arrangements\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_of_first_14 = sum(range(1, 15))\n    total = sum_of_first_14 + 2019\n    \n    for smallest in range(1, total // 8):\n        sequence_sum = sum(range(smallest, smallest + 8))\n        if sequence_sum == total:\n            return smallest\n            \nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the weight of 1 rabbit, k be the weight of 1 kangaroo, and c be the weight of 1 chicken.\n    r, k, c = symbols('r k c')\n\n    # Given that the weight of 2 rabbits is equal to 6 chickens\n    equation1 = Eq(2 * r, 6 * c)\n\n    # Given that the weight of 3 kangaroos is equal to 4 rabbits\n    equation2 = Eq(3 * k, 4 * r)\n\n    # One kangaroo weighs the same as 'n' chickens\n    # So, instead of finding the weight of 1 chicken, we solve for the weight of one kangaroo in terms of chickens\n    equation3 = Eq(k, c * symbols('n'))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (r, k, c, symbols('n')))\n\n    return solutions[symbols('n')]\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    ans = common_factor * (836 + 162 + 2)\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    days_for_cut_wood = 3\n    days_for_weaving_grass = 1\n    days_for_drying_wood = 5\n    days_for_mowing_grass = 1\n    days_for_prepare_food = 1\n    days_for_soaking_grass = 1\n    days_for_choose_wood = 1\n\n    # Since some tasks can be performed simultaneously, we only need to consider the tasks that\n    # take the longest time as they will be the bottleneck for the entire process.\n    max_days = max(days_for_cut_wood + days_for_drying_wood + days_for_choose_wood, \n                   days_for_mowing_grass + days_for_soaking_grass + days_for_weaving_grass,\n                   days_for_prepare_food)\n\n    return max_days\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_then = ashley_age_now - 3\n    brother_age_then = ashley_age_then - 2\n\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    min_participants_per_school = 4\n    max_schools = participants // min_participants_per_school\n\n    return max_schools\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is in the exact middle and is also the 7th from the front,\n    # there must be 6 people in front of her, and also 6 people behind her.\n    # That makes the total number of dwarves 6 (in front) + 6 (behind) = 12\n    dwarves_total = 6 + 6\n    return dwarves_total\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fracts = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - (2018 + i) // 5\n        sum_fracts += frac_part\n        \n    return sum_fracts\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    faster_speed = 48\n    slower_speed = 36\n    difference_in_distance = 70\n\n    relative_speed = faster_speed + slower_speed\n    time_to_meet = difference_in_distance / relative_speed\n\n    faster_distance = faster_speed * time_to_meet\n    total_distance = faster_distance + (slower_speed * time_to_meet)\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num * 6) ** (1/3) % 1 == 0 and (num / 6) ** 0.5 % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Considering Tim's position from front to back and back to front\n    # Let's deduce the total number of rows\n    rows = 4 + 3 - 1  # since Tim is counted in both front-to-back and back-to-front\n    \n    # Considering Tim's position from left to right and right to left\n    # Let's deduce the total number of columns\n    columns = 4 + 7 - 1  # since Tim is counted in both left-to-right and right-to-left\n    \n    # Total number of band members is rows multiplied by columns\n    total_members = rows * columns\n    return total_members\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount // 3  # Zoey has twice as much left\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n    \n    # If Lily gave Gigi 36 tonnes of wheat, Lily would still have 26 tonnes more than Gigi\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    \n    # Lily's wheat is 8 times that of Gigi\n    equation2 = Eq(lily, 8 * gigi)\n    \n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat_6 = 1  # Start with at least 1 boat\n    while True:\n        students_with_extra_boat = (boat_6 + 1) * 6\n        students_with_one_fewer_boat = (boat_6 - 1) * 9\n        \n        if students_with_extra_boat == students_with_one_fewer_boat:\n            return students_with_extra_boat\n        \n        boat_6 += 1\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolates, friends = symbols('chocolates friends')\n    \n    # If she gives each friend 18 pieces, she'll have 41 in excess, so\n    # total chocolates = 18 * friends + 41\n    equation1 = Eq(chocolates, 18 * friends + 41)\n    \n    # If she gives each friend 23 pieces, she will be short of 34 pieces, so\n    # total chocolates + 34 = 23 * friends\n    equation2 = Eq(chocolates + 34, 23 * friends)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # Calculate remaining chocolates if each friend is given 20 pieces\n    remaining_chocolates = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens >= 10:\n                break  # tens digit must be a single digit\n            ones = thousands + hundreds + tens\n            if ones >= 10:\n                continue  # ones digit must be a single digit\n            if thousands + hundreds + tens + ones == 16:\n                return ones\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    # Add the numbers directly\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Rasidah's and Chai Seng's initial amounts of money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - (3/5) * rasidah\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - (6/7) * chai_seng\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, 1/2 * rasidah_left)\n    \n    # Solve the system of equations to find the amounts of money Rasidah and Chai Seng had initially\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # Initialize counter for the number of 2-digit numbers\n    count = 0\n    \n    # Create a list of the digits we can use\n    digits = [0, 2, 4]\n    \n    # Loop for the first digit (must not be 0 for a two-digit number)\n    for first_digit in digits[1:]:\n        # Loop for the second digit (can be any of the three digits including 0)\n        for second_digit in digits:\n            # Increase the count for each two-digit number formed\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([2, 4, 6, 8], 4):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance is the same in both directions\n    distance_uphill = 3 * 5\n    distance_downhill = 2 * 10\n    # it implies that distance_uphill == distance_downhill, which can be simply called distance\n    distance = distance_uphill\n\n    # Total distance of the whole trip (uphill and downhill)\n    total_distance = distance * 2\n\n    # Total time for the whole trip\n    total_time = 3 + 2\n\n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Given Rate Information\n    rate_initial = 2 # $/kWh for the first 5 kWh\n    rate_additional = 1 # $/kWh for the additional kWh\n    service_fee = 3 # $ for the fixed service fee\n    total_money = 63 # $ available for usage\n\n    # Cost for the first 5 kWh\n    cost_first_5_kWh = 5 * rate_initial # $\n\n    # Remaining money after paying for the first 5 kWh and the service fee\n    remaining_money = total_money - cost_first_5_kWh - service_fee # $\n\n    # Additional kWh she can use\n    additional_kWh = remaining_money / rate_additional\n\n    # Total kWh = First 5 kWh + Additional kWh\n    total_kWh = 5 + additional_kWh\n\n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    part = 54\n    whole = 63\n\n    fraction_of_whole = part / whole\n    answer = fraction_of_whole * 7\n\n    return int(answer)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    A = 10 * x + y\n    B = 1000 * 4 + 10 * x + y\n    \n    equation = Eq(B, 7 * A + 10)\n    solutions = solve(equation, (x, y))\n\n    return int(solutions[A])\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed = (total_cookies + small_box_capacity - 1) // small_box_capacity\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    base = 4320\n    factor = 3/2\n    n = 0\n    \n    # Prime factorize the base\n    factorization = {}\n    for i in [2, 3, 5]:\n        count = 0\n        while base % i == 0:\n            base //= i\n            count += 1\n        if count > 0:\n            factorization[i] = count\n    \n    # Since we multiply by (3/2)^n, we can only increase the power of 3 by n\n    # and decrease the power of 2 by n. So the maximum n will be the power of 2 in the factorization.\n    max_n = factorization[2]\n\n    return max_n\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pairs = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                pairs += 1\n    return pairs\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]\n    return primes[2]  # The missing prime number in the sequence\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    fruit_juice_in_first_punch = 20 * 0.35\n    fruit_juice_in_second_punch = 30 * 0.60\n    total_fruit_juice = fruit_juice_in_first_punch + fruit_juice_in_second_punch\n    concentration = (total_fruit_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original amount of grain in warehouse B\n    b = symbols('b')\n\n    # Warehouse A originally had 50 tons, shipped in 12, now has 62 tons\n    # Warehouse B originally had b tons, shipped out 16, now has b-16 tons\n    # Grain in A is 2 times that of B: 62 = 2 * (b - 16)\n    \n    equation = Eq(62, 2 * (b - 16))\n    \n    # Solve the equation to find the original amount of grain in warehouse B\n    solution = solve(equation, b)\n    \n    # Solution is a list, we want the first (and should be only) element\n    return solution[0]\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Using the Inclusion-Exclusion principle to find the maximum number of students who passed all three tests\n\n    # Total number of students who passed at least one test\n    total_passed_at_least_one_test = 43\n\n    # Number of students who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Sum of students passing individual tests\n    sum_individual = passed_math + passed_science + passed_english\n\n    # If we assume all students are distinct then the overlap of students passing two or more tests would be:\n    # sum_individual - total_passed_at_least_one_test\n    # To maximize the number of students who passed all three tests, we assume\n    # all overlaps are students passing all three tests, hence:\n    max_all_three_tests = sum_individual - total_passed_at_least_one_test\n\n    return max(max_all_three_tests, 0)  # To ensure that the number is not negative\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_letters = len(word)\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    ans = factorial(total_letters) // denominator\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.50 * 0.20 * 6000\n    return ans\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    pencils = 0\n\n    for pencil_count in range(400, 501):\n        if pencil_count % 4 == 1 and pencil_count % 5 == 2 and pencil_count % 7 == 4:\n            pencils = pencil_count\n            break\n\n    return pencils\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen trades 3 fishes for 1 rabbit\n    fishes_for_rabbit = 3\n\n    # Oscar trades 2 rabbits for 3 packs of wheat\n    rabbits_for_wheat = 2 / 3\n\n    # To find out how many fishes are needed for one pack of wheat,\n    # multiply the ratio of fishes to rabbits by the reciprocal of the ratio of rabbits to wheat.\n    fishes_for_wheat = fishes_for_rabbit * (1 / rabbits_for_wheat)\n\n    return fishes_for_wheat\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    ans = 21 - 11\n    return ans\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # x -> number of people, y -> number of benches\n    for x in range(1, 1000): # making an assumption on a reasonable number of people\n        if (x + 7) % 3 == 0 and (x - 21) % 7 == 0:\n            return x\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(0, 10):\n        for x2 in range(0, 10):\n            for x3 in range(0, 10):\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    empty_bottle_mass, juice_mass = symbols('empty_bottle_mass juice_mass')\n    equation1 = Eq((5/6) * juice_mass + empty_bottle_mass, 4.6)\n    equation2 = Eq((2/3) * juice_mass + empty_bottle_mass, 4.45)\n    \n    solutions = solve((equation1, equation2), (empty_bottle_mass, juice_mass))\n    \n    return solutions[empty_bottle_mass] * 1000  # convert kg to grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Lisa's favourite number\n    fav_number = symbols('fav_number')\n\n    # Define the equation based on the problem statement\n    equation = Eq(2 * fav_number - 3, 19)\n\n    # Solve the equation to find Lisa's favourite number\n    fav_number_solution = solve(equation, fav_number)\n\n    # Get the solution as an integer since favourite number is expected to be an integer\n    return fav_number_solution[0]\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Given that Dell had 32 stickers and it was twice as many as Ginnie\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2  # Ginnie had half the number of stickers Dell had\n\n    # Given that Ginnie had 4 times as many stickers as Lyn\n    lyn_stickers = ginnie_stickers // 4  # Lyn had a quarter the number of stickers Ginnie had\n\n    # Total stickers that Ginnie and Lyn have altogether\n    total_stickers = ginnie_stickers + lyn_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Skip even numbers for the ones place.\n                if (hundreds + tens + ones) == 5:\n                    count += 1  # Found a valid 3-digit odd number\n\n    return count\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    sum_positive = sum(range(2, 21, 2))\n    sum_negative = sum(range(1, 20, 2))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Assuming the task is to calculate a multiplication that is not within the standard multiplication table\n    # which usually goes up to 12x12.\n    # Given no specific numbers are provided, we need to define two arbitrary numbers larger than 12\n    # to demonstrate a multiplication case. We can use 13 and 15 as an example.\n    number1 = 13\n    number2 = 15\n    ans = number1 * number2\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    while True:\n        term = n * (n + 1) // 2  # The given sequence is actually the sequence of triangular numbers\n        if term > 99:\n            break\n        n += 1\n    return (n - 1) * n // 2  # Subtract 1 to get the last two-digit number in the sequence\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    # Initialize count of total pages and sum of digits used\n    total_pages = 0\n    sum_of_digits = 0\n\n    # We know maximum of 9 single digit numbers, 90 two digit numbers, and so on\n    # Iterating over page number length\n    for digit_length in range(1, 5):\n        # Calculate maximum number of pages with current digit length\n        num_pages = 9 * (10 ** (digit_length - 1))\n        # Calculate digits needed for current set of pages\n        digits_needed = digit_length * num_pages\n        \n        # Check if we have enough digits left for the current set of pages\n        if sum_of_digits + digits_needed < 1101:\n            # If yes, add the number of pages and digits used to the total\n            total_pages += num_pages\n            sum_of_digits += digits_needed\n        else:\n            # If no, find out how many pages we can number with the remaining digits\n            remaining_digits = 1101 - sum_of_digits\n            additional_pages = remaining_digits // digit_length\n            \n            # Add the additional pages to the total pages count\n            total_pages += additional_pages\n            break\n    \n    return total_pages\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    mag_cost = 1.60\n\n    # Hypothesize that all money is spent on magazines\n    max_mags = total_cost // mag_cost\n    for mags in range(int(max_mags) + 1):\n        # Calculate the remaining amount after buying magazines\n        remaining = total_cost - (mags * mag_cost)\n        # Check if the remaining amount can buy books without leftover\n        if remaining % book_cost == 0:\n            return mags\n    return 0  # In case there's no solution, but there should be one.\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_give = 38\n\n    sister_notebooks = andy_notebooks - andy_give - ((andy_notebooks - andy_give) // 2)\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is less than 100\n        base_ten_age_with_zero = int(str(age) + \"0\")\n        base_three_age = int(str(age), 3)\n        if base_ten_age_with_zero == base_three_age:\n            return age\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Total flowers\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    # Ratio of the number of orchids to tulips\n    equation2 = Eq(orchids / tulips, 3 / 5)\n    # Remaining flowers after sales\n    equation3 = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):  # Range of 2-digit numbers\n        if i % 7 == 0 and 7007 % i == 0:  # Check if i is a multiple of 7 and a factor of 7007\n            factors.append(i)\n    # There should be exactly two factors found for a product of 7007 that are 2-digit multiples of 7\n    if len(factors) == 2:\n        return sum(factors)\n    else:\n        return None\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    # Since the table can be rotated, we fix one person's position to avoid counting rotations as different permutations.\n    # Then we arrange the remaining 6 people around the table.\n    ans = factorial(6)\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 55))\n    for i in primes:\n        if 55 - i in primes:\n            return i * (55 - i)\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # Since the pins are identical, we use stars and bars method (n+k-1 choose k-1)\n    from math import comb\n    # Here, n = 10 (number of identical pins) and k = 3 (number of piles)\n    n = 10\n    k = 3\n    # Using the formula to calculate the combinations\n    ans = comb(n + k - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    cheesecake_cost = cheesecake_to_cookie_ratio * cookie_cost\n    cake_to_cheesecake_ratio = 3 / 2\n    chocolate_cake_cost = cheesecake_cost * cake_to_cheesecake_ratio\n\n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Divisibility rule for 9: The sum of the digits must be divisible by 9\n    fixed_digits_sum = 2 + 0 + 1 + 9  # Sum of the fixed digits in the number\n    remaining_sum = 9 - (fixed_digits_sum % 9)  # Remaining sum required for divisibility by 9\n    \n    # We need to get the possible combinations of three different digits A, M, and C\n    # such that their sum is equal to the remaining_sum\n    # and they are amongst the unused digits.\n    unused_digits = set(range(10)) - {2, 0, 1, 9}  # Digits not already used\n\n    for A in unused_digits:\n        for M in unused_digits - {A}:\n            for C in unused_digits - {A, M}:\n                if A + M + C == remaining_sum:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\n# Call the function and assign the result to the variable 'ans'\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n    \n    equation1 = Eq(mike_candy - valeria_candy, 6 - 22)  # After they eat the same amount\n    equation2 = Eq(mike_candy + valeria_candy, 36)      # Total candies they have\n    \n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n    \n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    # When Melissa was 8, her mother was 32, so the difference in age is 32 - 8\n    age_difference = 32 - 8\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation1 = Eq(mother_now, 3 * melissa_now)\n    # The difference in their ages remains constant\n    equation2 = Eq(mother_now - melissa_now, age_difference)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n    \n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert each decimal to a fraction\n    recurring_decimal = Fraction(473, 99)  # 4.7373...\n    decimal_1 = Fraction(473, 100)         # 4.73\n    decimal_2 = Fraction(477, 100)         # 4.77\n    decimal_3 = Fraction(4737, 1000)       # 4.737\n    \n    # Find the smallest one\n    smallest = min(recurring_decimal, decimal_1, decimal_2, decimal_3)\n\n    # Convert smallest fraction back to a decimal for consistency with question\n    ans = smallest.numerator / smallest.denominator\n    return ans\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    half_before_joel = (remaining_plants + 2) * 2\n    remaining_before_valerie = half_before_joel\n    half_before_valerie = (remaining_before_valerie + 3) * 2\n    initial_plants = (half_before_valerie + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    decimal_part = '857142'  # Pattern of the recurring decimal 6/7\n    length_of_pattern = len(decimal_part)\n    \n    # Calculate the total sum of the pattern when fully repeated\n    sum_of_pattern = sum(int(digit) for digit in decimal_part)\n    \n    # Times the pattern is fully repeated in 58 digits\n    full_repeats = 58 // length_of_pattern\n    \n    # Remaining digits after full repeat\n    remaining_digits = 58 % length_of_pattern\n    \n    # Sum for the full repeats\n    sum_for_full_repeats = sum_of_pattern * full_repeats\n    \n    # Sum for the remaining digits\n    sum_for_remaining_digits = sum(int(decimal_part[i]) for i in range(remaining_digits))\n    \n    # Total sum\n    total_sum = sum_for_full_repeats + sum_for_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # in meters\n    tunnel_length = 544  # in meters\n    train_speed = 52  # in meters per second\n    \n    # Duration to pass the entire tunnel is the time taken for the train to cover its own length plus the tunnel's length\n    # total distance to cover = train's length + tunnel's length\n    total_distance = train_length + tunnel_length\n\n    # Time = Distance / Speed\n    time_to_pass = total_distance / train_speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let x be the original number of eggs in the basket\n    # Equation based on the problem statement:\n    # (x / 2) + 16 - ((x - ((x / 2) + 16)) / 2) - 7 = 18\n    # Simplify the equation and solve for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    eq = Eq((x / 2) + 16 - ((x - ((x / 2) + 16)) / 2) - 7, 18)\n    initial_eggs = solve(eq, x)[0]\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_for_one_coin = ['H', 'T']\n    total_outcomes = len(outcomes_for_one_coin) * len(outcomes_for_one_coin)\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    total_students = 120\n    total_buckets = 180\n    \n    # Let the number of P6 students be x\n    # Then the number of P1 students is (total_students - x)\n    # each P6 student carried 2 buckets, so x P6 students carried 2x buckets\n    # each P1 student carried 0.5 buckets (since it takes 2 P1 students to carry 1 bucket)\n    # (total_students - x) P1 students carried (total_students - x) * 0.5 buckets\n    # The total number of buckets is the sum of buckets carried by P6 and P1 students\n    # Therefore, we have the equation: 2x + 0.5(total_students - x) = total_buckets\n    \n    # Rearranging the equation gives us:\n    # 2x + 60 - 0.5x = 180\n    # 1.5x + 60 = 180\n    # 1.5x = 120\n    # x = 120 / 1.5\n    # x = 80\n    \n    # Number of P6 students:\n    p6_students = 120 / 1.5\n    \n    # Number of P1 students:\n    p1_students = total_students - p6_students\n\n    return p1_students\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    PA, x = symbols('PA x')\n    PB, PC, PD, PG = 60 * 10**0.5, 60 * 5**0.5, 120 * 2**0.5, 36 * 7**0.5\n    \n    # Deduce the relationship between PA and the other lengths using Pythagorean theorem:\n    # Because PB, PC, PD are diagonals on the faces of the cube, their formulas relate to PA in the following way:\n    # PB^2 = PA^2 + x^2 + x^2\n    # PC^2 = PA^2 + x^2 + (2*x)^2\n    # PD^2 = PA^2 + (2*x)^2 + (2*x)^2\n    # PG = 3*x (diagonal through the center of the cube)\n    \n    # Now turning the above relationships into equations\n    equations = [\n        Eq(PB**2, PA**2 + x**2 + x**2),\n        Eq(PC**2, PA**2 + x**2 + (2 * x)**2),\n        Eq(PD**2, PA**2 + (2 * x)**2 + (2 * x)**2),\n        Eq(PG, 3 * x)\n    ]\n\n    # Solve the system of equations\n    solutions = solve(equations, (PA, x))\n\n    # Extracting the positive value for PA as lengths cannot be negative\n    PA_value = [sol[0] for sol in solutions if sol[0] > 0]\n\n    # Since there would be two solutions, one positive and one negative, we want the positive\n    return PA_value[0]\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    \n    pencils = 55\n    pens = 143\n    \n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # The two equations representing the word problem\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations for the cost of basketball and volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Return the cost of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Correct way to find the dividend\n    dividend = (quotient * divisor) + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_per_box = 14 / boxes_for_14kg\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit -> ratio of fish to rabbit = 3:1\n    fish_for_rabbit = 3 / 1\n\n    # Oscar trades 2 rabbits for 3 packs of wheat -> ratio of rabbit to wheat = 2:3\n    rabbits_for_wheat = 2 / 3\n\n    # To determine how many fish for one pack of wheat, we need to multiply the two ratios\n    fish_for_wheat = fish_for_rabbit * (1 / rabbits_for_wheat)\n\n    return fish_for_wheat\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    # Calculate the age difference between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # Define Eddie's age when he is 18\n    eddie_future_age = 18\n    \n    # Calculate Mike's age when Eddie is 18\n    mike_future_age = eddie_future_age + age_difference\n    \n    return mike_future_age\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    # Let the total number of students initially be x.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Initial number of boys is 40% of x; initial number of girls is 60% of x.\n    initial_boys = 0.4 * x\n    initial_girls = 0.6 * x\n    \n    # After 16 boys left and 16 girls entered, boys make up 2/15 of the students.\n    # So, the number of boys is now initial_boys - 16, and number of girls is initial_girls + 16.\n    # The total number of students now is x (same as initial, because the number of students leaving and entering is same).\n    final_boys = initial_boys - 16\n    final_girls = initial_girls + 16\n    \n    # Equation representing that boys are now 2/15 of the total number of students.\n    equation = Eq(final_boys, 2/15 * x)\n    \n    # Solve the equation to find x.\n    total_students_solution = solve(equation, x)\n    \n    # Calculate the number of girls now.\n    current_girls = initial_girls + 16\n\n    # Substitute the value of x in current_girls.\n    current_girls_count = current_girls.subs(x, total_students_solution[0])\n\n    return int(current_girls_count)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    prime_count = 0\n    unique_primes = set()\n\n    for i in range(1, 4): # Length of permutations from 1 to 3\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if num < 100 and isprime(num):\n                unique_primes.add(num)\n\n    prime_count = len(unique_primes)\n    return prime_count\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    division_1 = numerator / denominator\n\n    division_2_numerator = 3.5 + Fraction(14, 3) + Fraction(32, 15)\n    division_2_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    division_2 = division_2_numerator / division_2_denominator\n\n    ans = division_1 / division_2\n\n    return float(ans)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(len(str_N)):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n\n    # The students who like both swimming and jogging have been counted twice in swimming and jogging\n    both = swimming + jogging - (total_students - neither)\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    work_rate_A = 1 / 15\n    # B's work rate per day\n    work_rate_B = 1 / 10\n    # Total work rate per day when both work together\n    combined_work_rate = work_rate_A + work_rate_B\n\n    # Work completed in 4 days by both\n    work_completed = 4 * combined_work_rate\n\n    # Remaining work\n    remaining_work = 1 - work_completed\n\n    # Days for B to finish the remaining job alone\n    days_for_B = remaining_work / work_rate_B\n\n    return days_for_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    part2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5\n    cici_rate = 1 / 6\n    total_rate = linda_rate + cici_rate\n\n    total_time = 2 * 60  # Convert 2 hours to minutes\n\n    total_problems = total_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    import math\n    \n    ans = math.gcd(16, 28)\n    \n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for number in range(14, 17):\n        if number % 2 != 0:\n            return number\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # The condition is that Amy has 4 more apples than John\n    # So we get the equation amy - x = john + x + 4\n\n    # Solve for x\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - (late_time % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = sum(numbers)\n    mean_value = 37\n    number_of_values = 10\n    total_required_sum = mean_value * number_of_values\n    missing_number = total_required_sum - total_sum\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # The pasture can feed 14 goats for 15 days, which is equivalent to feeding 14*15 = 210 goat-days\n    goat_days = 14 * 15\n\n    # A goat eats as much grass as 4 rabbits. This means the pasture can feed 4*70 = 280 rabbits for 8 days,\n    # which is equivalent to feeding 280*8 = 2240 rabbit-days\n    rabbit_days = 70 * 4 * 8\n\n    # The pasture can feed the same total amount of goat-days as rabbit-days\n    # So, we equate goat_days to rabbit_days to find the total amount of 'food' the pasture can provide\n    total_food = goat_days  # or rabbit_days, since they should be equal\n\n    # Now we calculate the daily consumption of 17 goats and 20 rabbits\n    # 17 goats would consume equivalent to 17*4 = 68 rabbits worth of grass per day\n    daily_consumption = 17 * 4 + 20  # in rabbit units\n\n    # Finally, we find out for how many days the pasture can feed the 17 goats and 20 rabbits\n    num_days = total_food / daily_consumption\n\n    return num_days\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n\n    total_cost = cost_per_person * num_people\n\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return round(total_cost_for_seven_books, 2)\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq(chan / 4, (toh / 3) + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    \n    solved_x = solve(equation, x)\n\n    return solved_x[0]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tasha, sandra, riley = symbols('tasha sandra riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3/5) * sandra)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    total_height = 45\n    climb_rate = 10\n    night_slide_start = 1\n    height_after_day = 0\n    day = 1\n\n    while True:\n        height_after_day += climb_rate\n        if height_after_day >= total_height:\n            break\n        night_slide = night_slide_start * day\n        height_after_day -= night_slide\n        if height_after_day < 0:\n            height_after_day = 0\n        day += 1\n    return day\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    # Base number is 4 and the number of terms is 3\n    base_num = 4\n    terms = 3\n    sum_result = 0\n\n    for i in range(terms):\n        sum_result += int(str(base_num) * (i + 1))\n    \n    return sum_result\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Calculate the number of ways to split the number 6\n    # minus 1 for the case (6) because it's not a sum of two or more numbers\n    for i in range(1, 6):\n        for j in range(i, 6):\n            if i + j == 6:\n                count += 1\n            for k in range(j, 6):\n                if i + j + k == 6:\n                    count += 1\n                for m in range(k, 6):\n                    if i + j + k + m == 6:\n                        count += 1\n                        # No need to check for more than 4 numbers\n                        # because 1+1+1+1+1+1 is the only combination for 6 numbers\n                        # and that's already included in the above iterations\n    return count\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # \"Angel\" represents the following numbers \"0141705021\"\n    angel_numbers = \"0141705021\"\n    # Mapping of letters in \"Angel\" to their corresponding numbers\n    angel_mapping = {letter: number for letter, number in zip(\"Angel\", angel_numbers)}\n\n    # Create a dictionary to map letters in \"Devil\" to their corresponding numbers\n    # using the angel_mapping for the letters that appear in both words\n    devil_mapping = {}\n    for letter in \"Devil\":\n        if letter in angel_mapping:\n            devil_mapping[letter] = angel_mapping[letter]\n        else:\n            # Assign a placeholder for the letters in \"Devil\" that don't appear in \"Angel\"\n            devil_mapping[letter] = '*'\n\n    # Andy tries the following numbers: \"4005220912\"\n    andy_try = \"4005220912\"\n\n    # Create a password for \"Devil\" by replacing the letters with their corresponding numbers\n    devil_password = \"\".join(devil_mapping.get(letter, '*') for letter in \"Devil\")\n\n    # Check if Andy's attempt matches the pattern of the password for \"Devil\"\n    if devil_password == andy_try:\n        # Andy can unlock the treasure chest\n        return True\n    else:\n        # Andy cannot unlock the treasure chest, provide the correct password\n        # Find the unique number for 'D' and 'v' since all other letters are present in \"Angel\"\n        missing_numbers = set(\"0123456789\").difference(angel_numbers)\n        for number in missing_numbers:\n            if number not in andy_try:\n                if devil_mapping['D'] == '*':\n                    devil_mapping['D'] = number\n                else:\n                    devil_mapping['v'] = number\n\n        # Construct the correct password\n        correct_password = \"\".join(devil_mapping[letter] for letter in \"Devil\")\n\n        return correct_password\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    x, a = symbols('x a', real=True, positive=True)\n    eq = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n    sol = solve(eq, x)\n    x_val = sol[0]\n\n    result_expr = sqrt(x_val**2 + 8 * x_val)\n    result = result_expr.subs(x, x_val).simplify()\n\n    return result\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n    \n    # Function to convert recurring decimal to fraction\n    def recurring_decimal_to_fraction(decimal_part, recurring_part):\n        if decimal_part:\n            non_recurring_length = len(decimal_part)\n            non_recurring_fraction = Fraction(int(decimal_part), 10**non_recurring_length)\n        else:\n            non_recurring_fraction = 0\n            non_recurring_length = 0\n        \n        recurring_length = len(recurring_part)\n        recurring_fraction = Fraction(int(recurring_part), (10**recurring_length - 1) * 10**non_recurring_length)\n        \n        return non_recurring_fraction + recurring_fraction\n\n    # Convert each recurring decimal to fraction and add them together\n    total = (recurring_decimal_to_fraction('0.', '01') +\n             recurring_decimal_to_fraction('0.1', '2') * 2 +\n             recurring_decimal_to_fraction('0.2', '3') * 3 +\n             recurring_decimal_to_fraction('0.3', '4') * 4 +\n             recurring_decimal_to_fraction('0.4', '5') * 5 +\n             recurring_decimal_to_fraction('0.5', '4') * 4 +\n             recurring_decimal_to_fraction('0.7', '8') * 8)\n    \n    # Convert the fraction back to decimal\n    ans = total.numerator / total.denominator\n\n    return ans\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Using the pigeonhole principle, calculate the minimum number in the pen\n    # with the most sheep. The formula is: ceil(total_sheep/total_pens)\n    min_in_most_pens = -(-total_sheep // total_pens)\n\n    return min_in_most_pens\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if all((i % 3 == 2, i % 4 == 2, i % 5 == 2, i % 7 == 5)):\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total_members = boys + girls\n\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = mean_age_boys * boys\n    total_age_girls = mean_age_girls * girls\n\n    total_age_all = total_age_boys + total_age_girls\n\n    mean_age_all = total_age_all / total_members\n\n    return mean_age_all\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 6), (8, 13)]\n    ans = solve_congruence(*congruences)\n    num = ans[0]\n    while num < 200:\n        num += ans[1]\n    if num < 300:\n        return num\n    else:\n        return None\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    # The least number of days it will take for all three to meet is the\n    # least common multiple (LCM) of their park visit cycles\n    days_raye = 6\n    days_simon = 12\n    days_taylor = 16\n    \n    # Calculate the LCM\n    ans = lcm(days_raye, days_simon, days_taylor)\n    \n    return ans\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Encoding the letters in 'Angel' with their corresponding numbers\n    angel_to_num = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    # Decoding the given number to 'Angel'\n    num_to_angel = {v: k for k, v in angel_to_num.items()}\n\n    # Original password as numbers\n    angel_password = '0141705021'\n    # Andy's attempt to unlock\n    andy_attempt = '4005220912'\n\n    # Translate Andy's attempt back using the 'Angel' encoding\n    devil_from_angel = ''.join([num_to_angel[int(andy_attempt[i])] for i in range(len(andy_attempt))])\n\n    # Check if Andy's translation matches 'Devil'\n    if devil_from_angel == 'Devil':\n        return True  # Andy can unlock it\n    else:\n        # Provide the correct password by translating 'Devil' using 'Angel' encoding\n        correct_devil_password = ''.join([str(angel_to_num[letter]) for letter in 'Devil'])\n        return correct_devil_password\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    green = 7\n    yellow = 5\n    red = 2\n\n    # To be sure to have 5 balls of the same color, we have to consider the worst-case scenario.\n    # This would be taking all red balls, then all yellow balls, and then one more ball\n    # (any color will make either green or yellow reach 5).\n\n    # Because if we took 4 reds and 4 yellows, the next ball, no matter the color,\n    # would be the 5th ball of that color.\n\n    # So she needs to take all 2 reds, all 5 yellows and then 1 more to be sure to have 5 of the same color\n    balls_needed = red + yellow + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    common_difference = 3\n    last_shown_term = 31\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # Where a_n is the nth term, a_1 is the first term, and d is the common difference\n    # We want to find the first term (a_1), so we rearrange the formula to solve for a_1: a_1 = a_n - (n - 1)d\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1\n    ben_speed = 0.6\n    total_time = 10 * 60  # convert from minutes to seconds\n\n    # Since they are swimming towards each other, we add their speeds\n    relative_speed = sam_speed + ben_speed  # relative speed at which they approach each other\n\n    # The number of times they will meet is the number of pool lengths covered by the combined speeds in the given time\n    num_meetings = total_time * relative_speed / pool_length\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    def new_operation(a, b):\n        return (a // 10) * (a % 10) + (b // 10) * (b % 10)\n\n    return new_operation(89, 75)\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of a chair and table\n    mass_chair, mass_table = symbols('mass_chair mass_table')\n\n    # Equation representing the total mass of 3 tables and 4 chairs\n    total_mass_eq = Eq(3 * mass_table, 4 * mass_chair)\n\n    # Equation representing that a table is 2kg heavier than a chair\n    weight_diff_eq = Eq(mass_table, mass_chair + 2)\n\n    # Solve the system of equations\n    solutions = solve((total_mass_eq, weight_diff_eq), (mass_chair, mass_table))\n\n    return solutions[mass_table]\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    max_temp = max(temperatures)\n    min_temp = min(temperatures)\n    temperature_difference = max_temp - min_temp\n    return temperature_difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_and_cindy_average = 120\n    doris_height = 126\n    \n    total_height = 2 * bob_and_cindy_average + doris_height\n    average_height = total_height / 3\n    \n    return average_height\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of pies each had\n    x = symbols('x')\n\n    # Equation after Mrs Tan bought 12 more pies and Mrs Lim gave away 4 pies\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation\n    pies_at_first = solve(equation, x)[0]\n\n    return pies_at_first\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let destin and nephew be the current ages of Destin and his nephew\n    destin, nephew = symbols('destin nephew')\n    \n    # In 6 years, Destin will be twice his nephew's age\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    \n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n    \n    # Solve the system of equations for the current ages of Destin and his nephew\n    solutions = solve((equation1, equation2), (destin, nephew))\n    \n    # Calculate the sum of their ages in 10 years' time\n    sum_of_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n    \n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    \n    girls = 40 - boys  # Total number of pupils minus number of boys\n    total_pencils = 35 * 40  # Average pencils * total pupils\n    boys_pencils = 20 * boys  # Average pencils for boys * number of boys\n    girls_pencils = 60 * girls  # Average pencils for girls * number of girls\n    \n    equation = Eq(boys_pencils + girls_pencils, total_pencils)\n    \n    number_of_boys = solve(equation, boys)\n    \n    return number_of_boys[0]\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)  # (hour, minute)\n    arrival_time = (10, 22)   # (hour, minute)\n\n    # Calculate the time difference in minutes\n    minutes_difference = (arrival_time[0] - departure_time[0]) * 60 + (arrival_time[1] - departure_time[1])\n\n    return minutes_difference\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    result = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return result\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    full_repeats = 50 // len(pattern)\n    partial_repeats = 50 % len(pattern)\n    \n    sum_full_repeats = sum(int(digit) for digit in pattern) * full_repeats\n    sum_partial_repeats = sum(int(pattern[i]) for i in range(partial_repeats))\n    \n    total_sum = sum_full_repeats + sum_partial_repeats\n    return total_sum\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3/10) * 54 + 0.3 * 45 + 30/100\n    return result\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Find all possible combinations of 2 cards for Candy\n    candy_combinations = list(combinations(cards, 2))\n    \n    # Find all possible combinations of 3 cards for Candice\n    candice_combinations = list(combinations(cards, 3))\n    \n    # Create a dictionary to map the product to the combination of cards for Candy\n    candy_products = {prod(combo): combo for combo in candy_combinations}\n    \n    # Loop through each combination of Candice and check if the product matches any of Candy's products\n    for combo in candice_combinations:\n        if prod(combo) in candy_products:\n            # Combine the cards Candy and Candice have chosen and convert to a set\n            chosen_cards = set(candy_products[prod(combo)] + combo)\n            # Find the card that was not chosen\n            not_chosen_card = set(cards).difference(chosen_cards).pop()\n            return not_chosen_card\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    first_group_fraction = 3/5\n    second_group_fraction = 1/4\n    first_group_sweets = 6\n    second_group_sweets = 4\n    third_group_sweets = 5\n    \n    # Number of sweets received by the first group\n    sweets_first_group = total_sweets * first_group_fraction\n    \n    # Number of students in the first group\n    students_first_group = sweets_first_group / first_group_sweets\n    \n    # Remaining sweets after the first group is served\n    remaining_sweets = total_sweets - sweets_first_group\n    \n    # Number of sweets received by the second group\n    sweets_second_group = remaining_sweets * second_group_fraction\n    \n    # Number of students in the second group\n    students_second_group = sweets_second_group / second_group_sweets\n    \n    # Remaining students after the second group is served\n    remaining_students = (remaining_sweets - sweets_second_group) / third_group_sweets\n    \n    # Total number of students in the classroom\n    total_students = students_first_group + students_second_group + remaining_students\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    tablets_type1 = 25\n    tablets_type2 = 20\n\n    cycle_days = lcm(tablets_type1, tablets_type2)\n\n    first_of_march = 1\n    next_start_day = first_of_march + cycle_days\n\n    return next_start_day\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    # Let father_current_age be the current age of Tom's father\n\n    # When Tom reaches his father's current age (father_current_age), his father will be 70\n    # So the difference between their ages (father_current_age - tom_age) will be the same\n    # even in the future when Tom reaches his father's current age.\n\n    # Since we know the future age of the father, we can find his current age by subtracting the\n    # difference between their current ages, which is also the age Tom will need to reach 70.\n    father_current_age = father_future_age - (father_current_age - tom_age)\n\n    # Now we have a simple equation:\n    # father_future_age = father_current_age + (father_current_age - tom_age)\n    # 70 = father_current_age + (father_current_age - 10)\n    # 70 = 2 * father_current_age - 10\n    # 2 * father_current_age = 70 + 10\n    # 2 * father_current_age = 80\n    # father_current_age = 80 / 2\n    father_current_age = 80 / 2\n    \n    return father_current_age\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:  # 1, 2, and 3 are not composite numbers\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    # Check odd numbers in descending order for the given condition\n    for odd_number in range(999, 0, -2):  # Assuming 999 as a large enough starting point\n        can_split = False\n        for c1 in range(4, odd_number - 7, 2):  # 4 is the smallest composite number\n            if is_composite(c1):\n                for c2 in range(4, odd_number - c1 - 3, 2):\n                    if is_composite(c2):\n                        c3 = odd_number - c1 - c2\n                        if c3 > 2 and c3 % 2 != 0 and is_composite(c3):  # c3 must be odd and composite\n                            can_split = True\n                            break\n            if can_split:\n                break\n        if not can_split:\n            return odd_number\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    first_value = 3 + 1/4  # This is 3 1/4 as a decimal\n    second_value = 1 + 3/4  # This is 1 3/4 as a decimal\n\n    # Calculate the difference\n    difference = first_value - second_value\n\n    return round(difference, 2)  # Round the result to 2 decimal places\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_prize = 580\n    boy_prize = 8\n    girl_prize = 5\n    \n    for girls in range(1, total_prize // girl_prize):\n        boys = 3 * girls\n        if boys * boy_prize + girls * girl_prize == total_prize:\n            return boys\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 4 == 3:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    perimeter = 12\n    for x in range(1, perimeter // 2):\n        for y in range(x, (perimeter - x) // 2 + 1):\n            z = perimeter - x - y\n            if x + y > z:  # Triangle inequality theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_rate = 0.15\n    tax_rate = 0.08\n    \n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    dividend = 104\n    divisor = 4\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_initial = 86\n    lena_gave_away = 29\n    lena_final = 100\n\n    strawberries_received = lena_final - (lena_initial - lena_gave_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the elder brother, and y be the current age of the younger brother.\n    x, y = symbols('x y')\n\n    # According to the problem, their ages add up to 42.\n    equation1 = Eq(x + y, 42)\n\n    # A few years ago, the elder brother was y years old, which was twice the current age of y/2.\n    equation2 = Eq(x - (x - y), y / 2)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the age of the elder brother.\n    return solutions[x]\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    students_class_A = 8\n    students_class_B = 12\n    students_class_C = 20\n\n    # Calculate the greatest common divisor for the three classes\n    gcd_AB = gcd(students_class_A, students_class_B)\n    gcd_ABC = gcd(gcd_AB, students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_only = 3\n\n    # Calculate the number of students who passed the second exam\n    passed_second_exam = total_students - failed_second_exam\n\n    # Calculate the number of students who passed both exams\n    passed_both = (passed_first_exam + passed_second_exam - total_students) - passed_second_only\n\n    # Calculate the number of students who passed only the first exam\n    passed_first_only = passed_first_exam - passed_both\n\n    return passed_first_only\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes directly from A to D\n    direct_AD = 6\n    \n    # Routes from A to B to D (A to B, then B to C, then C to D)\n    via_BCD = 7 * 5 * 2\n    \n    # Routes from A to C to D (A to C, then C to D)\n    via_CD = 4 * 2\n    \n    # Total ways = Direct routes + Routes from A through B and C to D + Routes from A through C to D\n    total_ways = direct_AD + via_BCD + via_CD\n    \n    return total_ways\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pencil_cost = 2\n    total_cost = 20\n    num_pencils = 3\n    num_pens = 2\n\n    total_pencil_cost = pencil_cost * num_pencils\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / num_pens\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n    hay_per_cattle_per_day = total_hay / (cattle * days)\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c = chocolate cupcakes, l = cheese cupcakes\n    c, l = symbols('c l')\n\n    # Set up the equations based on the problem statement\n    # Total cupcakes baked: c + l = 255\n    # Cupcakes left after selling: c - 0.4c = l - 0.75l\n    equation1 = Eq(c + l, 255)\n    equation2 = Eq(0.6*c, 0.25*l)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (c, l))\n\n    # Calculate the cupcakes left\n    chocolate_left = 0.6 * solutions[c]\n    cheese_left = 0.25 * solutions[l]\n\n    # Return the number of cupcakes Eric had left (either chocolate or cheese)\n    return chocolate_left\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_kilograms = 960\n    kilograms_per_box = 8\n\n    number_of_boxes = total_kilograms // kilograms_per_box\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # Get all factors of 210\n    factors = divisors(210)\n    for youngest in factors:\n        for middle in factors:\n            for eldest in factors:\n                # Make sure ages are distinct, less than 10, and in ascending order\n                if youngest < middle < eldest < 10 and youngest * middle * eldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3/8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # We are given:\n    # (1/4)*b = (2/5)*g\n    # and\n    # b + g = 39\n    # We need to find (b - g)\n\n    # Import fractions for accurate division\n    from fractions import Fraction\n\n    # Coefficients for boys and girls from the equation\n    coef_boys = Fraction(1, 4)\n    coef_girls = Fraction(2, 5)\n\n    # Using the coefficients, we express boys in terms of girls:\n    # b = (coef_girls / coef_boys) * g\n    b_in_terms_of_g = coef_girls / coef_boys\n\n    # Total number of students in terms of girls\n    # b + g = b_in_terms_of_g * g + g = 39\n    g = 39 / (b_in_terms_of_g + 1)\n\n    # Calculate b using the value of g\n    b = b_in_terms_of_g * g\n\n    # Calculate the difference between the number of boys and girls\n    difference = b - g\n\n    return int(difference)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n    full_days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts - full_days * locusts_per_day\n    return remaining_locusts\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n    original_ratio = Eq(don / ben, 2/3)\n    new_ratio = Eq((don + 10) / (ben - 5), 6/7)\n\n    solutions = solve((original_ratio, new_ratio), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of $5 notes and t be the number of $10 notes\n    f, t = symbols('f t')\n\n    # Number of notes before buying the bag\n    total_notes_eq = Eq(f + t, 116)\n\n    # Number of notes after spending\n    spent_f = f - 0.25 * f\n    spent_t = t - 0.60 * t\n\n    # Relationship after spending\n    notes_left_eq = Eq(spent_t, (4/7) * spent_f)\n\n    solutions = solve((total_notes_eq, notes_left_eq), (f, t))\n    \n    # Total cost of the bag\n    cost = 0.60 * solutions[t] * 10 + 0.25 * solutions[f] * 5\n\n    return cost\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    # amount of money Cecilia had\n    cecilia = 80\n    # Cecilia had four times as much money as Kenny\n    kenny = cecilia / 4\n    # Calculate the total amount of money both had\n    total = cecilia + kenny\n\n    return total\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    ans = sum_of_squares - 20\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # The pattern is an alternating sequence of addition and subtraction.\n    # The sum S can be split into the sum of even numbers minus the sum of the odd numbers up to 2015,\n    # plus the last term which is an even number 2016.\n\n    # Calculate the number of even terms and the number of odd terms\n    # Odd terms: 1, 3, 5, ..., 2015\n    # Even terms: 2, 4, 6, ..., 2014, 2016\n    number_of_odd_terms = (2015 - 1) // 2 + 1\n    number_of_even_terms = (2016 - 2) // 2 + 1\n\n    # Calculate the sum of the first n odd numbers: (n / 2) * (first_odd + last_odd)\n    sum_of_odds = (number_of_odd_terms / 2) * (1 + 2015)\n\n    # Calculate the sum of the first n even numbers: (n / 2) * (first_even + last_even)\n    sum_of_evens = (number_of_even_terms / 2) * (2 + 2016)\n\n    # Subtract the sum of odd numbers from the sum of even numbers\n    result = sum_of_evens - sum_of_odds\n\n    return int(result)\n\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_per_tree = 10\n    # Since trees are planted at both ends, we subtract one tree to account for double counting\n    num_trees = (road_length // distance_per_tree) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    total_cups = 30\n    total_milk_needed = milk_per_cup * total_cups\n    return total_milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"21{i}{j}35\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    min_students_in_most_popular_weekday = (total_students + days_in_week - 1) // days_in_week\n\n    return min_students_in_most_popular_weekday\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial as fact\n\ndef solution():\n    # The group has 7 students: 2 twin boys, 3 triplet girls, and 2 other students\n    # The triplet girls want to stand together, so we can treat them as one unit. This leaves 5 \"units\" to arrange.\n    # The number of arrangements for these 5 units is factorial(5).\n    units_arrangement = fact(5)\n    \n    # The triplet girls can be arranged among themselves in factorial(3) ways.\n    triplet_arrangement = fact(3)\n    \n    # Now consider the arrangement for the twin boys. Assuming they're always together,\n    # we place them in any of the 5 positions, which is not allowed.\n    # Since there are 4 spaces where the twins can be placed (not next to each other), \n    # we subtract factorial(4) from the total arrangements of the units to exclude those cases.\n    forbidden_arrangements = fact(4)\n    \n    # Calculate the total arrangements with all constraints.\n    ans = (units_arrangement - forbidden_arrangements) * triplet_arrangement\n    return ans\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20 / 100\n    girls_wearing_glasses = total_girls * percentage_wearing_glasses\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # The week is a recurrent cycle of 7 days including exactly 1 Friday.\n    # In 55 days, there are 55 // 7 full weeks, which gives us the number of full cycles.\n    \n    full_weeks = 55 // 7  # This will give us the full weeks in 55 days\n    rem_days = 55 % 7  # The remainder will give us the number of days outside the full weeks\n    \n    # If the vacation starts on a Friday, then the last of the remaining days will also be a Friday.\n    # So we add 1 to the number of full weeks which is the greatest number of Fridays.\n    \n    most_fridays = full_weeks + (1 if rem_days > 0 else 0)\n    \n    return most_fridays\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    cost_of_pencil = 2\n    cost_of_pen = 4\n    pencils_for_a_pen = cost_of_pen / cost_of_pencil\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    # least common multiple (lcm) of 2, 3, 4, 5, 6, 8, 9\n    from math import lcm\n    lcm_val = lcm(2, 3, 4, 5, 6, 8, 9)\n\n    # start checking from the least common multiple for the smallest N\n    N = lcm_val\n    while True:\n        if (N % 7) == 5:\n            return N\n        else:\n            N += lcm_val\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n\n    total_cost_mugs = cost_per_mug * 7\n    total_cost_pens = cost_per_pen * 5\n\n    total_cost = total_cost_mugs + total_cost_pens\n    change_from_10 = 10 - total_cost\n\n    return change_from_10\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return \"0.3\" if 0.3 > 0.25 else \"25%\"\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song_per_child = 3\n    num_songs = 2\n    num_children = 50\n\n    total_time = time_per_song_per_child * num_songs * num_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_of_one_apple = weight_of_three_apples // 3\n\n    weight_of_five_apples = weight_of_one_apple * 5\n    weight_of_basket = total_weight_with_apples - weight_of_five_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since the question just asks for the value of \"1\", which is a constant value,\n    # the solution function can directly return this value.\n    return 1\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n    years = (final_amount / principal) ** (1/rate) - 1\n    \n    if abs(years - 5) < 0.01:  # Allowing for minor discrepancies due to rounding\n        return \"Right\"\n    else:\n        return int(years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    required_loafs = 35\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    ans = lcm\n    while str(ans)[-1] != '2':  # The number must end in a '2'\n        ans += lcm  # Increment by the LCM until the last digit is '2'\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # initially, there were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    \n    # after selling, a total of 48 cookies and cakes were left\n    equation2 = Eq((cookies - 39) + (cakes - 17), 48)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39  # cookies left after selling\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    weeks = 2\n    return days_in_a_week * weeks\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position1_value = 3 * 10**2  # Value of the 3 in the hundred's place\n    position2_value = 3 * 10**5  # Value of the 3 in the hundred-thousand's place\n\n    ans = position2_value - position1_value\n    return ans\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Letting the productivity of John, Jonah, and Angus be j, o, and a respectively\n    j, o, a = symbols('j o a')\n\n    # Equation for John, Jonah, and Angus working together\n    equation1 = Eq(1 / j + 1 / o + 1 / a, 1 / 27)\n\n    # Equation for Jonah and Angus working without John \n    equation2 = Eq(1 / o + 1 / a, 1 / 36)\n\n    # We want to find the time John takes to build the wall on his own, which is 1/j\n\n    # Solve the equations for j\n    solutions = solve((equation1, equation2), (j, o, a))\n    \n    # Extract the solution for John's productivity 1/j, which gives us the time John takes\n    return solutions[j]\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    return 1001 // 10\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # The largest number that cannot be made from the combination of two\n    # coins of denomination 4z and 5z can be found using the Frobenius coin problem\n    # which states that the largest value that cannot be obtained (the Frobenius number)\n    # from two coins of coprime denominations a and b is a*b - a - b.\n    # Since 4z and 5z are coprime, we apply the formula directly.\n    largest_nonpayable = 4 * 5 - 4 - 5\n    return largest_nonpayable\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # combined age five years ago\n    combined_age_5_years_ago = 14\n    # Since 5 years have passed for both Claire and Daniel, we add 10 years (5 years each)\n    present_combined_age = combined_age_5_years_ago + (2 * 5)\n    # After 3 more years, we will add 3 years for each, so we add 6 years to the present combined age\n    future_combined_age = present_combined_age + (2 * 3)\n    return future_combined_age\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n\n    # A number is divisible by 12 if and only if it is divisible by 3 and 4.\n    # Divisibility by 3: The sum of the digits must be divisible by 3.\n    # Divisibility by 4: The last two digits must be divisible by 4.\n    \n    for a in range(10):\n        for b in range(10):\n            if (1 + 0 + 8 + 2 + a + b) % 3 == 0 and (10 * a + b) % 4 == 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    boys_fraction_removed = 1 / 11\n    \n    # Let the number of boys be b\n    # Then the number of girls is total_students - b\n    # If we remove 1/11 of boys and 5 girls:\n    # (b - 1/11 * b) = (total_students - b - 5)\n    # Solving for b gives us the original number of boys\n    \n    b = symbols('b')\n    equation = Eq(b - b * boys_fraction_removed, total_students - b - 5)\n    original_boys = solve(equation, b)[0]\n    return original_boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    maturation_days = 30\n    total_days = 40\n\n    # Ermintrude lays eggs for 40 days, but only the ones laid in the first 10 days\n    # can become adults within the 40-day period\n    days_when_eggs_become_adults = total_days - maturation_days\n\n    # Calculate the number of new adult fleas\n    new_adult_fleas = days_when_eggs_become_adults * daily_eggs\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    water_fraction = 3 / 4\n    water_in_orange_drink = total_orange_drink * water_fraction\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # Assign the right-side value to a variable\n    right_side_value = 7\n    \n    # Multiply the right-side value by 3 to cancel the division\n    left_side_value = right_side_value * 3\n    \n    # Now add the ~~~ value which was subtracted from 24 in the original equation\n    # Accordingly, to find ~~~, we subtract the left_side_value from 24\n    tilde_value = 24 - left_side_value\n    \n    return tilde_value\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 3 * story_books + 12\n    total = story_books + magazines\n    return total\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    number_of_rows = 22\n    difference = 3\n\n    num_students = (number_of_rows / 2) * (2 * first_term + (number_of_rows - 1) * difference)\n\n    return int(num_students)\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 0.30 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n\n    return money_left\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed fractions to improper fractions\n    fraction1 = Fraction(21 * 286 + 21, 286)\n    fraction2 = Fraction(6 * 2530 + 647, 2530)\n    fraction3 = Fraction(1 * 2829 + 1370, 2829)\n\n    # Perform the calculation\n    result = fraction1 / fraction2 * fraction3\n  \n    return result\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The dimensions of the cuboid are 6, 10, 12\n    length, width, height = 6, 10, 12\n    # The cuboid is divided into 720 small cubes, so each side is divided into (720)^(1/3)\n    cubes_per_side = int((720) ** (1/3))\n    \n    # The number of small cubes with one face painted from one dimension would be\n    # (cubes_per_side - 2) * (cubes_per_side) for both opposite sides, because the cubes on the edges\n    # will either not be painted or painted on more than one face.\n    cubes_painted_one_face_length = (length // cubes_per_side - 2) * (width // cubes_per_side) * 2\n    cubes_painted_one_face_width = (width // cubes_per_side - 2) * (height // cubes_per_side) * 2\n    cubes_painted_one_face_height = (height // cubes_per_side - 2) * (length // cubes_per_side) * 2\n\n    # Add up the number of small cubes with one face painted pink from all dimensions:\n    num_cubes_painted_one_face = (\n        cubes_painted_one_face_length +\n        cubes_painted_one_face_width +\n        cubes_painted_one_face_height\n    )\n\n    return num_cubes_painted_one_face\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the amount of work Star does per hour,\n    # and 'n' be the amount of work Nini does per hour.\n    s, n = symbols('s n')\n\n    # Star types for 5 hours then Nini types for 20 hours\n    equation1 = Eq(5*s + 20*n, 1)\n    \n    # Star types for 20 hours then Nini types for 8 hours\n    equation2 = Eq(20*s + 8*n, 1)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Nini's work rate is 'n' and we need to find how long for Nini to complete 1 job\n    nini_time = 1 / solutions[n]\n    \n    return nini_time\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for i in range(10, 100):  # Range of 2-digit numbers\n        if i % 9 == 5 and i % 11 == 2:\n            return i\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # Given 140 pieces of candy\n    total_candy = 140\n    \n    # Prime factorize 140\n    prime_factors = divisors(total_candy)  # Get all divisors of 140\n\n    # Initialize count of ways to 0\n    count_ways = 0\n\n    # Filter out divisors that are not odd (since we want to distribute in odd piles)\n    for divisor in prime_factors:\n        if divisor % 2 != 0:\n            count_ways += 1\n\n    return count_ways\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # There are 20 keys and 20 different classrooms, which means there is 1 correct key for each classroom.\n    # In the worst case, the warden tries to match the correct key by trying each key one by one.\n    # For the first classroom, he would at most try all 20 keys.\n    # For the second classroom, he would at most try the remaining 19 keys (since one key is already matched).\n    # This pattern continues until he tries just 1 key for the last classroom.\n    # Thus, the total number of tries in the worst case scenario would be the sum of the first 20 natural numbers.\n    \n    max_tries = sum(range(1, 21)) # This computes the sum from 1 to 20 inclusive\n    return max_tries\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Since newspapers are printed as a booklet, sheets have two pages on each side.\n    # When taking out the third sheet, we have the 5th and 6th pages in the sequence.\n    # In booklet printing, pages are paired such that the sum of their numbers equals the total number of pages plus 1.\n    return (56 + 1) - 5 + (56 + 1) - 6\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    number_of_girls = total_students * fraction_girls\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, Stack B has 16 stones left. Stack A still has 20.\n    # For Jerry to win, he must ensure that he leaves an equal number of stones in both stacks after his turn.\n    # This will force Tom into a losing position, because whatever Tom takes from one stack,\n    # Jerry can take the same amount from the other stack and maintain the balance until the last stone.\n    # Since Stack A has 20 and Stack B has 16, Jerry should take 4 stones from Stack A.\n    # This will leave both stacks with 16 stones, putting Jerry in a winning position.\n    \n    stack_a = 20\n    stack_b = 16  # After Tom took 4 from Stack B\n    stones_to_take = stack_a - stack_b\n    \n    return f\"Jerry must take {stones_to_take} stone(s) from Stack A.\"\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # Define the exchange rates\n    peaches_per_watermelon = 6\n    apples_per_peach = 3 / 2\n    \n    # Calculate the number of apples per watermelon\n    apples_per_watermelon = peaches_per_watermelon * apples_per_peach\n    \n    return int(apples_per_watermelon)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 0\n    page = 0\n    \n    while digits < 933:\n        page += 1\n        digits += len(str(page))\n    \n    return page - 1 if digits > 933 else page\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    halfway = (120 + 300) / 2\n    return halfway\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    # Count digits from 1 to 9\n    count_1_to_9 = 9\n    \n    # Count digits from 10 to 99\n    count_10_to_99 = (99 - 10 + 1) * 2\n    \n    # Count digits for 100\n    count_100 = 3\n    \n    # Johnson only writes up to 91, so no need to count 100\n    total_digits = count_1_to_9 + count_10_to_99\n    \n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    from datetime import datetime\n\n    format = '%I:%M%p'\n    start_time = datetime.strptime('09:15PM', format)\n    end_time = datetime.strptime('11:06PM', format)\n\n    duration = end_time - start_time\n    duration_in_minutes = duration.seconds // 60\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, Jane has at least 15 pens of each color in Box A\n    # When 20 pens are taken from Box A and placed into Box B,\n    # we don't know the distribution of colors of these pens.\n    \n    # However, the worst case is that all pens of a particular color (let's say blue) are taken from Box A,\n    # Now, Box A would have 0 blue pens, in which case we would need to return 15 blue pens back to\n    # Box A to meet the requirement of having at least 15 pens of each color.\n\n    # Since 20 pens were originally moved to Box B and we have to return 15, the answer is 15.\n    return 15\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_diff = 32\n    total_students = 0\n\n    # Start with a minimal square array size when girls can be in the middle\n    # Increment the size by 2 to maintain the alternating pattern\n    size = 3\n    while True:\n        boys = size * 4 - 4  # Calculate boys on the outer layer\n        girls = (size - 2) ** 2  # Calculate girls in the next inner layer\n        diff = boys - girls\n\n        # If the difference matches, calculate the total number of students\n        if diff == total_diff:\n            total_students = size**2\n            break\n        size += 2  # Increase the square array size\n\n    return total_students\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let divisor be x, then the dividend will be 29x + 11  \n    # According to the problem, x + (29x + 11) = 431  \n    # Therefore, x + 29x = 431 - 11  \n    # 30x = 420  \n    # x = 420 / 30  \n    x = 420 // 30  # Divisor\n    dividend = 29 * x + 11  # Dividend\n    # The difference between the dividend and divisor\n    ans = dividend - x\n    return ans\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    percentage_playing_violin = 12.5\n\n    total_pupils = (violin_players * 100) / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Since there are more soft-centre chocolates than plain chocolates,\n    # it's guaranteed that some plain chocolates have soft-centres. \n    # Minimum number of milk chocolates with soft-centres would be when all plain chocolates have soft-centres.\n    min_soft_centre_plain = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n\n    # However, since not all chocolates have soft-centres, we cannot say for sure that all \n    # plain chocolates have soft-centres. Thus, the maximum number of plain chocolates with \n    # soft-centres would be the total number of plain chocolates itself.\n    max_soft_centre_plain = plain_chocolates\n\n    # The number of plain chocolates with soft-centres could be any number between\n    # min_soft_centre_plain and max_soft_centre_plain, inclusive.\n    return min_soft_centre_plain, max_soft_centre_plain\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Assign the function to 'ans', so it can be called with an argument to evaluate"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    coins_1p, coins_2p, coins_5p, coins_10p = symbols('coins_1p coins_2p coins_5p coins_10p')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(coins_1p * 1 + coins_2p * 2 + coins_5p * 5 + coins_10p * 10, 90)  # Total amount in pence\n    equation2 = Eq(coins_1p, coins_2p)  # Equal number of 1p and 2p coins\n    equation3 = Eq(coins_2p, coins_5p)  # Equal number of 2p and 5p coins\n    equation4 = Eq(coins_5p, coins_10p)  # Equal number of 5p and 10p coins\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (coins_1p, coins_2p, coins_5p, coins_10p))\n\n    total_coins = solutions[coins_1p] + solutions[coins_2p] + solutions[coins_5p] + solutions[coins_10p]\n    return total_coins  # Return the total number of coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of apples be a and the number of pears be p\n    a, p = symbols('a p')\n    \n    # There are a total of 105 apples and pears\n    total_fruits_eq = Eq(a + p, 105)\n    \n    # After 1/3 of the apples and 2/5 of the pears were sold\n    apples_left = a - a / 3\n    pears_left = p - 2 * p / 5\n    \n    # There were 5/6 as many apples as pears left\n    apples_pears_ratio_eq = Eq(apples_left, 5 * pears_left / 6)\n    \n    # Solve the system of equations\n    solutions = solve((total_fruits_eq, apples_pears_ratio_eq), (a, p))\n    apples_sold = solutions[a] / 3\n    pears_sold = 2 * solutions[p] / 5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_A_to_B_to_C = Eq(4*A, 5*B)\n    ratio_B_to_C = Eq(5*B, 6*C)\n    C_greater_than_A = Eq(C - A, 10)\n\n    solutions = solve((ratio_A_to_B_to_C, ratio_B_to_C, C_greater_than_A), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n    \n    # Permutations of all students considering ABCD as one unit\n    permutations_all_as_one = factorial(9)\n    \n    # Permutations of A, B, C, and D among themselves\n    permutations_ABCD = factorial(4)\n    \n    # Total permutations\n    total_permutations = permutations_all_as_one * permutations_ABCD\n    \n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played\n    total_games = (6 * 5) // 2  # Each of the 6 students plays 5 others\n    # Total possible points if no games are tied\n    total_points = total_games * 2  # 2 points per game\n\n    # Points for the students as given\n    points_given = [7, 6, 5, 4, 3]\n    # Sum of points of the five students\n    points_sum = sum(points_given)\n\n    # Find the points of the remaining student\n    remaining_points = total_points - points_sum\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the total weight of A, y be the total weight of B.\n    x = Symbol('x')\n    y = Symbol('y')\n\n    # Set up the system of equations based on the given information.\n    equations = [(5*x - 7*y), (3*x - 5*y - 10*5*3)]\n\n    # Solve the system of equations.\n    solved = solve(equations)\n\n    # Calculate the total weight of both bags.\n    total_weight = solved[x] + solved[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    # Sum of arithmetic sequence: n/2 * (a1 + an) = total_players\n    # n = total number of lines\n\n    # a1 = first term, an = last term, d = common difference\n    # an = a1 + (n - 1) * d\n    # 62 = 22 + (n - 1) * d\n    # total_players = n/2 * (first_line_players + last_line_players)\n    # n = 2 * total_players / (first_line_players + last_line_players)\n\n    n = 2 * total_players //(first_line_players + last_line_players)\n\n    d = (last_line_players - first_line_players) //(n - 1)\n\n    return d\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for i in range(100, 201):\n        if i % 3 == 2 and i % 5 == 2 and i % 7 == 2:\n            return i\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    product_str = str(product)\n    return len(product_str) - len(product_str.rstrip('0'))\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Probability of at least one theft occurring on a given day\n    # Since there were 2 thefts in 1000 days.\n    p_theft = Rational(2, 1000)\n\n    # Probability of the dog barking on a given day\n    # Since the dog barks 3 times every week:\n    # 3 barks / 7 days = probability of barking on a given day\n    p_bark = Rational(3, 7)\n\n    # Probability of the dog barking given there's a theft\n    p_bark_given_theft = 0.9\n\n    # According to Bayes' theorem:\n    # P(Theft|Bark) = (P(Bark|Theft) * P(Theft)) / P(Bark)\n    p_theft_given_bark = (p_bark_given_theft * p_theft) / p_bark\n\n    return p_theft_given_bark\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    # Let x be the number of orange candies\n    # Then the number of apple candies would be x + 7\n    # The number of grape candies would be x + 7 - 3\n    # The number of pineapple candies would be x + 2\n    # The total number of candies is 25\n\n    # x + (x + 7) + (x + 7 - 3) + (x + 2) = 25\n    # 4x + 13 = 25\n    # 4x = 25 - 13\n    # 4x = 12\n    # x = 12 / 4\n    # x = 3\n\n    # Now find the number of apple candies\n    # apple_candies = orange_candies + 7\n    # apple_candies = 3 + 7\n    # apple_candies = 10\n\n    orange_candies = 3\n    apple_candies = orange_candies + 7\n    \n    return apple_candies\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_diff = float('inf')  # Initialize as infinite\n    # We only need to check permutations of the last 5 digits\n    # since the first four digits will always be the same (1234)\n    from itertools import permutations\n    for p in permutations('56789'):\n        num1 = int('1234' + ''.join(p))\n        # Reverse the permutation for the second number\n        num2 = int('1234' + ''.join(p[::-1]))\n        diff = abs(num1 - num2)\n        if diff < smallest_diff:\n            smallest_diff = diff\n    return smallest_diff\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Mr. Ya has, and y be the number of pupils\n    x, y = symbols('x y')\n    \n    # Equation 1: If he gives 13 stickers to each pupil, he will have an excess of 190 stickers\n    equation1 = Eq(x - 13 * y, 190)\n    \n    # Equation 2: If he gives 17 stickers to each pupil, he will have an excess of 50 stickers\n    equation2 = Eq(x - 17 * y, 50)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Mr. Ya's stickers are represented by x\n    return solutions[x]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original conditions\n    original_condition = Eq(boys, girls - 65)\n\n    # After some boys and girls left for recess\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n\n    after_recess_condition = Eq(boys_left, girls_left)\n\n    # Solve the equations\n    solutions = solve((original_condition, after_recess_condition), (boys, girls))\n\n    # Find the total number of students left in the hall\n    total_left = boys_left.subs(boys, solutions[boys]) + girls_left.subs(girls, solutions[girls])\n\n    return total_left\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_after_third = 25\n    third_trip = 68\n    second_trip_excess = 11\n    first_trip_deficit = 26\n\n    # After the third trip, 25 bricks were left\n    remaining_after_second = remaining_after_third + third_trip\n    \n    # On the second trip, 11 more than half the remaining number of bricks were moved\n    remaining_after_first = (remaining_after_second - second_trip_excess) * 2\n    \n    # On the first trip, 26 less than half the number of bricks were moved\n    total_bricks = (remaining_after_first + first_trip_deficit) * 2\n\n    return total_bricks\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    for i in range(2, 100):  # Upper bound can be any reasonable number larger than 2\n        total = i * i\n        if (i - 1) * (i - 1) < total < i * i:\n            return total\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Girls who can swim to girls who cannot ratio\n    equation1 = Eq(girls_swim / girls_not_swim, 31 / 49)\n\n    # Boys who can swim is 120 less than boys who cannot\n    equation2 = Eq(boys_swim, boys_not_swim - 120)\n\n    # 90 more boys than girls total in the school\n    equation3 = Eq(boys_swim + boys_not_swim, girls_swim + girls_not_swim + 90)\n\n    # Total number of students in the school\n    equation4 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Total number of pupils who cannot swim (girls_not_swim + boys_not_swim)\n    pupils_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    num_kids = 3\n\n    # Since we are arranging all kids, we need to find the permutation count\n    num_ways = math.factorial(num_kids)\n    \n    return num_ways\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    # Let the initial number of passengers be x.\n    # After the first stop, 2/5 got off, so (3/5)x remain.\n    # After the second stop, 1/3 got off, so (2/3)(3/5)x remain.\n    # This should equal 22 as given by the question.\n    # (2/3)(3/5)x = 22\n    # x = 22 * (5/3) * (5/2)\n    \n    passengers_after_first_stop = 22 * (3/2)\n    initial_passengers = passengers_after_first_stop * (5/3)\n    \n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    \n    for page in range(1, 21):\n        # Count the number of digits in each page number and add to total\n        total_digits += len(str(page))\n\n    return total_digits\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let's denote Geoff's current age as G and his sister's age as S.\n    # According to the problem, we have G + S = 22.\n\n    # The sum of their ages increases by 2 each year (as each of them gets older by 1 year).\n    # We need to find out after how many years the sum will be 40.\n    # So we set up the equation: current_sum + 2 * number_of_years = target_sum\n\n    current_sum = 22\n    target_sum = 40\n\n    # Solve for the number of years\n    number_of_years = (target_sum - current_sum) / 2\n\n    return int(number_of_years)\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    # Smallest possible divisor is 1\n    divisor = 1\n\n    # Minimum dividend is divisor times quotient plus remainder\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Define a function that calculates number of ways to reach the nth step\n    def ways_to_step(n):\n        if n == 0:\n            return 1  # There is one way to stand still (0 move)\n        if n < 0:\n            return 0  # No way to get to a negative step\n\n        # The number of ways to get to the nth step is the sum of the ways\n        # to get to the (n-2)th and (n-3)th steps since Peter can only climb 2 or 3 steps at a time\n        return ways_to_step(n - 2) + ways_to_step(n - 3)\n\n    # Calculate the number of ways to reach the 10th step\n    return ways_to_step(10)\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Iterate over all the possible 4 digit numbers\n    for i in range(1000, 10000):\n        # Current combination as a string for manipulation\n        current_combination = str(i)\n        # Get the last digit and add it as the first digit of the new combination\n        new_combination_str = current_combination[3] + current_combination[0:3]\n        # Convert new combination to an integer\n        new_combination = int(new_combination_str)\n        \n        # Check if the new number is greater than the original by 5877\n        if new_combination - i == 5877:\n            # If condition is satisfied, return the original combination\n            return i\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number, n = '1998', 4\n    while int(number * (n // 4)) % 33 != 0:\n        n += 4\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    term1 = group_number\n    term2 = group_number**2\n    term3 = group_number**3\n\n    sum_of_numbers = term1 + term2 + term3\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    runs_needed = total_miles / per_run_miles\n    return runs_needed\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3_030_030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    \n    girls = (boys / boys_to_girls_ratio) * 2  # Calculate the number of girls based on the ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if (number % 5 == 3) and (number % 6 == 4) and (number % 9 == 1):\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Ratios 10:x = 14:21\n    # Cross multiply to solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_fish = 78\n    books_birds = books_fish - 12\n    total_books = books_fish + books_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # Check only numbers ending in \"0\"\n        if num % 6 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    johnny_answer = 5839\n    correct_answer = 5832 + (7 * 10)\n    is_correct = johnny_answer == correct_answer\n    \n    return correct_answer if not is_correct else johnny_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    return (27 - 1) // 2\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3 m to cm\n    piece1 = 147\n    piece2 = 32.5\n    piece3 = 67\n    \n    piece4 = total_length_cm - (piece1 + piece2 + piece3)\n\n    return piece4\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    leaves_needed = pieces_of_paper // interval\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = sum(2 * i / j for i in range(1, 10) for j in range(1, i + 1))\n    return ans\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    original_ratio = Eq(watches / caps, 8/11)\n    new_ratio = Eq(watches / (caps - 88), 12/11)\n\n    solutions = solve((original_ratio, new_ratio), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Given time to cover 5 intervals (between the first house and the sixth house)\n    time_for_5_intervals = 30  # 30 minutes\n    \n    # Total intervals for 10 houses\n    total_intervals = 10 - 1  # 9 intervals (distance between each two adjacent houses)\n    \n    # Time needed for each interval is the same\n    # Therefore, we can find the time for one interval\n    time_for_1_interval = time_for_5_intervals / 5\n    \n    # Now calculate the time to cover all 9 intervals\n    total_time = time_for_1_interval * total_intervals\n    \n    return total_time\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probability of A passing\n    p_A = 0.5\n    # Probability of B passing\n    p_B = 0.4\n    # Probability of C passing\n    p_C = 0.2\n\n    # Probability of only A passing\n    p_A_only = p_A * (1 - p_B) * (1 - p_C)\n    # Probability of only B passing\n    p_B_only = (1 - p_A) * p_B * (1 - p_C)\n    # Probability of only C passing\n    p_C_only = (1 - p_A) * (1 - p_B) * p_C\n\n    # Probability of A and B passing, but not C\n    p_A_B = p_A * p_B * (1 - p_C)\n    # Probability of A and C passing, but not B\n    p_A_C = p_A * (1 - p_B) * p_C\n    # Probability of B and C passing, but not A\n    p_B_C = (1 - p_A) * p_B * p_C\n\n    # Probability of all three passing\n    p_all = p_A * p_B * p_C\n\n    # Probability of none passing\n    p_none = (1 - p_A) * (1 - p_B) * (1 - p_C)\n\n    # Create a list of probabilities for number of people passing\n    probabilities = [p_none, p_A_only, p_B_only, p_C_only, p_A_B, p_A_C, p_B_C, p_all]\n\n    # Find the maximum probability and its corresponding index (number of people)\n    max_probability = max(probabilities)\n\n    # Assuming the question is asking for the number of people passing with the\n    # highest probability, not the actual probability value:\n    most_likely_pass = probabilities.index(max_probability)\n\n    return most_likely_pass\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length in meters\n    total_length_cm = total_length_m * 100  # convert to centimeters\n\n    longer_piece_cm = total_length_cm * 2/3  # since the longer piece is twice as long as the shorter one\n\n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Strategy: Jack should leave a multiple of 12 coins after his first move\n    # because whatever Ken picks afterwards, Jack can always pick a number of coins\n    # that sums up to 12 with Ken's pick. This strategy continues until Ken is forced\n    # to pick the last coin.\n\n    # Since the pile has 2015 coins, we need to reduce it to the nearest multiple of 12\n    # plus 1 (so that Ken is forced to take the last coin).\n    total_coins = 2015\n    target = (total_coins - 1) % 12\n\n    # The number Jack should pick at his first turn to ensure a win\n    jack_first_pick = target if target else 12\n\n    return jack_first_pick\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):  # Loop through possible values for the first digit (cannot be zero)\n        for D in range(1, 10):  # Loop through possible values for the last digit (cannot be zero)\n            if 4 * D == A:  # The first digit is 1/4 of the last digit\n                B = A - 1  # The second digit is 1 less than the first digit\n                # To fulfill the condition where multiplying ABCD by 4 reverses the digits, \n                # we know B and C have to be such that 4 * B = C in the tens place, \n                # and similarly, for C to end up in the tens place, 4 * C must equal B in the hundreds.\n                for C in range(0, 10):  # Loop through possible values for the third digit\n                    if A != B and A != C and A != D and B != C and B != D and C != D:\n                        ABCD = A * 1000 + B * 100 + C * 10 + D\n                        DCBA = D * 1000 + C * 100 + B * 10 + A\n                        if 4 * ABCD == DCBA:\n                            return ABCD\n    return None\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin (0,0), we have b = 0.\n    # Also, it passes through point (4,8), we can plug these values in to find m.\n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # Given point\n    \n    # The slope (m) is (change in y) / (change in x)\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Since b = 0, the equation simplifies to y = mx\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num) if digit in '068')\n\n    ans = digit_sum(2015)\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white_balls = 92\n    pattern_ratio = 3/5  # 3 white balls in every group of 5 balls (●○●○○ pattern)\n    \n    total_balls = (white_balls / pattern_ratio)\n    \n    return int(total_balls)\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_string = f\"{hour:02d}{minute:02d}\"\n            if time_string.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the youngest three siblings' ages add up to 42,\n    # and they are born in consecutive years, their ages form\n    # an arithmetic sequence with a common difference of 1 year.\n    # Hence, if we denote the age of the middle sibling of the youngest\n    # three as 'm', the ages of the three can be expressed as 'm-1', 'm', and 'm+1'.\n    # The sum of these ages would be 3m, which is equal to 42.\n    # So we can find 'm' as follows:\n\n    m = 42 // 3  # dividing the sum of ages 42 by 3 to get the age of the middle dwarf\n\n    # Now, since the youngest three dwarfs are consecutive,\n    # the age of the oldest dwarf would be 6 years older than\n    # the age of the middle one of these youngest three, because\n    # there are six more dwarfs older than the middle youngest dwarf.\n    oldest_age = m + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_length_mm = 4\n    sharpened_length_cm = sharpened_length_mm / 10\n    new_length_cm = original_length_cm - sharpened_length_cm\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter, john = symbols('sam peter john')\n    \n    # Sam and Peter gave 20% of their stickers to John.\n    john_new = john + 0.2 * sam + 0.2 * peter\n    \n    # John's stickers increased by 80%\n    equation1 = Eq(john_new, john * 1.8)\n    \n    # Sam had 20 stickers more than John in the end\n    equation2 = Eq(sam - 0.2 * sam, john_new + 20)\n    \n    # Sam and Peter had stickers in the ratio 7 : 5\n    equation3 = Eq(sam / peter, 7 / 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n    \n    # Return the solution for how many stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    distance1 = 420\n    distance2 = 620\n    distance3 = 1200 - distance1 - distance2\n    \n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    desired_average = 95\n\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_average = (current_total_score + 100 * additional_tests) / (4 + additional_tests)\n        if new_average >= desired_average:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    for ten_notes in range(72):\n        two_notes = 72 - ten_notes\n        \n        spent_ten = 0.9 * ten_notes\n        spent_two = 0.75 * two_notes\n        \n        remaining_ten = ten_notes - spent_ten\n        remaining_two = two_notes - spent_two\n        \n        if remaining_ten == 2 * remaining_two:\n            cost_of_gift = spent_ten * 10 + spent_two * 2\n            return cost_of_gift\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are 3 different colors: red, yellow, blue.\n    # To be sure that at least 2 of them are the same color,\n    # we must consider the worst case scenario using the pigeonhole principle.\n    # The worst case is when we pick one of each color first, which makes 3 markers.\n    # The next pick, regardless of the color, will guarantee at least 2 of the same color.\n    markers_needed = 3 + 1  # 3 different colors + 1 to guarantee a pair\n    return markers_needed\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for number of $2 notes (n2) and $5 notes (n5)\n    n2, n5 = symbols('n2 n5')\n\n    # Equation 1: Total number of notes\n    equation1 = Eq(n2 + n5, 58)\n\n    # Equation 2: Total value of the money\n    equation2 = Eq(2 * n2 + 5 * n5, 164)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n2, n5))\n\n    return solutions[n5]\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    term7 = 105\n    term9 = 135\n    difference = (term9 - term7) // 2\n\n    term100 = term7 + (100 - 7) * difference\n\n    return term100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_cupcakes_cost = 187.50\n    fraction_spent_on_cupcakes_muffins = 5/9\n    fraction_spent_on_additional_cupcakes = 1/6\n    total_spent = total_cupcakes_cost / (fraction_spent_on_cupcakes_muffins + fraction_spent_on_additional_cupcakes)\n\n    muffins_cost = total_spent * fraction_spent_on_cupcakes_muffins - total_cupcakes_cost\n    return muffins_cost\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # Let A be the rate at which hose A fills the pool (pool/hour)\n    # Let B be the rate at which hose B fills the pool (pool/hour)\n    # Let C be the rate at which hose C fills the pool (pool/hour)\n\n    # The sum of rates of A and B filling the pool is 1/9 (pool/hour)\n    # The sum of rates of A and C filling the pool is 1/12 (pool/hour)\n    # The sum of rates of B and C filling the pool is 1/18 (pool/hour)\n\n    # We have three equations:\n    # A + B = 1/9\n    # A + C = 1/12\n    # B + C = 1/18\n\n    # We want to find how long it takes for A + B + C to fill the pool\n    # Let's find the individual rates of A, B, and C\n\n    # Let's use the equations to solve for the rates\n    # We can solve for one of the hoses' rate by subtracting the second and third equations:\n    # (A + B) - (B + C) = (1/9) - (1/18)\n    # A - C = 1/18 - 1/9\n    # A - C = -1/18\n\n    # Now we can add the first and third equation:\n    # (A + B) + (B + C) = (1/9) + (1/18)\n    # 2B + A + C = 1/9 + 1/18\n    # 2B = 1/9 + 1/18 - (A + C)\n    # 2B = 1/9 + 1/18 - 1/12\n    # 2B = (2 + 1 - 1.5) / 18\n    # 2B = 1.5 / 18\n    # 2B = 3/36\n    # 2B = 1/12\n    # B = 1/24\n\n    # Now we can find A by plugging in B back into one of the original equations:\n    # A + B = 1/9\n    # A = 1/9 - B\n    # A = 1/9 - 1/24\n    # A = (8/72) - (3/72)\n    # A = 5/72\n\n    # Now we can find C by plugging in A back into the second equation:\n    # A + C = 1/12\n    # C = 1/12 - A\n    # C = 1/12 - 5/72\n    # C = (6 - 5)/72\n    # C = 1/72\n\n    # Now, to find out how long it will take all three hoses to fill the pool together,\n    # we sum their rates and find the reciprocal:\n    # A + B + C = 5/72 + 1/24 + 1/72\n    # A + B + C = 5/72 + 3/72 + 1/72\n    # A + B + C = 9/72\n    # A + B + C = 1/8\n\n    # The reciprocal of their combined rate is the time it takes to fill the pool.\n    ans = 1 / (5/72 + 1/24 + 1/72)\n\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    # Direct addition of the numbers in the sequence\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start filling boxes with the lowest possible number of marbles (2 each) \n    # that satisfy the conditions given. Since the numbers have to be multiples\n    # of 2 and we can have one pair of boxes with the same number, the sequence\n    # of marbles can be something like this: 2, 2, 4, 6, 8, ..., until we fill\n    # 10 boxes. \n    # We will use a list to store the number of marbles per box.\n\n    # Initialize the list of marbles with the first two boxes having 2 marbles each\n    marbles = [2, 2]\n    \n    # Fill the rest of the boxes\n    # Start with 4 marbles (since we already have 2) and add 2 to the next box\n    # to get a different number of marbles in each box as per the conditions.\n    # As we already have two boxes with 2 marbles, we just need to fill up 8 more.\n    next_marble_count = 4\n    \n    # Since we need 10 boxes in total and already have 2 filled, we'll fill 8 more.\n    for _ in range(8):\n        marbles.append(next_marble_count)\n        next_marble_count += 2  # Next multiple of 2\n    \n    # The smallest number of marbles Celeste can have is the sum of marbles in the list\n    smallest_number_of_marbles = sum(marbles)\n    \n    return smallest_number_of_marbles\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # The number of sprinklers needed is always one more than the number of pairs of parterres\n    # Because they are in a straight line, we install a sprinkler between each pair\n    # Therefore, the minimum number of sprinklers is the number of parterres minus 1\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n    \n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Pigeonhole principle dictates that dividing the pigeons into cages,\n    # we must place at least ceil(pigeons/cages) pigeons into one cage.\n    from math import ceil\n    pigeons_in_most_cage = ceil(total_pigeons / total_cages)\n\n    return pigeons_in_most_cage\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1992\n    while not is_palindrome(steps):\n        steps += 1\n    return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n    first_day = 8\n    second_day = total_length / 6 + 4\n    two_days = first_day + second_day\n\n    equation = Eq(two_days, total_length * 5 / 12)\n\n    solved_length = solve(equation, total_length)\n\n    return solved_length[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 4, 5]\n    permutations_list = list(permutations(digits, 3))\n    return len(permutations_list)\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5 / 9\n    given_away_caps = 440\n    original_collection = given_away_caps / (1 - remaining_fraction)\n\n    return int(original_collection)\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry_stickers, alexis_stickers, charlotte_stickers = symbols('marry_stickers alexis_stickers charlotte_stickers')\n    \n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry_stickers, (7/5) * alexis_stickers)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Charlotte's stickers increased by 80%\n    # Therefore, (marry_stickers * 0.2) + (alexis_stickers * 0.2) = charlotte_stickers * 0.8\n    equation2 = Eq(marry_stickers * 0.2 + alexis_stickers * 0.2, charlotte_stickers * 0.8)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    # Therefore, marry_stickers - (marry_stickers * 0.2) = charlotte_stickers + 20\n    equation3 = Eq(marry_stickers - (marry_stickers * 0.2), charlotte_stickers + 20)\n    \n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (marry_stickers, alexis_stickers, charlotte_stickers))\n    \n    return solutions[alexis_stickers]\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # The total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Since there's wheat at every corner (4 corners), we subtract them from the total\n    # to properly divide the space among the remaining wheat plants on the sides\n    wheat_on_sides = 116 - 4\n    \n    # Distance between each wheat plant is the total perimeter divided by the number of intervals\n    # Number of intervals is the number of wheat plants on the sides\n    distance_between_wheat = perimeter / wheat_on_sides\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        if str(multiple).endswith('35') and sum(map(int, str(multiple))) == 35:\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    # Let the number of rainy days be x and the number of sunny days be y.\n    # We have two equations:\n    # 1) x + y = 8 (the total number of days)\n    # 2) 12*x + 20*y = 112 (the total number of pine nuts Mommy Squirrel harvested)\n    # We can solve this system of equations for x and y.\n\n    total_days = 8\n    total_pine_nuts = 112\n\n    # pine_nuts on rainy day\n    rainy_pine_nuts = 12\n    # pine_nuts on sunny day\n    sunny_pine_nuts = 20\n\n    for rainy_days in range(total_days+1):\n        sunny_days = total_days - rainy_days\n        if rainy_pine_nuts * rainy_days + sunny_pine_nuts * sunny_days == total_pine_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price_single = 15       # price for 1 bottle\n    price_pair = 28         # price for 2 bottles\n    price_pack_five = 60    # price for 5 bottles\n\n    # Calculate different number of packs and remaining bottles\n    min_cost_in_pence = float('inf')  # Assign maximum possible value initially\n\n    for pack_fives in range(0, 4):  # At maximum, Ben can buy 3 packs of 5 bottles\n        for pairs in range(0, 9):   # At maximum, Ben can buy 8 pairs of bottles\n            for singles in range(0, 2):  # At maximum, Ben can buy 1 single bottle if pairs and fives aren't sufficient\n                total_bottles = 5 * pack_fives + 2 * pairs + singles\n                if total_bottles == 17:  # Only if we reach the desired bottle count do we consider the cost\n                    cost = pack_fives * price_pack_five + pairs * price_pair + singles * price_single\n                    min_cost_in_pence = min(min_cost_in_pence, cost)\n\n    # Convert the minimum cost to pounds (£)\n    min_cost_in_pounds = min_cost_in_pence / 100\n\n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each match eliminates one player.\n    # Starting with 4 players, we need to determine the minimum\n    # number of rounds for one player to be the winner.\n\n    # Each round will reduce the number of players by half\n    # until only one player remains as the winner.\n\n    # Number of players\n    players = 4\n    # Each round eliminates half the players\n    rounds = 0\n    while players > 1:\n        rounds += 1\n        players /= 2\n    \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    # kids who can answer only one question correctly\n    one_question_correct = (first_question_correct - both_questions_correct) + \\\n                           (second_question_correct - both_questions_correct)\n\n    return one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in meters per second\n    time = 5  # time in seconds\n\n    length = speed * time  # distance formula: speed = distance / time, so distance = speed * time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "from itertools import permutations\n\ndef solution():\n    expressions = set()\n    operations = [\"285+15/5-2\", \"285+15/(5-2)\", \"285+(15/5)-2\", \"285+(15/5-2)\", \"(285+15)/5-2\",\n                  \"(285+15/5)-2\", \"285+(15-2)/5\", \"(285+15-2)/5\", \"285+15/(5-2)\", \"(285+15)/(5-2)\",\n                  \"285/5+15-2\", \"(285/5)+15-2\", \"285/(5+15)-2\", \"(285/(5+15))-2\", \"285/(5+(15-2))\",\n                  \"(285/5+15)-2\", \"285/(5+15-2)\", \"(285/(5+15-2))\"]\n\n    for expr in expressions:\n        try:\n            result = eval(expr)\n            expressions.add(f\"{expr}={result}\")\n        except ZeroDivisionError:\n            pass\n\n    return len(expressions)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of mushrooms gathered in the first hour\n    # Let y be the number of mushrooms gathered in the second hour\n    x, y = symbols('x y')\n\n    # Equation for the total mushrooms gathered in two hours\n    equation1 = Eq(x + y, 40)\n\n    # Equation for the condition that if he gathers 26 more mushrooms in the first hour, \n    # the amount gathered in each hour would be equal\n    equation2 = Eq(x + 26, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    for num_brushes in range(total_spent // brush_price + 1):\n        if brush_price * num_brushes < 10:\n            money_spent_on_towels = total_spent - brush_price * num_brushes\n            if money_spent_on_towels % towel_price == 0:\n                return num_brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, solve\n\n    number = symbols('number')\n    equation = Eq(7 * number + 8, 71)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if i != j and i != k and j != k and i != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # To ensure you get a blue marble, you need to draw all the non-blue marbles first.\n    non_blue = pink + grey\n\n    # After drawing all non-blue marbles, the next one has to be blue.\n    marbles_to_draw = non_blue + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    difference = 2\n\n    # Use the sum formula of an arithmetic sequence: n/2 * (2a1 + (n-1)d)\n    # Where n is the number of terms, a1 is the first term, and d is the common difference\n    # Since we have total bears and we need to find out the last day's bears (a5), we can manipulate the formula\n    # total_bears = days/2 * (2a1 + (days - 1) * difference)\n    # a1 = (total_bears / (days/2) - (days - 1) * difference) / 2\n    # After calculating a1, we find a5 by a1 + 4 * difference\n    \n    # Solving for a1\n    a1 = (total_bears / (days/2) - (days - 1) * difference) / 2\n\n    # Solving for a5 (fifth day teddy bears)\n    a5 = a1 + 4 * difference\n\n    return int(a5)\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100 \n    sales_tax_paid = 30 \n    price_of_computer = sales_tax_paid / sales_tax_rate\n    return price_of_computer\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    fraction = (3/10) / (6/7)\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of frogs and dragonflies.\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    # Given conditions\n    # At the beginning, the number of frogs is 9 more than the number of dragonflies.\n    equation1 = Eq(frogs_initial, dragonflies_initial + 9)\n\n    # After the magic show, the number of frogs and dragonflies is known.\n    equation2 = Eq(frogs_initial - dragonflies_initial, 11 - 10)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    # Return the number of frogs at the beginning.\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "def solution():\n    from itertools import permutations\n    from math import gcd\n\n    num_list = list(range(1, 9))\n    count = 0\n    \n    for perm in permutations(num_list):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    return 300 - 9 - 19 - 29 - 39 - 49 - 59\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # There were 30 less boys than girls\n    equation1 = Eq(boys, girls - 30)\n    \n    # After 3/5 of the boys and 5/8 of the girls left, the number of boys and girls remaining is equal\n    equation2 = Eq((1 - 3/5) * boys, (1 - 5/8) * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    # Find the missing number '_' in the equation (24 - _) / 4 = 4\n    # We need to solve the equation for the missing number '_'\n    # Rearrange the equation: 24 - _ = 4 * 4\n    # Calculate the right hand side: 4 * 4 = 16\n    # 24 - _ = 16, so the missing number '_' = 24 - 16\n    missing_number = 24 - (4 * 4)\n    return missing_number\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = set()\n\n    # Original expression without any brackets\n    exp1 = 285 + 15 / 5 - 2\n\n    # One pair of brackets\n    exp2 = (285 + 15) / 5 - 2\n    exp3 = 285 + (15 / 5 - 2)\n    exp4 = 285 + 15 / (5 - 2)\n\n    # Two pairs of brackets\n    exp5 = (285 + 15) / (5 - 2)\n\n    # Adding the unique results to a set to avoid duplicates\n    expressions.add(exp1)\n    expressions.add(exp2)\n    expressions.add(exp3)\n    expressions.add(exp4)\n    expressions.add(exp5)\n\n    return len(expressions)\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # 1/(A+B) = 1/3, 1/(B+C) = 1/4, 1/(A+C) = 1/8\n    # Need to find 1/(A+B+C)\n    \n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(1/A + 1/B, 1/3)\n    equation2 = Eq(1/B + 1/C, 1/4)\n    equation3 = Eq(1/A + 1/C, 1/8)\n    \n    # Solve the system of equations for A, B and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    A_rate, B_rate, C_rate = solutions[A], solutions[B], solutions[C]\n    \n    # Calculate the rate at which all three workers complete the job together\n    total_rate = A_rate + B_rate + C_rate\n    \n    # The time taken for all three workers to complete the job is the reciprocal of the total rate\n    time_taken = 1 / total_rate\n    \n    return time_taken\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the total amount of sugar from both solutions\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    # If each kid eats 18 candies, 12 more candies are needed.\n    equation1 = Eq(candies, 18 * kids + 12)\n    \n    # If each kid eats 15 candies, there would be enough for 2 more kids.\n    equation2 = Eq(candies, 15 * (kids + 2))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    # Calculate the ratio of girls to boys\n    ratio_girls_to_boys = girls_in_line / boys_in_line  \n\n    # Calculate total number of girls\n    total_girls = total_boys * ratio_girls_to_boys\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    equation1 = Eq(johnson + vicky, 48)              # The sum of their coins is 48\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)       # After giving 8 coins, Vicky has 2 fewer than Johnson\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 // 7) - 6\n    return result\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Initialize the sum\n    S = 0\n    # Running the total for each term in the series\n    for i in range(1, 2018):\n        S += int(\"2\" * i)  # Append '2' i times and convert to integer\n    \n    # Extract the last 5 digits of S\n    last_5_digits = S % 100000  # Only keep the last 5 digits\n    \n    # Return the sum of the last 5 digits\n    return sum(map(int, str(last_5_digits)))\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6  # Calculate the unit rate (kilograms per day)\n    total_fruit = fruit_per_day * 8  # Calculate the total fruit for 8 days\n\n    return total_fruit\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    total_cookies = 1170\n\n    # Sam eats 1/4 of her cookies\n    sam_eats = sam / 4\n\n    # Tim buys 1/5 more cookies\n    tim_buys = tim / 5\n\n    # Equation for the total number of cookies before eating and buying\n    equation1 = Eq(sam + tim, total_cookies)\n\n    # After Sam eats and Tim buys more, Sam has 663 fewer cookies than Tim\n    equation2 = Eq(sam - sam_eats, tim + tim_buys - 663)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    return solutions[sam_eats]\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % i == 1 for i in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_initial = 40\n    ting_initial = 32\n    \n    for stamps_given in range(1, sally_initial):  # Sally has to give at least one stamp and can give up to all her stamps minus one\n        sally_remaining = sally_initial - stamps_given\n        ting_new_total = ting_initial + stamps_given\n        if sally_remaining * 2 == ting_new_total:  # The ratio 1:2 can be represented by the equation sally_remaining * 2 = ting_new_total\n            return ting_new_total\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    initial_speed = 150  # metres per minute\n    increased_speed = initial_speed + 50  # metres per minute\n    initial_time = 10  # minutes\n    initial_distance = initial_speed * initial_time  # distance covered during the initial speed\n    remaining_distance = 3700 - initial_distance  # distance to cover at increased speed\n\n    # Time spent at increased speed\n    time_at_increased_speed = remaining_distance / increased_speed\n\n    # Total time spent walking in the park\n    total_time = initial_time + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # price per packet of sweets\n    packet_price = 4\n    # number of sweets per packet\n    sweets_per_packet = 8\n    # free sweets for every two packets bought\n    free_sweets_for_two_packets = 1\n\n    # total money available\n    total_money = 20\n    # number of packets one can buy\n    packets_bought = total_money // packet_price\n    \n    # total sweets from the packets\n    total_sweets = packets_bought * sweets_per_packet\n    # additional free sweets\n    free_sweets = (packets_bought // 2) * free_sweets_for_two_packets\n    \n    # maximum sweets that can be obtained\n    max_sweets = total_sweets + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Number of children\n    children = 8\n    \n    # The minimum pieces each child can get, starting with 1 piece each.\n    minimum_pieces = list(range(1, children))\n    \n    # Remaining candies\n    remaining_candies = 88 - sum(minimum_pieces)\n    \n    # The child with most candy gets the remaining candy on top of the minimum.\n    max_candy = remaining_candies + minimum_pieces[-1]\n    \n    return max_candy\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of counters for each color\n    pink = 5\n    purple = 7\n    orange = 8\n\n    # Initial total number of counters\n    total_counters = pink + purple + orange\n\n    # Initial probability of choosing a pink counter\n    initial_probability = pink / total_counters\n\n    # The desired final probability is twice the initial probability\n    final_probability = 2 * initial_probability\n\n    # Let x be the number of extra counters to add\n    # Final probability will be based on the new total which is total_counters + x\n    # Set up the equation: pink / (total_counters + x) = final_probability\n    # Solve for x\n    x = pink / final_probability - total_counters\n\n    return int(x)\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    boys = symbols('boys')\n    girls = symbols('girls')\n    \n    # Equation based on the first condition, 40% more boys than girls\n    eq1 = Eq(boys, girls + 0.4 * girls)\n    \n    # Equation based on the second condition, 50% more boys than girls after 24 of each left\n    eq2 = Eq(boys - 24, 1.5 * (girls - 24))\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (boys, girls))\n    \n    return int(solutions[boys])\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    num_zeros = 0\n    divisor = 5\n    while 16 >= divisor:\n        num_zeros += 16 // divisor\n        divisor *= 5\n\n    return num_zeros\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Worst case for getting one pair is having to draw 4 socks of each color.\n    # Cindy has to pick all 4 black, all 4 grey, and 1 red to guarantee one pair of the same color which is 9 socks.\n    # But to guarantee 2 pairs, Cindy can take out one more sock that will be the pair of the last single sock.\n    socks_needed = 4 + 4 + 1 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # Initial condition\n    equation1 = Eq(cupcakes, muffins)\n    \n    # After selling\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    # Sum of cupcakes and muffins initially\n    total_initial = solutions[cupcakes] + solutions[muffins]\n\n    return total_initial\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    time_shanghai_to_los_angeles = 12.25  # hours\n    extra_time_los_angeles_to_shanghai = 90 / 60  # 90 minutes converted to hours\n\n    time_los_angeles_to_shanghai = time_shanghai_to_los_angeles + extra_time_los_angeles_to_shanghai\n\n    total_time = time_shanghai_to_los_angeles + time_los_angeles_to_shanghai\n\n    return total_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let h be Helen's daily pocket money.\n    # Then, George's daily pocket money is h + 3.\n    # Since they spend $5 each day,\n    # Helen's daily savings are h - 5, and\n    # George's daily savings are (h + 3) - 5 = h - 2.\n    \n    # Let d be the number of days after which Helen has saved $60.\n    # Helen saves $60 in d days, so her daily saving is $60 / d = h - 5.\n    # Therefore, Helen's pocket money h = (60 / d) + 5.\n    \n    # George would have saved $90 more than Helen, so his total savings are $60 + $90 = $150.\n    # George saves $150 in d days, so his daily saving is $150 / d = h - 2.\n    # This can be written as: (150 / d) + 2 = h.\n    \n    # Now, we have two equations with the same variable h:\n    # (60 / d) + 5 = h and (150 / d) + 2 = h.\n    # Equating both expressions for h, we get:\n    # (60 / d) + 5 = (150 / d) + 2\n    # Solving this equation for d, by taking all terms with d to one side, we get:\n    # 60/d - 150/d = 2 - 5\n    # -90/d = -3\n    # d = 90/3\n    # d = 30\n    \n    # Now, substituting d = 30 back into the equation for Helen's pocket money:\n    # h = (60 / d) + 5\n    # h = (60 / 30) + 5\n    # h = 2 + 5\n    # h = 7\n    \n    # So, Helen receives $7 each day.\n    return 7\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate per hour\n    rate_jerry = 1 / 18\n    \n    # Combined rate of Tom and Jerry per hour\n    rate_tom_and_jerry = 1 / 6\n    \n    # Rate at which Tom works per hour\n    rate_tom = rate_tom_and_jerry - rate_jerry\n    \n    # Time taken by Tom to do the job by himself\n    time_tom = 1 / rate_tom\n    \n    return time_tom\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    return sum(range(1, 31)) * 2 - 30\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let e represent the amount of money that Eddi has\n    # Let w represent the amount of money that Wiya has\n    e, w = symbols('e w')\n\n    # Two equations representing the information given\n    # Initial ratio equation\n    equation1 = Eq(e / w, 3 / 2)\n    # New ratio equation after Eddi gets $4\n    equation2 = Eq((e + 4) / w, 8 / 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, w))\n    \n    # Access the amount of money Wiya has\n    return solutions[w]\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    # Let the first term be 'a' and the common difference be 'd'\n    # According to the problem, a + 8d is 18 more than a + 14d\n    # So: (a + 8d) - (a + 14d) = -18\n    # Also, the sum of the 20th term (a + 19d) and the 12th term (a + 11d) is 88\n    # So: (a + 19d) + (a + 11d) = 88\n    \n    # Simplifying both equations\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq((a + 8*d) - (a + 14*d), -18)\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Extracting the solution\n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    # The nth term of an arithmetic progression is given by a + (n-1)d\n    # So the 32nd term is a + 31d\n    nth_term = a_val + 31*d_val\n    \n    return nth_term\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_count = 0\n    # Count all numbers with exactly two sevens\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('7') == 2:\n            total_count += 1\n    # Count all numbers with exactly three sevens\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('7') == 3:\n            total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    position = digit_str.find('8')\n    place_value = 10 ** (len(digit_str) - position - 1)\n    return place_value\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_packet_type1 = 25\n    days_in_packet_type2 = 20\n\n    lcm_days = lcm(days_in_packet_type1, days_in_packet_type2)\n\n    return lcm_days\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # There are 5 slots in which we can place the 4 dancing performances between the singing ones\n    # (S _ S _ S _ S _ S _ S), where S represents singing performances and _ represents slots for dancing performances\n    \n    # Choose 4 out of 5 slots to place dancing performances\n    slots_for_dancing = factorial(5) // (factorial(4) * factorial(5 - 4))\n\n    # Permute 6 singing performances\n    singing_permutations = factorial(6)\n\n    # Permute 4 dancing performances\n    dancing_permutations = factorial(4)\n\n    # Multiply the combinations of slots, singing permutations, and dancing permutations to get the answer\n    return slots_for_dancing * singing_permutations * dancing_permutations\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    from fractions import Fraction\n\n    A = 1\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    \n    # Since A = a0 + a1 + a2 + a3 + a4 + a5 + a6 = 1\n    # Then, a0 = 1 - (a1 + a2 + a3 + a4 + a5 + a6)\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Convert a0 to its simplest form and calculate m+n\n    m_n = sum(a0.as_integer_ratio())\n\n    return m_n\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    # Let the original number be x.\n    # Mistaken calculation: x / 4 - 25 = 2021\n    # Let's first find the value of x from the mistaken calculation.\n    mistaken_result = 2021\n    # From the mistaken calculation, we could get the value of x by reversing the operations\n    x = (mistaken_result + 25) * 4\n\n    # Correct calculation: 4x + 25\n    # Now apply the correct operations to that value of x\n    correct_result = 4 * x + 25\n\n    # Return the correct answer\n    return correct_result\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_value = 0.4 - (1 / 4)\n    return decimal_value\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors = [75, 56, 12, 105]\n    twos_count = 0\n    fives_count = 0\n    \n    for number in prime_factors:\n        while number % 2 == 0:\n            number //= 2\n            twos_count += 1\n        while number % 5 == 0:\n            number //= 5\n            fives_count += 1\n    \n    ans = min(twos_count, fives_count)\n    \n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "from itertools import permutations\n\ndef solution():\n    possible_digits = set(range(10))\n    # From \"5430\": None of these digits can be in the answer\n    possible_digits -= set(map(int, \"5430\"))\n    possible_answers = []\n\n    # Generate all possible 4-digit numbers from the remaining digits\n    for comb in permutations(possible_digits, 4):\n        guess = ''.join(map(str, comb))\n        matches_8765 = sum(a == b for a, b in zip(guess, \"8765\"))\n        matches_1023 = sum(a == b for a, b in zip(guess, \"1023\"))\n        matches_8642 = sum(a == b for a, b in zip(guess, \"8642\"))\n\n        # From \"8765\": Two digits are right but in the wrong positions\n        if sum(a in \"8765\" for a in guess) != 2 or matches_8765 != 0:\n            continue\n        # From \"1023\": Two digits are right but in the wrong positions\n        if sum(a in \"1023\" for a in guess) != 2 or matches_1023 != 0:\n            continue\n        # From \"8642\": Two digits are right and in the right positions\n        if matches_8642 != 2:\n            continue\n        \n        possible_answers.append(guess)\n    \n    # We assume there is only one correct answer\n    return int(possible_answers[0])\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance driven in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n\n    # Remaining distance\n    distance_remaining = 280  # given directly\n\n    # Total distance\n    total_distance = distance_first_part + distance_remaining\n\n    # Time taken to cover the remaining distance\n    time_remaining = distance_remaining / 70  # distance / speed\n\n    # Total time\n    total_time = 2 + time_remaining\n\n    # Average speed calculation\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let d be the number of books Donna has\n    # Then Chloe has 4d books\n    # We know that Chloe has 816 more books than Donna, so we can set up the equation:\n    # 4d = d + 816\n\n    # Now we'll solve for d\n    d = symbols('d')\n    equation = Eq(4 * d, d + 816)\n\n    # Solve the equation\n    solution = solve(equation, d)\n\n    # Return the number of books Donna has\n    return solution[d]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Represent the tilde symbol as a variable x\n    x = None  # Not necessary, but illustrates that 'x' is unknown\n\n    # Given equation: ((x + 4) / 8) = 3\n    # Solving for x in the equation\n    x = (3 * 8) - 4  # Multiply both sides by 8, then subtract 4\n\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n    equation4 = Eq(boys + girls, children)  # Total children equal to sum of boys and girls\n\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    total_people = solutions[adults] + solutions[children]\n\n    return total_people\n\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit of a number a^b can be found by considering the ones digits of\n    # powers of a and seeing if they form a repeating pattern.\n    # The ones digit of powers of 9 repeat every 2: \n    # 9^1 = 9 (ones digit is 9),\n    # 9^2 = 81 (ones digit is 1),\n    # 9^3 = 729 (ones digit is 9),\n    # 9^4 = 6561 (ones digit is 1), and so on.\n\n    # Since 999 ends with 9, its ones digit behaves the same way as 9's ones digit when raised to powers.\n    # Since 99 is odd, the exponent (99) % 2 == 1, which means the ones digit is the first in the repeating pattern (which is 9).\n\n    return 9\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because then ab would not be a two-digit number\n        for b in range(10):  # b can range from 0 to 9\n            if (10 * a + b) * 7 == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    factors_12_15 = gcd(12, 15)\n    greatest_common_factor = gcd(factors_12_15, 60)\n    return greatest_common_factor\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n    \n    ans = banana_price + apple_price\n    \n    return ans\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Using the unitary method, first find houses built per worker per day\n    houses_per_worker_per_day = houses_built / (workers_initial * days_initial)\n\n    # Now find how many houses can be built by 9 workers in 2 days\n    houses_final = houses_per_worker_per_day * workers_final * days_final\n\n    return int(houses_final)\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n    \n    equation = Eq(children, men + 20)\n    \n    solutions = solve(equation, total_people)\n    return solutions[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_money = symbols('total_money')\n    cost_per_ball = symbols('cost_per_ball')\n\n    # Equation when buying 5 balls\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n\n    # Equation when buying 8 balls (he is short of $12, so we add it to the left)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_money, cost_per_ball))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(A+1, 1000):\n            if A != B and A % 75 == 0 and B % 75 == 0:\n                A_digits = str(A)\n                B_digits = str(B)\n                common_digits = set(A_digits) & set(B_digits)\n                if len(common_digits) >= 2:\n                    max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    # height after the second bounce\n    second_bounce_height = 9\n    # each bounce is one third of the previous height\n    # so we can find the height after the first bounce by scaling up the second bounce\n    first_bounce_height = second_bounce_height * 3\n    # similarly, find the initial height by scaling up the first bounce\n    initial_height = first_bounce_height * 3\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, solve\n\n    bob, rex, fido = symbols('bob rex fido')\n    # Fido is 10 years younger than Bob.\n    equation1 = fido - (bob - 10)\n    # The sum of their ages is 28.\n    equation2 = bob + rex + fido - 28\n    # Look for integer solutions where bob, rex, fido are all different and positive.\n    # We reduce room for brute-forcing by assuming bob>rex>fido, and since fido<bob, we have fido<18\n\n    min_product = float('inf')  # Placeholder for minimum product; we'll minimize this.\n    for b in range(11, 28):  # Bob age range, since fido is 10 years younger than bob.\n        for r in range(1, b):  # Rex should be younger than Bob and older than Fido.\n            solutions = solve((equation1, equation2), (rex, fido))\n            if solutions and solutions[rex] > 0 and solutions[rex] != b and solutions[rex] > solutions[fido]:\n                ages_product = b * solutions[rex] * solutions[fido]\n                if ages_product < min_product:\n                    min_product = ages_product\n    \n    return int(min_product)\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculate the numerator for the first complex fraction\n    numerator_first = (1/30) + (1/6)\n  \n    # Find the denominator for the first complex fraction\n    denominator_first = 2/25\n  \n    # Divide the numerator by the denominator for the first complex fraction\n    result_first = numerator_first / denominator_first\n  \n    # Calculate the numerator for the second complex fraction\n    numerator_second = 2 - (2/3)\n  \n    # Find the denominator for the second complex fraction\n    denominator_second = 8/3\n  \n    # Divide the numerator by the denominator for the second complex fraction\n    result_second = numerator_second / denominator_second\n  \n    # Add the results of the two complex fractions\n    ans = result_first + result_second\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Let x be the average score for class A\n    # Then (x + 7) will be the average score for class B\n    total_students = 40 + 30  # Total number of students in class A and B\n    combined_average = 90  # Given combined average score for both classes\n\n    # Combined score for all students is the product of combined average and total number of students\n    combined_score = combined_average * total_students\n    # Using the equation: total_students_in_A * average_in_A + total_students_in_B * average_in_B = combined_score\n    # 40 * x + 30 * (x + 7) = combined_score\n    # Now we solve for x\n    x = (combined_score - 30 * 7) / (40 + 30)\n    \n    # Finally, calculate the average score for class B by adding 7 to the average of class A\n    average_b = x + 7\n    return average_b\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let lee_rate be the rate at which Lee types and nancy_rate be the rate at which Nancy types\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # Lee and Nancy working together type the entire document in 10 hours\n    equation1 = Eq(1, 10 * (lee_rate + nancy_rate))\n\n    # Lee types for 6 hours then Nancy types for 20 hours to finish the job\n    equation2 = Eq(1, 6 * lee_rate + 20 * nancy_rate)\n\n    # Solve the system of equations to find Lee's and Nancy's rates\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # Calculate the time it would take for Nancy to finish the job by herself\n    time_for_nancy = 1 / solutions[nancy_rate]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    # Iterate over the possible number of ten-pence coins\n    for ten_pences in range(6):\n        # Iterate over the possible number of twenty-pence coins\n        for twenty_pences in range(4):\n            # Check if the current combination sums up to 70 pence\n            if (10 * ten_pences + 20 * twenty_pences <= 70) and (70 - (10 * ten_pences + 20 * twenty_pences)) in [0, 50]:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250)**2 - 250249*250251\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # The given expression is a sum of fractions, where the denominators are products of consecutive numbers.\n    # This hints at simplifying the expression using the difference of reciprocals.\n\n    # The pattern is: 1 / (n * (n + 1)) = (1/n - 1/(n+1))\n    # Apply this pattern to simplify each term in the denominator:\n\n    term1 = 1/2007 - 1/2008\n    term2 = 1/2008 - 1/2009\n    term3 = 1/2009  # We don't apply the pattern here because it doesn't follow the (n * (n + 1)) format.\n\n    # The sum of terms after simplification:\n    sum_of_terms = term1 + term2 + term3\n\n    # Invert the sum to find the final result:\n    ans = 1 / sum_of_terms\n\n    return ans\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    total_people = 30\n    people_behind = 16\n    mark_position = total_people - people_behind - 1\n    return mark_position\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for i in range(1, 201):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # Last two digits of the number should be divisible by 4.\n    for j in range(10):\n        if (int(f\"6{j}\") % 4) == 0:\n            return j\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the ages of Aaron, Becky, and Chris\n    aaron, becky, chris = symbols('aaron becky chris')\n\n    # Equation 1: The age difference between Aaron and Becky is the same as between Becky and Chris\n    equation1 = Eq(aaron - becky, becky - chris)\n\n    # Equation 2: The sum of their ages is 60\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    # Return the age of Becky\n    return solutions[becky]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    result = 66\n    original_number = (result / 6) - 7\n    return original_number\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one chair\n    x = symbols('x')\n    # Each table costs £25 more than each chair\n    table_cost = x + 25\n    # Total cost for 5 tables and 12 chairs\n    total_cost_equation = Eq(5 * table_cost + 12 * x, 720)\n    \n    # Solving the equation to find the cost of one chair\n    chair_cost = solve(total_cost_equation, x)[0]\n    # Calculating the cost of one table\n    table_cost_value = chair_cost + 25\n    \n    return table_cost_value\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches = symbols('apples peaches')\n    \n    equation1 = Eq(4*apples + 3*peaches, 10)\n    equation2 = Eq(4*apples + 6*peaches, 16)\n    \n    solutions = solve((equation1, equation2), (apples, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * 9 - 2 * x, 33)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_extra_water = 32\n    jane_water = audrey_water + jane_extra_water\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    total = 0\n    # Use the formula for the sum of squares: 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6\n    # and the fact that (k*(k+1))^2 = k^2 * (k+1)^2\n    for i in range(24):\n        total += i * ((i + 1) ** 2)\n    return total\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360\n    \n    # Ratio of time spent going up to going down is 5:4\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n    \n    # Calculate the time spent going up and down\n    time_up = (ratio_up / total_ratio) * total_time\n    time_down = (ratio_down / total_ratio) * total_time\n    \n    # Let the speed going down be x m/min, so the speed going up is x - 10 m/min\n    # The distance going up and down are the same, so time_up * (x - 10) = time_down * x\n    # Solve for x\n    x = (time_up * 10) / (time_down - time_up)\n    \n    # Calculate the total distance traveled\n    distance = time_down * x\n    \n    return distance\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_by_each = num_friends - 1  # Each friend sends a card to all other friends\n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    days = 0\n    while True:\n        watermelons_left = watermelons - days * watermelons_per_day\n        pineapples_left = pineapples - days * pineapples_per_day\n\n        if pineapples_left == 3 * watermelons_left:\n            break\n        days += 1\n\n    return days\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    # least common multiple of the two packet sizes to find when she'll start both again\n    days_until_same_start = lcm(25, 20)\n\n    # March has 31 days, so we need to calculate the month and day she starts new packets\n    # Starting from March 1st\n    month = 3  # Because March is the 3rd month\n    day_start = 1\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n                  7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    while days_until_same_start > 0:\n        days_in_month = month_days[month]\n        days_left_in_month = days_in_month - day_start + 1\n        if days_until_same_start > days_left_in_month:\n            days_until_same_start -= days_left_in_month\n            month += 1\n            if month > 12:\n                month = 1\n            day_start = 1\n        else:\n            day_start += days_until_same_start - 1\n            break\n\n    return (month, day_start)\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_per_week = 7\n    num_weeks = days_until_birthday // days_per_week\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_to_meet = 5\n\n    total_distance = (eddie_speed + brother_speed) * time_to_meet\n    return total_distance\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Convert the time Aiden wants to take the bus and the time he arrives to minutes\n    desired_bus_time = 9 * 60 + 15  # 9:15 in minutes\n    arrival_time = 9 * 60 + 22       # 9:22 in minutes\n\n    # Calculate the time passed since the last bus left before Aiden arrived\n    time_since_last_bus = (arrival_time - desired_bus_time) % 35\n\n    # Calculate the waiting time for the next bus\n    waiting_time = 35 - time_since_last_bus\n\n    return waiting_time\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tom's current age and j be Jerry's current age.\n    t, j = symbols('t j')\n\n    # Tom will be twice his age in 4 years: t + 4 = 2 * t\n    equation1 = Eq(t + 4, 2 * t)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10: (t - 3) + (j - 3) = 10\n    equation2 = Eq(t - 3 + j - 3, 10)\n\n    # Solve the system of equations for t and j.\n    solutions = solve((equation1, equation2), (t, j))\n    tom_age = solutions[t]\n    jerry_age = solutions[j]\n\n    # Jerry's age is doubled in y years: jerry_age + y = 2 * jerry_age\n    y = symbols('y')\n    equation3 = Eq(jerry_age + y, 2 * jerry_age)\n\n    # Solve the equation for y.\n    years = solve(equation3, y)\n\n    return years[0]\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((3 + i*2)**2 if i % 2 == 0 else -(3 + i*2)**2 for i in range(25))\n    return ans\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    i = 7\n    brother = 5\n    mother = 29\n    father = 31\n    while True:\n        i += 1\n        brother += 1\n        mother += 1\n        father += 1\n        if isprime(i) and isprime(brother) and isprime(mother) and isprime(father):\n            return father\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = original_price * 0.15\n    discounted_price = original_price - discount\n    increased_price = discounted_price * 0.15\n    final_price = discounted_price + increased_price\n\n    return final_price\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    regions = 1 + circles * (circles + 1) // 2\n    return regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    friends = 8\n    books_given_per_friend = 15\n    \n    books_given_away = friends * books_given_per_friend\n    books_remaining = total_books - books_given_away\n\n    return books_remaining\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # Total number of intervals between lamp posts\n    intervals = 30 // 3\n    \n    # Total distance / number of intervals\n    distance_between_posts = 50 / (intervals + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    power_unit_digit_sequence = [4 ** i % 10 for i in range(1, 5)]\n    power_cycle_length = len(power_unit_digit_sequence)\n    \n    # Since the pattern repeats every 4 powers, find the unit digit of the\n    # power sequence that corresponds to 44^2008\n    cycle_position = 2008 % power_cycle_length\n\n    # If cycle_position is 0, we use the last digit in the cycle\n    unit_digit = power_unit_digit_sequence[cycle_position - 1]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    male_adults = total_adults * fraction_male\n    return int(male_adults)\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio = 6\n    paths_book = 4\n    paths_chapel = 5\n\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    total_paths = (paths_audio * paths_audio_to_school) + \\\n                  (paths_book * paths_book_to_school) + \\\n                  (paths_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let a be the weight of Adam, b be the weight of Ben, and c be the weight of Carl\n    a_and_b = 102\n    b_and_c = 97\n    a_and_c = 93\n    \n    # The sum of all their weights is twice the individual pairs since each person is counted twice\n    total_weight = (a_and_b + b_and_c + a_and_c) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_time_h = 12\n    arrival_time_m = 40\n    duration_h = 2\n    duration_m = 40\n\n    departure_h = arrival_time_h + duration_h\n    departure_m = arrival_time_m + duration_m\n    \n    if departure_m >= 60:\n        departure_h += departure_m // 60\n        departure_m = departure_m % 60\n        \n    if departure_h > 12:  # Assuming time is in 12-hour format and party starts in PM\n        departure_h -= 12\n    \n    return (departure_h, departure_m)\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n\n    return total_value\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle, eddie = symbols('belle eddie')\n\n    equation = Eq(belle + 11, eddie)\n\n    belle_sticks = 49\n    solutions = solve((equation, Eq(belle, belle_sticks)), (belle, eddie))\n\n    return solutions[eddie]\n    \nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamps = 50\n    distance_apart = 2\n\n    # The distance is calculated as the number of gaps between lamp posts times the distance between each pair\n    road_length = (num_lamps - 1) * distance_apart\n\n    return road_length\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    total_boxes = 6\n    total_weight = weight_per_box * total_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq((3 / 4) * chelsia, (5 / 6) * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea / 2\n    tea_to_give = 983 - tea_each\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 4, 6]\n    all_combinations = set(permutations(digits, r=len(digits)))\n\n    return len(all_combinations)\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 13 * cost_per_banana\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    # Let r be the number of normal rabbits and s be the number of special rabbits.\n    # Each normal rabbit has 1 head and each special rabbit has 3 heads.\n    # Total heads equation: r + 3s = 53\n    # Each normal rabbit has 4 feet and each special rabbit has 2 feet.\n    # Total feet equation: 4r + 2s = 102\n    # Solve the system of equations to find r and s.\n\n    from sympy import symbols, Eq, solve\n    \n    r, s = symbols('r s')\n    total_heads = Eq(r + 3*s, 53)\n    total_feet = Eq(4*r + 2*s, 102)\n    \n    solutions = solve((total_heads, total_feet), (r, s))\n\n    # Since the question asks for the total amount of rabbits (normal and special),\n    # we add the number of normal rabbits and special rabbits.\n    ans = solutions[r] + solutions[s]\n    \n    return ans\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Calculate the recurring cycle of 1/70\n    remainder = 1\n    remainder_set = set()\n    recurring_cycle = []\n    \n    while True:\n        remainder = remainder * 10\n        digit = remainder // 70\n        remainder = remainder % 70\n        if remainder in remainder_set:\n            break\n        else:\n            remainder_set.add(remainder)\n            recurring_cycle.append(digit)\n    \n    # Find the 500th digit in the recurring cycle    \n    cycle_length = len(recurring_cycle)\n    digit_500th = recurring_cycle[(500 - 1) % cycle_length]\n\n    return digit_500th\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    sweets_with_neelesh_after_eating = 4\n    sweets_eaten_by_neelesh = 1\n    sweets_with_neelesh_before_eating = sweets_with_neelesh_after_eating + sweets_eaten_by_neelesh\n    fraction_given_to_neelesh = 1/6\n\n    total_sweets = sweets_with_neelesh_before_eating / fraction_given_to_neelesh\n    sweets_left_with_ayesha = total_sweets - sweets_with_neelesh_before_eating\n\n    return sweets_left_with_ayesha\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/(i*(20+i-11)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of gummy bears and y be the initial number of lollipops\n    x, y = symbols('x y')\n\n    # According to the first ratio\n    eq1 = Eq(x/y, 5/7)\n\n    # According to the second ratio after adding 120 pieces to each\n    eq2 = Eq((x + 120)/(y + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculate the total number of candies now\n    total_candies_now = solutions[x] + 120 + solutions[y] + 120\n\n    return total_candies_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    \n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    ans = sum(numbers) * 3\n    return ans\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the numbers of marbles in boxes B and C\n    B, C = symbols('B C')\n\n    # We have 80 marbles in Box A\n    A = 80\n\n    # Box B has twice as many marbles as Box C\n    equation1 = Eq(B, 2 * C)\n\n    # Total number of marbles is the sum of marbles in A, B and C\n    equation2 = Eq(A + B + C, 560)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (B, C))\n\n    # Solution for the number of marbles in Box C\n    return solutions[C]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Converting the numbers from base 3 to base 10\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n    \n    # Subtracting the numbers in base 10\n    result_base10 = num1_base10 - num2_base10\n    \n    # Converting the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3*carl - 5)\n    equation2 = Eq(bella, 5*carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of calories in one cake\n    # Let b be the number of calories in one biscuit\n\n    c, b = symbols('c b')\n\n    # Given equations based on the problem statements\n    equation1 = Eq(1 * c + 2 * b, 450)\n    equation2 = Eq(2 * c + 3 * b, 800)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, mother_age = symbols('john_age mother_age')\n    \n    # Equation for the future and past ages\n    equation_future_past = Eq(john_age + 8, mother_age - 20)\n    \n    # Equation for when mother was 5 times older than John\n    equation_5_times = Eq(mother_age, 5 * john_age)\n    \n    # Solve the system of equations\n    solutions = solve((equation_future_past, equation_5_times), (john_age, mother_age))\n\n    # Age difference between John and his mother\n    age_difference = solutions[mother_age] - solutions[john_age]\n\n    # John's age when his mother was 5 times older than him\n    johns_age_when_mother_5_times = age_difference / 4\n\n    return johns_age_when_mother_5_times\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = (2017 + 1/3 - 2016.875) * 17\n    fraction = numerator / denominator\n    ans = fraction * (3 + 23/32)\n    return ans\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef solution():\n    lcm = 4\n    for number in [6, 7]:\n        lcm = lcm * number // gcd(lcm, number)\n    return lcm\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Start by creating a list of the first 20 positive integers\n    numbers = list(range(1, 21))\n    # Initialize the maximum length of list and list itself\n    max_length = 0\n    max_list = []\n    \n    # We will iterate over all subsets of numbers\n    for i in range(1 << 20):\n        subset = [numbers[j] for j in range(20) if (i & (1 << j))]\n        \n        # Check successive differences\n        valid = True\n        for k in range(len(subset) - 1):\n            for l in range(k + 1, len(subset)):\n                if abs(subset[k] - subset[l]) == 5:\n                    valid = False\n                    break\n            if not valid:\n                break\n        \n        # If the subset satisfies the conditions, check if it is longer than the current max\n        if valid and len(subset) > max_length:\n            max_length = len(subset)\n            max_list = subset\n    \n    # The answer is the length of the longest valid subset\n    return max_length\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = lambda a, b: abs(a*b) // math.gcd(a, b)\n    tom_time = 24\n    william_time = 8\n    return lcm(tom_time, william_time)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    # Initialize M to the smallest number that is greater than 10 and has a non-zero remainder\n    # when divided by any divisor from 2 to 10\n    M = 11\n\n    # We will check if the remainders are all different, and increment M if they are not\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n\n        # If the remainders are all distinct and there are exactly 9 of them\n        # (since we are getting remainders for divisors from 2 to 10), we have found the answer\n        if len(remainders) == 9:\n            return M\n\n        # Otherwise increment M and try again\n        M += 1\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_size = 4\n    containers = -(-apples // container_size)  # Ceiling division\n\n    return containers\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_pupil in range(1, 99):  # Assume each pupil can have at most 98 pencils\n        total_pencils = 44 * pencils_per_pupil\n        if total_pencils >= 110 and total_pencils <= 998:  # 'B1B' is at least three digits\n            B1B_str = str(total_pencils)\n            if B1B_str[-1] == B1B_str[-3]:  # Check if first and last digits are the same\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    # We cannot solve for an exact value without more information,\n    # so we return the expression for reema\n    reema_collected = solve(equation, reema)[0]\n\n    return reema_collected\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = (math_students + art_students) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n    \n    # Posts are needed at each interval, plus one additional post at the end\n    num_posts = (field_length // post_interval) + 1\n    \n    return num_posts\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it's a two-digit number\n        for b in range(0, 10):  # b can be 0-9\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    sum_positive_numbers = 10 + 20 + 30 + 50 + 60 + 70\n    sum_negative_numbers = 6 + 16 + 26 + 46 + 56 + 66\n    ans = sum_positive_numbers - sum_negative_numbers\n    return ans\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors and respective powers\n    factors = factorint(28)\n    \n    # To get a perfect square, each prime factor must be raised to an even power.\n    # So, we calculate how much each prime factor falls short of an even power.\n    # This shortfall must be multiplied to the original number to obtain a perfect square.\n\n    mult = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:  # if the power is odd\n            mult *= prime  # multiply the shortfall\n\n    return mult\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Benson finished his lunch at 2:50 PM\n    lunch_finished_time = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Benson spent 20 minutes on lunch\n    before_lunch = timedelta(minutes=20)\n\n    # Benson watched television for 20 minutes\n    tv_time = timedelta(minutes=20)\n\n    # Benson played for 10 minutes\n    play_time = timedelta(minutes=10)\n\n    # Calculate the time when Benson reached home\n    reach_home_time = lunch_finished_time - before_lunch - tv_time - play_time\n\n    return reach_home_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y = 6 * symbols('x')\n\n    return y\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n\n    for _ in range(years):\n        initial_rabbits = (initial_rabbits * 5) // 2\n    \n    return initial_rabbits\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    buzz = symbols('buzz')\n    jessie = buzz / 3\n\n    equation = Eq(buzz - jessie, 450)\n    solution = solve(equation, buzz)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    import math\n    # Consider A and B as a single entity since they have to be always together.\n    # Then we have 5 entities to arrange: (AB), C, D, E, F\n    # The number of permutations for these 5 entities is 5! (factorial of 5).\n    entity_permutations = math.factorial(5)\n\n    # A and B can be arranged among themselves in 2! ways (2 factorial) since they can be (AB) or (BA).\n    ab_permutations = math.factorial(2)\n\n    # Total arrangements would be permutations of entities times permutations of A and B\n    total_arrangements = entity_permutations * ab_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    max_num = 99  # Largest two-digit number\n    for num in range(max_num, 9, -1):  # Starting from the largest and going to the smallest two-digit number\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:  # Subtract the remainder and check if divisible by 4 and 5\n            return num  # Return the first (largest) number that satisfies the condition\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    base_mul = 246 * 135\n    additional_mul = 2 * 135\n    \n    ans = base_mul + additional_mul\n    \n    return ans\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple', integer=True)\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    # Start by distributing the minimum amount of sweets to each student, which is 5.\n    min_sweets_per_student = 5\n\n    # Calculate the maximum size the class could be by dividing the total number of sweets by the minimum sweets per student.\n    total_sweets = 138\n    max_class_size = total_sweets // min_sweets_per_student  # Using floor division to get the whole number\n\n    # To distribute the sweets as evenly as possible, we want the highest class size where each student can get at least 5 sweets.\n    # Since we start with the maximum class size and know at least one student gets 5 sweets, the highest possible class size\n    # is actually the maximum class size calculated.\n    \n    return max_class_size\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    steps = symbols('steps')\n    speed_escalator = symbols('speed_escalator')\n\n    # Peter's speed in steps/second is added to the escalator's speed to give the total steps moved per second.\n    # When walking at 1 step/sec, it takes 10 seconds to reach the top.\n    equation1 = Eq(steps / (1 + speed_escalator), 10)\n\n    # When walking at 2 steps/sec, it takes 16/2 = 8 seconds to reach the top.\n    equation2 = Eq(steps / (2 + speed_escalator), 8)\n\n    # Solve the system of equations to find the number of steps (the escalator's length).\n    result = solve((equation1, equation2), (steps, speed_escalator))\n\n    return result[steps]\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 34 - 3 * (2 * x - 2) - 16\n\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Since trees are planted at both ends, we start counting from 0 up to and including the road length\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum = (3 * 10) + (33 * 0.01) + (300 * 0.001)\n    return sum\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n    \n    return num_children\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    quarter_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - quarter_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Jon and Miguel have\n    jon, miguel = symbols('jon miguel')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(jon, miguel + 0.3 * miguel)  # Jon has 30% more money than Miguel\n    equation2 = Eq(jon + miguel, 46)            # Together, they have 46 pounds\n\n    # Use sympy's solve function to find the values of jon and miguel\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # hundreds digit must be an even number less than 5 (2 or 4)\n        for tens in range(0, 10, 2):  # tens digit must be an even number\n            if tens <= hundreds:  # hundreds digit must be smaller than the tens digit\n                continue\n            ones = 2 * hundreds  # ones digit is twice hundreds digit\n            if ones > 9 or ones % 2 != 0:  # checking if ones is a valid even digit\n                continue\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 18 == 0:  # number must be divisible by 2 and 9, hence 18 (LCM of 2 and 9)\n                return number\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a colour pencil and a notebook\n    pencil, notebook = symbols('pencil notebook')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    # Calculate the total cost of 1 colour pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables for the amount of chocolate Sally (s) and Ken (k) originally had\n    s, k = symbols('s k')\n\n    # Set up the equations based on the problem statement\n    # Sally and Ken's original chocolate ratio\n    equation1 = Eq(s / k, 5 / 7)\n    # Ken gives 24 chocolates to Sally\n    equation2 = Eq(s + 24, k - 24)\n    # After giving chocolates, Sally has twice as many as Ken\n    equation3 = Eq(s + 24, 2 * (k - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (s, k))\n\n    # Ken's chocolates in the end\n    k_chocolates_end = solutions[k] - 24\n\n    return k_chocolates_end\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    cost_40_to_50 = 5\n    cost_50_to_60 = 8\n    cost_above_60 = 15\n    free_hours = 40\n    max_hours_at_5 = 50\n    max_hours_at_8 = 60\n\n    # Calculate the total cost if hours are between 40 and 50\n    if bill <= (max_hours_at_5 - free_hours) * cost_40_to_50:\n        hours = free_hours + bill / cost_40_to_50\n\n    # Calculate the total cost if hours are between 50 and 60\n    elif bill <= (max_hours_at_5 - free_hours) * cost_40_to_50 + (max_hours_at_8 - max_hours_at_5) * cost_50_to_60:\n        bill -= (max_hours_at_5 - free_hours) * cost_40_to_50\n        hours = max_hours_at_5 + bill / cost_50_to_60\n\n    # Calculate the total cost if hours are above 60\n    else:\n        bill -= (max_hours_at_5 - free_hours) * cost_40_to_50 + (max_hours_at_8 - max_hours_at_5) * cost_50_to_60\n        hours = max_hours_at_8 + bill / cost_above_60\n\n    return hours\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    thought_number = (2 * sides_of_square) - sides_of_triangle\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 0.12\n\n    new_pay = original_pay + (original_pay * increase_percentage)\n\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digit_count = 0\n    \n    while digit_count < total_digits:\n        pages += 1\n        digit_count += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the amounts of money each person has\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    # Equation 1: Raju = 3 * Vijay\n    equation1 = Eq(raju, 3 * vijay)\n    # Equation 2: Raju = Patrick + 152\n    equation2 = Eq(raju, patrick + 152)\n    # Equation 3: (Raju + Vijay + Patrick) / 3 = 507\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n    equation = Eq(first_number, 4 * second_number)\n    \n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    # Joanna's pocket money per week\n    joanna_weekly = 5.00\n    # Amy's pocket money per week\n    amy_weekly = 3.50\n    \n    # Total weeks\n    weeks = 5\n    \n    # Amy's spending per week on stickers\n    amy_spending = 0.75\n    \n    # Joanna's total savings after 5 weeks\n    joanna_savings = joanna_weekly * weeks\n    \n    # Amy's total savings after 5 weeks, subtracting her spending on stickers\n    amy_savings = (amy_weekly * weeks) - (amy_spending * weeks)\n    \n    # Difference in savings between Joanna and Amy\n    difference = joanna_savings - amy_savings\n    \n    return difference\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_to_pay_debt = debt / monthly_salary\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n    total_students = total_male_students + total_female_students\n\n    # Calculate all possible committees with 1 teacher and 4 students\n    all_possible_committees = total_teachers * comb(total_students, 4)\n\n    # Calculate committees with no female students (1 teacher and 4 male students)\n    committees_no_females = total_teachers * comb(total_male_students, 4)\n\n    # Calculate committees with at least 1 female student\n    committees_with_females = all_possible_committees - committees_no_females\n\n    return committees_with_females\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = 0\n    \n    for i in range(1, 8):\n        ans += (i * 10) - (i * 10 - 4)\n    \n    ans += 2021\n    \n    return ans\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_x = 3\n    degree_y = 2  # represents the degree of y to the power of n, so 2 * n\n    total_degree = 5\n    n = (total_degree - degree_x) / degree_y\n    return int(n)\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Known values\n    nth_term_10 = 23\n    nth_term_15 = 38\n    \n    # The common difference 'd' in the arithmetic sequence\n    common_difference = (nth_term_15 - nth_term_10) / (15 - 10)\n    \n    # Finding out the first term 'a' using nth term formula: nth_term = a + (n - 1) * d\n    first_term = nth_term_10 - (10 - 1) * common_difference\n    \n    # Finding the 12th term using the formula: nth_term = a + (n - 1) * d where n = 12\n    nth_term_12 = first_term + (12 - 1) * common_difference\n    \n    # Return the 12th term\n    return nth_term_12\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n\n    total_milk = milk_per_cup * 45\n    total_tea = tea_per_cup * 45\n\n    total_litres = total_milk + total_tea\n\n    return total_litres\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    n = 20 - 8  # Deduct 8 since the median falls on the lower side of the middle term.\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil = symbols('book pencil')\n    pencil_cost = 0.40  # 40 pence = £0.40\n    sarah_books = 8\n    sarah_pencils = 3\n    rebecca_books = 3\n    rebecca_pencils = 8\n\n    sarah_cost = sarah_books * book + sarah_pencils * pencil_cost\n    rebecca_cost = rebecca_books * book + rebecca_pencils * pencil_cost\n    equation = Eq(sarah_cost, rebecca_cost + 1)\n\n    solutions = solve(equation, book)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    containers_needed = total_juice / per_container\n    return containers_needed\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of gummy bears each person buys\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Set up equations based on the information given\n    equation1 = Eq(angela, bernice + 2)  # Angela buys two more gummy bears than Bernice\n    equation2 = Eq(bernice, candice + 8)  # Bernice buys eight more gummy bears than Candice\n    equation3 = Eq(6 * (angela + bernice + candice), 342)  # Together they spend 3.42 pounds\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the three consecutive numbers be x, x+1, and x+2\n    x = (60 - 3) // 3  # Subtract 3 because we are going to add 1 and 2 to the first number to get the next two\n    largest_number = x + 2  # The largest number is two more than the first number\n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weight of the lightest, middle, and heaviest apple respectively.\n    # z > y > x\n    # The mean of the remaining two apples after eating the largest apple is (x + y) / 2 = 70\n    # The mean of the remaining two apples after eating the lightest apple is (y + z) / 2 = 105\n    # Hence, we have two equations:\n    # (x + y) / 2 = 70 => x + y = 140\n    # (y + z) / 2 = 105 => y + z = 210\n    # Subtracting the first equation from the second gives:\n    # (y + z) - (x + y) = 210 - 140 => z - x = 70\n\n    # The weight difference between the heaviest apple and the lightest apple is 70 grams\n    return 70\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n\n    # Total handshakes if everyone shakes hands with everyone else\n    total_handshakes = (total_members * (total_members - 1)) // 2\n\n    # Handshakes that didn't happen in the non-shaking group\n    non_shaking_handshakes = (non_shaking_groups * (non_shaking_groups - 1)) // 2\n\n    # Subtract the non-shaking handshakes from total handshakes\n    actual_handshakes = total_handshakes - non_shaking_handshakes\n\n    return actual_handshakes\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10): # The original number must be a single digit (1-9)\n        original_number = i\n        new_number = int(str(i) + '0')\n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the A as a symbol\n    A = symbols('A')\n\n    # Based on the vertical form puzzle clues, we get the following equations:\n    # The clues in vertical form imply that:\n    #  - A + A + A = B\n    # and since there is one equation and one unknown, we can find the value of A\n    equation = Eq(3 * A, 12)\n\n    # Solve the equation for A\n    solution = solve(equation, A)\n\n    return solution[0]  # Return just the value of A, not a list\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5 # integer division\n    return ans\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of gaps between plum trees is one less than the number of trees\n    plum_tree_gaps = 41 - 1\n    \n    # Distance between plum trees is 4m, so total length of the road covered by plum trees\n    plum_trees_length = plum_tree_gaps * 4\n    \n    # Since pine trees are planted at intervals of 5m, find the number of intervals of 5m\n    pine_tree_intervals = plum_trees_length / 5\n    \n    # The number of pine trees is one more than the number of intervals\n    num_pine_trees = int(pine_tree_intervals) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter the direction he counts,\n    # the array must be a rectangle where Bob is 2 places away from each edge.\n    # Let's consider the array as a grid where Bob's position is (2, 2) \n    # (index starting from 1 for simplicity).\n\n    # As he is 3rd from the front and back, there must be 2 animals\n    # in front of him and 2 animals behind him, which makes it a column of 5 animals.\n\n    # Similarly, he is 3rd from the left and right, which makes it a row of 5 animals.\n\n    # Now, we calculate the total number of animals in a 5x5 grid.\n    total_animals = 5 * 5\n\n    return total_animals\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = ((100 // 11) + 1) * 11\n    largest_multiple = (300 // 11) * 11 - 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_sum = 12 * 4000\n    incorrect_salary = 2800\n    correct_salary = 3040\n\n    correct_sum = incorrect_sum - incorrect_salary + correct_salary\n    correct_average = correct_sum / 12\n    \n    return correct_average\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    # Equation based on the cost of durian and honeydew\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    # Each durian costs twice as much as each honeydew\n    equation2 = Eq(durian, 2 * honeydew)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # According to the problem, we have three equations:\n    # The height of 6 one-cent coins is the same as 5 two-cent coins\n    equation1 = Eq(6 * one_cent, 5 * two_cent)\n    # The height of 4 one-cent coins is the same as 3 five-cent coins\n    equation2 = Eq(4 * one_cent, 3 * five_cent)\n    # The total number of coins used\n    equation3 = Eq(one_cent + two_cent + five_cent, 124)\n\n    # Since our target is to have stacks of equal height, we can assume\n    # that the height of each stack is a common variable `h`. We can express\n    # the height of the stack in terms of one-cent coins (h = one_cent) and rewrite\n    # the equations as:\n    equation1_rewritten = Eq(6, 5 * two_cent / one_cent)\n    equation2_rewritten = Eq(4, 3 * five_cent / one_cent)\n\n    # Solve the equations\n    solutions = solve((equation1_rewritten, equation2_rewritten, equation3), (one_cent, two_cent, five_cent))\n\n    # Calculate the total value of the coins\n    total_value = solutions[one_cent] * 1 + solutions[two_cent] * 2 + solutions[five_cent] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_initial, B_initial = symbols('A_initial B_initial')\n\n    # A contained 350 mL more water than B initially\n    equation1 = Eq(A_initial, B_initial + 350)\n\n    # After 500 mL of water was spilled from A, B had twice as much water as A\n    equation2 = Eq(B_initial, 2 * (A_initial - 500))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (A_initial, B_initial))\n\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    money_spent_on_books = 0.25 * initial_amount\n    money_left_after_books = initial_amount - money_spent_on_books\n    money_spent_on_dvd = 0.20 * money_left_after_books\n    money_left = money_left_after_books - money_spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)  # 'm' will be replaced by the actual number of components produced last year when calling the function"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys = 216\n    girls = 153\n    children_joined = 37\n\n    total_children = boys + girls + children_joined\n\n    return total_children\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # The largest six-digit palindrome could be\n    # theoretically 999999, but since it has to be a multiple of 6, and any number\n    # divisible by 6 must be even (divisible by 2) and the sum of its digits must be\n    # divisible by 3, the last digit cannot be 9. Therefore, we start with 998899.\n    \n    for x in range(998899, 100000, -1):\n        # Check if the number is a palindrome\n        if str(x) == str(x)[::-1]:\n            # Check if the number is divisible by 6\n            if x % 6 == 0:\n                return x\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Greatest number of red pens occurs when the total number of pens is maximized\n    # but still less than 100. We'll iterate downwards from 99 to find the highest\n    # total number of pens that fit the given ratio constraints.\n    \n    for total_pens in range(99, 0, -1): # Start from 99 down to 1\n        # Given the ratios of blue:green = 2:5 and green:red = 4:1\n        # We can represent the number of pens as 2x:5x for blue and green respectively\n        # and since green:red = 4:1, this is the same as green:4*green = 4y:y for green and red respectively\n        # For some integers x and y\n        # Equating green pens in both ratios, we get: 5x = 4y\n\n        # We loop through possible values for the number of green pens.\n        for green_pens in range(1, total_pens):\n            blue_pens = (2/5) * green_pens\n            red_pens = (1/4) * green_pens\n            # Check if they are all integers and if the sum is less than 100\n            if blue_pens.is_integer() and red_pens.is_integer() and blue_pens + green_pens + red_pens == total_pens:\n                return int(red_pens)\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    required_length = 1.83  # Required length in meters\n    shortfall = 0.10       # Shortfall in meters\n    garage_length = required_length - shortfall  # Length of the piece in the garage in meters\n    return garage_length\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for needles and pins\n    needles, pins = symbols('needles pins')\n\n    # Initial condition\n    initial_total = 2540\n    pins_sold = 1820\n    needles_fraction_sold = 4 / 5\n\n    # Equations based on the problem statement\n    equation1 = Eq(initial_total, pins + needles)\n    equation2 = Eq(pins - pins_sold, needles - needles_fraction_sold * needles)\n    equation3 = Eq(pins - pins_sold, needles - needles_fraction_sold * needles)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (needles, pins))\n\n    needles_left = solutions[needles] * (1 - needles_fraction_sold)\n    return needles_left\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    length_of_pattern = len(pattern)\n    total_numbers = 41\n    full_patterns = total_numbers // length_of_pattern\n    remaining_numbers = total_numbers % length_of_pattern\n\n    sum_full_patterns = sum(pattern) * full_patterns\n    sum_remaining_numbers = sum(pattern[:remaining_numbers])\n\n    ans = sum_full_patterns + sum_remaining_numbers\n    return ans\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 48, 2):\n        for five_p in range(0, 48, 5):\n            if two_p + five_p == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    # Let's represent the number of marbles Wei Yan had at first as x.\n    # After giving away 3/8 of his marbles, he has (1 - 3/8)x left, which is 5/8x.\n    # Then he gives away 5/7 of what's left (5/8x), which leaves him with (1 - 5/7)(5/8)x = (2/7)(5/8)x = 5/28x.\n    # His cousin then gives him 408 marbles, so his final amount is 5/28x + 408.\n    # In the end he has twice as many marbles as he started with: 2x.\n    # So our equation is: 5/28x + 408 = 2x\n    # Let's solve this algebraic equation to find out the original number of x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # The original number of marbles\n    equation = Eq((5/28) * x + 408, 2 * x)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1/8 - 1/9 + 1/10 - 1/11\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    \n    # Brian's and father's age difference\n    age_diff = father_age - brian_age\n    \n    # Loop through each year until Brian's and father's ages are reversed\n    while True:\n        brian_age += 1\n        father_age += 1\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11-x1):\n            x3 = 11 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = round(654876, -2)\n    num2 = round(279745, -2)\n\n    ans = num1 - num2\n    return ans\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    train_length_meters = 480\n    # Speed = Distance / Time\n    speed_meters_per_second = train_length_meters / time_seconds\n    # Convert m/s to km/h by multiplying by 3.6 (since 1 m/s = 3.6 km/h)\n    speed_kilometers_per_hour = speed_meters_per_second * 3.6\n    \n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    fraction = 2 / 5\n    whole_number = 30\n    result = fraction * whole_number\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n    \n    # Subtracting one because the calculation involves the intervals between the lampposts\n    road_length = (num_lampposts - 1) * distance_between_lampposts\n    \n    return road_length\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8 - x1 + 1):\n            for x3 in range(0, 8 - x1 - x2 + 1):\n                for x4 in range(0, 8 - x1 - x2 - x3 + 1):\n                    for x5 in range(0, 8 - x1 - x2 - x3 - x4 + 1):\n                        for x6 in range(0, 8 - x1 - x2 - x3 - x4 - x5 + 1):\n                            for x7 in range(0, 8 - x1 - x2 - x3 - x4 - x5 - x6 + 1):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8 and len([n for n in [x1, x2, x3, x4, x5, x6, x7] if n > 0]) >= 2:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10 ** 5) / (5 ** 5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    return largest - smallest\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # Assuming the worst case scenario, where each key is tried in each lock\n    # until the correct one is found.\n    trials = 0\n    remaining_keys = 10\n    for i in range(1, 11):\n        trials += remaining_keys # we try all remaining keys\n        remaining_keys -= 1 # a key is found for a lock, so there is one key less to try next time\n\n    return trials\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n    poppers_left = total_guests % bag_size\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since we are interested only in the ones digit, we consider the cyclicity of 7's powers\n    # The ones digit of 7's powers cycle through 4 phases: 7, 9, 3, and 1; for 7^1, 7^2, 7^3, 7^4, \n    # and then the pattern repeats: ..., 7^5 -> 7, 7^6 -> 9, and so forth.\n    \n    # Calculate the remainder of 2023 divided by 4 to find out which part of the cycle it corresponds to\n    remainder = 2023 % 4\n    \n    # Create a dictionary to map the remainder to the ones digit\n    ones_digit = {1: 7, 2: 9, 3: 3, 0: 1}\n    \n    # Use the calculated remainder to find out the answer\n    return ones_digit[remainder]\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_string = \"\".join(str(x) for x in range(1, 31))\n    removed_string = number_string[46:]\n    return int(removed_string)\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import Rational, root, sqrt\n\n    # Set the precision for Decimal operations\n    getcontext().prec = 10\n\n    # Define the repeating decimals using sympy's Rational\n    negative_repeating = Rational(-40, 3)\n    repeating_decimal1 = Rational(4, 9)\n    repeating_decimal2 = Rational(100, 9)\n\n    # Calculate the cube root and square, respectively\n    cube_root = root(negative_repeating, 3)\n    square = repeating_decimal1 ** 2\n\n    # Calculate the square root for the divisor\n    square_root = sqrt(repeating_decimal2)\n\n    # Perform the final operation\n    division = (Decimal(cube_root) * Decimal(square)) / (Decimal('59.24') - Decimal(square_root))\n\n    # Round to the nearest 3 decimal places\n    ans = round(division, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    to_pick = 2\n    ans = comb(total_children, to_pick)\n    return ans\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome: 10001 (smallest 5-digit palindrome possible)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome: 999999 (largest 6-digit palindrome possible)\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between the greatest 6-digit palindrome and the least 5-digit palindrome numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    # If three quarters are girls, one quarter are boys.\n    # Therefore, multiply the number of boys by 3 to get the number of girls.\n    girls = boys * 3\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    ans = banana_price + apple_price\n\n    return ans\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    # Let x be the number of years later when the sum of their ages become 60.\n    # Sara's age x years later will be 8 + x.\n    # Lucy's age x years later will be 36 + x.\n    # According to the problem, their combined age should be 60.\n    # Therefore, we have the equation: (8 + x) + (36 + x) = 60.\n\n    # We solve this equation for x.\n    x = (60 - (8 + 36)) / 2\n\n    return x\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum(number for number in range(1, 51) if '3' in str(number))\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    \n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n    \n    return total_seating\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    terms = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # Paying with 1 pound coins, the payment has to be a whole number\n\n    change = payment - book_cost\n\n    return round(change, 2)  # rounding to 2 decimal places since it's currency\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    footballs, basketballs = symbols('footballs basketballs', integer=True)\n\n    # Initial condition: there were 2/5 as many footballs as basketballs\n    initial_condition = Eq(footballs, (2/5) * basketballs)\n\n    # After selling 16 basketballs: the store had 2/3 as many footballs as basketballs\n    after_selling_condition = Eq(footballs, (2/3) * (basketballs - 16))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_selling_condition), (footballs, basketballs))\n\n    # Calculate total number of footballs and basketballs at first\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure a pair of the same color, Rona must take out at least one glove more than\n    # the product of the number of colors and the number of gloves per pair (as the worst-case scenario is picking one of each color before getting a matching pair)\n    num_colors = 5\n    gloves_per_pair = 2\n    # In the worst case, Rona takes one of each color, and then one more to guarantee a pair\n    gloves_to_take = num_colors * (gloves_per_pair - 1) + 1\n\n    return gloves_to_take\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y the current age of the younger brother\n    x, y = symbols('x y')\n\n    # When the older brother was the same age as the younger brother is currently, the younger brother was 12 years old\n    equation1 = Eq(x - y, y - 12)\n\n    # When the younger brother is as old as the older brother is now, the older brother will be 27 years old\n    equation2 = Eq(x + (x - y), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want the current age of the older brother\n    return solutions[x]\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    # Using floor division to find the first multiple of 8 after 30\n    first_multiple = (30 // 8 + 1) * 8\n\n    # Using floor division to find the last multiple of 8 before 82\n    last_multiple = 82 // 8 * 8\n\n    # Calculating the number of multiples of 8 in the range\n    number_of_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    increased_price = original_price * (1 + increase_rate)\n    final_price = increased_price * (1 - decrease_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    # The formula for the maximum number of intersections or junctions in \"n\" lines is: n * (n - 1) / 2\n    ans = lines * (lines - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the stickers Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n\n    # According to the problem, Sam had 40 stickers more than Peter initially\n    eq1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_gave = 0.20 * sam\n    sam_after_giving = sam - sam_gave\n    peter_after_receiving = peter + sam_gave\n\n    # Peter gave 25% of his stickers to Sam\n    peter_gave = 0.25 * peter_after_receiving\n    sam_final = sam_after_giving + peter_gave\n    peter_final = peter_after_receiving - peter_gave\n\n    # In the end, Sam had 96 stickers more than Peter\n    eq2 = Eq(sam_final, peter_final + 96)\n\n    # Now we sold the equations to find the original amount of stickers Peter had\n    solution = solve((eq1, eq2), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    result = 1.3 + 2.87 + 3.7\n    return result\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # In each group, we have 4 people and each person has to play with every other person once.\n    games_in_group = (4 * (4 - 1)) // 2  # Combination of 4 choose 2 to find the games in one group\n    total_group_games = games_in_group * 4  # There are 4 groups\n\n    # In the knockout stages, each match eliminates one person until we have 1 winner.\n    # Top 8 means 8 people, which will require 7 matches to get to 1 winner.\n    knockout_games = 8 - 1 + 4 - 1 + 2 - 1 + 1  # Top 8, Top 4, Top 2, and finals (winner vs runner-up)\n    \n    # We also need to account for the third place match which is 1 additional game.\n    third_place_game = 1\n\n    total_games = total_group_games + knockout_games + third_place_game\n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    # Iterate through the possible number of sweets to find the common multiples of 4 and 6\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Flora's current age and her father's current age\n    flora_age, father_age = symbols('flora_age father_age')\n\n    # Flora is 5 years old now, so two years ago she was 5 - 2 = 3 years old.\n    # According to the problem, her father's age was 9 times Flora's age two years ago.\n    # So two years ago, her father's age was 3 * 9.\n    \n    # Create the equation that represents the relationship 2 years ago\n    equation1 = Eq((father_age - 2), 9 * (flora_age - 2))\n    \n    # Create the equation that represents Flora's current age\n    equation2 = Eq(flora_age, 5)\n\n    # Solve the system of equations for Flora's and her father's age\n    solutions = solve((equation1, equation2), (flora_age, father_age))\n\n    # Flora's father's current age\n    father_current_age = solutions[father_age]\n\n    return father_current_age\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert 7.2 minutes to hours\n    total_time_hours = 7.2 / 60\n    \n    # Speed of students and teacher\n    speed_students = 8  # in km/h\n    speed_teacher = 12  # in km/h\n    \n    # Relative speed of teacher when moving towards the head and when returning\n    relative_speed_towards = speed_teacher + speed_students  # in km/h\n    relative_speed_return = speed_teacher - speed_students   # in km/h\n    \n    # Let the distance be 'd' (the length of the line)\n    # Time taken to reach the head of the line\n    time_towards = lambda d: d / relative_speed_towards\n    \n    # Time taken to return to the end of the line\n    time_return = lambda d: d / relative_speed_return\n    \n    # Total time is the sum of the time towards and the time to return\n    total_time = lambda d: time_towards(d) + time_return(d)\n    \n    # We know the total time, so we can iterate over possible distances\n    # and find when the total time is equal to the known total time\n    # Since we're using a continuous variable (distance), we should use an equation solver\n    \n    # Define the equation total_time(d) - total_time_hours = 0\n    from sympy import symbols, Eq, solve\n    \n    d = symbols('d')  # Define the symbol for distance\n    equation = Eq(total_time(d), total_time_hours)\n    \n    # Solve the equation for distance\n    distance_solution = solve(equation, d)\n    \n    # Since distance cannot be negative, we take the positive solution\n    return distance_solution[0]\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):  # The range is from the first number 8 to one past the last 85\n        count += str(i).count('3')  # Count the number of times '3' appears in each number\n        if i == 83:\n            return count  # When reaching the number 83, the current count will be the position of '3' within that number\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = 2 * i\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1.25 * 100\n    return pounds_to_pence\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let the distance from Mike's home to the office be d km.\n    # Let the expected time to travel be t hours when travelling at 4 km/h.\n    # Speed = Distance / Time\n    # Therefore, time taken when travelling at 4 km/h is d/4\n    # and time taken when travelling at 6 km/h is d/6\n\n    # As he reaches 20 minutes late when travelling at 4 km/h,\n    # the expected time is (d/4) - 1/3, since 20 minutes is 1/3 of an hour\n\n    # As he reaches 10 minutes early when travelling at 6 km/h,\n    # the expected time is (d/6) + 1/6 ,since 10 minutes is 1/6 of an hour\n\n    # Now, 20 minutes late for 4 km/h speed is equivalent to 10 minutes early for 6 km/h speed,\n    # we have the equation :\n    # (d/4) - 1/3 = (d/6) + 1/6\n\n    # Solving the equation for d:\n    # Multiply everything by 12 to clear denominators: 3d - 4 = 2d + 2\n    # Simplify and solve for d: d = 4 + 2 = 6\n\n    # The distance is therefore 6 km.\n    d = 6\n    return d\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_price = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_price\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations('CYZZ'))\n    return len(arrangements)\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    slide_down = 0\n    remaining_distance = 18\n    days = 1\n\n    while remaining_distance > 0:\n        if days == 6:\n            climb = 3\n        else:\n            climb = daily_climb\n        remaining_distance -= climb\n        \n        if remaining_distance > 0:\n            slide_down = remaining_distance - (total_distance - daily_climb)\n            remaining_distance += slide_down\n        days += 1\n        \n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Reverse Ken's action\n    ken = (remaining + 1) * 2\n    # Add Nini's pieces to current total\n    total_after_nini = ken + remaining\n    # Reverse Nini's action\n    nini = (total_after_nini - 3) * 2\n    # Add Ivy's pieces to current total\n    total_after_ivy = nini + total_after_nini\n    # Reverse Ivy's action\n    ivy = (total_after_ivy + 2) * 2\n    # Add Eddie's pieces to current total\n    total_after_eddie = ivy + total_after_ivy\n    # Reverse Eddie's action\n    eddie = (total_after_eddie - 1) * 2\n    # Total candies at the beginning\n    total_candies = eddie + total_after_eddie\n    return total_candies\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    num_students_class_A = 12\n    num_students_class_B = 16\n    num_students_class_C = 20\n\n    # Calculate the GCD for the three classes\n    gcd_AB = gcd(num_students_class_A, num_students_class_B)\n    gcd_ABC = gcd(gcd_AB, num_students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Define conversion rates\n    meters_to_centimeters = 100\n    millimeters_to_centimeters = 0.1\n    feet_to_centimeters = 30.48\n\n    # Heights in different units converted to centimeters\n    height_in_meters = 5 * meters_to_centimeters\n    height_in_centimeters = 120\n    height_in_millimeters = 50 * millimeters_to_centimeters\n    height_in_feet = 8 * feet_to_centimeters\n\n    # Average height for pupils is typically in the range of 100 to 170 cm\n    plausible_range = (100, 170)\n\n    # Check which estimated height falls within the plausible range\n    ans = []\n    if plausible_range[0] <= height_in_meters <= plausible_range[1]:\n        ans.append('5m')\n    if plausible_range[0] <= height_in_centimeters <= plausible_range[1]:\n        ans.append('120cm')\n    if plausible_range[0] <= height_in_millimeters <= plausible_range[1]:\n        ans.append('50mm')\n    if plausible_range[0] <= height_in_feet <= plausible_range[1]:\n        ans.append('8ft')\n\n    # Since only one estimate can be correct, return the first one found\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # We have two equations based on the problem statement:\n    # g = 3b (There were 3 times as many girls as boys)\n    # 2g + 3b = 99 (Each girl took 2 paintbrushes and each boy took 3 paintbrushes)\n    \n    # We can substitute the first equation into the second one to find b\n    # 2(3b) + 3b = 99\n    # 6b + 3b = 99\n    # 9b = 99\n    # b = 99 / 9\n    b = 99 // 9\n    \n    # Now that we have the number of boys, we can find the number of girls\n    # g = 3b\n    g = 3 * b\n    \n    return g\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    avg_boys = 74\n    total_participants = 18 + 12\n    avg_all = 82\n\n    total_score_boys = total_boys * avg_boys\n    total_score_all = total_participants * avg_all\n\n    total_score_girls = total_score_all - total_score_boys\n    avg_girls = total_score_girls / 12\n\n    return avg_girls\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    term_number = 15\n\n    # nth_term = a + (n - 1) * d\n    nth_term = first_term + (term_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_rabbit_days = 12 * 15  # total number of rabbit-days the pile of food can feed\n    days_for_20_rabbits = total_rabbit_days / 20  # divide by the new number of rabbits to find the number of days\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_received = 22\n    dress_cost = 56\n    total_money = susan_money + money_received\n    additional_money_needed = dress_cost - total_money\n    return additional_money_needed\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    # Let's denote the number of trees planted by boys as b\n    # Hence, the number of trees planted by girls would be b + 12\n    # According to the problem, together they planted 100 trees.\n    # b + (b + 12) = 100\n    # 2b + 12 = 100\n    # 2b = 100 - 12\n    # 2b = 88\n    # b = 88 / 2\n    # b = 44\n    # So, the boys planted 44 trees.\n    \n    b = (100 - 12) // 2\n    return b\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    num_packets = 6\n    total_mass = mass_per_packet * num_packets\n    return total_mass\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n    \n    # Let x be the total number of fish in the pond\n    x = Symbol('x')\n    \n    # According to the capture-recapture method\n    # (number of marked captured) / (number of captures in second catch)\n    # should be approximately equal to\n    # (number of marked in first catch) / (total number of fish in the pond)\n    equation = Eq(25 / 200, 100 / x)\n    \n    # Solve for x\n    estimated_fish_number = solve(equation, x)[0]\n    \n    return estimated_fish_number\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = get_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(78 // 2 + 1):\n        for three_gram_weights in range(77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarter_value = 1/4\n    num_quarters = total_amount / quarter_value\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores = 90 * 5\n    scores_so_far = 96 + 85 + 89 + 92\n    fifth_score = total_scores - scores_so_far\n\n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 4 == 3) and (i % 5 == 4) and (i % 7 == 6):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    def sum_of_cubes(n):\n        # Use the formula: 1^3 + 2^3 + ... + n^3 = (1 + 2 + ... + n)^2\n        # Use the formula for the sum of first n natural numbers: 1 + 2 + ... + n = n*(n+1)/2\n        return ((n * (n + 1)) // 2) ** 2\n\n    # Calculate the sum of cubes from 1 to 20\n    sum_1_to_20 = sum_of_cubes(20)\n    # Calculate the sum of cubes from 1 to 9\n    sum_1_to_9 = sum_of_cubes(9)\n    \n    # The result is the sum from 10 to 20, which is the difference between the two sums\n    result = sum_1_to_20 - sum_1_to_9\n    \n    return result\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure there are at least 5 different colors with at least 10 pencils for each color, \n    # we must consider the worst-case scenario where we pick the maximum number of pencils \n    # from 4 colors (not reaching the 5 different colors target), and we need just one more \n    # pencil to have 5 different colors. In the worst case, we could draw all 75 pencils \n    # from 4 different colors (not getting to 10 pencils of a 5th color).\n\n    # Number of draws to get 10 pencils of 4 colors (worst case)\n    draws_for_4_colors = 4 * 10\n    \n    # Adding just one more pencil will ensure we have a 5th color\n    one_more_pencil_for_5th_color = 1\n    \n    # Total number of pencils needed to be drawn to ensure the condition is met\n    total_draws = draws_for_4_colors + one_more_pencil_for_5th_color\n\n    return total_draws\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n    return coaches_needed\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # According to the question\n    equation1 = Eq(b, g + 90)  # There are 90 more boys than girls\n    equation2 = Eq(g + b, 1690)  # The total number of pupils is 1690\n\n    # Solve for g and b\n    pupils = solve((equation1, equation2), (g, b))\n    girls = pupils[g]\n    boys = pupils[b]\n    \n    # Now, let's calculate the number of girls who can swim and cannot swim\n    girls_swim = 31 / (31 + 49) * girls\n    girls_cannot_swim = 49 / (31 + 49) * girls\n\n    # And calculate the number of boys who can swim and cannot swim\n    boys_swim = symbols('boys_swim')\n    equation3 = Eq(boys_swim, boys - boys_swim - 120)  # boys who can swim are 120 less than those who can't\n\n    boys_swim = solve(equation3, boys_swim)[0]\n    boys_cannot_swim = boys - boys_swim\n\n    # Finally, count the total number of pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip/bud, 4/7)\n    equation2 = Eq((pip)/(bud + 5), 8/15)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # Calculate the last digit of 5 raised to any power\n    last_digit_5 = 5  # 5 raised to any positive power ends with 5\n    \n    # Calculate the last digit of 7 raised to the 30th power\n    last_digit_7 = pow(7, 30, 10)  # pow(base, exp, mod) calculates (base ** exp) % mod efficiently\n    \n    # Calculate the last digit of the entire expression\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    cloth1 = 39\n    cloth2 = 52\n\n    ans = gcd(cloth1, cloth2)\n\n    return ans\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # length of the rectangular field\n    length = 204\n    # width of the rectangular field\n    width = 144\n    # total wheat plants\n    total_wheat = 116\n    # four corner wheats are already planted\n    total_wheat -= 4\n    # the total edge points (subtract two to exclude the corners)\n    # the total wheat plants should be divided evenly among the length and width (minus corners)\n    total_edge_points = ((length // 2) + (width // 2) - 2) * 2\n    # wheat plants on one side, dividing equally among the four sides\n    wheat_per_side = total_wheat // 4\n    # the distance between plants on one side\n    distance = length / (wheat_per_side + 1)\n    return distance\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    half_of_999 = 999 / 2\n    return half_of_999\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe shares his chocolate bar with his friend,\n    # which implies that they divide it into two equal parts.\n    total_squares = 16\n    # Assuming Joe and his friend get an equal number of squares\n    joe_squares = total_squares // 2\n    return joe_squares\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import primerange\n\n    # List all prime numbers under 45 because none of the numbers is more than 45.\n    primes = list(primerange(1, 46))\n\n    for a_prime in primes:\n        for b_prime in primes:\n            # Since B doesn't know A's number but knows their difference is 7 after\n            # subtracting 1 from B's number, it means A's number is definitely not 7.\n            if b_prime - 1 - a_prime == 7 and a_prime != 7:\n                for c_prime in primes:\n                    # Verify the conditions stated by the students and the teacher\n                    # A's statement: No pair of numbers can form a correct addition equation\n                    # C's and the teacher's statement: Multiplying C's number by 2 can form a correct addition equation\n                    if (\n                        a_prime != c_prime\n                        and b_prime != c_prime\n                        and a_prime + b_prime != c_prime\n                        and a_prime + c_prime != b_prime\n                        and b_prime + c_prime != a_prime\n                        and 2 * c_prime in (a_prime + b_prime, a_prime + c_prime, b_prime + c_prime)\n                    ):\n                        # Return the sum of the three primes if all conditions are satisfied\n                        return a_prime + b_prime + c_prime\n\n    return \"No solution found\"\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a represent the points per A grade\n    # Let b represent the points per B grade\n    a, b = symbols('a b')\n    \n    # We have the following equations based on Simon and Peter's grades and scores\n    equation1 = Eq(4 * a + 4 * b, 36)\n    equation2 = Eq(2 * a + 3 * b, 22)\n    \n    # Solve the equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculate the score for someone with three A grades and five B grades\n    score = 3 * solutions[a] + 5 * solutions[b]\n    \n    return score\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assign the values as per the criteria given in the question\n    A = 2  # A is the smallest prime number\n    B = 4  # B is the smallest composite number\n    C = 1  # C is neither prime number nor composite number or zero (1 fits this definition)\n    D = 0  # D is 2 less than the smallest prime number (2 - 2 = 0)\n    E = 9  # E is the largest composite number up to 10\n    F = 5  # F only has factors 1 and 5\n    G = 8  # G is the greatest factor of 8\n    H = 6  # H is the lowest multiple of 6\n    \n    # Concatenate the individual numbers to form the phone number ABCDEFGH\n    phone_number = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n    return int(phone_number)\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60  # there are 24 hours in a day, 60 minutes in an hour, and 60 seconds in a minute\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_per_day * fraction_of_day\n\n    return int(seconds)\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    equation1 = Eq(marry, 7/5 * alexis)\n    equation2 = Eq(marry - 0.2 * marry, charlotte + 0.8 * charlotte + 20)\n    equation3 = Eq(alexis - 0.2 * alexis, 0.8 * charlotte)\n\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte), dict=True)[0]\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands in range(1, 10):  # thousands (and units) digit must be from 1 to 9\n        for tens in range(10):      # tens digit can be from 0 to 9\n            for hundreds in range(10):  # hundreds digit can also be from 0 to 9\n            \n                # Construct Pip's number using the digits\n                pips_number = 1000 * thousands + 100 * hundreds + 10 * tens + thousands\n                \n                # Construct Bud's number by swapping the tens and units digits of Pip's number\n                buds_number = 1000 * thousands + 100 * tens + 10 * thousands + hundreds\n                \n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # The family can be considered as a single unit + the rest of the people.\n    # If there are p people in total (excluding the 3 family members),\n    # then there are (p + 1) places for the family unit to stand.\n    # Eddie and his mom and dad can stand in 3! (factorial) ways within the unit.\n    # We then multiply the number of places the unit can stand by the number of ways \n    # the family members can arrange themselves within that unit.\n\n    # Assuming there are no other people besides Eddie and his parents (p = 0):\n    p = 0 \n    family_unit_positions = p + 1  # Family unit can stand in (p + 1) places.\n    family_internal_arrangements = factorial(3)  # 3! ways the family can arrange themselves.\n\n    # Multiplying the possibilities:\n    total_ways = family_unit_positions * family_internal_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # The grass grows at a constant rate, so we can equate the two scenarios given:\n    # 25 cows * 10 days = 15 cows * 20 days\n    # From this, we can solve for the total amount of grass G as follows:\n    G = 25 * 10\n\n    # Now we need to find out how many cows can be fed for 50 days with G amount of grass\n    # cows * 50 days = G\n    cows = G / 50\n\n    return cows\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of available digits (three 2's and two 3's)\n    twos = 3          # Number of 2's\n    threes = 2        # Number of 3's\n    \n    # Calculate the number of permutations of the digits\n    permutations = factorial(total_digits) // (factorial(twos) * factorial(threes))\n    \n    # Calculate the number of valid 4-digit numbers (2 at the beginning is not allowed)\n    # by subtracting the number of permutations starting with 2 (one 2 and two 3's)\n    two_at_start = factorial(total_digits - 1) // (factorial(twos - 1) * factorial(threes))\n    \n    ans = permutations - two_at_start\n    \n    return ans\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    total_pages = 95\n    days = 0\n    pages_read = 0\n\n    while pages_read < total_pages:\n        days += 1\n        pages_read += days\n\n    return days\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n\n    correct_minuend = 166\n    correct_subtrahend = incorrect_minuend - incorrect_difference\n    correct_difference = correct_minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Because 20 is 1/3 of the second day\n    third_day = second_day * (5 / 3)  # Because third day sales are 5/3 of the second day\n    \n    total_watermelons = first_day + second_day + third_day\n    \n    return int(total_watermelons)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of oranges initially as 'o' and lemons as 'l'\n    o, l = symbols('o l')\n\n    # Set up our initial proportion equation, as per 3:5 ratio\n    equation1 = Eq(o/l, 3/5)\n    \n    # After selling 48 oranges, set up the proportion equation as per 1:2 ratio\n    # oranges after selling are o - 48, lemons remains l\n    equation2 = Eq((o - 48)/l, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (o, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax_rate = 0.10\n\n    discounted_price = original_price * (1 - discount)\n    member_discounted_price = discounted_price - member_discount\n    final_price = member_discounted_price * (1 + sales_tax_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Maths and English books are treated as single entities since they must be together.\n    total_books_groups = 3  # Maths, English, and Other books groups\n\n    # Permutations of the 3 groups themselves\n    groups_permutations = factorial(total_books_groups)\n\n    # Now multiply by permutations within each group\n    maths_permutations = factorial(3)\n    english_permutations = factorial(2)\n    \n    # The other books can be in any order, so multiply by their permutations as well\n    other_permutations = factorial(3)\n\n    # Multiply all permutations together to get the final answer.\n    total_permutations = groups_permutations * maths_permutations * english_permutations * other_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    # Given ratio\n    ratio = 20 / 32\n    # Find the missing number (x)\n    # The equation is x/8 = ratio\n    x = 8 * ratio\n    return x\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    flour_available = 250\n    num_cakes = flour_available // flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n    # Combined work rate per day when both are working\n    combined_rate = ivy_rate + kevin_rate\n    \n    # Total work done by the end of the 12th day\n    total_work_done = combined_rate * 12\n\n    # The number of days Kevin takes off can be calculated by equating the work done\n    # by Ivy alone in those days to the remaining work (1 - total_work_done)\n    # Therefore, ivy_rate * days_off = 1 - total_work_done\n    \n    days_off = (1 - total_work_done) / ivy_rate\n    \n    return days_off\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_students = (math_students + art_students) - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    total_statues = 9\n    statues_to_arrange = 4\n    \n    # Calculate the number of ways using permutations since the order matters\n    num_ways = factorial(total_statues) / factorial(total_statues - statues_to_arrange)\n    return int(num_ways)\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price_p = 10\n    new_price_p = 100\n\n    percentage_increase = ((new_price_p - original_price_p) / original_price_p) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 8 / 100\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # We use the Pigeonhole Principle: if each color of sock is a \"pigeonhole\"\n    # and each sock Cindy takes is a \"pigeon\", then after taking three socks,\n    # she must have at least one pair, because there are only two colors.\n    # This means she might take one black and one red, but the third one must\n    # be either black or red, ensuring one pair. Therefore, she must take 3 socks.\n    \n    return 3\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    value_after_years = initial_value * depreciation_factor\n\n    return value_after_years\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of bicycles and t be the number of tricycles\n    b, t = symbols('b t')\n\n    # Total tricycles and bicycles equation\n    total_vehicles_eq = Eq(b + t, 300)\n\n    # Each bicycle has 2 wheels and each tricycle has 3 wheels\n    wheels_eq = Eq(3*t - 2*b, 180)\n\n    # Use sympy.solve to solve the system of equations\n    solutions = solve((total_vehicles_eq, wheels_eq), (b, t))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    dividend = 27 * 4 + 9  # Quotient times the divisor plus the remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    # Apply the difference of two squares formula\n    ans = (2015 ** 2) - ((2015 + 1) * (2015 - 1))\n    return ans\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Given there are 14 grey rabbits\n    grey_rabbits = 14\n    # The pattern is 1 black, 2 white, 2 grey which makes a total of 5 rabbits per complete pattern\n    pattern_total = 5\n    # Since there are 2 grey rabbits in the complete pattern\n    grey_per_pattern = 2\n    \n    # Calculate complete patterns by dividing the grey rabbits by the number of grey per pattern\n    complete_patterns = grey_rabbits // grey_per_pattern\n    # Calculate remaining grey rabbits that don't complete a pattern\n    remaining_grey = grey_rabbits % grey_per_pattern\n    # Calculate total rabbits by multiplying complete patterns with the number of rabbits in a complete pattern\n    total_rabbits = complete_patterns * pattern_total\n    \n    # If there are any remaining grey rabbits, they form an incomplete pattern\n    if remaining_grey > 0:\n        # We can have 1 black and 2 white rabbits for each remaining grey according to the pattern\n        total_rabbits += 1 + 2 + remaining_grey\n\n    return total_rabbits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4 / 5) * 1\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped = 20\n    chocolate_with_foil = 15\n    not_chocolate_no_foil = 9\n\n    # Chocolate biscuits are the ones with foil and the remaining without foil.\n    chocolate_biscuits = chocolate_with_foil + (total_biscuits - foil_wrapped - not_chocolate_no_foil)\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    return rounded_number if rounded_number == 9764.0 else rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 * (1/4)\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the initial number of crystals Jason had\n    initial_crystals = symbols('initial_crystals')\n\n    # Create the equation for the operations described in the problem\n    final_crystals = (initial_crystals / 2 - 10) + 20 - 14\n\n    # Create the equation that represents the final number of crystals\n    equation = Eq(final_crystals, 35)\n\n    # Solve the equation\n    solution = solve(equation, initial_crystals)\n\n    # Return the number of crystals Jason initially had\n    return solution[0]\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original speed as v (in metres per minute), original time as t (in minutes)\n    # and the distance as d (in metres).\n    v, t, d = symbols('v t d')  \n\n    # Given that if speed increases by 25%, time decreases by 20 minutes\n    # New speed is 1.25v and new time is t - 20\n    # So, 1.25v * (t - 20) = d\n    eq1 = Eq(1.25 * v * (t - 20), d)\n\n    # If the speed decreases by 45m/min, time increases by 75%\n    # New speed is v - 45 and new time is 1.75t\n    # So, (v - 45) * 1.75t = d\n    eq2 = Eq((v - 45) * 1.75 * t, d)\n\n    # The original distance is v * t\n    # So, v * t = d\n    eq3 = Eq(v * t, d)\n\n    # We now have 3 equations with 3 unknowns\n    # We can solve these equations to find the value of d which is the distance\n    solutions = solve((eq1, eq2, eq3), (v, t, d))\n\n    # Return the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of trailing zeros in A is determined by the number of 10's we can factor out,\n    # which in turn is determined by the number of pairs of 5 and 2.\n    # Since 10 = 5 * 2, we need to count the number of 5's and 2's in the prime factorization of A.\n\n    # A is the product of fifteen 5's and ten 2's.\n    count_5s = 15\n    count_2s = 10\n\n    # The number of trailing zeros is equal to the minimum of count_5s and count_2s.\n    num_trailing_zeros = min(count_5s, count_2s)\n\n    return num_trailing_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n\n    people_between_Ali_and_Bala = 0  # Since Bala is directly behind Ali\n\n    # Total people including Ali and Bala\n    total_people = people_in_front_of_Ali + people_behind_of_Bala + people_between_Ali_and_Bala + 2\n\n    return total_people\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    perm = permutations(digits)\n    count = 0\n    for p in perm:\n        for i in range(1, len(p)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # To find the number of blue Fords, we first find the black Fords.\n    black_fords = fords - (total_cars - black_dodges - blue_cars)  # Since total_cars = black_cars + blue_cars\n    \n    # Then subtract black Fords from the total number of blue cars to get blue Fords.\n    blue_fords = blue_cars - (total_cars - fords - black_fords)\n    \n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    # Conversion from pounds to pence, as there are 100 pence in a pound.\n    budget_in_pence = 30 * 100\n\n    # Price of one plant in pence\n    price_per_plant = 85\n\n    # The maximum number of plants purchasable with the given budget\n    max_plants = budget_in_pence // price_per_plant\n\n    return max_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start with the number 4, which is the smallest composite number\n    # and check the next three consecutive numbers for being composite\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if all(not all(num % i for i in range(2, int(num**0.5) + 1)) for num in [A, B, C, D]):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13  # Total number of balls\n    number_of_colours = 3  # Number of different coloured balls\n\n    # By Pigeonhole principle, to ensure at least one ball of each colour,\n    # we take the maximum of any colour and add one for each of the other colours\n    min_picks = (total_balls - max(8, 10, 13)) + number_of_colours\n    \n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_earnings_per_day = 120\n    days_worked = 5\n\n    total_earnings = average_earnings_per_day * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # Every child gets at least one apple\n    apples_left = total_apples - children\n    # Divide the remaining apples among the children\n    max_apples_to_one_child = apples_left // (children - 1) + 1\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = 2\n    total_score = 125\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark - wrong_answers * wrong_mark == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    # 'n' is the number we are looking for\n    # Given that when n is divided by 11, the remainder is 5.\n    # We can express this as: n % 11 = 5\n    # Similarly, when n is divided by 7, the remainder is 1.\n    # This can be expressed as: n % 7 = 1\n    \n    # We can start searching from the remainder when divided by 11 (i.e., 5)\n    # and keep adding 11 (the divisor) until the other condition is also satisfied.\n    n = 5\n    while n % 7 != 1:\n        n += 11\n    return n\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    gcd12 = math.gcd(num1, num2)\n    ans = math.gcd(gcd12, num3)\n\n    return ans\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n    return sequence[2010]\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    final_position = 10\n    total_counts = 30\n\n    # Since there are 12 numbers on the clock, counting to 30 would complete 2 full cycles (24 counts)\n    # The remainder after these cycles determines the starting position\n    start_position = (final_position - (total_counts % 12)) % 12\n    # If start position is 0, it means it's actually at number 12\n    if start_position == 0:\n        start_position = 12\n\n    return start_position\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_number = 24\n    whole_number = (two_thirds_number * 3) / 2\n    three_quarters_number = (whole_number * 3) / 4\n    return three_quarters_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    m = 0\n    \n    # Calculate the sequence sum and check if it's a perfect square, continue until we find such m\n    while True:\n        sequence_sum = sum([i for i in range(23, 2 * k, 2)])\n        m = int(sequence_sum ** 0.5)\n        if m * m == sequence_sum:\n            break\n        k += 1\n\n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove in the first 2 hours.\n    first_distance = 2 * 40  # speed * time\n\n    # Calculate the remaining distance Linda drove.\n    remaining_distance = 280  # remaining distance\n\n    # Calculate the total distance Linda drove.\n    total_distance = first_distance + remaining_distance\n\n    # Calculate the time Linda took to drive the remaining distance.\n    remaining_time = remaining_distance / 70  # distance / speed\n\n    # Calculate the total time Linda took for the trip.\n    total_time = 2 + remaining_time\n\n    # Calculate Linda's average driving speed for the whole trip.\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    total_days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + (saved_daily * total_days_saved) - lent_to_brother - spent_on_snacks\n    \n    return current_amount\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors, men, women, children = symbols('total_visitors men women children')\n    men_to_total_ratio = Eq(men, 0.37 * total_visitors)\n    women_to_children_ratio = Eq(women, 4/9 * (total_visitors - men))\n    children_to_total = Eq(children, total_visitors - men - women)\n    men_children_difference = Eq(men - children, 12)\n\n    solutions = solve((men_to_total_ratio, women_to_children_ratio, children_to_total, men_children_difference), \n                      (total_visitors, men, women, children))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_day_per_cow = 1\n\n    total_grass = cows * days * grass_per_day_per_cow\n\n    return total_grass\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    probability_to_work_late = 0.7\n    probability_home_late = 0.4\n    \n    # either one or both trains are late\n    probability_at_least_one_late = probability_to_work_late + probability_home_late - (probability_to_work_late * probability_home_late)\n    \n    return probability_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one banana and one apple\n    banana_price, apple_price = symbols('banana_price apple_price')\n    \n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars\n    ellie_eq = Eq(2 * banana_price + 3 * apple_price, 3)\n    # Beth's equation: 3 bananas + 2 apples = 4 dollars\n    beth_eq = Eq(3 * banana_price + 2 * apple_price, 4)\n    \n    # Solve the system of equations for the price of one banana and one apple\n    prices = solve((ellie_eq, beth_eq), (banana_price, apple_price))\n    \n    # Calculate Annabella's cost: 10 bananas + 10 apples\n    annabella_cost = 10 * prices[banana_price] + 10 * prices[apple_price]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown quantity\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(89 - x, 12 * (45 - x))\n    \n    # Solve for x\n    solved_x = solve(equation1, x)\n\n    return solved_x[0]\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n    \n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 99 - 10 + 1\n    numbers_without_six = 8 * 8  # As both tens and units can be 1-5 or 7-9\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('1/04/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/05/2023', '%d/%m/%Y')\n    difference = end_date - start_date\n    return difference.days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    combined_speed = speed_a + speed_b\n\n    time_to_meet = distance / combined_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, orange, pear = symbols('mango orange pear')\n    \n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # The maximum number of intersection points occurs when no two lines are parallel\n    # and no three lines intersect at the same point.\n    # Each line can intersect with every other line at one point.\n    \n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    ans = 9744 // 7\n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 20 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    ab_cd_length = 14  # AB=CD=14 cm\n    pi = 22 / 7\n\n    # Calculate the circumference of a full circle with diameter 14 cm (quadranys are half circles with radius = 7 cm)\n    full_circle_circumference = pi * ab_cd_length\n    \n    # Since we have 2 identical quadrants (half of a full circle), their combined circumference is:\n    quadrants_perimeter = full_circle_circumference / 2\n\n    # Calculate the circumference of the full circle with diameter AB or CD\n    semicircles_perimeter = full_circle_circumference / 2  # There are two semicircles with diameter = 14 cm\n    \n    # Now, sum the perimeter of two quadrants and two semicircles\n    total_perimeter = quadrants_perimeter + semicircles_perimeter\n\n    return total_perimeter\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # The fraction of the watermelons left after selling 1/3 on the first day\n    fraction_left_day1 = 2 / 3\n    # The fraction of the watermelons left after selling 3/5 of the remaining on the second day\n    fraction_left_day2 = 2 / 5\n    \n    # Calculate the fraction of the original watermelons left after both days\n    total_fraction_left = fraction_left_day1 * fraction_left_day2\n    \n    # Since 48 watermelons are left, and this represents the total fraction left of the original\n    # We can find the original number of watermelons by dividing the watermelons left by the total fraction left\n    original_watermelons = 48 / total_fraction_left\n\n    return int(original_watermelons)\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    for i in range(10, 100):\n        number = int(f\"6{i:02d}\")\n        if number % 3 == 0 and number % 5 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    choose_cup_noodles = 6\n    ways = comb(total_cup_noodles, choose_cup_noodles)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pasta_price_per_packet = 95  # in pence\n    total_spent = 1170  # in pence (converted from £11.70)\n    rice_packets = 5\n    \n    # Let's denote the cost of a rice packet in pence as 'rice_cost'\n    rice_cost = symbols('rice_cost')\n  \n    # Equation: cost of pasta packets + cost of rice packets = total spent\n    equation = Eq(6 * pasta_price_per_packet + rice_packets * rice_cost, total_spent)\n\n    # Solve the equation for the cost of a rice packet\n    solution = solve(equation, rice_cost)\n    \n    return solution[rice_cost]\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    combined_rate = 1 / 12\n    energetic_rate = 1 / 20\n\n    lazy_rate = combined_rate - energetic_rate\n    lazy_days = 1 / lazy_rate\n\n    return int(lazy_days)\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Starting with the fraction 13/10\n    fraction = 13 / 10\n    # Subtracting 1 to get the fractional part\n    fractional_part = fraction - 1 # This is 3/10\n    # Taking the reciprocal to move to the next level\n    next_fraction = 1 / fractional_part # This is 10/3\n    \n    # Now we want to represent 10/3 as a + 1/(b + 1/c)\n    # Since \"a\" should be a whole number, we take the integer part of 10/3\n    a = int(next_fraction) # This is 3\n    # Now compute the fractional part that is left, which is 1/3\n    fractional_part = next_fraction - a # This is 1/3\n    # Taking the reciprocal to move to the next level\n    next_fraction = 1 / fractional_part # This is 3\n    \n    # Now we want to represent 3 as b + 1/c\n    # Since \"b\" should be a whole number, we take the integer part, which is simply 3\n    b = int(next_fraction) # This is 3\n    # There is no fractional part left, so the whole number 3 can be written as 3 + 1/c\n    # where c can be any whole number, but it is obvious that for this equation, c = 1 is the simplest solution.\n    c = 1\n\n    # Finally, calculate a + 2b + 3c\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # The average of consecutive numbers is the middle number\n    average = 1650 / 15\n    \n    # Since there are 15 numbers, the largest number is 7 more than the average\n    largest_number = average + 7\n    \n    # and the smallest number is 7 less than the average\n    smallest_number = average - 7\n    \n    # The sum of the largest and smallest number\n    sum_largest_smallest = largest_number + smallest_number\n    \n    return int(sum_largest_smallest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while True:\n        if pies % 4 == 0 and pies % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_per_line = 3\n    girls_per_line = 2\n    total_boys = 42\n\n    # Calculate the ratio of boys to girls\n    ratio = boys_per_line / girls_per_line\n    # Calculate the total number of girls using the ratio\n    total_girls = total_boys / ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # 'a' when divided by 8 gives remainder 6\n    # any such 'a' can be expressed as 8k + 6, where k is any integer\n    # 'b' when divided by 8 gives remainder 7\n    # any such 'b' can be expressed as 8m + 7, where m is any integer\n    \n    # When you add 'a' and 'b', (8k + 6) + (8m + 7) = 8(k+m) + 13\n    # When this sum is divided by 8, the remainder is the same as 13 divided by 8\n    # We calculate this remainder\n    \n    remainder_of_sum = (13 % 8)\n    return remainder_of_sum\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n    \n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / num_blouses\n    \n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    # Count oddtastic numbers in range 1 to 999\n    count = 0\n\n    # Check all numbers from 1 to 999\n    for number in range(1, 1000):\n        # Convert number to string to check each digit\n        number_str = str(number)\n        # Assume the number is oddtastic\n        is_oddtastic = True\n        # Check each digit to see if it's odd\n        for digit in number_str:\n            if int(digit) % 2 == 0:  # Even digit found\n                is_oddtastic = False\n                break  # No need to check other digits\n        # If the number is oddtastic, increment count\n        if is_oddtastic:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Define the number of keys and rooms\n    keys = 11\n    # Calculate the worst case scenario using the Pigeonhole Principle\n    # The worst case would be trying all keys on the first door,\n    # then all remaining keys on the second door, and so on.\n    # This results in a summation of the form 11 + 10 + 9 + ... + 1\n    attempts = sum(range(1, keys + 1))\n    return attempts\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # List of tuples (remainder, modulo)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_length = 1\n    number = 9\n    total_digits = 0\n    \n    while True:\n        count = digit_length * 9 * number\n        if total_digits + count >= 2019:\n            break\n        total_digits += count\n        digit_length += 1\n        number *= 10\n\n    remaining_digits = 2019 - total_digits\n    full_numbers = remaining_digits // digit_length\n    extra_digit = remaining_digits % digit_length\n\n    current_number = (10 ** (digit_length - 1)) - 1 + full_numbers\n    if extra_digit == 0:\n        ans = int(str(current_number)[-1])\n    else:\n        ans = int(str(current_number + 1)[extra_digit - 1])\n\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))\n    \n    return len(unique_numbers)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    people_count = 6\n\n    cost_per_person = total_cost / people_count\n\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 0.20\n    new_price = original_price * (1 + increase_percentage)\n    \n    return new_price\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6 + 1/2  # converting the mass of cat, kittens and basket to kg\n    basket_mass_kg = 500 / 1000  # converting grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    num_kittens = 4  # number of kittens\n\n    # Calculate the mass of the kittens combined\n    kittens_mass_total = kitten_mass_kg * num_kittens\n    \n    # Subtract the mass of the basket and the kittens from the total mass to get the mass of the cat\n    cat_mass = total_mass_kg - basket_mass_kg - kittens_mass_total\n    \n    return cat_mass\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    # Number of siblings including Mary\n    total_siblings = 3 + 4 + 1  # Mary's 3 brothers, 4 sisters, and Mary herself\n\n    # Each sibling buys an egg for every other sibling\n    eggs_bought_by_each = total_siblings - 1\n\n    # Total eggs bought is each sibling buying for all others\n    total_eggs_bought = total_siblings * eggs_bought_by_each\n\n    return total_eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    departure_time = \"7:50\"\n    arrival_time = \"8:40\"\n\n    departure = datetime.strptime(departure_time, time_format)\n    arrival = datetime.strptime(arrival_time, time_format)\n\n    journey_duration = arrival - departure\n\n    return journey_duration.seconds // 60\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The pattern is as follows (adding 1 more than the previous increment)\n    # 3 + 3 = 6 (increment of 3)\n    # 6 + 4 = 10 (increment of 4)\n    # 10 + 5 = 15 (increment of 5)\n    # Next increment should be 6\n\n    missing_number = 15 + 6\n    return missing_number\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    initial_money = remaining_after_bag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one apple and one banana\n    apple, banana = symbols('apple banana')\n    \n    # Formulate equations based on the given information\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Get the solution for the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_out = 5\n    remaining_oil = total_oil - oil_poured_out\n    tanks = 6\n    oil_per_tank = remaining_oil / tanks\n\n    return oil_per_tank\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    # Equation derived from problem statement\n    # money/6 + 5 + 2/5*(money - (money/6 + 5)) + 12 = money - 24\n    equation = Eq(money / 6 + 5 + (2 / 5) * (money - (money / 6 + 5)) + 12, money - 24)\n\n    solutions = solve(equation, money)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the number of years it will take for the grandpa's age to be 5 times Johnny's age.\n    x = symbols('x')\n\n    # Grandpa's current age is 72, in x years it will be 72 + x.\n    # Johnny's current age is 8, in x years it will be 8 + x.\n    # We want to find x such that grandpa's age (72 + x) is 5 times Johnny's age (5 * (8 + x)).\n    equation = Eq(72 + x, 5 * (8 + x))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8  # Pip is 8th from the front\n    bud_position = 10  # Bud is 10th from the end\n    children_between = 4\n\n    # Since Pip is in front of Bud and there are 4 children between them,\n    # we can say there are 4 children plus 1 (for Bud) between Pip and the end of the queue.\n    total_children = pip_position + children_between + bud_position\n    \n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for Alan and Bob's number of cards\n    alan, bob = symbols('alan bob')\n\n    # Equation representing that Bob has 15 more cards than Alan initially\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation representing that after Colin gives Bob 25 cards, Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    initial_amount = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    interest_rate = round(((final_amount / initial_amount) ** (1 / years) - 1) * 100, 1)\n    return interest_rate\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # We are given that m~Δ~n = 5m + 3n and we want to find x such that x~Δ~9 = 37\n    \n    # Let's consider x~Δ~9 in the form of the given operation\n    # According to the operation definition, this should be equal to 5x + 3*9\n    # Therefore, we have the equation 5x + 3*9 = 37\n    \n    # To find x, we solve the equation\n    # 5x + 27 = 37 -> subtract 27 from both sides\n    x = (37 - 27) / 5\n    \n    return x  # return the value of x\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of arithmetic sequence S = n/2 * (a_1 + a_n)\n    # Sum of odd numbers from 1 to 50 (25 odd numbers)\n    # a_1 = 1, a_n = 49\n    sum_odds = 25 / 2 * (1 + 49)\n\n    # Sum of even numbers from 2 to 50 (25 even numbers)\n    # a_1 = 2, a_n = 50\n    sum_evens = 25 / 2 * (2 + 50)\n\n    # Calculate the difference\n    difference = sum_evens - sum_odds\n\n    return int(difference)\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario: Sheila takes out all balls except three without having four of the same color.\n    # To ensure she gets 4 balls of the same color, she must take out one more than the sum of the maximum possible numbers of balls of the other colors.\n    max_other_colors = 4 + 2  # Maximum number of orange and yellow balls\n    to_ensure_four_same = max_other_colors + 1  # She needs to take out one more to be sure\n\n    return to_ensure_four_same\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If she gave 20 oranges to each, 10 elderly will not receive any oranges\n    # If she gave 16 oranges to each, she would have enough for 25 boxes of 2 dozen oranges each\n    # 1 box = 2 dozen oranges = 24 oranges\n    # 25 boxes = 25 * 24 oranges\n    total_oranges_with_16 = 25 * 24\n    # We know that the total number of oranges is a number such that:\n    # total_oranges - 10 * 20 (10 elderly not receiving) = total_oranges_with_16\n    total_oranges = total_oranges_with_16 + 10 * 20\n\n    # To find the number of oranges Janice should give to each elderly,\n    # We need to find a divisor of the total_oranges that is as close to but less than 20\n    # We start from 19 and go downward until we find a number that exactly divides total_oranges\n    for oranges_each in range(19, 0, -1):\n        if total_oranges % oranges_each == 0:\n            ans = oranges_each\n            break\n\n    return ans\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - duration\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    # The wheel barrow weighs 31kg when full of soil.\n    full_weight = 31\n    # Jill removes 1/5 of the soil and now it weighs 27kg.\n    removed_soil_fraction = 1/5\n    current_weight = 27\n    # Calculate the weight of the removed soil.\n    removed_soil_weight = full_weight - current_weight\n    # The weight of the removed soil is 1/5 of the total soil weight before it was removed.\n    # Therefore, the weight of the full soil is 5 times the weight of the removed soil.\n    total_soil_weight = removed_soil_weight / removed_soil_fraction\n    # The weight of the empty wheel barrow is the current weight minus the weight of the soil that was removed.\n    empty_wheel_barrow_weight = full_weight - total_soil_weight\n    \n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, solve\n\n    tim, tyler = symbols('tim tyler')\n\n    equation1 = (1/6) * tim - (3/8) * tyler\n    equation2 = tim - 9 * (tyler - 96)\n\n    solutions = solve((equation1, equation2))\n    tim_cookies = solutions[tim]\n    tyler_cookies = solutions[tyler]\n\n    return tim_cookies, tyler_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the different types of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + vanilla * 2 / 3 + blueberry * 7 / 9, 427)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    gallons_poured = 24\n\n    full_tank = gallons_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    platform_1_interval = 24\n    platform_2_interval = 30\n    least_common_multiple = lcm(platform_1_interval, platform_2_interval)\n\n    # Since train leaves at 9 a.m, we add the lcm to 9 a.m to get the next time\n    hours_passed = least_common_multiple // 60\n    minutes_passed = least_common_multiple % 60\n\n    next_train_hour = 9 + hours_passed\n    next_train_minute = minutes_passed\n\n    # Adjust for any overflow in the minutes turning into extra hours\n    if next_train_minute >= 60:\n        next_train_hour += next_train_minute // 60\n        next_train_minute = next_train_minute % 60\n\n    # Adjust hour to be in 24-hour time format if it goes beyond 24 hours\n    next_train_hour = next_train_hour % 24\n\n    return f\"{next_train_hour:02d}:{next_train_minute:02d}\"\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the children\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n\n    # Equations based on the information given\n    total_age_eq = Eq(Anu + Benu + Chris + Dave, 20)\n    dave_chris_age_diff_eq = Eq(Dave, Chris + 5)\n    dave_benu_age_diff_eq = Eq(Dave, Benu + 3)\n    anu_chris_age_diff_eq = Eq(Anu, Chris - 3)\n\n    # Solve the system of equations\n    solutions = solve((total_age_eq, dave_chris_age_diff_eq, dave_benu_age_diff_eq, anu_chris_age_diff_eq),\n                      (Anu, Benu, Chris, Dave))\n\n    return solutions[Anu]\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n    \n    return solutions[mark]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_red, initial_white = symbols('initial_red initial_white', integer=True)\n    pip_red = symbols('pip_red', integer=True)\n    bud_white = symbols('bud_white', integer=True)\n    \n    # Initial ratio of red to white marbles\n    equation1 = Eq(initial_red / initial_white, 3/2)\n    \n    # After Pip adds red balls, ratio of red to white balls becomes 5:3\n    equation2 = Eq((initial_red + pip_red) / initial_white, 5/3)\n    \n    # After Bud adds white balls, ratio of red to white balls becomes 5:4\n    equation3 = Eq((initial_red + pip_red) / (initial_white + bud_white), 5/4)\n    \n    # Given that the number of balls put by Bud is 100 more than the number of balls put by Pip\n    equation4 = Eq(bud_white - pip_red, 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4),\n                      (initial_red, initial_white, pip_red, bud_white))\n    \n    # Extract the solution for the initial number of white balls\n    initial_white_balls = solutions[initial_white]\n    \n    return initial_white_balls\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # As 'a' leaves a remainder of 6 when divided by 8, 'a' can be represented as '8k + 6' where 'k' is an integer.\n    # Similarly, 'b' can be represented as '8m + 7' where 'm' is another integer.\n    # We need to find the remainder when 'a + b' is divided by 8.\n\n    a_remainder = 6\n    b_remainder = 7\n\n    # When we add 'a' and 'b', the remainders also get added up.\n    sum_remainder = (a_remainder + b_remainder) % 8  # We use modulus operation to find the new remainder\n\n    return sum_remainder\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Desks behind Judy\n    desks_behind_judy = 7\n    \n    # Jessica sits in front of Judy, so the number of desks between them is 1\n    desks_between_jessica_and_judy = 1\n    \n    # Total number of desks is the sum of the number of desks in front of Jessica,\n    # the desks between Jessica and Judy, and the desks behind Judy, plus the desks\n    # where Jessica and Judy are sitting.\n    total_desks = (desks_in_front_of_jessica +\n                   desks_between_jessica_and_judy +\n                   desks_behind_judy +\n                   2)  # +2 for Jessica's and Judy's own desks\n    \n    return total_desks\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the total weight of the original group, and n be the number of people in the original group.\n    # We can set up an equation where (x + 45) / (n + 1) = 61 and (x + 45 + 71) / (n + 2) = 62.\n    # From the first equation, we have x = 61n + 61 - 45.\n    # The second equation gives us x = 62n + 124 - 45 - 71.\n\n    # Now, from the first equation: x = 61n + 16\n    # And from the second equation, we can rewrite x as: x = 62n + 8\n    \n    # Since both right-hand sides equal x, they also equal to each other:\n    # 61n + 16 = 62n + 8 => n = 8\n    \n    # Now, we can find x by substituting n back into any of the equations for x:\n    # x = 61n + 16 => x = 61 * 8 + 16\n\n    x = 61 * 8 + 16\n    n = 8\n\n    # The average weight before Aaron joined = x / n\n    average_weight_before = x / n\n    \n    return average_weight_before\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_balls_taken = 2989\n\n    while total_balls_taken > 0:\n        # Ming takes two balls from the bag\n        total_balls_taken -= 2\n\n        # If legs == 4, it's two white balls or two black balls\n        if white_balls % 2 == 0 or black_balls % 2 == 0:\n            # Replace one black ball\n            black_balls += 1\n        else:\n            # One of each color, replace one white ball\n            white_balls += 1\n\n        # Remove two balls actually taken out\n        white_balls -= 1\n        black_balls -= 1\n\n    if white_balls > black_balls:\n        ans = (white_balls, 'white')\n    else:\n        ans = (black_balls, 'black')\n\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_initial = 6\n    hours_initial = 15\n\n    hours_required = 2\n\n    work_rate_initial = people_initial / hours_initial\n    people_required = work_rate_initial * hours_required\n\n    return int(people_required)\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        if a == 0 or c == 0:\n            continue\n        num1 = a * 1000 + b * 100 + b * 10 + b\n        num2 = c * 10 + d\n        product = num1 * num2\n        str_product = str(product)\n        if len(str_product) == 5 and str_product[-1] == str(e) and str_product[-3] == str(d):\n            return product\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    cm_per_meter = 100\n    n = meters * cm_per_meter\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    birthday_money = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = birthday_money - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # Iterate through each possible number of piles (2 to 4 as 5 can't be divided into 5 different piles of natural numbers)\n    for piles in range(2, 5):\n        for x1 in range(1, 5):\n            for x2 in range(1, 5):\n                if piles == 2 and x1 + x2 == 5:\n                    count += 1\n                for x3 in range(1, 5):\n                    if piles == 3 and x1 + x2 + x3 == 5:\n                        count += 1\n                    for x4 in range(1, 5):\n                        if piles == 4 and x1 + x2 + x3 + x4 == 5:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for units in range(0, 10):        # Units digit can be 0 to 9\n        hundreds = units - 2          # Hundreds digit is 2 less than the units\n        if hundreds >= 1:             # Hundreds digit must be at least 1 (to make it a 3-digit number)\n            for tens in range(0, 10): # Tens digit can be 0 to 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 80/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To ensure Samantha has more votes than anyone else, \n    # she needs at least one more vote than half of the total votes.\n    total_votes = 25\n    least_votes_for_majority = total_votes // 2 + 1\n\n    return least_votes_for_majority\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of Mr Han and his daughter\n    mr_han, daughter = symbols('mr_han daughter')\n\n    # Create equations based on the problem statement\n    total_mass_eq = Eq(mr_han + daughter, 91.2)\n    mass_ratio_eq = Eq(mr_han, 3 * daughter)\n\n    # Solve the system of equations\n    solutions = solve((total_mass_eq, mass_ratio_eq), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_types = [1, 2, 5]\n    count = set()\n\n    for a in coin_types:\n        for b in coin_types:\n            for c in coin_types:\n                count.add(a + b + c)\n                \n    ans = len(count)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = sum(str(i).count('1') for i in range(1, 131))\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Initial investment\n    P = 6000\n\n    # Final value of the investment\n    A = 8029.35\n\n    # Number of years\n    n = 5\n\n    # Equation A = P * (1 + r/n)**(n*t)\n    # r is the annual interest rate (in decimal)\n    # In this problem, we compound annually (n=1) so the equation simplifies to A = P * (1 + r)**t\n    # We have to find r (as a percent, therefore we use x/100 where x is the interest rate in percent)\n    equation = Eq(P * (1 + x/100)**n, A)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    def pages_with_n_digits(n):\n        return 9 * (10 ** (n - 1)) * n\n\n    remaining_digits = 291\n    pages = 0\n    digits = 1\n    \n    while remaining_digits >= pages_with_n_digits(digits):\n        remaining_digits -= pages_with_n_digits(digits)\n        pages += 9 * (10 ** (digits - 1))\n        digits += 1\n\n    pages += remaining_digits // digits\n\n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    ans = 2.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, unread = symbols('read unread')\n\n    # Initial ratio condition\n    # read : unread = 1 : 5\n    equation1 = Eq(read * 5, unread)\n\n    # The new condition after reading 80 more pages\n    # read + 80 = 0.7 * (read + unread + 80)\n    equation2 = Eq(read + 80, 0.7 * (read + unread + 80))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (read, unread))\n\n    read_pages = solutions[read]\n    unread_pages = solutions[unread]\n\n    # Total number of pages in the magazine\n    total_pages = read_pages + unread_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Hypothetical scenario where all answers by CC are correct\n    points_for_correct = 10\n    total_points = 95\n    vivi_extra_points = 15\n\n    # If all CC's answers were correct, CC would have scored 10 * 10 = 100 points\n    cc_hypothetical_points = points_for_correct * 10\n\n    # But we know the total points are 95 and Vivi got 15 more points than CC\n    # Therefore, the difference between the hypothetical points of CC and actual total points\n    # plus the extra points Vivi got, gives us the total negative points from incorrect answers or skipped questions\n    total_negative_points = (cc_hypothetical_points + vivi_extra_points) - total_points\n\n    # Each incorrect answer or skipped question results in a loss of 5 points\n    points_for_incorrect = 5\n\n    # Total number of incorrect answers or skipped questions\n    total_incorrect_or_skipped = total_negative_points // points_for_incorrect\n\n    # CC's correct answers\n    cc_correct_answers = 10 - total_incorrect_or_skipped\n\n    return cc_correct_answers\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # 2 books + 3 magazines = $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book + 1 magazine = $10\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = 2\n\n    rooms_for_girls = girls // girls_per_room\n    rooms_for_teachers = teachers // teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    flour_final = flour_initial * people_final / people_initial\n\n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n\n    # Iterate through all possible first and second cut positions\n    for i in range(1, len(number)):\n        for j in range(i+1, len(number)):\n            part1 = int(number[:i])\n            part2 = int(number[i:j])\n            part3 = int(number[j:])\n\n            total_sum = part1 + part2 + part3\n\n            if total_sum < min_sum:\n                min_sum = total_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two original numbers\n    x, y = symbols('x y')\n\n    # Equation for the sum of two numbers\n    original_sum_eq = Eq(x + y, 11.63)\n\n    # Equation after shifting decimal point\n    shifted_decimal_eq = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((original_sum_eq, shifted_decimal_eq), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(difference * 100)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    # ratio of members in the science club to the literature club\n    sci_lit_ratio = 9 / 10\n    # ratio of members in the literature club to the math club\n    lit_math_ratio = 5 / 7\n    \n    # let x be the common factor\n    # then total members = 9x (science) + 10x (literature) + 5x/7 * 7 (math)\n    # 99 = 9x + 10x + 7x\n    # combine terms to solve for x\n    x = total_members / (9 + 10 + 7)\n\n    # Calculate number of members in each club\n    lit_members = 10 * x\n    math_members = (lit_members / 5) * 7\n\n    # Calculate the difference between math club and literature club members\n    difference = math_members - lit_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = (quotient * smallest_divisor) + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # To be sure to get 3 marbles of the same color, in the worst case,\n    # Benny must take out all marbles of the other two colors first\n    # 4 blue marbles + 3 yellow marbles = 7\n    # But if he has taken 7 marbles, he could have 3 of each color and 1 red.\n    # So he needs to take out one more to be sure of 3 of the same color.\n    max_other_colors = 4 + 3\n    \n    # adding one to ensure 3 of same color\n    marbles_to_take = max_other_colors + 1 \n    return marbles_to_take\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n    melissa_age_past = 8\n    mother_age_past = 32\n\n    # Creating the equations based on the problem statement\n    equation1 = Eq(mother_age_past + (melissa_age_now - melissa_age_past), 3 * melissa_age_now)\n    equation2 = Eq(mother_age_past, melissa_age_past * 4)\n\n    # Solving the equation\n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # The number of flowers on each side without considering the corners\n    flowers_per_side = 6 - 2 # subtracting the corner flowers\n\n    # Total flowers on the 4 sides without corners\n    total_flowers_sides = flowers_per_side * 4\n\n    # 4 corner flowers\n    corner_flowers = 4\n\n    # Sum of side flowers and corner flowers\n    total_flowers = total_flowers_sides + corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    longest_piece = max(piece1, piece2, piece3)\n    shortest_piece = min(piece1, piece2, piece3)\n\n    difference = longest_piece - shortest_piece\n\n    return round(difference, 2)\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    \n    # Calculate the cost of the book (1 unit)\n    one_unit = total_cost / 5  # Total cost is 5 parts (3 parts bag and 2 parts book)\n    \n    # Calculate the total amount she had initially (6 units, since she spent 1/3 on the book and then 1/2 of the remainder on the bag)\n    total_money = one_unit * 6\n    \n    return total_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equation for the total cost of basketballs and volleyballs\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    # Equation for the price difference between basketball and volleyball\n    equation2 = Eq(basketball - volleyball, 10)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = \"1234\"\n    length_of_pattern = len(pattern)\n    total_length = 47\n\n    full_patterns = total_length // length_of_pattern\n    remaining_digits = total_length % length_of_pattern\n\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    sum_of_remaining = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_of_pattern * full_patterns + sum_of_remaining\n\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_of_6_bottles = 2.52\n    cost_per_bottle = cost_of_6_bottles / 6\n    cost_of_9_bottles = cost_per_bottle * 9\n    return cost_of_9_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of boys and g be the number of girls\n    b = symbols('b')\n    g = 40 - b  # Since there are 40 pupils in total\n\n    # Average pencils of boys and girls combined times number of pupils = \n    # Sum of (average pencils of boys times number of boys) and \n    # (average pencils of girls times number of girls)\n    equation = Eq((20 * b + 60 * g), 35 * 40)\n\n    # Solve the equation for b\n    num_boys = solve(equation, b)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for jack_correct in range(1, 26):\n        jack_wrong = 25 - jack_correct\n        johnson_correct = jack_correct - 1\n        johnson_wrong = 25 - johnson_correct\n        if 4 * jack_correct - jack_wrong == 61 and 4 * johnson_correct - johnson_wrong == 61:\n            jack_unanswered = 25 - jack_correct - jack_wrong\n            return jack_unanswered\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # Since 'a' represents the tens digit, it must range from 1 to 9.\n        for b in range(10):  # 'b' represents the units digit, so it ranges from 0 to 9.\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    # 3 pigs + 1 goat = 440\n    equation1 = Eq(3 * pig + goat, 440)\n    # 1 pig + 2 goats = 280\n    equation2 = Eq(pig + 2 * goat, 280)\n\n    prices = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * prices[pig] + 5 * prices[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n    total_pounds = pounds + pence / 100\n    return total_pounds\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 / (1/3)\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Fixed constants\n    price_per_cupcake = 4.5\n    discount = 0.20\n    shipping_and_handling = 12\n    bill = 120\n    \n    # Calculate the number of cupcakes for orders of 20 or fewer\n    if bill <= (20 * price_per_cupcake + shipping_and_handling):\n        num_cupcakes = (bill - shipping_and_handling) // price_per_cupcake\n    else:\n        # Calculate the cost for the first 20 cupcakes\n        cost_for_first_20 = 20 * price_per_cupcake + shipping_and_handling\n        \n        # Calculate the cost for each additional cupcake after discount\n        price_after_discount = price_per_cupcake * (1 - discount)\n        \n        # Calculate number of additional cupcakes\n        additional_cupcakes = (bill - cost_for_first_20) // price_after_discount\n        \n        # Total cupcakes is the sum of the first 20 and additional cupcakes\n        num_cupcakes = 20 + additional_cupcakes\n\n    return int(num_cupcakes)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) == int(str(num) + \"1\") // 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable A as a symbolic algebraic symbol\n    A = symbols('A')\n\n    # Build the equation as per the question\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    # Solve the equation for the variable A\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((x + 45)/3, 2 * x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_position_from_back = 12\n\n    total_people = people_in_front_of_rose + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let x be the number of days the lazy decorator would take to paint the house on his own\n    # The energetic decorator paints the house in 10 days, so his work rate is 1/10 per day\n    energetic_work_rate = 1/10\n\n    # Both decorators together paint the house in 6 days, so their combined work rate is 1/6 per day\n    combined_work_rate = 1/6\n\n    # The lazy decorator's work rate is the combined rate minus the energetic decorator's rate\n    lazy_work_rate = combined_work_rate - energetic_work_rate\n\n    # The lazy decorator's time to paint the house is the reciprocal of his work rate\n    lazy_time = 1 / lazy_work_rate\n\n    return lazy_time\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_difference = 42\n\n    john_age_in_2_years = john_age_now + 2\n    grandmother_age_in_2_years = john_age_now + grandmother_age_difference + 2\n\n    total_age_in_2_years = john_age_in_2_years + grandmother_age_in_2_years\n\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    return (52 - 10) / 2\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):  # At least 2 books for first brother\n        for x2 in range(2, 10):  # At least 2 books for second brother\n            x3 = 10 - x1 - x2\n            if x3 >= 2:  # At least 2 books for third brother\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_read_first_day / fraction_of_book\n    return total_pages\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Initialize the number with 5's and 9's except the middle digit\n    num_str = '5' * 19 + '0' + '9' * 19\n    \n    # Convert the string to an integer\n    num = int(num_str)\n\n    # Loop through possible digits (0-9) for the middle square digit\n    for digit in range(10):\n        # Replace the middle square digit with the current digit\n        test_num = num + digit * 10**19\n        \n        # Check if the new number is divisible by 7\n        if test_num % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure 4 marbles of different colours, consider the worst case scenario:\n    # Picking the most abundant colour first\n    red_marbles = 12\n    blue_marbles = 9\n    yellow_marbles = 8\n    green_marbles = 3\n\n    # Worst case: pick all red marbles first\n    marbles_picked = red_marbles\n\n    # Next worst case: pick all blue marbles next\n    marbles_picked += blue_marbles\n\n    # Then pick all yellow marbles\n    marbles_picked += yellow_marbles\n\n    # At this point, we have 3 colours, to ensure the fourth colour, we need to pick\n    # one more marble which is the green marble\n    marbles_picked += 1\n\n    return marbles_picked\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # Start with a two-digit number having 1 as its tens digit and 6 as its units digit: 16.\n    # The largest two-digit number with 6 as the units digit is 96.\n    # Count the numbers between 16 and 96 (inclusive) that have 6 as the unit digit.\n    start_num = 16\n    end_num = 96\n    step = 10  # Step from one number to the next, e.g., 16, 26, 36, ...\n\n    ans = (end_num - start_num) // step + 1\n    return ans\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since children are standing from the shortest to the tallest and have distinct heights,\n    # the 31st (last) child will have the maximum height which is 131 cm.\n\n    # For Tom to have the maximum height, the 9 children before him would have the \n    # minimum possible heights, which are from 1 to 9 consecutively because all heights are whole numbers.\n\n    # The maximum height for Tom would then be the height of the 9th child plus one.\n    # Hence, the maximum height for Tom is 9 + 1\n    max_height_tom = 9 + 1\n    \n    return max_height_tom\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    difference = 14.4\n\n    last_purchase = current_purchase - difference\n    total_spent = current_purchase + last_purchase\n\n    return total_spent\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, a + b\n        b %= 3 # because we only care about the reminder when divided by 3\n    return b\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    return 0.7 / 100\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let Anthea have 'a' books initially\n    # Equation: Jason's books - 4 = Anthea's books + 4\n    # Since Jason has 30 books, we have the equation:\n    # 30 - 4 = a + 4\n    # Solving the equation for 'a':\n    anthea_books = (30 - 4) - 4\n    # Now, the difference between Jason and Anthea at first is:\n    # Jason's books - Anthea's books\n    difference = 30 - anthea_books\n\n    return difference\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n\n    equation = Eq(first_number, 9 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    ans = 1\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        ans *= (count + 1)\n        i += 1\n    if n > 1:\n        ans *= 2\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Assume the number of students is n\n    for n in range(1, 1000):  # Assume a reasonable upper limit for the number of students\n        if (n * 5 + 3) % 4 == 0:  # Check if when giving 5 each, and 3 are left, dividing per student by 4 there is no remainder\n            # Now check if this number of students, when given 4 each, has 9 left.\n            if n * 4 + 9 == n * 5 + 3:\n                return n\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan - chloe, 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    \n    # Lily and her mother's positions are fixed, so we only need to arrange 3 other family members.\n    # The number of ways to arrange 3 people is the same as finding a permutation of 3, which is 3 factorial (3!).\n    \n    ans = math.factorial(3)\n    \n    return ans\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    total_paid = 20\n    total_cost = box_price + (2 * bar_price)\n    change = total_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = num_terms * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = (3/5) * visitors\n    remaining = visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = list(range(1, 9))  # Digits 1 to 8\n    all_possible_numbers = list(permutations(digits, 2))  # All possible 2-digit numbers from given digits\n    valid_numbers = []\n\n    # Loop through all possible numbers and apply the constraints\n    for tens, ones in all_possible_numbers:\n        number = tens * 10 + ones\n        # Constraint check for smallest number\n        if ones == tens * 2:\n            valid_numbers.append(number)\n        # Constraint for largest number\n        if ones + tens == 9:\n            valid_numbers.append(number)\n        # Constraint for second largest number\n        if tens == ones + 5:\n            valid_numbers.append(number)\n        # Count odd numbers\n        odd_count = len([n for n in valid_numbers if n % 2 != 0])\n        # We can only have one odd number\n        if odd_count > 1:\n            valid_numbers = [n for n in valid_numbers if n % 2 == 0]\n\n    # Sorting the valid numbers to find the second smallest\n    valid_numbers = sorted(list(set(valid_numbers)))  # Remove duplicates and sort\n    second_smallest = valid_numbers[1]  # The second element after sorting is the second smallest\n\n    return second_smallest\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # The sum of the original three numbers is 3 times the original average\n    sum_of_three = 3 * 120\n    \n    # The sum of all four numbers is 4 times the new average\n    sum_of_four = 4 * 150\n    \n    # The fourth number is the difference between the sum of four numbers and the sum of the original three\n    fourth_number = sum_of_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_to_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_to_first_term_minus_1 = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    correct_answer = sum_to_n - sum_to_first_term_minus_1\n    kimmys_answer = 1240\n\n    return correct_answer, correct_answer == kimmys_answer\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_original, peter_original = symbols('sam_original peter_original')\n\n    # Sam had $40$ stickers more than Peter\n    equation1 = Eq(sam_original, peter_original + 40)\n\n    # Sam gave $20\\%$ of his stickers to Peter\n    sam_gave = 0.20 * sam_original\n    sam_after_giving = sam_original - sam_gave\n\n    # Peter gave $25\\%$ of his stickers to Sam after receiving from Sam\n    peter_after_receiving = peter_original + sam_gave\n    peter_gave = 0.25 * peter_after_receiving\n    peter_final = peter_after_receiving - peter_gave\n\n    # In the end, Sam has $96$ stickers more than Peter\n    sam_final = sam_after_giving + peter_gave\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # Solving equations\n    solutions = solve((equation1, equation2), (sam_original, peter_original))\n\n    return solutions[peter_original]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly.\n    # Let y be the number of questions Olivia answered incorrectly.\n    # Total number of questions is 20, so x + y = 20.\n    # For each correct answer, she earns 5 points: 5x points for correct answers.\n    # For each incorrect answer, she loses 2 points: -2y points for incorrect answers.\n    # She scored a total of 51 points: 5x - 2y = 51.\n    # We have a system of linear equations:\n    # x + y = 20\n    # 5x - 2y = 51\n    # We can solve this system for x.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 20)\n    eq2 = Eq(5*x - 2*y, 51)\n\n    solutions = solve((eq1, eq2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    money_initial = symbols('money_initial')\n    \n    # Let's call the initial amount of money as \"money_initial\"\n    # After spending 6/11 of her money and additional $5, the remaining money is:\n    # money_remain_after_highlighters = money_initial - (6/11) * money_initial - 5\n    \n    # She then spends 3/10 of the remaining money and an additional $12 on pens.\n    # money_remain_after_pens = money_remain_after_highlighters - (3/10) * money_remain_after_highlighters - 12\n    \n    # Finally, she has $30 left:\n    # money_remain_after_pens = 30\n    \n    # We substitute money_remain_after_highlighters from the first equation into the second:\n    # 30 = (money_initial - (6/11) * money_initial - 5) - (3/10) * (money_initial - (6/11) * money_initial - 5) - 12\n    \n    equation = Eq((money_initial - (6/11) * money_initial - 5) - (3/10) * (money_initial - (6/11) * money_initial - 5) - 12, 30)\n    solution = solve(equation, money_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sally's and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n\n    # Create the equations based on the age ratio now and in 15 years\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (sally, gillian))\n\n    return ages[sally]\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # LCM of 3 and 4 is 12\n    count = 40 // lcm\n    return count\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n\n    # Find the minuend by adding the incorrect subtrahend to the incorrect result\n    minuend = incorrect_result + incorrect_subtrahend\n    \n    # Subtract the correct subtrahend from the minuend to find the correct result\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    total = 45\n    result = 35\n    fraction_of_total = result / total\n    denominator = 9\n    numerator = fraction_of_total * denominator\n    \n    return int(numerator)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n\n    circumference = distance_between_seeds * number_of_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    answer = (3/8) * 32\n    return answer\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for cut_pieces in range(11):\n        if 10 - cut_pieces + (cut_pieces * 3) == 16:\n            return cut_pieces\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_of_one_apple = 1 / 9  # kg per apple\n    total_apples = 8 / mass_of_one_apple  # total number of apples used\n    cakes_baked = total_apples / 4  # number of cakes\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Initial guess to find the starting point of our search\n    students = 0\n    while True:\n        # Number of students that form a perfect square array\n        perfect_square = students**2\n        # Number of students when a surplus is added\n        students_with_surplus = perfect_square + 9\n        # Number of students needed to form a larger square array\n        students_for_larger_square = (students + 1)**2\n\n        # If the number of students falls into the given condition, break the loop\n        if students_for_larger_square - students_with_surplus == 16:\n            break\n\n        # Increment the guess\n        students += 1\n\n    ans = students_with_surplus\n    return ans\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initially there are 50 postcards divided into 5 envelopes\n    postcards_initial = 50\n    envelopes_initial = 5\n    \n    # Each envelope has the same number of postcards\n    postcards_per_envelope = postcards_initial // envelopes_initial\n\n    # After one week, she divides the new postcards into 2 more envelopes\n    envelopes_additional = 2\n    \n    # Since each envelope, even the new ones, have the same number of postcards\n    # The total number of postcards will be the number of postcards per envelope\n    # multiplied by the total number of envelopes (5 initial + 2 additional)\n    total_envelopes = envelopes_initial + envelopes_additional\n    total_postcards = postcards_per_envelope * total_envelopes\n\n    return total_postcards\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    # Number of boys\n    num_boys = 12\n    # Average score of boys\n    avg_boys = 10\n    # Total number of participants (boys + girls)\n    total_participants = 12 + 8\n    # Average score of all participants\n    avg_all = 14\n\n    # Total score of boys\n    total_score_boys = num_boys * avg_boys\n    # Total score of all participants\n    total_score_all = total_participants * avg_all\n\n    # Total score of girls (total of all - total of boys)\n    total_score_girls = total_score_all - total_score_boys\n    # Number of girls\n    num_girls = total_participants - num_boys\n\n    # Average score of girls\n    avg_girls = total_score_girls / num_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Initialize a list of possible coins in GBP\n    coins = [1, 2, 5, 10, 20, 50, 100, 200] # values are in pence\n    change_in_pence = 250 # Convert change to pence\n\n    # Iterate over combinations of coins\n    for coin in coins:\n        if change_in_pence % (2 * coin) == 0:\n            # Check if there are pairs of this coin\n            number_of_pairs = change_in_pence // (2 * coin)\n            if number_of_pairs > 0 and number_of_pairs % 2 == 0:\n                # The first coin meeting the condition is the answer\n                return coin / 100 # Convert back to GBP\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_gram = 0.80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    result = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return result\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    capacity = 4\n    containers = -(-apples // capacity)  # Equivalent to ceil(apples/capacity)\n\n    return containers\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cookies = symbols('total_cookies')\n\n    # 3/5 of the cookies were burnt, so 2/5 remained\n    remaining_cookies = 2/5 * total_cookies\n\n    # 75% of the remaining cookies were sold\n    sold_cookies = 3/4 * remaining_cookies\n\n    # The number of cookies burnt (3/5 of total) is 42 more than the sold ones\n    burnt_cookies = 3/5 * total_cookies\n\n    # Setting up the equation burnt_cookies - sold_cookies = 42\n    equation = Eq(burnt_cookies - sold_cookies, 42)\n\n    # Solving the equation\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Loop through all possible numbers that end with 9\n    for i in range(1, 10000): # Reasonable upper limit to check\n        original = i * 10 + 9 # Form the special number that ends with 9\n        modified = int(str(9) + str(i)) # Remove the 9 and place it at the beginning\n\n        # Check if the new number is four times the special number\n        if modified == 4 * original:\n            return original  # Return the special number if condition is met\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        number = int(\"107\" + str(Y))\n        if number % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def new_operation(a, b):\n        return (a + b) * a\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    total_students = 6  # Laura, Rita, and the other four students\n    laura_choices = 1  # Laura must stand in the front\n    rita_choices = total_students - 2  # Rita cannot stand at the end, so she has 4 positions to choose from\n    other_students = total_students - 2  # Subtract Laura and Rita\n    other_students_permutations = factorial(other_students)  # The remaining students can stand in any order\n\n    total_ways = laura_choices * rita_choices * other_students_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let the total distance be D\n    # Jerry travels 3/7 of D when they meet.\n    # So Kevin travels 4/7 of D when they meet.\n    # Distance traveled by Jerry in 1 hour is (2/5) * D\n    # Distance traveled by Kevin in 1 hour is 80 mph\n    # Since they meet at the same time, the sum of the distances traveled by both in 1 hour is equal to the total distance D.\n    # That gives us the following equation:\n    # (3/7) * D + (4/7) * D = (2/5) * D + 80\n    # Which simplifies to:\n    # D = 80 * 7/2 = 560/2 = 280\n    # Therefore, the length of the road is 280 miles.\n    \n    return 280\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4 / 7\n    total_apples = sold_apples / fraction_sold\n    return int(total_apples)\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50 = regular_total_price * 0.50\n    price_after_50_discount = regular_total_price - discount_50\n    additional_discount_20 = price_after_50_discount * 0.20\n    final_price = price_after_50_discount - additional_discount_20\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Given initial data\n    singapore_departure = datetime(2023, 8, 24, 5, 0)  # 24th August 05:00 Singapore time\n    london_arrival = datetime(2023, 8, 24, 11, 0)     # 24th August 11:00 London time\n    time_difference = timedelta(hours=7)               # 7 hours difference, Singapore is ahead of London\n\n    # Adjust London time to Singapore time for comparison\n    adjusted_london_arrival = london_arrival + time_difference\n    \n    # Calculate duration of flight\n    flight_duration = adjusted_london_arrival - singapore_departure\n\n    return flight_duration.total_seconds() / 3600  # Return the result in hours\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    prob_win = 0.3\n    prob_draw = 0.1\n    prob_lose = 1 - (prob_win + prob_draw)\n\n    prob_win_one_game = (prob_win * prob_lose) + (prob_lose * prob_win)\n\n    return prob_win_one_game\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Jonathan has some lollipops\n    # When he puts 4 lollipops into each box, he has 32 lollipops left over\n    # When he puts 7 lollipops into each box, the last box has only 3 lollipops\n\n    # Let's try to solve it using a loop\n    lollipops = 0\n    while True:\n        # check if the current lollipops count satisfies both conditions\n        if lollipops % 4 == 32 and (lollipops - 3) % 7 == 0:\n            return lollipops\n        lollipops += 1\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys be b and girls be g\n    b, g = symbols('b g')\n\n    # We know that there are 40 pupils in total\n    total_pupils_eq = Eq(b + g, 40)\n\n    # The total number of pencils is the sum of pencils owned by boys and girls\n    # Total pencils by boys = 20 * b, Total pencils by girls = 60 * g\n    # The average pencils is 35, so 35*40 is the total pencils for the class\n    total_pencils_eq = Eq(20*b + 60*g, 35*40)\n\n    # Solve the system of equations\n    solutions = solve((total_pupils_eq, total_pencils_eq), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n\n    # The greatest common divisor of the differences will be the largest possible D\n    D = gcd(diff1, diff2)\n\n    # Compute the remainder when any of given numbers is divided by D\n    R = 2010 % D\n\n    # The largest possible value of D + R is the sum of D and the remainder\n    return D + R\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        digits_sum = sum(int(digit) for digit in str(number))\n        if digits_sum % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    return a * 3 + b * 4\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Calculate the recurring cycle of 1/13\n    remainder = 1\n    seen_remainders = {}\n    sequence = []\n    position = 0\n\n    while True:\n        remainder *= 10\n        digit, remainder = divmod(remainder, 13)\n        # if the remainder is seen again, we found the recurring cycle\n        if remainder in seen_remainders:\n            break\n        # store the position of this remainder\n        seen_remainders[remainder] = position\n        # add the digit to the sequence\n        sequence.append(digit)\n        position += 1\n\n    # Get the index of the 2012th decimal place in the recurring cycle\n    cycle_length = len(sequence)\n    index = (2012 - 1) % cycle_length  # subtract 1 because it's a 0-based index\n\n    # Retrieve the digit at the calculated index\n    ans = sequence[index]\n\n    return ans\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_to_blue_ratio = 5 / 6\n    red_marbles = blue_marbles * red_to_blue_ratio\n    green_marbles = red_marbles / 2\n    \n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of cards Eddi had originally as e, and the number of cards Wiya had as w\n    e, w = symbols('e w')\n\n    # Set up the initial ratio equation\n    initial_ratio_eq = Eq(e / w, 8/7)\n    \n    # Set up the new ratio equation after Eddi gives 4 cards to Wiya\n    new_ratio_eq = Eq((e - 4) / (w + 4), 18/17)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (e, w))\n    \n    return solutions[e]\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = Fraction(2017 * 8 + 7, 8)\n    num2 = Fraction(3 * 3 + 2, 3)\n    num3 = Fraction(2016 * 8 + 7, 8)\n    num4 = Fraction(11, 3)\n    num5 = Fraction(2017 * 3 + 1, 3)\n    num6 = 2016.875\n    num7 = 17\n    num8 = Fraction(3 * 32 + 23, 32)\n\n    # Perform the calculation\n    result = (num1 * num2 - num3 * num4) / ((num5 - num6) * num7) * num8\n\n    # Evaluate the result as float\n    return float(result)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students to be moved from Class A to Class B.\n    # Class A has a students and Class B has b students.\n    a = 47\n    # After moving x students from Class A to Class B, Class A will have a - x students,\n    # and Class B will have x students more, so b + x students.\n    # We want Class A to have 9 more students than Class B, which gives us the equation:\n    # (a - x) = (b + x) + 9\n    \n    # Given that Class A initially has 47 more students than Class B, we have a = b + 47\n    # Substituting a into the equation we get:\n    # (b + 47 - x) = (b + x) + 9\n    # Simplifying the equation by combining like terms, we get:\n    # b + 47 - 2x = b + 9\n    # Solving for x gives us:\n    x = (47 - 9) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_in_one_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    head_start_time = 10  # minutes\n\n    # Distance covered by rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * head_start_time\n\n    # Time it takes for turtle to reach the point where rabbit slept\n    time_for_turtle_to_reach_rabbit_sleep_point = rabbit_distance_before_sleep / turtle_speed\n\n    # Time turtle continues alone while rabbit sleeps\n    turtle_time_alone = time_for_turtle_to_reach_rabbit_sleep_point + rabbit_sleep_time\n\n    # Distance covered by turtle alone\n    turtle_distance_alone = turtle_time_alone * turtle_speed\n\n    # If turtle finishes the race while rabbit sleeps, turtle wins\n    if turtle_distance_alone >= race_distance:\n        winner = 'turtle'\n        distance_between = 0\n    else:\n        # Distance remaining for rabbit after sleep\n        rabbit_distance_after_sleep = race_distance - rabbit_distance_before_sleep\n\n        # Time for rabbit to finish after sleep\n        rabbit_time_to_finish = rabbit_distance_after_sleep / rabbit_speed\n\n        # Total time for rabbit to finish the race\n        rabbit_total_time = head_start_time + rabbit_sleep_time + rabbit_time_to_finish\n\n        # Total time for turtle to finish the race\n        turtle_total_time = race_distance / turtle_speed\n\n        if rabbit_total_time < turtle_total_time:\n            winner = 'rabbit'\n            # Distance turtle covered by the time rabbit finishes\n            turtle_distance_when_rabbit_finishes = turtle_total_time * turtle_speed\n            distance_between = race_distance - turtle_distance_when_rabbit_finishes\n        else:\n            winner = 'turtle'\n            # Distance rabbit covered by the time turtle finishes\n            rabbit_distance_when_turtle_finishes = (head_start_time + rabbit_sleep_time + \n                                                    (turtle_total_time - (head_start_time + rabbit_sleep_time))) * rabbit_speed\n            distance_between = race_distance - rabbit_distance_when_turtle_finishes\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Given difference between the numbers\n    diff = 57\n    # Given sum of the numbers\n    total_sum = 77\n    # Let's find the smaller number\n    # If x is the smaller number and y is the larger number, then:\n    # x + y = total_sum and y - x = diff\n    # Solving these equations:\n    # x + (x + diff) = total_sum\n    # 2x + diff = total_sum\n    # 2x = total_sum - diff\n    # x = (total_sum - diff) / 2\n    smaller_number = (total_sum - diff) / 2\n\n    return int(smaller_number)\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def is_oddtastic(n):\n    return all(int(digit) % 2 != 0 for digit in str(n))\n\ndef solution():\n    return sum(is_oddtastic(n) for n in range(1, 1000))\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # hundreds place, odd number\n        for j in range(10):    # tens place\n            for k in range(10):  # units place\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    avocados_per_pair = 2\n    total_avocados = total_pairs * avocados_per_pair\n\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100\n    \n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    possible_scores = Counter()\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            total = d1 + d2\n            possible_scores[total] += 1\n\n    most_likely_score = possible_scores.most_common(1)[0][0]\n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    for rhinos in range(29):  # The maximum number of rhinos is 28 since we have 28 heads.\n        deer = rhinos  # The number of deer is the same as rhinos.\n        ostriches = 28 - rhinos - deer  # Total heads minus the number of rhinos and deer gives the number of ostriches.\n        if (rhinos * 4) + (deer * 4) + (ostriches * 2) == 88:  # Each rhino and deer has 4 legs and each ostrich has 2 legs.\n            return rhinos\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_in_pages = 0\n    page_number = 1\n\n    while digits_in_pages < total_digits:\n        digits_in_page = len(str(page_number))\n        digits_in_pages += digits_in_page\n        page_number += 1\n    \n    # Since the loop adds pages even after crossing the total_digits,\n    # we subtract one to get the correct page count.\n    return page_number - 1\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    num_tables = 8\n    \n    # Each square table has 4 sides, but when putting them in a row, \n    # the inner sides are not available for seating.\n    outer_sides_per_table = 2\n    corner_seats_per_table = 2\n    \n    # Calculate the total number of people that can sit on outer sides\n    total_outer_seats = num_tables * outer_sides_per_table * (people_per_square_table // 4) \n    \n    # Calculate the corner seats. First and last table have all 4 corners available, \n    # but the tables in between have only 2 corners available.\n    total_corner_seats = corner_seats_per_table * ((people_per_square_table // 4) * 2) + (num_tables - 2)\n    \n    # The total maximum number of people is the sum of all outer seats and corner seats\n    max_people = total_outer_seats + total_corner_seats\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of marbles each person has\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Equation 1: Xavier has thrice as many marbles as Andrew.\n    equation1 = Eq(xavier, 3 * andrew)\n\n    # Equation 2: Andrew has 30 marbles less than the average of Boris, Jeffery, Xavier.\n    equation2 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n\n    # Now we can solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # The solution will give us the number of marbles for Andrew, but we need the number for Jeffery and Boris\n    total_marbles_jeffery_boris = solutions[boris] + solutions[jeffery]\n\n    return total_marbles_jeffery_boris\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # A is a 2-digit number, so it ranges from 10 to 99\n        for B in range(1000, 10000):  # B is a 4-digit number, so it ranges from 1000 to 9999\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:  # Check if both conditions are met\n                max_diff = max(max_diff, B - A)  # Update max_diff if the current difference is larger\n    return max_diff\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit of 32^33\n    ones_digit_32 = (32 ** 33) % 10\n    \n    # Calculate the ones digit of 22^29\n    ones_digit_22 = (22 ** 29) % 10\n\n    # Find the difference and get the ones digit\n    ans = (ones_digit_32 - ones_digit_22) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisor_count\n\n    # A number n that has exactly 15 factors can be expressed as a product of\n    # primes raised to powers such that the total number of divisors is \n    # the product of (exponents + 1). If the number has exactly 15 divisors,\n    # it can be a prime raised to the 14th power (p^14) or it can be a product\n    # of two primes, with one raised to the 2nd power and the other raised to\n    # the 4th power (p1^2 * p2^4), as 15 = 3 * 5 = (2+1) * (4+1).\n    # In this case, we also want the number to be a multiple of 15. Any multiple\n    # of 15 is at least divisible by 3 and 5. \n\n    # We need to find all numbers less than a certain threshold that have these properties.\n    # A practical upper limit for numbers that we need to check can be set to 15^14,\n    # as any number with 15 as a factor and more than 15^14 would have more than 15 factors.\n\n    upper_limit = 15**14\n    count = 0\n\n    # Check each multiple of 15 up to the upper limit\n    for i in range(15, upper_limit + 1, 15):\n        # Use the divisor_count function to check the number of divisors\n        if divisor_count(i) == 15:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    num_people = 0\n    difference = 52\n    n = 1  # n represents the length of the side of the square array.\n\n    # Increment side length of the square array until the condition is met.\n    while True:\n        # Number of students will be sum of squares of even side lengths\n        # Number of teachers will be sum of squares of odd side lengths less than n\n        students = sum([(2*i)**2 for i in range(n//2 + 1)])\n        teachers = sum([(2*i + 1)**2 for i in range(n//2)])\n        \n        # Check if the difference condition is met\n        if students - teachers == difference:\n            # The total number of people is the square of n (side length of outer layer)\n            num_people = n**2\n            break\n        n += 1\n\n    return num_people\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Calculate the product without the 8**2 term\n    result = (8 * 80 * 100) / 8**2\n    # Return the result which should be in the box\n    return result\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, (5/7) * oranges)\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Rational, solve\n\n    x, y, z = symbols('x y z', integer=True)\n    expr = 54 + 1/(x + 1/(y + 1/z))\n    equation = Rational(2014, 37) - expr\n\n    solutions = solve(equation, (x, y, z))\n\n    for solution in solutions:\n        if all(var.is_integer for var in solution):\n            return sum(solution)\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the amount of oil sold from each bucket\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    amount_sold = solve(equation, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_counting_at = 10    # He stops at 10 o'clock\n    total_counts = 30       # He counts to 30\n    clock_numbers = 12      # There are 12 numbers on the clock\n\n    # We use modulo to find the starting point.\n    # We subtract because he ends at 10, and we're looking for the starting point,\n    # going backwards 30 steps.\n    start_number = (end_counting_at - (total_counts % clock_numbers)) % clock_numbers\n\n    # If the start number is 0, it means he started at 12 o'clock.\n    if start_number == 0:\n        start_number = 12\n\n    return start_number\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 5 == 1 and i % 6 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    # Since all numbers are prime and based on the given equations:\n    # a = c + 11 and b = c + 6\n\n    # We will start checking from c = 2 (the smallest prime) and find a and b\n    # until all three numbers a, b, and c are prime.\n\n    c = 2\n    while True:\n        a = c + 11\n        b = c + 6\n\n        if isprime(a) and isprime(b) and isprime(c):\n            return a * b * c\n        \n        c += 1  # Increment c by 1 and check again\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # convert minutes to hours\n    # Let the distance between home and park be x km\n    # Time to jog to the park = distance/speed going = x / 5\n    # Time to jog back home = distance/speed returning = x / 4\n    # Total time for the trip = time to park + time back\n    # (x/5) + (x/4) = total_time_hours\n    # Solve the equation for x\n    x = (total_time_hours * 20) / 9   # Multiply both sides by 20 to equate (4x + 5x)\n    return x\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens (including himself and his 5 brothers)\n    num_aliens = 1 + 5\n\n    # Number of legs for one alien\n    num_legs_per_alien = 5\n\n    # Total number of legs for all aliens\n    total_legs = num_aliens * num_legs_per_alien\n\n    # Number of shoes needed (1 shoe per leg)\n    total_shoes = total_legs\n\n    # Number of socks needed (1 pair per 2 legs)\n    total_socks = total_legs // 2\n\n    # Cost of shoes, sold in sets of 5\n    cost_per_set_of_shoes = 78\n    sets_of_shoes = total_shoes / 5\n    total_cost_shoes = sets_of_shoes * cost_per_set_of_shoes\n\n    # Cost of socks, sold in pairs\n    cost_per_pair_of_socks = 12\n    total_cost_socks = total_socks * cost_per_pair_of_socks\n\n    # Total cost\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of pies Joleen (j) and Rennie (r) baked\n    r, j = symbols('r j')\n\n    # Equation based on the problem statement\n    equation = Eq((3/4) * r, (2/3) * j)\n\n    # Joleen baked 5 more pies than Rennie\n    pies_difference = Eq(j, r + 5)\n\n    # Solve the equations for j and r\n    solutions = solve((equation, pies_difference), (r, j))\n\n    # Calculate the total number of pies baked by both\n    total_pies = solutions[j] + solutions[r]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference = 8\n\n    # Let the number of boys be b and the number of girls be g\n    # We know that g = b + 8 (there are 8 more girls than boys)\n    # We also know that b + g = 26 (total number of pupils)\n    # By substituting g from the first equation into the second, we get: b + (b + 8) = 26\n    # Simplify to get 2b + 8 = 26\n    # Then 2b = 26 - 8\n    # So b = (26 - 8) / 2\n    b = (total_pupils - difference) / 2\n    # Since g = b + 8\n    g = b + difference\n\n    return int(g)\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_kg = 550 / 1000\n    juice_oranges_kg = 1050 / 1000\n\n    remaining_oranges_kg = total_oranges_kg - (pie_oranges_kg + juice_oranges_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    total_students = 35\n    both = symbols('both')\n\n    # number of students who like apples is three times the number who like both\n    apples = 3 * both\n\n    # number of students who like bananas is five times the number who like both\n    bananas = 5 * both\n\n    # Total students is the sum of those liking apples, bananas, minus those liking both (since they are counted twice)\n    # and should be equal to 35\n    equation = Eq(apples + bananas - both, total_students)\n\n    # Solve for the number of students who like both fruits\n    both_solution = solve(equation, both)\n\n    return both_solution[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # lee_rate and nancy_rate represent the fraction of the job Lee and Nancy can complete in one hour, respectively.\n    \n    # Together, they finish the job in 10 hours, so combined, they do 1/10 of the job per hour.\n    equation1 = Eq(lee_rate + nancy_rate, 1/10)\n\n    # Nancy works 20 hours, and when Lee stops after 6 hours, they finish the job\n    equation2 = Eq(nancy_rate * 20 + lee_rate * 6, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    # nancy_time represents the time it would take Nancy to finish the job alone, so it's 1 over her rate\n    nancy_time = 1 / solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):        # x cannot be 0 since A is a two-digit number\n        for y in range(10):       # y can be 0 to 9\n            A = 10*x + y\n            B = 20*x + 2*y\n            if B == 6*A + 25:\n                return A    # Since the question asks for A\n    return \"No solution found\"\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pound = 100\n    total_pence = 3 * pence_in_pound\n    percentage = (15 / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    # Arithmetic progression parameters\n    first_term = 15\n    difference = 3\n    num_terms = 5\n\n    # Using formula for sum of arithmetic progression: (n/2)*(2a + (n-1)*d)\n    total_chairs = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if n % 4 == 3 and n % 13 == 12:\n            return n\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    # Calculate ways to choose a pencil and a ruler\n    ways_pencil_ruler = pencil_colours * ruler_colours\n\n    # Calculate ways to choose a pencil and a pen\n    ways_pencil_pen = pencil_colours * pen_colours\n\n    # Calculate ways to choose a ruler and a pen\n    ways_ruler_pen = ruler_colours * pen_colours\n\n    # Sum the different ways of choosing two items\n    ans = ways_pencil_ruler + ways_pencil_pen + ways_ruler_pen\n    return ans\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    series = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # If Benny picks 2 blue, 2 yellow and 1 red, he still doesn't have 3 of the same color.\n    # So he must pick one more to ensure he has 3 of the same color.\n    # This is because in the worst case he can get 2 of each color and 1 different before getting the third one\n    # which is the same color as any two previously picked. Hence, 2 blue + 2 yellow + 1 red + 1 more = 6.\n    return 2 + 2 + 1 + 1\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_age = 45\n    increment = 5 * 2  # Both persons aging 5 years\n    future_sum_age = current_sum_age + increment\n    return future_sum_age\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    return -10 + 3\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_pence = 7 * 14\n    paid_pence = 100  # 1 pound is 100 pence\n    change_pence = paid_pence - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n\n    equation1 = Eq(garrett_age - sebastian_age, 24)\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))\n\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n\n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_percentage = 0.06\n    sales_tax_paid = 90\n\n    price_of_sofa = sales_tax_paid / sales_tax_percentage\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    \n    return total_earnings\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let the number of girls be g and boys be b\n    g, b = symbols('g b')\n\n    # Original number of boys is 65 less than girls\n    equation1 = Eq(b, g - 65)\n\n    # Boys and girls left: (2/5)b and (3/7)g, respectively\n    equation2 = Eq((5/5)*b - (2/5)*b, (7/7)*g - (3/7)*g)\n\n    # Solve the equations for b and g\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Number of students remaining after some boys and girls left for recess\n    boys_remaining = (5/5)*solutions[b] - (2/5)*solutions[b]\n    girls_remaining = (7/7)*solutions[g] - (3/7)*solutions[g]\n\n    # Total number of students remaining\n    total_remaining = boys_remaining + girls_remaining\n\n    return total_remaining\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_index = 20\n\n    term_value = first_term + (term_index - 1) * common_difference\n\n    return term_value\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * days * hotel_cost_per_day_per_person\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(7)  # Total ways to arrange 'ORANGES' without restrictions\n    vowels_ways = factorial(3)  # Ways to arrange the vowels A, E, O\n    consonants_ways = factorial(4)  # Ways to arrange the consonants R, N, G, S\n    total_vowel_together = vowels_ways * consonants_ways * factorial(5)  # Total ways the vowels can be together\n\n    # Subtract the number of ways the vowels can be together from the total ways\n    ans = total_ways - total_vowel_together   \n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples, bananas = symbols('oranges apples bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(oranges + apples + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (oranges, apples, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n    height_kilometers = height_meters / meters_to_kilometers\n    return height_kilometers\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n    \n    # There are 4 blocks to consider: M (Math), C (Chemistry), P (Physics), B (Biology)\n    block_arrangements = factorial(4) \n\n    # Calculate the internal arrangements for each subject\n    math_book_arrangements = factorial(4)\n    chemistry_book_arrangements = factorial(3)\n    physics_book_arrangements = factorial(2)\n    biology_book_arrangements = factorial(1)  # Trivially 1, but included for completeness\n\n    # Compute the total arrangements\n    total_arrangements = (block_arrangements * math_book_arrangements *\n                          chemistry_book_arrangements * physics_book_arrangements *\n                          biology_book_arrangements)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # Number of ways to select from each category\n    ways_category1 = 30\n    ways_category2 = 40\n    ways_category3 = 45\n\n    # The principle of multiplication for counting the ways\n    total_ways = ways_category1 * ways_category2 * ways_category3\n    \n    return total_ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    perimeter = 12\n    for a in range(1, perimeter // 2 + 1):\n        for b in range(a, (perimeter - a) // 2 + 1):\n            c = perimeter - a - b\n            if a <= b <= c and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    # Since rotations are considered the same, we can fix one person and arrange the rest.\n    # There are 5 remaining seats (since we fixed one person) and 5 other people to arrange.\n    num_ways = factorial(5)\n\n    return num_ways\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Nim game solution: Use XOR to find the winning strategy.\n    # If the XOR of the two piles is non-zero, then the first player has a winning strategy \n    # If the XOR is zero, the second player has a winning strategy\n    # Since 35 XOR 24 is non-zero, Eddie has a winning strategy.\n\n    pile_a = 35\n    pile_b = 24\n    \n    # Find the nim-sum which is the XOR of the two piles.\n    nim_sum = pile_a ^ pile_b\n\n    # If the nim-sum is zero, it means the second player (Wei'er) has the winning strategy.\n    # If the nim-sum is non-zero, it means the first player (Eddie) has the winning strategy.\n    if nim_sum != 0:\n        # Eddie has the winning strategy.\n        # To find Eddie's strategy, subtract the nim-sum from the larger pile\n        # such that the nim-sum becomes zero (making the position unwinnable for Wei'er).\n        if pile_a > pile_b:\n            matches_to_take = pile_a - (pile_a ^ pile_b)\n            return ('Eddie', 'A', matches_to_take)\n        else:\n            matches_to_take = pile_b - (pile_a ^ pile_b)\n            return ('Eddie', 'B', matches_to_take)\n    else:\n        # Wei'er has the winning strategy (this won't be the case here due to initial setup).\n        return ('Weier',)\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # In the equations 31+a=26+b=20+c, let's set them equal to a variable x.\n    # x = 31+a = 26+b = 20+c,\n    # Thus we can say that (x-31), (x-26) and (x-20) must be prime numbers.\n    # We need to find such an x that satisfies this condition.\n    a, b, c, x = symbols('a b c x')\n    equation1 = Eq(x, 31 + a)\n    equation2 = Eq(x, 26 + b)\n    equation3 = Eq(x, 20 + c)\n\n    # Solving the equations will give us the relation between x and a, b, c. However, \n    # we must find a valid prime number solution for a, b, c from these relations.\n    solutions = solve((equation1, equation2, equation3), (a, b, c, x))\n\n    # Since x is shared in all equations, we iterate over a range of possible x values \n    # starting from the smallest equation (x = 20 + c), making sure x-20, x-26, and x-31 are prime.\n    for potential_x in range(22, 100):  # We start at 22 as the smallest prime number is 2.\n        if isprime(potential_x - 20) and isprime(potential_x - 26) and isprime(potential_x - 31):\n            # When we find such an x, we get a, b, and c and check if they are indeed prime.\n            a_val = potential_x - 31\n            b_val = potential_x - 26\n            c_val = potential_x - 20\n            \n            if isprime(a_val) and isprime(b_val) and isprime(c_val):\n                return a_val * b_val * c_val\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of stickers each person has after all transactions as e, m, d\n    e, m, d = symbols('e m d')\n    # Let x be the number of stickers Eugene started with\n    x = symbols('x')\n\n    # According to the problem, after transactions the ratios are 46:12:7\n    # Thus we can form an equation for each person based on these ratios\n    ratio_total = 46 + 12 + 7\n    e_final = (46 / ratio_total) * 260\n    m_final = (12 / ratio_total) * 260\n    d_final = (7 / ratio_total) * 260\n\n    # We are given the sequence of transactions and deduce the initial number of stickers\n    # Finally, David gave Eugene as many stickers as Eugene had left (e -> e + d)\n    # Then, Melvin gave David as many stickers as David had (m -> m / 2, d -> d + m / 2)\n    # First, Eugene gave Melvin twice as many stickers as Melvin had (x -> x - 2 * m, m -> m + 2 * m)\n\n    # Equations based on the above descriptions\n    eq1 = Eq(e, e_final - d_final)\n    eq2 = Eq(m, m_final * 2)\n    eq3 = Eq(d, d_final - m_final)\n    eq4 = Eq(x, e_final + 2 * m_final)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (e, m, d, x))\n\n    # Get the solution for 'x' which is the number of stickers Eugene had at first\n    return int(solutions[x])\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first = 31\n    last = 41\n    num_terms = (last - first) + 1\n    sum_of_series = (num_terms * (first + last)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([80, 76, 72, 68, 64, 60, 56]) - sum([78, 74, 70, 66, 62, 58])\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial situation: equal number of boys and girls\n    equation1 = Eq(boys, girls)\n\n    # After 12 boys came in and 8 girls left\n    equation2 = Eq(boys + 12, 2 * (girls - 8))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Initial number of students is the sum of boys and girls at the beginning\n    initial_students = solutions[boys] + solutions[girls]\n\n    return initial_students\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    numbers = [3, 5, 7]\n    perm = permutations(numbers)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds in meters per second\n    speed_first = 7\n    speed_middle = 5\n    speed_last = 8\n\n    # Distances in meters\n    distance_first = 280\n    distance_middle = 400\n    distance_last = 800 - (distance_first + distance_middle) # Total distance minus the sum of first two distances\n\n    # Calculating times for each section in seconds\n    time_first = distance_first / speed_first\n    time_middle = distance_middle / speed_middle\n    time_last = distance_last / speed_last\n\n    # Total time spent\n    total_time = time_first + time_middle + time_last\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    ans = gcd(15, 45)\n    return ans\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(0, 25))\n    ans = None\n\n    for i in primes:\n        if 25 - i in primes:\n            ans = i * (25 - i)\n            break\n\n    return ans\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Start time in minutes (6 hours * 60 minutes + 52 minutes)\n    end_time = (20 * 60) + 24   # End time in minutes (20 hours * 60 minutes + 24 minutes)\n    time_spent = end_time - start_time  # Total time spent in minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the number of each type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Equations based on the information given\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + 2 * vanilla / 3 + 7 * blueberry / 9, 427)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes_sold = solutions[chocolate] / 6\n\n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamps = 50\n    distance_between_lamps = 2  # in meters\n\n    # Since there is one lamp post at each end, we have 50 - 1 gaps between the lamp posts\n    num_gaps = num_lamps - 1\n\n    # The total length of the road is the number of gaps times the distance between each lamp post\n    road_length = num_gaps * distance_between_lamps\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    # Total peaches to distribute\n    total_peaches = 47\n    # Number of students\n    students = 6\n\n    # Applying Pigeonhole Principle\n    # Each student gets at least this many peaches (integer division)\n    min_peaches_per_student = total_peaches // students\n    # The student with the most peaches gets at least one more than the minimum\n    max_peaches_for_one_student = min_peaches_per_student + (total_peaches % students > 0)\n\n    return max_peaches_for_one_student\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway_number = (18 + 52) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45  # cost in pence\n    stamps_cost = 10 * 27      # cost in pence\n    total_cost = post_cards_cost + stamps_cost  # total cost in pence\n\n    note_value = 10 * 100  # £10 note in pence\n    change = note_value - total_cost\n\n    return change\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be n\n    # Then the seven consecutive numbers are n, n+1, n+2, n+3, n+4, n+5, n+6\n    # The sum of these numbers is 7n + (1+2+3+4+5+6) = 140\n    sum_of_consecutive_numbers = 140\n    sum_of_numbers_1_to_6 = sum(range(1, 7))  # This is 1+2+3+4+5+6\n    # Calculating n from the equation 7n + 21 = 140\n    n = (sum_of_consecutive_numbers - sum_of_numbers_1_to_6) // 7\n    return n\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_output_per_day = 180 / 10\n    ryan_output_per_day = 180 / 15\n    difference = frank_output_per_day - ryan_output_per_day\n    return difference\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 seats left after Claire's seat is fixed.\n\n    # First, calculate the total permutations without any restrictions: \n    # 3 seats can be filled in 3! ways by the other three people\n    total_permutations = 3 * 2 * 1\n\n    # Now, calculate the number of permutations where Tony sits directly opposite Claire:\n    # If Claire's seat is fixed, Tony has only 1 choice (the seat opposite),\n    # and the remaining 2 people can be arranged in 2! ways\n    tony_opposite_permutations = 1 * 2 * 1\n\n    # The number of valid arrangements is total permutations minus the invalid ones\n    valid_permutations = total_permutations - tony_opposite_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let the total number of questions be q\n    # Let the scheduled time to leave be t minutes\n    # If she marks 4 questions per minute, she'll take q/4 minutes and leave 5 minutes late\n    # If she marks 6 questions per minute, she'll take q/6 minutes and leave 5 minutes early\n    \n    # Therefore, we can set up the following equations:\n    # q/4 = t + 5\n    # q/6 = t - 5\n    \n    # By multiplying the first equation by 4 and the second by 6 to clear the denominators we get:\n    # q = 4t + 20\n    # q = 6t - 30\n    \n    # Now we can set these two equations equal to each other since they both equal q:\n    # 4t + 20 = 6t - 30 => 2t = 50 => t = 25\n    \n    # Now we can find q by substituting t back into either equation:\n    # q = 4t + 20 => q = 4 * 25 + 20 => q = 100 + 20 => q = 120\n    \n    # Therefore, the number of questions she marked before leaving the school is 120.\n    \n    return 120\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised_pence = 165 * 100  # Convert pounds to pence\n    price_per_cake_pence = 75\n    num_cakes_sold = total_money_raised_pence // price_per_cake_pence\n    return num_cakes_sold\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 5\n    marks_deducted_for_wrong = 2\n    total_marks = 79\n\n    # Let x be the number of correct answers\n    # Then total_questions - x will be the number of wrong answers\n    # Equation: 5x - 2(total_questions - x) = total_marks\n    # Solve for x\n    for x in range(total_questions + 1):\n        if marks_for_correct * x - marks_deducted_for_wrong * (total_questions - x) == total_marks:\n            return x\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    left_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * left_after_restaurant\n    left_after_fees = left_after_restaurant - spent_on_fees\n\n    return left_after_fees\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        n1 = i\n        n2 = i + 1\n        n3 = i + 2\n        n4 = i + 3\n        n5 = i + 4\n\n        # Check conditions for 37 divisibility for each three adjacent numbers\n        if (n1 + n2 + n3) % 37 == 0 or (n2 + n3 + n4) % 37 == 0 or (n3 + n4 + n5) % 37 == 0:\n            # Check conditions for 60 divisibility for each three adjacent numbers\n            if (n1 + n2 + n3) % 60 == 0 or (n2 + n3 + n4) % 60 == 0 or (n3 + n4 + n5) % 60 == 0:\n                ans = n5\n                return ans\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    \n    candies_to_give = (amy_candies - emma_candies) // 2\n    \n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    return 5 * x + 1 * y\n\nans = solution"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    return difference\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # There are two intervals between the three chimes, which take 6 seconds in total.\n    # Hence, each interval takes 3 seconds.\n    interval_duration = 6 / 2\n    \n    # At 6 pm, to chime 6 times, there are 5 intervals.\n    total_intervals = 5\n    \n    # Calculate the total time taken for 5 intervals\n    total_time = interval_duration * total_intervals\n\n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    work_per_hour_p = 1 / (12 * 8)\n    work_per_hour_q = 1 / (8 * 10)\n    combined_work_per_hour = work_per_hour_p + work_per_hour_q\n    hours_needed = 1 / combined_work_per_hour\n    days_needed = hours_needed / 8\n    ans = int(days_needed) if days_needed.is_integer() else int(days_needed) + 1\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for i in range(1, 41):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Use the formula for the sum of squares of the first n natural numbers\n    # Sum of squares of first n natural numbers: n(n + 1)(2n + 1) / 6\n    n = 10  # because we are using 3 * (1^2 + 2^2 + ... + 10^2)\n    sum_of_squares = 3 * (n * (n + 1) * (2 * n + 1)) // 6  # Floor division to get integer result\n\n    return sum_of_squares\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(120)\n    total_factors = 1\n\n    for prime, exponent in factors.items():\n        total_factors *= (exponent + 1)\n\n    return total_factors\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # in pence\n    total_kg = 5\n    money_paid = 10 * 100  # converting pounds to pence\n\n    total_cost = cost_per_kg * total_kg\n    change = money_paid - total_cost\n\n    return change / 100  # converting back to pounds\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders and moduli corresponding to the problem\n    remainders_moduli = [(3, 4), (1, 7), (3, 9)]\n\n    # Using the solve_congruence() function from SymPy to find the smallest solution\n    smallest_solution, lcm_mod = solve_congruence(*remainders_moduli)\n\n    return smallest_solution\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    factors_pairs = [(i, 180 // i) for i in range(1, int(180**0.5) + 1) if 180 % i == 0]\n    min_difference = min(abs(pair[0] - pair[1]) for pair in factors_pairs)\n    return min_difference\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(5, 16):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let the time taken by Max to cover the distance be t minutes.\n    # Thus, Luca takes (t + 10) minutes.\n    # Using the ratio of walking speeds, which inversely relates to time taken,\n    # We have 3/2 = (t + 10) / t\n    # Solving for t we get t = 30 minutes (for Max).\n\n    # If Luca walks at double his speed, the time taken would be half.\n    # Time taken by Luca at his usual speed is t + 10 = 30 + 10 = 40 minutes.\n    # At double speed, it takes half the time, so 40 / 2 = 20 minutes.\n\n    return 20\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    number_of_people = 85\n    price_per_person = 1.30\n    total_money_collected = number_of_people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * x - 2 * (5 + x), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruit_count = 3 + 5\n    total_weight = total_durian_weight + total_watermelon_weight\n    average_weight = total_weight / total_fruit_count\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # let's find Tom's mistake by defining the variables for correct and wrong answers\n    correct_answers = symbols('correct_answers')\n    \n    # Equation based on Tom's score\n    score_equation = Eq(2 * correct_answers - (40 - correct_answers), 71)\n    \n    # Now we solve for the correct_answers\n    correct_answers_solution = solve((score_equation), (correct_answers))\n    \n    # Calculate the number of wrong answers\n    wrong_answers = 40 - correct_answers_solution[0]\n    \n    return int(wrong_answers)\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    return 40 + 1\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of pens and pencils she had initially\n    x = symbols('x')\n    \n    # After giving 5 pencils away, she had x-5 pencils left and twice as many pens\n    eq = Eq(2*(x-5), x)\n    \n    # Solve for x\n    result = solve(eq, x)\n    \n    # Calculate the final number of pens: initial pens + 18 more pens\n    final_pens = result[0] + 18\n    \n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the distance Star jogs\n    jogging_time = 1  # from 6:30 AM to 7:30 AM is 1 hour\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the distance Star walks\n    walking_time = 2  # from 7:30 AM to 9:30 AM is 2 hours\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Calculate the total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2  # Peter cuts two 45cm lengths off\n\n    remaining_length = total_length - cut_length\n    length_per_piece = 40  # each piece after the initial cuts is 40cm\n\n    num_pieces = remaining_length // length_per_piece\n\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis_players = 0.1\n    proportion_left_handed = 0.25\n    \n    total_left_handed = left_handed_tennis_players / proportion_left_handed_tennis_players\n    total_students = total_left_handed / proportion_left_handed\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram_of_butter\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime.strptime('10:35', '%H:%M')\n    duration = timedelta(hours=3, minutes=35)\n    arrival = departure + duration\n    return arrival.strftime('%H:%M')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = 3  # Number of places in the number\n    choices_per_digit = 3  # Number of available digits (6, 7, 8) for each place\n    total_combinations = choices_per_digit ** digits\n    return total_combinations\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters in a week\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    total_zeros = 0\n    current_number = 1\n    \n    # Count zeros in blocks of 10, 100, 1000, etc. to speed up the process\n    while total_zeros < 100:\n        # Number of zeros in the current block (e.g., 10-19 has 1 zero, 100-199 has 20 zeros)\n        block_zeros = str(current_number)[:-1].count('0') * 10 + 1 if current_number % 10 == 0 else 0\n        if total_zeros + block_zeros >= 100:\n            # When reached the block containing the 100th zero, count zeros number by number\n            for i in range(current_number, current_number + 10):\n                total_zeros += str(i).count('0')\n                if total_zeros >= 100:\n                    return i\n        else:\n            total_zeros += block_zeros\n            current_number += 10\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    # first part of the journey at 180 meters per minute for 6 minutes\n    first_distance = 180 * 6\n    # second part of the journey at 120 meters per minute for 8 minutes\n    second_distance = 120 * 8\n    # total distance is the sum of both parts\n    total_distance = first_distance + second_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # The sum of an arithmetic sequence is the average of the terms times the number of terms.\n    # Here we have 8 terms, and the sum is 2012.\n    # The average of the sequence is sum / number_of_terms\n    \n    number_of_terms = 8\n    total_sum = 2012\n    avg = total_sum / number_of_terms\n\n    # If the numbers are consecutive and even, the average is the middle point.\n    # The middle point is halfway between the 4th and 5th numbers.\n    # The largest number is the 8th number, which is 3 more than the average.\n    \n    largest_number = avg + (number_of_terms // 2) - 1\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a be the number of students in class A and b be the number of students in class B\n    a, b = symbols('a b')\n    \n    # The number of students in class A is 5/7 of that of class B\n    equation1 = Eq(a, 5/7 * b)\n    \n    # If 3 students were transferred from class B to class A\n    # The number of students in class A would be 4/5 of that of class B\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Return the number of students in class A\n    return solutions[a]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the initial number of bottles Faye has.\n    # After exchanging 5 times and getting 4 new bottles with 1 more than expected\n    # It means each time she exchanges she has 3 bottles left (since 3 empty for 1 new)\n    # So 5 exchanges would leave her with 15 bottles if she got the expected number\n    # As she received 1 more than expected, she must have started with 2 more bottles\n    # to be able to perform the last exchange without leftovers, thus 15 - 1(extra) + 2(initial spare bottles)\n\n    still_have = 5 * 3  # Bottles she still has after 5 exchanges (without the extra)\n    initial_spare = 2   # Initial spare bottles to make up for the last exchange\n    expected_extra = 1  # Extra bottle she got than expected\n\n    # Calculate the initial number of bottles before exchanges\n    initial_bottles = still_have - expected_extra + initial_spare\n\n    return initial_bottles\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # We are looking for the number of boys b such that b + 17 = (sqrt(b) + 1)^2.\n    # The equation becomes b + 17 = b + 2*sqrt(b) + 1\n    \n    # Rearrange the equation to find the value of sqrt(b)\n    # 0 = 2*sqrt(b) + 1 - 17\n    # sqrt(b) = 8  (Only positive root is considered because the number of boys can't be negative)\n    \n    # Therefore, the total number of boys is the square of 8\n    b = 8**2\n    \n    return b\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_ml_per_s = 125\n    total_ml = total_litres * 1000\n    time_seconds = total_ml / flow_rate_ml_per_s\n    return time_seconds\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the speed and distance\n    speed = symbols('speed')\n    distance = symbols('distance')\n    \n    # Equation for the initial travel time\n    equation1 = Eq(distance / speed, 6) # because 7 PM - 1 PM = 6 hours\n    \n    # Equation for the travel time if she wants to arrive one hour earlier, hence for 5 hours\n    equation2 = Eq(distance / (speed + 2), 5)\n    \n    # Solve the system of equations for distance\n    solutions = solve((equation1, equation2), (speed, distance))\n    \n    return solutions[distance]\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits, pages, digit_increment = 237, 0, 9\n\n    # Calculate pages with single digit\n    while total_digits - digit_increment > 0:\n        total_digits -= digit_increment\n        pages += digit_increment // 1\n        digit_increment += 9 * 10 ** (len(str(pages + 1)) - 1)\n\n    # Calculate the last few pages which may not be a complete set\n    pages += total_digits // len(str(pages + 1))\n\n    return pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    equation1 = Eq(a + 8*d, a + 14*d + 18)  # 9th and 15th term relationship\n    equation2 = Eq(a + 19*d + a + 11*d, 88)  # Sum of 20th and 12th term\n\n    solutions = solve((equation1, equation2), (a, d))\n    a_value = solutions[a]\n    d_value = solutions[d]\n\n    nth_term = a_value + 31*d_value  # 32nd term\n    \n    return nth_term\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    year_born = 1940 - 80  # the year Lord Ownlynose was born\n    current_year = 2011\n    age_of_oak_tree = current_year - year_born\n\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    time_for_4_cuts = 12  # Time to cut into 4 pieces\n    number_of_cuts_for_12_pieces = 11  # To get 12 pieces, make 11 cuts\n\n    # Time for each cut is the time for 4 pieces divided by 3 (since 4 pieces involve 3 cuts)\n    time_per_cut = time_for_4_cuts / 3\n\n    # Total time for 11 cuts to get 12 pieces\n    total_time_for_12_pieces = time_per_cut * number_of_cuts_for_12_pieces\n\n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    term_10th = 31\n    common_difference = 28 - 25\n    term_1st = term_10th - common_difference * (10 - 1)\n    return term_1st\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Let the total number of days be 'n'\n    # The correct total savings over 'n' days is n * 1462\n    # The actual (incorrect) total savings over 'n' days is n * 1468 minus the difference made by the inaccurate record\n    # The difference made by the inaccurate record is 1268 - 1082\n    # Therefore, the actual total savings equals to the correct total savings minus the difference\n    # n * 1462 = n * 1468 - (1268 - 1082)\n    # Solving for 'n' gives us the number of days\n\n    difference = 1268 - 1082\n    corrected_average = 1462\n    incorrect_average = 1468\n\n    # Rearrange the equation to solve for n\n    # n * corrected_average = n * incorrect_average - difference\n    # n * (incorrect_average - corrected_average) = difference\n\n    n = difference / (incorrect_average - corrected_average)\n    return int(n)\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((8 * x + 8) / 2) - 3 * (x + 6), 4 * x + 4 - 3 * x - 18)\n    correct_answer = solve(equation, x)\n\n    return correct_answer[x]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    for sol in solutions:\n        if all(age.is_real and age > 0 for age in sol):\n            return sol[carol]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_fraction = 2/5\n    purple_fraction = 1/8\n    \n    red = total_flowers * red_fraction\n    purple = total_flowers * purple_fraction\n\n    return int(red + purple)\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 10):  # Since we are splitting into different piles, start from 1\n        x2 = 10 - x1\n        if x1 != x2:  # The two piles must be different\n            ways += 1\n    return ways // 2  # We divide by 2 because the order of the piles doesn't matter\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Convert 1 liter to quarts (1 liter = 1.05668821 quarts)\n    liters_to_quarts = 2.5 * 1.05668821\n    # Capacity of one cup in quarts\n    cup_capacity_quarts = 0.5\n    # Calculate the number of cups\n    number_of_cups = liters_to_quarts / cup_capacity_quarts\n    # Round to the nearest integer\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_cm = 85 + 147        # sum lengths in cm\n    length_m = 2                # length in meters\n    total_length = length_cm/100 + length_m  # convert cm to m and add\n\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        ants = (64 - spiders * 8) // 6\n        if spiders * 8 + ants * 6 == 64:\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    vivian = 5 * justin + 8\n    \n    equation = Eq(vivian - justin, 48)\n    \n    solution = solve(equation, justin)\n    \n    vivian_coins = solution[justin] * 5 + 8\n    \n    return vivian_coins\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Since Jeremy needs to make sure to get 3 toy cars of the same colour,\n    # he must consider the worst-case scenario where he picks the cars in such\n    # a way that he gets as many different colors as possible before getting 3 of the same color.\n\n    # First, he could pick 2 red, 2 blue and 2 white without having 3 of the same color,\n    # that is a total of 2+2+2=6 cars.\n\n    # The next car he picks must be the 3rd car of some color.\n    # So, he needs to pick 1 more car to ensure 3 of the same color.\n\n    # Total number of cars he needs to pick is 6 (already picked) + 1 (to ensure 3 of a color)\n    ans = 6 + 1\n\n    return ans\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    return 7.5 * litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    # Starting with the final number of stamps\n    stamps_left = 34\n    # Adding the 2 stamps used to send the letter, reversing that action\n    stamps_left += 2\n    # Subtracting the 11 stamps bought, reversing that action\n    stamps_left -= 11\n    # Adding the 14 stamps given to her sister, reversing that action\n    stamps_left += 14\n    # The result is the initial number of stamps Hillary had\n    return stamps_left\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spend_ratio = 1 / 2\n    remaining_amount = initial_amount * (1 - spend_ratio)\n    return remaining_amount\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Original equation: x + y = 11.63\n    original_eq = Eq(x + y, 11.63)\n    \n    # Oliver's mistake equation: x + 0.1*y = 5.87\n    mistake_eq = Eq(x + 0.1*y, 5.87)\n    \n    # Solve the system of equations for x and y\n    solutions = solve((original_eq, mistake_eq), (x, y))\n    \n    # Calculate the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])\n    \n    # Multiply the difference by 100\n    return 100 * difference\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_trays = 40\n    total_eggs = eggs_per_tray * num_trays\n    return total_eggs\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b != a:\n                for c in range(10):\n                    if c not in [a, b]:\n                        for d in range(10):\n                            if d not in [a, b, c]:\n                                for e in range(10):\n                                    if e not in [a, b, c, d]:\n                                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                            return number\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let x be the height from which the ball was initially dropped.\n    # After the first bounce, the height would be (3 * x), since it bounces three times the original height.\n    # After the second bounce, the height would also be (3 * x), for the same reason.\n    # After the third bounce, the height now is (3 * x)/2, since it bounces half the previous height.\n    # Finally, after the fourth bounce, the ball reaches 36 meters. The fourth height is therefore (3 * x)/4.\n    # Now, we can write the equation for the fourth bounce height:\n    # (3 * x)/4 = 36\n    # Solving for x gives us the initial height.\n    \n    # From the equation (3 * x)/4 = 36, we multiply both sides by 4/3 to solve for x\n    x = (36 * 4) / 3\n    \n    return x\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99    # in pence\n    cost_full_cd = 899    # in pence (converted from pounds to pence)\n    \n    total_cost_individual = 12 * cost_per_song\n    savings = total_cost_individual - cost_full_cd\n    \n    return savings / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_permutations = set(permutations(digits, 2))\n    return len(two_digit_permutations)\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original_num = str(i)\n        reversed_num = original_num[::-1]\n        difference = abs(int(original_num) - int(reversed_num))\n        results.add(difference)\n    # We assume that the pattern to notice is the requested output.\n    ans = results\n    return ans\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # Smallest difference will occur when one number is the smallest possible and the other is the largest possible\n    # with the given digits. To get the smallest possible 5-digit number, put the smallest non-zero digit at the\n    # thousandth place and arrange the rest in ascending order.\n    # To get the largest possible 5-digit number, arrange the digits in descending order.\n\n    smallest_number = int(''.join(sorted('10234')))\n    largest_number = int(''.join(sorted('98765', reverse=True)))\n\n    difference = largest_number - smallest_number\n    \n    return difference\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    peter_after_sam_gives = peter + sam_gives\n    \n    # Peter gave 25% of his stickers to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = (sam - sam_gives) + peter_gives\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_after_peter_gives, peter_after_sam_gives + 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) // 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_weight = salt + water\n    concentration = (salt / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_to_pass = 15  # time in seconds\n    train_length = 450  # train length in meters\n\n    # speed = distance / time\n    speed = train_length / time_to_pass\n\n    return speed\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    result = 70 / 100 * 40\n    return result\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_one_pen = pen_cost // pencil_cost\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_bala = 2  # Ali and Bala themselves\n\n    total_people = people_in_front_of_ali + ali_bala + people_behind_bala\n    return total_people\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    import math\n\n    num = 1\n    for i in range(1, 7):\n        num = math.lcm(num, i)\n    \n    return num\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i*(i+1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n\n    total_water = initial_water + (jug_capacity * number_of_jugs)\n\n    return total_water\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Calculate the total number of cookies eaten over 7 days\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    \n    # Calculate the average number of cookies eaten per day\n    average_cookies = total_cookies / 7\n    \n    return average_cookies\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law of motion, the force exerted by the table on the book (normal force)\n    # is equal in magnitude and opposite in direction to the force of gravity on the book (weight).\n    # Since mass of book is given as a force (weight) of 20N, the magnitude of the force by the table is also 20N.\n    \n    ans = 20  # The force exerted by the table on the book is the same as the weight of the book, 20N.\n    return ans\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), \n                      (alan, bilal, chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income_total = 140000\n    tax_first_50k = 0.05 * 50000\n    tax_rest = (0.08 + T) * (income_total - 50000)\n    tax_paid = 15100\n    \n    equation = Eq(tax_first_50k + tax_rest, tax_paid)\n    solution_T = solve(equation, T)\n    \n    return solution_T[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n    # Total days worked together without any days off\n    total_days = 12\n\n    # The total amount of work done by Candy alone in 12 days\n    candy_work = candy_rate * total_days\n\n    # We introduce a variable for the number of days David takes off\n    david_days_off = symbols('david_days_off')\n\n    # Work done by David is reduced by the days he took off\n    david_work = david_rate * (total_days - david_days_off)\n\n    # The equation representing the total work done by Candy and David together to complete the job\n    equation = Eq(candy_work + david_work, 1)\n\n    # Solve the equation for the number of days David took off\n    days_off_solution = solve(equation, david_days_off)\n\n    # Return the number of days David took off\n    return days_off_solution[0]\n\nfrom sympy import symbols, Eq, solve\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum balls she could take out without having 6 of the same type:\n    # Take out 5 footballs, 5 basketballs, and 5 volleyballs (sum 5+5+5 = 15)\n    # One more ball must guarantee 6 of the same type, since there are only 3 types.\n    max_balls_without_six_of_same = (5 + 5 + 5)\n    \n    # The one extra ball she takes out will ensure she has 6 of the same type\n    ans = max_balls_without_six_of_same + 1\n\n    return ans\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36  # minutes\n    cakes = 6\n\n    time_per_cake = time_for_6_cakes / cakes  # minutes per cake\n\n    total_time_for_10_cakes = time_per_cake * 10  # minutes for 10 cakes\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    mass = 2  # kg\n    height = 5.0  # m\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    # Using the formula of potential energy (PE) and kinetic energy (KE)\n    # At the edge of the tabletop, the ball has only potential energy.\n    # At the floor, all the potential energy has been converted into kinetic energy.\n    PE_initial = mass * g * height\n    KE_final = PE_initial\n\n    # The kinetic energy formula is KE = 0.5 * m * v^2\n    # Solve for v: v = sqrt((2 * KE) / m)\n    v = sqrt((2 * KE_final) / mass)\n\n    return v\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fruits initially\n    x = symbols('x')\n\n    # 4/5 of the fruits were apples, so 1/5 were pears\n    apples = 4/5 * x\n    pears = x - apples\n\n    # After 3/4 of the fruits were removed, 1/4 were left\n    fruits_left = 1/4 * x\n\n    # There were 1/8 of the apples left, which means 1/8 of the apples is equal to the fruits left minus 30 pears\n    equation = Eq(1/8 * apples + 30, fruits_left)\n\n    # Solve for x\n    total_fruits = solve(equation, x)\n\n    return total_fruits[0]\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_stickers, pupils = symbols('total_stickers pupils')\n\n    equation1 = Eq(total_stickers - 13*pupils, 190)\n    equation2 = Eq(total_stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (total_stickers, pupils))\n\n    return solutions[total_stickers]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for number in range(10**16):  # Arbitrarily large range to find the smallest number\n        if sum(map(int, str(number))) == 20 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Since each child must get at least one orange,\n    # we give one to each initially which leaves us with 13-3=10 oranges.\n    oranges_left = 13 - 3\n    \n    # Now we need to find out how to distribute 10 oranges among 3 kids.\n    # This is equivalent to placing 2 dividers in the 10+2=12 positions,\n    # to divide the oranges among the 3 kids.\n    total_positions = oranges_left + 3 - 1\n\n    # Calculate the combinations of placing 2 dividers\n    # in 12 positions (to create 3 sections/children).\n    num_ways = comb(total_positions, 3 - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_choices = 2  # sandwiches, burgers\n    drink_choices = 3  # coffee, milk, tea\n    dessert_choices = 4  # cake, pudding, ice-cream, pie\n    \n    total_ways = food_choices * drink_choices * dessert_choices\n    \n    return total_ways\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or o == 0:  # Skip if leading digit is zero\n            continue\n        sasmo = s * 10000 + a * 1010 + m * 100 + o\n        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    half_water = total_water / 2\n    water_to_transfer = 48 - half_water\n    return water_to_transfer\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.50\n    change_received = 0.40\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the weights of each animal\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the system of equations for the weights of the animals\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # 8 elephants' weight by substituting the solution into the expression\n    pigs_per_elephant = Eq(elephant, solutions[elephant])\n    pigs_for_8_elephants = 8 * pigs_per_elephant.rhs / solutions[pig]\n\n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Given values\n    initial_amount = 2000  # initial loan amount\n    final_amount = 2519.42 # amount owed after 3 years\n    \n    # Symbol to represent the unknown interest rate\n    r = symbols('r')\n    \n    # Equation based on compound interest formula:\n    # final_amount = initial_amount * (1 + r)^3\n    equation = Eq(final_amount, initial_amount * (1 + r)**3)\n    \n    # Solve the equation to find the interest rate\n    interest_rate = solve(equation, r)\n    \n    # Return the interest rate (as decimal)\n    return interest_rate[0]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2 / 5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 0.18\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mango, price_lychee = symbols('price_mango price_lychee')\n    total_cases_mango = 24\n    total_cases_lychee = 20\n    total_cost = 1160\n\n    # Given that the price of each box of lychees is $6 less than 2 times the price of each box of mangoes\n    equation1 = Eq(price_lychee, 2 * price_mango - 6)\n    # Total cost equation: price per case of mango * number of cases + price per case of lychee * number of cases\n    equation2 = Eq(price_mango * total_cases_mango + price_lychee * total_cases_lychee, total_cost)\n\n    solutions = solve((equation1, equation2), (price_mango, price_lychee))\n\n    return solutions[price_lychee]\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n\n    # Ways to arrange 4 comics among themselves\n    comics_ways = factorial(4)\n\n    # Ways to arrange 6 fictions among themselves\n    fictions_ways = factorial(6)\n\n    # Treat the grouped comics and fictions as 2 items, and find the ways to arrange these 2 groups\n    groups_ways = factorial(2)\n\n    # Multiply them all to get the total arrangements\n    total_ways = comics_ways * fictions_ways * groups_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    result = 2.4 * 7 - (6.8 - 7/10)\n    return result\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # The condition implies that there will be 3 singing performances grouped with the 4 dancing ones\n    # as separators, which we can arrange in 4! ways. The remaining 3 singing performances can go\n    # into the 5 slots created by the 4 dancing performances (slots before, between, and after the\n    # dancing performances). These 3 singing performances can be arranged among themselves in 3! ways.\n    # The 5 slots can be chosen for the 3 singing performances in C(5, 3) ways.\n\n    # Calculate the arrangements for the grouped singing performances with the dancing ones\n    dances = factorial(4)\n    \n    # Calculate the arrangements for the separated singing performances\n    sings = factorial(3)\n    \n    # Calculate the combinations for the slots\n    slots = factorial(5) // (factorial(3) * factorial(5 - 3))\n    \n    # Total arrangements\n    total_arrangements = dances * sings * slots\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let's denote the number of correct answers Dora got as d.\n    # Justin then got d + 15 points more than Dora.\n    \n    # Since there are 10 questions and each correct answer gives 10 points,\n    # and a wrong answer loses 5 points, we can write the following equations:\n    #    Dora's points = 10d - 5(10 - d) = 15d - 50\n    # Justin's points = 10d - 5(10 - d) + 15 = 15d - 35\n    \n    # Together, they have 155 points:\n    # 15d - 50 + 15d - 35 = 155\n    # 30d - 85 = 155\n    # 30d = 240\n    # d = 240 / 30\n    # d = 8\n    \n    # Dora got 8 questions correct.\n    d = (155 + 85) / 30\n    return int(d)\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # 3 groups in Class A sold 12 candies each\n    # Let's assume there are y groups in Class B that sold x candies each\n    # The total number of candies sold by Class A is 3 * 12\n    # The total number of candies sold by Class B is y * x\n    # The average number of candies sold by the groups in both classes is 8\n\n    # Total groups is 3 (from A) + y (from B)\n    # The total candies sold by groups from both classes is: \n    # (3 * 12) + (y * x) = (3 + y) * 8\n    # Since each group in class B also sold 8 on average, we can simplify to:\n    # (3 * 12) + (y * 8) = (3 + y) * 8\n    # Solving the equation for y gives us the number of groups in Class B\n    # 36 + 8y = 24 + 8y\n    # The number of groups in class B does not affect the average, hence x = 8\n\n    return 8\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the number of hours Lee takes to finish the job alone\n    # Let N be the number of hours Nancy takes to finish the job alone\n    L, N = symbols('L N')\n\n    # When working together, they finish 1 job in 10 hours\n    # So their combined work rate is 1 job / 10 hours\n    # Lee's work rate is 1/L and Nancy's work rate is 1/N\n    # Together their work rate is 1/L + 1/N which should equal 1/10\n    equation1 = Eq(1/L + 1/N, 1/10)\n\n    # Lee works for 6 hours and then Nancy for 20 hours\n    # Lee completes 6/L portion of the job and Nancy completes 20/N portion\n    # Combined, they complete 1 job so 6/L + 20/N = 1\n    equation2 = Eq(6/L + 20/N, 1)\n\n    # Solve the system of equations for L and N\n    solutions = solve((equation1, equation2), (L, N))\n\n    # We are interested in the time it takes Nancy to finish the job alone\n    return solutions[N]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "from math import sqrt, sin, cos, radians\n\ndef solution():\n    # Initial conditions\n    v0 = 5  # initial velocity in m/s\n    theta = 45  # launch angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle to radians\n    theta_rad = radians(theta)\n\n    # Compute the horizontal and vertical components of the velocity\n    v0x = v0 * cos(theta_rad)  # horizontal component\n    v0y = v0 * sin(theta_rad)  # vertical component\n\n    # The time of flight until the arrow hits the ground\n    # Using the kinematic equation: y = v0y * t - (1/2) * g * t^2\n    # Initial height (h) is 30 meters, hence y = h - (1/2) * g * t^2\n    # Solving the quadratic equation for t when y = 0 (ground level):\n    # 0 = 30 - (1/2) * g * t^2 => 0 = - (1/2) * g * t^2 + 30\n    # => t^2 = 30 / (1/2) * g => t = sqrt(2 * 30 / g)\n    t_flight = sqrt(2 * 30 / g)\n\n    # The vertical velocity component at the time of impact\n    # Using the kinematic equation: vy = v0y - g * t\n    vy_impact = v0y - g * t_flight\n\n    # The total speed of the arrow at impact is the magnitude of the velocity vector components\n    v_impact = sqrt(v0x**2 + vy_impact**2)\n\n    return v_impact\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6\n    total_ratio = coffee_ratio + milk_ratio\n    \n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n    \n    return latte_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / remaining_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for i in range(20):\n        if i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percent_value = 45 / 100\n    total_value = 80\n    ans = percent_value * total_value\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavors = 7\n    doughnuts = 2\n    combinations = comb(flavors, doughnuts)\n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 9\n    c = 18\n    \n    # First find gcd of a and b\n    gcd_ab = gcd(a, b)\n    \n    # Then find gcd of result with c\n    ans = gcd(gcd_ab, c)\n    \n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    # Combination of choosing 2 people out of 10 for a handshake\n    handshakes = comb(num_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n\n    squares_per_side = large_square_side // small_square_side\n    total_squares = squares_per_side ** 2\n\n    return total_squares\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_milk_dark = Eq(white / milk, 3 / 7)\n    ratio_milk_dark = Eq(milk / dark, 7 / 5)\n    difference_dark_white = Eq(dark, white + 8)\n\n    solutions = solve((ratio_white_milk_dark, ratio_milk_dark, difference_dark_white), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the total number of students\n    total_students = symbols('total_students')\n    \n    # Equation based on the problem's statement\n    equation = Eq((total_students / 4) + 3 + (total_students - (total_students / 4) - 3) / 3 - 3 + 25, total_students)\n    \n    # Solve the equation for the total number of students\n    solutions = solve(equation, total_students)\n    \n    # We need the positive integer solution since the number of students can't be negative or non-integer\n    total_students_solution = next(solution for solution in solutions if solution.is_integer and solution > 0)\n\n    return total_students_solution\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # total green balls is unchanged, 10\n    green_balls = 10\n    # initial red balls is 5\n    red_balls = 5\n\n    # Let x be the number of red balls to be added\n    # Probability of getting a green ball is the number of green balls divided by the total number of balls\n    # P(green) = green_balls / (green_balls + red_balls + x) = 1/3\n\n    # Using algebra we solve for x\n    # 10 / (10 + 5 + x) = 1/3\n    # 30 = 15 + x\n    # x = 15\n    x = (green_balls * 3) - (green_balls + red_balls)\n\n    return x\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5  # Avril spends 5p\n    fraction_of_total = 1/4  # one-quarter of her money\n    total_money = spent / fraction_of_total  # calculate total money by dividing spent amount by the fraction\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_spent = 25 + 10\n    change = 50 - total_spent\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    ones_digit_32_pow_33 = (32 ** 33) % 10  # The ones digit of 32^33\n    ones_digit_22_pow_29 = (22 ** 29) % 10  # The ones digit of 22^29\n\n    # Calculate the ones digit of the difference\n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    page_count = 0\n    occurrences_of_six = 0\n\n    while occurrences_of_six < 18:\n        page_count += 1\n        occurrences_of_six += str(page_count).count('6')\n\n    return page_count - 1 if str(page_count).count('6') > 1 else page_count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    # Let x be the initial number of stickers that Peter had\n    # Then Sam had x + 40 stickers at the beginning\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Sam gave 20% of his stickers to Peter: 0.20 * (x + 40)\n    # Peter gave 25% of his stickers (after receiving 20% from Sam) to Sam: 0.25 * (x + 0.20 * (x + 40))\n\n    # The equation representing the final number of stickers Sam has more than Peter:\n    equation = Eq(((x + 40) - 0.20 * (x + 40) + 0.25 * (x + 0.20 * (x + 40))) - (x + 0.20 * (x + 40) - 0.25 * (x + 0.20 * (x + 40))), 96)\n    \n    # Solve the equation for x\n    peter_initial_stickers = solve(equation, x)\n\n    return peter_initial_stickers[0]\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Iterate through all possible values for each dice\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                # Check if dice values are different and sum to 12\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Since 4:9 is equal to 81:? (inverted ratio)\n    # We find the missing number by cross-multiplying\n    missing_number = (81 * 4) / 9\n\n    return missing_number\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2*i)**3 / (2*i * (2*i+1) * (2*i+2)) for i in range(1, 1007))\n    ans += 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    last_term = 39\n    difference = 21 - 15\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jumps += 1\n        height_after_jumps += jump_up\n\n        if height_after_jumps >= total_height:\n            break\n        \n        if jumps % 2 == 0:  # Slide down after every 2 jumps\n            height_after_jumps -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(7)\n    vowels = ['A', 'I', 'O']\n    vowel_permutations = factorial(len(vowels))\n    \n    for i in range(1, 6):\n        total_permutations -= factorial(i) * vowel_permutations * factorial(7 - i)\n\n    return total_permutations\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    incorrect_mark = -2\n    total_marks = 152\n\n    # Assume the number of correct answers is x\n    # Then the number of incorrect answers is total_questions - x\n    # The equation for the total score is then:\n    # correct_mark * x + incorrect_mark * (total_questions - x) = total_marks\n\n    # Rearrange the equation to find x:\n    # x = (total_marks - total_questions * incorrect_mark) / (correct_mark - incorrect_mark)\n    correct_answers = (total_marks - total_questions * incorrect_mark) / (correct_mark - incorrect_mark)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Each person needs to have an equal portion of the sausages.\n    # Each person should get 16/24 sausages. Since 16/24 reduces to 2/3, each person needs to have two-thirds of a sausage.\n    # When cutting sausages, to give each person 2/3 of a sausage, 3 people can share 2 sausages.\n    # Therefore, for 24 people, we need to have 24/3 groups, which is 8 groups.\n    # For each group of 3 people sharing 2 sausages, we need 1 cut.\n    # Hence for 8 such groups, we need 8 cuts in total.\n    return 8\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of water in Container B\n    x = symbols('x')\n\n    # Construct the equation\n    # If Container A contained 350 mL more water than Container B, its initial amount was x + 350 mL\n    # After 500 mL was spilled out of Container A, it contained (x + 350 - 500) mL\n    # Since Container B then had twice as much water as Container A,\n    # Container B's amount of water becomes 2 * (x + 350 - 500)\n    equation = Eq(x, 2 * (x + 350 - 500))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Container A's initial amount of water is x + 350\n    initial_amount_A = solution[0] + 350\n\n    return initial_amount_A\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n\n    # Find the greatest common divisor of the differences\n    ans = gcd(gcd(diff1, diff2), diff3)\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Wendy's and Vivien's ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(wendy, 2 * vivien)  # Wendy is twice as old as Vivien\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)  # Vivien was 1/4 as old as Wendy 10 years ago\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (wendy, vivien))\n\n    # Calculate Wendy's age in 5 years time\n    wendy_age_in_5_years = ages[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = (325 - 99) * 3\n\n    total_digits += pages_with_1_digit + pages_with_2_digits + pages_with_3_digits\n\n    return total_digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle spoke 3 sentences to each of the 5 other members she talked to.\n    # Each of the 5 other members would also speak 3 sentences back to Lovelle.\n    # Therefore, Lovelle exchanged 3 * 2 = 6 sentences with each of 5 members.\n    sentences_with_lovelle = 5 * 6\n    \n    # 12 members did not speak to Lovelle. \n    # However, there are no sentences exchanged with these members.\n    sentences_without_lovelle = 0\n    \n    # The number of team members is the people she spoke with,\n    # the people she didn't speak with, plus Lovelle herself.\n    team_members = 5 + 12 + 1\n\n    return team_members\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(9)\n    permutations_with_adjacent_ts = 0\n\n    for perm in permutations('STATISTIC'):\n        perm_str = ''.join(perm)\n        if 'TT' in perm_str:\n            permutations_with_adjacent_ts += 1\n\n    distinct_permutations_with_adjacent_ts = permutations_with_adjacent_ts // factorial(2) // factorial(2) // factorial(3)\n    \n    permutations_of_s = factorial(3)\n    permutations_of_t = factorial(3) // factorial(2)\n    \n    ans = total_permutations // permutations_of_s // permutations_of_t - distinct_permutations_with_adjacent_ts\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_needed = total_pieces / pieces_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_gums in range(1, 1000):  # Assume a reasonable upper limit for the search\n        gums_after_music = total_gums - 2  # After eating 2 in music lesson\n        shared_gums = gums_after_music // 3  # One third shared with friends\n        \n        # Ensuring that one third of the gums were shared and an integral number remains\n        if gums_after_music % 3 == 0:\n            remaining_gums = gums_after_music - shared_gums  # Remaining gums after sharing\n            \n            # Check if the remaining gums can be equally divided into 4 parts (4 lessons)\n            if remaining_gums % 4 == 0:\n                return total_gums  # Found the smallest number of fruit gums\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) / 8\n    return result\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The explorer needs to try each key for the first chest, each remaining key for the second chest,\n    # and so on. This uses the multiplication principle where for each choice of key for one chest,\n    # we have multiple choices for the next chest.\n\n    # For the first chest, the explorer has 9 options (as there are 9 different keys).\n    attempts_for_first_chest = 9\n\n    # For the second chest, the explorer has 8 options left (as one key has been used for the first chest).\n    attempts_for_second_chest = 8\n\n    # For the third chest, the explorer has 7 options left.\n    attempts_for_third_chest = 7\n\n    # For the fourth and last chest, the explorer has 6 options left.\n    attempts_for_fourth_chest = 6\n\n    # Total attempts needed by summing up the attempts for each chest.\n    total_attempts = (\n        attempts_for_first_chest +\n        attempts_for_second_chest +\n        attempts_for_third_chest +\n        attempts_for_fourth_chest\n    )\n\n    return total_attempts\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n    \n    return h_value[0]\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyzing the pattern:\n    # 2945, 3445, 3245, 3745, ?, 4045, 3845\n    # It seems like a number is added first, then subtracted, then added, and so on.\n    # We can find the difference between the numbers to understand the pattern:\n    # 3445 - 2945 = 500, 3245 - 3445 = -200\n    # The next number seems to be 500 more than the number 2 positions previous to it.\n    # Thus, we can predict the missing number by adding 500 to 3245.\n\n    missing_number = 3245 + 500\n    return missing_number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    largest_num = 0\n    for n in range(10, 100):\n        if n % 3 == 0 and n % 5 == 0:\n            largest_num = n\n    return largest_num\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour\n    # Then, (40 - x) will be the number of mushrooms gathered in the second hour\n    # According to the condition given in the problem, we have:\n    # x + 26 = 40 - x\n    # Solving for x gives us:\n    x = (40 - 26) // 2\n    # So, the number of mushrooms gathered in the second hour is:\n    second_hour_mushrooms = 40 - x\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 6\n    \n    final_value = initial_value * (depreciation_rate ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote W as the number of women and M as the number of men\n    W, M = symbols('W M')\n\n    # Equation 1 according to the number of people (there were 4 times as many women as men)\n    equation1 = Eq(W, 4 * M)\n    \n    # Equation 2 according to the number of mini cupcakes eaten\n    equation2 = Eq(2 * W + 5 * M, 182)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (W, M))\n\n    return solutions[W]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    num_coins = 11\n    diameter_coin = 1.85\n    # The total length includes the diameter of the first coin and the part of each subsequent coin that extends beyond the one before it.\n    # This part is the diameter for all the coins except the last one, which doesn't extend beyond.\n    total_length = diameter_coin + (num_coins - 1) * diameter_coin\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    value = (3/12) * 20\n    return value\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    \n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_ants = symbols('initial_ants')\n\n    equation = Eq(initial_ants - (initial_ants * 3/4) - ((initial_ants - (initial_ants * 3/4)) * 2/5) + 185, 2 * initial_ants)\n\n    ants_at_first = solve(equation, initial_ants)\n\n    return ants_at_first[0]\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    \n    # Since the table is circular, we consider one person's position as fixed to avoid circular permutations\n    # Therefore, we only need to arrange the remaining 7 people\n    ans = factorial(7)\n    \n    return ans\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_spent = book_price * (books_day1 + books_day2)\n\n    return total_spent\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8  # Since we have 7 numbers (1 to 49) and we need the next one, so n = 8\n    next_number = n ** 2  # The pattern is perfect squares starting from 1^2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    current = 1\n    for i in range(1, 2022):\n        next_num = current * 2 + 4\n        if next_num >= 100:\n            next_num %= 100\n        current = next_num\n    return current\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d = symbols('a d')\n\n    # The sum of an arithmetic progression is given by S = n/2 * (2a + (n-1)d)\n    # where n is the number of terms, a is the first term, and d is the common difference\n    \n    # Sum of the first four terms: (4/2)*(2a + (4-1)d) = 2*(2a+3d)\n    sum_first_four = 2 * (2 * a + 3 * d)\n    \n    # Sum of the last four terms: (4/2)*(2*(a+4d) + (4-1)d) = 2*(2a+11d)\n    sum_last_four = 2 * (2 * (a + 4 * d) + 3 * d)\n\n    # According to the problem, sum of the first four terms is 32 less than the sum of the last four terms\n    equation = Eq(sum_first_four, sum_last_four - 32)\n\n    # Solve the equation for common difference d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41):\n        if isprime(a):\n            for b in range(2, 41):\n                if isprime(b) and (3 * a + 7 * b) == 41:\n                    return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    # The least common multiple (LCM) gives us the frequency in minutes at which both lights flash together\n    red_flash_rate = 4\n    green_flash_rate = 6\n    minutes_in_hour = 60\n\n    # Calculate the LCM of the two flash rates\n    combined_flash_rate_lcm = lcm(red_flash_rate, green_flash_rate)\n\n    # Calculate how many times they flash together in one hour\n    # We add 1 because we count the first instant as well\n    flashes_together_in_hour = (minutes_in_hour // combined_flash_rate_lcm) + 1\n\n    return flashes_together_in_hour\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    ans = solve(equation, n)\n    \n    return ans\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    num_ways = factorial(len(letters))\n    return num_ways\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = (120 / (1 - (3/5)))\n    water_volume_per_bottle = total_volume_per_bottle - 120\n    water_volume_for_six_bottles = water_volume_per_bottle * 6\n    return water_volume_for_six_bottles\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    \n    # Calculate cost price based on the profit made\n    cost_price = selling_price / (1 + (profit_percentage / 100))\n    \n    # New profit is given as $5000\n    new_profit = 5000\n    \n    # Calculate new selling price\n    new_selling_price = cost_price + new_profit\n    \n    # Calculate new profit percentage\n    new_profit_percentage = (new_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        if int(p[1]) % 2 == 0:\n            s = p[0] + p[1] + p[2] + p[3] + p[4]\n            t = int(p[0]) * int(p[1]) * int(p[2]) * int(p[3]) * int(p[4])\n            if s == str(t):\n                return t\n                \nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Time taken by each person to cross the bridge\n    eddie = 1\n    jack = 2\n    rose = 5\n    mary = 10\n    # Step 1: Eddie and Jack cross first (2 minutes)\n    # Step 2: Eddie goes back (1 minute)\n    # Step 3: Rose and Mary cross (10 minutes)\n    # Step 4: Jack goes back (2 minutes)\n    # Step 5: Eddie and Jack cross again (2 minutes)\n    # Total time accumulates each step\n    total_time = eddie + jack + eddie + mary + jack\n    \n    return total_time\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10  # in minutes\n    simon_run_speed = 2 * simon_speed\n    simon_walk_distance = simon_speed * time_walked\n    friend_walk_distance = friend_speed * time_walked\n    time_to_return = simon_walk_distance / simon_run_speed\n    friend_walks_during_return = friend_speed * time_to_return\n    total_distance_between = simon_walk_distance + friend_walk_distance + friend_walks_during_return\n    \n    return total_distance_between\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = 2 + 2 + 2  # Total identical items of each kind\n    total_green_ball = 1  # Total green balls\n    total_items = total_bells_stars_balls + total_green_ball\n    \n    # Total permutations (factorial of total items)\n    total_permutations = factorial(total_items)\n    \n    # Since the bells, stars, and red balls are identical, we divide the total permutations by \n    # the factorial of the number of each identical item to account for indistinguishable permutations\n    permutations_bells = factorial(2)  # Permutations for the two identical bells\n    permutations_stars = factorial(2)  # Permutations for the two identical stars\n    permutations_red_balls = factorial(2)  # Permutations for the two identical red balls\n    \n    # Calculate the final answer\n    ans = total_permutations // (permutations_bells * permutations_stars * permutations_red_balls)\n    \n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for a in range(0, 10):\n        for b in range(0, 10):\n            number = int(\"2{}{}335\".format(a, b))\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # litres\n    container_fraction = 0.25\n    cup_volume = 0.150  # 150ml in litres\n    num_cups = 14\n\n    container_volume = initial_volume * container_fraction\n    cups_total_volume = cup_volume * num_cups\n\n    water_left = initial_volume - container_volume - cups_total_volume\n\n    return water_left\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 7 * (100 // 7 - 1)\n    return n\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n    # This problem is an example of derangement, also known as a permutation where no element appears in its original position.\n    # A derangement of n objects is denoted by !n or D(n).\n    # The formula for calculating a derangement is given by:\n    # !n = (n - 1) * (![n - 1] + ![n - 2])\n    # Base cases !1 = 0, !2 = 1\n    # Instead of recursively calculating derangements, we'll use a loop for better performance.\n\n    n = 7  # Number of friends\n    derangements = [0] * (n + 1)  # Initialize a list to store the derangements\n    derangements[1] = 0  # Base case\n    derangements[2] = 1  # Base case\n\n    for i in range(3, n + 1):\n        derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2])\n\n    return derangements[n]\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Determine the rate at which Pip bakes bread (loaves per minute)\n    pip_rate = 5 / 20\n    \n    # Determine the rate at which Bud bakes bread (loaves per minute)\n    bud_rate = 3 / 15\n\n    # Calculate the total number of loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * 40\n    \n    # Calculate the total number of loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * 40\n\n    # Sum the total number of loaves baked by both\n    total_loaves = pip_loaves + bud_loaves\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let p be the number of pages she can write per day at the original rate\n    # Let t be the total number of pages she needs to finish\n    # Therefore, at original rate, she can finish t pages in 8 days, t = 8 * p\n    # If she writes 2 more pages per day, she can finish in 8 - 2 = 6 days, t = 6 * (p + 2)\n    # From both equations we can say: 8 * p = 6 * (p + 2)\n    \n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Define the variable p (pages per day)\n    p = Symbol('p')\n    \n    # Define the equations based on the problem statement\n    equation = 8 * p - 6 * (p + 2)\n    \n    # Solve the equation to find the value of p\n    pages_per_day = solve(equation, p)[0]\n    \n    # Calculate the total number of pages\n    total_pages = 8 * pages_per_day\n    \n    # The total number of pages is the answer\n    return total_pages\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Since the house value increased by 10% and was £11,000 the last year,\n    # calculate the value of the house the last year.\n    value_last_year = 11000\n    \n    # Now find the original price of the house. If the increased value is 110%,\n    # then original price is 100% which can be calculated as:\n    original_price = value_last_year / 1.10\n\n    # This year, the house lost 10% of its value,\n    # so the current value is 90% of the value last year.\n    current_value = value_last_year * 0.90\n\n    # Now, calculate the amount of profit or loss by comparing\n    # the current value with the original price.\n    profit_or_loss = current_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To guarantee a pair of white socks, Yohan may take out all red and black socks first.\n    # Number of red socks to potentially take: 10\n    # Number of black socks to potentially take: 10\n    # After taking out all red and black socks, the next two socks would definitely form a white pair.\n    max_socks = 10 + 10 + 2\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    ans = (12 * 'a' / 4) + (2 * 'a' * 5)\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    ans = simplify(expr)\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the total number of cookies\n    total_cookies = symbols('total_cookies')\n    \n    # Equation representing Richard's total remaining cookies\n    equation = Eq((3/8 + 1/6) * total_cookies + 33, total_cookies)\n    \n    # Solve the equation to find the number of cookies he had originally\n    original_cookies = solve(equation, total_cookies)\n    \n    # Return the result as an integer\n    return original_cookies[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n    sequence.sort()\n    mid = len(sequence) // 2\n\n    if len(sequence) % 2 == 0:\n        median = (sequence[mid - 1] + sequence[mid]) / 2\n    else:\n        median = sequence[mid]\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jemma_number = symbols('jemma_number')\n    equation = Eq((jemma_number + 3) * 5, 35)\n    solution = solve(equation, jemma_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Choosing 2020 because it is a leap year just for consistency\n    end_date = datetime(2020, 6, 7)\n    sunday_count = 0\n\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # In datetime module, weekday() returns 6 for Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n\n    num_buckets = barrel_volume // bucket_volume\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    red = Symbol('red')\n    white = Symbol('white')\n\n    pip = Symbol('pip')\n    bud = Symbol('bud')\n\n    # Initial ratio: red/white = 3/2\n    equation1 = 3 * white - 2 * red\n\n    # After Pip added red balls: (red + pip)/white = 5/3\n    equation2 = 5 * white - 3 * (red + pip)\n\n    # After Bud added white balls: red/(white + bud) = 5/4\n    equation3 = 4 * red - 5 * (white + bud)\n\n    # Bud added 100 more white balls than red balls by Pip\n    equation4 = bud - (pip + 100)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (red, white, pip, bud))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    initial_companies = 4\n    initial_days = 5\n    initial_length = 900\n    required_length = 5400\n    new_companies = 6\n    \n    # Calculate work rate for initial scenario\n    initial_work_rate = initial_companies / initial_days\n\n    # Total work needed for the new scenario\n    total_work = required_length / initial_length\n    \n    # Work rate is now increased due to more companies\n    new_work_rate = (initial_work_rate / initial_companies) * new_companies\n\n    # Calculate how many days needed with the new work rate\n    required_days = total_work / new_work_rate\n\n    return required_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy_price1 = 10\n    sell_price1 = 20\n    buy_price2 = 30\n    sell_price2 = 40\n\n    profit1 = sell_price1 - buy_price1\n    profit2 = sell_price2 - buy_price2\n\n    total_profit = profit1 + profit2\n\n    return total_profit\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # Divisibility rule for 3: The sum of the digits must be divisible by 3\n    # Divisibility rule for 4: The last two digits of the number must be divisible by 4\n\n    for K in range(10):\n        num = int(f'5{K}27{K}')\n        if sum(int(digit) for digit in str(num)) % 3 == 0 and int(str(num)[-2:]) % 4 == 0:\n            return K\n    \nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, brownies = symbols('cookies brownies')\n    \n    # Original ratio of cookies to brownies is 4:3\n    original_ratio = Eq(4 * brownies, 3 * cookies)\n    \n    # After giving away 6 brownies, the ratio of cookies to brownies becomes 12:7\n    new_ratio = Eq((12 * (brownies - 6)), (7 * cookies))\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (cookies, brownies))\n    \n    # Calculate total number of cookies and brownies baked\n    total = solutions[cookies] + solutions[brownies]\n    \n    return total\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    cost_per_ticket = 93 / 6\n    tickets_claire_bought = 124 / cost_per_ticket\n    return int(tickets_claire_bought)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25\n    common_difference = 31 - 28\n    n = 10\n    \n    first_term = nth_term - (n - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    player_one_total = 23\n    highest_card_player_two = 0\n    all_cards = set(range(1, 9))\n    \n    for combo in itertools.combinations(all_cards, 4):\n        if sum(combo) == player_one_total:\n            remaining_cards = all_cards - set(combo)\n            highest_card_player_two = max(highest_card_player_two, max(remaining_cards))\n            \n    return highest_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs, so 18 shoes\n    time_per_shoe = 2  # It takes 2 minutes to clean one shoe\n    cobblers = 2  # There are 2 cobblers\n\n    # Since each cobbler is working simultaneously, the maximum number of shoes\n    # that can be cleaned at once is equal to the number of cobblers.\n    # The time taken to clean all the shoes will be the total number of shoes\n    # divided by the number of shoes that can be cleaned at once, then multiplied\n    # by the time taken to clean one shoe.\n    shortest_time = (total_shoes / cobblers) * time_per_shoe\n\n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    luna_gives = luna_dumplings - dumplings_each\n    \n    return luna_gives\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    score = 168\n    unattempted = 3\n    correct_score = 4\n\n    # Total attempted questions\n    attempted_questions = total_questions - unattempted\n\n    # Since each wrong answer deducts 1 mark and each correct answer adds 4 marks,\n    # Let x be the number of correct answers.\n    # Then the number of wrong answers would be (attempted_questions - x).\n    # The total score would be 4x - (attempted_questions - x).\n    # Setting up the equation: 4x - (attempted_questions - x) = score\n    # Simplifying: 5x - attempted_questions = score\n\n    # Solve for x\n    correct_answers = (score + attempted_questions) // correct_score\n\n    return correct_answers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # packs of markers count\n    packs = [6, 8, 9, 15]\n\n    # find least common multiple of pack sizes to ensure an equal number of each pack\n    lcm_packs = lcm(*packs)\n\n    # since we want at least 1000 markers, find the smallest multiple of lcm_packs that is >= 1000\n    num_packs = (1000 // lcm_packs) + (1000 % lcm_packs > 0)\n\n    # total number of markers\n    min_markers = num_packs * lcm_packs\n\n    return min_markers\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    # We need to find unique digits for B, C, D, E such that CBCD + CDBC = BDEC\n    for perm in permutations('0123456789', 4):\n        B, C, D, E = perm\n        CBCD = int(C + B + C + D)\n        CDBC = int(C + D + B + C)\n        BDEC = int(B + D + E + C)\n\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total expenditure for each period\n    jan_to_mar = 450 * 3  # January to March, 3 months\n    apr_to_jul = 350 * 4  # April to July, 4 months\n    aug_to_oct = 1250     # August to October, total given\n    nov_to_dec = 400 * 2  # November to December, 2 months\n    \n    # Total expenditure for the year\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Average expenditure per month\n    average_spend = total_spend / 12\n    \n    return average_spend\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHALLENGE')\n    vowels = 'AEE'\n    consonants = 'CHLLNG'\n\n    # Treat the vowels as a single unit since they must be together.\n    units = len(consonants) + 1  # The one is for the vowel group\n\n    # Calculate the permutations for the units\n    unit_permutations = factorial(units)\n\n    # Calculate the permutations for the vowels\n    vowel_permutations = factorial(len(vowels)) // factorial(vowels.count('E'))\n\n    # The total number of ways to arrange the letters is the product of\n    # the permutations of the units and the permutations of the vowels\n    return unit_permutations * vowel_permutations\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_sales / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    quotient = remainder\n    divisor = quotient\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for cars, bikes, and lorries\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # Given equations based on the problem statement\n    equation1 = Eq(cars, (4/3) * bikes)\n    equation2 = Eq(bikes, lorries + 1/4 * lorries)\n\n    # Initialize a list to hold solutions that satisfy the even number condition\n    solutions = []\n\n    # Solve for each possible total number of vehicles (index represents lorries)\n    for lorries_count in range(1, 100):\n        totals = solve((equation1, equation2, Eq(lorries, lorries_count)), (cars, bikes, lorries))\n        cars_count, bikes_count, lorries_count = totals[cars], totals[bikes], totals[lorries]\n        # Add to solution if less than 100 and total is an even number\n        if cars_count + bikes_count + lorries_count < 100 and (cars_count + bikes_count + lorries_count) % 2 == 0:\n            solutions.append(totals)\n\n    return solutions[0]  # Return the first valid solution set\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        cube_root = round((245 * p) ** (1/3))\n        if cube_root ** 3 == 245 * p:\n            return p\n        p += 1\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days = total_pages / pages_per_day\n\n    return days\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    # Number of visitors that join the line each minute\n    join_rate = 10\n    # Number of visitors each entrance can check-in per minute\n    check_in_rate_per_entrance = 25\n\n    # With one entrance, calculate the initial number of visitors in line\n    initial_visitors = 16 * join_rate\n\n    # Now calculate the time with two entrances\n    check_in_rate_two_entrances = 2 * check_in_rate_per_entrance\n    time_with_two_entrances = initial_visitors / check_in_rate_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    # Direct calculation without factoring\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    \n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # '3' repeats in the decimal part of 1/3\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    subtracted_number = final_number - 12\n    original_number = subtracted_number / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(goals)\n    num_games = len(goals)\n    mean_goals = total_goals / num_games\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    lemons = symbols('lemons')\n\n    # Initial ratio of oranges to lemons\n    initial_ratio = Eq(oranges/lemons, 3/5)\n\n    # Ratio after 48 oranges were sold\n    new_ratio = Eq((oranges - 48)/lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    bike_price = 80\n    discount_percentage = 10\n    discount_amount = bike_price * (discount_percentage / 100)\n    christmas_price = bike_price - discount_amount\n    return christmas_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    num_burgers = 2\n    num_sides = 3\n    num_drinks = 5\n\n    ans = num_burgers * num_sides * num_drinks\n\n    return ans\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Since each student can choose 1, 2, or 3 types of fruits,\n    # the total combinations of choices are as follows:\n    # Choose 1 out of 3 fruits: C(3, 1) = 3\n    # Choose 2 out of 3 fruits: C(3, 2) = 3\n    # Choose all 3 fruits: C(3, 3) = 1\n    # Total number of different choices a student can make = 3 + 3 + 1 = 7\n    \n    # By the pigeonhole principle, if you have 'n' pigeonholes and 'm' pigeons,\n    # and if m > n, then at least one pigeonhole must contain more than one pigeon.\n    \n    # Thus, to guarantee that two students choose the same combination of fruits,\n    # we need one more student than there are combinations.\n    total_combinations = 7\n    students_needed = total_combinations + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # Amount spent by Avril\n    fraction = 1/4  # One-quarter\n\n    # Calculate the initial amount by dividing the amount spent by the fraction\n    initial_amount = spent / fraction\n\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Legs for ducks, parrots, and rabbit\n    legs_ducks = 3 * 2  # Each duck has 2 legs\n    legs_parrots = 2 * 2  # Each parrot has 2 legs\n    legs_rabbit = 1 * 4  # The rabbit has 4 legs\n\n    # Total legs without cats\n    total_legs_without_cats = legs_ducks + legs_parrots + legs_rabbit\n\n    # Legs for cats\n    legs_cats = 32 - total_legs_without_cats  # Total legs minus legs of other animals\n\n    # Cats have 4 legs each\n    num_cats = legs_cats // 4\n\n    return num_cats\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    import math\n    \n    num_students_A = 45\n    num_students_B = 75\n    num_students_C = 210\n    \n    gcd_AB = math.gcd(num_students_A, num_students_B)\n    gcd_ABC = math.gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(x-1), 9-2*(x+1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    \n    # Equation 1: Father is 33 years older than Judy\n    equation1 = Eq(father_age, judy_age + 33)\n    \n    # Equation 2: Sum of their current ages is 63\n    equation2 = Eq(judy_age + father_age, 63)\n    \n    # Solve for Judy and Father's age\n    ages = solve((equation1, equation2), (judy_age, father_age))\n    \n    judy_current_age = ages[judy_age]\n    father_current_age = ages[father_age]\n    \n    # Equation 3: Father's age was four times Judy's age 'years_ago' years ago\n    equation3 = Eq(father_current_age - years_ago, 4 * (judy_current_age - years_ago))\n    \n    # Solve for years_ago\n    years_ago_solution = solve((equation3), (years_ago))\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 2**3 * 3**2 * 5\n    ans = lcm\n    while ans < 1000:\n        ans += lcm\n    return ans\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    older_current_age, younger_current_age = symbols('older_current_age younger_current_age')\n\n    # Set up the equations described in the problem\n    eq1 = Eq(older_current_age - younger_current_age, 12) # when older was as young as the younger is now\n    eq2 = Eq(younger_current_age - (27 - older_current_age), 12) # when younger will be as old as the older is now\n\n    # Solve the equations\n    sol = solve((eq1, eq2), (older_current_age, younger_current_age))\n\n    # Retrieve the current age of the older brother\n    older_current_age_solution = sol[older_current_age]\n\n    return older_current_age_solution\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of rooms\n    x = symbols('x')\n\n    # When there are 4 people in each room, 40 students don't have dormitories, so the total number of students is 4x + 40\n    # When there are 6 people in each room, 24 beds will be vacated, so the total number of students is 6x - 24\n    # These two must be equal because it's the total count of students in either scenario.\n    equation = Eq(4 * x + 40, 6 * x - 24)\n\n    # Solve for x\n    num_rooms = solve(equation, x)\n\n    return num_rooms[0]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_ratio = 3 / 5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_ratio\n    remaining_sweets = total_sweets - sweets_eaten\n    return remaining_sweets\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n\n    years_until_jane_is_15 = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    n10 = 23\n    n15 = 38\n    position_difference = 15 - 10\n    value_difference = n15 - n10\n\n    # Calculate common difference\n    common_difference = value_difference / position_difference\n\n    # Now find the value of the 102nd term\n    n102 = n10 + common_difference * (102 - 10)\n\n    return n102\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n\n    solutions = solve(equation)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    # Marked price is 20% above the cost price\n    marked_price = cost_price * 1.20\n    \n    # The selling price is 80% of the marked price\n    selling_price = marked_price * 0.80\n    \n    # The loss is given by the cost price minus the selling price\n    loss = cost_price - selling_price\n    \n    # The loss was given as $40, hence we have the equation\n    equation = Eq(loss, 40)\n    \n    # Solving the equation for cost_price\n    cost_price_value = solve(equation, cost_price)\n    \n    # We return the value of the cost price\n    return cost_price_value[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    ans = (7 + 3) * 11 - (7 + (3 * 11))\n    return ans\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x for Xuanrui, y for Yaokuan\n    total_markers = 708\n\n    # Equation representing the initial total\n    equation_initial_total = Eq(x + y, total_markers)\n    \n    # Equation after Xuanrui gave away 532 markers and Yaokuan sold (3/7) of his markers\n    equation_after_giving_away = Eq(x - 532, y - (3/7)*y)\n    \n    # Solve the system of equations\n    solutions = solve((equation_initial_total, equation_after_giving_away), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n    discount_amount = usual_price * (discount_percentage / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # rate of filling the tank for both taps together\n    rate_xy = 1 / 6\n    # rate of filling the tank for tap X alone\n    rate_x = 1 / 10\n    # rate of filling the tank for tap Y alone (rate_y)\n    # we need to find rate_y such that rate_x + rate_y = rate_xy\n    rate_y = rate_xy - rate_x\n    # calculate the time taken for tap Y to fill the tank alone\n    time_y = 1 / rate_y\n    return time_y\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n\n    # Let x represent the number of correct answers\n    # Therefore, total_questions - x represents the number of incorrect answers\n    # The equation modeling the situation is: 6x - 2(total_questions - x) = 44\n\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(points_correct * x + points_incorrect * (total_questions - x), 44)\n    correct_answers = solve(equation, x)[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([1, 1*2, 1*2*3, 1*2*3*4, 1*2*3*4*5, 1*2*3*4*5*6, 1*2*3*4*5*6*7, 1*2*3*4*5*6*7*8])\n    return factorial_sum % 100\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_A = 300 * 0.20\n    sugar_B = 300 * 0.30\n    \n    # Calculate the total volume of the mixture\n    total_volume = 300 + 300\n    \n    # Calculate the total amount of sugar in the mixture\n    total_sugar = sugar_A + sugar_B\n    \n    # Calculate the sugar concentration of the mixture\n    concentration = (total_sugar / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marbles Ahmad and Ryan have\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Equation representing the total number of marbles\n    total_eq = Eq(ahmad + ryan, 1442)\n\n    # Equation representing the number of marbles Ahmad has in terms of Ryan's\n    relationship_eq = Eq(ahmad, 6 * ryan)\n\n    # Solving the equations to find the number of marbles each has\n    solutions = solve((total_eq, relationship_eq), (ahmad, ryan))\n\n    # Calculate the number of marbles Ahmad must give to Ryan for them to have equal amounts\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n\n    # Return the number of marbles to give\n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    result = 3/10 + 1/100 + 7/1000\n    return result\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes and y be the number of $10-notes\n    # Theia had 95 notes altogether at first\n    # So, the first equation: x + y = 95 (1)\n\n    # When she exchanged all of her $10-notes for five $2-notes each,\n    # she got an additional 4 * y $2-notes (since each $10-note becomes five $2-notes which is four more than the one $10-note)\n    # She found that she had 175 $2-notes in total\n    # The second equation: x + 4 * y = 175 (2)\n\n    # We solve this system of linear equations to find x and y\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 95)\n    equation2 = Eq(x + 4 * y, 175)\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap = 1\n\n    # Deduct the head of the train length and the gap immediately following it\n    remaining_length = total_length - head_length - gap\n\n    # Each carriage plus the gap takes up a fixed amount of length\n    carriage_total_length = carriage_length + gap\n\n    # Calculate the number of carriages by dividing the remaining length by the\n    # length that each carriage plus the gap takes\n    number_of_carriages = remaining_length // carriage_total_length\n\n    # Including the head of the train\n    total_carriages = number_of_carriages + 1\n\n    return total_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # digit '8' in the ones place\n    ones_place_8 = 28 // 10 * 1 + 1  # done for each set of 10, plus 1 for the last '8'\n\n    # digit '8' in the tens place, for each '8x', there are 10 possibilities in the ones place (0 to 9)\n    tens_place_8 = (2 + 1) * 10  # since '8x' appears in 80-89, and also 180-189\n\n    # digit '8' in the hundreds place, should be counted as well (288)\n    hundreds_place_8 = 1  # only one possibility because we only go as high as 288\n\n    # total count of digit '8'\n    total_8 = ones_place_8 + tens_place_8 + hundreds_place_8\n\n    return total_8\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    # Given that ▲ + ▲ = ■ (delta + delta = square)\n    equation1 = Eq(delta + delta, square)\n    \n    # ■ + ▲ = ● (square + delta = circle)\n    equation2 = Eq(square + delta, circle)\n    \n    # ♦ = ● + ■ + ▲ (diamond = circle + square + delta)\n    equation3 = Eq(diamond, circle + square + delta)\n\n    solutions = solve((equation1, equation2, equation3), (delta, square, circle, diamond))\n\n    return solutions[diamond] / solutions[delta]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    # Suppose Shenjia answered 'x' questions correctly and 'y' questions wrongly.\n    # We have two equations based on the problem statement:\n    #   2*x - y = 82 (total score equation)\n    #   x + y = 50 (total questions equation)\n    # Also, Shenjia claimed she answered '32' questions correctly, so let's check if that's possible\n    # For x = 32:\n    x = 32\n    # Now calculate the number of questions answered wrongly using the total questions equation\n    y = 50 - x\n    # Calculate the score with these guessed values\n    score = 2*x - y\n    # If the score matches Shenjia's actual score, her statement is correct; otherwise, it's not.\n    if score == 82:\n        correct_questions = x\n    else:\n        # If the statement was not correct, solve the equations above to find the actual number of questions answered correctly.\n        # We can rearrange the equations to express 'y' in terms of 'x' or vice versa, and then substitute back into the other equation.\n        # Rearranging the total score equation: y = 2x - 82\n        # Substituting into the total questions equation: x + (2x - 82) = 50\n        # This simplifies to 3x - 82 = 50, so 3x = 132, and thus x = 132 / 3\n        x = (82 + 50) / 3\n        correct_questions = x\n\n    return int(correct_questions)\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0\n    while True:\n        if (24*x - 8) % 25 == 0:  # find y such that it is a whole number\n            y = (24*x - 8) // 25\n            if y >= 0:\n                break\n        x += 1\n    return x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):  # assuming x is a nonzero digit\n        for y in range(10): # y can be any digit including zero\n            A = int(f\"{x}{y}\")  # A is the two-digit number xy\n            B = int(f\"{2}{x}{y}\")  # B is the three-digit number 2xy\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        ans = \"2.5kg bag of carrots\"\n    else:\n        ans = \"4kg bag of carrots\"\n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S = 1 / sum(1 / i for i in range(2001, 2011))\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    num_books = 5\n    total_cost = book_price * num_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    total_amount = 1\n    fraction1 = 3/4\n    fraction2 = 2/5\n\n    amount = total_amount * fraction1 * fraction2\n\n    return amount\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_three_quarters_full = 350\n    mass_one_quarter_full = 250\n    mass_half_full = 2 * mass_one_quarter_full - mass_three_quarters_full\n\n    mass_empty = mass_one_quarter_full - mass_half_full\n\n    return mass_empty\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    \n    # number of intervals is one less than the number of trees\n    # since both ends will have trees\n    trees_per_side = (road_length // interval) + 1\n    \n    # trees are planted on both sides of the road\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    distance_red = 5\n    distance_blue = 10\n    distance_green = 12\n\n    ans = lcm(distance_red, distance_blue, distance_green)\n    \n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    # Total length is the sum of lengths of all buses and distances between them\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_per_block = 182 / 28\n    height_for_42_blocks = height_per_block * 42\n    return height_for_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # The wrong calculation performed by Aiden\n    wrong_eq = Eq((x / 4) - 25, 2021)\n    # Solve for the original number\n    original_number = solve(wrong_eq, x)[0]\n    # Perform the correct calculation\n    correct_answer = (original_number * 4) + 25\n    \n    return correct_answer\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # Divisibility rule for 9: A number is divisible by 9 if the sum of its digits is divisible by 9\n    for e in range(10):\n        num = 20302 + e * 1010  # Construct the number with E in the tens and thousands place\n        if num % 9 == 0:       # Check the divisibility by 9\n            return e           # Return the value of E since it's the answer\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Since x:5 = y:3, we can express y as a function of x by cross-multiplication\n    # x/5 = y/3\n    # y = (3/5) * x\n    \n    # Now to find the value of y when x = 5\n    x = 5\n    y = (3/5) * x\n    \n    return y\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above the cost\n    discount_price = selling_price * 0.90  # 10% Christmas discount\n\n    profit = discount_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        # Start checking from the smallest square number greater than 5\n        students_original = m**2 + 5\n        n = int((students_original + 18)**0.5)\n        # Check if after adding 18 students it becomes a perfect square\n        if n**2 == students_original + 18:\n            break\n        m += 1\n    return students_original\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Assuming that the sequence follows Fibonacci-like sequence rules\n    # Let's represent the sequence as a, b, a+b, a+2b, 2a+3b, 3a+5b, ...\n    # It is given that the fourth number is 6 and the sixth number is 15\n    # Let's solve for a and b\n    \n    # From the pattern we know:\n    # a + 2b = 6 (fourth number)\n    # 3a + 5b = 15 (sixth number)\n    \n    # Solving the two linear equations\n    a_plus_2b = 6\n    _3a_plus_5b = 15\n    \n    # From the first equation: a = 6 - 2b\n    # Substitute a in the second equation\n    # 3 * (6 - 2b) + 5b = 15 => 18 - 6b + 5b = 15 => -b = -3 => b = 3\n    # Now we find a: a = 6 - 2 * 3 => a = 0\n    \n    # Now we have a = 0 and b = 3\n    # The seventh number in the sequence is 3a + 8b (from the Fibonacci pattern)\n    seventh_number = 3 * 0 + 8 * 3\n    \n    return seventh_number\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    ans = 9 + 11 + 8 + 12 + 7 + 13 + 6 + 14 + 5 + 15\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 15\n    C_students = 18\n\n    group_size = gcd(gcd(A_students, B_students), C_students)\n\n    return group_size\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('17:00', '%H:%M')  # Starting at 5 PM\n    badminton_duration = timedelta(minutes=45)  # Badminton for 45 minutes\n    jogging_duration = timedelta(minutes=30)  # Jogging for 30 minutes\n\n    end_time = start_time + badminton_duration + jogging_duration\n    formatted_end_time = end_time.strftime('%H:%M')\n\n    return formatted_end_time\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    num_numbers = 3\n\n    original_sum = original_average * num_numbers\n    new_sum = new_average * num_numbers\n\n    changed_number = 16\n    \n    difference_in_sum = original_sum - new_sum\n    original_number = changed_number + difference_in_sum\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 3 and number % 6 == 5:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_count = solve(equation, girls)\n\n    return girls_count[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    rex_score = 66\n    unanswered_questions = 1\n\n    # correct + incorrect = answered_questions\n    answered_questions = total_questions - unanswered_questions\n\n    # points_for_correct * correct + points_for_incorrect * incorrect = rex_score\n    # Since correct + incorrect = answered_questions and incorrect = answered_questions - correct:\n    # points_for_correct * correct + points_for_incorrect * (answered_questions - correct) = rex_score\n    # correct = (rex_score - points_for_incorrect * answered_questions) / (points_for_correct - points_for_incorrect)\n\n    correct = (rex_score - points_for_incorrect * answered_questions) / (points_for_correct - points_for_incorrect)\n    \n    return int(correct)\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    A, B, C, D, E, F, G, H = symbols('A B C D E F G H')\n    faces = [A, B, C, D, E, F, G, H]\n\n    # Set up the equations based on the question\n    equations = [\n        Eq(A + B + C, 210),\n        Eq(A + C + D, 230),\n        Eq(C + D + E, 220),\n        Eq(A + D + F, 240),\n        Eq(A + B + G, 200),\n        Eq(B + C + H, 190),\n        Eq(D + E + F, 260),\n        Eq(E + F + G + H, 300)  # Here we assume it's the sum of the four faces\n    ]\n\n    # Solve the equations\n    solutions = solve(equations, faces)\n\n    # Calculate the total edge sum (6 edges in total). Each edge is counted exactly twice.\n    edge_sum = sum(solutions.values()) * 2\n\n    return edge_sum\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    total_weight = 800 + 200 + 300\n    total_sugar = 800 * 0.05 + 200 * 0.30 + 300 * 0.10\n    concentration = (total_sugar / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill - andrew, 18)\n    equation2 = Eq(gill + andrew, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_badges = symbols('initial_badges')\n\n    # Sold 5/7 on the first day\n    badges_left_after_first_day = initial_badges * (2/7)\n\n    # Sold 1/3 of the remaining on the second day\n    badges_left_after_second_day = badges_left_after_first_day * (2/3)\n\n    # Made an additional 354 badges\n    total_badges_at_end = badges_left_after_second_day + 354\n\n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_badges_at_end, 3 * initial_badges)\n\n    # Solve for the number of badges she made at the beginning\n    solution = solve(equation, initial_badges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    vol_punch1 = 20\n    juice_conc1 = 0.35\n\n    vol_punch2 = 30\n    juice_conc2 = 0.60\n\n    total_volume = vol_punch1 + vol_punch2\n    total_juice = (vol_punch1 * juice_conc1) + (vol_punch2 * juice_conc2)\n\n    percent_concentration = (total_juice / total_volume) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # A three-digit number with one digit being 7 and the difference between any two digits being 4 or less\n    # If we want the smallest number, we should also have 7 as the first digit\n    first_digit = 7\n    \n    # The second and the third digits must be between 3 and 7 (inclusive) to satisfy the condition of having a difference of 4 or less\n    # Since we are looking for the smallest number, we should pick the smallest digits possible\n    second_digit = min(range(3, 8), key=lambda x: abs(x - first_digit))\n    third_digit = second_digit\n\n    # Combine the digits to form the smallest three-digit number\n    smallest_number = int(str(first_digit) + str(second_digit) + str(third_digit))\n\n    return smallest_number\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # Since it's a knockout tournament, each game eliminates one player\n    # For four players, the number of games required will be one less than the number of players\n    num_players = 4\n    num_games = num_players - 1\n\n    return num_games\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_A = 266\n    not_B = 178\n    only_A_or_B = total_exhibits - (not_A + not_B)\n\n    both_A_and_B = total_exhibits - only_A_or_B\n    \n    return both_A_and_B\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Create dictionaries to map letters to digits for both passwords\n    angel_dict = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    devil_dict = {'D': 4, 'e': 0, 'v': 2, 'i': 9, 'l': 1}\n\n    # Andy's attempt to the password\n    attempted_password = \"4005220912\"\n\n    # Convert the correct \"Angel\" password to the word based on the angel_dict\n    angel_password = \"0141705021\"\n    angel_word = ''.join([k for k, v in angel_dict.items() if str(v) == angel_password[i]] for i in range(len(angel_password)))\n\n    # Convert Andy's attempted \"Devil\" password to the word based on the devil_dict\n    attempted_word = ''.join([k for k, v in devil_dict.items() if str(v) == attempted_password[i]] for i in range(len(attempted_password)))\n\n    # Check if Andy's attempted word is \"Devil\"\n    if attempted_word == \"Devil\":\n        ans = True  # Andy can unlock the treasure chest\n    else:\n        # Create the correct \"Devil\" password from devil_dict\n        correct_password = ''.join(str(v) for k, v in sorted(devil_dict.items()))\n        ans = False, correct_password  # Andy cannot unlock the treasure chest, provide the correct password\n\n    return ans\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    drop_temp = 10\n    midnight_temp = noon_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, we need to account for the worst case scenario.\n    # In the worst case, the magician could pick all balls of one color and then all balls of another color.\n    # After this, the next ball the magician picks must be of the remaining color.\n    \n    # So, pick all blue balls, and then all red balls.\n    blue_balls = 8\n    red_balls = 10\n    \n    # In the worst case, the next pick must be a green one.\n    at_least_picks = blue_balls + red_balls + 1\n    \n    return at_least_picks\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for number in range(201, 300):\n        if number % 6 == 3 and number % 7 == 3 and number % 11 == 5:\n            return number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse = symbols('blouse')\n    skirt = blouse + 14\n\n    equation = Eq(3 * skirt + 2 * blouse, 317)\n\n    solutions = solve(equation, blouse)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Define least values of A and B which are primes > 3\n    # (Because if A or B is 3, then 8A and 3B will both be multiples of 3, \n    # and their difference will also be a multiple of 3)\n    primes = [5, 7, 11, 13, 17, 19, 23, 29, 31]  # list of initial prime numbers > 3\n\n    for A in primes:\n        for B in primes:\n            if (8 * A - 3 * B) % 3 == 0:\n                return A  # As soon as we find a matching A, we return it\n            \nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Initial value of the house after 10% increase last year, final value is £110,000\n    value_after_increase = 110000\n    # Calculate the original value before the increase. As the value increased by 10%, original value was 100% -> 110000 / 110%\n    original_value = value_after_increase / 1.1\n    \n    # Calculate the new value after the house loses 10% of its value this year\n    # So the new value is 90% of the value after increase\n    current_value = value_after_increase * 0.9\n    \n    # Calculate profit or loss by subtracting the original price from the current value\n    profit_or_loss = current_value - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # calculate permutations for roses (3!), jasmines (4!) and daisy (1!)\n    roses_perm = factorial(3)\n    jasmines_perm = factorial(4)\n    daisy_perm = factorial(1)\n    \n    # The flowers can be arranged in 3! ways as each color flower group acts as a single item\n    groups_perm = factorial(3) \n    \n    # Multiply the permutations of individual flower colors and the grouping\n    total_ways = roses_perm * jasmines_perm * daisy_perm * groups_perm\n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    \n    total_pupils = room_a + room_b\n    \n    # After the transfer, each room will have half of the total pupils\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    multiple_of_numbers = 1*2*3*4*5*6\n    factor_of_numbers = 1*2*3*4*5*6*7*8\n\n    possible_values = set()\n\n    for possible_m in range(multiple_of_numbers, factor_of_numbers + 1):\n        if (possible_m % multiple_of_numbers == 0) and (factor_of_numbers % possible_m == 0):\n            possible_values.add(possible_m)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    pies = 0\n    while True:\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 0.20\n\n    new_price = original_price * (1 - discount)\n    \n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    ans = 1  # Starting from 1 as the smallest positive integer\n    sum = 0  # Initialize sum to track the cumulative total\n    while sum + ans <= 60:\n        sum += ans\n        ans += 1\n    return ans - 1  # Subtract 1 because the last increment doesn't contribute to the sum\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        s, e, _ = p\n        if s == '0':\n            continue\n        see_num = int(s+e+e)\n        eee_num = int(e+e+e)\n        if see_num == eee_num * 2:\n            return see_num\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_ml_per_min = 20  # ml/min\n    minutes_in_hour = 60\n    ml_to_liters = 1000  # 1 liter = 1000 ml\n\n    # Calculate the total amount of water leaked in ml\n    total_leak_ml = leak_rate_ml_per_min * minutes_in_hour\n\n    # Convert ml to liters\n    total_leak_liters = total_leak_ml / ml_to_liters\n\n    return total_leak_liters\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating a system of congruences as per the problem statement\n    # The age when divided by 2, 3, 4, or 6 leaves a remainder of 1\n    # When divided by 7, leaves no remainder\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Finding the smallest solution to the system of congruences using the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n    \n    return age\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Since there are 3 different colors and she needs to ensure at least one pair,\n    # she should pick one sock from each color (3 socks), and then one more to ensure a pair.\n    # This is based on the Pigeonhole Principle, the worst case is when she picks one of each\n    # unique color first, and then gets a pair on the next pick.\n    return 3 + 1\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    total_paper_before_cut = 10\n    total_paper_after_cut = 16\n    \n    # Every paper that is cut into three parts creates 2 additional pieces.\n    # Let's denote the number of papers that were cut as x.\n    # The equation will be: total_paper_before_cut - x + 2*x = total_paper_after_cut\n\n    # Solving for x:\n    x = (total_paper_after_cut - total_paper_before_cut) // 2\n    \n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # In the worst-case scenario, you could draw apples alternating colors\n    # First red, then green, then red, then green, which totals 4 apples.\n    # But the next apple you draw, no matter what, will be either red or green,\n    # giving you 2 apples of the same color.\n    # This is because of the pigeonhole principle: after you have one of each color,\n    # you're guaranteed to get a matching pair on your next draw.\n    \n    return 4 + 1  # Because after drawing 4 apples you have to take one more\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    twenty_thousand = 20000\n    ans = twenty_thousand - 20\n    return ans\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n    \n    original_volume = (pails_filled * water_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = (35 + 5) / (5 * 6)\n    return c\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:\n            product //= 10\n    return product % 10\n    \nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Calculate the sum of counts up to the number 7 (since the pattern ends when writing 8's)\n    total_count = sum([2*i for i in range(1, 8)])\n    # Add half the count of 8's since median will be in the middle of the 8's\n    median_position = total_count + (5 * 8 // 2) + 1\n    \n    ans = 8 if median_position > total_count else 7  # The median will either be a 7 or an 8\n    return ans\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z')\n    # Set up the main equation based on the given expression x^20 * y^15 * z^5 = 243\n    equation = Eq(x**20 * y**15 * z**5, 243)\n    # Since 243 is 3^5, each of x, y, and z can be expressed as powers of 3 (3^a, 3^b, 3^c respectively)\n    equation_transformed = Eq(3**(20*a + 15*b + 5*c), 3**5)\n    \n    # Now find a, b, c that satisfy the equation (since we don't directly need x, y, z values for the final expression)\n    solutions = solve((Eq(20*a + 15*b + 5*c, 5), (a, b, c)))\n\n    # Using the found powers, calculate the value of x^8 * y^6 * z^2 which is 3^(8a + 6b + 2c)\n    a, b, c = solutions[a], solutions[b], solutions[c]\n    value = 3**(8*a + 6*b + 2*c)\n    \n    return value\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    book, pencil_box = symbols('book pencil_box')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    # Return the price of each pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # Average height of six players.\n    average_six_players = 150\n    \n    # Total height of six players.\n    total_height_six_players = average_six_players * 6\n    \n    # Average height of four of them is 2 cm lower than the average height of the team.\n    average_four_players = average_six_players - 2\n    \n    # Total height of the four players.\n    total_height_four_players = average_four_players * 4\n    \n    # Total height of the remaining two players.\n    total_height_two_players = total_height_six_players - total_height_four_players\n    \n    # Average height of the remaining two players.\n    average_two_players = total_height_two_players / 2\n    \n    return average_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paving = 50\n\n    num_days = total_length / daily_paving\n\n    return int(num_days)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle = 8\n    days = 4\n    fodder_per_day_per_cattle = 10\n\n    total_fodder = cattle * days * fodder_per_day_per_cattle\n\n    return total_fodder\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = (42**2) / 42  # Find least positive integer x satisfying the condition\n    \n    # For y, find prime factors of 42. Then multiply each with an exponent of 1.\n    prime_factors_42 = [2, 3, 7]\n    y = 1\n    for p in prime_factors_42:\n        y *= p\n    \n    # The sum of x and y\n    ans = x + y\n    return int(ans)\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    dog_to_rabbit = 8\n    # 1 rabbit = 2 chickens\n    rabbit_to_chicken = 2\n    \n    # Therefore, 1 dog = 8 rabbits * 2 chickens/rabbit\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    \n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marbles = symbols('marbles')\n    \n    equation = Eq((5/12) * marbles + 30 + 26 + 35, marbles)\n    \n    ans = solve(equation, marbles)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution in grams\n    concentration = 0.22  # The concentration of the sugar solution\n\n    # Calculate the weight of the sugar\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for i in range(1, 100):\n        total += sum(int(digit) for digit in str(i))\n    return total\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    fraction_given = 1/4\n    money_given = total_money * fraction_given\n    return money_given\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    jess, jill = symbols('jess jill')\n\n    # Create the equations based on the problem\n    # initially: jill = 6/5 * jess\n    # after giving: jill - 8 = (4/7) * (jess + 8)\n    equation1 = Eq(jill, (6/5) * jess)\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Sum the number of sweets they have together\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n            \nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum([i**4 for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one pie, then the cost of one cake would be x + 13\n    # Let the number of pies sold be 4y and cakes be y\n    x, y = symbols('x y')\n\n    # Total money collected from selling pies is 4y*x\n    # Total money collected from selling cakes is y*(x+13)\n    # Total money collected is 1848, with a ratio 15:7 for pies:cakes\n    equation1 = Eq(4 * x * y / (y * (x + 13)), 15 / 7)\n    equation2 = Eq(4 * x * y + y * (x + 13), 1848)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # y represents the number of cakes sold\n    return solutions[y]\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    birth_date = current_date - timedelta(days=(38 * 365 + 6 * 30))\n    return birth_date.year\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    ans = [x for x in range(40, 81) if x % 4 == 0 and x % 7 == 0]\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    ans = 345 * 76\n    return ans\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0 and digit != 0]\n    count = 0\n    for even_digit in even_digits:\n        remaining_digits = [d for d in digits if d != even_digit]\n        for perm in permutations(remaining_digits, 3):\n            if perm[0] != 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # Equation based on the given conditions\n    # spent 1/4 of his money and 3 dollars on CDs\n    # then spent 3/5 of the remaining money and 6 dollars on batteries\n    # finally he was left with 24 dollars\n    equation = Eq(initial_money - (1/4)*initial_money - 3 - (3/5)*(initial_money - (1/4)*initial_money - 3) - 6, 24)\n\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of powers of 9 will cycle every 2 steps as follows: 9^1 -> 9, 9^2 -> 1, 9^3 -> 9, 9^4 -> 1, and so on.\n    # Notice that 9^odd will have the units digit 9 and 9^even will have the units digit 1.\n    # Therefore, the units digit of 9^2015 will be 9 and of 9^2016 will be 1.\n    # The sum of these units digits (9 + 1) has a units digit of 0.\n\n    ans = 0  # The units digit of the sum 9^2015 + 9^2016 is 0.\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    men_ways = factorial(5)  # Ways to arrange men\n    spaces = 6  # Spaces around and between men to place women\n    women_ways = factorial(spaces) // factorial(spaces - 3)  # Ways to arrange women in spaces\n\n    return men_ways * women_ways\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Qiqi's walking speed in m/min\n    speed_qiqi = 60\n    # Weiling's walking speed in m/min\n    speed_weiling = 72\n    # Weiling starts 2 minutes after Qiqi\n    time_difference_start = 2\n    # Weiling arrives 4 minutes before Qiqi at school\n    time_difference_arrival = 4\n\n    # Time taken by Weiling to reach the school\n    # This time is Qiqi's time minus the 2 minutes start difference minus the 4 minutes arrival difference\n    time_weiling = (speed_qiqi * (time_difference_start + time_difference_arrival)) / (speed_weiling - speed_qiqi)\n    # Calculate the distance based on Weiling's speed and time\n    distance = speed_weiling * time_weiling\n\n    return distance\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_current_time_minutes = (11 * 60) + 50  # Convert 11:50 AM to minutes\n    marc_current_time_minutes -= 15  # Adjust for Marc's watch being 15 minutes slow\n    \n    # Add 30 minutes for half an hour's time\n    future_time_minutes = marc_current_time_minutes + 30\n    \n    george_future_time_minutes = future_time_minutes + 7  # Adjust for George's watch being 7 minutes fast\n    \n    # Convert future time from minutes into hours and minutes\n    future_hour = george_future_time_minutes // 60\n    future_minute = george_future_time_minutes % 60\n    \n    # Adjust if the time is beyond 12 PM\n    if future_hour >= 12:\n        future_hour -= 12\n\n    return future_hour, future_minute\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    amount = 540\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    T = symbols('T', real=True)\n    income = symbols('income', real=True, positive=True)\n\n    # Set up the tax equation based on the problem statement.\n    # If income is less or equal to 30000, the tax is T% of that income.\n    # If income is more, it's T% of 30000, plus (T+3)% of the excess over 30000.\n    tax_eq = Eq(T * min(income, 30000) / 100 + max(0, income - 30000) * (T + 3) / 100, (T + 1) * income / 100)\n    \n    # Create an equation where the different tax parts are equal to (T+1)% of the income.\n    tax_eq_simplified = tax_eq.subs(income, 30000 + symbols('x'))\n\n    # Solve for the excess amount over 30000\n    excess_amount_eq = Eq(30000 * T / 100 + symbols('x') * (T + 3) / 100, ((T + 1) * (30000 + symbols('x')) / 100))\n    solved_excess = solve(excess_amount_eq, symbols('x'))\n\n    # Calculate the total income using the excess amount over 30000\n    total_income = 30000 + solved_excess[0]\n\n    return total_income.evalf()\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    marks_for_correct = 5\n    deduction_for_wrong = 1\n    total_marks = 90\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * marks_for_correct - wrong * deduction_for_wrong == total_marks:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    \n    combined_rate = a_rate + b_rate\n    \n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - slide_down\n    \n    # After 3 jumps, there's a slide of 2 meters, so we analyze in terms of 3 jumps.\n    distance_covered_in_3_jumps = (3 * jump_up) - slide_down\n    jumps_needed = ((total_height - slide_down) // distance_covered_in_3_jumps) * 3\n    \n    # After completing the sets of 3 jumps, we check how much height is left to cover.\n    height_remaining = total_height - ((jumps_needed // 3) * distance_covered_in_3_jumps)\n    \n    # If there's any height remaining, we need to find out how many single jumps are needed.\n    if height_remaining > 0:\n        if height_remaining <= jump_up:\n            jumps_needed += 1\n        else:\n            jumps_needed += (height_remaining // jump_up)\n            if height_remaining % jump_up > 0:\n                jumps_needed += 1\n    \n    return jumps_needed\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We need to consider the worst-case scenario to ensure we get 4 marbles of different colors.\n    # If we take the maximum number from the colors with the most marbles without getting 4 different colors,\n    # we must consider the next draw will ensure the fourth color.\n    \n    # Pick all of one color (the most plentiful, which is red): 12 red\n    # Then pick all of another color (blue, which has the second-most marbles): 9 blue\n    # Then pick all of another color (yellow, which has the third-most marbles): 8 yellow\n    # At this point, we have 12 + 9 + 8 = 29 marbles and only 3 colors.\n    # The next marble we pick must be of the fourth color (green), so add 1 more marble to the count.\n    \n    # Total marbles drawn to ensure 4 marbles of different colors:\n    marbles_drawn = 12 + 9 + 8 + 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the number of years between the given dates for each person\n    years_since_gigi_45 = 2002 - 22\n    years_since_jenny_22 = 1995 - 22\n\n    # Calculate the year when Gigi was 22\n    year_gigi_22 = 2002 - (45 - 22)\n\n    # Calculate Jenny's age in the year when Gigi was 22\n    jenny_age_when_gigi_22 = year_gigi_22 - (1995 - 22)\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6\n    missing_digit = 9 - (digits_sum % 9)\n    if missing_digit == 9:\n        missing_digit = 0\n    return missing_digit\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(10, 1000):  # Checking numbers from 10 as the number need to end with 2\n        if i % 3 == 0 and i % 8 == 0 and str(i).endswith('2'):\n            return i\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the year is 2023, since it's not specified in the question\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d %B %Y')\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    # Since we are looking for positive terms, the last term should be greater than 0.\n    # An arithmetic sequence term can be found with: a_n = a_1 + (n - 1) * d\n    # Where a_n > 0, a_n is the nth term, a_1 is the first term, d is the difference, and n is the term number\n    # Solving a_n = a_1 + (n - 1) * d > 0 for n will give us the number of positive terms\n\n    # Rearrange the inequality to find n:\n    # 0 < a_1 + (n - 1) * d => -a_1 < (n - 1) * d => (a_1 + d) / -d < n - 1 => ((a_1 + d) / -d) + 1 < n\n    # Since we are looking for the last positive term, we round down to the nearest whole number\n\n    num_terms = ((first_term + difference) / -difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from sympy import root, Rational, sqrt\n    \n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(Rational(44541, 67000)) - (-Rational(377, 6) * Rational(5, 3))\n    \n    ans = float(numerator / denominator)\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 != group2:\n            count += 1\n    return count // 2\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship_still_water = 25  # in km/h\n    speed_current = 3  # in km/h\n    distance = 140  # in km\n\n    speed_downstream = speed_ship_still_water + speed_current  # in km/h\n    time_downstream = distance / speed_downstream  # in hours\n\n    return time_downstream\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15\n\n    sale_price = original_price * (1 - discount_percent / 100)\n    \n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_paid = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    total_drink_cost = total_paid - total_cupcake_cost\n    single_can_cost = total_drink_cost / 2\n    return single_can_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_points + wrong_answers * wrong_points == 51:\n            return correct_answers\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import gcd\n\n    # Convert the time to seconds\n    first_light = 30  # every half a minute\n    second_light = 45  # every 0.75 minutes\n    third_light_time = 9 * 60  # 9 minutes, converted to seconds\n    \n    # Find the least common multiple\n    lcm_first_second = first_light * second_light // gcd(first_light, second_light)\n    \n    # The third light needs to have a period that is a divisor of the LCM of first and second lights\n    # and also less than or equal to the combined period of 9 minutes (540 seconds), but at least 30 seconds\n    for third_light in range(30, third_light_time + 1):\n        if (lcm_first_second % third_light == 0) and (third_light_time % third_light == 0):\n            return third_light\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Double arithmetic sequence means the differences of the terms also form an arithmetic sequence.\n    # Observe differences in the sequence\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    \n    # Find the differences of the differences sequence, which should be constant if it's a double arithmetic sequence.\n    second_order_diffs = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n    \n    # Assuming the second-order differences are constant (the sequence is a double arithmetic sequence),\n    # we can predict the next second-order difference to be the same as the previous ones.\n    next_second_order_diff = second_order_diffs[-1]\n    \n    # Now we can add the next second-order difference to the last first-order difference to find the next first-order difference.\n    next_first_order_diff = differences[-1] + next_second_order_diff\n    \n    # Finally, add the next first-order difference to the last term in the original sequence to find the next term.\n    next_term = 50 + next_first_order_diff\n    \n    return next_term\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Use sympy to solve equations\n    A, B = symbols('A B')\n\n    # Since 11 members from group A had to combine with the remaining members of group B\n    # to fill another bus, we can assume A = 36n + 11 and B = 36m for some integers n and m\n    # because every other bus is filled up\n    # We also know each roll of film has 36 pictures\n    # So the total number of pictures taken is A*B and the remainder is A*B % 36\n\n    # Equation representing that the last bus is filled by members of group A & B\n    equation = Eq(A % 36 + B % 36, 36)\n    # From the context, we rearrange A as 36n + 11 with n being a non-negative integer\n    # Since 11 members of group A had to join with some from group B\n    # to fill the rest of the seats in a bus, we use (36 - 11) for B % 36\n    solutions = solve(A % 36 - 25, A)\n    \n    # We find the smallest positive A that satisfies the equation\n    # Since A is given in form of 36n+11, we take the first solution\n    # that is larger than 11 (which is the members that had to combine)\n    valid_A = next(val for val in solutions if val > 11)\n\n    # Now we can calculate the remaining pictures\n    remaining_pictures = 36 - (valid_A * (valid_A - 11) % 36)\n    \n    return remaining_pictures\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # A can't receive the ball directly after the first pass, so we have 3 choices for the first pass\n    first_pass_choices = 3\n\n    # After the first pass, the next person also has 2 choices (can't pass back immediately)\n    second_pass_choices = 2\n\n    # For the final pass, the person only has one choice, which is to pass back to A\n    final_pass_choice = 1\n\n    # The total number of different methods is the product of choices at each pass\n    total_methods = first_pass_choices * second_pass_choices * final_pass_choice\n\n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, ming = symbols('daniel ming')\n    \n    # Age relation between Daniel and Ming\n    equation1 = Eq(daniel, 4 * ming)\n    \n    # Age sum after six years\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    # Daniel's age this year\n    return solutions[daniel]\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    total_weight_g = weight_per_paper_g * number_of_girls\n    # Converting grams to kilograms\n    grams_in_kilogram = 1000\n    total_weight_kg = total_weight_g / grams_in_kilogram\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n            \n    return max_product\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum([(1000 - 2*i)**2 - (998 - 2*i)**2 for i in range(500)])\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    from datetime import datetime\n\n    start_time = datetime.strptime('11:55 AM', '%I:%M %p')\n    end_time = datetime.strptime('1:40 PM', '%I:%M %p')\n\n    duration = end_time - start_time\n    duration_in_minutes = duration.seconds // 60\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    for num in range(2, int(2688**(1/3)) + 1, 2):\n        if 2688 % num == 0:\n            second_num = num + 2\n            third_num = num + 4\n            if num * second_num * third_num == 2688:\n                return third_num\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal is counted once for each row, no need to double count her\n    people_left = 11\n    people_right = 7\n    crystal = 1\n    two_rows = 2\n\n    # Calculate the total number of people in one row including Crystal\n    total_in_one_row = people_left + crystal + people_right\n    # Multiply by number of rows to get the total in the class\n    total_people = total_in_one_row * two_rows\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    num = 224\n    factors = 0\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors += 1\n            \n    return factors\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n\n    # Since each group must have at least 1 cupcake, and different numbers,\n    # we only need to consider the number for the smaller group and subtract it\n    # from the total to get the number for the larger group.\n    for group1 in range(1, total_cupcakes // 2 + 1):\n        ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    import math\n    return math.gcd(math.gcd(28, 84), 126)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    lesson_duration = timedelta(minutes=45)\n    moving_period_duration = timedelta(minutes=5)\n    \n    # Adding three lesson durations and two moving periods\n    break_start_time = start_time + 3 * lesson_duration + 2 * moving_period_duration\n    \n    return break_start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let the length of the line be L meters.\n    # Let the length of the second bridge be X meters.\n    # The line crosses the first bridge (9 meters) in 8 seconds.\n    # Let V be the speed of the line per second.\n    # Time to cross the first bridge entirely (including the 3-meter line): L/9 = 8 s\n    # Time to cross the second bridge entirely (again, including the 3-meter line): L/X = 10 s\n    # So, we have the following two equations:\n    # V * 8 = 9 + L  (Equation 1)\n    # V * 10 = X + L (Equation 2)\n    # We know that V * 8 = V * 10 - 2 * V, so: 9 + L = X + L - 2 * V\n    # Thus, X = 9 + 2 * V.\n    # To find V, we use the equation V = (9 + L) / 8, but we also know that V = (X + L) / 10\n    # Hence, (9 + L) / 8 = (X + L) / 10\n    # Now let's express X in terms of L to get a single variable equation:\n    # (9 + L) / 8 = (9 + 2 * V + L) / 10\n    # As we know that 2 * V = (2 * (9 + L)) / 8 = (9 + L) / 4\n    # Now substituting 2 * V in the equation:\n    # (9 + L) / 8 = (9 + (9 + L) / 4 + L) / 10\n    # Multiply through by 40 (LCM of 8, 4, 10) to clear denominators:\n    # 5 * (9 + L) = 4 * (9 + (9 + L) / 4 + L)\n    # 45 + 5L = 36 + (9 + L) + 4L\n    # 45 + 5L = 45 + 5L (So, the equation is valid for all L)\n    # Now use Equation 1 to find V: V = (9 + L) / 8\n    # But L has to be the length of the people line, which is given as 3 meters,\n    # So: V = (9 + 3) / 8 = 12 / 8 = 1.5 meters/second\n    # Now use Equation 2 to find X: X = V * 10 - L\n    # X = 1.5 * 10 - 3 = 15 - 3 = 12 meters\n    # Therefore, the length of the second bridge is 12 meters.\n    V = (9 + 3) / 8  # Speed of the line\n    X = V * 10 - 3   # Length of the second bridge\n    return X\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # Hundreds digit, cannot be 0\n        for b in range(0, 10):  # Tens digit\n            for c in range(0, 10):  # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) // 2 == b:\n                    return 100 * a + 10 * b + c\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    troy, adam = symbols('troy adam')\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n    solutions = solve((equation1, equation2), (troy, adam))\n    total_coins_initially = solutions[troy] + solutions[adam]\n    return total_coins_initially\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fives, tens = symbols('fives tens')\n    total_notes = 57\n    spent_tens = 0.6\n    spent_fives = 0.25\n    remaining_ratio = 2\n\n    equation1 = Eq(fives + tens, total_notes)  # total number of notes\n    equation2 = Eq(tens * (1 - spent_tens), fives * (1 - spent_fives) * remaining_ratio)  # number of notes after spending\n\n    solutions = solve((equation1, equation2), (fives, tens))\n    \n    total_spent = solutions[fives] * 5 * spent_fives + solutions[tens] * 10 * spent_tens\n\n    return total_spent\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        digits = [int(digit) for digit in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Hanson had\n    original_amount = symbols('original_amount')\n\n    # Let's call the remaining money after buying CDs x\n    # original_amount/4 + 3 is spent on CDs, so the remaining is original_amount - original_amount/4 - 3\n    x = original_amount - original_amount/4 - 3\n\n    # After spending 3/5 of the remaining money and an additional $6 on batteries, Hanson is left with $24.\n    # x - 3/5*x - 6 = 24\n    remaining_equation = Eq(x - 3/5*x - 6, 24)\n\n    # Solve the equation for the original amount\n    solutions = solve(remaining_equation, original_amount)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    even_digits = [0, 2, 4, 6, 8]\n    count = 0\n    \n    # The sum of the digits is 8 and all digits are different.\n    # Iterate over all possible combinations of 3 different digits from 0 to 9.\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in even_digits:\n                if hundreds != tens and hundreds != ones and tens != ones:\n                    if hundreds + tens + ones == 8:\n                        count += 1\n                        \n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Darrell could draw all blue and white beads before getting 5 green beads for sure.\n    # So, he needs to draw all blue and white beads plus 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    total_beads_needed = blue_beads + white_beads + green_beads_needed\n\n    return total_beads_needed\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for number in range(6, 55):\n        if number % 5 == 0 and (number + 1) % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    return (1/2) * (16 / (1/4))\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 5 == 1 and number % 6 == 1 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage.\n    # For a single round-robin tournament with n participants, there are C(n, 2) games.\n    # C(n, 2) = n * (n - 1) / 2\n    # Each group has 4 people, therefore there are C(4, 2) games per group.\n    games_group = (4 * (4 - 1)) // 2\n    # Since there are 4 groups, multiply by 4.\n    total_group_games = games_group * 4\n\n    # For the knockout rounds, starting with the top 8, then top 4, top 2, and finally the game for third place.\n    # Each knockout round has one game per pair, and with 8 participants to start, it's 8 / 2 for the first knockout round.\n    knockout_rounds_games = (8 // 2) + (4 // 2) + (2 // 2) + 1  # 1 game for third place\n\n    # Add the group stage games and the knockout rounds games for the total.\n    total_games = total_group_games + knockout_rounds_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount of work done by B in one day as 'b'\n    # Since A is twice as good a workman as B, A can finish in 1/2 the time\n    # which means A does '2b' amount of work in one day.\n    # Let 'd' be the number of days B takes to finish the job alone.\n    \n    # Therefore, B finishes the job in 'd' days, so B does 1/d work per day\n    # A finishes the job in 'd - 12' days, so A does 1/(d - 12) work per day\n    \n    d = symbols('d', positive=True, real=True)\n    equation1 = Eq(1/d + 1/(d - 12), 1)\n    \n    # Solve for 'd'\n    days_b = solve(equation1, d)\n    \n    # Since A is twice as good, A's days are 12 less than B's\n    days_a = days_b[0] - 12\n    \n    # Working together\n    days_together = 1 / (1/days_b[0] + 1/days_a)\n    \n    return days_together\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    # Using the Inclusion-Exclusion Principle for two sets\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n    \n    initial_stickers = final_stickers - bought + given_away\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n_plants = 9\n    r_select = 4\n    arrangements = factorial(n_plants) // factorial(n_plants - r_select)\n    return arrangements\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of pineapple and apple\n    pineapple, apple = symbols('pineapple apple')\n\n    # Equation for the weight difference\n    equation1 = Eq(pineapple, apple + 650)\n\n    # Equation for the total weight\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    matthew_tomatoes = belinda_tomatoes - belinda_gave - (belinda_tomatoes - 2 * belinda_gave)\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10  # televisions per day\n    increased_efficiency = 0.50  # 50% increase\n    new_rate = original_rate * (1 + increased_efficiency)\n    return new_rate\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "def solution():\n    from itertools import permutations\n\n    # We know that the leftmost digit is 8; we set it in place.\n    number_prefix = '8'\n    remaining_digits = '0123456789'.replace(number_prefix, '')\n    # The last digit has to be 0 due to the divisibility rule of 10.\n    last_digit = '0'\n    remaining_digits = remaining_digits.replace(last_digit, '')\n\n    # Check permutations of the remaining digits for the divisibility rules.\n    for perm in permutations(remaining_digits):\n        number = number_prefix + ''.join(perm) + last_digit\n        if all(int(number[:i]) % i == 0 for i in range(2, 10)):\n            # Since we have a working permutation, we can break the loop.\n            return number\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # total number of rabbits and ducks\n    total_animals = 7\n    # total number of legs\n    total_legs = 20\n    # number of legs a duck has\n    duck_legs = 2\n    # number of legs a rabbit has\n    rabbit_legs = 4\n    \n    # let the number of rabbits be x\n    for rabbits in range(total_animals + 1):\n        ducks = total_animals - rabbits\n        if (rabbits * rabbit_legs + ducks * duck_legs) == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # Numbers given in the problem\n    num1 = 2012\n    num2 = 1274\n\n    # Difference of the two numbers\n    diff = abs(num1 - num2)\n\n    # Since they give the same remainder when divided by D,\n    # D must divide their difference. We need to find the largest\n    # odd divisor of their difference.\n\n    # Find the greatest common divisor, which is the largest divisor of diff\n    largest_divisor = gcd(num1, num2)\n\n    # If largest_divisor is odd, we have found our D\n    if largest_divisor % 2 == 1:\n        D = largest_divisor\n    else:\n        # If it's even, we divide by 2 until it becomes odd\n        while largest_divisor % 2 == 0:\n            largest_divisor //= 2\n        D = largest_divisor\n\n    # Calculate R\n    R = num1 % D\n\n    # Calculate D - R\n    ans = D - R\n\n    return ans\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # To win the game, a player must force the opponent to write the last number.\n    # We can categorize the numbers in terms of how they affect the game:\n    # 1. \"Safe numbers\" - writing these numbers doesn't give the opponent a chance to win\n    # 2. \"Losing numbers\" - after writing these numbers, the opponent can force a win\n\n    # Define the total numbers, the moves a player can make, and initialize the set of losing numbers\n    total_numbers = 52\n    moves = [1, 3, 4, 6]\n    losing_numbers = set()\n\n    # Iterate through numbers to determine if they are losing numbers\n    for number in range(1, total_numbers + 1):\n        # A number is a losing number if every number that can be reached from it by a legal move is a safe number\n        if all((number - move) in losing_numbers for move in moves if (number - move) >= 0):\n            losing_numbers.add(number)\n\n    # Winning strategy: Always play such that the opponent is left with a losing number after your move\n    # If 52 is a losing number, Betty should go first, else she should go second\n    first_or_second = 'first' if 52 in losing_numbers else 'second'\n\n    # The strategy is to always play such that the opponent faces a losing number\n    strategy = {'play': first_or_second, 'always_leave_opponent_a_losing_number': True}\n\n    return strategy\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_part = 5 / 7\n    evelyn_part = 1 / 9\n\n    grace_juice = total_juice * grace_part\n    remainder = total_juice - grace_juice\n    evelyn_juice = remainder * evelyn_part\n    final_amount = remainder - evelyn_juice\n\n    return final_amount\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of 4^2009\n    last_digit_4_power = (4**(2009 % 2)) % 10\n    \n    # Calculate the last digit of 6^2010\n    last_digit_6_power = (6**(2010 % 10)) % 10\n    \n    # Calculate the last digit of the sum\n    last_digit_sum = (last_digit_4_power + last_digit_6_power) % 10\n\n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    total_weight = 63\n\n    # Let's denote x as the number of 2-gram weights and y as the number of 5-gram weights.\n    # We have the equation 2x + 5y = total_weight where x and y are non-negative integers.\n    for x in range(0, total_weight//2 + 1):\n        if (total_weight - 2 * x) % 5 == 0:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n    \n    return average_height_for_two\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # The prime factorization of 15 is 3 x 5\n    # The prime factorization of 21 is 3 x 7\n    # Since 15 and 21 have a common factor of 3 and are factors of the integer,\n    # the integer must be a multiple of 3 x 5 x 7 = 105\n    # Let's denote the integer as n = 105 * k, where k is an integer\n    # n must have exactly 8 factors. The number of factors of n is given by\n    # the product of (exponents + 1) of the prime factorization of n.\n    # The prime factorization of 105 is 3 x 5 x 7 (with exponents all being 1).\n    # For n to have exactly 8 factors, k must be a square of a prime (p^2),\n    # because (2+1)(1+1)(1+1) = 3 x 2 x 2 = 12 factors, which is too many,\n    # whereas (2)(1+1)(1+1) = 2 x 2 x 2 = 8 factors, which is the right amount.\n\n    # As we need only the sum of the factors and we have established that\n    # k must be a square of a prime, we can find the sum of the factors of n\n    # by considering the sum of factors of 105 multiplied by the sum of factors of p^2.\n\n    # The sum of factors of 105 is (1 + 3 + 5 + 7 + 15 + 21 + 35 + 105) = 192\n    sum_factors_105 = 192\n    \n    # Since we do not know p yet, we should find a prime which when squared and\n    # multiplied by 105 gives us exactly 8 factors. For this, we only need a prime\n    # because 105 already has 3 prime factors, and we only need one more to fulfill\n    # the requirement of 8 divisors.\n    # We don't consider the smallest prime (2), as its square (4) doesn't lead to a new\n    # number of factors given that 2 is not a factor of 105.\n    # Thus we start testing from the next prime, which is 2's square (2^2 = 4)\n\n    # We'll iterate over primes to find the correct k such that 105*k has exactly 8 factors\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # Add more if needed\n\n    for p in primes:\n        k = p ** 2\n        n = 105 * k\n        # Test if n has exactly 8 factors\n        if k not in [3, 5, 7]:  # avoiding primes that are already in 105's factorization\n            # We calculate the sum of the factors of n as \n            # the product of the sum of factors of 105 and the sum of factors of p^2\n            # Sum of factors of p^2 is (1 + p + p^2)\n            sum_factors_n = sum_factors_105 * (1 + p + p ** 2)\n            return sum_factors_n\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # The sequence is symmetrical, so calculate the sum of the first half and double it\n    # First calculate the sum from 1 to 20\n    n = 20\n    first_half_sum = (n * (n + 1)) // 2\n    # The sequence is symmetrical, doubling the first half gives the full sum minus the peak number 20\n    full_sum = 2 * first_half_sum - n\n    return full_sum\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the flow rates of the pipes\n    a, b, c, total = symbols('a b c total')\n    \n    # Given the flow rate of B is twice that of A\n    equation1 = Eq(b, 2 * a)\n    \n    # If only A and C are turned on, the pool can be filled with 18 tons from A\n    # Hence, if the total capacity is 'total', then 18 tons are from A and the rest (total - 18) are from C\n    equation2 = Eq(18 * a + (total - 18) * c, total)\n    \n    # If only B and C are turned on, the pool can be filled with 27 tons from B\n    # Hence, if the total capacity is 'total', then 27 tons are from B and the rest (total - 27) are from C\n    equation3 = Eq(27 * b + (total - 27) * c, total)\n\n    # Solve the equations for the flow rates a, b, c, and total\n    solutions = solve((equation1, equation2, equation3), (a, b, c, total))\n    \n    return solutions[total]\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Equation for the sum of first n terms of an arithmetic sequence: Sn = n/2 * (a1 + an)\n    # where Sn is the sum of first n terms, a1 is the first term, and an is the n-th term.\n    # We have two equations based on the problem statement:\n    # S8 = 8/2 * (a1 + a8) = 32\n    # S22 = 22/2 * (a1 + a22) = 44\n\n    # From the first equation: 4 * (a1 + a8) = 32,\n    # Therefore, a1 + a8 = 8\n    # From the second equation: 11 * (a1 + a22) = 44,\n    # Therefore, a1 + a22 = 4\n\n    # Since it's an arithmetic sequence, difference (d) is the same:\n    # a8 = a1 + 7d, a22 = a1 + 21d\n    # Replacing a8 and a22 in the equations, we get:\n    # a1 + a1 + 7d = 8\n    # a1 + a1 + 21d = 4\n\n    # Simplifying both equations:\n    # 2a1 + 7d = 8 => equation (1)\n    # 2a1 + 21d = 4 => equation (2)\n\n    # Subtracting equation (1) from equation (2):\n    # 14d = -4 => d = -4/14 => d = -2/7\n\n    # Using d to find a1 from (1):\n    # 2a1 - 7*(2/7) = 8\n    # 2a1 - 2 = 8\n    # 2a1 = 10\n    # a1 = 5\n\n    # Given: The sum of first n terms Sn = n/2 * (2a1 + (n-1)d)\n    # We need to find S15 = 15/2 * (2*5 + (15-1)(-2/7))\n    S15 = 15 / 2 * (2 * 5 + (15 - 1) * (-2 / 7))\n    return S15\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    rex_score = 66\n    questions_answered = total_questions - 1  # Rex answered all but one question\n\n    # Hypothetical situation: If all answered questions were correct\n    # This would give the maximum possible score for the answered questions\n    max_score_answered = score_correct * questions_answered\n\n    # Calculate the difference between the hypothetical max score and Rex's actual score\n    score_difference = max_score_answered - rex_score\n\n    # Each incorrect answer causes a loss larger than just not getting the points for a correct answer\n    # This difference is score_correct - Math.abs(score_incorrect)\n    points_lost_per_incorrect = score_correct + abs(score_incorrect)\n\n    # The number of incorrect answers can be calculated by dividing the score difference\n    # by the additional points lost per incorrect answer\n    incorrect_answers = score_difference // points_lost_per_incorrect\n\n    # The number of correct answers is the remainder of questions answered minus the incorrect ones\n    correct_answers = questions_answered - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Assuming Alberta's age is between 10 and 99\n        reversed_age = int(str(age)[::-1]) + 1\n        if age == reversed_age * 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    for meatballs in range(1, 21):\n        if (20 - meatballs) % meatballs == 0 and (10 - meatballs) % meatballs == 0:\n            return meatballs\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # The total number of ways to paint 4 letters with 5 colors,\n    # with each letter having a different color is the number of permutations\n    # of 5 colors taken 4 at a time.\n    \n    # Number of permutations is given by P(n, r) = n! / (n - r)!\n    num_ways = factorial(5) / factorial(5 - 4)\n\n    return int(num_ways)\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = initial_amount * increase_fraction\n\n    ans = initial_amount + increase_amount\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    return \"4/25\" if fraction_value > decimal_value else \"0.17\"\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day_1 = symbols('remaining_after_day_1')\n    total_questions = 2 * (remaining_after_day_1 + 7)\n    remaining_after_day_2 = (remaining_after_day_1 - 5) / 2\n    equation = Eq(remaining_after_day_2 + 23, remaining_after_day_1)\n    \n    remaining_after_day_1_solution = solve(equation, remaining_after_day_1)\n    ans = total_questions.subs(remaining_after_day_1, remaining_after_day_1_solution[0])\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # 1 litre of water is 1000 ml\n    water_poured_per_cup = 200  # 200 ml poured into each cup\n    number_of_cups = 3\n    water_left = total_water - (water_poured_per_cup * number_of_cups)\n    return water_left\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months, planted_each_month = symbols('original_roses original_daisies months planted_each_month')\n    \n    # Equation for total flowers initially\n    equation1 = Eq(original_roses + original_daisies, 300)\n    \n    # Equation for roses after a few months\n    equation2 = Eq(original_roses + months * planted_each_month, 280)\n    \n    # Equation for daisies after a few months\n    equation3 = Eq(original_daisies + months * planted_each_month, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (original_roses, original_daisies, months, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    count = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Given 10th term and 15th term in the sequence\n    term_10 = 23\n    term_15 = 38\n\n    # The common difference can be found by dividing the difference of the terms\n    # by the difference of their positions in the sequence\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # To find the 12th term, we can calculate the difference in position from the 10th term\n    # and add the respective multiple of the common difference to the 10th term\n    term_12 = term_10 + common_difference * (12 - 10)\n\n    return int(term_12)\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    total_correct = (20 / 100 * 10) + (80 / 100 * 20) + (90 / 100 * 30)\n    overall_percentage = (total_correct / total_problems) * 100\n\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Square brick dimensions in centimeters\n    large_brick_side_cm = 6 * 10\n    small_brick_area_cm2 = 64\n\n    # Area of each large brick in cm^2\n    large_brick_area_cm2 = large_brick_side_cm * large_brick_side_cm\n\n    # Total area covered by all large bricks\n    total_area_cm2 = large_brick_area_cm2 * 80\n    \n    # Number of small bricks needed to cover the same area\n    small_bricks_needed = total_area_cm2 / small_brick_area_cm2\n\n    return small_bricks_needed\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = '134578'\n    max_number = 0\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return (i, n // i)  # Return a tuple of factors\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls - boys, 30)\n    equation2 = Eq(girls + boys, 500)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_ribbon_a = 10\n    length_ribbon_b = 5 * length_ribbon_a\n    total_length = length_ribbon_a + length_ribbon_b\n    return total_length\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boy_diff = 31\n    total_students = 0\n    \n    for side_length in range(1, 500, 2):  # We assume the square has an odd number of sides\n        boys = side_length * 4 - 4  # Number of boys on the outer layer, minus the 4 corners\n        girls = (side_length - 2) * 4 if side_length > 1 else 0  # Number of girls on the second layer\n        if boys - girls == boy_diff:\n            total_students = side_length ** 2\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    num_players = 5\n    team_size = 3\n    return comb(num_players, team_size)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    profit_amount = 5000\n    \n    # Calculate cost price using profit percentage\n    cost_price = selling_price / (1 + (profit_percentage / 100))\n    \n    # Calculate new profit percentage using profit amount\n    new_profit_percentage = (profit_amount / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "import math\n\ndef solution():\n    # The first term 4 is raised to the power of 2018.\n    # The number of digits in 4 raised to any power can be determined by log10(4^power) + 1\n    # Since log(ab) = b*log(a), this can be simplified to 2018 * log10(4) + 1.\n    digits_of_4_power = 2018 * math.log10(4)\n\n    # Similarly, for the second term, 25^2018, we can find the number of digits as follows:\n    # Since 25^2018 is a perfect square, it can be represented as (5^2)^2018 which simplifies to 5^4036.\n    # So the number of digits is 4036 * log10(5) + 1.\n    digits_of_25_power = 4036 * math.log10(5)\n\n    # The total number of digits in the number A will be the sum of the digits of both terms, since they are multiplied.\n    total_digits = math.floor(digits_of_4_power + digits_of_25_power) + 1\n\n    return total_digits\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(x + 1, 14):\n            z = 14 - x - y\n            if z > y:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of apples\n    x = symbols('x')\n\n    # Equation representing the apples remaining after selling 1/5 on Monday and 80 on Tuesday\n    # and 30% left of the initial apples\n    equation = Eq((x - (x / 5) - 80), x * 0.3)\n\n    # Solving for x\n    num_apples = solve(equation, x)\n\n    # Finding the number of apples left in the end\n    apples_left = num_apples[0] * 0.3\n    return apples_left\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    number_of_pieces = 2\n\n    length_of_each_piece = length_of_wood / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometres = 1.5\n    metres = kilometres * 1000\n    return metres\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_average = 140\n    total_sum = total_average * 9\n    number_removed = 180\n    new_sum = total_sum - number_removed\n    new_average = new_sum / 8\n    return new_average\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + blue + green\n    return total_markers\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first even number be x, then the others are x+2, x+4,..., x+12\n    # The fourth number is x+6\n    # According to the problem statement, the fourth number is greater than one-third of the sum of first and seventh numbers by 6\n    # Which gives us the equation: (x+6) = (1/3)*(x+x+12)+6\n    # Simplify the equation to find x\n    x = symbols('x')\n    equation = Eq(x+6, (1/3)*(x+x+12)+6)\n    solution = solve(equation, x)\n    first_even_number = solution[0]\n    \n    # Now we have the first even number, we can calculate the sum of the seven consecutive even numbers\n    sum_seven_numbers = sum([first_even_number + 2*i for i in range(7)])\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd = 1\n    common_difference = 2\n    nth_odd = first_odd + (20 - 1) * common_difference\n    return nth_odd\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends, the number of trees per side is the highway length divided by\n    # the distance between trees plus one (for the tree at the end)\n    trees_per_side = (highway_length // distance_between_trees) + 1\n\n    # The total number of trees is twice the number of trees per side\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of each color orchid\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    # Equations according to the problem statement\n    equation1 = Eq(purple, 2*yellow)              # Ben has twice as many purple orchids as yellow orchids\n    equation2 = Eq(yellow, 3*white)               # Ben has three times as many yellow orchids as white ones\n    equation3 = Eq(red + white, 38)               # There are 38 red and white orchids\n    equation4 = Eq(red, 28)                       # There are 28 red orchids\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # Since the Ferrari driver finished in second place after overtaking 5 cars,\n    # it implies that there were originally 1 (Ferrari's final position) + 5 (cars overtaken) ahead\n    # Therefore, the total number of cars is:\n    ans = 1 + 5 + 1 # the +1 at the end is for the Ferrari car itself\n    return ans\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # Calculate the difference in age between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # Determine the age of Eddie when he will be 18\n    eddies_age_future = 18\n    \n    # Determine Mike's age when Eddie is 18\n    mikes_age_future = eddies_age_future + age_difference\n\n    return mikes_age_future\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_angles = (sides - 2) * 180\n    interior_angle = sum_of_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(y, x):\n    men_days_per_wall = 2 * 3\n    total_walls_men_days = men_days_per_wall * x\n    days_for_y_men = total_walls_men_days / y\n\n    return days_for_y_men\n\nans = solution(y, x)"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_4 = 0\n    for i in range(1, 21):\n        num = int('5' * i)\n        sum_last_4 = (sum_last_4 + num) % 10000  # Keep only the last four digits\n    return sum_last_4\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percentage_men = 25 / 100\n    fraction_women = 1 / 5\n\n    men = total_people * percentage_men\n    women = total_people * fraction_women\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked_shirts = symbols('checked_shirts')\n    total_shirts = 72\n    white_shirts = 7 * checked_shirts\n    equation = Eq(white_shirts + checked_shirts, total_shirts)\n    solutions = solve(equation, checked_shirts)\n    return 7 * solutions[0]\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 2 != 0 and number % 9 == 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    # Loop through the range of numbers 1 to 99, since the number is less than 100\n    for num in range(1, 100):\n        # Check the conditions for the remainders\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            # If the number satisfies all conditions, return the number\n            return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    return sum([72, 60, 48, 36, 24, 12])\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Based on the question, it's necessary to provide the pattern referenced.\n    # Since there's no specific pattern provided in the text and no capability to \"insert pic\",\n    # I'm unable to implement a solution without further information about the pattern.\n    # Please provide additional details on the pattern for the question to be solved.\n    pass\n\n# The following line will generate a runtime error because the solution is not implemented.\n# ans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = 390\n\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(boys + girls, total_children)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Define the number of balls for each color\n    white_balls = 8\n    red_balls = 7\n    green_balls = 5\n    \n    # Calculate the minimum number of draws to ensure at least two balls of the same color\n    # using the Pigeonhole Principle:\n    # If there are n pigeonholes, and more than n pigeons are to be placed in them,\n    # at least one pigeonhole must contain more than one pigeon.\n    \n    # In this worst-case scenario, we pick the maximum possible different balls before getting a pair\n    # which would happen if we picked balls in sets of one of each color until we run out of one color.\n    # We need one more draw to ensure we have a pair of the same color.\n    \n    # If we pick one ball of each color until we run out of green balls (the color with the least amount),\n    # we will have picked (5 green + 5 white + 5 red) = 15 balls. One more draw will guarantee a pair.\n    guaranteed_pair_after = green_balls + 1\n\n    return guaranteed_pair_after\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = (three_quarters_of_number * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    # Brute force approach to find the minimum m\n    m = 1\n    while True:\n        sum_m = sum(int(digit) for digit in str(m))\n        sum_m_plus_1 = sum(int(digit) for digit in str(m + 1))\n        if sum_m == 5 * sum_m_plus_1:\n            return m\n        m += 1\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 2 / 100  # 2% less water than at the start of the hour\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # From January to April (4 months)\n    jan_to_apr = 300 * 4\n    # From May to July (3 months)\n    may_to_jul = 250 * 3\n    # From August to September (2 months)\n    aug_to_sep = 750\n    # From October to December (3 months)\n    oct_to_dec = 300 * 3\n\n    # Total amount spent in the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Total number of months in a year\n    total_months = 12\n\n    # Average amount spent per month\n    average_spent = total_spent / total_months\n\n    return average_spent\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    start_temp = 17\n    end_temp = -2\n    drop_in_temp = start_temp - end_temp\n    return drop_in_temp\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = men_fraction * total_passengers\n    women_count = women_percentage * total_passengers\n\n    children_count = total_passengers - men_count - women_count\n\n    return children_count\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    toms_age = 10\n    fathers_future_age = 70\n\n    # Let's assume father's current age is \"father_age\"\n    # When Tom reaches father's current age (let's call it \"father_age_now\"),\n    # father will be father's current age + difference in their ages right now\n    \n    # So, we have the following equation:\n    # father_age_now + (father_age_now - toms_age) = fathers_future_age\n    \n    # From the equation, we can solve for \"father_age_now\":\n    father_age_now = (fathers_future_age + toms_age) / 2\n    \n    return father_age_now\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    total_votes = 400\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    # Define a helper function to convert from base 10 to other bases and \n    # calculate the digit sum.\n    def to_base_and_sum(number, base):\n        digit_sum = 0\n        while number > 0:\n            digit_sum += number % base\n            number //= base\n        return digit_sum\n    \n    # Check each number less than 200 if it satisfies the condition for all bases.\n    potential_values = []\n    for N in range(200):\n        if (to_base_and_sum(N, 4) == 5 and \n            to_base_and_sum(N, 6) == 8 and\n            to_base_and_sum(N, 8) == 9):\n            potential_values.append(N)\n    \n    return potential_values\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_of_six_hotdogs = 1.10\n    cost_of_twelve_hotdogs = (cost_of_six_hotdogs / 6) * 12\n    return cost_of_twelve_hotdogs\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time format: HHMM\n    departure_time = \"0735\"\n    \n    # Convert departure time to datetime object\n    departure = datetime.strptime(departure_time, \"%H%M\")\n    \n    # Journey time is 1 hour and 35 minutes, add that to departure\n    arrival_time = departure + timedelta(hours=1, minutes=35)\n    \n    # Jeff then takes 40 minutes to walk to work\n    work_arrival_time = arrival_time + timedelta(minutes=40)\n    \n    # Format the time to HHMM\n    ans = work_arrival_time.strftime(\"%H%M\")\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 3 choices for the first digit (2, 3, or 0 if not at the beginning)\n    # There are 3 choices for the second digit (0, 2, 3)\n    # There are 3 choices for the third digit (0, 2, 3)\n    \n    # However, 0 cannot be the first digit of a three-digit number.\n    # So there are only 2 choices for the first digit (2 or 3)\n    first_digit_choices = 2\n    other_digit_choices = 3  # Second and third digits\n    \n    total_numbers = first_digit_choices * other_digit_choices * other_digit_choices\n    return total_numbers\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag = 16  # cost of each bag in pence\n    total_amount = 200  # total amount in pence (£2 = 200p)\n\n    num_bags = total_amount // cost_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    result = 8.3 * 40\n    return result\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(2, 100, 2):  # Even numbers less than 100\n        if number % 4 == 0 and number % 3 == 0:  # Multiple of four and three\n            square_root = int(number ** 0.5)\n            if square_root * square_root == number:  # Check if it's a square number\n                return number\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let's assume Chip had x acorns\n    # Then Dale had total_acorns - x acorns\n    # After giving 14 acorns, Chip has x - 14 and Dale has total_acorns - x + 14\n    # According to the problem, both Chip and Dale have the same number of acorns after the exchange\n    # So, x - 14 = total_acorns - x + 14\n    # Solving for x gives us:\n    # 2x = total_acorns + 28\n    # x = (total_acorns + 28) / 2\n    x = (total_acorns + 28) / 2\n    return x\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6     # Number of fiction books which are same\n    comic_books = 2       # Number of comic books which are same\n    \n    # Using the formula for permutations of indistinguishable objects:\n    # total permutations = total! / (fiction_books! * comic_books!)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ans\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):  # Since we're looking for a 2-digit number, start from 10\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    count = 0\n    sum_primes = 51\n\n    # As per the problem, let's start with the largest prime number less than 51 to minimize the number of primes\n    for prime in reversed(primes):\n        while sum_primes >= prime:\n            sum_primes -= prime\n            count += 1\n        \n        if sum_primes == 0:\n            break\n\n    return count\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    science_books, novels = symbols('science_books novels')\n    \n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (science_books, novels))\n    \n    return solutions[science_books]\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n\n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Amy is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if 3 * three_page_penpals + 4 * four_page_penpals == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_used_pie_kg = 750 / 1000\n    apples_used_juice_kg = 1025 / 1000\n\n    apples_left_kg = total_apples_kg - (apples_used_pie_kg + apples_used_juice_kg)\n    \n    return apples_left_kg\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    num_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / num_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 2*x, 12.75)\n    \n    longer_piece = solve(equation, x)[0] * 2\n    \n    return longer_piece\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Drawing all balls of the same color from one color, followed by 1 ball from the second color\n    # guarantees that the next ball drawn will be of the third color.\n    # Since there are 5 balls of each color, the worst case scenario is drawing all 5 balls from one color,\n    # followed by all 5 balls from a second color, and then the next ball will definitely be of the third color.\n    # Therefore, the answer would be 5 (first color) + 5 (second color) + 1 (guaranteed third color) = 11.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Given that counting from the left, her favorite book is the 14th book\n    # And there are 6 books on the right of her favorite book\n    # So total books = books on the left + her favorite book + books on the right\n    # Since her favorite book is counted as 14th from the left, it suggests that\n    # there are 13 books on the left side of her favorite book\n    left_books = 14 - 1  # 13 books on the left of her favorite book\n    favorite_book = 1    # her favorite book\n    right_books = 6      # 6 books on the right of her favorite book\n    \n    # Adding them all for total books\n    total_books = left_books + favorite_book + right_books\n\n    return total_books\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins = symbols('gigi lily coins')\n\n    equation1 = Eq(gigi - 120, 3 * (lily - 24))\n    equation2 = Eq(gigi, lily + coins)\n    equation3 = Eq(lily, 24 + coins)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins))\n\n    return solutions[coins]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(1, 21))\n    total_numbers = list(range(1, 21))\n    non_prime_cards = [num for num in total_numbers if num not in prime_numbers]\n\n    return len(non_prime_cards)\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since you can boil all 3 eggs simultaneously, the time is the same as boiling just one egg.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    num_cabins = (students + cabin_capacity - 1) // cabin_capacity\n    return num_cabins\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Since Brian is 14 and his father is 41, the difference in ages is 41 - 14 = 27 years.\n    # Let's call the number of years it will take until Brian's age is the reverse of his father's again \"n\".\n    # So, when Brian will be 14 + n, his father will be 41 + n.\n    # We are looking for n such that the last digit of Brian's age is the first digit of his father's age and vice versa.\n    # The following loop will find such an \"n\".\n\n    age_diff = 41 - 14\n    brian_age = 14\n    father_age = 41\n\n    # Loop starts at 1 because we are looking for the next time their ages will be reversed\n    n = 1\n    while True:\n        # Increment both ages by 1 for each year\n        brian_age += 1\n        father_age += 1\n        \n        # Check if Brian's age is the reverse of his father's\n        if str(brian_age).zfill(2) == str(father_age)[::-1].zfill(2):\n            break\n        \n        n += 1\n\n    return brian_age\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # hundreds digit must be odd (1 to 9)\n        for j in range(10):    # tens digit can be (0 to 9)\n            for k in range(10): # units digit could be (0 to 9)\n                if i + j + k == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Let x be the number of calories Dan can take in today\n    # Dan wants to take in less calories than yesterday, thus\n    # x < calories_yesterday\n\n    # We return a string representation of the inequality, as there's no numeric answer.\n    ans = f\"x < {calories_yesterday}\"\n    return ans\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n\n    total_dough_g = initial_dough_kg * 1000\n    used_dough_g = (cookie_dough_g * num_cookies) + (brownie_dough_g * num_brownies)\n    remaining_dough_g = total_dough_g - used_dough_g\n    \n    remaining_dough_kg = remaining_dough_g / 1000\n    \n    return round(remaining_dough_kg, 2)\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    n, a1, d = symbols('n a1 d')\n\n    # equations based on the given information\n    eq1 = Eq(a1 + (a1 + d) + (a1 + 2*d) + (a1 + 3*d), 124)  # sum of the first 4 terms\n    eq2 = Eq((a1 + (n-4)*d) + (a1 + (n-3)*d) + (a1 + (n-2)*d) + (a1 + (n-1)*d), 156)  # sum of the last 4 terms\n    eq3 = Eq(n*(2*a1 + (n-1)*d)/2, 210)  # sum of the whole sequence\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (n, a1, d))\n\n    # since we expect n to be a positive integer and it's the only value we're interested in\n    # we can filter the results\n    answer = next(sol[n] for sol in solutions if sol[n] > 0 and sol[n].is_integer)\n\n    return answer\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # On the second day, Pip ate half of the remaining and 2 less\n    # We work backwards, so add 2 then double the remaining biscuits\n    remaining_biscuits = 2 * (remaining_biscuits + 2)\n    \n    # On the first day, Pip ate half of all the biscuits and 4 more\n    # Again, work backwards, so add 4 then double the remaining biscuits\n    initial_biscuits = 2 * (remaining_biscuits + 4)\n    \n    return initial_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    daily_change = [5, -8]  # +5 on deposit days, -8 on spending days\n    total_days = 15\n    money = 100\n    for i in range(total_days):\n        money += daily_change[i % 2]\n\n    return money\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums // number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    # The pattern repeats every 5 numbers (70, 71, 72, 71, 70)\n    pattern_length = 5\n\n    # Find the index of the 1004th number in its pattern cycle\n    index_in_pattern = (1004 - 1) % pattern_length\n\n    # Define the pattern\n    pattern = [70, 71, 72, 71, 70]\n\n    # Get the 1004th number from the pattern\n    return pattern[index_in_pattern]\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    result = (436 + 721) - 22\n    return result\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    # this is an arithmetic sequence with a common difference of 3\n    first_term = 10\n    common_difference = 3\n    last_term = 298\n    \n    # number of terms 'n' can be calculated using the arithmetic sequence formula:\n    # last_term = first_term + (n - 1) * common_difference\n    n = ((last_term - first_term) // common_difference) + 1\n    \n    # sum of the arithmetic sequence can be calculated with formula:\n    # sum = n/2 * (first_term + last_term)\n    sum = n / 2 * (first_term + last_term)\n    \n    return int(sum)\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume 'f' is the number of friends and 'c' is the total number of chocolates\n    f, c = symbols('f c')\n    \n    # If she gave each friend 18 chocolates, she would have 41 excess\n    equation1 = Eq(f * 18 + 41, c)\n    # If she gave each friend 23 chocolates, she would be short of 34 pieces\n    equation2 = Eq(f * 23 - 34, c)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, c))\n    \n    # Getting the total number of chocolates\n    total_chocolates = solutions[c]\n    \n    # If she gave each friend 20 pieces, calculate the remaining chocolates\n    remaining_chocolates = total_chocolates - solutions[f] * 20\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    money_spent_on_book = total_money * book_percentage\n    remaining_money_after_book = total_money - money_spent_on_book\n    money_spent_on_dvd = remaining_money_after_book * dvd_percentage\n    remaining_money = remaining_money_after_book - money_spent_on_dvd\n\n    return remaining_money\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    for number in range(100, 1000):\n        is_multiple_of_27 = number % 27 == 0\n        is_multiple_of_7 = number % 7 == 0\n        sum_of_digits = sum([int(digit) for digit in str(number)])\n        is_sum_of_digits_17 = sum_of_digits == 17\n        is_perfect_square = int(number**0.5)**2 == number\n        is_factor_of_89100 = 89100 % number == 0\n\n        truth_count = sum([\n            is_multiple_of_27,\n            is_multiple_of_7,\n            is_sum_of_digits_17,\n            is_perfect_square,\n            is_factor_of_89100\n        ])\n\n        if truth_count == 3:\n            return number\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n    balloons_remaining = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Since Mulan can beat even the best boy soldier who can do 50 push-ups,\n    # the inequality representing the number of push-ups Mulan can do is:\n    # Mulan's push-ups > 50\n    mulan_push_ups = symbols('mulan_push_ups')\n    inequality = mulan_push_ups > 50\n\n    return inequality\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    from itertools import combinations\n\n    teams = 32\n    games_played = 24\n\n    total_games = sum(range(teams))\n    games_to_play = total_games - games_played\n\n    return games_to_play\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # The question can be restated as finding the minimum value\n    # of the maximum number such that the sum of 8 different\n    # positive integers equals 88.\n    # Starting with the smallest possible distinct integers\n    # 1, 2, ..., 7, we can calculate the minimum value of the\n    # 8th integer by subtracting the sum of the first 7 from 88.\n    total_candies = 88\n    # Smallest integers for the first 7 children\n    smallest_integers_sum = sum(range(1, 8))\n    # Subtracting from total to get the minimum for the 8th child\n    min_for_eighth_child = total_candies - smallest_integers_sum\n    \n    return min_for_eighth_child\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B first\n    # Stack A: 20 stones, Stack B: 16 stones\n\n    # To ensure Jerry wins, he must take stones such that the remaining\n    # stones in both stacks are equal after his turn. This will ensure that\n    # no matter what Tom does, Jerry can always mimic his moves and be the last to take.\n\n    # Stack B should be equal to Stack A after Jerry's move\n    # Thus, Jerry must take (16 - 20) stones from Stack B\n    jerry_stack = 'B'\n    jerry_stones = 16 - 20\n\n    # However, since Jerry cannot take a negative number of stones,\n    # he must take stones from Stack A to make them even\n    if jerry_stones < 0:\n        jerry_stack = 'A'\n        jerry_stones = -jerry_stones\n\n    return f'Jerry must take {jerry_stones} stone(s) from Stack {jerry_stack}.'\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n\n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls = 7x and number of boys = 9x\n    # According to the problem, 9x - 7x = 16, solving for x\n    x = 16 // 2  # Since 9x - 7x = 2x\n    \n    # Total pupils = number of girls + number of boys = 7x + 9x\n    total_pupils = 7 * x + 9 * x\n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = (1 + (1 + 3 * (37 - 1))) * 37 // 2\n    difference = correct_sum - 2011\n    mistake_position = difference // 6 + 1\n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters in cm\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    ways_to_select = comb(total_balls, balls_to_select)\n    return ways_to_select\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    target_fraction = 13/10\n    for a in range(1, 1000):\n        for b in range(1, 1000):\n            for c in range(1, 1000):\n                if 1 + 1/(a + 1/(b + 1/c)) == target_fraction:\n                    return a + 2*b + 3*c\n    return None\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let's denote the smallest number x, then the next numbers are x+1, x+2, x+3, x+4\n    # The sum of an arithmetic sequence is the average of the first and last number times the number of terms\n    # (x + (x+4))/2 * 5 = 160 => (2x + 4) * 5 = 160 => 10x + 20 = 160 => 10x = 140 => x = 14\n    # Hence the largest number will be x + 4, which gives us 14 + 4 = 18\n    \n    smallest_ball = 14\n    largest_ball = smallest_ball + 4\n    return largest_ball\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n    return days\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # find pattern of the last digit of 8's powers \n    last_digits = [8**i % 10 for i in range(1, 5)]  # Pattern repeats every four powers\n    # Find corresponding last digit for 8^30\n    index = (30 % 4) - 1  # Adjust for 0-based indexing\n    ans = last_digits[index]  # Get the ones digit from the pattern\n    return ans\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    day = 1\n    while (day * (day + 1)) // 2 <= 100:\n        day += 1\n    return day - 1\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_for_correct = 5\n    points_for_wrong = -3\n    total_points = 52\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if (correct_answers * points_for_correct + wrong_answers * points_for_wrong) == total_points:\n            return correct_answers\n\n    return None  # In case there is no solution, which shouldn't happen in this case\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    box_value = right_side / left_side\n\n    return box_value\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    difference = 5\n    last_term = 155\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_mass = 600\n    sugar_concentration = 0.48\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation for the total number of trees planted\n    equation1 = Eq(boys + girls, 100)\n    # Equation for the difference in trees planted by girls and boys\n    equation2 = Eq(girls, boys + 12)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    return 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    result = 19 + 4/5 + 199 + 4/5 + 1999 + 4/5 + 19999 + 4/5 + 199999 + 4/5\n    return result\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):       # a must be a non-zero digit\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    abcd = 1000*a + 100*b + 10*c + d  # 4-digit number\n                    abc = 100*a + 10*b + c            # 3-digit number\n                    ab = 10*a + b                     # 2-digit number\n                    if abcd + abc + ab + a == 1370:\n                        return abcd\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    ans = total_pence * fraction\n\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Assuming the youngest dwarf's age is x, the ages form an arithmetic sequence with common difference of 1 year.\n    # Let's denote the ages of the youngest three dwarfs as x, x+1, x+2.\n    # According to the information given in the question:\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (age of the youngest dwarf)\n\n    youngest_dwarf_age = 13\n\n    # The ages of the oldest three dwarfs will be x+4, x+5, x+6.\n    ages_of_oldest_three = (youngest_dwarf_age + 4) + (youngest_dwarf_age + 5) + (youngest_dwarf_age + 6)\n\n    return ages_of_oldest_three\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    required_total_age = 35\n    years_until_required_age = (required_total_age - current_total_age)\n\n    return years_until_required_age\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n    remaining_test_marks = (average_marks * total_tests) - total_marks_two_tests\n    return remaining_test_marks\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(1/d for d in range(1, 9) for numerator in range(1, d+1) for _ in range(2))\n    ans -= sum(1/d for d in range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the son's current age as 's', and the dad's current age as 'd'.\n    # 'd' and 's' are what we're trying to find out.\n    d, s = symbols('d s')\n\n    # According to the problem, six years ago, the dad's age (d-6) was 5 times the son's age (s-6), hence:\n    equation1 = Eq(d - 6, 5 * (s - 6))\n\n    # The sum of the dad's current age and the son's current age is 78:\n    equation2 = Eq(d + s, 78)\n\n    # Now we solve the system of equations.\n    solutions = solve((equation1, equation2), (d, s))\n\n    # We return the dad's current age as the solution.\n    return solutions[d]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    # Let x be the number of milk chocolates, y be the number of lollipops, \n    # and z be the total number of sweets.\n\n    # Based on the question:\n    # 6 = (2/7) * x, hence x = 21 (the number of milk chocolates)\n    x = 6 * (7/2)\n\n    # x = (3/4) * z, hence z = (4/3) * x (the total number of sweets)\n    z = (4/3) * x\n\n    return int(z)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    number = 1000 - 630\n    return number\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n*(n+1)//2)**2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Initialize a list to hold possible age combinations\n    possible_combinations = []\n\n    # Range is from min_age to min_age + 6\n    for min_age in range(1, 100):  # Assuming age cannot be negative or unrealistically high\n        ages = [min_age, min_age + 6]  # Set first two ages based on range requirement\n\n        # Try filling in remaining ages so that mode, mean, and median conditions are satisfied\n        for age3 in range(min_age, min_age + 7):\n            for age4 in range(min_age, min_age + 7):\n                for age5 in range(min_age, min_age + 7):\n                    temp_ages = ages + [age3, age4, age5]\n\n                    # Check if the current combination satisfies the conditions\n                    if mean(temp_ages) == 9 and median(temp_ages) == 8 and mode(temp_ages) == 7:\n                        possible_combinations.append(sorted(temp_ages))\n\n    # Filter out combinations where the ages are not exactly 5\n    possible_combinations = [combo for combo in possible_combinations if len(combo) == 5]\n\n    # Since we need the second oldest, we take index -2 from the sorted list of ages\n    # We take the first combination that is valid. Multiple valid combinations are not specified in the problem statement.\n    if possible_combinations:\n        second_oldest_age = possible_combinations[0][-2]\n        return second_oldest_age\n    else:\n        return None\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    from itertools import permutations\n    \n    # Create a set of all permutations of the digits in 3541 since all digits are correct\n    correct_digits = set('3541')\n    permutations_of_correct = set(permutations(correct_digits, 4))\n    \n    possible_numbers = set()\n    for p in permutations_of_correct:\n        num = ''.join(p)\n        \n        # Check if two digits match 1703 in the correct position\n        if (num[0] == '1' and num[2] == '0') or \\\n           (num[0] == '1' and num[3] == '3') or \\\n           (num[1] == '7' and num[2] == '0') or \\\n           (num[1] == '7' and num[3] == '3') or \\\n           (num[2] == '0' and num[3] == '3'):\n            continue  # skip numbers that match two digits with 1703 in correct positions\n\n        # Check if any digits match 2745 in the same position\n        if num[0] == '2' or num[1] == '7' or num[2] == '4' or num[3] == '5':\n            continue  # skip numbers that share the same position with 2745\n\n        # All checks passed, add to possible numbers\n        possible_numbers.add(num)\n    \n    # There should be only one number that passes all conditions\n    if len(possible_numbers) != 1:\n        raise ValueError(\"There should be only one possible number that satisfies all conditions.\")\n    \n    return possible_numbers.pop()\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    # The number of arrangements for n different items is n!\n    number_of_books = 3  # math book, English book, and science book\n    arrangements = factorial(number_of_books)\n\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n   # A can't be first or last, so can occupy any of the 3 middle positions.\n    A_positions = 3\n    # For the remaining 4 positions, we need to arrange 4 people which is a permutation of 4.\n    others_permutations = 4 * 3 * 2 * 1  # This is 4!\n    # Total ways to line up is the product of the two.\n    total_ways = A_positions * others_permutations\n    return total_ways\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    from math import ceil, log2\n\n    # The number of rounds needed in a knockout tournament is the ceiling value\n    # of the base-2 logarithm of the number of players.\n    num_players = 16\n    rounds = ceil(log2(num_players))\n\n    return rounds\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let y be the number of yellow flowers\n    # Therefore, red flowers will be 3y and pink flowers will be y - 7\n\n    # Given that there are 3 pink flowers\n    pink_flowers = 3\n    # We can find the number of yellow flowers\n    yellow_flowers = pink_flowers + 7\n    # Now we can find the number of red flowers\n    red_flowers = 3 * yellow_flowers\n    # Finally, we calculate the total number of red and yellow flowers\n    total_red_and_yellow = red_flowers + yellow_flowers\n\n    return total_red_and_yellow\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # In the morning: boys = 1.5 * girls\n    morning_eq = Eq(boys, 1.5 * girls)\n\n    # After adding 12 boys and 12 girls\n    afternoon_boys = boys + 12\n    afternoon_girls = girls + 12\n\n    # In the afternoon: the ratio of number of boys to girls became 19:14\n    afternoon_eq = Eq(19 * afternoon_girls, 14 * afternoon_boys)\n\n    # Solve the system of equations\n    solutions = solve((morning_eq, afternoon_eq), (boys, girls))\n\n    # Calculate total number of children in the afternoon\n    total_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_afternoon\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Ratio of apples to oranges is 3:8\n    equation1 = Eq(apples / oranges, 3/8)\n    \n    # If we remove one apple, the ratio changes to 1:3\n    equation2 = Eq((apples - 1) / oranges, 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, hundreds):\n            for ones in range(hundreds, 10):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    for pencils in range(11):\n        notebooks = 10 - pencils\n        if pencils * 9 + notebooks * 3 == 48:\n            return pencils\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n    \n    def derangement(n):\n        # Calculate number of derangements (permutations where no element appears in its original position)\n        # Formula is !n = (n - 1) * (!(n - 1) + !(n - 2))\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    # Number of students\n    n = 6\n    \n    ans = derangement(n)\n    return ans\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the prices of the football and volleyball\n    football, volleyball = symbols('football volleyball')\n    \n    # Create equations based on the given information\n    equation1 = Eq(1 * football + 2 * volleyball, 60)  # $60 for 1 football and 2 volleyballs\n    equation2 = Eq(2 * football - 16, 60)              # $60 returns $16 when buying 2 footballs\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (football, volleyball))\n    \n    # Get the price of one volleyball\n    volleyball_price = solutions[volleyball]\n\n    return volleyball_price\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    seats_per_row = 36\n    total_students = 500\n    first_floor_seating = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_seating\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    term = 56\n    ratio = 56 / 28\n    next_term = term * ratio\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    sum = 0\n    for i in range(1, 32, 2):\n        sum += i\n        if i + 1 < 32:\n            sum -= i + 1\n    return sum\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    sequence = ''.join(str(i) for i in range(3, 48))\n    digit_index = sequence.find('7') + 1\n    return digit_index\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    helen_now = (helen_original + oliver_original) // 2 + 5\n    return helen_now\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(2, n+1):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n    \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the six consecutive even numbers as a sequence with a common difference of 2\n    # Let the first number of the sequence be x\n    x = symbols('x')\n    sum_of_numbers = Eq(x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10), 510)\n    \n    # Solve for x\n    first_number = solve(sum_of_numbers, x)[0]\n    \n    # Calculate the mean\n    mean = (first_number + (first_number + 10)) / 2\n    \n    # Calculate the median\n    # Since the numbers are consecutive even numbers,\n    # the median is the average of the 3rd and 4th numbers\n    median = ((first_number + 4) + (first_number + 6)) / 2\n    \n    # Calculate the difference between the mean and the median\n    difference = mean - median\n\n    return int(difference)\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_ratio = 0.65\n    sugar_weight = total_weight * sugar_ratio\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n    \n    final_height = initial_height + climb_up_1 - climb_down + climb_up_2\n    \n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5 ** 100\n    num_digits = math.floor(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the mass of mangoes and s be the mass of strawberries\n    m, s = symbols('m s')\n    \n    # Equation based on the given information\n    equation1 = Eq(m, s + 448)         # m is 448g more than s\n    equation2 = Eq(s, 2 * (m - 900))   # s is twice the mass of (m - 900g)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # As the numbers are consecutive, their average value is the sum divided by the number of terms\n    average = 40 / 5\n    \n    # The smallest number is 2 less than the average (since the numbers are evenly distributed around the average)\n    smallest = average - 2\n    \n    return int(smallest)\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    # Total natural numbers from 1 to 99\n    total_numbers = 99\n    # Given number of prime numbers\n    prime_numbers = 25\n    # Number of composite numbers equals total numbers minus prime numbers minus 1 (for the number 1)\n    composite_numbers = total_numbers - prime_numbers - 1  # -1 for excluding the number 1 (which is neither prime nor composite)\n\n    return composite_numbers\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    answer = 2 * 13 * 3.5\n    return answer\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39\n    n12 = 57\n    d = (n12 - n4) / (12 - 4)  # Difference of the sequence\n    n1 = n4 - (3 * d)  # Calculate the first term\n    return n1\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '', '', '', '3', '', '', '', '5', '', '', '', '2']\n    for i in range(1, 10):\n        if str(i) not in digits:\n            digits[digits.index('')] = str(i)\n    return int(''.join(digits))\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0134689'\n    all_five_digit_numbers = set(int(''.join(p)) for p in permutations(digits, 5) if p[0] != '0')\n    multiples_of_nine = [num for num in all_five_digit_numbers if num % 9 == 0]\n    \n    M = max(multiples_of_nine)\n    N = min(multiples_of_nine)\n    \n    return (M - N) // 9\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000004\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n\n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n    return correct_sum\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30 = 30 * 0.30\n    salt_20 = 20 * 0.20\n    total_salt = salt_30 + salt_20\n    target_concentration = 0.10\n\n    salt_final = total_salt / target_concentration\n    total_water_added = salt_final - (30 + 20)\n\n    return total_water_added\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    # Let the integer in the box be x\n    # The equation then can be written as x * x + x = 380\n    # Simplifying the equation x^2 + x - 380 = 0\n\n    # We can use the quadratic formula to find the roots of the equation\n    # x = (-b ± √(b^2-4ac)) / 2a\n    # a = 1, b = 1, c = -380\n\n    a = 1\n    b = 1\n    c = -380\n\n    # Calculate the determinant (b^2 - 4ac)\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the two solutions of x\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n\n    # Since we are looking for an integer solution, we return the integer\n    ans = int(max(x1, x2))  # We take the max because x could be negative that doesn't fit our puzzle's constraint\n    return ans\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600       # Johnson's speed in meters per minute\n    vicky_speed = 250         # Vicky's speed in meters per minute\n    race_distance = 3000      # Total distance of the race in meters\n\n    # Time it takes Johnson to finish the race\n    johnson_time = race_distance / johnson_speed\n    # Time it takes Vicky to finish the race\n    vicky_time = race_distance / vicky_speed\n\n    # Johnson finishes the race this many minutes earlier than Vicky\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n\n    proportion = len(prime_numbers) / total_numbers\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Since there are 4 patterns and we want at least 3 cards with the same number,\n    # in the worst case scenario, we can draw all four different patterns of a number (1 set of 4)\n    # for 12 different numbers without getting 3 of the same number.\n    # So we have 4 cards * 12 numbers = 48 cards that could all be different in number-pattern pairs.\n    # The next card we draw, regardless of its number, will be the third card of that number, as there\n    # are only 13 possible numbers and we have already drawn 12 sets of 4 patterns.\n    # Therefore, we need to draw 48 cards + 1 more card to ensure we have at least 3 cards with the same number.\n    return 48 + 1\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To ensure we get 29 balls of one color, 28 balls of another color, and 10 of the last color\n    # we need to consider the worst-case scenario for each color.\n    # This can be calculated by taking the sum of:\n    # (one less than the desired number of each color) + (all of the balls of the last color).\n    \n    # Worst-case for getting 29 blue balls:\n    # (29-1 red balls) + (29-1 white balls) + (all 30 white balls)\n    # This gives us the total number of balls we would need to pick to guarantee at least 29 blue balls.\n    blue_case = (29 - 1) + (29 - 1) + 30\n\n    # Similarly, for 28 red balls:\n    # (28-1 blue balls) + (28-1 white balls) + (all 80 blue balls)\n    red_case = (28 - 1) + (28 - 1) + 80\n\n    # And for 10 white balls:\n    # (10-1 blue balls) + (10-1 red balls) + (all 80 blue balls and all 40 red balls)\n    white_case = (10 - 1) + (10 - 1) + 80 + 40\n\n    # The minimum number of balls we need to pick is the maximum of these cases.\n    ans = max(blue_case, red_case, white_case)\n\n    return ans\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n\n    sum_of_known_numbers = sum(known_numbers)\n    total_sum = mean_value * total_numbers\n\n    missing_number = total_sum - sum_of_known_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    return 1275 - 1 + 51\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n\n    return len(prices)\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFGH'):\n        # C should be in between A and B\n        if abs(perm.index('A') - perm.index('B')) != 1 and \\\n           perm.index('A') < perm.index('C') < perm.index('B'):\n            # D and E should be next to each other\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                # F and G should be next to each other\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    volume_transferred = symbols('volume_transferred')\n\n    # Concentration in each bottle before transfer\n    concentration_A_before = 0.10\n    concentration_B_before = 0.20\n\n    # Concentration in each bottle after transfer\n    # Bottle A\n    concentration_A_after = ((5 * concentration_A_before) - (concentration_A_before * volume_transferred) + (concentration_B_before * volume_transferred)) / 5\n\n    # Bottle B\n    concentration_B_after = ((3 * concentration_B_before) - (concentration_B_before * volume_transferred) + (concentration_A_before * volume_transferred)) / 3\n\n    # Equation representing the equality of concentrations\n    equation = Eq(concentration_A_after, concentration_B_after)\n\n    # Solving the equation for volume_transferred\n    volume_transferred_solution = solve(equation, volume_transferred)\n\n    return volume_transferred_solution[0]\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    total = 0\n    num = 123\n    for _ in range(123):\n        total += num\n        num = num * 10 + 3\n    return (total // 100) % 10\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Ratio of length to breadth of the painting\n    ratio_length_to_breadth = 5 / 2\n\n    # Length of the painting\n    length_painting = 90\n\n    # Length of the lego smaller than the length of the painting\n    length_lego_smaller = 70.5\n\n    # Calculating the length of the lego by subtracting the difference from the length of the painting\n    length_lego = length_painting - length_lego_smaller\n\n    # Calculating the breadth of the lego using the same ratio\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    return max(int(breadth_lego), breadth_lego - int(breadth_lego))\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount // 3  # Since Zoey has twice as much left\n\n    # Check which coin she lost\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    like_both = like_bananas + like_apples - total_people\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's total distance\n    jaan_speed = 8  # Jaan's speed in m/s\n    kane_distance = jaan_distance - 12.5  # Kane's total distance\n    # Since both Kane and Jaan are running for the same time (Jaan finishes the race),\n    # we have: time = distance/speed. Hence, Jaan's time to finish the race is:\n    jaan_time = jaan_distance / jaan_speed\n    # Using Kane's time (same as Jaan's) to find Kane's speed:\n    kane_speed = kane_distance / jaan_time  # Kane's speed in m/s\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p is £1.10\n\n    total_price = cake_price + milk_price\n    price_to_pay = total_price - voucher\n\n    return price_to_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_hourly_rate = 12\n    overtime_multiplier = 1 + 1/4\n    overtime_hourly_rate = normal_hourly_rate * overtime_multiplier\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n    total_earnings = (normal_hours * normal_hourly_rate) + (overtime_hours * overtime_hourly_rate)\n    return total_earnings\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    ans = 35 * 60 / 100\n    return ans\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # The range for two-digit numbers\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The given 99-digit number is a repetition of '928' 33 times.\n    repeated_number = '928' * 33\n    \n    # Convert the string representation to an actual number\n    number = int(repeated_number)\n    \n    # Find and return the remainder when the number is divided by 9\n    remainder = number % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the rate of work for John, Raj and Pete\n    john, raj, pete = symbols('john raj pete')\n\n    # Each person's contribution to a full job is their rate multiplied by the time they work (t)\n    # Sum of contributions when all 3 work together, they finish in 1 hour (60 minutes)\n    equation1 = Eq(john + raj + pete, 1)\n\n    # Sum of contributions when John and Raj work together, they finish in 1 hr 12 min\n    equation2 = Eq(john + raj, 1 / (60 + 12))\n\n    # Sum of contributions when Raj and Pete work together, they finish in 1 hr 30 min\n    equation3 = Eq(raj + pete, 1 / (60 + 30))\n\n    # Solve the equations to find the rate at which Raj works\n    solution_rates = solve((equation1, equation2, equation3), (john, raj, pete))\n    \n    # Raj's rate is the job per minute, so we take the reciprocal to find the time\n    raj_time_to_finish_job = 1 / solution_rates[raj]\n\n    return int(raj_time_to_finish_job)\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current ages of the two brothers\n    elder, younger = symbols('elder younger')\n\n    # Equation 1: The sum of their current ages is 42\n    equation1 = Eq(elder + younger, 42)\n\n    # Equation 2: A few years ago, younger was half the age of the current elder\n    # Let 'diff' be the difference in ages; this will be the same 'few years ago'\n    diff = elder - younger\n    equation2 = Eq(younger - diff, elder / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # Return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30/43)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = tens_digit * 10 + ones_digit\n            swapped_number = ones_digit * 10 + tens_digit\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # We can take out the worst-case scenario: All balls of the other colors\n    # except for two of the color we want to have at least three of. This way,\n    # the next ball we take out will guarantee us three of the same color.\n    \n    # 8 white, 7 blue, 5 green, 2 orange\n    # Take out 2 of each color except for one (let's say we leave out orange for the worst case)\n    # After that, the next ball we pick has to be the third one of a color.\n    balls_needed = (2 * 3) + 2 + 1 # 2 of each for white, blue, green and one more\n    \n    return balls_needed\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # Let n be the number of teams\n    # Each team plays with each other team twice, so we have a total of:\n    # n * (n - 1) matches, because each team plays n - 1 other teams twice.\n    # This counts each match twice (once for each team), so we divide by 2:\n    # Total matches = (n * (n - 1)) / 2\n    # We are given that the total matches are 30, so we have the equation:\n    # (n * (n - 1)) / 2 = 30\n    # Now we solve for n.\n    \n    matches = 30\n    # Multiply both sides by 2\n    n_times_n_minus_1 = matches * 2\n    \n    # Find a integer n that satisfies the equation n * (n - 1) = n_times_n_minus_1\n    n = 1\n    while n * (n - 1) != n_times_n_minus_1 and n <= matches:\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 40\n    # Initial sum of their ages is 34\n    # After x years, sum of their ages will be 34 + 2x (since both will be x years older)\n    # We want to find x such that 34 + 2x = 40\n\n    # Equation: 34 + 2x = 40\n    # Solve for x: 2x = 40 - 34\n    #              x = 6 / 2\n    #              x = 3\n\n    return 3\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the length per turn around the tree\n    length_per_turn = symbols('length_per_turn')\n    \n    # Create two equations based on the word problem\n    equation1 = Eq(10 * length_per_turn + 3, 12 * length_per_turn - 3)\n    \n    # Solve for the length of the rope per turn\n    length_solution = solve(equation1, length_per_turn)\n    \n    # Calculate the length for 8 turns\n    length_for_8_turns = 8 * length_solution[length_per_turn] + 3\n    \n    return length_for_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using Pigeonhole Principle, we divide the number of participants by the number of countries\n    # Since we want to make sure that at least 5 people are from the same country,\n    # The maximum participants to distribute before we get 5 in one country would be 4 per country\n    max_participants_with_less_than_5 = (5 - 1) * 11\n    \n    # To ensure at least 5 in one country, we need to add 1 more participant\n    at_least_5_participants_country = max_participants_with_less_than_5 + 1\n    \n    return at_least_5_participants_country\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    # Calculate the number of rows needed\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    \n    return rows_needed\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine = 54\n    ben = catherine - 5\n    ash = 3 * ben\n    return ash\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    eq1 = Eq(kitty + nora, 11)\n    eq2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((eq1, eq2), (kitty, nora))\n    \n    return solutions[kitty]\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "def solution():\n    for A in range(1, 10):   # A cannot be 0 as it is the first digit in a four-digit number\n        for B in range(10):  # B can be from 0 to 9\n            for C in range(10):  # C can be from 0 to 9\n                for D in range(10):  # D can be from 0 to 9\n                    if len(set([A, B, C, D])) == 4:  # Ensure that A, B, C, D are distinct\n                        # ABCD\n                        # -DABC\n                        # ------\n                        # CBCB\n                        # Check the conditions of the puzzle\n                        DABC = (D*1000 + A*100 + B*10 + C)\n                        ABCD = (A*1000 + B*100 + C*10 + D)\n                        CBCB = (C*1000 + B*100 + C*10 + B)\n                        if ABCD - DABC == CBCB:\n                            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    result = (28 - 6) / 2\n    return result\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    # Equation: (3/7) * total_money - (1 - 3/7) * total_money = 12\n    equation = Eq((3/7) * total_money - (4/7) * total_money, 12)\n\n    # Solve the equation for total_money\n    total_money_solution = solve(equation, total_money)\n\n    # Amount spent on the bag\n    amount_spent_on_bag = (3/7) * total_money_solution[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    result = 111\n    for i in range(1, 7+1):\n        result -= i\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Since the dwarfs were born in consecutive years, their ages will be x, x+1, x+2, x+3, x+4, x+5, x+6\n    # Given that the sum of the ages of the youngest three is 42, we have:\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n\n    total_youngest_three = 42\n    x = (total_youngest_three - 3) / 3  # Solving for x\n\n    # Now, we need to find the sum of the ages of the oldest three dwarfs:\n    # This will be (x+4) + (x+5) + (x+6)\n    total_oldest_three = (x + 4) + (x + 5) + (x + 6)\n    return int(total_oldest_three)\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_squares = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the number of toys made by each factory\n    A, B, C = symbols('A B C')\n\n    # Formulating the equations as per the problem statement\n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n\n    # Solving the system of equations for the number of toys made by each factory\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Extracting the solution for factory B\n    return solutions[B]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    total_debt = 5.04\n    months = total_debt / monthly_salary\n    return months\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # equation1 represents that giving 13 stickers to each pupil, Mr. Ya ends with 190 excess stickers.\n    # equation2 represents that giving 17 stickers to each pupil, Mr. Ya ends with 50 excess stickers.\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_avg = 13\n    additional_sausages = 21\n\n    initial_total = initial_trays * initial_avg\n    new_total = initial_total + additional_sausages\n    new_trays = initial_trays + 1\n    new_avg = new_total / new_trays\n    \n    return new_avg\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let x be the number of boys\n    # Then girls will be x + difference\n    # x + (x + difference) = total_pupils\n    # 2x + difference = total_pupils\n    # 2x = total_pupils - difference\n    # x = (total_pupils - difference) / 2\n    boys = (total_pupils - difference) / 2\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit: 1-9\n        for tens in range(0, hundreds):  # Tens digit: 0 to hundreds-1\n            for ones in range(hundreds + 1, 10):  # Ones digit: hundreds+1 to 9\n                count += 1  # Increment count for each valid V-number\n            for ones in range(1, tens):  # Ones digit: 1 to tens-1\n                count += 1  # Increment count for each valid V-number\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Convert 3 1/2 to an improper fraction\n    improper_fraction = (3 * 2 + 1) / 2\n    \n    # Divide the improper fraction by 1/4\n    ans = improper_fraction / (1 / 4)\n    \n    return ans\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the file price and storybook price\n    file_price, storybook_price = symbols('file_price storybook_price')\n\n    # Equation 1: 7 files and 4 storybooks cost £108\n    equation1 = Eq(7 * file_price + 4 * storybook_price, 108)\n\n    # Equation 2: 5 files and 3 storybooks cost £80\n    equation2 = Eq(5 * file_price + 3 * storybook_price, 80)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (file_price, storybook_price))\n\n    # Finding the total cost for 1 file and 1 storybook\n    total_cost = solutions[file_price] + solutions[storybook_price]\n\n    return total_cost\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    each_share = total // 2\n\n    money_to_give = brenda - each_share\n\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Calculate the speed of the train using the first bridge\n    # The total distance covered by the train to completely cross the bridge is the length of the train + length of the bridge\n    total_distance_first_bridge = 137 + 263\n    time_first_bridge = 20  # seconds\n    speed_train = total_distance_first_bridge / time_first_bridge  # speed = distance/time\n\n    # Time taken to cross the second bridge\n    time_second_bridge = 27  # seconds\n    \n    # Calculate the length of the second bridge using the speed of the train\n    # The total distance covered by the train to completely cross the second bridge is the length of the train + length of the second bridge\n    # speed_train (m/s) * time_second_bridge (s) = total_distance_second_bridge (m)\n    total_distance_second_bridge = speed_train * time_second_bridge\n    length_second_bridge = total_distance_second_bridge - 137  # Subtract the length of the train to find the length of the bridge\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from itertools import permutations\n\ndef solution():\n    all_perms = list(permutations(range(7), 3))\n    count = len(all_perms)\n    return count // 6 # dividing by 3! because the order of the 3 students doesn't matter\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for blue balls and red balls\n    blue, red = symbols('blue red')\n\n    # Set up the equation based on the given information\n    equation1 = Eq(blue + red, 125)  # The total number of balls is 125\n    equation2 = Eq(2/5 * blue, 3/5 * red)  # 2/5 of blue is 3/5 of red\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (blue, red))\n\n    # Calculate how many more blue balls than red balls\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the equations for the price of the watch and handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    pieces = 88\n    children = 8\n    # Start by giving each child one piece to satisfy \"at least one piece\"\n    pieces -= children  # pieces left after each child gets one\n    children_left = children\n\n    # Assign remaining pieces one by one from the child who gets the least\n    # to the one who gets the most, to find out the least number the\n    # child with the most pieces can get.\n    while pieces > 0:\n        for i in range(children_left):\n            pieces -= 1\n            if pieces == 0:\n                break\n            # If we reach the child who gets the most without breaking due to 0 pieces,\n            # it means all children can get an extra piece, so restart the distribution.\n            if i == children_left - 1:\n                children_left -= 1\n\n    # The last child will have received children - 1 additional pieces\n    most_pieces = (children - 1) + 1  # +1 for the initial piece given to every child\n\n    return most_pieces\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_2008_age = 80\n    daughter_1996_age = 40\n\n    # Calculating the ages difference in years\n    age_difference_in_years = 2008 - 1996\n\n    # Daughter's birth year\n    daughters_birth_year = 2008 - grandmother_2008_age\n\n    # Grandmother's age when daughter was born\n    grandmothers_age_at_birth = daughter_1996_age - age_difference_in_years\n\n    return grandmothers_age_at_birth\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n    total_ways = math.factorial(8) \n    together_ways = math.factorial(7) * 2 \n    c_d_together_ways = math.factorial(6) * 2 * 2  \n    c_d_together_but_a_b_together_too = math.factorial(5) * 2 * 2 \n    ans = together_ways - (c_d_together_ways - c_d_together_but_a_b_together_too)\n    return ans\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    # Equation representing the initial relation between Nicole's and Eddy's tokens\n    equation1 = Eq(nicole, 3 * eddy)\n    # Equation representing the tokens left after both Nicole and Eddy used some tokens\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    return 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5 * 1\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since A starts with the ball, and after 3 passes it needs to be back to A\n    # We are looking for permutations of the 3 remaining people across 3 passes,\n    # but we have to exclude the case where a person passes the ball back to themselves,\n    # since we are told they pass to others immediately.\n    \n    # The first pass can go to any of the three other people (B, C, or D).\n    # The second pass can then go to either of the remaining two people.\n    # The third pass then goes to the last remaining person, ensuring A gets the fourth pass.\n    \n    count = 3 * 2 * 1  # A -> (B, C, D) -> (2 options) -> (1 option) -> A\n    return count\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    difference_in_candy = 22 - 6\n    valeria_candy_now = (total_candy + difference_in_candy) // 2\n    return valeria_candy_now\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300  # total weight of the sugar solution\n    concentration = 0.35  # concentration of the sugar in the solution\n    sugar_weight = total_weight * concentration  # weight of only the sugar\n    water_weight = total_weight - sugar_weight  # weight of only the water\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Since we are comparing the product of 50 twelves to the product of 75 k's,\n    # we need to find the value of k for which 12^50 > k^75.\n    # Taking the 50th root of both sides, we get:\n    # 12 > k^(75/50)\n    # simplifying the exponent we get k^(3/2)\n    # We want to find the largest whole number k, so we find\n    # the floor of the 2/3 root of 12 as 2/3 is the inverse of 3/2.\n\n    k = int(12 ** (2/3))  # This will give the largest integer less than or equal to the 2/3 power of 12\n\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    # Final number of oranges after transactions\n    final_oranges = 133\n    # Oranges thrown away\n    thrown_away = 34\n    # Oranges bought\n    bought = 25\n\n    # Calculate the original number of oranges before transactions\n    # Original number = Final number - (Bought - Thrown Away)\n    original_oranges = final_oranges - (bought - thrown_away)\n\n    return original_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n    \n    ans = psi(psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    number_of_digits = 0\n    for i in range(1, 20):\n        number_of_digits += len(str(i))\n    return number_of_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = total_average * 36\n    girls_score = girls * girls_average\n    boys_score = boys * boys_average\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Time taken by 5 people to paint the fence\n    time_for_my_fence = 6  # hours\n    # Length of neighbour's fence compared to the original one\n    neighbours_fence_length_ratio = 2\n    # New time constraint for neighbour's fence\n    time_for_neighbours_fence = 5  # hours\n\n    # Initial work capacity (work done by 5 people in 6 hours)\n    work_capacity = 5 * time_for_my_fence\n    # Work needed for the neighbour's fence (which is twice as long)\n    work_needed = work_capacity * neighbours_fence_length_ratio\n\n    # Minimum people needed = Work needed / Time constraint\n    min_people_needed = work_needed / time_for_neighbours_fence\n\n    # Since we need an integer number of people, we should round up\n    from math import ceil\n    min_people_needed = ceil(min_people_needed)\n\n    return min_people_needed\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Assuming that all pets have the standard number of legs:\n    # Cats have 4 legs, dogs have 4 legs, rabbits have 4 legs, and birds have 2 legs.\n    \n    # Number of legs for cats, dogs, and rabbit\n    legs_from_cats_dogs_rabbit = (2 * 4) + (2 * 4) + (1 * 4)\n    \n    # Subtract the number of legs of cats, dogs, and rabbit from the total to find the number of legs from birds\n    legs_from_birds = 28 - legs_from_cats_dogs_rabbit\n    \n    # Since each bird has 2 legs, divide the number of bird legs by 2 to get the number of birds\n    num_of_birds = legs_from_birds // 2\n    \n    return num_of_birds\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_21_6_grams = cookies_per_gram * 21.6\n    return cookies_with_21_6_grams\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    # Alison walks from the first floor to the fifth floor in 12 minutes.\n    # This means Alison walks up 4 flights of stairs in 12 minutes (one flight to go from one floor to the next).\n    flights_in_12_minutes = 4\n    \n    # Calculate the number of flights Alison can walk in 1 minute.\n    flights_in_1_minute = flights_in_12_minutes / 12\n    \n    # Calculate the number of flights Alison can walk in 30 minutes.\n    flights_in_30_minutes = flights_in_1_minute * 30\n    \n    return flights_in_30_minutes\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert base 8 number to base 10\n    N_base10 = int('12345654321', 8)\n    # Calculate the remainders\n    remainder_sum = N_base10 % 7 + N_base10 % 9\n    return remainder_sum\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_past = 7\n    years_passed = 3 + 4  # from three years ago to four years later is 7 years in total\n\n    combined_future_age = combined_age_past + 2 * years_passed  # each cat ages the number of years passed\n\n    return combined_future_age\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for belt, wallet, and handbag\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    # Nelly spent $840 in total\n    total_cost = Eq(belt + wallet + handbag, 840)\n\n    # The handbag costs $300 more than the wallet\n    handbag_cost = Eq(handbag, wallet + 300)\n\n    # The wallet costs $54 more than the belt\n    wallet_cost = Eq(wallet, belt + 54)\n\n    # Solve the system of equations\n    solutions = solve((total_cost, handbag_cost, wallet_cost), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the cost of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Equations based on the problem statement\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)  # Mr Toh's purchase\n    equation2 = Eq(book + magazine, 10)             # Cost of 1 book and 1 magazine\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = n * (n + 1) * (2 * n + 1) / 6\n    sum_of_sequence = (n * (n + 1)) / 2\n    ans = sum_of_squares + sum_of_sequence - 1  # Subtract 1 since the sequence is up to 99*100, not 100*101\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    n = 60 // 3\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    exponents = factors.values()\n    divisors = 1\n\n    for exp in exponents:\n        # For each prime factor p^e, a perfect square divisor requires a power of 2n, where 0 <= n <= e/2.\n        divisors *= (exp // 2) + 1\n\n    return divisors\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if len({A, B, C, D}) == 4:\n                        if (A * 101 + C * 101 + D * 20 + B * 20) == 726:\n                            return A + B + C + D\n                            \nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Annabella might take all shirts of other colors before getting a yellow shirt.\n    # Numbers of other shirts are 6 (orange), 4 (pink), and 12 (brown).\n    # Annabella must take out all of them to ensure getting at least 1 yellow shirt.\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # Add one more to ensure at least one yellow shirt is taken out.\n    ans = non_yellow_shirts + 1\n    \n    return ans\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_pail, small_pail = symbols('big_pail small_pail')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(3*big_pail + 4*small_pail, 68)\n    equation2 = Eq(4*big_pail + 2*small_pail, 64)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n    \n    # Return the amount of water a big pail can hold\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division to ensure enough packs are bought\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    # Add the decimal numbers\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    ans = 9.8 + 99.8 + 199.8 + 2999.8 + 39999.8 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    solution_x = solve(equation, x)[0]\n    \n    return solution_x\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Given sequence: 94, __, 80, 73, 66\n    # First, try to identify the pattern between the known terms.\n    differences = [80 - 73, 73 - 66]\n\n    # Assuming it's a linear sequence, the common difference should be consistent between terms.\n    # Hence, calculate the expected difference.\n    expected_difference = sum(differences) // len(differences)\n\n    # Fill in the blank with the next term in the sequence using the expected difference.\n    blank = 80 + expected_difference\n\n    return blank\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_volume_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    ans = 620 // 20\n    return ans\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    multiples_of_3 = set(range(3, total_students + 1, 3))\n    multiples_of_5 = set(range(5, total_students + 1, 5))\n    both_multiples = multiples_of_3 & multiples_of_5\n\n    # Applying Inclusion-Exclusion Principle\n    students_facing_teacher = total_students - len(multiples_of_3 | multiples_of_5) + len(both_multiples)\n    \n    return students_facing_teacher\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we are only interested in the last digit of the number\n    # we can use modulus 10 to find the last digit since 2^1 = 2,\n    # 2^2 = 4, 2^3 = 8, 2^4 = 6, and 2^5 = 2 (mod 10) and this pattern repeats every 4\n    # Therefore, we just need to find the remainder when 859433 is divided by 4\n    remainder = 859433 % 4\n\n    if remainder == 1:\n        return 2\n    elif remainder == 2:\n        return 4\n    elif remainder == 3:\n        return 8\n    else:  \n        # this happens when remainder is 0, which corresponds to the last digit of 2^4\n        return 6\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    equation1 = Eq(jill, 6/5 * jess)\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the common multiplier for the ratio 2:9:8\n    avocados, peaches, lemons, x = symbols('avocados peaches lemons x')\n\n    # Original count of fruits\n    equation1 = Eq(avocados, 2 * x)\n    equation2 = Eq(peaches, 9 * x)\n    equation3 = Eq(lemons, 8 * x)\n\n    # After selling some fruits, the counts become\n    avocados_sold = avocados - 52\n    peaches_sold = peaches - 12\n    lemons_sold = lemons - 60\n\n    # The new ratio of peaches to lemons is 6:5\n    equation4 = Eq(peaches_sold / lemons_sold, 6 / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (avocados, peaches, lemons, x))\n\n    total_left = solutions[avocados_sold] + solutions[peaches_sold] + solutions[lemons_sold]\n\n    return total_left\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, symbols, Eq, solve\n\n    Peter = symbols('Peter')\n    Peter_age = lcm(2, 4, 6)\n\n    # Peter's age must be 1 more than a multiple of the LCM of 2, 4, and 6\n    # and also give a remainder of 5 when divided by 7.\n    equation = Eq(Peter % Peter_age, 1) & Eq(Peter % 7, 5)\n\n    # We start checking at the LCM of 2, 4, 6 plus 1, as this is the first number\n    # that leaves a remainder of 1 when divided by each of them.\n    age = Peter_age + 1\n    while not (age % 7 == 5):\n        age += Peter_age\n\n    return age\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    ans = 0\n    for i in range(1, 900, 2):\n        sum_ = 0\n        for j in range(i, 900, 2):\n            sum_ += j\n            if sum_ == 900:\n                ans = max(ans, (j - i) // 2 + 1)\n                break\n            elif sum_ > 900:\n                break\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # From the problem we have the following equations:\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 93\n\n    # To find the total weight, we can sum all three equations:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 93\n    # 2(Adam + Ben + Carl) = 292\n    # Adam + Ben + Carl = 292 / 2\n    # Adam + Ben + Carl = 146\n\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    smallest_number = 120 + (divisor - (120 % divisor)) + remainder\n\n    return smallest_number\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    # Start with the largest possible number which is made from all digits 1 to 7.\n    # Then check divisibility, while reducing the number by removing digits, to find the largest one.\n    # Since we are trying to maximize the number and it needs to be divisible by all its digits,\n    # we will try to keep the larger digits in the number and remove the smaller ones if necessary.\n    # Begin with 7, because it's the largest prime, then include numbers which are coprime to each other as adding\n    # non-coprime numbers doesn't help (like including both 6 and 3 or 2)\n\n    # Initialize the largest possible number as a string for easier manipulation\n    number = \"7654321\"\n    \n    # Check divisibility of each permutation, starting from the highest\n    for i in range(len(number), 0, -1):\n        # Generate permutations of the current length\n        from itertools import permutations\n        perms = permutations(number, i)\n        \n        # Check each permutation\n        for perm in perms:\n            perm_number = int(''.join(perm))\n            \n            # Check divisibility by all digits used\n            if all(perm_number % int(digit) == 0 for digit in perm):\n                return perm_number\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    ans = metres + centimetres / 100\n    return ans\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    # Score in the first test\n    first_test_score = 60\n    # Calculate the increase (25%) for the second test\n    second_test_score = first_test_score * (1 + 25 / 100)\n    # Calculate the decrease (20%) for the third test\n    third_test_score = second_test_score * (1 - 20 / 100)\n    # Calculate the total score\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal_amount = 5000\n    interest_rate = 0.03\n    time_period = 2\n\n    final_amount = principal_amount * ((1 + interest_rate) ** time_period)\n\n    return final_amount\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n\n    mean_saving = (january_saving + february_saving + march_saving) / 3\n\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f'{hour:02d}{minute:02d}'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    num_chocolate = 233\n    ans = all(num_chocolate % i != 0 for i in range(2, num_chocolate))\n    return ans\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    # Let the number of bookmarks be b and the number of pupils be p\n    # According to the problem, we can set up two equations:\n    # b = 4p + 8 (1)\n    # b = 6p - 10 (2)\n\n    # To find the number of bookmarks (b), we can equate the two equations:\n    # 4p + 8 = 6p - 10\n    # Solving for p:\n    # 2p = 18\n    # p = 9\n\n    # Substitute p back into either equation (1) or (2) to find b:\n    # Using equation (1): \n    # b = 4p + 8\n    # b = 4*9 + 8\n    # b = 36 + 8\n    # b = 44\n\n    # Hence, Mr. Ng has 44 bookmarks\n    return 44\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum([(7 * i) ** 2 for i in range(1, 16)])\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    return 4.22 + 31.49 + 0.76\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(131, 150))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else 56 // 4 + 1\n    last_multiple = 92 // 4\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():    \n    congruences = [\n        (2, 3),  # remainder 2 mod 3\n        (3, 4),  # remainder 3 mod 4\n        (4, 5)   # remainder 4 mod 5\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    still_water_speed = 15\n    time_downstream = 8\n    \n    # Calculate the speed of the current\n    # downstream_speed = still_water_speed + current_speed\n    # distance = downstream_speed * time_downstream\n    # 144 = (15 + current_speed) * 8\n    # 144 = 120 + 8 * current_speed\n    # current_speed = (144 - 120) / 8\n    current_speed = (distance - (still_water_speed * time_downstream)) / time_downstream\n    \n    # Calculate the speed of the ship upstream\n    # upstream_speed = still_water_speed - current_speed\n    upstream_speed = still_water_speed - current_speed\n    \n    # Calculate the time taken to travel upstream\n    # time_upstream = distance / upstream_speed\n    time_upstream = distance / upstream_speed\n    \n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n    \n    ans = comb(total_students, students_to_select)\n    \n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let h represent the daily food consumption of the hippo\n    # let k represent the daily food consumption of the kangaroo\n    h, k = symbols('h k')\n\n    # equation representing the difference in food consumption\n    equation1 = Eq(h, k + 45)\n\n    # equation representing the total food consumption after 20 days\n    equation2 = Eq(20 * h, 10 * 20 * k)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (h, k))\n\n    # total food consumed by the hippo in 20 days\n    total_hippo_food = solutions[h] * 20\n\n    return total_hippo_food\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    john_wait_time = 15 # John waited at 3:15 PM, which is 15 minutes past the hour\n    tom_arrival_time = 1 * 60 + 25 # Tom arrived 1 hour and 25 minutes later\n\n    total_minutes = john_wait_time + tom_arrival_time # Total minutes past 3 PM when they meet\n    meet_hour = 3 + total_minutes // 60 # Calculate hour\n    meet_minute = total_minutes % 60 # Calculate minute\n\n    # If the meeting hour is 12 or above we substract 12 to make it PM time\n    if meet_hour >= 12:\n        meet_hour -= 12\n\n    return (meet_hour, meet_minute)\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6),\n    ]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(1, 20) for i in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    a_rate = 1/15  # worker A's work rate per day\n    b_rate = 1/20  # worker B's work rate per day\n\n    # The portion of work done by A and B together in 2 days\n    work_done = 2 * (a_rate + b_rate)\n\n    # Remaining work\n    remaining_work = 1 - work_done\n\n    # Number of days worker A needs to finish the remaining job alone\n    days_needed = remaining_work / a_rate\n\n    return days_needed\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure two balls of the same color, consider worst-case scenario:\n    # Take 1 green, then all remaining blue, the next ball must be the same color as one already drawn.\n    max_different_balls = 1 + 8\n    # Next draw guarantees a matching pair, either green or blue.\n    balls_needed = max_different_balls + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    students_needed = 11 * num_zodiac_signs + 1\n    return students_needed\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_sequence = (first_term + last_term) * num_terms / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using the Pigeonhole Principle for the worst-case scenario:\n    # Take all yellow balls (5), then take all white balls (15), \n    # as we can still end up having 9 black balls at most\n    # Therefore, we add one more ball to be certain that it will be\n    # the 10th ball of the same color (black in this case).\n\n    balls_to_take = 5 + 15 + 1  # Yellow + White + one additional ball\n\n    return balls_to_take\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n    starting_seat = 3\n\n    last_seat = (total_candies + starting_seat - 1) % num_children\n    if last_seat == 0:\n        last_seat = num_children\n\n    return last_seat\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n\n    for perm in permutations(students):\n        A_index = perm.index('A')\n        B_index = perm.index('B')\n        C_index = perm.index('C')\n        D_index = perm.index('D')\n        E_index = perm.index('E')\n        F_index = perm.index('F')\n        G_index = perm.index('G')\n\n        # A must be between B and C\n        A_between_B_and_C = B_index < A_index < C_index or C_index < A_index < B_index\n\n        # D and E must be next to each other\n        D_and_E_together = abs(D_index - E_index) == 1\n\n        # F and G must not be together\n        F_and_G_not_together = abs(F_index - G_index) != 1\n\n        if A_between_B_and_C and D_and_E_together and F_and_G_not_together:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    days_spaghetti = 7\n    days_apple_pie = 3\n\n    least_common_multiple = lcm(days_spaghetti, days_apple_pie)\n\n    return 2 + least_common_multiple\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    \n    # Using the Inclusion-Exclusion Principle\n    both = children_with_dogs + children_with_cats - total_children\n    \n    return both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Arithmetic sequence formula sum: S = n/2 * (a1 + an)\n    # where n is the number of terms, a1 is the first term, and an is the last term.\n    # Table details have not been provided, thus we are going to use general variables for illustration purposes.\n    a1 = 1  # Assuming the table starts with 1 (as the first number)\n    an = 100  # Assuming the table ends with 100 (as the last number in the sequence)\n    n = (an - a1) + 1  # Total number of terms in the sequence (inclusive)\n    \n    S = n/2 * (a1 + an)  # Sum of the sequence\n    return S\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # The number of shirts she had was 36 less than the number of skirts\n    equation1 = Eq(shirts, skirts - 36)\n    \n    # After selling 2/3 of her shirts and 5/6 of her skirts, she had 72 shirts and skirts left in total.\n    equation2 = Eq((1 - 2/3) * shirts + (1 - 5/6) * skirts, 72)\n\n    # Solving the equations\n    solution = solve((equation1, equation2), (shirts, skirts))\n\n    return solution[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n    \n    cloaks_lengthwise = total_length // cloak_length\n    cloaks_widthwise = total_width // cloak_width\n    \n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n    \n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Given values\n    distance = 120  # miles\n    speed_outgoing = 20  # miles per hour\n    average_speed = 30  # miles per hour\n\n    # Using the average speed formula: average_speed = total_distance / total_time\n    # total_distance is twice the one-way distance (outgoing and returning)\n    total_distance = 2 * distance\n\n    # total_time = time_outgoing + time_returning\n    # time_outgoing = distance / speed_outgoing\n    time_outgoing = distance / speed_outgoing\n\n    # Let's denote the returning speed as speed_returning\n    # So total_time = time_outgoing + (distance / speed_returning)\n    # We already have a formula for average_speed:\n    # average_speed = total_distance / (time_outgoing + (distance / speed_returning))\n    # solving this for speed_returning gives:\n    # speed_returning = distance / (total_distance / average_speed - time_outgoing)\n\n    speed_returning = distance / (total_distance / average_speed - time_outgoing)\n\n    return speed_returning\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    ans, _ = solve_congruence(*congruences)\n   \n    while ans < 400:  # Make sure the result is between 400 and 800\n        ans += 5 * 6 * 11\n\n    return ans\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    total_ratio = nell_ratio + 5  # Joe's ratio is 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * total_ratio) / nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    \n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to cut a metal rod into two pieces.\n    # This means it takes 1 cut to have 2 pieces.\n    # To have 5 pieces, he needs 4 cuts in total.\n    # If each cut takes 2 minutes, then for 4 cuts:\n    time_per_cut = 2\n    number_of_cuts_needed = 4 # because 1 cut has already been made initially to have two pieces\n\n    total_time_needed = time_per_cut * number_of_cuts_needed\n    \n    return total_time_needed\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    initial_sum = initial_average * 3\n    final_sum = final_average * 4  # We will now have 4 numbers after adding the new number\n\n    number_to_add = final_sum - initial_sum  # This will give us the number that needs to be added to get the new average\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, sean, heman = symbols('jovan sean heman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, heman))\n\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[heman]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(0, 10): \n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    # Total number of hay-days is constant\n    total_hay_days = 12 * 15\n    # Number of days 20 horses can be fed\n    days_for_20_horses = total_hay_days / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    return 301 + 303 + 305 - 9\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    total_companies = 4\n    total_days = 5\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price_per_set = 78\n    sock_price_per_pair = 12\n\n    legs_per_alien = 5\n    num_aliens = 6\n\n    total_legs = legs_per_alien * num_aliens\n    total_shoes_cost = total_legs * shoe_price_per_set\n    total_socks_cost = total_legs // 2 * sock_price_per_pair\n\n    total_cost = total_shoes_cost + total_socks_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n\n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean = np.mean(data)\n    deviations = np.abs(data - mean)\n    mad = np.mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total_oranges = 13\n    kids = 3\n    \n    # Considering the problem as distributing n+k-1 identical objects into n boxes\n    ways = combinations_with_replacement(range(total_oranges+1), kids-1)\n    \n    # The number of ways to place 2 dividers among the oranges\n    count = len(list(ways))\n\n    return count\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # The original combination lock number: ABCD\n    # The new combination lock number when the digit in the ones place D is moved to the first place: DABC\n    # The condition is DABC = ABCD + 5877\n    \n    # Iterate all four-digit numbers to find the one that meets the condition\n    for number in range(1000, 10000):\n        original_number = str(number)\n        new_number = original_number[-1] + original_number[:-1]\n        if int(new_number) == number + 5877:\n            return number\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [total for total in possible_totals if (total - 4) % 7 == 0]\n    return ans\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_and_fifth = 20\n    total_distance = 200\n\n    distance_per_interval = distance_between_first_and_fifth / (5 - 1)\n    total_trees = (total_distance / distance_per_interval) + 1\n\n    return int(total_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $0.50 cookies David has,\n    # y be the number Jeremy has, and z be the number of $0.10 cookies.\n    x, y, z = symbols('x y z')\n    \n    # David's cookies cost is 3 times Jeremy's.\n    david_value = 0.50 * x\n    jeremy_value = 0.50 * y\n    equation1 = Eq(david_value, 3 * jeremy_value)\n    \n    # David had only $0.50 cookies\n    equation2 = Eq(x, 1)\n    \n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies.\n    equation3 = Eq(y, 3/5 * z)\n    \n    # There were 60 fewer $0.10 cookies than $0.50 cookies.\n    equation4 = Eq(z + 60, x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z))\n    \n    # Calculate the worth of Jeremy's cookies\n    jeremy_cookies_worth = solutions[y] * 0.50\n    \n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {i * j for i in numbers for j in numbers if i != j}\n    \n    for num in numbers:\n        for product in products:\n            if product % num == 0 and (product // num) in numbers:\n                return num\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Original expression\n    expression = (36 * 21) / (6 * 7)\n    # Correct answer\n    correct_answer = expression\n    return correct_answer\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    apples_fraction = 5 / 8\n    apples = total_fruit * apples_fraction\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12\n    rate_B = 1 / 8\n    combined_rate = rate_A + rate_B\n    time_to_fill_half_tank = (1 / 2) / combined_rate\n    return time_to_fill_half_tank\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    side = 1\n    \n    while (side + 1) ** 2 - side ** 2 != girls:\n        side += 1\n\n    boys = side ** 2\n    return boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age_now = 12\n    cousin_age_now = 2 * jane_age_now\n    cousin_age_in_8_years = cousin_age_now + 8\n    \n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position = ann_position + people_between + 1\n    # Since David is the second last person, there is one more person after him\n    total_people = david_position + 1\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8 = 0\n    page = 1\n    while count_8 < 22:\n        if '8' in str(page):\n            count_8 += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # According to the worst-case scenario from Pigeonhole Principle\n    # To ensure we get 29 balls of one color, 28 balls of the second and\n    # 10 balls of the last color, we have to account for the worst case picking.\n    # We might pick 28 blue, 27 red, and 9 white (one less than we need of each color)\n    # For the next three picks, to ensure we get the balls in the desired quantity,\n    # each of these picks should be from a different color.\n\n    worst_case_pick = (28 + 27 + 9) + 3  # The +3 ensures we get at least the minimum requirement\n    return worst_case_pick\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = (maths_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6 * 1.5 + 4 * x - 19\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n\n    difference = height_mountain_world - height_mountain_england\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(0, 50))\n    for num in primes:\n        if num < 50 and num > 9 and (num + 2) % 3 == 0 and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # For any number greater than or equal to 10, the last digit of its factorial is always 0\n    # Since 2014 is much larger than 10, the last digit of 2014! is 0\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    x = (30 - 2 * 3) / 2\n    return x\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Alicia spent half of her money\n    alicia_left = alicia / 2\n    \n    # Beth spent $60\n    beth_left = beth - 60\n    \n    # Casey spent three times as much as Alicia did, i.e., 3 * (alicia/2)\n    casey_left = casey - 3 * (alicia / 2)\n    \n    # All had the same amount of money left\n    equation1 = Eq(alicia_left, beth_left)\n    equation2 = Eq(beth_left, casey_left)\n\n    # Sum of all the money initially is $900\n    equation3 = Eq(alicia + beth + casey, 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    from sympy import factorint\n\n    # List of numbers in the product\n    numbers = [2, 2, 3, 8, 5, 5, 5]\n\n    # Factorize numbers and multiply the exponents of 2s and 5s\n    # Since the number of zeros at the end is determined by the pair of 2s and 5s\n    factor_dict = {}\n    for num in numbers:\n        factors = factorint(num)\n        for prime, exp in factors.items():\n            if prime in factor_dict:\n                factor_dict[prime] += exp\n            else:\n                factor_dict[prime] = exp\n\n    # The number of zeros at the end is equal to the min number of pairs of 2 and 5\n    num_zeroes = min(factor_dict.get(2, 0), factor_dict.get(5, 0))\n\n    return num_zeroes\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_numerator = 6\n    original_denominator = 20\n\n    # The fractions are equivalent, so the missing denominator can be found by\n    # setting up a proportion and solving for the missing value.\n    ans = (numerator * original_denominator) / original_numerator\n    \n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Working backward from the final result\n    final_result = 1\n    step_3 = final_result + 8\n    step_2 = step_3 * 8\n    step_1 = step_2 / 3\n    original_number = step_1 - 6\n\n    # Solving the equation for x\n    equation = Eq(x + 6, original_number)\n    solved_x = solve(equation, x)[0]\n\n    return solved_x\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n    \n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n    \n    # The total number of cookies eaten over the 5 days is an arithmetic series\n    # where the first term is x and each subsequent term increases by 6\n    # The sum of an arithmetic series can be computed as n/2 * (first_term + last_term),\n    # where n is the number of terms\n    # In this case, n = 5 days, and the last term is x + 6 * (5 - 1)\n    equation = Eq(5/2 * (x + (x + 6 * (5 - 1))), 100)\n\n    # Solving for x gives us the number of cookies eaten on the first day\n    first_day_cookies = solve(equation, x)[0]\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    number_of_boxes = 8\n\n    # Calculating the final number of seashells Elaine has after giving and picking\n    final_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_seashells)\n\n    # Dividing the final number of seashells by the number of boxes\n    seashells_per_box = final_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for number in range(1, 90):\n        if number % 9 == 0 and (number + 1) % 5 == 0 and all((number - 1) % i != 0 for i in range(2, int((number - 1) ** 0.5) + 1)):\n            return number\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    return 18 / 100 * 250\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    ways_for_men = factorial(4)\n    ways_for_women = factorial(4)\n\n    return ways_for_men * ways_for_women * 2\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n    return total_questions\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # total number of permutations for 5 letters\n    repeat_h = factorial(2)       # number of permutations for the repeated 'H' (2 H's)\n    repeat_p = factorial(2)       # number of permutations for the repeated 'P' (2 P's)\n\n    # Divide total permutations by permutations of repeated letters\n    num_ways = total_letters // (repeat_h * repeat_p)\n\n    return num_ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    ali_pack_cost = 2.40\n    ali_per_roll = ali_pack_cost / 8\n    mya_per_roll = ali_per_roll * 2\n    mya_pack_cost = mya_per_roll * 3\n    return mya_pack_cost\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total = sum(solutions.values())\n\n    return total\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2/5\n    total_students = girls / (1 - fraction_boys)\n    boys = total_students * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    number = 96\n    prime_factors = {}\n    factor = 2\n\n    while number > 1:\n        while number % factor == 0:\n            prime_factors[factor] = prime_factors.get(factor, 0) + 1\n            number //= factor\n        factor += 1\n\n    factors_count = 1\n    for exponent in prime_factors.values():\n        factors_count *= (exponent + 1)\n\n    return factors_count\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2  # Including both Peter and John\n    total_people = people_in_front_of_peter + people_behind_john + peter_and_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # Noon in 24-hour format\n    flight_duration = 4  # Duration of the flight in hours\n    time_zone_difference = 3  # St Petersburg is 3 hours ahead of England\n    arrival_time = (departure_time + flight_duration + time_zone_difference) % 24\n    \n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 2):\n        n, o = p\n        if n != 0:  # N cannot be zero as it is a two-digit number\n            no = n * 10 + o\n            if 2 * no == o * 10 + n:\n                return no\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([-1 if i % 2 == 0 else 1 for i in range(50, 31, -2)]) * (50 - 32 + 1)\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors, so to guarantee a pair of the same color,\n    # Cindy must take out one sock of each color plus one more sock.\n    # The worst-case scenario is taking one of each color first, not forming a pair,\n    # and then the next sock will definitely form a pair with one of the previously taken out socks.\n\n    # Number of colors:\n    num_colors = 3\n\n    # One sock of each color + 1 to guarantee a pair:\n    socks_to_guarantee_pair = num_colors + 1\n\n    return socks_to_guarantee_pair\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    weight_in_kg = 2.5\n    ans = weight_in_kg * kg_to_grams\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km per 5 cm\n    distance_on_map_cm = 12  # distance on map in cm\n    distance_on_ground_km = distance_on_map_cm * scale_ratio  # converting map distance to ground distance\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    prod = 1\n    for i in range(2, 51):\n        prod *= (1 / i - 1 / (52 - i))\n    return prod\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    \n    # Calculate the number of boys using the fraction and deduce the number of girls\n    sweets_for_boys = fraction_boys * total_sweets\n    number_of_boys = sweets_for_boys / sweets_per_boy\n    number_of_girls = (total_sweets - sweets_for_boys) / sweets_per_girl\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2  # speed in kilometers per hour\n    time_seconds = 24  # time in seconds\n\n    speed_mps = speed_kmh * (1000 / 3600)  # convert speed to meters per second\n    distance_meters = speed_mps * time_seconds  # calculate distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Pip's statement is not entirely correct because the definition of a composite number is a positive integer greater\n    # than 1 that has at least one divisor other than 1 and itself.\n    # However, 1 is neither prime nor composite by the standard definition. So the statement fails to acknowledge this exception.\n\n    # Checking number 1 to see if it's prime or composite\n    if is_prime_or_composite(1) == \"Neither\":\n        return True\n    else:\n        return False\n\ndef is_prime_or_composite(n):\n    if n == 1:\n        return \"Neither\"  # 1 is neither prime nor composite\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return \"Composite\"\n    return \"Prime\"\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be x\n    x = symbols('x')\n    \n    # Equation for the remainders\n    equation1 = Eq(x % 7, 5)\n    equation2 = Eq(x % 8, 6)\n    equation3 = Eq(x % 10, 6)\n    \n    # Equation for the sum of quotients\n    equation4 = Eq((x // 6) + (x // 7) + (x // 8), 265)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), x)\n    \n    # We want the positive integer solution\n    ans = [sol.evalf() for sol in solutions if sol.is_real and sol > 0]\n    return int(ans[0])\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    foreign_language_students = 54\n\n    both_classes = (maths_students + foreign_language_students) - total_students\n    only_maths = maths_students - both_classes\n\n    return only_maths\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    result = 1  # Start with the multiplicative identity\n    # Multiply the chain of mixed fractions after converting them to improper fractions\n    for i in range(2, 10):  # From 2 to 9\n        mixed_fraction = 1 + Fraction(1, i)\n        result *= mixed_fraction\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    addition = 0\n    while True:\n        if is_palindrome(40309 + addition):\n            break\n        addition += 1\n\n    return addition\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    sweets_to_share = 42 - kasia_keeps\n    sweets_per_friend = sweets_to_share // 2\n    lucie_gives_to_joan = (2/7) * sweets_per_friend\n    lucie_keeps = sweets_per_friend - lucie_gives_to_joan\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    # Traverse possible number of balloons for the first group\n    for x1 in range(1, 12):\n        # Traverse possible number of balloons for the second group\n        for x2 in range(1, 12):\n            # Traverse possible number of balloons for the third group\n            for x3 in range(1, 12):\n                # The last group will take the remaining balloons\n                x4 = 12 - (x1 + x2 + x3)\n                # Check if the fourth group has a different number of balloons\n                # and has at least one balloon\n                if x4 > 0 and len(set((x1, x2, x3, x4))) == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2*(9 - x), 4*(x - 5) + 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the total pension be represented by 1 (for 100% of the pension)\n    # On Friday, he spends 1/4 of his pension\n    friday_spending = 1/4\n    \n    # The remaining pension after Friday\n    remaining_after_friday = 1 - friday_spending\n    \n    # On Saturday, he spends 1/3 of what remains after Friday\n    saturday_spending = remaining_after_friday * (1/3)\n    \n    # The remaining pension after Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spending\n    \n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total litres of water needed to fill the fish tank\n    x = symbols('x')\n\n    # Equation for the scenario with the 5-litre pail\n    equation1 = Eq(x - 5, 4)\n\n    # Equation for the scenario with the 3-litre pail\n    equation2 = Eq((x + 12), 3 * 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), x)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_parts = 1 + 4\n    adults = (total_people * 1) / ratio_parts\n    return adults\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Initialize the difference between boys and girls.\n    diff = 52\n    # Initialize the total number of students.\n    total_students = 0\n    \n    # Boys are on the even layers (including the outermost layer), and girls are on the odd layers.\n    layer = 0  # Let's denote the outermost layer as layer 0, and so on..\n    \n    # Use a while loop to try different square sizes until the condition is met.\n    while True:\n        layer += 1  # Increase the layer number\n        \n        # Calculate the number of boys and girls in the current layer\n        boys = (layer * 2 + 1)**2 - (layer * 2 - 1)**2 if layer > 0 else 1**2\n        \n        # Add to the total number of students\n        total_students += boys\n        \n        # If the current layer is odd, it means we're adding girls.\n        if layer % 2 == 1:\n            girls = boys\n            boys = 0  # No boys in this layer\n        \n        # Check if the difference between the total number of boys and girls matches the given difference.\n        if boys - girls == diff:\n            # If the condition is met, return the total number of students.\n            return total_students\n        elif boys - girls > diff:\n            # If the difference exceeds the desired one, break the loop.\n            break\n\n        # Add the inner layer of girls for the next iteration.\n        if layer % 2 == 0:\n            girls = (layer * 2 + 1)**2 - (layer * 2 - 1)**2\n            total_students += girls\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    \n    combinations = num_school_bags * num_pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote a and p as the number of apples and pears initially\n    a, p = symbols('a p')\n\n    # Given ratio of apples to pears is 3:4\n    ratio_eq = Eq(a/p, 3/4)\n\n    # After replacing 36 pears by apples, apples become 1.5 times of pears\n    new_ratio_eq = Eq((a + 36)/(p - 36), 1.5)\n\n    # Solving the system of equations\n    solutions = solve((ratio_eq, new_ratio_eq), (a, p))\n\n    # Since we look for the initial number of apples, we return the value `a`\n    return solutions[a]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = '6129043'\n    sum_of_digits = 0\n    for i in range(212):\n        sum_of_digits += int(recurring_sequence[i % len(recurring_sequence)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    n = 1\n    while True:\n        if (n * n) + n + n + 1 == (n + 1) ** 2 + 31:\n            break\n        n += 1\n    ans = (n + 1) ** 2\n    return ans\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1  # One willow tree between each of the ginkgo trees\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    amount = 729\n    fraction = 2 / 3\n\n    ans = amount * fraction\n\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Count of 2s and 5s in prime factorization of n! will give us the number of trailing zeros.\n    # Since multiples of 2 are more frequent in factorial than multiples of 5, our limiting factor is 5.\n    # Thus, we need to count the number of multiples of 5 in the factorial that contribute to 0s.\n  \n    # Initialize counts and factors\n    zeros_needed = 28\n    n = 0\n    count_5 = 0\n\n    # Count the multiples of 5 in the factorial until we reach 28\n    while count_5 < zeros_needed:\n        n += 1\n        current = n\n        # Count factors of 5 in the current number\n        while current % 5 == 0:\n            count_5 += 1\n            current //= 5\n\n    return n\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')\n\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    sam_age = solve(equation, sam)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Daniel needs to pick at least one sock of each color to ensure he has one of each.\n    # There are 5 different colors, so he will need to pick at least 5 socks.\n    # After he has one of each color, he will need to pick 3 more socks to be sure of having a pair.\n    # 2 of these 3 could still be of unique colors (red and black, as they have the least quantity).\n    # The 3rd sock picked after the initial 5 will ensure that he has a matching pair of one of the colors.\n\n    return 5 + 3  # 5 for one of each color, and 3 more to ensure a pair\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    # Price of lemonade per bottle in pounds\n    price_lemonade = 1.09\n    # Price of chocolate bars in pounds\n    price_chocolate_bar = 0.55\n    \n    # Total cost for lemonades\n    total_cost_lemonade = 5 * price_lemonade\n    # Total cost for chocolate bars\n    total_cost_chocolate_bar = 6 * price_chocolate_bar\n    \n    # Total cost\n    total_cost = total_cost_lemonade + total_cost_chocolate_bar\n    \n    # Amount paid with the ten-pound note\n    amount_paid = 10\n    \n    # Change to be received\n    change = amount_paid - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    odd_numbers = [int(\"\".join(p)) for p in permutations(digits) if int(p[-1]) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7        # RAINBOW has 7 letters\n    vowels = 3               # AIO are 3 vowels\n    consonants = 4           # RNBW are 4 consonants\n\n    # Calculate all permutations of the consonants and vowels separately\n    consonants_perm = factorial(consonants)\n    vowels_perm = factorial(vowels)\n\n    # Calculate number of ways vowels can be placed between consonants without being together\n    # There are 5 potential positions around 4 consonants to place 3 vowels (_R_N_B_W_)\n    positions_for_vowels = consonants + 1\n    ways_to_place_vowels = factorial(positions_for_vowels) // factorial(positions_for_vowels - vowels)\n\n    # Total ways vowels can be placed such that they are not together\n    ways_vowels_not_together = ways_to_place_vowels - vowels_perm\n\n    # Calculate total number of ways, without the vowels being together by multiplying\n    # the permutations of the consonants with the corrected positionings of the vowels\n    total_ways = consonants_perm * ways_vowels_not_together\n\n    return total_ways\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let the first term of the arithmetic progression be a\n    # and the common difference be d\n    # Then the first 10 terms sum to: 10a + 45d = 20 (eq.1)\n    # And the first 30 terms sum to: 30a + 435d = 90 (eq.2)\n    \n    # From eq.1 => a + 4.5d = 2\n    # From eq.2 => a + 14.5d = 3\n    \n    # Subtract eq.1 from eq.2:\n    # (a + 14.5d) - (a + 4.5d) = (3) - (2)\n    # 10d = 1\n    # Therefore, d = 1/10\n    \n    d = 1/10\n    \n    return d\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15*x - 0.25*(1000 - x), -50)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_a_day = 9\n    days = 6\n    \n    words_in_9_minutes = words_per_minute * minutes_a_day\n    total_words = words_in_9_minutes * days\n    \n    return total_words\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n    penny_stickers = (total_stickers * ratio_penny) / total_ratio\n    return penny_stickers\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    time_seconds = 300  # time in seconds\n\n    # Convert speed to meters per second (m/s)\n    speed_mps = (speed_kmh * 1000) / 3600\n\n    # Calculate distance traveled in 300 seconds\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n    # Equation for chickens and goats combined\n    equation1 = Eq(chickens + goats, 40)\n    # 3 times the number of chickens is 5 times the number of cows\n    equation2 = Eq(3 * chickens, 5 * cows)\n    # 2 times the number of goats is 10 times the number of cows\n    equation3 = Eq(2 * goats, 10 * cows)\n    \n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    chicken_count = solutions[chickens]\n    goat_count = solutions[goats]\n    cow_count = solutions[cows]\n\n    # Chickens have 2 feet, goats and cows have 4 feet each\n    total_feet = 2 * chicken_count + 4 * (goat_count + cow_count)\n    return total_feet\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let's denote the total number of apples Jack has as x.\n    # According to the question:\n    # 1. Jack sold 40 apples, which is 4/7 of the number he brought.\n    # 2. The number of apples he brought is 1/2 of all apples he has.\n\n    # Therefore, we can set up the following equation:\n    # (4/7) * (1/2) * x = 40\n    \n    # Solving for x gives us the total number of apples Jack has.\n    x = 40 * (7/4) * 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    num_rows = ((last_term - first_term) // difference) + 1\n    total_seats = num_rows * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d.\n    # We are given that:\n    # (a + b) / 2 = 10\n    # (c + d) / 2 = 22\n    # (a + d) / 2 = 14\n    \n    # From the first equation, we find that a + b = 20\n    # From the second equation, we find that c + d = 44\n    # From the third equation, we find that a + d = 28\n    \n    # We need to find the average of the two middle numbers b and c.\n    # Notice that we can rewrite the average of b and c using the known sums:\n    # (b + c) / 2 = ((a + b) + (c + d) - (a + d)) / 2\n    # Substitute the known sums into the equation:\n    # (b + c) / 2 = (20 + 44 - 28) / 2\n    # Simplify the equation:\n    # (b + c) / 2 = 36 / 2\n    # (b + c) / 2 = 18\n    # Therefore, the average of the two middle numbers is 18.\n\n    return 18\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    for i in range(10, 100):\n        if 7007 % i == 0:\n            j = 7007 // i\n            if j < 100 and i % 7 == 0 and j % 7 == 0:\n                return i + j\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    c = 19\n    sum_ab = 2 * average_ab  # Since average = sum / number of items\n    sum_abc = sum_ab + c\n    average_abc = sum_abc / 3\n    \n    return average_abc\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let's denote the following:\n    # C -> Average age of Chinese teachers\n    # E -> Average age of English teachers\n    # M -> Average age of Mathematics teachers\n    \n    # According to the problem we have the following equations:\n    # (C + E) / 2 = 34 ---> C + E = 68\n    # (E + M) / 2 = 36 ---> E + M = 72\n    # (C + M) / 2 = 44 ---> C + M = 88\n    \n    # Adding all three equations we get 2*(C + E + M) = 68 + 72 + 88 \n    total_age_sum = 68 + 72 + 88\n    total_age_double = 2 * (68 + 72 + 88)\n    \n    # Now let's find the average for all three categories of teachers\n    # Average age of three teachers = Total age of three teachers / 3\n    average_age = total_age_double / (2 * 3)\n    \n    return average_age\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = '9023'\n    all_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year, birth_month, birth_day = 1533, 9, 7\n    death_year, death_month, death_day = 1603, 3, 24\n    \n    age_years = death_year - birth_year\n    age_months = death_month - birth_month\n    age_days = death_day - birth_day\n    \n    if age_days < 0:\n        age_months -= 1\n        age_days += 30  # assuming 30 days in a month for simplicity\n    if age_months < 0:\n        age_years -= 1\n        age_months += 12\n\n    # since we only want full years, we don't need to calculate full months and days\n    return age_years\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    # Formula: 1 + n + n(n-1)/2 + n(n-1)(n-2)/6 + n(n-1)(n-2)(n-3)/24\n    ans = 1\n    for i in range(1, lines + 1):\n        ans += i * (i - 1) // 2\n        if i > 2:\n            ans += i * (i - 1) * (i - 2) // 6\n        if i > 3:\n            ans += i * (i - 1) * (i - 2) * (i - 3) // 24\n    return ans\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Applying the Pigeonhole Principle: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than n/m items.\n    most_cakes = total_cakes // layers + (total_cakes % layers > 0)\n    return most_cakes\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_length = 0\n    for i in range(1, 24):\n        if i * i <= 23:\n            max_length = i\n    cut_length = 23 - max_length * max_length\n    return cut_length\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 500):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    subtrahend = 20 + (1 * 7)\n    minuend = (21 + 1) * 7\n    ans = minuend - subtrahend\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_frac_parts = 0\n    for i in range(1, 2019):\n        sum_frac_parts += (2018 + i) / 5 - ((2018 + i) // 5)\n    return sum_frac_parts\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repeats = factorial(2)  # for the two '1's\n\n    ans = factorial(total_digits) // repeats\n    return ans\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # n is the common difference between the number of cookies in two adjacent boxes\n    n = symbols('n')\n\n    # The last box will have 11 cookies plus 9 times the common difference\n    last_box = 11 + 9 * n\n\n    # The sum of an arithmetic sequence is n/2 * (first_term + last_term)\n    # The sum of cookies from 10 boxes is given as 425\n    equation = Eq((10 / 2) * (11 + last_box), 425)\n\n    # Solve for n\n    common_difference = solve(equation, n)[0]\n\n    return common_difference\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    total_sum = 357\n    n = 7\n    average = total_sum // n\n    smallest_number = average - 3 * 2  # 3 steps back from the average (each step is 2 since it's odd numbers)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1/i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    eq1 = Eq(5 * table + 12 * chair, 720)\n    eq2 = Eq(table, chair + 25)\n\n    solution = solve((eq1, eq2), (table, chair))\n\n    return solution[table]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # 2 is the only even prime number\n    return 2\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 5), x ≡ 1 (mod 6), and x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    smallest_number, _ = solve_congruence(*congruences)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Work rate of Fred and George together\n    fg_rate = 1 / 6\n    \n    # Work rate of Fred alone\n    f_rate = 1 / 9\n    \n    # Work rate of George alone\n    g_rate = fg_rate - f_rate\n    \n    # Time taken by George alone is the inverse of his work rate\n    g_time = 1 / g_rate\n    \n    return g_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    initial_cloth_length = 18\n    cloth_left = initial_cloth_length - x\n    return cloth_left\n\nans = solution(x)  # Replace 'x' with the actual amount of cloth used for the dress."
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    martin_time, carter_time = 9, 13\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    \n    # martin's speed is 20m/min faster than carter's speed\n    equation_speed = Eq(martin_speed, carter_speed + 20)\n\n    # Since time * speed = distance and the distances are the same, the ratios of time is inverse to the ratio of speeds\n    # Ratio of their times is martin_time : carter_time, so the ratio of their speeds is carter_speed : martin_speed\n    equation_ratio = Eq(martin_speed / carter_speed, carter_time / martin_time)\n\n    # Solve the two equations to find Carter's speed\n    solutions = solve((equation_speed, equation_ratio), (martin_speed, carter_speed))\n    \n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Since we want to guarantee that we have two apples of the same color,\n    # we consider the worst-case scenario using the Pigeonhole Principle.\n    # If we take one more than the total number of yellow apples (the color with the most apples),\n    # we are guaranteed to have at least one pair of red apples.\n    return 20 + 1\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = round(2.42 * 1.6, 2)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    birds_legs = 0  # Assuming birds are typical and don't have legs that are counted\n    \n    total_legs = 28\n    legs_of_other_pets = cats_legs + dogs_legs + rabbit_legs\n    \n    birds = (total_legs - legs_of_other_pets) // 2  # Each bird has 2 legs\n    \n    return birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n\n    # Since each person can choose any of the 5 entrances independently,\n    # we can simply raise the number of entrances to the power of the number\n    # of people to find all possible combinations.\n    ans = total_entrances ** total_people\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's denote:\n    # x = number of red pens sold\n    # therefore, 20 + x = number of red pens initially\n    # 20 * (7/3) = initial number of black pens,\n    # since for every 3 red pens, there are 7 black pens, so initially there are 20 * (7/3) black pens\n    # and 20 * (7/3) - x = number of black pens after selling x black pens.\n    \n    red_sold = symbols('x')\n    \n    initial_red = 20 + red_sold\n    initial_black = (20 * (7/3))\n    final_black = initial_black - red_sold\n    \n    # Equation based on the final ratio 5:13\n    equation = Eq((initial_red) / (final_black), 5/13)\n    \n    # Solve for the number of red pens sold\n    sold_red_pens = solve(equation, red_sold)\n    \n    return sold_red_pens[0]\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    increase_rate = 0.05\n    decrease_rate = -0.05\n    \n    # If the value was £10,500 after the first year, it means this was a 105% of original price\n    # To find the original price (100%), we need to divide by 105% (or 1.05)\n    original_price = 10500 / (1 + increase_rate)\n\n    # Calculate the new price after the house loses 5% of its value in second year\n    new_price = original_price * (1 + decrease_rate)\n\n    # Calculate the profit or loss by comparing new value with the original price\n    profit_or_loss = new_price - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    total_numbers = 200\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (5 * 7)\n\n    numbers_divisible_by_5_or_7 = divisible_by_5 + divisible_by_7 - divisible_by_both\n\n    return numbers_divisible_by_5_or_7\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_numbers = 4\n    sum_numbers = average * total_numbers\n    missing_number = sum_numbers - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel_needed = 300\n    bag_weight = 12\n    \n    number_of_bags = -(-total_gravel_needed // bag_weight) # Ceiling division to get the whole number of bags needed\n\n    return number_of_bags\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ruler, pen = symbols('ruler pen')\n    \n    # Equation 1: Price relation between ruler and pen\n    equation1 = Eq(ruler, pen + 0.90)\n    # Equation 2: Total price for 2 rulers and 9 pens\n    equation2 = Eq(2 * ruler + 9 * pen, 21.60)\n\n    solutions = solve((equation1, equation2), (ruler, pen))\n\n    return solutions[ruler]\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    for number in range(2, 50):\n        if (number % 3 == 1) and (number % 5 == 2) and (number + 2) % 3 == 0 and (number + 2) % 5 == 0:\n            is_prime = True\n            for factor in range(2, int(number ** 0.5) + 1):\n                if number % factor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return number\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for p in permutations(digits):\n        num1 = int(''.join(p[:3]))\n        num2 = int(''.join(p[3:5]))\n        num3 = int(''.join(p[5:]))\n        if num2 == 2 * num1 and num3 == 4 * num1:\n            return num3\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse step 8: Add 50\n    result += 50\n    # Reverse step 7: Subtract the day of birth\n    # As we don't know the day yet, we keep it as a variable `day`\n    # Reverse step 6: Divide by 5\n    result /= 5\n    # Reverse step 5: Add 20\n    result += 20\n    # Reverse step 4: Divide by 5\n    result /= 5\n    # Reverse step 3: Subtract 6\n    result -= 6\n    # Reverse step 2: Divide by 4\n    month = result / 4\n    # We now know the exact month, which should be an integer\n    month = int(month)\n    \n    # Now we can find the day by substituting the month back into the equation\n    day = (1126 + 50 - (month * 4 + 6) * 5 * 5 + 20) / 5\n    \n    return (month, int(day))\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_cost = 5\n    refill_cost = 1\n    richard_money = 10\n\n    # Buy the first cup\n    richard_money -= initial_cup_cost\n    cups_afforded = 1\n\n    # Buy as many refills as possible\n    while richard_money >= refill_cost:\n        richard_money -= refill_cost\n        cups_afforded += 1\n\n    return cups_afforded\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # The sequence is an arithmetic sequence which increases and then decreases back\n    # It starts at 4, ends at 400 and then goes back to 4, with a difference of 4\n    # Sum of the first half of the sequence from 4 to 400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    n = (last_term - first_term) // difference + 1  # number of terms in the first half\n    first_half_sum = (n * (first_term + last_term)) // 2  # sum of the first half\n\n    # Sum of the second half of the sequence from 396 to 4\n    first_term = 396\n    last_term = 4\n    n = (first_term - last_term) // difference + 1  # number of terms in the second half\n    second_half_sum = (n * (first_term + last_term)) // 2  # sum of the second half\n\n    # Total sum is the sum of both halves\n    total_sum = first_half_sum + second_half_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations within each book type\n    story_books_perm = factorial(2)\n    comic_books_perm = factorial(3)\n    science_books_perm = factorial(4)\n\n    # Calculate the permutations for the arrangement of the book types\n    book_types_perm = factorial(3)\n    \n    # Multiply the permutations within each book type by the permutations of the book types\n    total_perm = story_books_perm * comic_books_perm * science_books_perm * book_types_perm\n\n    return total_perm\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Given data\n    monkeys_initial = 3\n    peaches_initial = 96\n    days_initial = 2\n    \n    # Required data\n    monkeys_final = 5\n    days_final = 4\n    \n    # Calculate the number of peaches one monkey eats in one day \n    peaches_per_monkey_per_day = peaches_initial / (monkeys_initial * days_initial)\n    \n    # Calculate the total number of peaches 5 monkeys eat in 4 days\n    total_peaches = peaches_per_monkey_per_day * monkeys_final * days_final\n    \n    # Return the final answer\n    return int(total_peaches)\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_50k_tax = 0.06 * 50000\n    rest_tax = (0.06 + T / 100) * (income - 50000)\n    total_tax = first_50k_tax + rest_tax\n    \n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "from math import comb\n\ndef solution():\n    # Since each friend gets at least 1 ice-cream, we distribute 3 out of 5 directly.\n    # We are left with 2 ice-creams to distribute among the 3 friends.\n    # This is equivalent to partitioning 2 identical objects into 3 parts,\n    # which is a problem of combinations with repetition.\n\n    remaining_ice_creams = 2\n    friends = 3\n    # The formula for combinations with repetitions is: comb(n + r - 1, r)\n    # where n is the number of types of objects to combine (friends)\n    # and r is the number of objects to combine (remaining_ice_creams)\n    ans = comb(friends + remaining_ice_creams - 1, remaining_ice_creams)\n    return ans\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # The money needed for 5 servings minus the shortfall\n    money_for_3_servings = (5 * 2.3) - 2.3\n    \n    # The amount left after buying 3 servings\n    left_after_3_servings = 0.3\n    \n    # The total money given by Sophie's mother\n    total_money_given = money_for_3_servings + left_after_3_servings\n    \n    return total_money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)),\n                  (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    solution_x = solve(equation, x)\n\n    return solution_x\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # in meters per minute\n    cycling_speed = 60  # in meters per minute\n\n    # Let's assume the distance to the library is d meters.\n    # Then, time taken to walk to library is d/walking_speed\n    # and time taken to cycle back is d/cycling_speed.\n\n    # Therefore, average speed = total distance / total time\n    # = (d + d) / (d/walking_speed + d/cycling_speed)\n    # Simplifying the above gives us a formula for average speed:\n\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n    return average_speed\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Average spending per month from January to March\n    jan_to_mar_avg = 450\n    jan_to_mar_months = 3\n\n    # Average spending per month from April to July\n    apr_to_jul_avg = 350\n    apr_to_jul_months = 4\n\n    # Total spending from August to October\n    aug_to_oct_sum = 1250\n    aug_to_oct_months = 3\n\n    # Average spending per month from November to December\n    nov_to_dec_avg = 400\n    nov_to_dec_months = 2\n    \n    # Calculate the total spent for each period\n    jan_to_mar_sum = jan_to_mar_avg * jan_to_mar_months\n    apr_to_jul_sum = apr_to_jul_avg * apr_to_jul_months\n    nov_to_dec_sum = nov_to_dec_avg * nov_to_dec_months\n\n    total_months = jan_to_mar_months + apr_to_jul_months + aug_to_oct_months + nov_to_dec_months\n    total_sum = jan_to_mar_sum + apr_to_jul_sum + aug_to_oct_sum + nov_to_dec_sum\n\n    # Calculate the average for the whole year\n    yearly_avg = total_sum / total_months\n\n    return yearly_avg\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    possible_sweets = [1270 + m for m in range(10) if (1270 + m) % 25 == 0]\n    return possible_sweets[0]\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    solution = solve(equation.subs(x, 3), y)\n\n    return 'inversely', solution[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    all_possible_numbers = sorted([''.join(p) for p in permutations(digits)])\n\n    for num_str in all_possible_numbers:\n        num = int(num_str)\n        if num % 2 != 0:\n            return num\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # If you take out one green and one blue, there is no guarantee that you have two balls of the same color.\n    # So, after taking out one green and one blue, the next ball you pick will ensure you have at least two of the same color.\n    # Therefore, you need to take out only three balls to be certain.\n\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    x = symbols('x')  # Variable for the number we start with\n    # Applying the operations step by step\n    expression = (((((x + 3) * 2) - 2) + 10) / 2) - x\n    ans = expression.simplify()  # Simplify the resulting expression\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    import math\n\n    numerator = -6.94 - math.pow(9.604, 1/3)\n    denominator = math.sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Total cost of the books before donation\n    total_cost_before = (20 * 4) + (10 * 5) + (20 * 6)\n    \n    # Total number of books before donation\n    total_books_before = 20 + 10 + 20\n    \n    # Average cost of each book before donation\n    average_cost = total_cost_before / total_books_before\n\n    return average_cost\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n\n    # at least two 7s: cases are (7, 7, x), (7, x, 7), (x, 7, 7) where x is not 7\n    for x in range(10):  # x can be 0-9\n        if x != 7:\n            count += 3  # three positions for x\n\n    # all three are 7s: the case (7, 7, 7)\n    count += 1\n\n    return count\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "from math import lcm\n\ndef solution():\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # The worst case scenario for Annabella to get 1 yellow shirt is if she takes out all shirts of other colors first.\n    # There are 6 orange, 4 pink, and 12 brown shirts, so a total of these shirts are:\n    other_shirt_count = 6 + 4 + 12\n    # She has to take one more shirt out to be sure to get a yellow one.\n    return other_shirt_count + 1\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Jack and Kyle's money\n    jack, kyle = symbols('jack kyle')\n\n    # Equation 1: Jack has 5 times Kyle's money\n    equation1 = Eq(jack, 5 * kyle)\n\n    # Equation 2: After losing $72, Kyle has 2/7 of Jack's remaining money\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35 * 15\n    savings = individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal + (principal * interest_rate * time_years)\n    \n    return total_amount\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let F be the number of bracelets Felicia originally had.\n    # Let J be the number of bracelets Janice originally had.\n    # We know J = 96 (given).\n    J = 96\n\n    # After selling 3/5 of F, Felicia has 2/5 F left.\n    # Janice buys 2/5 of the 3/5 F that Felicia sold, so she buys (2/5)*(3/5)*F.\n    # Then Janice has J + (2/5)*(3/5)*F bracelets, and Felicia has 2/5 F.\n    # The ratio of Felicia's bracelets to Janice's is 5:7 after the transaction.\n    # So, (2/5)*F / (J + (2/5)*(3/5)*F) = 5/7.\n\n    # We need to find the number of bracelets Janice bought, which is (2/5)*(3/5)*F.\n\n    # To find F, we can set up the proportion:\n    # (2/5)*F / (96 + (2/5)*(3/5)*F) = 5/7\n    # Cross-multiply to solve for F:\n    # 7 * (2/5)*F = 5 * (96 + (2/5)*(3/5)*F)\n    # Simplify and solve for F:\n    F = (5 * 96) / (7*(2/5) - 5*(2/5)*(3/5))\n\n    # Now we calculate the number of bracelets Janice bought:\n    bracelets_bought = (2/5)*(3/5)*F\n\n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Given values\n    n = 20           # number of terms\n    total_sum = 560  # sum of the arithmetic progression\n    d = 2            # common difference\n\n    # Let the first term of the sequence be a\n\n    # The sum of an arithmetic progression is given by: S_n = n/2 * (2a + (n - 1)d)\n    # 560 = 20/2 * (2a + (20 - 1)*2)\n    # Solve for a to find the first term (smallest term)\n    a = (total_sum - (n * (n - 1) * d) / 2) / n\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_distance = 3\n    night_distance = 2\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance  # worm climbs up in the daytime\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance  # worm slips down at night\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Calculate the total number of pages read\n    pages_first_four_days = 25 * 4\n    pages_next_six_days = 40 * 6\n    pages_last_five_days = 80\n    total_pages = pages_first_four_days + pages_next_six_days + pages_last_five_days\n    \n    # Total number of days\n    total_days = 4 + 6 + 5\n    \n    # Calculate the average pages per day\n    average_pages = total_pages / total_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x represent the number of toys her brother originally had\n    # According to the problem, after giving away some toys, Penny has 14 toys left and her brother has 12 toys\n    # Additionally, Penny originally had 10 more toys than her brother, so her original amount is x + 10\n    # If we let y represent the number of toys Penny gave to her brother, the situation can be described by the following two equations:\n    # 1. x + y = 12 (her brother's new total)\n    # 2. (x + 10) - y = 14 (Penny's new total)\n\n    # We can solve this system of equations through simple algebra:\n    # From equation 1: y = 12 - x\n    # Substitute y into equation 2: (x + 10) - (12 - x) = 14\n    # Simplify and solve for x: 2x - 2 = 14\n    # 2x = 16\n    # x = 8\n\n    # Therefore, Penny's brother originally had 8 toys\n    return 8\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    # Number of chocolate cookies\n    chocolate_cookies = 54\n    # Number of strawberry cookies is 12 more than chocolate cookies\n    strawberry_cookies = chocolate_cookies + 12\n    # Number of vanilla cookies is thrice the number of chocolate cookies\n    vanilla_cookies = 3 * chocolate_cookies\n    \n    # Total number of cookies baked altogether\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    \n    return total_cookies\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)  # Unpack the list of tuples\n\n    return ans\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Since the question is asking for a calculation without specifying\n    # what to calculate, we don't have enough information to provide a\n    # specific calculation. We will assume that the calculation required\n    # is a simple multiplication of two numbers out of the multiplication table.\n    \n    # Let's say the calculation is the multiplication of 13 and 17\n    ans = 13 * 17\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for tens in range(1, 10):  # Alberta's age is a two-digit number, tens can't be zero\n        for ones in range(0, 10):  # ones can be zero\n            alberta_age = 10 * tens + ones\n            interchanged_age = 10 * ones + tens\n            if interchanged_age + 1 == alberta_age / 2:\n                return alberta_age\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # With 4 suits, to guarantee that 4 cards are of the same suit,\n    # Tom must draw at least 1 card from each of the 4 suits plus 1.\n    # That is 3 (maximum possible without a match) from each suit + 1\n    ans = 3 * 4 + 1\n    return ans\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    number = 15 * 4\n    answer = (number * 2) / 3\n    return answer\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    tickets_remaining = 28\n    percent_unsold = 1 - 0.60  # 100% - 60%\n    total_capacity = tickets_remaining / percent_unsold\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    hayden_savings = 1420\n    mitchell_savings = 505\n    \n    equation = Eq(hayden_savings - x, 4 * (mitchell_savings - x))\n    \n    solved = solve(equation, x)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Calculate the total amount from the two-dollar notes\n    total_two_dollar_notes = 5 * 2  # $10\n\n    # Calculate the total amount from fifty-cent coins\n    total_fifty_cent_coins = 7 * 0.5  # $3.50\n\n    # Calculate the total amount before buying the file\n    total_before_purchase = total_two_dollar_notes + total_fifty_cent_coins  # $13.50\n\n    # Calculate the price of the file\n    file_price = 11.95\n\n    # Calculate the total amount left after buying the file\n    total_left = total_before_purchase - file_price  # $1.55\n\n    return total_left\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of children at the party\n    c = symbols('c')\n    \n    # Since 3/8 of the children were boys, then 5/8 of the children were girls\n    girls_eq = Eq((5/8) * c, 45)\n    \n    # Solve for 'c', the number of children\n    c_value = solve(girls_eq, c)[0]\n    \n    # Now, to find the total number of people using the fraction of adults\n    # Adults are 3/7 of the total, so children are 4/7 of the total\n    # If 't' is the total number of people at the party, then 4/7 * t = c_value\n    t = symbols('t')\n    total_eq = Eq((4/7) * t, c_value)\n    \n    # Solve for 't', the total number of people\n    t_value = solve(total_eq, t)[0]\n    \n    return t_value\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    num_ways = permutations(18, 3)\n    return num_ways\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees_between = 2\n    # Since there's no willow tree after the last ginko tree, we consider ginko_trees - 1 intervals\n    total_willow_trees = (ginko_trees - 1) * willow_trees_between\n    return total_willow_trees\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_climb_per_day = climb_per_day - slide_per_night\n\n    # Calculate the number of days the snail needs to reach the top before the last climb\n    days_to_reach_top = (total_distance - climb_per_day) / net_climb_per_day\n\n    # If the result is not a whole number, round up since the snail will get out on the next day.\n    if not days_to_reach_top.is_integer():\n        days_to_reach_top = int(days_to_reach_top) + 1\n\n    # Add the final day of climbing to the total days\n    final_day = days_to_reach_top + 1\n\n    return final_day\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    upstream_speed = speed_in_still_water - speed_of_current\n    time = distance / upstream_speed\n\n    return time\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_spent\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n\n    # From the problem statement, we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Adding all three equations, we get:\n    # 2 * (A + B + C) = 102 + 97 + 93 \n    total_double = 102 + 97 + 93\n\n    # The total weight of Adam, Ben, and Carl is half of the value we got from adding the equations.\n    total_weight = total_double / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_cost_per_kg = 7.48  # cost per kilogram\n    apple_cost = 12  # cost per apple in pence\n    yoghurt_cost = 46  # cost per yoghurt in pence\n    total_note = 10  # £10 note\n\n    # Convert cheese cost to pounds and calculate total cheese cost\n    cheese_cost = (cheese_weight / 1000) * cheese_cost_per_kg\n\n    # Convert cost of apples and yoghurts to pounds\n    apples_total_cost = (8 * apple_cost) / 100\n    yoghurts_total_cost = (2 * yoghurt_cost) / 100\n\n    # Calculate total cost\n    total_cost = cheese_cost + apples_total_cost + yoghurts_total_cost\n\n    # Calculate change from £10\n    change = total_note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150  # Zack's rate (aircrafts per hour)\n\n    # Given that Andy and Zack work together and sell all the aircrafts in 6 hours\n    combined_rate = total_aircrafts / 6\n\n    # Andy's rate (aircrafts per hour) can be found by subtracting Zack's rate from the combined rate\n    andy_rate = combined_rate - zack_rate\n\n    # The time it would take for Andy to sell all the aircrafts by himself is the total number of aircrafts divided by Andy's rate\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    volume_orange = (total_volume * 7) / ratio_sum\n\n    return volume_orange\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Try different sizes of the square array, starting from 3 (minimum to have a non-empty inner layer)\n    # The smallest square will have side length 3 and be of the form student, teacher, student\n    # We will increment the side length by 2 to keep the pattern of alternating layers of students and teachers\n    side_length = 3\n    while True:\n        # Calculate the number of students and teachers based on the current side length\n        students = side_length ** 2 - (side_length - 2) ** 2\n        teachers = (side_length - 2) ** 2 - (side_length - 4) ** 2\n\n        # Since the outermost layer is always students, for odd side_length, this calculation is enough\n        # For the even case, we need to readjust the number of students and teachers\n        if side_length % 2 == 0:\n            students, teachers = teachers, students\n\n        # Check if there are 80 more students than teachers\n        if students - teachers == 80:\n            # If the condition is satisfied, return the total number of people (students + teachers)\n            return students + teachers\n        \n        # Increment the side length by 2 to examine the next square size\n        side_length += 2\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(y, 3 * x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid_to_mum = 10.50\n    remaining_money = total_money - money_repaid_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    return money_left\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    days_saved = 7  # one week\n\n    total_savings = daily_savings * days_saved\n    amount_left = initial_amount + total_savings - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import symbols, solve, Eq, Integer\n\n    q = symbols('q', integer=True)\n    eq = Eq(Integer(44000) / q, q ** (1/3) ** 3) \n    candidates = solve(eq, q)\n\n    for candidate in candidates:\n        if candidate.is_Integer and candidate > 0:\n            return candidate\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')  # l represents length, w represents width\n\n    # Equations based on the problem statement\n    equation1 = Eq(l, 2 * w)  # length is twice the width\n    equation2 = Eq(2 * l + 2 * w, 72)  # the perimeter is 72 meters\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, w))\n\n    # Return the length of the rectangle\n    return solutions[l]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    exponent = 0\n    while number % 3 == 0:\n        number = number // 3\n        exponent += 1\n\n    # Number of factors for a prime power p^e is (e+1)\n    ans = (exponent + 1)\n    \n    return ans\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kilograms\n    coefficient_of_static_friction = 0.4  # coefficient of static friction (unitless)\n    force_applied = 250  # force applied in newtons\n\n    # Calculate the maximum static friction force\n    force_of_gravity = mass * 9.8  # force due to gravity in newtons\n    max_static_friction_force = coefficient_of_static_friction * force_of_gravity\n\n    # The actual force of static friction is the minimum of the applied force and maximum static friction force\n    force_of_static_friction = min(force_applied, max_static_friction_force)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    resulting_concentration = (total_salt / total_solution) * 100\n    return resulting_concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term3 = 23\n    term15 = 155\n    n = 15 - 3\n    common_difference = (term15 - term3) / n\n    return common_difference\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money each person has initially\n    steve, mark, ryan, meal = symbols('steve mark ryan meal')\n\n    # Ratio equations when Steve pays for the meal\n    eq1 = Eq((steve - meal) / (mark - meal), 3 / 8)\n    eq2 = Eq((steve - meal) / (ryan - meal), 3 / 9)\n\n    # Ratio equations when Ryan pays for the meal\n    eq3 = Eq((steve - meal) / (mark - meal), 5 / 4)\n    eq4 = Eq((ryan - meal) / (mark - meal), 1 / 4)\n\n    # Ratio equations when Mark pays for the meal\n    eq5 = Eq((steve - meal) / (ryan - meal), 10 / 9)\n    eq6 = Eq((mark - meal) / (ryan - meal), 1 / 9)\n\n    # Steve had $40 more than Mark\n    eq7 = Eq(steve, mark + 40)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (steve, mark, ryan, meal))\n\n    # Since we have multiple solutions we will return the positive value for the meal\n    meal_cost = [sol[meal] for sol in solutions if sol[meal] > 0]\n\n    return meal_cost[0] if meal_cost else None\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the scores of student A and student B\n    A, B = symbols('A B')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(A, B + 50)                 # A scored 50 points more than B\n    equation2 = Eq(A - 25, 5 * (B - 25))      # If B gave A 25 points, A's score would be 5 times that of B's new score\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    square = 1\n    cube_root = 1\n    \n    while True:\n        cube = cube_root ** 3\n        square_candidate = cube + 1\n        \n        if (int(square_candidate ** 0.5)) ** 2 == square_candidate:\n            return square_candidate\n        \n        cube_root += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    # Let's denote the number of buttons that James has as J\n    # and the number of buttons that Nina has as N.\n    # According to the problem we have two equations:\n    # J + N = 24 (1) [The total number of buttons they have is 24]\n    # N - 6 = J + 6 (2) [When Nina gives 6 buttons to James, they have an equal number]\n    \n    # From equation (2) we can express J through N:\n    # J = N - 12\n    \n    # Now we can substitute J from this expression into equation (1):\n    # (N - 12) + N = 24\n    # 2N - 12 = 24\n    # 2N = 36\n    # N = 18\n    \n    # So Nina originally has 18 buttons.\n    return 18\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_for_all = total_parts / total_hours\n    parts_per_hour_per_worker = parts_per_hour_for_all / total_workers\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance_per_day = climb_distance - slide_distance\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return day_count\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    coins, _ = solve_congruence(*congruences)\n\n    return coins\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n\n    if fraction_value > decimal_value:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result.numerator / result.denominator\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # According to the given information the relationship between the bags used (x) and the tax charged (y) is linear.\n    # If there's a base tax charge and a proportional charge per bag, the equation has the form y = mx + b.\n    # However, as the specific values of m (slope) and b (y-intercept) haven't been provided, I'll represent them using variables.\n    \n    # Assuming m represents the additional tax per bag and b represents any possible base tax:\n    m = symbols('m')  # Additional tax per bag\n    b = symbols('b')  # Base tax\n    \n    # The equation relating the number of bags used (x) and the tax charged (y):\n    equation = Eq(y, m*x + b)\n    \n    return equation\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = 0\n    current_height = initial_height\n\n    while current_height > 0:\n        total_distance += current_height\n        current_height *= rebound_ratio\n        total_distance += current_height  # This is for the way up\n\n    return total_distance\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    short_term_limit = 5\n    \n    # Calculate the cost if Steven rented the car for 5 days or less\n    max_short_term_cost = flat_fee + daily_fee_short_term * short_term_limit\n    \n    if total_paid <= max_short_term_cost:\n        # If Steven paid less than or equal to the maximum short-term cost,\n        # it means he didn't keep the car for more than 5 days.\n        days_rented = (total_paid - flat_fee) / daily_fee_short_term\n    else:\n        # If Steven paid more, calculate the number of days beyond the 5-day limit.\n        additional_days = (total_paid - max_short_term_cost) / daily_fee_long_term\n        # Add the additional days to the initial 5 days\n        days_rented = short_term_limit + additional_days\n    \n    return int(days_rented)\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    sheet = 1\n    while True:\n        # Each sheet contributes to 4 pages. The page numbers will be 4n-3, 4n-2, 4n-1, and 4n.\n        pages_sum = (4 * sheet - 3) + (4 * sheet - 2) + (4 * sheet - 1) + (4 * sheet)\n        if pages_sum == 58:\n            return sheet\n        sheet += 1\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15 / 100\n    bad_apples = total_apples * percentage_bad\n    return int(bad_apples)\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Sam had an equal number of green and yellow toy cars initially\n    equation1 = Eq(green, yellow)\n\n    # After giving away 60 green toy cars\n    green_left = green - 60\n\n    # After giving away 14 yellow toy cars\n    yellow_left = yellow - 14\n\n    # He had thrice as many yellow toy cars as green toy cars after giving them away\n    equation2 = Eq(yellow_left, 3 * green_left)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Number of green toy cars left after giving away\n    green_left_final = solutions[green] - 60\n\n    return green_left_final\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    pencil_cost_per_unit = 1.80 / 12\n    pen_pencil_ratio = 7 / 3\n    pen_cost_per_unit = pencil_cost_per_unit * pen_pencil_ratio\n    cost_of_5_pens = 5 * pen_cost_per_unit\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the first sequence: 4+8+12+...+396+400\n    # This is an arithmetic sequence where a1 = 4, an = 400, d = 4 (common difference)\n    a1 = 4\n    an = 400\n    d = 4\n\n    # The number of terms in the sequence can be found using n = (an - a1) / d + 1\n    n = (an - a1) / d + 1\n\n    # The sum of the arithmetic sequence can be found using S = n/2 * (a1 + an)\n    sum_forward = n/2 * (a1 + an)\n\n    # The sum of the reversed sequence is the same as the sum of the original sequence\n    sum_backward = sum_forward\n\n    # The total sum is the sum of the two sequences\n    total_sum = sum_forward + sum_backward\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n\n    combinations = drinks * food_items\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for locker in range(1, 101):\n        if locker % 3 == 0:\n            if locker % 5 == 0:\n                continue\n            else:\n                unlocked_lockers += 1\n        elif locker % 5 == 0:\n            unlocked_lockers += 1\n    return unlocked_lockers\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_per_pancake = 3 / 2\n    pancakes_in_12_minutes = 12 / time_taken_per_pancake\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    # Speed difference \n    speed_diff = 80 - 60  # km/h\n\n    # Time needed for Simon to cover the distance between their offices\n    time_to_catch_up = 15 / speed_diff  # hours\n\n    # Overtake time in minutes\n    overtake_time_minutes = time_to_catch_up * 60  # convert hours to minutes\n\n    # Start time in minutes (6:10 pm)\n    start_time_minutes = 6 * 60 + 10\n\n    # Calculate the total minutes when Simon overtakes his wife\n    overtaking_minutes_total = start_time_minutes + overtake_time_minutes\n\n    # Calculate the hour and minutes when Simon overtakes his wife\n    overtaking_hour = int(overtaking_minutes_total // 60)\n    overtaking_minute = int(overtaking_minutes_total % 60)\n\n    # Return the time as a string in the format \"HH:MM\"\n    return \"{:02d}:{:02d}\".format(overtaking_hour, overtaking_minute)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    meters_per_day = total_road / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Define the times required for each person to cross the river\n    times = [5, 5, 9, 7]\n    # Sort the list from fastest to slowest\n    times.sort()\n    \n    # Calculate time using the strategy\n    # Let the two slowest people cross the river\n    total_time = times[2] \n    # Return with the fastest person\n    total_time += times[0]\n    # Now let the two fastest people cross the river\n    total_time += times[1]\n    # Finally, the fastest person comes back with the boat\n    total_time += times[0]\n    # Let the two slowest people cross the river again\n    total_time += times[3]\n    \n    return total_time\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # We want at least 9 participants from the same country, \n    # So if there were 8 participants from each of the 18 countries, we would still have no country with 9 participants\n    # That is 18 countries * 8 participants = 144 participants\n    # Adding one more participant to ensure that there's at least one country with 9 participants\n    min_participants = (8 * 18) + 1\n\n    return min_participants\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define A as a symbol\n    A = symbols('A')\n\n    # The wrong division that Sandra did: 88 / A = 22\n    equation = Eq(88 / A, 22)\n\n    # Solve for A\n    solved_A = solve(equation, A)\n\n    # The correct division 98 / A\n    correct_answer = 98 / solved_A[0]\n\n    return solved_A[0], correct_answer\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    from math import factorial\n\n    # Helper function to calculate combinations\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Total combinations to reach 5th step - 1 step at a time or 1 two-step jump (so either 4 or 3 steps before)\n    ways_to_5th_step = nCr(4, 4) + nCr(3, 1)\n    \n    # Total combinations to reach 10th step from 5th step - Steps needed are 5, options are 1 or 2 steps at a time\n    # So the sequence of steps can be (1,1,1,1,1), (1,1,1,2), (1,1,2,1), (1,2,1,1), (2,1,1,1), (2,2,1), (2,1,2), (1,2,2)\n    # Which is total 4 or 3 steps to go from 5th to 10th\n    ways_from_5th_to_10th = nCr(5, 5) + nCr(4, 1) + nCr(4, 2) + nCr(3, 1)\n\n    # Final answer is multiplication of combinations to reach 5th step and to go from 5th to 10th\n    ans = ways_to_5th_step * ways_from_5th_to_10th\n    return ans\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated as n * (first_term + last_term) / 2\n    # where n is the number of terms\n    n = 53\n    sum_of_sequence = 2014\n\n    # Let's denote the first term of the sequence as 'a'.\n    # With 'n' terms, the last term would be 'a + n - 1'.\n    # The sum of the sequence equals n * (2a + n - 1) / 2.\n    # From this equation, we can derive the first term 'a'.\n\n    # 2 * sum_of_sequence = n * (2a + n - 1)\n    # => 2 * sum_of_sequence = 53 * (2a + 53 - 1)\n    # => a = (2 * sum_of_sequence / 53 + 1 - 53) / 2\n\n    first_term = (2 * sum_of_sequence / n + 1 - n) // 2\n    # Now, find the last term using the first term and the number of terms\n    last_term = first_term + n - 1\n\n    return int(last_term)\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    actual_amount = rounded_amount - 4  # Subtract one less than 5, as rounding to the nearest ten could add at most 4 dollars\n    return actual_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed (laps per minute)\n    lucas_speed = 5 / 6\n    # Miller's speed (laps per minute)\n    miller_speed = 5 / 10\n\n    # Relative speed (laps per minute) when Lucas is overtaking Miller\n    relative_speed = lucas_speed - miller_speed\n\n    # Time taken for Lucas to overtake Miller once (in minutes)\n    time_to_overtake_once = 1 / relative_speed\n    \n    # Lucas overtakes Miller every time he completes a full lap more than Miller\n    # Therefore, the time to the second overtaking is twice the time to the first overtaking\n    time_to_overtake_twice = time_to_overtake_once * 2\n\n    return time_to_overtake_twice\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return int(total_minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    children_part = 3/5\n    men_part = 1/4\n    \n    children = children_part * total_visitors\n    remaining_visitors = total_visitors - children\n    men = men_part * remaining_visitors\n    \n    equation = Eq(children - men, 120)\n    \n    visitors = solve(equation, total_visitors)\n    \n    return visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost = 0.8  # cost for the first 15 minutes\n    additional_rate = 0.05  # cost for each additional minute\n    total_cost = 1.4  # total cost of the call\n\n    if total_cost > base_cost:\n        additional_minutes_cost = total_cost - base_cost\n        additional_minutes = additional_minutes_cost / additional_rate\n        total_minutes = 15 + additional_minutes\n    else:\n        total_minutes = 15\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    mother_future_age = 54\n    # When Tim reaches his mother's current age, the difference in their ages\n    # will remain the same. So we can express his mother's age as:\n    # mother_age_now = mother_future_age - (mother_age_now - tim_age_now)\n\n    mother_age_now = symbols('mother_age_now')\n    equation = Eq(mother_future_age - mother_age_now, mother_age_now - tim_age_now)\n    mother_age_now_solution = solve(equation, mother_age_now)\n\n    return mother_age_now_solution[0]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # orange string length in meters\n    orange_length_cm = orange_length_m * 100  # convert meters to centimeters\n    \n    purple_length_cm = orange_length_cm / 9.2  # find purple string length in centimeters\n    \n    # green string is 24.9cm longer than the purple string\n    green_length_cm = purple_length_cm + 24.9\n    green_length_m = green_length_cm / 100  # convert centimeters to meters\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C, D, E, F, G, H, I = symbols('A B C D E F G H I')\n    equations = [\n        Eq(A * B * C, B * C),\n        Eq(D + E + F, A * C),\n        Eq(D + G, E),\n        Eq(H + E, F + I),\n        Eq(G - H, D),\n        Eq(A + D, H + I),\n        Eq(A, G),\n        Eq(C, I)\n    ]\n    \n    solved_values = solve(equations)\n    ans = solved_values[A]\n    return ans\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorter, longer = symbols('shorter longer')\n    equation1 = Eq(longer, 5 * shorter)\n    equation2 = Eq(shorter + longer, 49.5)\n    \n    solutions = solve((equation1, equation2), (shorter, longer))\n    \n    return round(solutions[longer], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n    \n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n\n    # Total amount of work done by the 18th day\n    total_work = 18 * combined_rate\n    total_work_1_person = 18 * ivy_rate\n    \n    # Remaining work that needs to be done by Kevin alone after Ivy finishes her part\n    remaining_work_kevin = total_work - total_work_1_person\n\n    # Number of days Kevin needs to take off\n    kevin_work_days = remaining_work_kevin / kevin_rate\n    days_off = 18 - kevin_work_days\n\n    return days_off\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5  # Sum of the parts of the ratio\n    total_litres = 36  # Total litres of the fruit drink\n\n    apple_juice_ratio = 4  # Ratio of apple juice\n\n    # Amount of apple juice needed\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    day_climb = 4\n    night_slide = 1\n    net_distance = day_climb - night_slide\n    distance_climbed = 0\n    days = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Tim takes to write the book alone\n    t = symbols('t')\n\n    # Equation based on the work done. Work is assumed to be 1 book\n    # Nancy's work rate is 1/6 book per day\n    # Tim's work rate is 1/t book per day\n    # Together, their rate is 1/4 book per day\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t\n    tim_days = solve(equation, t)[0]\n\n    return tim_days\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    total_amount = initial_amount\n    for day in range(1, days + 1):\n        if day % 2 == 1:\n            total_amount += 5\n        else:\n            total_amount -= 8\n    \n    return total_amount\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    term_sum = 0\n    a_numerator = 0\n    a_denominator = 1\n    b_denominator = 1\n    for i in range(1, 7):\n        a_numerator = i\n        a_denominator = b_denominator\n        b_denominator = a_denominator + (2 * i + 1)\n        term_sum += a_numerator / (a_denominator * b_denominator)\n    term_sum += 1 / b_denominator\n    return term_sum\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let total_pupils be the total number of pupils normally at school.\n    # Let missing_girls be the number of Year 7 girls who miss school.\n\n    # The remaining pupils after missing girls are 400.\n    remaining_pupils = 400\n\n    # Before the sports match, 20% of total_pupils are in Year 7.\n    # After the sports match, 10% of remaining pupils (400) are in Year 7.\n\n    # Let's express the number of normal Year 7 pupils as a function of total_pupils:\n    # normal_year_7 = 0.2 * total_pupils\n\n    # The new number of Year 7 pupils is now 10% of 400:\n    current_year_7 = 0.1 * remaining_pupils\n\n    # The number of missing girls is the difference between normal_year_7 and current_year_7:\n    # missing_girls = normal_year_7 - current_year_7\n\n    # So the relation is:\n    # total_pupils - missing_girls = remaining_pupils\n    # total_pupils - (normal_year_7 - current_year_7) = remaining_pupils\n    # total_pupils - (0.2 * total_pupils - current_year_7) = remaining_pupils\n\n    # Simplify the equation to solve for total_pupils:\n    # total_pupils - 0.2 * total_pupils = remaining_pupils + current_year_7\n    # 0.8 * total_pupils = remaining_pupils + current_year_7\n    # total_pupils = (remaining_pupils + current_year_7) / 0.8\n\n    total_pupils = (remaining_pupils + current_year_7) / 0.8\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    tree_height = 31\n    jump_up = 3\n    slip_down = 2\n    effective_jump = jump_up - (slip_down / 3)\n\n    # Since the squirrel slips back 2 meters every 3 jumps, we have to\n    # consider this when calculating how many sets of 3 jumps it requires\n    # Additionally, after the final jump that reaches or surpasses the tree height,\n    # the squirrel does not slip back, hence we subtract the slip_down from the\n    # tree_height when calculating jumps.\n\n    # Calculate number of full sets of 3 jumps required to be at or exceed tree_height - slip_down\n    full_sets_of_jumps = (tree_height - slip_down) // (3 * effective_jump)\n\n    # Calculate the height reached after the full sets of jumps\n    height_reached = full_sets_of_jumps * 3 * effective_jump\n\n    # Calculate how many additional jumps are needed\n    jumps_needed = full_sets_of_jumps * 3\n    while height_reached < tree_height:\n        height_reached += jump_up  # squirrel jumps up\n        jumps_needed += 1\n        if height_reached >= tree_height:\n            break\n        height_reached -= slip_down  # squirrel slips down\n\n    return jumps_needed\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let x be the amount Helen had at the start\n    # After spending one-third on a dress, she has 2/3x left\n    # After spending three-fifths of what is left on shoes, she has 2/5 * 2/3x left\n    # It's given that she had £40 left after these spendings\n    \n    # 2/5 * 2/3 * x = 40\n    # 4/15 * x = 40\n    # x = 40 * 15 / 4\n    \n    x = 40 * 15 / 4\n    return x\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n    \n    def find_factors(n, divisor):\n        count = 0\n        while n > 0:\n            n //= divisor\n            count += n\n        return count\n    \n    num_zeros = min(find_factors(999, 5) - find_factors(300, 5), \n                    find_factors(999, 2) - find_factors(300, 2))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Each side of the outermost layer has 60 / 4 = 15 students\n    outer_students_per_side = 60 // 4\n\n    # The total number of students forms a square where the side length increases by 2 for each layer\n    # Moving inwards from the outermost layer, reducing the side length by 2 (one student from each end)\n    # until it reaches 1 or 0.\n    total_students = 0\n    side_length = outer_students_per_side\n    while side_length > 0:\n        total_students += (side_length ** 2)\n        side_length -= 2  # move to the next inner layer\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        if (cars + bikes + lorries) % 2 == 0 and (cars + bikes + lorries) < 100:\n            return cars, bikes, lorries\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = 0\n    green_tiles = 0\n    remaining_tiles = total_tiles\n\n    while remaining_tiles > 0:\n        layer += 1\n        tiles_in_layer = (2 * layer - 1) ** 2\n        next_tiles_in_layer = (2 * (layer + 1) - 1) ** 2\n\n        if remaining_tiles >= next_tiles_in_layer - tiles_in_layer:\n            tiles_this_layer = next_tiles_in_layer - tiles_in_layer\n        else:\n            tiles_this_layer = remaining_tiles\n\n        if layer % 2 == 1:\n            red_tiles += tiles_this_layer\n        else:\n            green_tiles += tiles_this_layer\n\n        remaining_tiles -= tiles_this_layer\n\n    color = 'Red' if red_tiles > green_tiles else 'Green'\n    difference = abs(red_tiles - green_tiles)\n    \n    return (color, difference)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # Including both ends, we start by placing a bin at 0m and at 300m.\n    bins = 2\n\n    # Now calculate how many bins can be placed on the boulevard.\n    # Since bins are already placed on both ends, the remaining length is (boulevard_length - interval).\n    bins += (boulevard_length - interval) // interval\n\n    return bins\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    # Let w be the number of rounds won and l be the number of rounds lost.\n    # We know that w + l = 12 (since there are 12 rounds in total)\n    # We also know that 4w - 2l = 24 (since she won a total of 24 cards)\n    \n    # From the first equation, we can express l in terms of w: l = 12 - w\n    # Substituting l into the second equation gives us: 4w - 2(12 - w) = 24\n    # Simplifying the equation: 4w - 24 + 2w = 24\n    # Combine like terms: 6w - 24 = 24\n    # Solve for w: 6w = 48\n    # Divide both sides by 6: w = 8\n    \n    # Now we can find l: l = 12 - w = 12 - 8\n    l = 12 - 8\n    \n    return l\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the initial number of buttons in box B\n    b = symbols('b')\n    \n    # Initial number of buttons in box A is b + 64\n    a_initial = b + 64\n\n    # Ken removes 2 buttons from box B for every button added to A\n    # Number of buttons in box B becomes 28 fewer than before: b_new = b - 28\n    # The number of buttons removed from B is also added to A: a_new = a_initial + (b - b_new)\n    # Therefore, a_new = a_initial + (b - (b - 28)) ⇒ a_new = a_initial + 28\n    \n    # Since the ratio of the total number of buttons to the buttons in B is 4:1, we have:\n    # (a_new + b_new) / b_new = 4/1\n    \n    # a_new = a_initial + 28\n    # b_new = b - 28\n    # (a_initial + 28 + b - 28) / (b - 28) = 4 / 1 ⇒ (a_initial + b) / b_new = 4\n    \n    # Now solve for b using the ratio equation\n    equation = Eq((a_initial + b) / (b - 28), 4)\n    b_solved = solve(equation, b)\n    \n    # Since b_solved might give multiple answers, we need the one that makes sense in context (positive button count and b > 28)\n    for solution in b_solved:\n        if solution > 28:\n            b_final = solution\n            break\n\n    # Finally, calculate the initial buttons in box A\n    a_final = b_final + 64\n\n    return a_final\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n\n    total_flour = flour_per_cake * num_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    num_2011s = 0\n    while True:\n        number = int('26' + '2011' * num_2011s + '7')\n        if number % 33 == 0:\n            return num_2011s\n        num_2011s += 1\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Since the plates are identical, we just need to count the distinct\n    # partitioning of 7 into at most 3 parts\n    # This is equivalent to finding the number of non-negative integer\n    # solutions to x1 + x2 + x3 = 7\n\n    count = 0\n    for x1 in range(8): # x1 can range from 0 to 7 lollipops\n        for x2 in range(8 - x1): # x2 is limited by the remaining lollipops\n            x3 = 7 - x1 - x2 # x3 is fixed once x1 and x2 are chosen\n            # Since plates are identical, we only need to consider unique sets x1, x2, x3\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Time taken to make one cut\n    time_per_cut = 3 / (4 - 1)\n    \n    # Total cuts needed to cut the log into 8 pieces\n    total_cuts = 8 - 1\n    \n    # Total time to cut the log into 8 pieces\n    total_time = time_per_cut * total_cuts\n\n    return total_time\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n    \n    after_sale = initial_cards - duplicates + new_cards\n    \n    return after_sale\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as one person \n    # and calculate the arrangements for the remaining 7 spots\n    arrangements_of_7 = factorial(7)\n\n    # Amy and Judy can switch places with each other\n    # So we multiply by 2 for those arrangements\n    arrangements_amy_judy = 2\n\n    # Calculate total arrangements\n    total_arrangements = arrangements_of_7 * arrangements_amy_judy\n\n    # We divide by 8 to account for the rotations giving the same order\n    ans = total_arrangements // 8\n\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let r be the money Rasidah had at first, and c be the money Chai Seng had\n    r, c = symbols('r c')\n\n    # equation based on the information provided\n    equation1 = Eq(r + 48, c)  # Rasidah had $48 less than Chai Seng\n    equation2 = Eq(r - 3/5*r, 2 * (c - 6/7*c))  # Chai Seng had 1/2 as much money left as Rasidah\n\n    # solving the system of equations for r\n    solutions = solve((equation1, equation2), (r, c))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # Initial number of coins for players X, Y, and Z\n    rounds = 0  # Counter for the number of rounds\n\n    while min(x, y, z) > 0:  # The game continues until one player has 0 coins\n        if x >= y and x >= z:\n            x -= 3  # If X has the most coins, X gives away 3 coins\n            y += 1  # Y and Z each get one coin\n            z += 1\n        elif y > x and y >= z:\n            y -= 3  # If Y has the most coins, Y gives away 3 coins\n            x += 1\n            z += 1\n        else:\n            z -= 3  # If Z has the most coins, Z gives away 3 coins\n            x += 1\n            y += 1\n        \n        rounds += 1  # Increment the rounds counter\n\n    return rounds\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    summation = 0\n    for i in range(1, 8):\n        summation += 1/i\n    return int(summation)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, ben = symbols('andy ben')\n\n    # Initial state: Andy had 84 fewer cookies than Ben\n    initial_state = Eq(andy, ben - 84)\n\n    # After buying cookies\n    after_andy = andy + andy / 3\n    after_ben = ben + ben / 5\n\n    # Final state: Andy had 1/3 as many cookies as Ben\n    final_state = Eq(after_andy, after_ben / 3)\n\n    # Solving the equations\n    solutions = solve((initial_state, final_state), (andy, ben))\n\n    # Cookies Andy had in the end\n    final_andy_cookies = after_andy.subs(andy, solutions[andy])\n\n    return final_andy_cookies.evalf()\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n\n    # A = P(1 + rt)\n    # 37100 = 35000(1 + 0.015t)\n    # t = (37100/35000 - 1) / 0.015\n    years = (final_amount / principal - 1) / rate\n\n    return round(years)\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    # Define the numbers to be added\n    num1 = 0.7\n    num2 = 0.04\n    num3 = 1.006\n    \n    # Calculate the sum of the numbers\n    ans = num1 + num2 + num3\n    \n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Observing the pattern in the sequence:\n    # The sequence alternates between adding 1 and subtracting 1 from the previous two numbers.\n    # Starting with 18, the sequence goes: 18, -16 (18 - 2 * 17), 19 (18 + 1), -15 (-16 + 1), 20 (19 + 1), ...\n    # The next number n is after 20, which should be negative and should be -15 + 1.\n\n    n = 20\n    next_n = -15 + 1  # The next number in the sequence\n\n    return next_n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    fraction_value = 6 / 20\n    numerator = 12\n    denominator = numerator / fraction_value\n    return int(denominator)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # The possible two-digit numbers are between 10 and 99 (inclusive)\n    possible_numbers = set(range(10, 100))\n\n    # From the first round, we know that 4 students can determine whether\n    # their number is divisible by the unknown number, so this means that\n    # the unknown number is a divisor of exactly 4 numbers in the possible range. \n    divisors = {}\n    for i in range(2, 100):\n        divisible_numbers = {n for n in possible_numbers if n % i == 0}\n        if len(divisible_numbers) == 4:\n            divisors[i] = divisible_numbers\n\n    # From the second round, we know that 6 students can determine whether\n    # their number is divisible by 24, so this means that Tom's number is not\n    # divisible by 24 and that of the 8 numbers he sees, 2 are divisible and 6 are not.\n    \n    # Now let's combine information from both rounds: \n    # The unknown number should not divide Tom's number but should divide 4 of the possible numbers,\n    # and 24 should not divide Tom's number but should divide 2 numbers that are not divisible by the unknown number.\n\n    # At this point, we could try to find a valid configuration of hats with these properties.\n    # Instead, we can observe that finding the exact hats is not necessary; we only need the sum of them.\n    # Since Tom raised his hand in both rounds, the divisibility condition must apply to different sets of numbers.\n    # If the unknown number's divisible set intersects with the 24's divisible set,\n    # the sum of the remaining numbers Tom saw must be constant.\n    \n    # We can calculate the total sum of all 2-digit numbers (which is constant),\n    # subtract the sum of the divisible by 24 numbers (since Tom's number cannot be divisible by 24),\n    # and we should expect to get the same result for each possibility of the unknown number that remains.\n    \n    total_sum = sum(possible_numbers)\n    divisible_by_24 = {n for n in possible_numbers if n % 24 == 0}\n    \n    # Since we know 8 numbers must been seen by Tom, not 9,\n    # we need to subtract the set for the unknown number and the set for 24 (intersect)\n    sums = []\n    for divisor, divisible_set in divisors.items():\n        sums.append(total_sum - sum(divisible_by_24 | divisible_set))\n\n    # Check that our assumption was correct, and all sums we got are equal\n    if len(set(sums)) == 1:\n        return sums[0]\n    else:\n        # If the assumption isn't correct, it means the problem isn't consistent or not enough information\n        # We return None to indicate no solution found under current assumptions\n        return None\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let the four numbers be a, b, c, d where a > b > c > d\n    a, b, c, d = symbols('a b c d')\n\n    # Given sum of the smallest number and the average of the other three numbers is 39\n    eq1 = Eq(d + (a + b + c) / 3, 39)\n\n    # Given sum of the largest number and the average of the other three numbers is 51\n    eq2 = Eq(a + (b + c + d) / 3, 51)\n\n    # We add the two equations together and solve for a\n    result = solve(Eq(eq1.lhs + eq2.lhs, eq1.rhs + eq2.rhs), a)\n\n    # The largest possible value for the largest number is the result of the equation.\n    return result[a]\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils that passed at least one test\n    total_passed_at_least_one = 43\n\n    # Pupils that passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # At most, the number of pupils that passed all three tests would be the minimum value of \n    # the sum of any two test pass numbers minus the total pupils that passed at least one test.\n    # This is due to the inclusion-exclusion principle.\n    all_three_min = max(passed_math + passed_science - total_passed_at_least_one,\n                        passed_science + passed_english - total_passed_at_least_one,\n                        passed_math + passed_english - total_passed_at_least_one)\n\n    # Since we calculate the minimum above, the maximum number of students passing all three tests\n    # would be when all other pupils not included in the max calculation above have passed only one test.\n    # Hence we don't need to consider them. We consider the minimum number as the answer.\n    ans = max(0, all_three_min)\n    \n    return ans\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since each pencil case cannot be empty, we start by giving 1 pen to each case\n    pens_left = 6 - 3\n\n    # Now we need to distribute the remaining pens across the 3 cases\n    # It's a classic problem of distributing identical objects into distinct boxes\n    # which can be solved using combinations with repetitions formula:\n    # C(n + k - 1, k), where n is the number of pens_left and k is the number of pencil cases (3)\n\n    from math import comb\n    \n    # Applying the formula: C(pens_left + 3 - 1, 3 - 1)\n    ways = comb(pens_left + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the distance between school and home\n    x = symbols('x')\n    \n    # Ahmad's travel time from home to school\n    ahmad_time_to_school = x / 80\n    \n    # Ahmad's travel time from school to the meeting point with his brother\n    ahmad_time_to_meeting = 210 / 80\n    \n    # Brother's travel time from home to the meeting point with Ahmad\n    brother_time_to_meeting = (x - 210) / 50\n    \n    # Setting up the equation: Ahmad's time to school equals his brother's time to the meeting point\n    equation = Eq(ahmad_time_to_school, ahmad_time_to_meeting + brother_time_to_meeting)\n\n    # Solve the equation to get the distance x\n    distance = solve(equation, x)\n\n    return distance[0]\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator_1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator_1 = 2/25\n    # Calculate the first complex fraction\n    fraction_1 = numerator_1 / denominator_1\n    \n    # Calculate the numerator of the second complex fraction\n    numerator_2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator_2 = 8/3\n    # Calculate the second complex fraction\n    fraction_2 = numerator_2 / denominator_2\n    \n    # Sum the two calculated complex fractions to get the answer\n    ans = fraction_1 + fraction_2\n    \n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_8_value = 8 * 1000  # The first 8 is in the thousands place.\n    second_8_value = 8 * 10   # The second 8 is in the tens place.\n    difference = first_8_value - second_8_value\n    return difference\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    num = 40309\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num - 40309\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # A four-digit number divisible by 5 must end with 0 or 5.\n    # Given the number ends with \"A\", and it should be divisible by 5, A can only be 0 or 5.\n\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4.\n    # If A is 0, the last two digits are \"20\", which is divisible by 4.\n    # If A is 5, the last two digits are \"25\", which is NOT divisible by 4.\n    \n    # Hence, A must be 0 for the number to be divisible by both 4 and 5.\n    A = 0\n    return A\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find the smallest five-digit palindromic number divisible by 45\n    # The smallest five-digit number is 10000, but we need to check palindromic numbers\n    for i in range(10000, 99999 + 1):\n        num_str = str(i)\n        if num_str == num_str[::-1] and i % 45 == 0:\n            smallest_palindrome = i\n            break\n    \n    # Find the largest five-digit palindromic number divisible by 45\n    # The largest five-digit number is 99999, but we need to check palindromic numbers\n    for i in range(99999, 10000 - 1, -1):\n        num_str = str(i)\n        if num_str == num_str[::-1] and i % 45 == 0:\n            largest_palindrome = i\n            break\n        \n    # Calculate the difference between the largest and smallest palindromic numbers\n    difference = largest_palindrome - smallest_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length1 = 16\n    length2 = 24\n    max_piece_length = gcd(length1, length2)\n    return max_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement, which is the remainder when divided by each divisor\n    # In this problem, we already have the remainders given by the problem, which are 1, 2, and 7\n\n    # Step 2: Find the LCM of all the divisors\n    # The divisors are 5, 6, and 11\n    # LCM(5, 6, 11) can be found using lcm function from sympy\n    lcm = 5 * 6 * 11  # Because 5, 6, and 11 are coprime, their LCM is just their product\n\n    # Step 3: Solve the congruences using the Chinese Remainder Theorem\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    # The unknown = the smallest positive solution which is the remainder found in the previous step\n    ans = remainder\n    return ans\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        non_red_bags = bags.copy()\n        non_red_bags.remove(red_marbles)\n        for jaslin_bags in combinations(non_red_bags, 3):\n            george_bags = tuple(set(non_red_bags) - set(jaslin_bags))\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all = symbols('mean_all')\n    mean_top_3 = 92\n    mean_last_7 = mean_all - 6\n\n    # total score of top 3 students\n    total_top_3 = mean_top_3 * 3\n    # total score of last 7 students\n    total_last_7 = mean_last_7 * 7\n\n    # Equation: total score of top 3 + total score of last 7 equals mean score for all * 10\n    equation = Eq(total_top_3 + total_last_7, mean_all * 10)\n\n    mean_all_value = solve(equation, mean_all)[0]\n\n    return mean_all_value\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        distinct_digits = set(year_str)\n\n        # The year must have exactly 4 distinct digits\n        if len(distinct_digits) == 4:\n            # Check if the digits are consecutive\n            digits = sorted(int(digit) for digit in distinct_digits)\n            if digits[3] - digits[0] == 3 and \\\n               digits[1] - digits[0] == 1 and \\\n               digits[2] - digits[1] == 1:\n                lucky_years += 1\n    return lucky_years\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # speed = distance / time\n    distance_in_3_hours = speed * 3  # distance = speed * time\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2 / 5\n    remaining_apples = 150\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the first even number be x.\n    # Then, the five consecutive even numbers are x, x+2, x+4, x+6, and x+8.\n    # Their sum is 5x + 20.\n    # We know that their sum is 100, so 5x + 20 = 100.\n    # Solving for x gives us the smallest even number.\n    x = (100 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let x be the number of sweets Beth has now, after receiving 4 additional sweets\n    # Andre will then have x + 6 sweets\n    # Together, they originally had 24 sweets, and received 8 more sweets from their teacher\n    # The total sweets they have now is 24 + 8 = 32\n    # Forming the equation, we have x + (x + 6) = 32\n\n    # Solving for x\n    x = (32 - 6) // 2  # Subtract 6 from both sides, and divide by 2 to get x\n    \n    # Return the number of sweets Beth has now\n    return x\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance = (15 - 1) * 3\n    return distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits\n    num_friends = 6\n    fruits_per_friend = total_fruits / num_friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from math import factorial\n    from fractions import Fraction\n\n    # Total number of arrangements (denominator of probability)\n    total_arrangements = factorial(12) // (factorial(2) ** 6)\n\n    # Ways to choose positions for a pair, with an even number of blocks in between\n    choices_for_a_pair = sum([factorial(10 - i) for i in range(0, 9, 2)])\n\n    # Since there are 6 colors, the choices for each have to be multiplied\n    even_arrangements = choices_for_a_pair ** 6\n\n    # Calculate probability\n    prob = Fraction(even_arrangements, total_arrangements)\n\n    # Simplify the fraction to get relatively prime integers\n    prob = prob.limit_denominator()\n\n    # Calculate m + n\n    m_plus_n = prob.numerator + prob.denominator\n\n    return m_plus_n\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n    pool_filled = 0\n    minutes_passed = 0\n\n    while pool_filled < 1:\n        if minutes_passed % 5 == 0:\n            pool_filled += rate_A\n        elif minutes_passed % 5 == 1 or minutes_passed % 5 == 2:\n            pool_filled += 2 * rate_B\n        else:\n            pool_filled += 2 * rate_A\n        minutes_passed += 1\n\n    return minutes_passed - 1  # Subtract 1 because we added a minute after filling the pool\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    work_done = 1  # the entire work is considered as '1'\n\n    # Eq1: Alan and Bob can paint the room together in 4 hours\n    equation1 = Eq(work_done / (alan + bob), 4)\n    # Eq2: Bob can paint the room on his own in 6 hours\n    equation2 = Eq(work_done / bob, 6)\n\n    # Solve the two equations for alan and bob\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_rain_at_least_one_day = 1 - (prob_no_rain_saturday * prob_no_rain_sunday)\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew = 31\n    samantha = matthew - 6\n    return samantha\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_correct = 10\n    points_incorrect = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros_needed = 28\n    n = 1\n    five_power = 0\n\n    # Count the number of fives in the factors of numbers since they determine the number of zeros at the end of a factorial.\n    while five_power < zeros_needed:\n        n += 1\n        current = n\n        while current % 5 == 0:\n            five_power += 1\n            current //= 5\n\n    return n-1 # Since the loop goes one step further, we return n-1\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Initial full bottles Lucas bought\n    full = 10\n    # Initial empty bottles\n    empty = 1\n    # Total bottles of water Lucas can drink\n    total_bottles_drinked = full\n\n    while full + empty >= 2:\n        # Exchange the empty bottles for full ones\n        exchange = (full + empty) // 2\n        # The remaining empty bottles after the exchange\n        empty = (full + empty) % 2\n        # The new full bottles\n        full = exchange\n        \n        # Add the exchanged bottles to the total count\n        total_bottles_drinked += exchange\n\n    return total_bottles_drinked\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n\n    children_between = total_children - vanessa_position_from_front - andrea_position_from_back\n\n    return children_between\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(\"281\" + str(digit))\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5 / 6\n    fenced_length = 2 / 3\n\n    unfenced_length = path_length - fenced_length\n\n    return unfenced_length\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    sweets_start = 320\n    sweets_end = 348\n    sweets_bought_each_week = 30\n\n    sweets_total_bought = sweets_bought_each_week * total_weeks\n    sweets_eaten_total = sweets_start + sweets_total_bought - sweets_end\n    sweets_eaten_each_week = sweets_eaten_total / total_weeks\n\n    return sweets_eaten_each_week\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    t = symbols('t')  # Time in minutes\n\n    # Volume of water drained is proportional to time\n    # Let the total volume of either pool be 1 unit\n    # Rate of drainage for pool A = 1 unit / 10 min = 1/10 per minute\n    # Rate of drainage for pool B = 1 unit / 6 min = 1/6 per minute\n\n    # Equation representing remaining water in pool A: volume = 1 - rate * time\n    remaining_A = 1 - (1/10) * t\n    # Equation representing remaining water in pool B: volume = 1 - rate * time\n    remaining_B = 1 - (1/6) * t\n\n    # Condition: height of waterline A is 3 times that of B (height proportional to volume when base is same)\n    # Hence, volume remaining in A is 3 times volume remaining in B.\n    equation = Eq(remaining_A, 3 * remaining_B)\n\n    # Solve for time t when the height of A’s waterline is 3 times that of B\n    time_solution = solve(equation, t)\n\n    return time_solution[0]\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let the number of sweets Yue Ying has be y\n    # Then, the number of sweets Chenxi has is y + 5\n    # After giving away 10 sweets, Chenxi will have (y + 5) - 10 sweets\n    # Yue Ying will then have y + 10 sweets\n\n    # The difference in the number of sweets after giving away will be:\n    # (y + 10) - ((y + 5) - 10) = y + 10 - y - 5 + 10 = 15\n\n    # The difference is independent of the actual numbers of sweets they started with\n    ans = 15\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 69):\n        if isprime(i) and isprime(69-i):\n            return 69 - 2*i\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Since Time Problems generally require calculating the number of ways an event can happen over time,\n    # and since the provided details are extremely sparse, we are left to make an assumption on what the \"Time Problem\" might entail.\n    # Without clear instructions, it is a challenge to provide an accurate solution. Given the lack of context, \n    # we'll assume a simple interpretation where we count the single way a minute passes on a clock.\n\n    # There is one way for one minute to pass, which corresponds to moving one minute forward in time.\n    ans = 1\n\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's consider distance to be 'd' \n    d = symbols('d')\n    \n    # time taken when traveling at 3 km/h (time = distance / speed)\n    time_at_3kmph = d / 3\n    # time taken when traveling at 7 km/h\n    time_at_7kmph = d / 7\n    \n    # equation based on being 12 min late when travelling at 3 km/h\n    # and 8 min early when traveling at 7 km/h, converting minutes to hours by dividing by 60\n    eq = Eq(time_at_3kmph - time_at_7kmph, (12 + 8) / 60)\n\n    # solve for distance \n    distance = solve(eq, d)[0]\n    \n    return distance\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_questions = 10\n    correct_points = 10\n    incorrect_points = -5\n    total_score = 70\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_score:\n            return correct\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # After analyzing the problem, I see that to maximize the value, we want to maximize the result of multiplication \n    # and minimize the subtraction effect.\n\n    # Original: 15 + 5 * 5 + 15 - 6 + 7\n    # If we add brackets as follows:\n    # (15 + 5) * (5 + 15) - 6 + 7\n    # We maximize the multiplication while keeping the subtraction and addition unaffected.\n    # This will give us the maximum result, as multiplication has precedence over addition and subtraction.\n    \n    result = (15 + 5) * (5 + 15) - 6 + 7\n    return result\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'\n    primes = [int(''.join(p)) for p in sorted(set(digits), reverse=True) if isprime(int(''.join(p)))]\n    max_prime = max(filter(lambda x: x < 50, primes))\n    return max_prime\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of students in school A\n    # Let y be the original number of students in school B\n    x, y = symbols('x y')\n\n    # After transferring 20 students from A to B, A has x-20 and B has y+20 students\n    equation1 = Eq(x - y, 30) # A has 10 more students than B plus the 20 transferred\n    equation2 = Eq(x + y, 1050) # Total number of students before transfer\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n\n    # Number of students taking only maths class\n    only_math_students = math_students - both_classes_students\n    \n    # Number of students taking writing class (both only writing and both classes)\n    writing_students = total_students - neither_classes_students - only_math_students\n\n    return writing_students\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_of_sequence = sum(range(1, 18, 2))\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n    return last_three_average\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut can increase the maximum number of pieces by the cut's index number\n    slices = 0\n    for cut in range(1, 5):\n        slices += cut\n    return slices\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    ans = sum(sum_of_digits(page) for page in range(1, 110))\n    return ans\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_elephant = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between_rabbit_elephant\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Adriana's calculation\n    girls_fraction_of_remainder = 1 - 4 / 5\n    girls_fraction_of_total = girls_fraction_of_remainder * (5 / 7)\n    adults_fraction_of_total = 2 / 7\n    difference_fraction = adults_fraction_of_total - girls_fraction_of_total\n    \n    # Calculate the number of people based on the difference (80 people)\n    adults_minus_girls = 80\n    total_people_based_on_difference = adults_minus_girls / (difference_fraction)\n    \n    # Verify Adriana's calculation mistake\n    # The error is in calculating the girls' fraction of total audience\n    # Correct calculation should be; \n    # The fraction of girls of the remaining audience, which is 5/7 of the total audience.\n    correct_girls_fraction_of_total = (1 / 5) * (5 / 7)\n    \n    # Correct difference calculation\n    correct_difference_fraction = adults_fraction_of_total - correct_girls_fraction_of_total\n    \n    # Calculate the correct number of total people\n    correct_total_people = adults_minus_girls / (correct_difference_fraction)\n    \n    # Return the correct number of people at the play\n    return int(correct_total_people)\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let teddy's present age be x and his father's present age be y\n    teddy, fathers_present = symbols('teddy fathers_present')\n    \n    # When Teddy was 5, his father's age was 7 times Teddy's age\n    eq1 = Eq(fathers_present, 7*5 + (teddy - 5))\n    \n    # When his father is 40 years old, how old will Teddy be?\n    # Father's age will be 40 when Teddy's age is (x + (40 - y))\n    eq2 = Eq(teddy + (40 - fathers_present), 40 - fathers_present + teddy)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (teddy, fathers_present))\n    \n    # Teddy's age when his father is 40\n    teddys_age_when_father_is_40 = solutions[teddy] + (40 - solutions[fathers_present])\n    \n    return teddys_age_when_father_is_40\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pink, gray = symbols('pink gray')\n    equation1 = Eq(gray, 11 * pink)\n    equation2 = Eq(pink + gray, 48)\n\n    solutions = solve((equation1, equation2), (pink, gray))\n\n    return solutions[pink]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum([i**2 for i in range(2, 33, 3)])\n    return sum_squares\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 0.35 * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Including Candy's own cabinet\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # Originally, the number of tables and chairs is equal\n    equation1 = Eq(tables, chairs)\n    # After selling 42 tables and bringing in 24 chairs, there will be 4 times as many chairs as tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if int(f\"106{Y}\") % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    total_books = 455 + 198\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    cookies_eaten = 6\n    remaining_cookies = initial_cookies - cookies_eaten\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    total_classes = 5\n    total_boxes_ordered = boxes_per_class * total_classes\n    return total_boxes_ordered\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the base of both terms of the divisor to have the same base\n    numerator = 2**2019\n    divisor = (2**2)**982 - 2**1963\n\n    # Rewriting 4^982 as (2^2)^982 = 2^(2 * 982)\n    divisor = 2**(2 * 982) - 2**1963\n\n    # Since we want to find the remainder when divided by 5, it is enough\n    # to consider the remainders of the terms when divided by 5.\n    # According to Fermat's little theorem, 2^(p-1) ≡ 1 (mod p) for a prime p,\n    # Hence, for p=5, 2^4 ≡ 1 (mod 5). So we can reduce the exponents modulo 4.\n    remainder_numerator = numerator % 4\n    # For the divisor, we notice that 2*982 > 1963, hence the 2^1963 term\n    # will be subtracted from a larger power of 2, giving a remainder of 0 when\n    # divided by 5, since it will be a multiple of 2^4.\n    # From the first term (2^(2 * 982)), only the remainder of the power of 2\n    # over 4 is enough for exact calculation of remainder over 5.\n    remainder_divisor = (2 * 982) % 4\n\n    # Now calculate powers of 2 with these remainders and find remainder over 5\n    rem_numerator = (2**remainder_numerator) % 5\n    rem_divisor = (2**remainder_divisor) % 5\n\n    # Since 2^1963 is subtracted from 2^(2*982),\n    # and both are congruent to 1 modulo 5,\n    # when their difference is taken, the remainder is 0\n    # Thus we only care about 2^2019's remainder.\n    ans = rem_numerator  # This is the remainder of the whole expression\n    \n    return ans\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    max_num = 0\n    # Since the number is divisible by 2 and 5, it must end with 0.\n    last_digit = 0\n    # Loop through possible second last digits (0-9)\n    for second_last_digit in range(10):\n        # Construct the number\n        number = int(f\"49{second_last_digit}{last_digit}\")\n        # Check divisibility by 2, 3, and 5\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            # Update max_num if this number is greater than current\n            max_num = max(max_num, number)\n\n    return max_num\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Sum of the cubes of the first n natural numbers is (n(n+1)/2)^2\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Sum of the first n natural numbers is n(n+1)/2\n    sum_of_natural = n * (n + 1) // 2\n    \n    # Calculating required fraction\n    ans = sum_of_cubes / sum_of_natural\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the jar and y be the mass of one chocolate\n    # We have two equations based on the given information:\n    # x + 5y = 185\n    # x + 17y = 317\n\n    # We can solve the system of equations to find the value of x and y\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + 5*y, 185)\n    equation2 = Eq(x + 17*y, 317)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solutions[x] + 10 * solutions[y]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x, y, z as the number of motorcycles, cars, and lorries, respectively.\n    x, y, z = symbols('x y z')\n    \n    # We have three equations based on the problem statement:\n    # 1. The total number of vehicles is 27: x + y + z = 27\n    # 2. The total number of wheels is 96: 2x + 4y + 6z = 96\n    # 3. The number of cars is equal to the number of lorries: y = z\n\n    # Setting up the equations\n    equation1 = Eq(x + y + z, 27)\n    equation2 = Eq(2*x + 4*y + 6*z, 96)\n    equation3 = Eq(y, z)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution = 700\n    sugar_percentage = 0.32\n    sugar_content = total_solution * sugar_percentage\n    water_content = total_solution - sugar_content\n    return water_content\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n    \n    # Given: Ana is 116cm taller than Olaf\n    equation1 = Eq(ana, olaf + 116)\n    \n    # Given: Kristoff is 5.5 times the height of Olaf\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    \n    # Given: Ana is 150cm\n    ana_height = 150\n\n    # Solving for Olaf's height\n    olaf_height = solve(equation1.subs(ana, ana_height), olaf)[0]\n\n    # Solving for Kristoff's height\n    kristoff_height = solve(equation2.subs(olaf, olaf_height), kristoff)[0]\n\n    # Difference in height between Kristoff and Ana\n    height_difference = kristoff_height - ana_height\n\n    return height_difference\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800  # The total length of the road in meters\n    trees_to_plant = 21  # The total number of trees to be planted\n\n    # Since trees are also planted at both ends, we have one less interval than the number of trees\n    intervals = trees_to_plant - 1\n\n    # The distance between one tree and another is total length divided by the number of intervals\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of each fruit\n    apples, pears, mangoes = symbols('apples pears mangoes')\n\n    # The cost of each fruit type\n    cost_per_apple = 0.60\n    cost_per_pear = cost_per_apple * (3/2)  # From the apple-pear cost ratio\n    cost_per_mango = cost_per_pear * (1/5)  # From the pear-mango cost ratio\n\n    # Equations based on the problem statement\n    eq1 = Eq(pears, apples * (4/5))  # John bought 4/5 as many pears as apples\n    eq2 = Eq(mangoes, apples * (2/5))  # John bought 2/5 as many mangoes as apples\n    eq3 = Eq(apples * cost_per_apple + pears * cost_per_pear + mangoes * cost_per_mango, 150)  # Total cost is $150\n\n    # Solve the system of equations for the number of each fruit\n    solutions = solve((eq1, eq2, eq3), (apples, pears, mangoes))\n\n    # Total number of fruits John bought\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    letters = \"ELEMENT\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    \n    total_permutations = factorial(len(letters))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # The number is divisible by 2 if the last digit is 0 or even.\n    # Since the number must also be divisible by 5, the last digit must be 5 or 0.\n    # The smallest digit for divisibility by 5 is 0.\n    # Therefore, the last digit is 0.\n\n    # The number is divisible by 3 if the sum of its digits is divisible by 3.\n    # So far the sum of the digits is 1+9+9+2+0 = 21, which is already divisible by 3.\n    # The remaining two digits must addup to a number divisible by 3 to keep the whole number divisible by 3.\n    # The smallest two digits that are divisible by 3 when summed up are 0 and 3 or 1 and 2.\n    # Since we are looking for the smallest possible number, we'll select 0 and 3.\n    \n    # For divisibility by 11, the difference between the sum of digits at odd places and\n    # the sum of digits at even places is either 0 or multiples of 11.\n    # Let's try to add digits to make it divisible by 11 while keeping the divisibility with 2, 3, and 5.\n    # The sum of the odd places' digits is 1+9+2+x (where x is the second to last digit).\n    # The sum of the even places' digits is 9+9+y+0 (where y is the third to last digit).\n    # Their difference must be divisible by 11.\n    # x - y must be either 0 or a multiple of 11; since it's between two single-digit numbers, it must be 0.\n    # So x has to be equal to y to make the number divisible by 11.\n    \n    # Now let's find x and y based on the smallest summands that are divisible by 3.\n    # We already found that using 0 and 3 will work for 3, but we need to test divisibility by 11.\n    # Since x has to be equal to y, trying 0 and 0 won't affect the sum and will keep it divisible by 3.\n    # Thus, we select x and y to be 0.\n\n    # Assigning 0s to the squares will make the smallest possible number.\n    final_number = 1992000\n    return final_number\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    total_second_half = 65 * 6  # As there are 6 months in the second half of the year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12  # As there are 12 months in a year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    difference = 1\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Average score of 6 assignments\n    avg_6_assignments = 92\n    # Total score from 6 assignments\n    total_score_6 = avg_6_assignments * 6\n\n    # Average score of the first 5 assignments\n    avg_5_assignments = 94\n    # Total score from the first 5 assignments\n    total_score_5 = avg_5_assignments * 5\n\n    # Score of the sixth assignment\n    score_6th_assignment = total_score_6 - total_score_5\n\n    return score_6th_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price = 65\n    selling_price = 74\n    remaining_shoes = 5\n    total_profit = 440\n\n    profit_per_pair = selling_price - purchase_price\n    number_of_pairs_sold = total_profit // profit_per_pair\n    initial_shoes = number_of_pairs_sold + remaining_shoes\n\n    return initial_shoes\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let's assume the number of cars at the beginning is x.\n    # According to the problem statement:\n    # x + 8 (cars enter) - 10 (cars exit) = 30 (cars now)\n    # So we can write an equation as:\n    # x + 8 - 10 = 30\n    # Simplify the equation:\n    # x - 2 = 30\n    # So the number of cars at the beginning is:\n    x = 30 + 2\n    return x\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    days = 0\n    current_volume = 0\n    while current_volume < 59:\n        days += 1\n        if days == 1:\n            current_volume += 3\n        else:\n            current_volume += (10 - 3)\n    return days\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    # Duration from halfway to end\n    duration_halfway_to_end = end_time - halfway_time\n    \n    # The start time is the halfway time minus the 'halfway to end' duration\n    start_time = halfway_time - duration_halfway_to_end\n    \n    # Formatting the answer as 'H:M AM/PM' format\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    time_limit = 30 * 60  # half an hour in seconds\n    digits_written = 0\n    current_number = 1\n    \n    while digits_written + len(str(current_number)) <= time_limit:\n        digits_written += len(str(current_number))\n        current_number += 1\n    \n    return current_number - 1\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Let x be the number we are looking for\n\n    # Step 1: Start with the final result and apply the inverse operations in reverse order\n    final_result = 6\n    \n    # Apply inverse of subtracting 4, which is adding 4\n    step_1 = final_result * 10 + 4\n    \n    # Apply inverse of squaring the number, which is taking the square root\n    step_2 = step_1 ** 0.5\n    \n    # Apply inverse of dividing by four, which is multiplying by four\n    step_3 = step_2 * 4\n    \n    # Apply inverse of multiplying by two, which is dividing by two\n    x = step_3 / 2\n    \n    return x\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amys_cycle = 24\n    ginny_cycle = 36\n\n    lcm = (amys_cycle * ginny_cycle) // gcd(amys_cycle, ginny_cycle)\n\n    return lcm\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    teams = 20\n    # Since each team plays with every other team once, we calculate the combination of 20 choose 2\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_3_minutes = 27\n    toys_per_minute = toys_per_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    time_played = timedelta(minutes=225)\n    start_time = end_time - time_played\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell must draw all the non-green marbles before he gets the first green one in the worst case.\n    blue = 5\n    white = 9\n    black = 2\n\n    # Calculate the total number of non-green marbles, which is the worst case before he gets a green one\n    total_non_green = blue + white + black\n\n    # He has to draw at least one more marble to get the first green one\n    total_draws = total_non_green + 1\n\n    return total_draws\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = initial_rabbits * 3 // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climb = 20\n    daily_climb = 6\n    climb_day_7 = 2\n    # On the 6th day, the snail is not yet out, so it is less than 20 meters\n    # So the total height climbed by the snail in 6 days is less than 20 meters\n    height_after_6_days = total_climb - climb_day_7\n    \n    # The snail climbs 6 meters every day except the 7th\n    # After 6 days, it has climbed 6 meters/day * numberOfDays, which should be less than height_after_6_days\n    number_of_days = 6 \n    total_daytime_climbing = daily_climb * number_of_days\n    \n    # The total climb minus the climb on the 7th day gives us the height before day 7\n    # Then we subtract the total_daytime_climbing to get the sum of all night slides\n    # Since the night slide is consistent, we divide it by number_of_days to get the nightly slide distance\n    nightly_slide = (height_after_6_days - total_daytime_climbing) / number_of_days\n\n    return nightly_slide\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candy_speed, ivy_speed = symbols('candy_speed ivy_speed')\n    \n    # Ivy started first and walked for 18 minutes by the time they met\n    ivy_travel_time = 18  # in minutes\n    \n    # Candy started 6 minutes later, so she walked for 12 minutes by the time they met\n    candy_travel_time = 12  # in minutes\n    \n    # Ivy walks 20 meters per minute more than Candy\n    equation1 = Eq(ivy_speed, candy_speed + 20)\n    \n    # The total distance they covered when they met should be 1200 meters\n    # Ivy's distance + Candy's distance = 1200 meters\n    equation2 = Eq(ivy_speed * ivy_travel_time + candy_speed * candy_travel_time, 1200)\n    \n    # Solve the equations to find the walking speed of Candy\n    solutions = solve((equation1, equation2), (candy_speed, ivy_speed))\n    \n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Therefore, with 8 players, each player participates in 7 games.\n    # Since each player records a different number of wins,\n    # the possible number of wins are 0, 1, 2, 3, 4, 5, 6, 7 (since there can be no ties).\n    # The champion will be the one with the highest number of wins, which is 7.\n\n    return 7\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    nums = combinations_with_replacement(range(1, 14), 4)\n    max_product = 0\n    for combination in nums:\n        if sum(combination) == 13:\n            product = 1\n            for num in combination:\n                product *= num\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_cm_to_m = 1 / 6  # 1 cm represents 6 meters\n    plan_playground_length_cm = 5\n    real_playground_length_m = plan_playground_length_cm / scale_cm_to_m\n    return real_playground_length_m\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Calculate the amount of nickel in each metal\n    nickel_6mg = 6 * 0.45\n    nickel_14mg = 14 * 0.60\n\n    # Total mass of the new metal\n    total_mass_new_metal = 6 + 14\n\n    # Total amount of nickel in the new metal\n    total_nickel = nickel_6mg + nickel_14mg\n\n    # Percent concentration of nickel in the new metal\n    percent_concentration_nickel = (total_nickel / total_mass_new_metal) * 100\n\n    return percent_concentration_nickel\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n    num_boxes = total_money // cost_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    tank_b = tank_a + 56\n    return tank_b\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let x represent the number of students in one row (or column) of the original square\n    # Then x^2 + 11 represents the total number of students in the original array\n    # And (x+1)^2 - 12 represents the total number of students in the new array\n    # Since both expressions represent the same total, we set them equal to each other and solve for x:\n    # x^2 + 11 = (x+1)^2 - 12\n    \n    # Import the solve function from sympy\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol x\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(x**2 + 11, (x + 1)**2 - 12)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Select the positive solution, as the number of students cannot be negative\n    x_value = max(solution)\n    \n    # Calculate the number of students using the original square array size\n    num_students = x_value**2 + 11\n    \n    # Convert the solution to an integer\n    return int(num_students)\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_cost = 340\n    total_balls = 12\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_balls + 1):  # Assuming from 0 to 12 basketballs\n        volleyballs = total_balls - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # Total wealth of Mr Rich (£15 million)\n\n    richie_share = total_wealth / 3\n    remaining_after_richie = total_wealth - richie_share\n\n    thrifty_share = remaining_after_richie / 2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n\n    bounty_share = remaining_after_thrifty * 2 / 5\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    avg_apples = 26\n\n    girls_apples = 20\n\n    # Let the number of girls be g\n    # The total number of apples picked by boys is boys * boys_apples\n    # The total number of apples picked by girls is g * girls_apples\n    # The average number of apples picked by the group is avg_apples\n    # The total number of students is boys + g\n    # The equation for the average number of apples is \n    # (boys * boys_apples + g * girls_apples) / (boys + g) = avg_apples\n    # Solving for g yields the number of girls\n\n    # Rearrange the equation to find g:\n    # g = (avg_apples - boys_apples) * boys / (girls_apples - avg_apples)\n    g = (avg_apples - boys_apples) * boys / (girls_apples - avg_apples)\n\n    return int(g)\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum([sum([1/i for i in range(2, n+1)]) for n in range(2, 61)])\n    return ans\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = remaining_candy * (1/3)\n    final_remaining_candy = remaining_candy - given_to_brother\n    return final_remaining_candy\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic variables for Roy and Dennis' money\n    roy, dennis = symbols('roy dennis')\n\n    # Equation 1: Roy + Dennis = 340\n    equation1 = Eq(roy + dennis, 340)\n    # Equation 2: Dennis - 1/4 Dennis = 2 * (Roy - 2/3 Roy)\n    # Simplify to: 3/4 Dennis = 2 * (1/3 Roy)\n    equation2 = Eq(dennis * (3/4), 2 * (roy * (1/3)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate the amount of money Dennis had in the end after spending\n    dennis_end_money = solutions[dennis] * (3/4)\n\n    return dennis_end_money\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of mint candies which stays the same across all containers\n    # Let y be the total quantity of candies in the first container\n    # Then, the total quantity of candies in the second container will be y * (7/5) (since 2/7 is to 2/5 as 7 is to 5)\n    # Similarly, the total quantity of candies in the third container will be y * (9/5)\n    # Total mass of all three containers of candies is 1371\n    # Hence, y + y * (7/5) + y * (9/5) = 1371\n    \n    y = symbols('y')\n    total_mass_eq = Eq(y + y * (7/5) + y * (9/5), 1371)\n    solution_y = solve(total_mass_eq, y)\n    y = solution_y[0]\n    \n    # Calculate the mass of strawberry candies in each container\n    strawberry_mass_1 = y * (2/5)\n    strawberry_mass_2 = y * (7/5) * (2/7)\n    strawberry_mass_3 = y * (9/5) * (2/9)\n    \n    # Total mass of strawberry candies is the sum of strawberry candies from all three containers\n    total_strawberry_mass = strawberry_mass_1 + strawberry_mass_2 + strawberry_mass_3\n    \n    return total_strawberry_mass\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    total_digits = 300\n    # Initialize the count of digits and the page number\n    digits_count = 0\n    page_number = 0\n    \n    while digits_count < total_digits:\n        page_number += 1\n        digits_count += len(str(page_number))\n    \n    # Because we exceed the count we should decrease the last page number\n    return page_number - 1\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    balls_cost = 20.45\n    num_balls = 8\n    num_hula_hoops = 6\n    \n    total_balls_cost = balls_cost * num_balls\n    total_hula_hoops_cost = total_cost - total_balls_cost\n    cost_per_hula_hoop = total_hula_hoops_cost / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 693 into prime factors\n    prime_factors = factorint(693)\n\n    # Find the smallest number to multiply by \n    # to make each power of the prime an even number (perfect square requirement)\n    smallest_multiplier = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:\n            smallest_multiplier *= prime\n\n    return smallest_multiplier\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drunk = 9       # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk\n    \n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # The unit digit of powers of 13 cycle every 4 powers: 3, 9, 7, 1, ...\n    unit_digit_13 = (13 ** (242 % 4)) % 10\n    \n    # The unit digit of powers of 17 also cycle every 4 powers: 7, 9, 3, 1, ...\n    unit_digit_17 = (17 ** (379 % 4)) % 10\n    \n    # The unit digit of powers of 4 cycle every 2 powers: 4, 6, ...\n    # Since 2012 is even, the unit digit of 4^2012 will be 6\n    unit_digit_4 = 6\n    \n    # Calculate the unit digit of the second term\n    second_term_unit_digit = (unit_digit_17 * unit_digit_4) % 10\n    \n    # Find the unit digit of the entire expression by adding the unit digits\n    ans = (unit_digit_13 + second_term_unit_digit) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3.5  # kilograms\n    cost_per_kg = 7.5  # pounds per kilogram\n    note_value = 20  # pounds\n\n    total_cost = steak_weight * cost_per_kg\n    additional_money_needed = total_cost - note_value\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n    position_from_end = total_people - eddie_position + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Given conditions\n    equation1 = Eq(marry, 7/5 * alexis)                                 # Marry had 7/5 as many stickers as Alexis\n    equation2 = Eq(marry - 0.20 * marry, charlotte + 0.20 * charlotte)  # Marry gave 20% of her stickers to Charlotte\n    equation3 = Eq(alexis - 0.20 * alexis, charlotte + 0.80 * charlotte)  # Alexis gave 20% of her stickers to Charlotte\n    equation4 = Eq(marry - 0.20 * marry, charlotte + 0.20 * charlotte + 20)  # Marry had 20 stickers more than Charlotte in the end\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit should be from 1 to 9 (inclusive)\n        for j in range(0, 10):  # The second digit should be from 0 to 9 (inclusive)\n            palindromic_num = int(f\"{i}{j}{j}{i}\")\n            count += 1\n    return count\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    initial_total = Eq(benson + clive, 705)\n    purchases = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((initial_total, purchases), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    light_ball_mass, heavy_ball_mass = symbols('light_ball_mass heavy_ball_mass')\n    \n    # Define the equations based on the problem statement\n    eq1 = Eq(heavy_ball_mass, 2 * light_ball_mass)\n    eq2 = Eq(6 * light_ball_mass + 6 * heavy_ball_mass, 65.7)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (light_ball_mass, heavy_ball_mass))\n    \n    # Extract the mass of a light bowling ball and round to the nearest kg\n    light_ball_mass_solution = round(solutions[light_ball_mass])\n\n    return light_ball_mass_solution\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let the number of pens Denise has be 'd'\n    # Jay has 6 times as many pens as Denise, so Jay has '6 * d' pens\n    # Together they have 126 pens, so 'd + 6 * d = 126'\n\n    # Solve for 'd'\n    d = 126 // 7  # Simplified equation: 7 * d = 126\n\n    return d\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # average_of_AB = (A + B) / 2 = 50\n    # average_of_BC = (B + C) / 2 = 43\n    # average_of_AC = (A + C) / 2 = 45\n\n    # From the above equations, we get:\n    # A + B = 100\n    # B + C = 86\n    # A + C = 90\n\n    # Adding all three equations, we get:\n    # 2A + 2B + 2C = 276\n    # A + B + C = 276 / 2\n    # average_of_ABC = (A + B + C) / 3\n\n    # Hence,\n    average_of_ABC = (276 / 2) / 3\n\n    return average_of_ABC\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    equation2 = Eq(boys + girls, 650)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Price of one chocolate bar\n    chocolate_bar_price = 1.26\n    # Total cost of 5 chocolate bars\n    total_cost_chocolate = 5 * chocolate_bar_price\n    \n    # Total cost of 6 cookies is the same\n    total_cost_cookies = total_cost_chocolate\n    \n    # Price of one cookie\n    cookie_price = total_cost_cookies / 6\n    \n    # Money spent on 4 cookies\n    money_spent_on_cookies = 4 * cookie_price\n    \n    # Initial amount of money\n    initial_money = 9.05\n    \n    # Money left after buying 4 cookies\n    money_left = initial_money - money_spent_on_cookies\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            # Sum the digits of the number\n            digits_sum = sum([int(digit) for digit in str(i)])\n            if digits_sum == 8:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    G, B = symbols('G B')\n\n    # Equations based on the problem statement\n    # After 25 girls go out, G - 25 is 2/3 of B\n    equation1 = Eq(G - 25, 2/3 * B)\n    \n    # After 15 boys leave to play soccer, B - 15 equals G - 25\n    equation2 = Eq(B - 15, G - 25)\n    \n    # Solve the system of equations\n    sol = solve((equation1, equation2), (G, B))\n\n    # Extracting solutions for G and B\n    girls = sol[G]\n    boys = sol[B]\n\n    # Total number of students\n    total_students = girls + boys\n\n    return total_students\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n    midnight_temperature = midday_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # From the equation 8 * 11 = box * 9 + 34,\n    # We rearrange the equation to find the value of box\n    # box * 9 = 8 * 11 - 34\n    # box = (8 * 11 - 34) / 9\n    box = (8 * 11 - 34) / 9\n    return box\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let's denote x as the number of 10-cent coins and y as the number of 50-cent coins\n    # Since the ratio is 8:3, we have x/y = 8/3 or 3x = 8y.\n    # Total value of all coins is 75.90 dollars, which means 0.10x + 0.50y = 75.90.\n    \n    # Multiply the value equation by 10 to get rid of decimals:\n    # x + 5y = 759\n    \n    # We use substitution or simultaneous equation techniques to solve for x and y.\n    # 3x = 8y.\n    # x = 5y / 3\n    # Substitute x into the value equation:\n    # 5y/3 + 5y = 759\n    # Multiply through by 3 to get rid of the fraction:\n    # 5y + 15y = 2277\n    # 20y = 2277\n    # y = 2277 / 20\n    \n    y = 2277 / 20\n    # The total value of 50-cent coins is then:\n    value_of_fifty_cent_coins = 0.50 * y\n    \n    return value_of_fifty_cent_coins\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces = pieces + cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    volume_prism = 320\n\n    base_area = base_side_length * base_side_length\n    hole_area = hole_side_length * hole_side_length\n    effective_base_area = base_area - hole_area\n\n    height = volume_prism / effective_base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as a single unit, together with the other 6 people, we now have 7 units.\n    # We arrange these 7 units around a circle, the number of arrangements is (7-1)! due to rotational symmetry.\n    circular_arrangements = factorial(6)\n    \n    # Amy and Judy can switch places with each other, so 2! arrangements for them.\n    amy_judy_arrangements = factorial(2)\n    \n    # The total arrangements is the product of these two.\n    total_arrangements = circular_arrangements * amy_judy_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize the series starting point and other required variables\n    total_numbers = 0\n    i = 0\n    \n    # Loop until we reach the total required number count\n    while total_numbers < 2008:\n        i += 1\n        total_numbers += i\n    \n    # Find the remaining number after last complete series\n    remaining = total_numbers - 2008\n    \n    # The required number will be 'i - remaining'\n    required_number = i - remaining\n    \n    return required_number\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    return sum(sequence)\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5  # weight of one x in grams\n    total_x_weight = 3 * x_weight  # total weight for 3 x's\n    y_weight = total_x_weight / 10  # weight of one y\n\n    return y_weight\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 9]\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    \n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Iterate over all three-digit numbers\n    for i in range(100, 1000):\n        # Calculate the sum of the digits\n        if sum(int(digit) for digit in str(i)) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31  # Total number of nights\n    a16 = 100  # The number of mosquitoes eaten on the 16th night\n    d = 6  # The common difference (6 more each night)\n\n    # Calculate the first term (a1) using the formula: an = a1 + (n - 1)d\n    a1 = a16 - (16 - 1) * d\n\n    # Calculate the sum of an arithmetic sequence using the formula: S_n = n/2 * (2a1 + (n - 1)d)\n    S_n = n / 2 * (2 * a1 + (n - 1) * d)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags // 3\n    bags_left = total_bags - bags_given_away\n\n    return bags_left\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    # The numbers between 1 and 100 that give a remainder of 2 when divided by 5 are an arithmetic sequence.\n    # The first term is 2 (since 2 % 5 == 2) and the common difference is 5.\n    \n    first_term = 2\n    difference = 5\n    last_term = (100 // 5) * 5 + 2  # Find the largest multiple of 5 within the range and add 2\n    \n    # Ensure the last term does not exceed the range of 100.\n    if last_term > 100:\n        last_term -= difference\n    \n    # Calculate the number of terms in the arithmetic sequence.\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence is given by (n/2) * (first_term + last_term)\n    sum_numbers = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_numbers\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        ABC = A * 100 + B * 10 + C\n\n        if A != 0:  # Ensure A is not 0 because it's a 3-digit number.\n            return ABC\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure that Chris always wins, he needs to make sure that he leaves a \n    # multiple of 3 matches for Dylan to choose from after his turn. \n    # This is because if Dylan is left with a multiple of 3, whatever he picks\n    # (either 1 or 2 matches), Chris can always pick the rest to make the total \n    # picked in that round 3. This way, Chris can always force Dylan to pick the last match.\n    # Since there are 7 matches, to leave a multiple of 3 for Dylan after Chris' turn,\n    # Chris must take away 1 match. This leaves 6 matches, which is a multiple of 3.\n\n    matches_removed_by_chris = 1  # Chris should take 1 match away\n\n    return matches_removed_by_chris\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time_hours = 9\n    start_time_minutes = 23\n    end_time_hours = 13  # since 1.06 pm is 13:06 in 24-hour format\n    end_time_minutes = 6\n\n    start_time_total_minutes = start_time_hours * 60 + start_time_minutes\n    end_time_total_minutes = end_time_hours * 60 + end_time_minutes\n\n    time_difference = end_time_total_minutes - start_time_total_minutes\n\n    return time_difference\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    \n    # Loop through all permutations of digits for each letter\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n\n        # Skip permutations that don't satisfy the conditions\n        if A == 0 or D == 0:\n            continue\n        \n        # Building the numbers from the digits\n        ABAC = A * 1000 + B * 100 + A * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        \n        # Equation: ABAC + DBEC = ACEDC\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    return (64 + 36) * (64 - 36)\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming the question means that there are n number of restaurants to choose from\n    # but the actual number, n, isn't given in the question.\n    # If there is only 1 person and he has n restaurants to choose from,\n    # then the answer is simply the number of restaurants, which is n.\n    # Since n is not given, the answer would be dependent on the actual number of restaurants.\n\n    # However, because the question does not provide the value of n,\n    # and since there is no further information,\n    # we will return None to indicate that the question is incomplete.\n\n    return None\n\nans = solution()  # This will return None as the question is incomplete"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([53 - 50, 47 - 44, 41 - 38, 35 - 32, 29 - 26, 23])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # The sequence can be seen as the sum of two sequences\n    # The first sequence is 1 to 9: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    # The second sequence is 8 to 1: 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n    # Sum of the first sequence (1 to 9) using the formula n(n+1)/2 where n = 9\n    sum1_to_9 = 9 * (9 + 1) // 2\n\n    # Sum of the second sequence (8 to 1) using the formula n(n+1)/2 where n = 8\n    # We have to subtract 9 because 9 is counted in the first sequence\n    sum8_to_1 = 8 * (8 + 1) // 2\n\n    # Adding the results of both sequences\n    ans = sum1_to_9 + sum8_to_1\n\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    \n    time_taken = distance / speed\n    \n    return int(time_taken)\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    # Loop through all possible combinations of digits for A and E where A != E\n    for A in range(1, 10):  # A cannot be 0 as it is the first digit\n        for E in range(0, 10):\n            if A != E:\n                # Construct the number based on the given pattern\n                number = int(f\"{A}{E}{E}{A}\")\n                # Check if all digits are unique\n                if len(set(str(number))) == 2:\n                    return number\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_age = 4 * 25\n    harry_age = 14\n    harrys_mom_age = 36\n    harrys_sister_age = 10\n    harrys_dad_age = total_family_age - (harry_age + harrys_mom_age + harrys_sister_age)\n    \n    return harrys_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    measurements = [8300, 200, 8, 50]  # Convert all measurements to centimeters\n    closest = min(measurements, key=lambda x: abs(x - 200))\n    return closest\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    current_page = 1\n    used_digits = 0\n\n    while used_digits < total_digits:\n        used_digits += len(str(current_page))\n        current_page += 1\n\n    return current_page - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    after_lunch = initial_money * (1 - 5/12)\n    after_dinner = after_lunch * (1 - 2/7)\n    equation = Eq(after_dinner, 45)\n\n    initial_amount = solve(equation, initial_money)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_length = 9\n    page_count = 0\n    current_length = 1\n\n    while True:\n        if digits_per_length * current_length < 1524:\n            page_count += digits_per_length\n            1524 -= digits_per_length * current_length\n            current_length += 1\n            digits_per_length *= 10\n        else:\n            page_count += -(-1524 // current_length)  # Ceiling division\n            break\n\n    return page_count\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Total number of games played in the tournament\n    games_won_by_lily_eva_tina_emma = 2 + 1 + 4 + 3  # Sum of games won by the four players\n    games_won_by_gina = total_games - games_won_by_lily_eva_tina_emma  # Games won by Gina\n\n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    return 2 * difference\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "from math import sin, cos, radians, sqrt\n\ndef solution():\n    g = 9.81  # gravitational acceleration (m/s^2)\n    theta = radians(20)  # convert degrees to radians for theta\n    d = 400  # distance along the slope (m)\n    mu = 0.2  # coefficient of kinetic friction\n\n    # The net force acting on the skier along the incline\n    net_force = m * g * sin(theta) - mu * m * g * cos(theta)\n\n    # Assuming mass m cancels out for acceleration and using kinematic equation:\n    # v^2 = u^2 + 2*a*d, where u initial speed is 0\n    a = g * sin(theta) - mu * g * cos(theta)  # acceleration (m/s^2)\n    v_final = sqrt(0 + 2 * a * d)  # final velocity (m/s)\n\n    return v_final\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    # Price per shirt and bag\n    price_shirt = 5\n    price_bag = 10\n\n    # Total money spent\n    total_spent = 300\n\n    # Relation between number of shirts and bags, 4 shirts for each bag\n    shirt_per_bag = 4\n    \n    # Calculate total price for each group of 4 shirts and 1 bag\n    group_price = (shirt_per_bag * price_shirt) + price_bag\n\n    # Calculate number of groups she can buy with $300\n    num_groups = total_spent // group_price\n\n    # Calculate number of shirts she bought, using the correct relationship\n    shirts_bought = num_groups * shirt_per_bag\n\n    # Return the number of shirts\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_per_day = 1 / (6 * 5)  # Each man's per day contribution to the job\n    women_per_day = 1 / (5 * 6)  # Each woman's per day contribution to the job\n\n    combined_per_day = (10 * men_per_day) + (5 * women_per_day)  # Per day contribution of 10 men and 5 women combined\n    days_to_complete = 1 / combined_per_day  # Total days to complete the job\n\n    return days_to_complete\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    eddie_advantage = 15\n\n    # Let's assume Avril got x questions right and y questions wrong.\n    # We know that there are 10 questions in total.\n    # Therefore we can write the following equation based on the scoring rules:\n    # 10*x - 5*y = Avril's points => y = 10 - x\n    # 10*(x + 15//10) - 5*(y - 15//5) = Eddie's points => x + 15//10 + y - 15//5 = 10\n\n    # We can solve the system of equations using substitution:\n    # Avril's score = 10*x - 5*(10 - x)\n    # Eddie's score = 10*x + 15 - 5*(10 - x) + 15\n\n    # Total points:\n    # Avril's score + Eddie's score = 10*x - 5*(10 - x) + 10*x + 15 - 5*(10 - x) + 15 = 155\n    # Simplify to find x:\n    # 20*x + 30 - 50 = 155\n    # 20*x - 20 = 155 - 30\n    # 20*x = 125\n    # x = 125 // 20\n\n    avril_correct = (total_points - eddie_advantage) // 20\n\n    return avril_correct\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the different types of coffee beans\n    type_a_weight = 56\n    type_b_weight = 96\n    type_c_weight = 120\n\n    # Calculate the greatest common divisor (GCD) for the three weights\n    greatest_common_divisor = gcd(gcd(type_a_weight, type_b_weight), type_c_weight)\n\n    # The greatest possible mass for each small packet\n    # is the GCD of the three weights\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of boys at the gathering at first be 'b' and the number of girls be 'g'\n    b, g = symbols('b g')\n\n    # According to the problem, there were thrice as many boys as girls at the gathering\n    equation1 = Eq(b, 3 * g)\n\n    # After 12 boys left and another 20 girls joined, there was an equal number of boys and girls \n    equation2 = Eq(b - 12, g + 20)\n\n    # Now we solve the two equations for b and g\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    children = 6\n    apples_to_distribute = 30 - children  # Subtract one apple per child since each gets at least one\n    max_apples_to_one_child = apples_to_distribute // (children - 1) + 1  # The remaining apples are distributed to the children except one\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years until the mother is 3 times as old as Anna\n    x = symbols('x')\n    anna_age = 8 + x\n    mother_age = 44 + x\n\n    # Equation for when the mother is 3 times Anna's age\n    equation = Eq(mother_age, 3 * anna_age)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for rabbits in range(13):  # Start with the assumption that the number of rabbits can be from 0 to 12\n        chickens = 12 - rabbits\n        if 4 * rabbits + 2 * chickens == 34:  # 4 legs for each rabbit and 2 legs for each chicken\n            return rabbits  # Return the number of rabbits when the total number of legs match\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    return (2.4 * 52 / 100) + (7.6 * 52 / 100)\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of long ribbons May has\n    may_long_ribbons = symbols('may_long_ribbons')\n\n    # May's total ribbon length in cm\n    may_total_length = (7 * 40) + (may_long_ribbons * 70)\n\n    # Nancy's total ribbon length in cm\n    nancy_total_length = 18 * 70\n\n    # Total length difference in cm, converted from May's 2.4m longer\n    length_difference = 240\n\n    # Equation for the total length difference\n    equation = Eq(may_total_length - nancy_total_length, length_difference)\n\n    # Solve for the number of long ribbons May has\n    may_long_ribbons_solution = solve(equation, may_long_ribbons)\n\n    # Calculate the total number of ribbons May has (short + long)\n    may_total_ribbons = 7 + may_long_ribbons_solution[0]\n\n    return may_total_ribbons\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_volume = 1  # Total volume of 'Purple Fire' paint in litres\n    ratio_sum = 3 + 1  # Sum of ratio parts (3 parts red, 1 part blue)\n    \n    red_paint = (3 / ratio_sum) * total_volume  # Calculate volume of red paint\n    \n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    ans = 345 * 67\n    return ans\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a - 40, b + 40)\n    equation2 = Eq(a + 40, 3 * (b - 40))\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    quarter_money = total_money / 4\n    money_left = total_money - quarter_money\n    return money_left\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = len(numbers) + 1  # Including the missing number\n    mean_value = 6\n\n    # Calculate the total sum of the numbers including the missing number\n    total_sum = mean_value * total_numbers\n\n    # Calculate the sum of the known numbers\n    current_sum = sum(numbers)\n\n    # The missing number is the difference between total sum and current sum\n    missing_number = total_sum - current_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, blue = symbols('red blue')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(red + blue, 18)\n\n    solutions = solve((equation1, equation2), (red, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let x be the total amount of grass that can feed one cow for one day\n    # Therefore, the pasture can feed 8 cows for 10 days would be 8 * 10 * x = 80x\n    # Likewise, the pasture can feed 4 cows for 15 days would be 4 * 15 * x = 60x\n    # Since the amount of grass is constant, we have 80x = 60x\n    # We want to find out how many cows it can feed for 5 days, let's call it y\n    # So, we have y * 5 * x = 80x\n    # Now, solve for y: y = (80x) / (5x) = 80 / 5 = 16\n\n    y = (80 / 5)\n    return y\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_per_packet = 1.02 / 12\n    total_mass = mass_per_packet * 4\n    return total_mass\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Since we need to distribute 50 apples to 8 children with different numbers,\n    # let's start by giving each child 1 apple, which uses 8 apples.\n    remaining_apples = 50 - 8  # We have now 42 apples left to distribute.\n    \n    # We will distribute the remaining apples in a way that each child gets more than the previous child.\n    # We can do this by giving each next child one more apple than the previous child.\n    # Hence, if the last child gets x apples, the second to last will get (x - 1), next one (x - 2) and so on till we distribute all remaining apples.\n    \n    # Start finding the minimum x for which the distribution will use all the remaining apples.\n    # Assume that the second to the last child will get y apples. Then, the sum of apple distribution to the last two children would be (x + y).\n    # Given that x = y + 1 (the last child always gets one more apple than the second to the last child),\n    # we can denote the sum for the last two children as (2y + 1).\n    \n    # Now, let's continue this process.\n    # For the last three children, the sum of apples will be (3y + 3).\n    # Let's generalize this process for all 7 children that come after the first one.\n    \n    # So, we need to find the smallest y for which (7y + sum(1 to 7)) is not greater than the remaining apples.\n    \n    sum_sequential = sum(range(1, 8))  # The sum of sequential integers from 1 up to 7.\n    y = 1  # Start testing from 1 apple for the second to last child.\n\n    # Loop to find the least number of apples for the kid with most apples (x)\n    while True:\n        # Calculate the sum of 7y + sum(1 to 7)\n        total_given_away = 7 * y + sum_sequential\n        if total_given_away <= remaining_apples:\n            y += 1\n        else:\n            break\n\n    # The least number of apples the last kid can have\n    least_for_last_kid = y  # Since we found the last y for which the apples were enough\n    \n    return least_for_last_kid\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    cost_of_tapes = 3 * 9\n    cost_of_cds = 83 - cost_of_tapes\n    cost_per_cd = cost_of_cds / 4\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    divisor_without_decimal = 122\n    incorrect_result_diff = 99.396\n    correct_divisor = 1.22\n\n    incorrect_result = incorrect_result_diff * divisor_without_decimal\n    correct_result = incorrect_result / correct_divisor\n\n    return correct_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n\n    equation1 = Eq(melissa, 2 * hisham)\n    equation2 = Eq(hisham + melissa, 876)\n\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres by multiplying by 1000\n    return int(n)\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Initialize an array to represent the sequence\n    sequence = [0, 0, 0, 6, 0, 15]\n    \n    # Backtrack to find the first two numbers\n    sequence[3] = 6  # fourth number\n    sequence[5] = 15 # sixth number\n\n    # Calculate the second and third numbers\n    sequence[2] = sequence[5] - sequence[3]  # third number\n    sequence[1] = sequence[3] - sequence[2]  # second number\n\n    # Calculate the first number using the second and third numbers\n    sequence[0] = sequence[2] - sequence[1]\n    \n    # Calculate the seventh number\n    sequence.append(sequence[5] + sequence[6])\n\n    # The answer is the seventh number in the sequence\n    return sequence[6]\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Let's denote the number Tasha thinks of as x.\n\n    # According to the problem:\n    # 3x + 8 = 35\n\n    # Now we perform the inverse operations to find x.\n    # Subtract 8 from both sides:\n    # 3x = 35 - 8\n    # 3x = 27\n\n    # Now divide both sides by 3 to solve for x:\n    # x = 27 / 3\n    # x = 9\n\n    x = (35 - 8) / 3\n    return x\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * sum(1 / ((5*i + 1) * (5*i + 6)) for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    perm = permutations(digits)\n    smallest_odd_number = float('inf')\n    for p in perm:\n        num = int(''.join(p))\n        if num % 2 == 1 and num < smallest_odd_number:  # Checking for odd and smaller\n            smallest_odd_number = num\n    return smallest_odd_number\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    regions = 1 + (rectangles * (rectangles + 1)) // 2\n    return regions\n    \nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men complete the job in 16 days\n    # Therefore, 1 man completes the job in 24 * 16 days\n    man_day_work = 1 / (24 * 16)\n    \n    # 16 women complete the job in 24 days\n    # Therefore, 1 woman completes the job in 16 * 24 days\n    woman_day_work = 1 / (16 * 24)\n    \n    # 10 men and 6 women working together\n    total_work_per_day = 10 * man_day_work + 6 * woman_day_work\n    \n    # The total number of days required to complete the job\n    days_required = 1 / total_work_per_day\n    \n    return days_required\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    solution_julie = solve(equation, julie)\n    julie_pay = solution_julie[julie]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n    \n    total_pay = julie_pay + marion_pay + ethan_pay\n    return total_pay\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    positions = factorial(total_people)  # Total number of arrangements without restriction\n    \n    # Since Eddie does not want to be in the middle, we find arrangements with Eddie in the middle\n    eddie_in_middle = factorial(total_people - 1)  # Arrange the other 4 people\n    \n    # Subtract arrangements where Eddie is in the middle from the total arrangements\n    ways_to_line_up = positions - eddie_in_middle\n    \n    return ways_to_line_up\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    second_term = 24\n    fourth_term = 12\n\n    common_ratio = fourth_term / second_term\n\n    first_term = 96\n\n    n = first_term * common_ratio\n\n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sum of money Hamid had at first\n    x = symbols('x')\n\n    # After spending 1/3 of his money on a watch, he was left with 2/3 of the money\n    # After spending $56 on a tie, he was left with 3/8 of the original sum\n    # So, 2/3 of x - $56 = 3/8 of x\n\n    equation = Eq((2/3) * x - 56, (3/8) * x)\n    solution = solve(equation, x)\n\n    # Total amount spent = amount spent on watch + amount spent on tie\n    total_spent = (1/3) * solution[0] + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "def solution():\n    from itertools import permutations\n\n    # Given a list of digits from 1 to 9\n    digits = [str(x) for x in range(1, 10)]\n\n    # Initialize the minimum number with a number larger than any 9-digit number\n    min_number = 999999999\n\n    # Check all permutations of the digits to form numbers\n    for perm in permutations(digits):\n        number_str = ''.join(perm)\n        number = int(number_str)\n\n        # Check if the number is divisible by 11 using the divisibility rule\n        if number % 11 == 0:\n            min_number = min(min_number, number)\n\n    return min_number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    passing_time = 10  # seconds\n\n    # Relative speed between Eddie and the train\n    relative_speed = eddie_speed + train_speed  # m/s\n\n    # Length of the train is the distance travelled by the train in 10 seconds,\n    # with respect to Eddie's position\n    train_length = relative_speed * passing_time  # meters\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    best = 0\n    for signs in product(['+', '*'], repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        value = eval(expression)\n        if value > best:\n            best = value\n    return best\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_mark = 8\n    incorrect_deduction = -3\n    total_questions = 12\n    \n    # Let x be the number of questions answered correctly.\n    # Then (total_questions - x) is the number of incorrect or unanswered questions.\n    # The total score is x * correct_mark + (total_questions - x) * incorrect_deduction.\n    # We solve the equation for x:\n    # correct_mark * x + incorrect_deduction * (total_questions - x) = total_marks\n    for x in range(total_questions + 1):\n        if correct_mark * x + incorrect_deduction * (total_questions - x) == total_marks:\n            return x\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400 # speed in meters per minute\n\n    # The train needs to cover the distance equal to its own length plus the length of the bridge.\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge entirely\n    time_to_cross = total_distance / speed # time in minutes\n\n    return time_to_cross\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original quantities of stickers Sam and Peter have\n    sam, peter = symbols('sam peter')\n\n    # Define the equation based on the problem statement\n    # Original state: sam = peter + 40\n    # After transactions:\n    # Sam gives away 20% of his stickers: sam - 0.20 * sam\n    # Peter gives away 25% of his stickers (after receiving from Sam): peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam)\n    # End state: sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam) = peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96\n\n    # Set up the equations\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return Peter's original number of stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Hazel's current age as h, and her mom's current age as m.\n    h, m = symbols('h m')\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(h + 12, 3 * h)\n\n    # On Hazel's 18th birthday, her mom will be three times her age then.\n    equation2 = Eq(m + (18 - h), 3 * 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, m))\n\n    # We want Hazel's mom's current age\n    return solutions[m]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    summation_n = sum(range(1, 11))\n    ans = summation_n ** 2\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    n = 60\n    sum_first_5 = 10\n    sum_last_5 = 120\n    # Sum of first 5 numbers (S_5) = n/2 * (2*a_1 + (n-1)*d) where n = 5\n    # Sum of last 5 numbers (S'_5) = n/2 * (2*a_59 + (n-1)*d) where n = 5\n\n    # We have two equations:\n    # 1. sum_first_5 = 5/2 * (2*a_1 + 4*d)\n    # 2. sum_last_5 = 5/2 * (2*a_1 + 2*59*d + 4*d) = 5/2 * (2*a_1 + 2*58*d + 8*d)\n\n    # From equation 1:\n    #    2*a_1 + 4*d = 2 * sum_first_5 / 5\n    # From equation 2:\n    #    2*a_1 + 2*58*d + 8*d = 2 * sum_last_5 / 5\n\n    # Subtract eq 1 from eq 2 to get: 2*58*d + 4*d = 2 * sum_last_5 / 5 - 2 * sum_first_5 / 5\n    #    116*d + 4*d = 2 * sum_last_5 / 5 - 2 * sum_first_5 / 5\n    #     120*d = 2 * sum_last_5 / 5 - 2 * sum_first_5 / 5\n    #       d = (sum_last_5 - sum_first_5) / (5 * 60)\n\n    # Find d:\n    d = (sum_last_5 - sum_first_5) / (5 * 60)\n\n    # Use d to find a_1 from eq 1:\n    #  a_1 = (sum_first_5 / 5 - 2*d) / 2\n    a_1 = (sum_first_5 / 5 - 4*d) / 2\n\n    # The sum of all numbers in the sequence is given by the formula:\n    # S_n = n/2 * (2*a_1 + (n-1)*d)\n    sum_all_numbers = n / 2 * (2 * a_1 + (n - 1) * d)\n\n    return sum_all_numbers\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers, so there are 12 possible pairs of consecutive numbers.\n    # To ensure that we can draw 2 cards with consecutive numbers, we must consider the worst-case scenario \n    # where we draw one card of each number without getting a consecutive pair.\n    # Thus, we need to draw one more card than the number of possible pairs of consecutive numbers.\n    \n    num_consecutive_pairs = 12\n    cards_to_draw = num_consecutive_pairs + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet contains 4 page numbers - two on the front and two on the back.\n    # The fifth sheet will have the page numbers 5th from the last and 4th from the last on one side\n    # And 5th from the start and 6th from the start on the other side.\n    total_sheets = 36 // 4\n    fifth_sheet = total_sheets - 4  # As it is fifth from the last\n\n    # Page numbers on the fifth sheet from the start\n    page1 = fifth_sheet * 2 + 1\n    page2 = page1 + 1\n\n    # Page numbers on the fifth sheet from the end\n    page3 = 36 - fifth_sheet * 2\n    page4 = page3 - 1\n\n    # Total sum of the page numbers on the fifth sheet\n    sum_of_pages = page1 + page2 + page3 + page4\n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of laptops and y be the original cost per laptop\n    x, y = symbols('x y')\n\n    # equation representing the profit with initial cost\n    equation1 = Eq(x * (2000 - y), 60000)\n\n    # equation representing the profit with decreased cost\n    equation2 = Eq(x * ((2000 - (4/5) * y)), 1.3 * 60000)\n\n    # solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    answer = 10 * 2\n    return answer\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # 'a' must be less than 28 to form a valid pattern\n        for m in range(1, 7*9*a*28):  # Start from 1 and check up to LCM of (7,9,a,28) for 'M'\n            if (m % 7) < (m % 9) < (m % a) < (m % 28):\n                # Since remainders form an increasing sequence, M % 7 is the first term\n                if (m % 9 - m % 7) == (m % a - m % 9) == (m % 28 - m % a):  # Common difference in A.P.\n                    return m  # Smallest M found with the above conditions\n    return None  # No such number found\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48  # first row seats\n    last_term = 80  # last row seats\n    difference = 4  # difference in seats between consecutive rows\n    # calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # calculate the sum of an arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    digits = 0\n    for number in range(1, 130):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Initial conditions\n    men_initial = 3\n    days_initial = 2\n    length_initial = 120\n\n    # Final conditions\n    men_final = 4\n    length_final = 880\n\n    # Calculate work done by one man in one day\n    work_one_man_one_day = length_initial / (men_initial * days_initial)\n\n    # Calculate total work for the new trench\n    total_work_final = length_final\n\n    # Calculate how many days four men will take\n    days_final = total_work_final / (work_one_man_one_day * men_final)\n\n    return days_final\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    # Total people to be interviewed\n    total_people = 400\n\n    # Ellie's interview rate per week\n    ellie_rate = 60\n\n    # Total weeks when Ellie and Gloria work together\n    total_weeks_together = 4\n\n    # Total people interviewed by Ellie in 4 weeks\n    ellie_people = ellie_rate * total_weeks_together\n\n    # Remaining people to be interviewed by Gloria in 4 weeks\n    gloria_people = total_people - ellie_people\n\n    # Gloria's interview rate per week\n    gloria_rate = gloria_people / total_weeks_together\n\n    # Time it will take Gloria alone to finish interviewing everyone\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Starting with the smallest possible square where the number of boys exceeds girls by 36\n    boys_more = 36\n    \n    # Hypothetical side length of the square needed (start with 3 because 1x1 has no layers)\n    side_length = 3\n\n    # We know the arrangement is a square, boys on the outside, then girls, and so on\n    # We'll keep increasing the side length until we find the correct number of boys and girls\n    while True:\n        # Calculate the total number of boys for the current side_length, which equals\n        # to the perimeter of the outer layer minus four (because corners are counted twice) and\n        # this will continue for every second layer towards the inside.\n        boys = 0\n        girls = 0\n        for layer in range(0, side_length, 2):\n            if layer == 0:\n                boys += side_length * 4 - 4 \n            else:\n                boys += (side_length - layer) * 4 - 4\n\n        # Calculate the total number of girls for the current side_length, which is the\n        # remaining students after subtracting boys from the total students.\n        total_students = side_length * side_length\n        girls = total_students - boys\n\n        # Check if the difference between boys and girls is what we are looking for\n        if boys - girls == boys_more:\n            break\n\n        # Increase side length for next iteration\n        side_length += 2 # Increment by 2 to ensure the inner layer changes gender\n\n    return total_students\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first shelf to the second shelf.\n    # After moving, the first shelf will have (18 - x) books and the second shelf will have (24 + x) books.\n    # We want the second shelf to have twice as many books as the first shelf, so we set up the equation:\n    # 24 + x = 2 * (18 - x)\n    \n    # Solving the equation for x:\n    # 24 + x = 36 - 2x\n    # 3x = 36 - 24\n    # 3x = 12\n    # x = 4\n    \n    # Therefore, 4 books must be moved from the first shelf to the second shelf.\n    x = 4\n    return x\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 285 + Fraction(6, 7)\n    num2 = 181 + Fraction(10, 11)\n    num3 = 153 + Fraction(12, 13)\n    \n    # Calculate sum of the numerators\n    numerator_sum = num1 + num2 + num3\n    \n    # Calculate sum of the denominators\n    denominator_sum = Fraction(1, 7) + Fraction(1, 11) + Fraction(1, 13)\n    \n    # Divide the sum of numerators by the sum of denominators\n    result = numerator_sum / denominator_sum\n    \n    # Simplify the result\n    ans = result.limit_denominator()\n    \n    return ans\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_in_seconds = 20\n    distance_in_meters = 300\n\n    speed_in_meters_per_second = distance_in_meters / time_in_seconds\n\n    # Converting speed from m/s to km/h (1 m/s = 3.6 km/h)\n    speed_in_kilometers_per_hour = speed_in_meters_per_second * 3.6\n\n    return speed_in_kilometers_per_hour\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_4 = 32\n    last_box_7 = 3\n\n    # Since the last box had only 3 lollipops when he tried to put 7 in each,\n    # and 32 left over when putting 4 in each box,\n    # the total amount of lollipops is a number that, when divided by 4, leaves a remainder of 32,\n    # and when divided by 7, leaves a remainder of 3.\n\n    lollipops = lollipops_left_4  # Start with the smallest number that leaves a remainder of 32 when divided by 4.\n    while True:\n        if lollipops % 7 == last_box_7:\n            break  # Found the total number of lollipops that satisfies both conditions.\n        lollipops += 4  # Increase by 4 until we find a number that also leaves a remainder of 3 when divided by 7.\n\n    return lollipops\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = symbols('total_pupils')\n    \n    # 5 pupils are in the school band\n    band_pupils = 5\n    \n    # 2/9 of the class are neither in the band nor the choir\n    neither_band_choir = total_pupils * 2 / 9\n    \n    # Remaining pupils after subtracting those in the band\n    remaining_pupils = total_pupils - band_pupils\n    \n    # 3/4 of the remaining pupils are in the school choir\n    choir_pupils = remaining_pupils * 3 / 4\n    \n    # Equation representing the sum of pupils in band, in choir, and not in either\n    equation = Eq(band_pupils + choir_pupils + neither_band_choir, total_pupils)\n    \n    # Solve for the total number of pupils\n    solution = solve(equation, total_pupils)\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n\n    # We iterate over possible numbers of long tubes until we find a solution\n    for long_tubes in range(total_balls // 8 + 1):\n        remaining_balls = total_balls - long_tubes * 8\n        # checking if the remaining balls can be filled in short tubes\n        if remaining_balls % 5 == 0:\n            return long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # Calculate the common difference for the arithmetic sequence\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = a + (n-1)*d\n    # where a is the first term, n is the term number, and d is the common difference\n    # We can find the first term by rearranging the formula:\n    # a = third_term - (3-1)*common_difference\n    first_term = third_term - (3 - 1) * common_difference\n\n    # Now we can find the 11th term\n    eleventh_term = first_term + (n - 1) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(i**3 for i in numbers)\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 0.15\n    discount_amount = original_price * discount\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    true_result = incorrect_result / (432 - 4.32)\n    \n    return true_result\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the initial number of Felicia's bracelets\n    # Let J be the initial number of Janice's bracelets, which is 96\n\n    J = 96\n\n    # Felicia sells 3/5 of her bracelets, and Janice buys 2/5 of those sold\n    # Therefore, Felicia has 2/5F remaining, and Janice has 96 + (3/5 * 2/5)F\n\n    # Afterwards, the ratio of Felicia's to Janice's is 5:7\n    # (2/5)F / (J + (3/5 * 2/5)F) = 5/7\n    # Cross multiply to solve for F\n    # 7 * (2/5)F = 5 * (J + (3/5 * 2/5)F)\n    # 7 * (2/5)F = 5J + (3 * 2/5 * 5/5)F\n    # 7 * (2/5)F = 5J + (3/5)F\n    # 14/5F - 3/5F = 5J\n    # 11/5F = 5J\n    # F = (5J) / (11/5)\n    # F = (5 * 96) / (11/5)\n    # F = (5 * 96) * (5/11)\n    # F = 480 * (5/11)\n    F = (5 * J) * (5 / 11)\n\n    # Now, to find out how many bracelets Janice bought\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 3/5 of total\n    # Janice bought (3/5 * 2/5) * F\n    bracelets_bought = (3/5 * 2/5) * F\n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The remainders are the same when 2017, 2758, and 3670 are divided by A.\n    # We need to find A such that:\n    # 2017 ≡ 2758 (mod A) and 2017 ≡ 3670 (mod A)\n    # The difference between these numbers must be divisible by A.\n    a_diff = 2758 - 2017\n    b_diff = 3670 - 2017\n\n    # Find common divisors of a_diff and b_diff\n    gcd_a_b = gcd(a_diff, b_diff)\n    divisors = []\n\n    # Loop through 1 to gcd_a_b and check if it's a divisor of gcd_a_b\n    for i in range(1, int(gcd_a_b**0.5)+1):\n        if gcd_a_b % i == 0:\n            divisors.append(i)\n            if i != gcd_a_b // i:\n                divisors.append(gcd_a_b // i)\n\n    # Calculate the sum of divisors excluding 1, since A should be greater than 1\n    divisors.remove(1)\n    sum_of_divisors = sum(divisors)\n\n    return sum_of_divisors\n\nfrom math import gcd\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(5 * boys + 3 * girls, 448) # Total candy distribution equation\n    equation2 = Eq(girls, boys + 8) # There were 8 more girls than boys\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk_init, fruit_init = symbols('milk_init fruit_init')\n\n    # Initial ratio of milk candy to fruit candy\n    equation1 = Eq(milk_init / fruit_init, 7/9)\n\n    # After eating 8 pieces of milk candy, the ratio changes\n    equation2 = Eq((milk_init - 8) / fruit_init, 2/3)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (milk_init, fruit_init))\n\n    return solutions[milk_init]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    grandmother_age_2008 = 80\n    mother_age_1996 = 40\n    years_difference = 2008 - 1996\n    mother_birth_year = 1996 - mother_age_1996\n\n    grandmother_age_at_mother_birth = grandmother_age_2008 - (2008 - mother_birth_year)\n\n    return grandmother_age_at_mother_birth\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            break\n    return count\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples_initially = 60\n    apples_per_friend_initially = 4\n    number_of_friends = total_apples_initially // apples_per_friend_initially\n    apples_per_friend_finally = apples_per_friend_initially + 1\n    total_apples_finally = number_of_friends * apples_per_friend_finally\n    \n    return total_apples_finally\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Yohan can take out at most all the red and black socks without getting a pair of white ones.\n    max_red_black = 10 + 10\n\n    # To ensure he gets a pair of white socks, he needs to take one more after the red and black socks.\n    max_to_get_white_pair = max_red_black + 1\n\n    return max_to_get_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Define the prices\n    price_lemonade = 4\n    price_plus = 7\n\n    # Total money earned\n    total_income = 2012\n\n    # Number of bottles to start with\n    total_bottles = 350\n\n    # Initialize the minimum number of bottles of \"1000 Plus\" sold\n    min_plus_bottles = 0\n\n    # Find the minimum number of \"1000 Plus\" by finding the first\n    # instance where the number of \"1000 Plus\" and Lemonade bottles,\n    # when sold, account for the total income.\n\n    # Since we are looking for the minimum number of \"1000 Plus\" bottles,\n    # we iterate through the possible number of \"1000 Plus\" bottles sold\n    # starting from 0, until we reach a count that makes the total income.\n    for plus_bottles in range(total_bottles + 1):\n        lemonade_bottles = total_bottles - plus_bottles          # Remaining is lemonade\n        income = (price_plus * plus_bottles) + (price_lemonade * lemonade_bottles)\n        if income == total_income:\n            min_plus_bottles = plus_bottles\n            break\n\n    # Return the minimum number of \"1000 Plus\" bottles sold\n    return min_plus_bottles\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    total_marks = sum(marks)\n    num_tests = len(marks)\n    mean_mark = total_marks / num_tests\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        total_students = groups_of_6 * 6 + groups_of_4 * 4\n        if total_students == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    total_for_three = 3 * 60\n    total_for_four = 4 * 90\n    fourth_number = total_for_four - total_for_three\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0: # Ensuring it is a 3-digit number\n            ABC = A * 100 + B * 10 + C\n            break\n    return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    wheat_amount = 8\n\n    # combined ratio of fish to wheat (since 3 fish = 2 rabbit, and 3 rabbits = 4 wheat)\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # fish needed for 8 packs of wheat\n    fish_needed = wheat_amount / fish_to_wheat_ratio\n    \n    return int(fish_needed)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    for i in range(2, n+1):\n        while i % 5 == 0:\n            count += 1\n            i //= 5\n    return count\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original price of the purse\n    purse_price = symbols('x')\n    \n    # Handbag price after 20% discount\n    handbag_discounted_price = 428\n    \n    # Handbag discount\n    handbag_discount = 428 / (1 - 0.20) * 0.20\n    \n    # Total discount\n    total_discount = 121\n    \n    # Purse discount\n    purse_discount = total_discount - handbag_discount\n\n    # Original price of the purse before discount\n    purse_original_price_eq = Eq(purse_price - purse_discount / 0.28, purse_price)\n    \n    # Solve for the original price of the purse\n    purse_original_price = solve(purse_original_price_eq, purse_price)\n    \n    return purse_original_price[0]\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n        \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The recurring decimal is 0.A22A2...\n    # Since the sum of the first 20 digits is 80 and two digits are repeating,\n    # we calculate the sum for each 2-digit cycle and then find the sum of 10 cycles.\n    \n    # Let's assume the value of A + 2 is the sum for one 2-digit cycle.\n    # We have 10 such cycles in the first 20 digits.\n    # Therefore, the sum of A + 2 over these 10 cycles should be equal to 80.\n    \n    cycle_sum = 80 // 10  # sum of digits in one cycle\n    A = cycle_sum - 2     # A + 2 = cycle_sum, so A = cycle_sum - 2\n    \n    return A\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate the time spent jogging\n    jogging_time = 0.5  # from 6:30 AM to 7:00 AM (half an hour)\n    jogging_speed = 6  # miles per hour\n\n    # Calculate the distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the time spent walking\n    walking_time = 1  # from 7:00 AM to 8:00 AM (one hour)\n    walking_speed = 5  # miles per hour\n\n    # Calculate the distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Calculate the total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let's denote x as the original amount of money Elvin had.\n    # According to the problem, after spending $120 on a chair and 40% of the remainder on a jacket,\n    # Elvin is left with 30% of the original amount.\n    # This gives us the equation: 0.3x = x - 120 - 0.4 * (x - 120)\n    # Simplifying the equation will give us the value of x.\n\n    x = symbols('x')\n    equation = Eq(0.3 * x, x - 120 - 0.4 * (x - 120))\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n    lcm = (a * b) // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_in_most_filled_layer = (total_books + layers - 1) // layers\n    return min_books_in_most_filled_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 4):  # Choose from 1, 2, 3 for the hundred's place\n        for tens in range(4):  # Choose from 0, 1, 2, 3 for the ten's place\n            for ones in range(4):  # Choose from 0, 1, 2, 3 for the one's place\n                if len(set([hundreds, tens, ones])) == 3:  # Make sure all digits are distinct\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # Calculate the common difference\n\n    # An arithmetic sequence: a_n = a_1 + (n-1)d\n    # To find n such that a_n < 0:\n    # a_1 + (n-1)d < 0\n    # 50 + (n-1)(-4) < 0\n    # 50 - 4n + 4 < 0\n    # 54 < 4n\n    # n > 13.5\n    \n    # Since n must be an integer, we take the next integer up after 13.5 \n    n = 14\n\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books Ahmad bought initially\n    x = symbols('x')\n    \n    # Initial total cost for x books (x times the average price per book)\n    initial_cost = x * 3.5\n    \n    # Total cost after buying 2 more books at $6 each\n    total_cost_after = initial_cost + 2 * 6\n    \n    # Total number of books after buying 2 more\n    total_books_after = x + 2\n    \n    # Equation based on the new average price\n    equation = Eq(total_cost_after / total_books_after, 4)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Total number of books is x (the initial amount) plus 2 more\n    total_books = solution[0] + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_kg = 1.2\n    weight_g = weight_kg * 1000\n    piece_weight_g = 30\n    \n    num_pieces = weight_g / piece_weight_g\n    \n    return int(num_pieces)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is approximately 1.05668821 quarts\n    liters_to_quarts = 1.05668821\n    coke_in_liters = 2.5\n    cup_capacity_in_quarts = 0.5\n    # Convert coke volume to quarts\n    coke_in_quarts = coke_in_liters * liters_to_quarts\n    # Calculate the number of cups she can drink\n    cups = coke_in_quarts / cup_capacity_in_quarts\n    # Round to the nearest integer\n    return round(cups)\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, 2, 0, C, E, F}) == 6:  # All digits must be different\n                        num1 = 500000 + A*10000 + 2000 + C*100 + E*10 + F\n                        num2 = E*100000 + F*10000 + A*1000 + 200 + C*10\n                        if num1 * 6 == num2 * 5:\n                            return A*1000 + C*100 + E*10 + F\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time jogging: From 6:30AM to 7:30AM -> 1 hour\n    jogging_speed = 6  # miles per hour\n    jogging_time = 1  # hour\n    jogging_distance = jogging_speed * jogging_time  # distance = speed * time\n\n    # Time walking: From 7:30AM to 9:30AM -> 2 hours\n    walking_speed = 5  # miles per hour\n    walking_time = 2  # hours\n    walking_distance = walking_speed * walking_time  # distance = speed * time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the number of sweet wrappers Belle had initially.\n    # Then Angel had (5/6) * b sweet wrappers initially.\n    # After throwing away 58 wrappers, Angel had (5/6) * b - 58 wrappers.\n    # At this point, Angel had 75% of Belle’s sweet wrappers, so we set up the equation:\n    # (5/6) * b - 58 = 0.75 * b.\n    b = symbols('b')\n    \n    # Equation representing the problem\n    equation = Eq((5/6) * b - 58, 0.75 * b)\n    \n    # Solve for the number of sweet wrappers Belle had initially\n    belle_wrappers = solve(equation, b)[0]\n\n    return belle_wrappers\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    \n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4 / 9) * 36\n    return ans\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    \n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x represents the number of children, y represents the total money\n    equation1 = Eq(y + 20, x * 70)\n    equation2 = Eq(y - (x * 60), 210)\n\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment_received = 120.75\n    new_balance = current_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Six years ago, the dad's age was 5 times the son's age:\n    # dad_current - 6 = 5 * (son_current - 6)\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    \n    # The sum of the current ages of the dad and his son is 78:\n    # dad_current + son_current = 78\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    return solutions[dad_current]\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len(set([vase1, vase2, vase3])) == 3:\n                    count += 1\n    return count // 6  # we divide by 6 due to overcounting of permutations among the vases\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):\n        for n in range(1, 10000):\n            original_num = (10 * n) + 9\n            new_num = int('9' + str(n))\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime.strptime('2 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    \n    delta = end_date - start_date\n    \n    return delta.days + 1\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_cost = 200\n    percentage_increase = 45 / 100\n    new_cost = initial_cost * (1 + percentage_increase)\n    return new_cost\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Since Eddie is on the left end and Avril next to Eddie, treat them as one entity.\n    # There are 5! ways to arrange the remaining 5 students.\n    remaining_students_permutations = factorial(5)\n\n    # Eddie and Avril can switch places, giving us 2 ways to arrange Eddie and Avril.\n    eddie_avril_permutations = 2\n\n    # Apply the multiplication principle.\n    total_permutations = remaining_students_permutations * eddie_avril_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Maximum gloves Dilly can pick without a guaranteed pair (worst case)\n    # One less than the total number for each of the four possibilities: \n    # blue-left, green-left, blue-right, green-right\n    worst_case = (1 - 1) + (2 - 1) + (3 - 1) + (4 - 1)\n    # Add one more glove to guarantee a matching pair\n    Dilly_should_bring = worst_case + 1\n    return Dilly_should_bring\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # The circumference of the circle\n    circumference = 300\n    # Initial interval between the trees\n    initial_interval = 3\n    # The supervisor's new interval between the trees\n    new_interval = 5\n\n    # The number of holes already dug\n    already_dug = 30\n    \n    # Calculate the distance covered by the first 30 holes\n    distance_covered = already_dug * initial_interval\n    \n    # Remaining distance to cover\n    remaining_distance = circumference - distance_covered\n    \n    # Calculate the number of additional holes required with the new interval\n    # We add 1 because the last hole's position is at the start/end of the circle\n    additional_holes = (remaining_distance // new_interval) + (1 if remaining_distance % new_interval != 0 else 0)\n    \n    return additional_holes\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    ans = pasta_choices * sauce_choices * topping_choices\n    return ans\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of sweets Rachel originally has, and a represent Alice's.\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 sweets, they have the same number, so r - 10 = a + 10\n    eq1 = Eq(r - 10, a + 10)\n    \n    # After both eating 8 sweets, Rachel has 3 times as many as Alice: (r - 8) = 3 * (a - 8)\n    eq2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solve the equations to find the values of r and a\n    solutions = solve((eq1, eq2), (r, a))\n    \n    # Calculate the original total amount of sweets\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    pages_with_3 = [i for i in range(1, 51) if '3' in str(i)]\n    return sum(pages_with_3)\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # The problem can be separated into two parts:\n    # 1. The number of ways to reach the 5th step\n    # 2. The number of ways to reach the 10th step from the 5th step\n\n    # Ways to reach the ith step can be obtained using dynamic programming,\n    # where dp[i] = dp[i-1] + dp[i-2] because he can reach ith step from \n    # (i-1)th step or (i-2)th step.\n\n    def ways_to_reach_step(n):\n        if n == 1 or n == 2: # Base cases\n            return n\n        dp = [0] * (n+1)\n        dp[1], dp[2] = 1, 2 # Base case initialization\n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n\n    # Ways to reach the 5th step\n    ways_to_5 = ways_to_reach_step(5)\n\n    # Ways to reach the 10th step from the 5th step\n    ways_from_5_to_10 = ways_to_reach_step(10 - 5)\n\n    ans = ways_to_5 * ways_from_5_to_10\n    return ans\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average = 89\n    total_assignments = 5\n    \n    # Total score Ivan has after 5 assignments\n    ivan_total_score = ivan_average * total_assignments\n    \n    # Total score Billy has after 4 assignments\n    billy_total_score_after_4 = billy_average * (total_assignments - 1)\n    \n    # Billy wants to score 10 more marks than Ivan on average\n    billy_final_average = ivan_average + 10\n    \n    # Total score Billy needs after 5 assignments to have the final average goal\n    billy_final_total_score = billy_final_average * total_assignments\n    \n    # Score Billy needs in the fifth assignment\n    billy_fifth_assignment_score = billy_final_total_score - billy_total_score_after_4\n    \n    return billy_fifth_assignment_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = total_length / pipe_length\n    \n    return int(num_pipes) if total_length % pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef calculate_expression(expression):\n    return eval(expression)\n\ndef solution():\n    operations = ['+', '*', '-']\n    numbers = ['15', '5', '5', '15', '6', '7']\n    max_value = None\n\n    # Generate all possible permutation of pairs taken from the numbers list (without repetition)\n    bracket_positions = list(permutations(range(len(numbers)), 2))\n    \n    for i, j in bracket_positions:\n        # Ensure the first index is less than the second index to have valid brackets\n        if i < j:\n            for op1 in operations:\n                for op2 in operations:\n                    expr = numbers.copy()\n                    # Inserting the operations and brackets in the expression\n                    expr[i] = f'({expr[i]} {op1} {expr[i + 1]})'\n                    expr.pop(i + 1)  # Removing the number that has been merged into the brackets\n                    expr[j - 1] = f'({expr[j - 1]} {op2} {expr[j]})'\n                    expr.pop(j)  # Removing the number that has been merged into the brackets\n                    \n                    # Joining the expression with the remaining operations\n                    current_expr = ' '.join(expr)\n                    current_value = calculate_expression(current_expr)\n                    \n                    # Updating the maximum value if a greater one is found\n                    if max_value is None or current_value > max_value:\n                        max_value = current_value\n\n    return max_value\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # Every unique pair (a, b) such that a + b = 1000 can be generated by taking a from 1 to 999.\n    # Because when a is 1, b must be 999, and when a is 999, b must be 1. When a is 500, b is also 500. \n    # This creates a unique pair for each value of a. However, since the order of numbers does not matter\n    # in this case, we would count (a, b) and (b, a) as the same. Therefore, we divide by 2 to eliminate duplicates.\n    return 999 // 2 \n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find the divisors of 1260\n    divisors_of_1260 = divisors(1260)\n    \n    # Iterate over the divisors to find a value that makes 1260m a perfect square\n    for d in divisors_of_1260:\n        m = d\n        if is_square(1260 * m):\n            return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    number_of_peaches = 45\n    number_of_apples = 5 + (2 * number_of_peaches)\n    return number_of_apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given that 39, 44, and 49 are the 7th, 8th, and 9th terms of an arithmetic sequence,\n    # we can find the common difference of the sequence by subtracting two consecutive terms.\n    common_difference = 44 - 39  # This is the common difference of the sequence.\n\n    # Now we find the first term (a1) using the 7th term (39).\n    # formula for nth term of arithmetic sequence: an = a1 + (n - 1)d\n    # Therefore, a1 = an - (n - 1)d\n    # Here, an = 39 (7th term), n = 7, d = common difference\n    a7 = 39\n    n7 = 7\n    first_term = a7 - (n7 - 1) * common_difference\n\n    # We want to find the 100th term of the sequence.\n    # Again using the formula: an = a1 + (n - 1)d\n    n100 = 100\n    a100 = first_term + (n100 - 1) * common_difference  # This is the 100th term\n\n    return a100\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_when_div_by_4 = 3\n    remainder_when_div_by_7 = 3\n\n    # Find minimum common multiple of 4 and 7 which is 28, then add the remainder which is 3\n    lcm_of_4_and_7 = 28  # 28 is already the LCM of 4 and 7\n    remainder_when_div_by_28 = (remainder_when_div_by_4 + lcm_of_4_and_7) % 28\n\n    return remainder_when_div_by_28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # Calculate least common multiple of 8 and 11 since there's no common factor.\n    # The number must be of the form lcm*k + 6, and a two-digit number.\n\n    k = 1\n    while (lcm * k + 6) < 100:\n        if (lcm * k + 6) >= 10:\n            return lcm * k + 6\n        k += 1\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    exponent = 99\n    ones_digit_sequence = [base ** i % 10 for i in range(1, 5)]  # Cycle for power's last digit of 9 is 4\n    \n    # Find the ones digit in the cycle for 9^99\n    ones_digit = ones_digit_sequence[(exponent - 1) % 4]  # (exponent - 1) because the cycle starting from 9^1 not 9^0\n\n    return ones_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity)  # Ceiling division\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    final_result = 1234\n    for month in range(1, 13):  # Assuming the month is from 1 to 12\n        for day in range(1, 32):  # Assuming the day is from 1 to 31\n            if (((month * 4 + 1) * 50) + (day * 2) - 50) == final_result:\n                return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return 2**2015 % 3\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    pages = 0\n    digits = 0\n\n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # Consider the four pupils who insist on standing together as one unit.\n    # So, we have 5 units to arrange (those 4 pupils as 1 unit + other 4 individuals).\n    units_to_arrange = 5\n\n    # The 4 pupils can be arranged among themselves in 4! ways.\n    arrangements_within_unit = factorial(4)\n\n    # The 5 units can be arranged in 5! ways.\n    arrangements_of_units = factorial(units_to_arrange)\n\n    # Total arrangements = arrangements of units * arrangements within the unit.\n    total_arrangements = arrangements_of_units * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the unknowns\n    # total_value represents the total value of the six ponies without Rein Beau\n    total_value = symbols('total_value')\n\n    # The prize pony, Rein Beau, is worth £250,000\n    rein_beau_value = 250000\n\n    # Without Rein Beau, the average value in each stable is (total_value / 6)\n    # When Rein Beau goes to the large stable, the average value in each stable is:\n    # - Small stable: (total_value - rein_beau_value) / 5\n    # - Large stable: (total_value + rein_beau_value) / 7\n    # We know that in both cases, the average rises by £10,000 when Rein Beau moves\n\n    # Set up the equation based on the average value changes\n    eq = Eq((total_value + rein_beau_value) / 7 - total_value / 6, 10000)\n\n    # Solve the equation to find the total_value\n    solved_value = solve(eq, total_value)\n\n    # The total value of all six ponies includes Rein Beau's value\n    total_six_ponies_value = solved_value[0] + rein_beau_value\n\n    return total_six_ponies_value\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    for gold_medals in range(81):  # We cannot have more than 80 gold medals\n        silver_medals = 80 - gold_medals\n        if 5 * gold_medals + 4 * silver_medals == 331:\n            return gold_medals\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    price_lamb = 8.70\n    price_beef = 9.40\n    weight_lamb = 7\n    weight_beef = 30\n\n    total_cost = (price_lamb * weight_lamb) + (price_beef * weight_beef)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the first number be x\n    # The second number will be x + 1\n    # The third number will be x + 2\n    # Their sum is x + (x + 1) + (x + 2) which equals 3x + 3\n    # According to the question, the sum is 60\n    # Hence, 3x + 3 = 60\n    # Solving for x, we get x = (60 - 3) / 3\n    x = (60 - 3) // 3\n    # The largest number is the third one, which is x + 2\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the work done by one master in one day\n    # Let a be the work done by one apprentice in one day\n    m, a = symbols('m a')\n\n    # Write equations based on the given conditions\n    equation1 = Eq(1*m + 3*a, 1/4)\n    equation2 = Eq(2*m + 1*a, 1/3)\n\n    # Solve for m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Take the inverse of the apprentice's work rate to find out\n    # how long it takes one apprentice to complete the task\n    time_for_one_apprentice = 1 / solutions[a]\n\n    return time_for_one_apprentice\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    ans = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return ans\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def star_operation(a, b):\n        # From the provided results, we try to deduce the operation\n        # Analyzing the examples, it seems that the operation a★b = a² - ab + b\n        return a**2 - a * b + b\n\n    ans = star_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Based on the given information:\n    # Elephant is 10th from left\n    # Rabbit is 9th from right\n    # 5 dolls between elephant and rabbit\n    \n    # Total dolls = dolls to the left of elephant + 1 (elephant itself) +\n    # dolls between elephant and rabbit + 1 (rabbit itself) + dolls to the right of rabbit\n    total_dolls = (10 - 1) + 1 + 5 + 1 + (9 - 1)\n\n    return total_dolls\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Let the total number of spectators be x.\n    # Then x/3 are children, so the remainder is x - x/3 = (2/3)x.\n    # 5/8 of the remainder are men, so (5/8)*(2/3)*x of the total are men.\n    # The number of women is 80, which is the remainder after children and men,\n    # so x - ((1/3)x + (5/8)*(2/3)x) is equal to 80.\n\n    # Let's solve for x.\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation for women count\n    equation = Eq(x - (x/3 + (5/8)*(2/3)*x), 80)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    total_students = 0\n    for boys in range(0, 100):  # Assuming a reasonable upper bound for calculation\n        girls = boys - 32  # Given there are 32 more boys than girls\n        if girls < 0:\n            continue\n        # Calculate the total number of students using square layers\n        total_boys = (2 * boys + 1) ** 2\n        total_girls = (2 * girls) ** 2\n        total_students = total_boys + total_girls\n        # Check if the difference between total boys and girls matches the condition\n        if total_boys - total_girls == 32:\n            break\n    return total_students\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 60 + 1))  # primerange(x, y) generates prime numbers in the range [x, y)\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given values\n    tenth_term = 23\n    fifteenth_term = 38\n    term_to_find = 102\n\n    # Calculate the common difference using the 10th and 15th terms\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    # Calculate the first term by backtracking from the 10th term\n    first_term = tenth_term - (9 * common_difference)\n\n    # Calculate the 102nd term using the first term and common difference\n    nth_term = first_term + (term_to_find - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n    comics = non_english_books // 3  # Since Chinese books are twice as many as comics, the rest should be divided by 3\n\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    total_ratio = coffee_ratio + milk_ratio\n\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_roses, original_daisies, months, new_roses, new_daisies = symbols('original_roses original_daisies months new_roses new_daisies')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(original_roses + original_daisies, 300)\n    equation2 = Eq(original_roses + months * new_roses, 280)\n    equation3 = Eq(original_daisies + months * new_daisies, 180)\n    equation4 = Eq(new_roses, new_daisies)  # same number of roses and daisies are planted each month\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (original_roses, original_daisies, months, new_roses, new_daisies))\n\n    # Return the original number of roses\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    points_per_accurate_shot = 5\n    \n    total_score = (accurate_shots * points_per_accurate_shot) + (missed_shots * 0)\n    total_shots = accurate_shots + missed_shots\n    \n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    \n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    apples = 50\n    children = 8\n    \n    # Start with the least possible distribution that ensures each child gets a different number\n    # of apples (1, 2, 3, ..., 8)\n    min_apples = sum(range(1, children + 1))  # Minimum apples to distribute 1 to each child uniquely\n    \n    # The remaining apples after the minimum distribution will be received by the child with the most apples\n    remaining_apples = apples - min_apples\n    \n    # Therefore, the child with the most apples gets 8 (maximum in initial unique distribution) plus all of the remaining apples\n    most_apples = 8 + remaining_apples\n    \n    return most_apples\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3*apple + 5*orange, 270)\n    equation2 = Eq(3*apple + 7*orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 350 * 0.20 * 0.50\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104  # m/s\n\n    # The entire train is in the tunnel when both the front and the end have entered\n    # Which means the train has to cover a distance equal to its length plus the tunnel's length\n    total_distance = train_length + tunnel_length\n\n    # Time taken to cover the distance is distance divided by speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    men_with_bow_ties = 18\n    men_with_spectacles = 23\n\n    # Since some men might wear both bow ties and spectacles, the greatest number of men that do not wear \n    # bow ties and are not wearing spectacles would be the total number of men minus the number of men \n    # that could potentially be wearing either. This situation arises when there is no overlap, i.e., \n    # everyone who wears a bow tie does not wear spectacles and vice versa.\n\n    max_men_not_wearing_any = total_men - max(men_with_bow_ties, men_with_spectacles)\n\n    return max_men_not_wearing_any\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_marbles = symbols('blue_marbles')\n    red_marbles = blue_marbles + 25\n    green_marbles = red_marbles + 32\n\n    total_marbles = Eq(blue_marbles + red_marbles + green_marbles, 112)\n\n    solution = solve(total_marbles, blue_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8 and x1 != x2:\n                count += 1\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 8 and len({x1, x2, x3}) == len([x1, x2, x3]):\n                    count += 1\n                for x4 in range(1, 8):\n                    if x1 + x2 + x3 + x4 == 8 and len({x1, x2, x3, x4}) == len([x1, x2, x3, x4]):\n                        count += 1\n                    for x5 in range(1, 8):\n                        if x1 + x2 + x3 + x4 + x5 == 8 and len({x1, x2, x3, x4, x5}) == len([x1, x2, x3, x4, x5]):\n                            count += 1\n                        for x6 in range(1, 8):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8 and len({x1, x2, x3, x4, x5, x6}) == len([x1, x2, x3, x4, x5, x6]):\n                                count += 1\n                            for x7 in range(1, 8):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8 and len({x1, x2, x3, x4, x5, x6, x7}) == len([x1, x2, x3, x4, x5, x6, x7]):\n                                    count += 1\n    \n    # Divide by 2 because each pair is counted twice, e.g., 1+7 and 7+1 are the same.\n    return count // 2\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Ali and Bala can be treated as a single entity (AB or BA).\n    # Dan must stand at the furthest left. So, we have 3 entities:\n    # Dan (D), AB, and two individuals (Charles and Ella).\n\n    # Number of ways to arrange three entities (D, AB, C, E) is factorial(3)\n    # But AB can be arranged in 2! ways because Ali and Bala can switch places.\n    arrangements = factorial(3) * factorial(2)\n\n    return arrangements\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    \n    for i in range(1, 140):\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Assume that the child with the most apples gets 'max_apples'.\n    # Start from the highest possible which is 19 (all apples to one child) \n    # and go down until we find a valid distribution.\n    for max_apples in range(19, 0, -1):\n        # Ensure that the remaining apples can be distributed among \n        # the other 4 children with each getting a different amount.\n        remaining_apples = 19 - max_apples\n        # Children can be given a minimum of 1 apple,\n        # and we need to find distinct numbers for 4 children.\n        # The smallest distinct numbers we can give to the other \n        # children would be 1, 2, 3, 4 which sum up to 10.\n        smallest_sum = 1 + 2 + 3 + 4\n        \n        # If the remaining apples are enough to provide distinct values \n        # for the other 4 children (greater than or equal to 10) and also \n        # less than or equal to the sum of the first 4 maximum distinct numbers\n        # that can be formed (which is 1+2+3+4 for 4 children), we have a valid distribution.\n        if remaining_apples >= smallest_sum and remaining_apples < smallest_sum + 4:\n            return max_apples\n    return None\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Worst case scenario is drawing all balls of one color and then another,\n    # which ensures that the next ball must be of the third color.\n    # Drawing all red balls (15) and then white (9) before getting a yellow.\n    worst_case_draws = 15 + 9 + 1\n    \n    return worst_case_draws\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = range(2, 36, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Ratio of fish to rabbits: 3 fishes / 2 rabbits\n    # Ratio of rabbits to packs of wheat: 3 rabbits / 4 packs of wheat\n    # We want to find the ratio of fishes to packs of wheat\n\n    # First, we find the ratio of fishes to rabbits to packs of wheat (combined ratio):\n    # For each rabbit, we have 3/2 fishes, so for 3 rabbits, we have (3/2) * 3 fishes.\n    # Similarly, for each pack of wheat, we have 3 rabbits, so for 4 packs of wheat, we have 3 rabbits each, which is 3 * 4 rabbits in total.\n\n    # Hence the combined ratio of fishes to packs of wheat (denoted as fishes_per_pack) is as follows:\n    fishes_per_pack = ((3 / 2) * 3) / 4\n\n    # Now, we need to find out how many fishes Owen should give Dennis for 8 packs of wheat.\n    # We simply multiply the number of packs (8) by the ratio of fishes per pack.\n    fishes_for_8_packs = fishes_per_pack * 8\n\n    return int(fishes_for_8_packs)\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Assume the minuend is xy (x and y are digits)\n    # The correct subtrahend is 30 + 2\n    # The incorrect subtrahend is 50 + 3\n    # The incorrect difference is 36\n    # xy - (50 + 3) = 36\n    # xy - 53 = 36\n    # xy = 36 + 53\n    \n    incorrect_difference = 36\n    incorrect_subtrahend = 53  # 50 + 3 since tens place is mistook as 5 and ones as 3\n    correct_subtrahend = 32    # 30 + 2 is the correct subtrahend\n    \n    # Get the minuend\n    minuend = incorrect_difference + incorrect_subtrahend\n\n    # Get the correct difference\n    correct_difference = minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n    total_sweets = ellen + lenny\n\n    equation1 = Eq(ellen - 12, (13/24) * total_sweets)\n    equation2 = Eq(lenny - 12, (3/8) * total_sweets)\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    # Define the two parts of the income\n    first_part_income = 50000\n    second_part_income = 120000 - first_part_income\n    \n    # Calculate the tax for the first part\n    first_part_tax = first_part_income * 0.06\n\n    # Define the equation for the second part's tax\n    second_part_tax = second_part_income * (0.06 + T / 100)\n    \n    # Total tax paid\n    total_tax_paid = 10000\n\n    # Equation representing total tax paid\n    tax_equation = Eq(first_part_tax + second_part_tax, total_tax_paid)\n    \n    # Solve for T\n    T_value = solve(tax_equation, T)[0]\n    \n    return T_value\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    smallest_difference = float('inf')  # Initialize to a large number\n\n    from itertools import permutations\n\n    # Generate all permutations of numbers 0-9, each permutation is a tuple\n    for perm in permutations(range(10), 5):\n        num1 = int(''.join(map(str, perm)))  # Convert first 5 digits to a number\n        for perm2 in permutations([x for x in range(10) if x not in perm], 5):\n            num2 = int(''.join(map(str, perm2)))  # Convert the remaining digits to another number\n            \n            # Update smallest_difference if the found difference is smaller\n            current_difference = abs(num1 - num2)\n            if current_difference < smallest_difference:\n                smallest_difference = current_difference\n\n    return smallest_difference\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial as f\n\ndef solution():\n    total_presents = 7\n    total_children = 5\n    \n    # Cases where each of Richard and Kevin gets either the toy car or the puzzle first\n    # Richard gets the toy car or the puzzle: 2 choices.\n    # Kevin gets the remaining toy car or the puzzle: 1 choice left for him.\n    # Three presents are left, and three children to give them to.\n    # The other three can be given in 3! ways.\n    case_1 = 2 * 1 * f(3)\n\n    # Cases where one of Richard and Kevin gets a different gift first, and the other gets either the toy car or the puzzle\n    # One of Richard and Kevin gets one of the other 5 gifts: 5 choices\n    # The other one gets either the toy car or the puzzle: 2 choices\n    # The other two out of the remaining four presents are given to the two children one by one: 4 choices for the first, 3 for the second.\n    # The last two presents are given to the remaining two children: 2!\n    case_2 = 5 * 2 * 4 * 3 * f(2)\n\n    # Total ways: Case 1 + Case 2\n    total_ways = case_1 + case_2\n\n    return total_ways\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    money_given = 100  # £1 is 100p\n    change = money_given - total_cost\n\n    return change\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6) and\n            isprime(n + 132) and isprime(n + 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    time = 10  # hours\n\n    # The relative speed at which Jack is approaching Rose\n    relative_speed = jack_speed - rose_speed  # km per hour\n    \n    # Distance between Town A and Town B\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([(2*i+2)**2 - (2*i)**2 for i in range(1, 1011)])\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.80)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n    \n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return float(solution[0])\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiples_of_7 = 5000 // 7\n    multiples_of_13 = 5000 // 13\n    multiples_of_7_and_13 = 5000 // (7 * 13)\n\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial as f\n\ndef solution():\n    total_ways = f(7) // (f(3) * f(2))  # Total ways to arrange SUCCESS\n    s_together = f(5) // f(2)  # Ways to arrange with S's together, treating SS as one entity\n    no_adjacent_s = total_ways - 6 * s_together  # Subtract ways with S's together from total\n\n    return no_adjacent_s\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    difference = boys - teachers\n\n    return difference\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Calculate the price of one T-shirt\n    price_per_shirt = 56 / (145 - 138)\n    \n    # Calculate the total amount of money Josephine had originally\n    total_money = 145 * price_per_shirt\n    \n    return total_money\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    david_days = symbols('david_days')\n    \n    # David's work rate per day\n    david_rate = 1/10\n    # Emma's work rate per day\n    emma_rate = 1/18\n    \n    # Total amount of work done is 1 (the whole journal)\n    # David worked for some days and then Emma completed the work in 14 - david_days\n    equation = Eq(david_days * david_rate + (14 - david_days) * emma_rate, 1)\n\n    days_worked = solve(equation, david_days)\n\n    # Emma's work days will be total days minus the days David worked\n    emma_days = 14 - days_worked[0]\n    \n    return emma_days\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    # Calculate the sum of the first 100 natural numbers\n    sum_of_numbers = sum(range(1, 101))\n    # The sum of the cubes of the first 100 natural numbers is the square of the sum of the first 100 natural numbers\n    sum_of_cubes = sum_of_numbers ** 2\n    # Calculate the required fraction\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    average = 119\n    sum_of_numbers = average * total_numbers\n    middle_number = sum_of_numbers / total_numbers\n\n    smallest_number = middle_number - (total_numbers - 1) * 1\n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        if ((1 + 3 + 5) - (a + a + a + 2 + 4)) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    increase_percentage = 12 / 100\n    new_pay_per_hour = old_pay_per_hour * (1 + increase_percentage)\n    \n    return new_pay_per_hour\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # It takes 12 minutes to make 5 - 1 = 4 cuts\n    # Calculate time per cut\n    time_per_cut = 12 / 4\n    \n    # To make 5 cuts\n    time_for_5_cuts = time_per_cut * 5\n    \n    return time_for_5_cuts\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    tallest_student = 132\n    shortest_student = 124\n    height_range = tallest_student - shortest_student + 1\n\n    # According to the Pigeonhole principle, if n + 1 items are put into n containers,\n    # then at least one container must contain more than one item.\n    # In this case, we want at least 4 students to be of the same height.\n    # As there are (height_range) possible heights, then we need at least:\n    # (height_range - 1) * 4 + 1 students to ensure that at least 4 students have the same height.\n    class_size = (height_range - 1) * 4 + 1\n\n    return class_size\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of each type of coin as x\n    x = symbols('x')\n\n    # We set up the equation based on the information.\n    # Since we have an equal number of 2p and 5p, and their combined value is 126p (which is £1.26)\n    equation = Eq(2*x + 5*x, 126)\n\n    # Solve the equation for x\n    num_coins = solve(equation, x)[0]\n\n    # Since the total number of coins is the number of each type of coin times 2 (2p and 5p),\n    # we must multiply the result by 2\n    total_coins = 2 * num_coins\n\n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of powers of 3 cycles with a pattern of four: 3, 9, 7, 1\n    # To find the pattern position for 3^2009, we calculate 2009 % 4\n    pattern_position = 2009 % 4\n    # Indexing into the pattern, note that we subtract 1 because the pattern is 0 indexed.\n    ones_digit_pattern = [3, 9, 7, 1]\n    ans = ones_digit_pattern[pattern_position - 1] # Subtract 1 for correct index\n    return ans\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    adults = 2/5 * total_people\n    remaining = total_people - adults\n    boys = 5/9 * remaining\n    girls = remaining - boys\n\n    equation = Eq(girls, 36)\n    \n    total_people_solution = solve(equation, total_people)\n\n    return total_people_solution[0]\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5  # Smallest number that is both even and a multiple of 5\n    while True:\n        if (num ** 0.5).is_integer():\n            return num\n        num += 2 * 5  # Increase by the smallest amount that maintains evenness and multiple of 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    # The child's ticket is at 75% of the adult price, since they get 25% off\n    child_discount_percent = 25\n    child_percent_of_adult_price = 100 - child_discount_percent\n\n    # Child's ticket cost\n    child_ticket_price = 30\n\n    # Calculate the full price of an adult ticket without discount\n    adult_ticket_price = (child_ticket_price / child_percent_of_adult_price) * 100\n\n    # Senior citizens get a 20% discount\n    senior_discount_percent = 20\n    senior_percent_of_adult_price = 100 - senior_discount_percent\n\n    # Calculate the price for a senior citizen ticket with the discount\n    senior_ticket_price = (adult_ticket_price * senior_percent_of_adult_price) / 100\n\n    return senior_ticket_price\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_days = 3 * 30  # Total man-days to complete the work\n    days_for_2_men = men_days / 2  # Number of days for 2 men to complete the work\n\n    return days_for_2_men\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Total number of books\n    total_books = 20\n    # Total number of kids\n    total_kids = 4\n    \n    # Generate all combinations with replacement of how to distribute books\n    # to 4 kids, considering that some kids might get no book\n    all_combinations = list(combinations_with_replacement(range(total_books+1), total_kids))\n    \n    # Calculate the number of valid distributions where the sum of books is equal to 20\n    valid_combinations = [comb for comb in all_combinations if sum(comb) == total_books]\n    \n    # The answer is the number of valid combinations\n    ans = len(valid_combinations)\n    \n    return ans\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n    \n    # Applying the Law of Addition for independent choices\n    ans = trains + cars + boats\n    \n    return ans\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Will's current age\n    will_age = symbols('will_age')\n\n    # Equation represents the statement:\n    # \"In 8 years' time I will be 4 times as old as I was 4 years ago\"\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    # Solve the equation for Will's age\n    solution = solve(equation, will_age)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2  # Common difference in the sequence\n    \n    # Number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed) if total_pages % pages_per_day == 0 else int(days_needed) + 1\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000  # initial amount\n    rate = 0.06  # interest rate\n    time = 2  # number of years\n\n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # Since interest is compounded yearly, n = 1\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2 / 3 * chewy)\n    equation2 = Eq(chewy, 40 / 100 * mike)\n    equation3 = Eq(mason, mike - 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_liters = total_soup_ml / 1000\n\n    return total_soup_liters\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval_length = 5\n    \n    num_trees = (road_length // interval_length) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each kid needs to get at least 2 books so we pre-allocate 2 books to each kid.\n    allocated_books = 5 * 2\n    # We are left with 30 - 10 = 20 books to be distributed freely.\n    remaining_books = 30 - allocated_books\n    \n    # We need to divide these 20 books among 5 kids which is equivalent to\n    # partitioning the books with 4 partitions (which represent the division between kids).\n    # using the \"stars and bars\" combinatorial method.\n    \n    # We have 20 \"stars\" (books) and we need to place 4 \"bars\" (divisions)\n    # The total number of \"objects\" (stars and bars) is therefore 20 + 4.\n    total_objects = remaining_books + 4\n    \n    # We have to choose the positions for the 4 bars out of the total 20+4 \"objects\"\n    # which gives us a combination C((20+4),4).\n    nr_ways_to_divide = comb(total_objects, 4)\n\n    return nr_ways_to_divide\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef calculate_term(a, b, operator):\n    if operator == '+':\n        return a + b\n    elif operator == '-':\n        return a - b\n    elif operator == '*':\n        return a * b\n    elif operator == '/':\n        return a / b\n\ndef solution():\n    fractions = [(Fraction(1, 2), Fraction(1, 9)),\n                 (Fraction(1, 3), Fraction(1, 8)),\n                 (Fraction(1, 4), Fraction(1, 7)),\n                 (Fraction(1, 5), Fraction(1, 6))]\n    \n    operators = list(permutations(['+', '-', '*', '/'], 4))\n    max_sum = 0\n    second_largest_term = None\n    \n    for ops in operators:\n        terms = [calculate_term(pair[0], pair[1], op) for pair, op in zip(fractions, ops)]\n        terms_sum = sum(terms)\n        if terms_sum > max_sum:\n            max_sum = terms_sum\n            second_largest_term = sorted(terms)[-2]\n    \n    A = second_largest_term.numerator\n    B = second_largest_term.denominator\n    \n    return A + B\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 89)])\n    return ans\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "from sympy import symbols, solve, Rational\n\ndef solution():\n    # Define the variable for the number of games won before the weekend\n    x = symbols('x')\n    \n    # Set up the inequality to solve\n    inequality = (x + 3) / (2*x + 5) > Rational(505, 1000)\n    \n    # Solve the inequality\n    solutions = solve(inequality, x)\n    \n    # Since x must be an integer and the inequality is strict (x < 47.5), we take the floor of 47.5\n    return int(solutions[0].evalf())\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n\n    initial_amount = spent + remaining\n\n    return initial_amount\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Assuming Susan is using the British coinage system (pence)\n    # Coins available are: 1p, 2p, 5p, 10p, 20p, 50p, 1 pound (100p), and 2 pounds (200p)\n    # To find the smallest number of coins that can change hands, we maximize the value of coins given to Susan\n    # We assume Susan gives no more than 2 pounds, since 200p is more than 3 times the bus fare, and Susan only needs change\n    # Let's start by trying to pay with exactly one coin\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Check for each coin if it is greater than the bus fare\n    for coin in coins:\n        if coin >= 44:\n            change = coin - 44\n            coin_count = 1  # The coin Susan used\n\n            # Now calculate change using the largest possible coins\n            for change_coin in coins:\n                if change_coin <= change:\n                    coin_count += change // change_coin\n                    change %= change_coin\n            return coin_count\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_combinations = total_points * 2  # two right angle triangles per point\n    return right_angle_combinations\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    tenth_term = 10\n    fifteenth_term = 15\n    \n    common_difference = (fifteenth_number - tenth_number) / (fifteenth_term - tenth_term)\n    twelfth_number = tenth_number + common_difference * (12 - tenth_term)\n    \n    return twelfth_number\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_a = 24\n    class_b = 36\n    class_c = 42\n\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    cost_per_day = 4.36\n    days = 5\n    total_cost = children * cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # Define the series of denominators as per the pattern in the question\n    denom = [2, 4, 7, 11, 16, 22, 29]\n    \n    # Calculate the sum of the series\n    sum_series = 0\n    for i in range(len(denom)-1):\n        sum_series += (i+1) / (denom[i] * denom[i+1])\n    \n    # Add the last fraction part which is 1/29\n    sum_series += 1 / denom[-1]\n\n    return sum_series\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize add to True\n    add = True\n\n    # Loop through the numbers from 200 to 1, both inclusive\n    for i in range(200, 0, -1):\n        # If we have to add the number, add it to the sum\n        if add:\n            sum += i\n        # If we have to subtract the number, subtract it from the sum\n        else:\n            sum -= i\n        # Toggle the add flag at every 2 numbers\n        if i % 2 == 0:\n            add = not add\n    \n    return sum\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3/8) * 16\n    return result\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    score_correct = 5\n    score_incorrect = -3\n    total_score = 76\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * score_correct + incorrect_answers * score_incorrect\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    people = 38\n    total_cost = cost_per_person * people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for cost price.\n    cost_price = symbols('cost_price')\n    \n    # Calculate the selling price formula based on the markup.\n    marked_price = cost_price * 1.20\n    \n    # Calculate the final selling price after giving a discount on the marked price.\n    final_selling_price = marked_price * 0.90\n    \n    # Profit is defined as the final selling price minus the cost price.\n    profit = final_selling_price - cost_price\n\n    # We are given that the profit is $120.\n    profit_eq = Eq(profit, 120)\n    \n    # Solve the equation for cost price.\n    solution = solve(profit_eq, cost_price)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, Eq, solve, Abs\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(equation, x)\n    return [s.evalf() for s in solutions]  # Evaluate for numerical solution\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial as fact\n    # For four different colored socks\n    ways_diff_colored = fact(4)  # 4! = 4 x 3 x 2 x 1\n    \n    # For two different colored pairs of socks\n    ways_two_pairs = fact(4) // (fact(2) * fact(2))  # 4! / (2! x 2!) \n    # Divided by 2! for each pair of same colored socks since they are indistinguishable\n    \n    return ways_diff_colored, ways_two_pairs\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be in 1-9 as it represents the first digit in a two-digit number\n        for b in range(10):  # 'b' can be in 0-9\n            if int(f\"{a}{b}\") + int(f\"{b}{a}\") + b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sweets Beth initially had, hence Andre had (24 - x)\n    x = symbols('x')\n\n    # After receiving 4 sweets each, Andre has (24 - x + 4) and Beth has (x + 4)\n    # Andre now has 6 sweets more than Beth\n    equation = Eq((24 - x + 4) - (x + 4), 6)\n\n    # Solve the equation\n    beth_sweets = solve(equation, x)\n\n    # Beth now has (beth_sweets[0] + 4) sweets after receiving 4 more sweets\n    return beth_sweets[0] + 4\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure a win, Anthea must leave a multiple of 4 apples for Ben,\n    # so that whatever he takes (1, 2, or 3), Anthea can always leave\n    # another multiple of 4 on the next turn.\n\n    # We backtrack from 18 to find the largest multiple of 4 that is less than 18.\n    # The sequence for winning positions will look like:\n    # 16 (Anthea's turn), 12 (Ben's turn), 8 (Anthea's), 4 (Ben's), 0 (Anthea's, where Ben loses).\n\n    # So, if Anthea wants to ensure a win, she should take 18 - 16 = 2 apples.\n    ans = 18 % 4\n    return ans\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the masses of the table and chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Create equations based on the given information\n    # 3 tables have the same mass as 4 chairs\n    eq1 = Eq(3 * table_mass, 4 * chair_mass)\n    # The mass of a table is 2 kg heavier than a chair\n    eq2 = Eq(table_mass, chair_mass + 2)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (table_mass, chair_mass))\n\n    return solution[table_mass]\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # Judy can stand at either end, so there are 2 possible positions for her\n    judy_positions = 2\n    # There are 5 friends who can stand in any order, so we calculate the permutations for 5 people\n    friends_permutations = math.factorial(5)\n    # The total number of ways they can perform is the product of these two numbers\n    total_ways = judy_positions * friends_permutations\n    return total_ways\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    ans = sum([9, 12, 17, 18, 21, 23])\n    return ans\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    \n    # Total sweets they both had initially\n    equation1 = Eq(andre + beth, 24)\n    \n    # After receiving 4 sweets each, Andre now has 6 more sweets than Beth\n    equation2 = Eq(andre + 4, beth + 6 + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # Beth's amount of sweets after receiving more from the teacher\n    beth_sweets_now = solutions[beth] + 4\n    \n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Using inverse operations to find the original number\n    result_after_division = 2\n    # Multiply by 12 to reverse the division\n    result_after_taking_away = result_after_division * 12\n    # Add 6 to reverse the subtraction\n    original_number = result_after_taking_away + 6\n    \n    return original_number\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place\n    # and overtook 5 cars, those 5 cars are now behind them.\n    # Since they finished second, there is only one car ahead of them.\n    # Therefore, we add the following:\n    # - 5 cars overtaken\n    # - 1 car still ahead (the one in first place)\n    # - 1 car itself (the Ferrari driver)\n    ans = 5 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    # Loop over the range of numbers\n    for num in range(1000, 10000):\n        # Convert the number to a string\n        num_str = str(num)\n        # Check if the number is a palindrome\n        if num_str == num_str[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # total sum of the four numbers\n    total_sum = 4 * 130  # since average is 130\n    \n    # new sum after one number is removed, and the new average is 110\n    new_sum = 3 * 110  # since new average is 110\n    \n    # the number that is removed is the difference between the total sum and the new sum\n    removed_number = total_sum - new_sum\n\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from fractions import gcd\nfrom math import lcm\n\ndef solution():\n    # Convert times to seconds to work with integer values\n    first_traffic_light_time = 60  # 1 minute in seconds\n    second_traffic_light_time = 90  # 1.5 minute in seconds\n    min_third_traffic_light_time = 30  # minimum time for third traffic light in seconds\n\n    # Find the least common multiple of the first two traffic lights\n    lcm_first_second = lcm(first_traffic_light_time, second_traffic_light_time)\n\n    # The third traffic light should be a divisor of lcm_first_second and should be 30 seconds or longer\n    # Starting from the smallest possible value (30 seconds), find the smallest divisor of lcm_first_second\n    time_third_traffic_light = min_third_traffic_light_time\n    while time_third_traffic_light <= lcm_first_second:\n        if lcm_first_second % time_third_traffic_light == 0:\n            break\n        time_third_traffic_light += 1\n\n    return time_third_traffic_light\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Since Leo wants to win, he has to make sure that he always leaves a multiple of 3 for Mia.\n    # There are 14 apples, we want to check if taking away 1 or 2 apples first will let Leo win.\n    for first_move in range(1, 3):\n        apples_left = 14 - first_move\n        # If apples left is not a multiple of 3, then Mia will have to give Leo the winning condition eventually\n        if apples_left % 3 != 0:\n            return first_move\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    younger_maths, younger_english, elder_maths, elder_english = symbols('younger_maths younger_english elder_maths elder_english')\n\n    # Given equations\n    equation1 = Eq(elder_maths, younger_maths + 10)                         # Elder spent 10 more minutes on maths\n    equation2 = Eq(younger_english, elder_english + 4)                      # Younger spent 4 more minutes on English\n    equation3 = Eq(elder_maths + elder_english, 88)                         # Elder spent 88 minutes in total\n    equation4 = Eq(younger_maths, younger_english - 12)                     # Younger spent 12 minutes less on maths than English\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (younger_maths, younger_english, elder_maths, elder_english))\n\n    # The time younger sister spent doing English homework\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let's denote the value per silver spoon as s and per gold ring as g.\n    # According to the problem, 12 silver spoons (12s) have three quarters (3/4) the value of 6 gold rings (6g).\n    # Therefore, the equation is: 12s = (3/4) * 6g\n    # Simplify it: 12s = (3/4) * 6g => 12s = 9/2 g => s = (9/2 g) / 12 => s = 3/8 g\n    # We want to find how many silver spoons are equal in value to 3 gold rings (3g).\n    # Let x be the number of silver spoons which have the same value as 3 gold rings.\n    # The equation is: x * s = 3g\n    # Substitute s with the value we found in terms of g: x * (3/8 g) = 3g\n    # To find x, we divide both sides of the equation by (3/8 g): x = 3g / (3/8 g) => x = 3 * (8/3) => x = 8\n    # So 8 silver spoons have the same value as 3 gold rings.\n    return 8\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    markers, paintbrushes = symbols('markers paintbrushes')\n    \n    # Equation 1: cost of markers and paintbrushes\n    equation1 = Eq(3 * markers + 1 * paintbrushes, 28)\n    # Equation 2: number of items\n    equation2 = Eq(markers + paintbrushes, 12)\n    \n    solutions = solve((equation1, equation2), (markers, paintbrushes))\n    \n    return solutions[markers]\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n\n    # Since the difference between boys and girls is 55 and they are arranged in square layers,\n    # we try finding the number of layers that will result in that difference.\n    \n    # Iterate through possible side lengths increasing by 2 for each layer of boys and girls\n    for side_length in range(1, 1000, 2): \n        # Boys are on the outer layer and on every other layer inside\n        boys += (side_length * 4 - 4) if side_length > 1 else 1\n        \n        # Girls are on the layers adjacent to boys, except the center if there's an even number of layers\n        if side_length > 2:\n            girls += ((side_length - 2) * 4)\n\n        # Check if the current difference matches the condition\n        if boys - girls == 55:\n            # Calculate total students by summing arithmetic series from 1 to side_length with step of 2\n            total_students = sum((4 * i) for i in range(side_length, 0, -2))\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position gives us the total number of rows and columns\n    # Rows: Cora is 5th from the front and 7th from the back, so there are 4 rows in front and 6 rows behind her\n    # Columns: Cora is 2nd from the left and 4th from the right, so there is 1 column to her left and 3 columns to her right\n    rows = 5 + 6\n    columns = 2 + 3\n    \n    # Total number of students is rows multiplied by columns\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n\n    # Average weight of all teachers is 65\n    # Total weight of all teachers is 65 * (f + 3)\n    total_weight_all = 65 * (f + 3)\n\n    # There are 3 male teachers with an average weight of 75\n    total_weight_male = 3 * 75\n\n    # The average weight of female teachers is 60\n    # Total weight of female teachers is 60 * f\n    total_weight_female = 60 * f\n\n    # Total weight of all teachers is the sum of the weight of male and female teachers\n    equation = Eq(total_weight_female + total_weight_male, total_weight_all)\n\n    # Solve for the number of female teachers\n    num_female_teachers = solve(equation, f)[0]\n\n    return num_female_teachers\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for plate1 in range(2, 8 - 3 + 1):\n        for plate2 in range(2, 8 - plate1 - 1 + 1):\n            # plate3 will get the rest so we don't need to loop for it\n            plate3 = 8 - plate1 - plate2\n            if plate3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Multiply the factors together\n    factors_product = {**factors_33, **factors_55}\n\n    # Combine factors by adding exponents\n    for factor in factors_55:\n        if factor in factors_product:\n            factors_product[factor] += factors_55[factor]\n        else:\n            factors_product[factor] = factors_55[factor]\n    \n    # Find the smallest m by making all exponents even\n    m = 1\n    for factor, exponent in factors_product.items():\n        if exponent % 2 != 0:\n            m *= factor\n    \n    return m\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "from math import factorial\n\ndef solution():\n    # Star is fixed as the first runner, so we arrange the remaining 4 teammates\n    # The number of ways to arrange 4 teammates is the factorial of 4\n    num_ways = factorial(4)\n    return num_ways\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(x, y):\n        return (x + y) * (x - y) + x * y\n    \n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    initial_segments = 31\n    initial_time = 60  # in minutes\n\n    target_segments = 50\n    cuts_needed_for_initial = initial_segments - 1\n    cuts_needed_for_target = target_segments - 1\n\n    time_per_cut = initial_time / cuts_needed_for_initial\n\n    total_time_for_target = time_per_cut * cuts_needed_for_target\n\n    return total_time_for_target\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    if ans >= 200:\n        return \"No solution in given range\"\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # The smallest integer abc must follow the pattern a < b < c < d\n    # Iterate through possible 4-digit numbers with increasing digits\n    for a in range(1, 10):  # a cannot be 0, since we need a 4-digit number\n        for b in range(a + 1, 10):\n            for c in range(b + 1, 10):\n                for d in range(c + 1, 10):\n                    smallest = 1000 * a + 100 * b + 10 * c + d\n                    largest = 1000 * d + 100 * c + 10 * b + a\n                    third = 26352 - smallest - largest\n                    third_digits = sorted([int(i) for i in str(third)])\n\n                    # Check if the third number uses exactly the same digits\n                    if third_digits == [a, b, c, d]:\n                        return smallest\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(number - 0.3 * number, 210)\n    solution = solve(equation, number)\n    return solution[0]\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45\n\n    new_price = original_price * (1 + increase_percentage)\n\n    return new_price\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\nfrom collections import Counter\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = Counter(word)\n    # Total permutations is factorial of the number of letters\n    total_permutations = factorial(len(word))\n    # Divide by the factorial of the occurrences of each letter to remove duplicate permutations\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number // 24 == 36 and number % 24 == 0:\n            return number\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days_given = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days_given\n\n    return total_money\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candy, nancy, x = symbols('candy nancy x')\n    equation1 = Eq(candy - x, nancy + x - 8)\n    \n    solutions = solve((equation1, Eq(candy, 11), Eq(nancy, 9)), (candy, nancy, x))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temp_at_midnight = -5\n    temp_at_midday = 17\n    \n    overall_change = temp_at_midday - temp_at_midnight\n    \n    return overall_change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    sibel_position = people_in_front + 1  # Counting Sibel herself\n    total_people = sibel_position + position_from_back - 1  # Subtract one since Sibel is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_pence = 43\n    booklet_cost_pounds = 1.85\n    total_budget_pounds = 10\n    \n    total_cost_pounds = (3 * pen_cost_pence / 100) + (4 * booklet_cost_pounds)\n    change = total_budget_pounds - total_cost_pounds\n    \n    return change\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Iterate through all the 3 digit numbers\n    for i in range(100, 1000):\n        # Convert number to string to easily access the digits\n        num_str = str(i)\n        # Compare adjacent digits\n        if abs(int(num_str[0]) - int(num_str[1])) >= 7 and abs(int(num_str[1]) - int(num_str[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    third_prime = prime(3)\n\n    return third_prime\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5383000  # As of the knowledge cutoff in 2023, this is an approximate population of St. Petersburg\n    return population\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for t in range(5, 10):  # thousands digit, from 5 to 9 because the number is larger than 5000\n        for h in range(10):  # hundreds digit, can be 0-9\n            for te in range(10):  # tens digit, can be 0-9\n                for o in range(1, 10):  # ones digit, can be 1-9 to avoid division by zero\n                    if t % h == 0 and t % te == 0 and t % o == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    number_of_terms = 10\n\n    # Using the formula for the sum of an arithmetic sequence\n    # Sum = n/2 * (2a + (n - 1) * d), where n is the number of terms, a is the first term, and d is the common difference\n    sum_of_terms = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the unknown value\n    unknown = symbols('unknown')\n    \n    # Define the equation based on the provided question\n    equation = Eq((unknown + 7) / 9, 9)\n    \n    # Solve the equation for the unknown value\n    solution = solve(equation, unknown)\n    \n    # Get the value of the unknown from the solution\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses / 2\n    fiona_dresses = gina_dresses / 4\n\n    total_dresses = gina_dresses + fiona_dresses\n\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015 \n    years = 5\n    \n    amount_after_years = principal * ((1 + interest_rate) ** years)\n    \n    if amount_after_years == final_amount:\n        return True  # Bella is right\n    else:\n        actual_years = (final_amount / principal) ** (1/interest_rate) - 1\n        return False, int(actual_years)  # Bella is wrong, return actual number of years\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # From 1258, we know that 1, 2, 5, 8 are not in the combination.\n    not_in_combination = {'1', '2', '5', '8'}\n\n    # We will check for each position, which digits can possibly be in that position\n    # We initialize all positions with all possible digits (0-9), except the ones from 1258\n    possible_digits = [{str(i) for i in range(10)} - not_in_combination for _ in range(4)]\n\n    # For each trial, we update the possible digits for each position\n    trial_info = {\n        '5648': 2,\n        '3628': 2,\n        '3147': 2,\n        '5629': 2,\n    }\n\n    for trial, num_correct in trial_info.items():\n        correct_digits = set()\n        for num_wrong, digit in zip(trial_info.values(), trial):\n            if digit not in not_in_combination:\n                correct_digits.add(digit)\n        \n        # We know the number of correct and therefore wrong digits too\n        num_wrong = 4 - num_correct\n\n        # Go through each position and update the possible digits\n        for pos, digit in enumerate(trial):\n            if num_wrong > 0 and digit not in not_in_combination:\n                # If a digit is wrong, remove it from all positions\n                for possible_position in possible_digits:\n                    possible_position.discard(digit)\n                num_wrong -= 1\n            elif digit in correct_digits:\n                # If a digit is correct, keep it only in the current position\n                for i, possible_position in enumerate(possible_digits):\n                    if i != pos:\n                        possible_position.discard(digit)\n\n    # The correct digit for each position is the only remaining digit in possible_digits for that position\n    correct_combination = ''.join(next(iter(position)) for position in possible_digits)\n\n    return correct_combination\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # Total weight of male teachers = 3 * 75\n    # Total weight of female teachers = x * 60\n    # Average weight of all teachers = (Total weight of male + Total weight of female) / (3 + x) = 65\n\n    # We set up the equation based on the information provided:\n    # (3*75 + x*60) / (3 + x) = 65\n    # Solving for x gives us the number of female teachers.\n\n    total_weight_males = 3 * 75\n    average_weight_all = 65\n\n    # Rearrange the equation to find x\n    # 65 * (3 + x) = 3*75 + x*60\n    # 195 + 65x = 225 + 60x\n    # 5x = 225 - 195\n    # x = 30 / 5\n    x = (225 - 195) // 5\n\n    return x\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given: \n    # Average of A, B, C = 95, so sum of A, B, C = 95 * 3\n    eq1 = Eq(A + B + C, 95 * 3)\n\n    # Average of B, C, D = 94, so sum of B, C, D = 94 * 3\n    eq2 = Eq(B + C + D, 94 * 3)\n\n    # E's mark = 96, which is the second highest. \n    # A has the highest mark, so A > 96\n    # B and D have the same score\n    eq3 = Eq(E, 96)\n    eq4 = Eq(B, D)\n\n    # A's mark is individual, so we will not create an equation for A.\n    # We just need to solve for B, C, D using E's value\n    # Since A has the highest mark, we infer that E < C < B < A to satisfy the second highest condition\n    solutions = solve((eq1, eq2, eq3, eq4), (A, B, C, D, E), dict=True)\n\n    valid_solutions = [s for s in solutions if s[A] > 96 and s[A] > s[E] and s[E] < s[C] < s[B] < s[A]]\n\n    # There should only be one valid solution given the conditions\n    if len(valid_solutions) == 1:\n        return valid_solutions[0][D]\n    else:\n        return None\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_litres = 13.15\n    bottle_fraction = 1 / 7\n    bottle_capacity_litres = 9.1\n    cup_capacity_ml = 350\n    ml_to_litres = 1 / 1000\n\n    bottle_soda_litres = bottle_capacity_litres * bottle_fraction\n    cup_soda_litres_total = 4 * cup_capacity_ml * ml_to_litres\n\n    remaining_soda_litres = total_soda_litres - (bottle_soda_litres + cup_soda_litres_total)\n\n    return remaining_soda_litres\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n\n    # Given equations\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(father_current + son_current, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    # Let x be the mass of the empty jar\n    # Let y be the mass of the Marmite to fill the jar completely\n    # According to the question:\n    # x + 1/4 * y = 250g  ... (1)\n    # x + 3/4 * y = 350g  ... (2)\n    # From (1): y = (250 - x) * 4\n    # Substitute y in (2):\n    # x + 3/4 * (250 - x) * 4 = 350\n    # Solve for x:\n\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x + 3 * (250 - x) == 350\n    mass_of_empty_jar = solve(equation, x)[0]\n\n    return mass_of_empty_jar\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Rose wants to leave a number of marbles that is a multiple of 3 for Kylie\n    # If Rose takes 1 marble, (14 - 1) % 3 = 13 % 3 = 1 (Not a multiple of 3)\n    # If Rose takes 2 marbles, (14 - 2) % 3 = 12 % 3 = 0 (Multiple of 3)\n    # Rose should take 2 marbles so that Kylie is left with a multiple of 3\n    # Then Rose can always keep the number of marbles left as a multiple of 3, ensuring victory\n    return 2\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    # Since a and b are both square roots of 2023, we have:\n    # a^2 = 2023 and b^2 = 2023\n    # Thus, we can say that a = sqrt(2023) and b = -sqrt(2023) or a = -sqrt(2023) and b = sqrt(2023)\n    # Since the square root function in Python only returns the positive square root, we can manually adjust for the negative one \n    from math import sqrt\n    \n    a = sqrt(2023)\n    b = -sqrt(2023)\n    # Compute a + b - ab\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_in_pounds = 45\n    value_of_one_coin_in_pounds = 0.05\n    \n    num_coins = total_money_in_pounds / value_of_one_coin_in_pounds\n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Pip's distance per minute as p and Bud's as b.\n    p, b = symbols('p b')\n    \n    # We are given:\n    # 1. Total distance for 3 minutes is 540 metres\n    total_distance_eq = Eq(3*p + 3*b, 540)\n    \n    # 2. Each minute Pip runs 20 metres more than Bud\n    difference_eq = Eq(p, b + 20)\n    \n    # Solving the system of equations\n    solutions = solve((total_distance_eq, difference_eq), (p, b))\n    \n    # Pip's total distance run in 3 minutes\n    pip_total = solutions[p] * 3\n    \n    return pip_total\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, solve\n    from math import pi, sqrt\n\n    # Given values\n    m = 2.0  # kg (mass of the block)\n    k = 500  # N/m (spring constant)\n    amplitude = 0.08  # meters (amplitude of oscillations, converted from cm to m)\n    x = 0.04  # meters (distance from equilibrium, converted from cm to m)\n\n    # Total energy of the oscillator (E) is given by E = (1/2) * k * amplitude^2\n    E = (1/2) * k * amplitude**2\n\n    # Speed (v) of the block when it's x meters from equilibrium is given by\n    # v = sqrt((E - (1/2) * k * x^2) * (2/m))\n\n    # Kinetic energy when the block is x meters from equilibrium (K) is given by\n    # K = E - (1/2) * k * x^2 (because total energy E is conserved, and potential energy at x is (1/2) * k * x^2)\n    # So, K = (1/2) * m * v^2\n    # => v = sqrt((2/m) * K)\n    # => v = sqrt((2/m) * (E - (1/2) * k * x^2)), simplifying the equation for K\n    v = sqrt((2/m) * (E - (1/2) * k * x**2))\n\n    return {'Total Energy (J)': E, 'Speed at 4cm from equilibrium (m/s)': v}\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    # Original relations between the number of coins\n    equation1 = Eq(a, 4 * b)\n\n    # Coins moved from A to C and B to C\n    equation2 = Eq(0.06 * a + 0.20 * b, 1220)\n\n    # Box C now has 22% more coins than originally\n    equation3 = Eq(c + 1220, c * 1.22)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # We need the initial number of coins in box A\n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let's use 'x' for the original number of tea bottles, and 'y' for the added tea bottles.\n    # Initially, 60% are coffee, so 40% are tea. After adding y tea bottles, 40% are coffee, so 60% are tea.\n    # The final amount of tea is thus the initial x plus the added y, and this is 60% of the total.\n    # Therefore, we have the equation: 0.4*(x + y) + 0.6*x = 0.6*(x + y + x)\n\n    # Simplifying, we get: 0.4x + 0.4y + 0.6x = 1.2x + 0.6y\n    # Then: 0.4y = 0.2x\n    # Hence: y = 0.5x\n\n    # The percentage increase in the number of bottles of tea is then y / x * 100%.\n    percentage_increase = (0.5 * 100)\n\n    return percentage_increase\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    solved = solve(equation, x)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = (25 / 100) * (30 / 100) * (40 / 100) * 300\n    return ans\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal numbers to decimal\n    num1 = int('2A3', 16)\n    num2 = int('17B', 16)\n    \n    # Calculate the sum in decimal\n    decimal_sum = num1 + num2\n    \n    # Convert the sum back to hexadecimal\n    hex_sum = hex(decimal_sum)[2:].upper()\n    \n    return hex_sum\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    tricycles, cars = 0, 24\n    while cars >= 0:\n        total_wheels = tricycles * 3 + cars * 4\n        if total_wheels == 86:\n            return tricycles\n        tricycles += 1\n        cars -= 1\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Assigning time for each task\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    # Calculating the total time needed for making juice\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_p = 110  # Convert £1.10 to pence\n    \n    total_money_p = lewis_money_p + james_money_p\n    total_money_pounds = total_money_p / 100  # Convert the total money back to pounds\n    \n    return total_money_pounds\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    # Total number of flowers\n    total_flowers = 5 + 2 + 3\n    \n    # Total selling price for each color flower\n    total_red_price = 5 * 2  # 5 red flowers at £2 each\n    total_green_price = 2 * 5  # 2 green flowers at £5 each\n    total_white_price = 3 * 10  # 3 white flowers at £10 each\n    \n    # Overall total selling price\n    total_price = total_red_price + total_green_price + total_white_price\n    \n    # Calculating average selling price per flower\n    average_price = total_price / total_flowers\n    \n    return average_price\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    # Count frequency of each letter\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    # Calculate total number of arrangements\n    total_arrangements = factorial(len(word))\n    # Divide by factorial of each letter's frequency\n    for freq in letter_freq.values():\n        total_arrangements //= factorial(freq)\n    return total_arrangements\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    # total number of permutations\n    total_perms = factorial(6)\n    \n    # inclusion-exclusion principle\n    # no students get their own paper (Derrangement or !n)\n    count = total_perms\n    for i in range(1, 7):\n        if i % 2 == 0:\n            count += (-1)**i * factorial(6) // factorial(i)\n        else:\n            count += (-1)**i * factorial(6) // factorial(i)\n    \n    return count\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # The constraint is that each pile must have at least 3 books,\n    # therefore, we start the count from 3 for each pile and go up to 13 - 3*2.\n    # We subtract 3*2 because we need to ensure the other two piles also have at least 3 books.\n    for x1 in range(3, 13 - 3*2 + 1):\n        for x2 in range(3, 13 - x1 - 3 + 1):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    min_plus_bottles = (income - lemonade_price * total_bottles) / (plus_price - lemonade_price)\n    if min_plus_bottles < 0:\n        min_plus_bottles = 0\n    return int(min_plus_bottles)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kilograms\n    final_velocity = 8  # final velocity in m/s\n    time = 4  # time in seconds\n\n    # Using the formula for force: F = mass * acceleration\n    # And the formula for acceleration: acceleration = (final_velocity - initial_velocity) / time\n    # Since the initial velocity is 0 (stationary object), we simplify acceleration to (final_velocity / time).\n\n    acceleration = final_velocity / time\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    total_pens_initial = 96\n    ratio_blue_to_red = 3 / 5\n    red_pens_added = 60\n\n    red_pens_initial = (total_pens_initial * 5) / (3 + 5)\n    blue_pens_initial = total_pens_initial - red_pens_initial\n\n    total_pens_after_adding = total_pens_initial + red_pens_added\n    blue_pens_percentage = 40 / 100\n\n    # After adding red pens\n    blue_pens = blue_pens_percentage * (total_pens_after_adding + blue_pens_initial)\n\n    blue_pens_added = blue_pens - blue_pens_initial\n\n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    box1 = 3\n    box2 = 7\n    # Using the Chicken McNugget Theorem (Frobenius Coin Problem) to determine the largest number\n    # that cannot be expressed as a combination of two given numbers\n    ans = box1 * box2 - box1 - box2\n    return ans\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / num_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert numbers from base 7 to base 10, perform addition, then convert back to base 7.\n    num1_base10 = int(str(45), 7)\n    num2_base10 = int(str(66), 7)\n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    # Points per correct and incorrect answer\n    points_correct = 5\n    points_incorrect = -2\n    \n    # Equation for total points\n    total_points_eq = Eq(correct * points_correct + incorrect * points_incorrect, 151)\n    # Equation for relationship between correct and incorrect answers\n    correct_incorrect_relation = Eq(correct, 3 * incorrect + 12)\n    \n    # Solve the system of equations\n    answers = solve((total_points_eq, correct_incorrect_relation), (correct, incorrect))\n    return answers[correct]\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    from functools import reduce\n    from operator import mul\n\n    # Step 1: find all combinations of 9 numbers out of the 13\n    all_combinations = list(combinations(range(1, 14), 9))\n    \n    # Define function to calculate number of factors\n    def num_factors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n    \n    # Define function to calculate product of list elements\n    def product(lst):\n        return reduce(mul, lst)\n    \n    # Step 2: go through all combinations and identify candidates based on clues\n    for combo in all_combinations:\n        combo_set = set(combo)\n        factors_count = [num_factors(num) for num in combo]\n        # Two students put up their hands, so exactly two numbers should have a unique count of factors\n        if len(set(factors_count)) != len(factors_count) - 2:\n            continue\n        \n        # Alice sees the other 8 numbers and knows her number must be odd,\n        # so there must be exactly one odd number missing from the combination.\n        # May's number is odd too, smaller than Alice's by 2 and more than 1 than any other (Mark's number).\n        for alice_num in combo:\n            if alice_num % 2 == 0:\n                continue  # Alice's number must be odd\n            if alice_num - 2 not in combo_set:\n                continue\n            if not all(alice_num - 1 > x for x in combo_set if x != alice_num):\n                continue  # Alice's number must be bigger than all other numbers except for May's\n            missing_numbers = set(range(1, 14)) - combo_set\n            # There must be only one odd number in the missing numbers set\n            if sum(1 for x in missing_numbers if x % 2 != 0) == 1 and alice_num - 2 in missing_numbers:\n                # Calculate the product of the four numbers not picked\n                return product(missing_numbers)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # In a complete round-robin tournament, each player plays every other player once.\n    # Let's find out the total number of matches each player should have played after a full round-robin.\n\n    num_students = 7  # Total number of students\n    matches_per_student = num_students - 1  # Each student plays against each other student once\n\n    # Let's add up the known number of matches played by A, B, C, D, E, and G.\n    known_matches = 4 + 6 + 2 + 1 + 3 + 5  # The sum of the matches played by A, B, C, D, E, and G\n\n    # Let's calculate the total number of matches that should have been played if everyone had played everyone else.\n    total_matches = matches_per_student * num_students // 2  # Total number of matches in a round-robin tournament\n\n    # Now we can find out how many matches F has played.\n    f_matches = total_matches - known_matches\n\n    return f_matches\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Since N can be divided by 18 out of the first 20 natural numbers,\n    # the product of the 18 numbers that divides N would be a multiple of N.\n    # We need to find two consecutive numbers that don't divide N.\n    # Let's take the product of all the numbers from 1 to 20 and then check by excluding\n    # two consecutive numbers at a time.\n\n    from math import prod\n\n    # Product of the first 20 natural numbers\n    all_numbers = list(range(1, 21))\n    full_product = prod(all_numbers)\n\n    # Iterate through the natural numbers, checking for two consecutive numbers\n    for i in range(1, 20):\n        if full_product % (i * (i + 1)) != 0:\n            return i + (i + 1)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    linda_present, cici_present = symbols('linda_present cici_present')\n\n    equation1 = Eq(cici_present, linda_present - 11)\n    equation2 = Eq((linda_present + 4) + (cici_present + 4), 37)\n\n    ages = solve((equation1, equation2), (linda_present, cici_present))\n\n    linda_future_age = ages[linda_present] + 3\n\n    return linda_future_age\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    count = 0\n    sum_total = 0\n    n = 161\n    while n % 15 == n // 15:\n        sum_total += n\n        n += 1\n    ans = sum_total\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number = 5  # The least value of the first number\n    second_number = 2 # The least value of the second number\n    min_sum = first_number + second_number  # Minimum possible sum\n    return min_sum\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the number of Natasha's stamps be x. Then Jamie-Anne's stamps will be x + 18.\n    # According to the ratio given, Jamie-Anne's stamps can also be represented as (5/3) * x.\n    # Thus, we can create the equation: (5/3) * x = x + 18.\n    # Now we need to solve this equation for x.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5/3) * x, x + 18)\n\n    # Solving for x\n    natasha_stamps = solve(equation, x)[0]\n    jamie_anne_stamps = (5/3) * natasha_stamps\n\n    # The total number of stamps is the sum of both Natasha's and Jamie-Anne's stamps.\n    total_stamps = natasha_stamps + jamie_anne_stamps\n\n    return total_stamps\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300  # meters\n    speed_uphill = 10      # m/min\n    speed_downhill = 30    # m/min\n\n    time_uphill = distance_uphill / speed_uphill       # time = distance / speed\n    time_downhill = distance_uphill / speed_downhill   # time = distance / speed\n\n    total_distance = distance_uphill * 2  # round trip\n    total_time = time_uphill + time_downhill  # sum of times uphill and downhill\n    \n    average_speed = total_distance / total_time  # average speed = total distance / total time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    return 15.2 - 5.7\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n    # Since each person can choose any of the 5 entrances independently,\n    # and the order matters (i.e., permutations), multiply the number of choices\n    # for each person.\n    ways = total_entrances ** total_people\n    return ways\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n    \n    # Calculate the number of fruits that can be evenly distributed\n    apples_distributed = 226 - 10\n    pears_distributed = 352 - 28\n    oranges_distributed = 157 - 13\n    \n    # Calculate the greatest common divisor of the distributed amounts\n    gcd_result = gcd(gcd(apples_distributed, pears_distributed), oranges_distributed)\n    \n    return gcd_result\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n    \n    friends = 5  # Judy's friends\n    # There are two places where Judy can stand: first or last.\n    places_for_judy = 2\n    # The rest of the friends can be arranged in any order in the remaining places.\n    arrangements_for_friends = factorial(friends)\n    \n    total_arrangements = places_for_judy * arrangements_for_friends\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n    for i in range(1, lcm + 1):\n        if lcm % i == 0:\n            possible_number = lcm // i\n            if (number % possible_number == 0 or possible_number % number == 0) and set(\n                [number, possible_number]) == set([number, possible_number]).intersection(\n                {1, 2, number, possible_number}):\n                return possible_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while True:\n        num_str = str(num)\n        digit_count += len(num_str)\n        if digit_count >= 200:\n            return int(num_str[-(digit_count - 200) - 1])\n        num += 1\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of the shirt\n    c = symbols('c') \n\n    # The price is $40 more than the cost\n    price = c + 40\n\n    # Customer buys it with twenty percent off\n    sale_price = price * 0.80\n\n    # Profit is $12\n    profit_eq = Eq(sale_price - c, 12)\n\n    # Solve the equation to find the cost\n    cost = solve(profit_eq, c)\n\n    return cost[0]\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    # Daniel's age two years ago was 6 times his daughter's age at that time\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    \n    # Daniel's age two years from now will be 4 times his daughter's age at that time\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    daily_production = 500\n    total_production = total_days * daily_production\n\n    points_for_qualified = 5\n    points_lost_unqualified = -18\n    total_points = 9931\n    \n    # Let the number of unqualified products be x, then the number of qualified products is total_production - x\n    # Each qualified product contributes 5 points and each unqualified product loses 18 points, which adds up to the total points\n\n    # 5*(total_production - x) - 18*x = total_points\n    # Simplifying the equation\n    # 5*total_production - 5x - 18x = total_points\n    # (5*total_production - total_points) = 23x\n    # x = (5*total_production - total_points) / 23\n\n    x = (5 * total_production - total_points) // 23\n    qualified_products = total_production - x\n\n    return qualified_products\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    initial_mean = 12\n    new_mean = 11\n    num_numbers_initial = 7\n    num_numbers_new = 8\n\n    total_initial = initial_mean * num_numbers_initial\n    total_new = new_mean * num_numbers_new\n\n    eighth_number = total_new - total_initial\n\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of the sequence\n    total_sum = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum([1, 2])\n    return total_sum\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # original ratio of hens to roosters\n    original_ratio = Eq(hens, 6*roosters)\n\n    # ratio after the increase\n    new_ratio = Eq(hens + 60, 4*(roosters + 60))\n\n    # solving the system of equations\n    solutions = solve((original_ratio, new_ratio), (hens, roosters))\n\n    # the total number of chickens before the increase\n    total_chickens_before = solutions[hens] + solutions[roosters]\n    return total_chickens_before\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    index_in_sequence = (2021 - 1) % len(recurring_sequence)  # -1 since we start counting from 0\n    ans = int(recurring_sequence[index_in_sequence])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    return str(list(range(1, 101))).count('9')\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    ans = sequence[index]\n    return ans\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    equation = Eq(total_money / 3 + total_money * 2 / 5, 132)\n\n    total_money_solution = solve(equation, total_money)\n\n    return total_money_solution[0]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the April's original speed as v (meters per minute),\n    # and Baye's speed as u (meters per minute).\n\n    # Since April increases her speed to 4v on the way back,\n    # and she meets Baye 800 meters away from Q, we can set up the equations:\n    # For April to reach Q and come back to meet Baye:\n    # (1800 / v) + (800 / (4v)) = (1800 - 800) / u\n    # Simplify to get:\n    # 1800(5/4v) = 1000/u\n    # 1800 * 5u = 1000 * 4v\n    # Thus, 9u = 4v\n\n    # Now, when April reaches P again after the meeting, Baye covers the same distance:\n    # (1800 / (4v)) + (800 / u) (time for April to return to P after meeting)\n    # So Baye's distance from Q when April reaches P again is:\n    # 1800 - distance Baye covered before meeting - distance Baye covers as April returns\n    # = 1800 - (1800 - 800) - (1800 / (4v)) * u\n    # = 1800 - 1000 - (1800 / (4 * (9u/4))) * u\n    # = 1800 - 1000 - 1800 / 9\n    # = 800 - 200\n    # = 600 meters\n\n    return 600\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # Check for 2-digit palindromes\n    for i in range(1, 10):\n        # 2-digit palindromes are from 11, 22, ..., to 99\n        count += 1 \n\n    # Check for 3-digit palindromes\n    for i in range(1, 10):\n        for j in range(0, 10):\n            # 3-digit palindromes are from 101, 111, ..., to 999\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(c, b - 75)\n    equation3 = Eq(a + b + c, 835)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    pages = 215\n    count = 0\n    for i in range(1, pages + 1):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # In the worst case, Darrell draws all the blue and white beads before he gets 5 green beads.\n    beads_to_draw = 5 + 6 + 5 - 1  # all blue (5) and white (6) beads, plus the 4 green beads he could draw\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    total_numbers = 105\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_5_and_7 = total_numbers // (5 * 7)\n\n    # Using Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    for x1 in range(7):\n        for x2 in range(7 - x1):\n            x3 = 6 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    # Initialize the number of digits\n    digits = 0\n    \n    # Pages 1-9 use 1 digit each\n    digits += 9 * 1\n    \n    # Pages 10-99 use 2 digits each\n    digits += (99 - 10 + 1) * 2\n    \n    # Calculate the remaining pages from 100 to 81 (No pages with 3 digits in this notebook)\n    # No extra calculation needed because we don't reach three-digit page numbers\n    \n    return digits\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    # Definition of the operation a odot b\n    def odot(a, b):\n        return 5 * a - 2 * b\n    \n    ans = odot(6, 2)\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # We know that walking from the first floor to the fourth floor takes 12 minutes.\n    # Assuming each floor takes equal time, we can say that 12 minutes is for 3 intervals (from 1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    # Therefore, walking one interval (from one floor to the next) takes 12 minutes / 3 intervals = 4 minutes.\n\n    # If John needs to walk from the first floor to the eighth floor, that means he needs to walk 7 intervals (as he starts at the 1st floor).\n    # So, he would take 7 intervals * 4 minutes per interval to walk from the first floor to the eighth floor.\n    \n    time_per_interval = 12 / 3\n    total_intervals = 7\n    \n    total_time = time_per_interval * total_intervals\n    return total_time\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_per_month = 15\n    num_of_months = 5  # March to July inclusive is 5 months\n    total_pizzas = average_per_month * num_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "from sympy import divisors\n\ndef solution():\n    remainder = 3\n    count = 0\n    possible_values = set()\n    \n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if dividend + divisor + quotient + remainder == 40:\n                possible_values.add(dividend // quotient)\n                count += 1\n    \n    return len(possible_values)\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels = 8:5\n    ratio_birds = 8\n    ratio_squirrels = 5\n\n    # Total ratio parts representing the initial total number of birds and squirrels\n    total_parts = ratio_birds + ratio_squirrels\n\n    # Let the initial total number be 'total_parts * x' where x is a common multiplier\n    # Then initial number of birds = 8x and initial number of squirrels = 5x\n\n    # According to the question, squirrels increased by 20%\n    # New number of squirrels = 5x + 20% of 5x = 5x + 0.20 * 5x = 6x\n\n    # Total number remains same so sum of new birds and new squirrels should be same as initial total\n    # Let the new number of birds be 'y'\n    # 8x (initial birds) - y (birds that flew away) + 6x (new squirrels) = 8x + 5x (initial total)\n\n    # Simplifying, we get:\n    # y = 8x - 6x = 2x (birds that flew away)\n\n    # The percentage of birds that flew away is calculated based on the initial number of birds (8x)\n    # Percentage birds flew away = (birds that flew away / initial number of birds) * 100\n    #                           = (2x / 8x) * 100\n    percentage_flew_away = (2 / 8) * 100\n\n    return percentage_flew_away\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fiona, gary, harold = symbols('fiona gary harold')\n    \n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n    \n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n    \n    return solutions[fiona]\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    term_number = 5  # We want the 5th term\n\n    next_term = first_term + (term_number - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 3 + b % 3) + (a // 3 * b // 3)\n    \n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters\n    container_volume = 5  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    \n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # A must be less than 10 to satisfy the inequality (9/A < 1)\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    for perm in permutations(range(1, 12), 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and A + R + T + R + T == 13:\n            max_value = max(max_value, A + R + T)\n    return max_value\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_Tanya = 3\n    right_of_Tanya = 5\n    Tanya = 1\n\n    total_members = left_of_Tanya + Tanya + right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    number = 87878\n    for prime in reversed(list(primerange(1000, 10000))):\n        if number % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)  # distance for the final part of the race\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    van_capacity = 12\n    total_crates = 24\n    \n    vans_needed = -(-(total_crates * crate_weight) // van_capacity)\n\n    return vans_needed\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # total number of students\n    total_students = 39\n\n    # let the number of boys be x\n    boys = Symbol('x')\n    \n    # since the total number of students is 39, the number of girls will be 39 - x\n    girls = total_students - boys\n\n    # Equation: 1/4 of the boys = 2/5 of the girls\n    equation = (1/4) * boys - (2/5) * girls\n\n    # Solve the equation to find the number of boys\n    num_boys = solve(equation, boys)[0]\n    num_girls = total_students - num_boys\n\n    # Calculate the difference number of boys and girls\n    difference = num_boys - num_girls\n\n    return difference\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Daniel gives away 24 stickers\n    daniel_after = daniel - 24\n\n    # Patrick buys 10 stickers\n    patrick_after = patrick + 10\n\n    # Patrick ends up with twice as many as Daniel\n    equation = Eq(patrick_after, 2 * daniel_after)\n\n    # They had an equal number at first\n    equation_equal = Eq(daniel, patrick)\n\n    # Solve the system of equations\n    solutions = solve((equation, equation_equal), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_sit_ups = 17\n    jack_sit_ups = 10 + 3 * henry_sit_ups\n    return jack_sit_ups\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    # Use integer partition function, p(n), which shows the number of different ways\n    # of writing the natural number n as a sum of positive integers, disregarding the order of the addends.\n    from sympy import IntegerPartition\n\n    # Call the partition function and get the list of partitions of 5\n    partitions = IntegerPartition(5).partition\n    # The length of this list will give us the number of ways to split 5\n    count = len(partitions)\n    \n    return count\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea_level = 82\n    plane_height_above_sea_level = 569\n    vertical_distance = whale_depth_below_sea_level + plane_height_above_sea_level\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # Assuming all boys are right-handed, we need to find minimum right-handed girls\n    # boys = total_pupils - girls\n    # right_handed_boys = right_handed - right_handed_girls\n    # Since every boy is assumed to be right-handed, the minimum number of girls being right-handed is when\n    # all boys (total_pupils - girls) are right-handed.\n    right_handed_girls = right_handed - (total_pupils - girls)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "from itertools import permutations\n\ndef solution():\n    perms = [''.join(p) for p in permutations('123456789')]\n    min_diff = float('inf')\n    for num1 in perms:\n        for num2 in perms:\n            if num1 != num2:\n                diff = abs(int(num1) - int(num2))\n                if diff < min_diff:\n                    min_diff = diff\n    return min_diff\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        total_skirts += day * skirts_per_worker_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    total_fruit = symbols('total_fruit')\n    apple_fraction = 2/3\n    banana_fraction = 1/9\n    lemon_fraction = 1 - apple_fraction - banana_fraction\n\n    apple_count = apple_fraction * total_fruit\n    lemon_count = lemon_fraction * total_fruit\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apple_count - 12, lemon_count)\n\n    # Solve the equation\n    total_fruit_solution = solve(equation, total_fruit)\n    \n    # Calculate the number of lemons\n    lemons = lemon_fraction * total_fruit_solution[0]\n\n    return lemons\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    original_mul = 45 * 52\n    target_div = 234000 // 520\n\n    # Since we know 45 * 52 = 2340, then 234000 is 100 times bigger than 2340\n    # And if we divide 234000 by 100 we get back 2340, indicating that we can skip straight to dividing by 520\n    scaled_div = original_mul // 5  # equivalent to (45 * 52 * 100) // 520\n\n    return scaled_div\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    # Probability of living over 20 years old\n    prob_over_20 = 0.6\n    # Probability of living over 25 years old\n    prob_over_25 = 0.3\n    \n    # Probability of living to over 25 years old given it has already lived over 20 years old\n    # P(living over 25 | living over 20) = P(living over 25) / P(living over 20)\n    prob_condition = prob_over_25 / prob_over_20\n    \n    return prob_condition\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # 5 taps take 2 minutes to fill 1 litre\n    one_tap_time = 5 * 2  # Time taken by one tap to fill 1 litre\n    \n    # Time taken by one tap to fill 500ml (half litre)\n    time_to_fill_half_litre = one_tap_time / 2\n    \n    return time_to_fill_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    brother_erasers = (total_erasers - difference) // 2\n\n    return brother_erasers\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if (a * a) + (a + a) == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n\n    return ans\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # Difference in height between Ben and Sally in cm\n    sally_height = ben_height + difference\n    return sally_height\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    # Create a list of the given digits\n    digits = [1, 3, 4, 6, 7, 8]\n    # Generate all possible three-digit numbers with the given digits using permutations\n    three_digit_numbers = list(permutations(digits, 3))\n    # Initialize the greatest sum to zero\n    max_sum = 0\n    # Iterate over the permutations to form pairs of three-digit numbers\n    for i, num1 in enumerate(three_digit_numbers):\n        for num2 in three_digit_numbers[i+1:]:\n            # Ensure all digits are unique when two numbers are formed\n            if len(set(num1 + num2)) == len(digits):\n                # Calculate the sum of the two three-digit numbers\n                sum_of_numbers = int(''.join(map(str, num1))) + int(''.join(map(str, num2)))\n                # Update the greatest sum, if current sum is greater\n                max_sum = max(max_sum, sum_of_numbers)\n    return max_sum\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume_ml = 2000  # 2 litres in millilitres\n    volume_drank_ml = 350  # millilitres drank\n    \n    remaining_volume_ml = initial_volume_ml - volume_drank_ml\n    \n    return remaining_volume_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    ans = 3280 * 0.40\n    return ans\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for total visitors\n    visitors = symbols('visitors')\n\n    # Given fractions of children and men\n    children_fraction = 3/5\n    men_fraction = 1/2\n\n    # Given number of more children than men\n    more_children = 140\n\n    # Equation based on the problem:\n    # (3/5) of the visitors were children\n    # (1/2) of the remaining visitors (2/5 of total) were men\n    # So, the number of men is (1/2) * (2/5) = (1/5) of the total visitors\n    # There are 140 more children than men\n    # Which means (3/5 * visitors) - (1/5 * visitors) = 140\n    equation = Eq((children_fraction - men_fraction) * visitors, more_children)\n\n    # Solve the equation to find the total number of visitors\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyzing the pattern:\n    # Between 1 and 8 there is a difference of 7\n    # Then 16 is double of 8\n    # Next, 23 is 7 more than 16\n    # Then 46 is double of 23\n    # So, 53 will be 7 more than 46\n    # Following this pattern, the next number is double of 53.\n    \n    return 53 * 2  # Double the previous term\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    avg_goals_per_match = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals_per_match * num_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kg = 8\n    cost_per_kg = total_cost / total_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the flow rate of A, then 2x is the flow rate of B.\n    # Let y be the flow rate of C, and let T be the total tons of water the pool can be filled up with.\n    x, y, T = symbols('x y T')\n\n    # Equation for A and C\n    eq1 = Eq(x + y, T)\n    # A fills 18 tons when A and C together fill the pool.\n    eq2 = Eq(x / (x + y), 18 / T)\n\n    # Equation for B and C\n    eq3 = Eq(2 * x + y, T)\n    # B fills 27 tons when B and C together fill the pool.\n    eq4 = Eq(2 * x / (2 * x + y), 27 / T)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (x, y, T))\n\n    return solutions[T]\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    end = 10\n    increment = 2\n    total = 0\n    for i in range(start, start + 2*end, increment):\n        total += i\n    return total\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's name the daily grass growth as G, the amount of grass a horse eats as H, and the amount a sheep eats as S.\n    # According to the problem, we have:\n    # 20H * 12 = G * 12 (1) - because 20 horses eat all grass in 12 days\n    # 60S * 24 = G * 24 (2) - because 60 sheep eat all grass in 24 days\n    # H = 4S (3) - since a horse eats as much as 4 sheep\n\n    # Using equation (3) we can replace H in equation (1), getting 80S * 12 = G * 12\n    # We can equate the amount of grass grown and being eaten (from equations 1 & 2), getting:\n    # 80S * 12 = 60S * 24\n    # S = (80 * 12) / (60 * 24)\n    S = (80 * 12) / (60 * 24)\n\n    # Now, we want to find how long 12 horses and 88 sheep will eat all the grass:\n    # 12H + 88S = G * X (where X is the number of days all the grass is eaten)\n    # Using equations (1) and (3) to express G and H in terms of S\n    # H = 4S\n    # G = 80S * 12\n    # We have:\n    H = 4 * S\n    G = 80 * S * 12\n\n    # Plugging H and S into the last equation\n    # 12 * 4S + 88S = 80S * 12 * X\n    # (12 * 4 + 88) * S = 80S * 12 * X\n    # X = (12 * 4 + 88) / (80 * 12)\n    X = (12 * 4 + 88) / (80 * 12)\n\n    return X\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    count = 10 - 5 + 1\n    return count\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    return 19.20 / 16\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    # Since MATH + HTAM equals 12221 and both are 4-digit numbers,\n    # M and H must be 1 and 2 in some order. But since MATH is a 4-digit number, M cannot be 0.\n    # Thus, M must equal 1 and H must equal 2.\n\n    # Now we have 1A2T + T2A1 = 12221\n    # This leads to 1000 + 100A + 20T + T + 1000T + 200 + 10A + 1 = 12221\n    # 1020T + 110A + 1001 = 12221\n    # 1020T + 110A = 11220\n\n    # T and A are single-digit numbers (0-9), now we just need a T and A that satisfy this equation.\n    for A in range(10):\n        for T in range(10):\n            if 1020 * T + 110 * A == 11220:\n                # Now we know M, A, T, H\n                M = 1\n                H = 2\n                # Return the sum\n                return A + M + T + H\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial as f\n\n    # Mr Spencer and his 2 children can be arranged in 2! ways\n    # because Mr Spencer has to sit between the 2 children.\n    spencer_family_arrangements = f(2)\n\n    # Now treat Mr Spencer and his 2 children as a single unit.\n    # This unit and the other 3 people give us 4 \"units\" to arrange.\n    total_arrangements = f(4)\n\n    # The total arrangements are the product of the two individual arrangement counts.\n    answer = spencer_family_arrangements * total_arrangements\n\n    return answer\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    first_number = 1.9\n    second_number = 1.99\n    middle_number = (first_number + second_number) / 2\n    return middle_number\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the number of $2 notes and y be the number of $5 notes originally\n    x, y = symbols('x y')\n    \n    # The total number of notes originally is 55\n    equation1 = Eq(x + y, 55)\n    \n    # She spent 1/3 of the $2 notes\n    spent_2_notes = x / 3\n    \n    # She received 8 more $5 notes\n    received_5_notes = 8\n    \n    # After transactions, the number of $5 notes is 3/7 of the remaining notes\n    total_notes_after = x - spent_2_notes + y + received_5_notes\n    equation2 = Eq(y + received_5_notes, 3/7 * total_notes_after)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total amount of money originally (2*x + 5*y)\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n    \n    return total_money\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Knowing that A*B = 24 and B*C = 52, we find the common factor(s) of 24 and 52.\n    factors_24 = {i for i in range(1, 25) if 24 % i == 0}\n    factors_52 = {i for i in range(1, 53) if 52 % i == 0}\n    \n    # The common factors of 24 and 52 are:\n    common_factors = factors_24.intersection(factors_52)\n\n    # We look for the smallest possible B which is the highest common factor.\n    B = max(common_factors)\n    \n    # Since A * B = 24, then A = 24 / B\n    A = 24 // B\n    \n    # Similarly, B * C = 52, then C = 52 / B\n    C = 52 // B\n    \n    # The smallest possible value of A + C is:\n    return A + C\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    # Let's denote c as the number of correct answers and w as the number of wrong answers.\n    # We have two conditions:\n    # c + w = 6 (because there are 6 questions in total)\n    # 5c - 2w = 23 (because 5 marks are awarded for each correct answer and 2 marks are deducted for each wrong one)\n    \n    # From the first condition, we can express w as w = 6 - c\n    # Then we replace w in the second condition and solve for c\n    c = 0\n    while True:\n        w = 6 - c\n        if 5 * c - 2 * w == 23:\n            break\n        c += 1\n    \n    return c\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # distance to friend's house in meters\n    speed = 7  # running speed in meters per minute\n    \n    time_minutes = distance / speed  # time taken to run to friend's house in minutes\n    \n    return time_minutes\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # ABCEF group (ABC group and EF group should stick together)\n    abcef_perms = factorial(3) * factorial(2)  # Permutations within ABC and within EF\n    \n    # Total groups (considering ABCEF as a single group along with D, G, H)\n    total_groups = factorial(5)\n    \n    # Multiply group permutations with permutations of internal elements\n    total_permutations = total_groups * abcef_perms\n\n    return total_permutations\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The nth odd number can be represented as 2n - 1\n    n = 20\n    odd_number = 2 * n - 1\n    return odd_number\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 3 + 7, 18)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let's denote the number of sweets as S\n    # Let's denote the number of students as n\n    # According to the question we have two equations:\n    # S + 26 = 6n (equation for giving each student 6 sweets but short of 26)\n    # S + 5 = 5n (equation for giving each student 5 sweets but short of 5)\n\n    # Since the number of sweets S are the same in both cases, these two equations can be set equal to each other and solved for n\n    # 6n - 5n = 26 - 5\n    # n = 21 (number of students)\n\n    # Now we can substitute the value of n back into one of the equations to solve for S\n    n = 21\n    S = 6*n - 26\n    \n    return S\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):  # ensure x2 > x1 for different numbers\n            for x3 in range(x2 + 1, 15):  # ensure x3 > x2 for different numbers\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n\n    # Let scarfs_per_day be the original number of scarfs Diana produces per day\n    # Let total_scarfs be the total number of scarfs she needs to produce\n\n    # Original plan\n    # 6 days * scarfs_per_day = total_scarfs\n\n    # Revised plan\n    # (6 - 2) days * (scarfs_per_day + 24) = total_scarfs\n\n    # Now we can write down the two equations based on above descriptions\n    equation1 = Eq(6 * scarfs_per_day, total_scarfs)\n    equation2 = Eq(4 * (scarfs_per_day + 24), total_scarfs)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial ratio of boys to girls is 5:3\n    initial_ratio = Eq(boys / girls, 5 / 3)\n\n    # After 15 boys left, the ratio of boys to girls is 5:6\n    new_ratio = Eq((boys - 15) / girls, 5 / 6)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    # Total number of pupils in the school band at first\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 16, 2))\n    return series_sum\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_age_now = 65\n    josh_age_5_years_ago = (3/5) * (shelby_age_now - 5)\n    josh_age_now = josh_age_5_years_ago + 5\n    return josh_age_now\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint, mul\n\n    # Factor 675 into its prime factors\n    factors = factorint(675)\n    \n    # To make the product a square, each prime factor's power must be even\n    # Double the factors that are not already even\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            factors[prime] *= 2\n\n    # We get B by multiplying the primes raised to the NEW/adjusted powers\n    # However, we need to omit the primes already in 675's factorization\n    B = mul([p**factors[p] for p in factors if factors[p] % 2 != 0])\n\n    return B\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695\n    single_can_cost_pence = 65\n    cost_of_12_individual_cans = 12 * single_can_cost_pence\n    savings = cost_of_12_individual_cans - multipack_cost_pence\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    return 21.40 * 0.25\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight = (adam_ben + ben_carl + adam_carl) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Alan and Bob can paint the room together in 4 hours\n    joint_rate = 1 / 4\n    \n    # Bob can paint the room alone in 6 hours\n    bob_rate = 1 / 6\n    \n    # Alan's rate is the difference between the joint rate and Bob's rate\n    alan_rate = joint_rate - bob_rate\n    \n    # Alan can paint the room alone in 1 / Alan's rate hours\n    alan_time = 1 / alan_rate\n    \n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the system of equations\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    \n    # Count numbers between 3267 and 3999\n    # The thousands place must be 3\n    # The hundreds place can be one among {2,4,5,6} (4 possibilities)\n    # The tens place and the ones place can be any of the remaining 4 digits (4P2 possibilities)\n    count += 4 * 4 * 3\n    \n    # Count numbers between 4000 and 4999\n    # The thousands place must be 4\n    # The hundreds, tens, and ones place can be any of the remaining 5 digits (5P3 possibilities)\n    count += 5 * 4 * 3\n\n    # Count numbers between 5000 and 5120\n    # The thousands place must be 5\n    # The hundreds place must be 0 or 1 (2 possibilities)\n    # If hundreds place is 0, the tens and ones can be any of the remaining 4 digits (4P2 possibilities)\n    # If hundreds place is 1, the tens place can only be 2 (since the number must be <= 5120), and ones can be any of the remaining 3 digits\n    count += (4 * 3) + 3\n    \n    return count\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    \n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    # Calculate compound interest\n    balance = principal * (1 + rate)**time\n    \n    return balance\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    num_weeks = 26\n    total_consumption = weekly_consumption * num_weeks\n    return total_consumption\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes_for_peter = 35\n    # Each other candidate could potentially get half of the remaining undecided votes + 1\n    max_possible_votes_for_others = (total_votes - current_votes_for_peter) // 2 + 1\n\n    # Peter needs one more vote than the others could potentially get to win without fail\n    additional_votes_needed_for_peter = max_possible_votes_for_others - current_votes_for_peter\n\n    return additional_votes_needed_for_peter\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if (sweets % 3 == 0) and (sweets % 2 == 1) and (sweets % 4 == 1) and (sweets % 5 == 1):\n            return sweets\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Alex and Nicholas each have.\n    x = symbols('x')\n\n    # According to the problem, Nicholas's remaining money is 6 times that of Alex's after spending.\n    equation = Eq((x - 13), 6 * (x - 58))\n\n    # Solve for x.\n    initial_money = solve(equation, x)\n\n    # Double the initial money to get the total amount they both had initially.\n    total_initial_money = initial_money[0] * 2\n\n    return total_initial_money\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 6 * 0.001\n    return position_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_two_thirds = 9\n    a = a_two_thirds ** (3/2)\n    return a\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length - interval) // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # Let the number of rulers be r.\n    # Then the number of pencils would be r + 10.\n    # The total number of rulers and pencils is 52.\n    # So, we can set up the equation: r + (r + 10) = 52\n    # Solving for r gives us the number of rulers.\n\n    r = symbols('r')\n    equation = Eq(r + (r + 10), 52)\n    number_of_rulers = solve(equation, r)[0]\n\n    return number_of_rulers\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean = 11\n    total_numbers = len(numbers) + 1  # plus 1 for the missing number x\n    total_sum = mean * total_numbers\n    x = total_sum - sum(numbers)\n    return x\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    current_day_index = weekdays.index('Monday')  # Index of Monday\n\n    # Calculate the index of the new weekday after 28 days\n    new_day_index = (current_day_index + days_later) % 7  # Using modulo to wrap around the week\n\n    # Map the new weekday to the corresponding code\n    day_codes = {'Monday': '0001', 'Tuesday': '0002', 'Wednesday': '0003', 'Thursday': '0004',\n                 'Friday': '0005', 'Saturday': '0006', 'Sunday': '0007'}\n    \n    return day_codes[weekdays[new_day_index]]\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_seven_value = 7 * 1000  # The value of the first 7 in the tens of thousands place\n    second_seven_value = 7 * 10  # The value of the second 7 in the tens place\n    difference = first_seven_value - second_seven_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_to_girls_ratio = 5 / 6\n    girls = boys / boys_to_girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_repr = str(1 / 3)[2:]  # str(1/3) gives '0.3333...' so we take from the 2nd index\n    if len(decimal_repr) < 1000:\n        decimal_repr = (decimal_repr * (1000 // len(decimal_repr) + 1))[:1000]\n    return sum(int(digit) for digit in decimal_repr[:1000])\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_dress, red_dress, yellow_dress = symbols('blue_dress red_dress yellow_dress')\n\n    equation1 = Eq(blue_dress, 2 * red_dress)\n    equation2 = Eq(yellow_dress, blue_dress + 2.40)\n    equation3 = Eq(blue_dress + red_dress + yellow_dress, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue_dress, red_dress, yellow_dress))\n\n    return solutions[blue_dress]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure that we have 4 marbles of the same color,\n    # consider the worst-case scenario where we pick the marbles in such a way\n    # that we keep getting a distribution as even as possible until we get 4\n    # of the same color.\n\n    # This means we can take 3 of each color without getting 4 of the same color.\n\n    # 3 red, 3 yellow, 3 blue (9 marbles in total)\n\n    # The next marble we pick MUST give us 4 of the same color,\n    # as we would have all three colors present at 3 marbles each.\n\n    # Adding 1 marble to the 9 already picked will give us 4 of one color.\n    marbles_needed = 3 * 3 + 1  # Three times the 3 different colors plus 1\n\n    return marbles_needed\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 15 / 100 * 29\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    return 100 // 2\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_for_8_books = 32\n    cost_for_1_book = cost_for_8_books / 8\n    cost_for_12_books = cost_for_1_book * 12\n    return cost_for_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # Let the unknown value be represented by x\n    # The equation to solve is 4 * x - 13 = 55\n    # Solve for x\n    x = (55 + 13) // 4  # We use integer division since we are dealing with whole numbers\n\n    return x\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal_number = 0.604\n\n    ans = fraction + percentage + decimal_number\n\n    return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Consider the pair as one unit, so we have 4 entities to arrange (4!)\n    arrangements_of_entities = factorial(4)\n\n    # The two people can switch places within their paired unit (2!)\n    arrangements_within_pair = factorial(2)\n\n    # Total arrangements\n    total_arrangements = arrangements_of_entities * arrangements_within_pair\n\n    return total_arrangements\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the original concentration in percentage of the solution added to A.\n    x = symbols('x')\n\n    # After adding 10 grams of solution with concentration x to A, the concentration \n    # of the solution in A will still be x, as we are adding the same substance.\n    # Now we transfer 10 grams of this solution to B, and then from B to C.\n\n    # The amount of the substance in the solution transferred from A to B is 10 * x / 100 grams\n    # Because B already contains 40 grams of pure water, the new concentration in B will be \n    # the amount of substance transferred divided by the total mass in B: (10 * x / 100) / (40 + 10)\n\n    # Then, we transfer 10 grams of this new solution from B to C with concentration y.\n    # We derive the concentration y from B, and it becomes:\n    # y = 10 * x / (40 + 10 * 1)\n    y = 10 * x / (40 + 10)\n\n    # The amount of the substance in the solution transferred from B to C is 10 * y / 100 grams\n    # C already contains 50 grams of pure water, so after transfer, the total mass becomes 60 grams.\n    # We are given that the final concentration in C is 0.5% which is 0.5 / 100.\n    # So we can set up the equation as: (10 * y / 100 + 0) / 60 = 0.5 / 100\n    equation = Eq((10 * y / 100) / 60, 0.5 / 100)\n\n    # Solve for x, which is the original concentration in A\n    original_concentration = solve(equation, x)\n\n    return original_concentration[0]\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_apples_first_three_days = 33\n    average_last_four_days = 18\n    total_days = 7\n\n    total_apples_last_four_days = average_last_four_days * 4\n    total_apples = total_apples_first_three_days + total_apples_last_four_days\n\n    average_per_day = total_apples / total_days\n\n    return average_per_day\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of the ages multiplied today and last year\n    prime_factors_2016 = factorint(2016)\n    prime_factors_1377 = factorint(1377)\n\n    # Calculate the difference in the ages for each prime factor\n    # The difference must be 1 for each prime factor, since ages increase by 1 each year\n    for prime in prime_factors_2016.keys():\n        if prime in prime_factors_1377:\n            if prime_factors_2016[prime] != prime_factors_1377[prime] + 1:\n                return \"Invalid ages\"\n        else:\n            prime_factors_1377[prime] = 0\n            \n    # Calculate the ages last year and two years ago\n    ages_last_year = [prime**(prime_factors_1377[prime]) for prime in prime_factors_1377]\n    ages_two_years_ago = [age - 1 for age in ages_last_year]\n\n    # Multiply the ages from two years ago to get the answer\n    ans = 1\n    for age in ages_two_years_ago:\n        ans *= age\n\n    return ans\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    mass_metal1 = 12\n    nickel_percent1 = 0.40\n    mass_metal2 = 13\n    nickel_percent2 = 0.60\n\n    nickel_mass1 = mass_metal1 * nickel_percent1\n    nickel_mass2 = mass_metal2 * nickel_percent2\n\n    total_nickel_mass = nickel_mass1 + nickel_mass2\n    total_mass = mass_metal1 + mass_metal2\n\n    nickel_concentration = (total_nickel_mass / total_mass) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays each other player once.\n    # Thus, with eight players, each player plays 7 games.\n    # As there are no ties and everyone scores different number of wins,\n    # the number of wins should be distinct for each player.\n    # Therefore, the possible number of wins are from 0 to 7 since each player can win a maximum of 7 games.\n    # Given that the champion has the highest number of wins and wins are distinct, the champion has to have 7 wins.\n    \n    ans = 7  # The champion wins all their matches.\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # Total sum of n natural numbers is n*(n+1)/2\n    # Let's test each natural number sum until we reach or surpass 3405, then break\n    n = 1\n    while True:\n        correct_sum = n * (n + 1) // 2\n        if correct_sum >= 3405:\n            break\n        n += 1\n    # Now we subtract the correct sum from the incorrect sum\n    # This difference is the number that was added twice\n    added_twice = 3405 - correct_sum + n\n    return added_twice\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "from sympy import symbols, divisors, solve, Eq\n\ndef solution():\n    divisor, dividend, quotient = symbols('divisor dividend quotient', integer=True)\n    remainder = 3\n\n    # The sum of divisor, dividend, quotient, and remainder is 40.\n    equation = Eq(divisor + dividend + quotient + remainder, 40)\n\n    possible_values = set()\n    for d in divisors(40 - remainder):\n        sol = solve((equation, Eq(dividend, quotient * d + remainder)), (divisor, dividend, quotient))\n        if sol:\n            dv, di, q = sol[divisor], sol[dividend], sol[quotient]\n            if di > 0 and dv > 0 and q > 0 and di // q == dv:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the initial number of chickens in each pen.\n    # Let y be the total number of chickens.\n    # Initially, y = 24 * x.\n    # After building 6 more pens and reducing the number by 6 in each pen, y = (24 + 6) * (x - 6).\n    # So, we have the equation: 24 * x = 30 * (x - 6).\n    # Solve for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24 * x, 30 * (x - 6))\n    solution_x = solve(equation, x)\n\n    # Once we have x, we can find the total number of chickens y by plugging x into the initial equation.\n    y = 24 * solution_x[0]\n    \n    return y\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_math = 8\n    ratio_history = 7\n    total_history_club = (total_math_club * ratio_history) // ratio_math\n    return total_history_club\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Sum of first n terms of an arithmetic progression: S_n = (n/2) * (a_1 + a_n)\n    # where a_1 is the first term and a_n is the nth term\n    # a_n = a_1 + (n-1)d, where d is the common difference\n    \n    # We have S_6 = 64 and S_12 = 156\n    # Therefore, (6/2) * (a_1 + a_6) = 64  and  (12/2) * (a_1 + a_12) = 156\n    \n    # After simplifying, we get 3 * (a_1 + a_1 + 5d) = 64  and  6 * (a_1 + a_1 + 11d) = 156\n    # Simplifying further gives a_1 * 6 + 15d = 64  and  a_1 * 12 + 66d = 156\n    \n    # Let's solve the above two equations for a_1 and d\n    # Equation 1: 6a_1 + 15d = 64 - (i)\n    # Equation 2: 12a_1 + 66d = 156 - (ii)\n\n    # Multiply Equation (i) by 2 to match the a_1 coefficient in Equation (ii)\n    # 12a_1 + 30d = 128\n\n    # Subtract Equation (i) multiplied by 2 from Equation (ii)\n    # (12a_1 + 66d) - (12a_1 + 30d) = 156 - 128\n    # 36d = 28\n    # d = 28 / 36\n    d = 28 / 36\n\n    # Substitute d back into Equation (i) to find a_1\n    # 6a_1 + 15(28/36) = 64\n    a_1 = (64 - 15*(28/36)) / 6\n\n    # Sum of the first 18 terms: S_18 = (18/2) * (a_1 + a_18)\n    # a_18 = a_1 + (18-1)d\n    a_18 = a_1 + 17 * d\n\n    # Calculate S_18\n    S_18 = (18 / 2) * (a_1 + a_18)\n\n    return S_18\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "from math import gcd\n\ndef solution():\n    return gcd(45, 60)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_3_years_ago = ashley_age_now - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_age_now = brother_age_3_years_ago + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Since the digits are reversed on planet Zog, we need to reverse the subtraction operands.\n    # The operation described as \"729 - 26\" in Zog means \"927 - 62\" on Earth.\n    pluto_subtraction = int(str(729)[::-1]) - int(str(26)[::-1])\n    \n    # Now we perform the subtraction and then reverse the result to get the answer that Pluto would write.\n    answer = str(pluto_subtraction)[::-1]\n    \n    # Convert the reversed string back to an integer to represent the numeric answer.\n    ans = int(answer)\n    \n    return ans\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # Distance covered by the train to pass the bridge completely is the length of the train\n    # plus the length of the bridge.\n    # Distance = Speed * Time\n    distance = train_speed * time_to_pass\n\n    # The length of the bridge is the total distance covered minus the length of the train.\n    bridge_length = distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n\n    return int(more_marks)\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wins, losses = symbols('wins losses')\n    \n    equation1 = Eq(wins, 2 * losses)\n    equation2 = Eq(wins + losses, 63)\n    \n    solutions = solve((equation1, equation2), (wins, losses))\n    \n    return solutions[losses]\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Calculate the distance jogged from 6:30am to 7:00am\n    time_jogging = 0.5    # 30 minutes is 0.5 hours\n    speed_jogging = 9     # Speed jogging is 9 km/h\n    distance_jogging = time_jogging * speed_jogging\n\n    # Calculate the distance walked from 7:00am to 8:00am\n    time_walking = 1      # From 7am to 8am is 1 hour\n    speed_walking = 7.5   # Speed walking is 7.5 km/h\n    distance_walking = time_walking * speed_walking\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    return (55 * 13) - (44 * 13)\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # Choices for the first digit: 2 (3 or 4)\n    # Choices for the second digit: 3 (0 or 3 or 4, since now 0 can be used)\n    # Choices for the third digit: 3 (0 or 3 or 4)\n    \n    first_digit_choices = 2\n    second_digit_choices = 3\n    third_digit_choices = 3\n    \n    total_combinations = first_digit_choices * second_digit_choices * third_digit_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    area_x = (3**2 * (3**0.5)) / 4\n    area_y = (9**2 * (3**0.5)) / 4\n    ans = area_y / area_x\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 4 and number % 8 == 4 and number % 9 == 4:\n            return number\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Total people: 3 boys (B), 3 girls (G), 3 teachers (T)\n    # The girls want to stand together so treat them as a single unit (GGG), resulting in 3 boys, 1 unit of girls, and 3 teachers\n    total_units = 3 + 1 + 3\n\n    # Calculate permutations of these units where no two boys are adjacent\n    # We can place the boys in the gaps between the units (including the ends), which means we have total_units - 2 (for girls as a unit) + 1 (the end of the line) places to put them\n    boy_positions = total_units - 2 + 1\n\n    # Choose 3 positions for the boys from the available ones\n    boy_permutations = factorial(boy_positions) // factorial(boy_positions - 3)\n\n    # Permute the remaining units (teachers and the girl unit)\n    other_permutations = factorial(total_units - 3)\n\n    # Girls can permute among themselves\n    girl_permutations = factorial(3)\n\n    # Calculate the total permutations\n    total_permutations = boy_permutations * other_permutations * girl_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_select = 2\n\n    ans = comb(total_students, students_to_select)\n\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    value1 = 8 * 9 * 10\n    value2 = 1 * 2 * 3\n    ans = value1 - value2\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original total number of animals\n    # Let y be the original number of cows\n    # Therefore, the original number of goats is x - y\n    x, y = symbols('x y')\n\n    # Original number of cows is 65% of the total\n    equation1 = Eq(y, 0.65 * x)\n\n    # After adding 240 animals, the total number of animals becomes x + 240\n    # The percentage of cows becomes 65% + 20% = 85% of the total\n    # The number of goats doubles, so it becomes 2 * (x - y)\n    # The new number of cows is hence x + 240 - 2 * (x - y)\n    equation2 = Eq(x + 240 - 2 * (x - y), 0.85 * (x + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the original number of goats\n    goats_initial = int(solutions[x] - solutions[y])\n\n    return goats_initial\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_options = 2  # 1 for having soup, 1 for not having soup\n    dessert_options = 3  # 1 for having dessert, 2 for not having dessert\n\n    combinations = appetisers * main_courses * soup_options * dessert_options\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    # x ≡ -3 (mod 8) and x ≡ -1 (mod 9)\n    congruences = ((-3, 8), (-1, 9))\n    \n    # Solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    \n    # Look for the number of children between 100 and 200\n    while ans < 100 or ans > 200:\n        ans += 8 * 9\n\n    return ans\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    red_balls = 4\n    total_probability = 2 / 7  # Given probability of picking two red balls\n    # The probability of picking two red balls without replacement is:\n    # (red_balls/total_balls) * ((red_balls - 1)/(total_balls - 1))\n    # We need to find total_balls, which includes the red and blue balls\n\n    # Let's denote blue_balls as 'b', and hence total_balls is 'red_balls + b'\n    b = symbols('b')\n    equation = Eq((red_balls/(red_balls + b)) * ((red_balls - 1)/(red_balls + b - 1)), total_probability)\n    blue_balls = solve(equation, b)\n\n    # We are interested in the positive and integer solution for blue balls\n    for solution in blue_balls:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    n = 8  # There are 8 terms in the sequence\n    a1 = 6  # First term\n    an = 41  # Last term\n    sum_seq = n * (a1 + an) / 2  # Sum of arithmetic sequence formula\n    return int(sum_seq)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    slices_left = 4\n    slices_given = 2\n\n    # Total slices left after giving to friends\n    total_slices_left = slices_left + slices_given\n\n    # Since the slices left is the result of having 2/5 of the cake,\n    # the original number of slices is 5/2 times the slices left.\n    original_slices = (5/2) * total_slices_left\n\n    return int(original_slices)\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = (51 + 50) + (-45 + 40) + (-35 + 30) + (-25 + 20) + (-15)\n    return ans\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Mike's work rate per hour\n    m = symbols('m')\n    # Danny's work rate per hour\n    d = symbols('d')\n\n    # Equation when they work together\n    equation1 = Eq(m + d, 1 / 10)\n    # Equation when Mike works for 8 hours and Danny for 13 hours\n    equation2 = Eq(8 * m + 13 * d, 1)\n    \n    # Solve the system of equations\n    rates = solve((equation1, equation2), (m, d))\n\n    # Work rate of Danny\n    danny_rate = rates[d]\n    \n    # Time taken for Danny to complete the work by himself\n    time_danny = 1 / danny_rate\n    \n    return time_danny\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10 ** 2  # The place value of the first 3 (in 643)\n    place_value_2 = 3 * 10 ** 5  # The place value of the second 3 (in 435,643)\n\n    ans = place_value_2 - place_value_1\n\n    return ans\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    pencils = 7\n    cases = 2\n    min_pencils = (pencils + cases - 1) // cases\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(1, 67):\n        if custom_oplus(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from itertools import combinations_with_replacement\nfrom math import factorial\n\ndef number_of_ways_to_write_exponents(base, exponent):\n    # returns the number of ways to write an exponent as a sum of exponents,\n    # considering that each exponent is also associated with a unique position\n    \n    factors = [base ** i for i in range(exponent + 1) if base ** i <= 2 ** exponent]\n    ways = [0] * (exponent + 1)\n    ways[0] = 1\n\n    for factor in factors:\n        for i in range(factor, len(ways)):\n            ways[i] += ways[i - factor]\n    \n    return ways[-1]\n\ndef solution():\n    exponent_of_2 = 27\n    num_digits = 10\n    # The prime factorization of 2^27 only contains the number 2,\n    # so we need to distribute 27 twos among ten places.\n    # There are number_of_ways_to_write_exponents(2, 27) ways to do that.\n    \n    # However, not all combinations are valid. We cannot have a digit greater than 9, \n    # which corresponds to 2^3, as a digit in a whole number.\n    # So our digits are limited to 1 (which is 2^0), 2 (which is 2^1), 4 (which is 2^2), and 8 (which is 2^3).\n    # We calculate all possible combinations of those digits that have a length of 10\n    valid_digits = [1, 2, 4, 8]\n    \n    # Count the number of combinations of these valid digits that multiply to 2^27\n    valid_combinations = 0\n    for combination in combinations_with_replacement(valid_digits, num_digits):\n        if sum([factorial(combination.count(x)) for x in set(combination)]) == num_digits and \\\n           sum(map(lambda x: {1: 0, 2: 1, 4: 2, 8: 3}[x], combination)) == exponent_of_2:\n            valid_combinations += factorial(num_digits) // \\\n                                 functools.reduce(operator.mul, \n                                                  (factorial(combination.count(x)) for x in set(combination)), 1)\n\n    return valid_combinations\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = -(50 - 46)\n\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_on_folder = 2.89\n    money_from_father = 4 / 5\n\n    current_amount = initial_amount - spent_on_folder + money_from_father\n\n    return current_amount\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance_between_chess = 3\n\n    # The corner chess will be counted once, so we need to subtract the overlapping corners from each side\n    # There are 4 corners where the chess will overlap when counting around the board\n    # Then we multiply by 4 because the board has 4 sides\n    num_chess_per_side = (side_length // distance_between_chess) - 1\n    total_chess = (num_chess_per_side * 4) + 4  # Adding the 4 corner chess back in\n\n    return total_chess\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            number = int(f\"{a}{a}{b}{b}\")\n            if (number ** 0.5).is_integer():\n                return number\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # To minimize the number of red squares, we want to maximize the number\n    # of different digits used so that none reaches 5 occurrences.\n    # Since there are 10 different digits (0 to 9), we can use each digit\n    # 4 times without painting any square red.\n    # After using each digit 4 times, we have used 4 * 10 = 40 squares.\n    # We have 100 - 40 = 60 squares left.\n    # We use 9 more digits once each to fill 9 squares.\n    # We now have 60 - 9 = 51 squares left, which must be filled with any digit.\n    # We can use each of the remaining 51 digits four times, which gives us 204 possibilities,\n    # and then we have to choose one digit to fill the 51st square, which will be painted red.\n    # So the total number of red squares will be minimum when we fill 51 squares with the same digit.\n    # All 51 of these squares will be painted red.\n    return 51\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    factor_5 = 0\n    n = 1\n    while factor_5 < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            temp //= 5\n            factor_5 += 1\n    return n - 1\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return (3 * m - 1) + m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Relative speed of Tim and Bob when they drive towards each other\n    relative_speed = 56 + 74  # in km per hour\n    \n    # Initial distance between Tim and Bob\n    initial_distance = 780  # in kilometers\n    \n    # Distance between Tim and Bob after a while for the first time\n    remaining_distance = 130  # in kilometers\n    \n    # Distance covered when they meet for the first time\n    distance_covered = initial_distance - remaining_distance\n    \n    # Time taken by Tim and Bob to cover the distance\n    time_taken = distance_covered / relative_speed  # in hours\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    climb_rate = 3\n    slide_rate = 1\n    daily_progress = climb_rate - slide_rate\n    day_count = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += climb_rate\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_rate\n\n    return day_count\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers_sum = 5 * 5  # Mean * number of values\n    known_sum = 3 + 4 + 6 + 10\n    fifth_number = numbers_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                if int(''.join(perm)) == 2013:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = [8, 3, 5, 4]  # the recurring part of the decimal\n    sum_of_digits = 0\n    for i in range(84):\n        sum_of_digits += recurring_sequence[i % len(recurring_sequence)]\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # time taken between strikes is 43 seconds for 6 strikes minus 3 seconds each for 6 sounds\n    time_between_strikes = (43 - 6*3) / (6 - 1)\n    \n    # total time for 12 strikes\n    total_time_for_12 = 12 * 3 + time_between_strikes * (12 - 1)\n\n    return total_time_for_12\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    from math import sqrt, floor\n    \n    # Let the original number of students be x.\n    # x + 5 is the largest perfect square before adding 18 students,\n    # and x + 18 is a perfect square after adding 18 students.\n    # We search for the smallest n such that (n * n) - 18 is a perfect square.\n\n    n = 0\n    while True:\n        # Calculate the total number of students after adding 18\n        total_students_with_18 = (n * n)\n        \n        # Calculate the number of students before adding 18 by subtracting 18\n        total_students = total_students_with_18 - 18\n        \n        # Check if the total_students - 5 is a perfect square\n        if sqrt(total_students - 5).is_integer():\n            # Return the original number of students\n            return total_students - 5\n        \n        # Increment n to check for the next perfect square\n        n += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_speed_per_hour = 6 / 15  # Number of people divided by the hours they take\n    required_speed_per_hour = 1 / 2  # To build the bridge in 2 hours\n\n    # The speed is inversely proportional to the number of people\n    required_people = required_speed_per_hour / people_speed_per_hour\n\n    return int(required_people)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # The problem is equivalent to finding the number of solutions to x1 + x2 + x3 + x4 + x5 + x6 = 20\n    # where each xi >= 1.\n    # This is a problem of distributing 'n' identical items to 'r' distinct groups with each group \n    # getting at least one item, which can be solved using the formula for combinations with repetition:\n    # C(n - 1, r - 1) = (n - 1)! / ((r - 1)! * (n - r)!)\n    # Here, we have n = 20 pens and r = 6 kids. Since each kid gets at least one pen, we distribute one pen\n    # to each kid first, then distribute the remaining pens. There are 20 - 6 = 14 pens to distribute among\n    # 6 kids with no restrictions.\n    n = 14\n    r = 6\n    ans = factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n    return ans\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # Time James takes for one quiz in minutes\n    total_quizzes = 4  # Total number of quizzes\n\n    total_time_minutes = time_per_quiz * total_quizzes  # Total time in minutes\n    total_time_hours = total_time_minutes / 60  # Convert minutes to hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    # Total number of three-digit numbers\n    total_three_digit_numbers = 999 - 100 + 1\n\n    # Number of three-digit numbers without any zeros\n    no_zero_in_first_digit = 9  # Cannot be zero\n    no_zero_in_other_digits = 9  # 1-9 (cannot be zero)\n    no_zero_total = no_zero_in_first_digit * no_zero_in_other_digits * no_zero_in_other_digits\n\n    # Number of three-digit numbers with at least one zero\n    with_zero = total_three_digit_numbers - no_zero_total\n\n    return with_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # kg\n    speed = 30  # m/s\n    kinetic_energy = (1/2) * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    term_number = 7\n\n    seventh_term = first_term + (term_number - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    ones_place = 9  # the greatest odd number\n    # iterate over possible digits for the hundreds and tens places\n    for hundreds_place in range(1, 10):  # excluding 0 as it can't be the first digit in a 4-digit number\n        for tens_place in range(10):  # tens place can be 0-9\n            if hundreds_place != tens_place and hundreds_place + tens_place == 13:\n                for thousands_place in range(1, 10):\n                    # check if all digits are different\n                    if (thousands_place != ones_place and thousands_place != tens_place and\n                        thousands_place != hundreds_place):\n                        ans = int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n                        return ans\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let x be the distance Jerry drives.\n    # Let y be the distance Kevin drives.\n    # Their total combined distance is 225 miles.\n    # Kevin's speed is 1.5 times Jerry's speed, so his distance is also 1.5 times Jerry's distance.\n\n    # We set up the equations:\n    # x + y = 225\n    # y = 1.5x\n\n    # Now substitute y from the second equation into the first equation:\n    # x + 1.5x = 225\n    # 2.5x = 225\n    # x = 225 / 2.5\n\n    # Calculate x\n    x = 225 / 2.5\n\n    return x\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # Each cut creates an additional piece\n\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for number in range(100, 300):\n        if number % 5 == 2 and number % 6 == 2 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height = 1  # initial height is considered 100%\n    bounce_height = 0.75\n    min_height = 0.25\n    bounces = 0\n    \n    while height * bounce_height >= min_height:\n        height *= bounce_height\n        bounces += 1\n    \n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    arithmetic_sequence = range(5, 21, 3)\n    ans = sum(arithmetic_sequence)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n    number_of_gaps = number_of_pictures - 1  # because two pictures are at the extremes\n    \n    # Total space taken by the pictures themselves\n    total_pictures_width = number_of_pictures * picture_width\n    \n    # Space available for gaps between pictures\n    total_gap_space = total_width - total_pictures_width\n    \n    # Width of each gap\n    gap_width = total_gap_space / number_of_gaps\n    \n    # Distance from the left edge to the centre of the third picture\n    # It will be the sum of two gap widths (since two gaps are between the left edge and the third picture)\n    # Plus one picture width (since we need to reach the centre of the third picture)\n    distance_to_third_picture_center = (0 * gap_width) + (2 * picture_width) + gap_width\n    \n    # Centre of the wall\n    wall_centre = total_width / 2\n    \n    # How far to place the centre of the third picture from this centre\n    # subtract the distance to the third picture center from the wall centre\n    distance_from_wall_centre = distance_to_third_picture_center - wall_centre\n    \n    # converting to int since we want whole number millimeters\n    ans = abs(int(distance_from_wall_centre))  # making sure distance is positive\n    return ans\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    \n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one banana (b) and one apple (a)\n    b, a = symbols('b a')\n\n    # Ellie pays £1.50 for 2 bananas and 3 apples:\n    equation1 = Eq(2 * b + 3 * a, 1.50)\n\n    # Beth pays £1.45 for 3 bananas and 2 apples:\n    equation2 = Eq(3 * b + 2 * a, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculate the payment for 1 banana and 1 apple\n    payment_for_one_of_each = solutions[b] + solutions[a]\n\n    return float(payment_for_one_of_each)\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for i in range(1, 10):\n        if 5 < i < 8 and 8 + i == 15:\n            return False, i\n    return True, 7\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    original_amount = symbols('original_amount')\n    after_watch = original_amount - 200\n    after_shirt = after_watch - (2/7) * after_watch\n    equation = Eq(after_shirt, original_amount / 3)\n\n    ans = solve(equation, original_amount)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    amount_after_five_years = initial_investment * interest_first_three_years * interest_last_two_years\n    ans = round(amount_after_five_years, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # Ryna's estimate is incorrect. \n    # If a price is rounded off to the nearest $100, the lowest possible price\n    # should be half-way between the two nearest hundreds.\n    \n    rounded_price = 125000\n    rounding_unit = 100\n    \n    # Calculate the lowest possible price before rounding up to the nearest hundred\n    lowest_price = rounded_price - (rounding_unit / 2) + 1\n    \n    return lowest_price\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Tom and Harry are treated as a single entity, so there are now 6 entities.\n    # Ronda is fixed at the right end, thus we only have to arrange 5 entities.\n    num_entities_to_arrange = 5\n\n    # There are 5! ways to arrange these 5 entities.\n    arrangements_entities = factorial(num_entities_to_arrange)\n\n    # Since Tom and Harry can also swap places between themselves, we have 2! ways for that.\n    tom_harry_swaps = factorial(2)\n\n    # Total arrangements = arrangements of entities * arrangements of Tom and Harry.\n    total_arrangements = arrangements_entities * tom_harry_swaps\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 89 * 4\n    target_average = 95\n    test_score_full = 100\n    additional_tests = 0\n    \n    while True:\n        new_total = current_total + additional_tests * test_score_full\n        new_average = new_total / (4 + additional_tests)\n        if new_average >= target_average:\n            break\n        additional_tests += 1\n    \n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time taken for each part of the race\n    time_first_part = 540 / 9  # Time = Distance / Speed\n    time_middle_part = 300 / 6\n    time_last_part = (1000 - 540 - 300) / 10\n\n    # Total time taken for the race\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the total distance from city P to city Q\n    # Let s be the usual speed\n    # Let t be the usual time it takes to travel from P to Q at speed s\n    d, s, t = symbols('d s t')\n\n    # According to the first condition\n    # d = s * t\n    # d = (s * 1.20) * (t - 1)\n    equation1 = Eq(d, s * t)\n    equation2 = Eq(d, 1.20 * s * (t - 1))\n\n    # According to the second condition\n    # At first 200km, speed is s, and time spent is 200 / s\n    # The rest of the distance (d - 200) is traveled at speed s * 1.25\n    # The time spent is (d - 200) / (1.25 * s)\n    # The total time is now 200 / s + (d - 200) / (1.25 * s), which is 12 minutes (0.2 hours) less than usual\n    equation3 = Eq((200 / s) + (d - 200) / (1.25 * s) + 0.2, t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    # The distance d is what we want to find\n    return solutions[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    lia_extra = 1\n    liz_extra = 1\n\n    performances = total_classes + lia_extra + liz_extra\n\n    return performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed of the train in m/s\n\n    # total distance to cover is the sum of the train length and bridge length\n    total_distance = train_length + bridge_length\n\n    # time = distance/speed\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n    return uncle_current_age\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    # Original ratio of sheep to cows\n    equation1 = Eq(sheep, 5/7 * cows)\n\n    # After adding and removing animals\n    equation2 = Eq(cows - 7, 3/4 * (sheep + 21))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    # Calculate the difference in minutes between 08:30 and 09:25\n    hour_diff = 9 - 8  # difference in hours\n    minute_diff = 25 - 30  # difference in minutes\n\n    # Convert the hour difference to minutes and add the minute difference\n    n = (hour_diff * 60) + minute_diff\n    return n\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency is twice B's\n    # A's work per day is 1/6 (since A can complete the job in 6 days)\n    # So, B's work per day is 1/12 (half of A's)\n    A_work_per_day = 1/6\n    B_work_per_day = A_work_per_day / 2\n\n    # Combined work per day when A and B work together\n    combined_work_per_day = A_work_per_day + B_work_per_day\n\n    # Total days to complete the job when both A and B work together\n    total_days = 1 / combined_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let Geoff's age be g and his sister's age be s\n    # The sum of their ages right now is 22, so g + s = 22\n    # In the future, the sum of their ages will be 30, which is 8 years more than their current sum.\n    # This means 8 years will pass before their ages sum up to 30, because both ages increase at the same rate (1 year for each per year).\n    \n    # Therefore, the answer is in 8 years.\n    return 8\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18 * 32 // 36\n    return numerator\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    # Haribo cost\n    haribo_cost = 0.50\n    \n    # Mamee cost is 30 cents less than Haribo\n    mamee_cost = haribo_cost - 0.30\n    \n    # Big packet of jelly cost is 6 times Mamee cost\n    big_jelly_cost = 6 * mamee_cost\n    \n    return big_jelly_cost\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies = symbols('candies')\n\n    anna = 3/8 * candies\n    belle = 1/4 * candies\n    cathy_dawn = candies - (anna + belle)\n    equation = Eq(anna + belle, cathy_dawn + 90)\n\n    total_candies = solve(equation, candies)\n\n    return total_candies[0]\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3*(x + 7), 5*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbol for the number of fish balls made at first\n    fish_balls_originally = symbols('fish_balls_originally')\n    \n    # Given: \n    # sold 3/4 in the morning, so has 1/4 left\n    # sold 1/3 of the remaining in the afternoon, so he has 2/3 of 1/4 left, which is 1/6 of the original number\n    # made another 506 fish balls\n    # in the end, he has twice the number of fish balls he made at first\n    # So the equation will be: 1/6 * fish_balls_originally + 506 = 2 * fish_balls_originally\n    \n    equation = Eq(1/6 * fish_balls_originally + 506, 2 * fish_balls_originally)\n    \n    # Solve the equation for the number of fish balls made originally\n    solution = solve(equation, fish_balls_originally)\n    \n    # Since we are looking for the number of fish balls, and it must be a whole number, take the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for chocolate, vanilla, and blueberry cupcakes\n    choco, vani, blue = symbols('choco vani blue')\n    \n    # Write the equations according to the problem\n    equation1 = Eq(choco, vani + 72)  # Sally had 72 more chocolate cupcakes than vanilla cupcakes\n    equation2 = Eq(blue, vani - 36)   # She had 36 lesser blueberry cupcakes than vanilla cupcakes\n    equation3 = Eq(choco / 6 + vani * 2 / 3 + blue * 7 / 9, 427)  # After selling cupcakes, Sally had 427 left\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (choco, vani, blue))\n\n    # Calculate how many chocolate cupcakes did Sally sell\n    sold_chocolate_cupcakes = solutions[choco] / 6\n\n    return int(sold_chocolate_cupcakes)\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8)*92 + 7*0.625 + 62.5/100\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    # Starting with the final amount of bricks left after all removals\n    remaining_bricks = 4\n\n    # Applying the inverse operations in reverse order to find the initial amount\n\n    # Joel removes 2 less than half, adding 2 and then doubling the amount to reverse the operation\n    before_joel = (remaining_bricks + 2) * 2\n\n    # Valerie removes 3 less than half, adding 3 and then doubling the amount to reverse the operation\n    before_valerie = (before_joel + 3) * 2\n\n    # Ethan removes 1 less than half, adding 1 and then doubling the amount to reverse the operation\n    initial_bricks = (before_valerie + 1) * 2\n\n    return initial_bricks\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = marble_cake_price * 3\n    price_for_two_cheese_cakes = cheese_cake_price * 2\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for number in range(400, 501):\n        if (number % 3 == 1) and (number % 5 == 3) and (number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    # Number of pigs\n    pigs = 8\n    # Each pig gets one green apple\n    green_apples = pigs * 1\n    # One red apple for every two pigs to share\n    red_apples = pigs // 2\n\n    # Total apples given\n    total_apples = green_apples + red_apples\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds_fraction = 1 / 4\n    died_seeds = total_seeds * died_seeds_fraction\n    grown_seeds = total_seeds - died_seeds\n    return int(grown_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    cycle_days = 2\n    complete_cycles = total_days // cycle_days\n    remaining_days = total_days % cycle_days\n\n    # Money after complete cycles (each cycle he gains 2 pounds)\n    total_money = 100 + (complete_cycles * (10 - 8))\n\n    # Add remaining day if there's any\n    if remaining_days > 0:\n        total_money += 10  # Only deposit happens on an odd (first) day\n\n    return total_money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    cong_1 = (1, 2)\n    cong_2 = (2, 3)\n    cong_3 = (3, 4)\n    cong_4 = (4, 5)\n\n    ans = solve_congruence(cong_1, cong_2, cong_3, cong_4)\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    result = 54\n    original_number = (result * 4 - 178) / 2\n    return original_number\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!\n    opposite_ways = 2!\n\n    # 4! ways to arrange 4 people around a table\n    # If Claire and Tony are sitting opposite each other, there are 2! ways to arrange the remaining two people\n    # Subtract the ways Claire and Tony can sit opposite from the total ways\n    ans = total_ways - opposite_ways\n\n    return ans\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "网络故障，请重试"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let d represent the distance in kilometers\n    # If Nini drives at her original speed, the time taken is 8 hours\n    # If she wants to arrive 1 hour earlier, the time taken is 7 hours\n    # The speed increase is 5 km/h to achieve this\n    # Let s represent the original speed\n    \n    # We set up two distance equations:\n    # d = s * 8          (1) - original speed and time\n    # d = (s + 5) * 7    (2) - increased speed and 1 hour less\n    \n    # We can equate the right-hand sides of the two equations since d is the same in both cases\n    # s * 8 = (s + 5) * 7\n    # Expanding\n    # 8s = 7s + 35\n    # Subtracting 7s from both sides\n    s = 35\n    \n    # Now we can find the distance by plugging the original speed into the first distance equation\n    d = s * 8\n    \n    return d\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of stickers Marry and Alexis had as m and a, respectively.\n    m, a, c = symbols('m a c')\n\n    # Given that Marry and Alexis had stickers in the ratio 7 : 5.\n    # This gives us our first equation: m / a = 7 / 5 or 5m = 7a\n    eq1 = Eq(5 * m, 7 * a)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte.\n    # This means Marry gave 0.2m and Alexis gave 0.2a to Charlotte.\n    # Charlotte's stickers increased by 80%.\n    # If Charlotte initially had c stickers, after receiving more, she has c + 0.2m + 0.2a.\n    # And the increase is equivalent to 0.8c, which gives us second equation: 0.2m + 0.2a = 0.8c\n    eq2 = Eq(0.2 * m + 0.2 * a, 0.8 * c)\n\n    # Marry had 20 stickers more than Charlotte in the end.\n    # After giving stickers away Marry has m - 0.2m and Charlotte has c + 0.2m + 0.2a.\n    # This gives us the third equation: m - 0.2m = c + 0.2m + 0.2a + 20\n    eq3 = Eq(m - 0.2 * m, c + 0.2 * m + 0.2 * a + 20)\n\n    # Now we solve the system of equations.\n    solutions = solve((eq1, eq2, eq3), (m, a, c))\n\n    # Extracting the value of Alexis' initial number of stickers.\n    return solutions[a]\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    perms = sorted(set(permutations(digits)))\n    fifth_number = perms[4]\n    return int(''.join(fifth_number))\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the price of a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # Now we set up the equations based on the information given\n    equation1 = Eq(1 * banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(1 * banana + 1 * pear, 62)   # Emily's purchase\n\n    # Solve the system of equations to find the cost of one banana and one pear\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # We only need the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 0\n    while (2 ** test_tubes) < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    num_chairs_initial = 10\n    num_chairs_final = 7\n    \n    # Distance between chairs initially, considering the spaces are between the chairs only\n    initial_spacing = total_distance / (num_chairs_initial - 1)\n    \n    # Final spacing when 3 chairs are removed and chairs are spaced out evenly again\n    final_spacing = initial_spacing * ((num_chairs_initial - 1) / (num_chairs_final - 1))\n    \n    return final_spacing\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Each brother has at least two books, so we start from 2 books for each and distribute the remaining 4 books\n    for x1 in range(2, 11):  # Brother 1\n        for x2 in range(2, 11):  # Brother 2\n            x3 = 10 - (x1 + x2)  # Brother 3\n            if x3 >= 2:  # Each brother should have at least two books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the angles\n    angle1, angle2 = symbols('angle1 angle2')\n    \n    # Since two angles are right angles, their measure is 90 degrees each.\n    right_angle1 = right_angle2 = 90\n    \n    # Creating the equations based on the problem statement\n    equation1 = Eq(angle1, 5 * angle2)  # one angle is five times larger than the other\n    equation2 = Eq(right_angle1 + right_angle2 + angle1 + angle2, 360)  # sum of angles in quadrilateral is 360\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (angle1, angle2))\n    \n    # The largest angle is angle1, as it is five times larger than angle2\n    return solutions[angle1]\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the count of boxes to a large number\n    min_boxes = float('inf')\n    \n    # We will try all possible combinations of small, medium and large boxes\n    for small_boxes in range(54//5 + 1):\n        for medium_boxes in range(54//7 + 1):\n            for large_boxes in range(54//10 + 1):\n                # Calculate the total apples using current combination\n                total_apples = small_boxes*5 + medium_boxes*7 + large_boxes*10\n                # If this combination gives us exactly 54 apples\n                if total_apples == 54:\n                    # Update the minimum boxes if the current combination uses fewer boxes\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    \n    # Return the smallest number of boxes he can buy\n    return min_boxes\n\n# Call the solution function and store the result in `ans`\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            other_factor = 7007 // i\n            if 10 <= other_factor < 100:\n                return i + other_factor\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    median_position = len(sequence) // 2\n    ans = sequence[median_position]\n    \n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def count_ways(steps, avoid):\n        if steps == 0:\n            return 1\n        if steps in avoid:\n            return 0\n        \n        # Ways of getting to the current step\n        ways = (count_ways(steps - 1, avoid)\n                + count_ways(steps - 2, avoid)\n                + count_ways(steps - 3, avoid))\n        \n        return ways\n\n    # Calculate the number of ways to get to the steps before the muddy step\n    ways_before_muddy = count_ways(4, [5])\n    # Calculate the number of ways after the muddy step to the top\n    ways_after_muddy = count_ways(10 - 5, [])\n\n    # Total ways will be the product of ways to get to muddy step and ways to get to top from there\n    total_ways = ways_before_muddy * ways_after_muddy\n\n    return total_ways\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    miles = miles_per_hour * hours\n    \n    # Conversion from miles to kilometers\n    kilometers_per_mile = 1.60934\n    kilometers = miles * kilometers_per_mile\n    \n    return kilometers\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n\n    # When there is one entrance\n    time_with_one_entrance = 16\n    total_visitors = visitors_per_minute * time_with_one_entrance\n    rate_with_one_entrance = check_in_per_entrance_per_minute\n\n    # When there are two entrances\n    rate_with_two_entrances = check_in_per_entrance_per_minute * 2\n    time_with_two_entrances = total_visitors / rate_with_two_entrances\n    \n    return int(time_with_two_entrances)\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    bottles_used = remaining_cookies / cookies_per_bottle\n\n    return int(bottles_used)\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    equation1 = Eq(frogs_begin - dragonflies_begin, 9)\n    equation2 = Eq(frogs_begin - (11 - dragonflies_begin), dragonflies_begin + (10 - frogs_begin))\n    \n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n    \n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance = climb_distance - slide_distance\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n\n    return days\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 1000 - (1000 % 25) - 25\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming the cost for each item mentioned is provided\n    metro_ticket_cost = 2  # Cost of metro ticket both ways per person\n    coffee_cost = 3        # Cost of a cup of coffee per person\n    game_entry_fee = 12    # Entry fee to the game per person\n\n    # Richard's expenses\n    richard_expenses = metro_ticket_cost + coffee_cost + game_entry_fee\n\n    # Remaining amount after Richard's expenses\n    remaining_amount = 40 - richard_expenses\n\n    # Total cost per friend\n    per_friend_cost = metro_ticket_cost + coffee_cost + game_entry_fee\n\n    # Maximum number of friends Richard can treat\n    max_friends = remaining_amount // per_friend_cost\n\n    return max_friends\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # The number of cookies she baked was 24 more than the number of muffins\n    eq1 = Eq(cookies, muffins + 24)\n\n    # After selling 3/4 of her muffins and 5/8 of her cookies, she had 74 cookies and muffins left in total\n    eq2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        if A % 5 != 0:  # The number is not divisible by 5\n            number = int(f\"123{A}456{A}789{A}0\")  # It's an even number, so last digit is 0\n            if sum(map(int, str(number))) % 9 == 0:  # The number is divisible by 9\n                return A\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(2, n + 1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    # We can see that this is a series of alternating subtraction and addition.\n    # Starting from 48 and ending in 40, with alternating subtraction and addition.\n    ans = 0\n    add = False\n    for i in range(48, 39, -1):  # from 48 down to (and including) 40\n        if add:\n            ans += i\n        else:\n            ans -= i\n        add = not add  # switch between addition and subtraction\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of the driver to the cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n\n    # The cyclist takes 143 minutes more than the driver\n    extra_time_cyclist = 143\n\n    # Let the time taken by the driver be x minutes\n    # Then the time taken by the cyclist is x + extra_time_cyclist\n    # Since speed = distance / time, the times are inversely proportional to the speeds\n    # Therefore, the ratio of the times taken is the inverse of the ratio of the speeds\n    # (driver's time) / (cyclist's time) = (cyclist's speed) / (driver's speed)\n    # x / (x + 143) = 2 / 13\n    # Cross-multiplying gives:\n    # 13x = 2(x + 143)\n    # 13x = 2x + 286\n    # 11x = 286\n    # x = 286 / 11\n    driver_time = 286 / 11\n\n    return driver_time\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is correct, then all statements will be correct,\n    # but statement 2 says none is correct which contradicts with statement 1\n    # So statement 1 cannot be correct.\n    \n    # If statement 2 is correct, then itself claims none is correct, which is a contradiction.\n    # So statement 2 cannot be correct.\n    \n    # If statement 3 is correct, then one statement above it should be correct,\n    # but we have already determined both are incorrect. \n    # So statement 3 cannot be correct.\n    \n    # If statement 4 is correct, then all above statements would be correct,\n    # which is a contradiction as we already concluded above statements are false.\n    # So statement 4 cannot be correct.\n    \n    # If statement 5 is correct, it implies that all statements above are incorrect.\n    # This is true because it doesn't conflict with the condition of the problem.\n    # Therefore, the only valid statement that can be true is statement 5.\n\n    return 5\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways_to_choose = trains + cars + flights\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    \n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of coins as \"coins\".\n    coins = symbols('coins')\n\n    # One quarter of the coins are showing heads initially\n    heads_initial = coins / 4\n\n    # After flipping two more coins, the heads become 1/3 of the total\n    heads_after = (coins / 4) + 2\n    # Now the heads are supposed to be 1/3 of the total\n    heads_final = coins / 3\n\n    # We set up the equation where after flipping two coins the heads are 1/3 of the total\n    equation = Eq(heads_after, heads_final)\n\n    # Solve for \"coins\"\n    solutions = solve(equation, coins)\n\n    # Filter positive solution (since the number of coins cannot be negative)\n    num_coins = [s for s in solutions if s.is_positive]\n\n    return num_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    from math import factorial\n\n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Choose 3 positions for the comedy shows from the spaces between singing shows, including the ends\n    positions_for_comedy = nCr(6, 3)\n    \n    # Permute the 5 singing shows and 3 comedy shows\n    permutation_of_shows = nPr(5, 5) * nPr(3, 3)\n    \n    # Multiply the positions by the permutations\n    total_ways = positions_for_comedy * permutation_of_shows\n\n    return total_ways\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_index = len(values) // 2\n    return values[middle_index]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    return (12 + 9) * 2\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # The recurring sequences are as follows:\n    # 0.2222...\n    # 0.0303...\n    # 0.0040.0040...\n    # 0.00050.00050...\n    # 0.000060.000060...\n    \n    # The sum of digits for each recurring sequence is:\n    sequence_sums = [2, 3, 4, 5, 6]\n\n    # Since the sequences start recurring at different positions,\n    # we need to consider their sum position by position.\n    sum_digits = 0\n\n    for i in range(1, 2101):  # Checking 2100 positions after the decimal\n        digit_sum = 0\n        for j in range(len(sequence_sums)):\n            # Check if the current position is a recurring digit for this sequence\n            if i % (j + 1) == 0:\n                digit_sum += sequence_sums[j]\n        # Add the calculated digit sum to the total sum\n        sum_digits += digit_sum\n\n    return sum_digits\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n\n    equation = Eq((original_number * 5 + 7) / 4, 8)\n\n    solutions = solve(equation, original_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    smallest_even_number = float('inf')\n\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # The number is even if the last digit is even\n            number = int(''.join(map(str, perm)))\n            smallest_even_number = min(number, smallest_even_number)\n    \n    return smallest_even_number\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # For a circular arrangement, (n-1)! is the number of arrangements to eliminate rotational symmetry\n    num_people = 6\n    empty_seats = 8 - num_people\n    \n    # Choose where to place the first person (arbitrary, to fix rotation)\n    # and arrange the remaining (num_people - 1) in the remaining seats\n    ans = factorial(num_people - 1) * factorial(empty_seats)\n\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6*(7 - x), 37)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_a_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_a_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_distance = 2000\n    \n    distance = (percentage / 100) * total_distance\n    return distance\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    \n    num_kayaks = (students + kayak_capacity - 1) // kayak_capacity\n    \n    return num_kayaks\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let x be the total number of steps of the escalator.\n    # If Peter walks at 1 step per second, the escalator moves x - 10 steps in 10 seconds.\n    # If Peter walks at 2 steps per second, the escalator moves x - 16 steps in 8 seconds (since he takes 16 steps to reach the top).\n    # The speed of the escalator (in steps per second) is the same in both cases.\n    \n    # Equations based on speed of escalator:\n    # (x - 10) / 10 = (x - 16) / 8\n    # 8(x - 10) = 10(x - 16)\n    \n    # Solving the equation for x:\n    x = symbols('x')\n    equation = Eq(8 * (x - 10), 10 * (x - 16))\n    solution = solve(equation, x)\n    ans = int(solution[0])\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Price of chocolate bar in pence\n    chocolate_price = 72\n    \n    # Price of each balloon in pence\n    balloon_price = 20\n    \n    # Amount paid in pence (￡10 note)\n    amount_paid = 10 * 100\n    \n    # Change received in pence (￡3.88)\n    change_received = 3 * 100 + 88\n    \n    # Total cost of items in pence\n    total_cost = amount_paid - change_received\n    \n    # Amount spent on balloons in pence\n    spent_on_balloons = total_cost - chocolate_price\n    \n    # Number of balloons bought\n    num_balloons = spent_on_balloons // balloon_price\n\n    return num_balloons\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import solve, symbols, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    \n    # Given equation: 3a = sqrt(3x)\n    equation = 3 * a - sqrt(3 * x)\n    \n    solved_values = solve(equation, x)\n    \n    # Only need first solution as there should be only one positive value for x\n    x_value = solved_values[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    spent_money = total_money * spent_fraction\n    remaining_money = total_money - spent_money\n    \n    # Let's denote the cost of each cupcake as c and each slice of pizza as p.\n    # According to the question, we have:\n    # 5c + 6p = spent_money (1)\n    # 3p = 2c (2) -> p = (2/3)c\n    # Substituting p from (2) into (1), we get:\n    # 5c + 6 * (2/3)c = spent_money\n    # 5c + 4c = spent_money\n    # 9c = spent_money\n    # c = spent_money / 9\n    \n    cost_per_cupcake = spent_money / 9\n    max_cupcakes = remaining_money // cost_per_cupcake\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # let the youngest dwarf age be x years, then ages are x, x+1, x+2, ..., x+6 for the seven dwarfs\n    # According to the problem, the sum of ages of the youngest three dwarfs (x, x+1 and x+2) is 42\n    # So, x + (x + 1) + (x + 2) = 42\n    # that simplifies to 3x + 3 = 42\n    # solving for x gives us x = (42 - 3) / 3\n    youngest_dwarf_age = (42 - 3) / 3\n    \n    # Now, the ages of the oldest three would be (x + 4), (x + 5) and (x + 6)\n    # We need to find the sum of these ages\n    # So, (x + 4) + (x + 5) + (x + 6) = 3x + 15\n    # We already know that x = youngest_dwarf_age\n    sum_oldest_three = (3 * youngest_dwarf_age) + 15\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        if len(set(str(num))) == len(str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    three_digit_numbers = permutations(digits, 3) # Get all permutations of length 3\n    return len(list(three_digit_numbers))\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    num = 2\n    while len(str(num)) <= 5:\n        if floor(sqrt(num)) == sqrt(num):\n            count += 1\n        num = num * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    # The common difference can be calculated as the second term minus the first term\n    difference = 24 - 15\n\n    # The formula to find the nth term in an arithmetic sequence is:\n    # last_term = first_term + (num_terms - 1) * difference\n    \n    # Solving for the number of terms, we get:\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    n = 1\n    while True:\n        if (2240 / n) == int((2240 / n) ** 0.5) ** 2:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n\n    # When a piece of paper is cut into three, it increases the count by 2\n    # Let x be the number of pieces cut\n    # Therefore, x * 2 (each piece cut increases the count by 2) \n    # + initial_pieces should be equal to final_pieces\n\n    # Rearrange the equation initial_pieces + x * 2 = final_pieces to find x\n    x = (final_pieces - initial_pieces) // 2\n\n    return x\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.7\n    swimming_boys = total_pupils - swimming_pupils\n    swimming_boys_cannot_swim = swimming_boys * 0.4\n    swimming_boys_can_swim = swimming_boys - swimming_boys_cannot_swim\n    swimming_pupils -= swimming_boys_can_swim\n    girls = swimming_pupils - 200\n\n    return total_pupils - girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_ratio\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # If 6 workers can produce 120 parts in 4 minutes,\n    # then one worker would produce 120/6 parts in 4 minutes.\n    parts_per_worker = 120 / 6\n    \n    # Since we're dealing with 3 workers now, they would produce 3 times\n    # the number of parts one worker would in the same 4 minutes.\n    parts_per_3_workers_in_4_minutes = parts_per_worker * 3\n\n    # To find out how many parts 3 workers can produce in 10 minutes,\n    # we can set up a ratio because the speed is constant.\n    parts_per_3_workers_in_10_minutes = (parts_per_3_workers_in_4_minutes / 4) * 10\n    \n    return int(parts_per_3_workers_in_10_minutes)\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation based on the total amount of sugar\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    # Equation representing the total mass of 3 sacks of rice and 3 packets of oatmeal\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n\n    # Equation representing that each sack of rice is twice as heavy as a packet of oatmeal\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    # Solving the system of equations to find the mass of each sack of rice\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price_minus_first_discount = 32\n    further_discount = 4\n    final_price = original_price_minus_first_discount - further_discount\n    \n    first_discount = 0.20\n    original_price = original_price_minus_first_discount / (1 - first_discount)\n    \n    total_discount_amount = original_price - final_price\n    total_discount_percentage = (total_discount_amount / original_price) * 100\n    \n    return total_discount_percentage\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n    \n    first_operation = custom_operation(2, 3)\n    ans = custom_operation(first_operation, 4)\n\n    return ans\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    # Initial count is 1, as 200 can be written as 200 itself.\n    count = 1\n    \n    # Since we need equal parts, we only need to find divisors of 200 up to half of it.\n    # We start from 2, because 1 would mean 200 itself which we already counted.\n    for i in range(2, 200//2 + 1):\n        # If i is a divisor of 200, it means we can write 200 as a sum of equal parts of i.\n        if 200 % i == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let 'j' be the mass of the empty jar, and 'c' be the mass of one chocolate.\n    # From the given information, we have two equations:\n    # j + 5c = 185   (1)\n    # j + 17c = 317  (2)\n\n    # Now we can solve these two equations to find 'j' and 'c'\n    # Subtract equation (1) from equation (2):\n    # (j + 17c) - (j + 5c) = 317 - 185\n    # j + 17c - j - 5c = 132\n    # 12c = 132\n    # c = 132 / 12\n    c = 132 / 12\n\n    # Now that we have the mass of one chocolate, we can find 'j' using equation (1):\n    # j = 185 - 5c\n    j = 185 - 5 * c\n\n    # Finally, the mass of the jar with 10 chocolates in it:\n    # j + 10c\n    result = j + 10 * c\n    return result\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # The perimeter of the field minus the corners (since each corner has a wheat)\n    perimeter = 2 * (144 + 204) - 4\n\n    # Total wheat along perimeter, not including corners\n    wheat_along_sides = 116 - 4\n\n    # Distance between every 2 wheat is the perimeter divided by the number of spaces between wheat\n    distance_between_wheat = perimeter / wheat_along_sides\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Since one cat takes 10 minutes to catch a fish,\n    # 5 cats would also take 10 minutes to catch 5 fish,\n    # because they can catch fish simultaneously.\n    time_minutes = 10\n    return time_minutes\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the number of sweets Lana had and m be the number of sweets Mark had\n    l, m = symbols('l m')\n\n    # At first, they had 674 sweets together\n    equation1 = Eq(l + m, 674)\n    \n    # After Lana gave away 1/3 of her sweets and Mark ate 34 sweets, they had the same number\n    equation2 = Eq(l - (l / 3), m - 34)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (l, m))\n\n    # Calculate how many more sweets Lana had than Mark at first\n    lana_sweets = solutions[l]\n    mark_sweets = solutions[m]\n    ans = lana_sweets - mark_sweets\n\n    return ans\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    multiplied_by = 1 / 9\n    divided_by = 4\n    subtracted_by = 3\n\n    number = (result * multiplied_by - subtracted_by) * divided_by\n\n    return number\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # let the total holiday be x days\n    # given that he spends half working\n    # half of the remaining relaxing and reading (1/4 of the total)\n    # 4 days at a friend's and last 2 weeks (14 days) attending summer camp\n    \n    # we can set up the equation as:\n    # x / 2 (working) + x / 4 (reading and relaxing) + 4 (friends) + 14 (camp) = x (total days)\n    # combining terms we get 3x/4 + 18 = x\n    # solving for x we get x = 72\n    \n    total_days = 72  # because 18 is 1/4th of the total time\n    return total_days\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    total_weeks = 4\n    combined_rate_per_week = total_people / total_weeks\n\n    gloria_rate_per_week = combined_rate_per_week - ellie_rate\n    gloria_time_weeks = total_people / gloria_rate_per_week\n\n    return gloria_time_weeks\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)\n\n    # Wheat are planted at the corners and along the sides.\n    # 4 wheat are on the corners, so we subtract them from total to get the wheat\n    # planted along the sides.\n    side_wheat = 116 - 4\n\n    # The distance between every 2 wheat is the perimeter divided by the number of intervals.\n    # The number of intervals is the number of side wheat - 1.\n    distance = perimeter / (side_wheat - 1)\n\n    return distance\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    frac = 3/8\n    whole_number = 48\n    ans = frac * whole_number\n    return ans\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice_A = 15 * 0.40\n    total_rice_mixture = total_weight * 0.28\n    total_rice_B = total_rice_mixture - total_rice_A\n\n    percent_rice_B = (total_rice_B / 60) * 100\n    return percent_rice_B\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    # The digits already specified\n    B, D = 2, 0\n    \n    # We have a six-digit number ABCDEF and we know B=2 and D=0\n    # So we need to find the other digits such that 5 * ABCDEF = 6 * EFABCD\n    \n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Ensure all digits are distinct\n                    if len({A, B, C, D, E, F}) == 6:\n                        # Constructing the numbers\n                        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n\n                        # Check if the equation holds true\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            # Construct FACE using the found values\n                            FACE = int(f\"{F}{A}{C}{E}\")\n                            return FACE\n    return None\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    ml_per_minute = 15\n    minutes_per_hour = 60\n    hours = 2\n    ml_to_litres = 1 / 1000\n\n    total_ml = ml_per_minute * minutes_per_hour * hours\n    total_litres = total_ml * ml_to_litres\n\n    return total_litres\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2*10 + 5*5 + 4*0.20\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    barbara_speed = 60  # metres per minute\n    catherine_speed = 45  # metres per minute\n    catherine_behind = 60  # metres\n    \n    # When Barbara reaches the mall, let the time taken for Barbara be t minutes.\n    # Distance covered by Barbara in t minutes = barbara_speed * t\n    # At the same time Catherine covers = catherine_speed * t\n    # Barbara covers 60 meters more than Catherine, so\n    # barbara_speed * t = catherine_speed * t + 60\n\n    # Solving for t gives us:\n    t = catherine_behind / (barbara_speed - catherine_speed)\n    \n    # Now, we can find the distance to the mall by finding the distance\n    # Barbara travels in time t.\n    distance_to_mall = barbara_speed * t\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the numbers be a, b, c, d where a > b > c > d\n    a, b, c, d = symbols('a b c d')\n\n    # Equation for the sum of the smallest number d and the average of the other three numbers\n    equation1 = Eq(d + (a + b + c)/3, 39)\n\n    # Equation for the sum of the largest number a and the average of the other three numbers\n    equation2 = Eq(a + (b + c + d)/3, 51)\n\n    # We need to add condition that all numbers are distinct positive integers\n    # Having the equations, we need to express everything in terms of 'a'\n    # and maximize 'a' under the conditions given.\n    \n    # Combine both equations to eliminate 'a'\n    combined = Eq(equation2.lhs - equation1.lhs, equation2.rhs - equation1.rhs)\n    eq_simplified = solve(combined, a)[0]\n\n    # Considering the numbers are distinct and positive, we start with a=52 (as it must be higher than 51)\n    # and decrease 'a' until we find a solution where all numbers are distinct positive integers.\n    \n    # Since our numbers are in descending order, we can limit our search to 'a' values that are at least 4 greater than 'd'\n    for largest in range(52, 3, -1):\n        # Solve equations to find 'd' for current value of 'a' (largest).\n        solutions = solve([equation1.subs(a, largest), equation2.subs(a, largest)], (b, c, d))\n\n        # Check for conditions that all numbers are distinct positive integers.\n        if all(isinstance(value, (int, float)) for value in solutions.values()):\n            b_val, c_val, d_val = sorted(solutions.values())\n            # If solution meets the conditions, return the largest number 'a'\n            if d_val > 0 and b_val > c_val > d_val and b_val != largest and c_val != largest and d_val != largest:\n                return largest\n    \n    return None\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    total_money = 200\n    ratio_A_to_B = Eq(A / B, 4/3)\n    A_has_more_than_C = Eq(A, C + 20)\n    total_amount = Eq(A + B + C, total_money)\n    \n    solutions = solve((ratio_A_to_B, A_has_more_than_C, total_amount), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_for_one_plate = 3\n    total_time_available = 18\n\n    num_plates = total_time_available // time_for_one_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    num = 471471471471\n    denom = 157157157157\n    ans = num // denom\n    return ans\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nini_age, dad_age = symbols('nini_age dad_age')\n    \n    equation1 = Eq(dad_age, nini_age + 25)\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n    \n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n    \n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    # Initialize counter for students facing the teacher\n    facing_teacher = 0\n    \n    # Traverse through all 50 students\n    for student in range(1, 51):\n        # Check if the student is multiple of 4 or 6\n        # If it is, the student will end up facing backwards\n        if student % 4 == 0 or student % 6 == 0:\n            continue\n        # Otherwise, the student is still facing the teacher\n        facing_teacher += 1\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 / 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 / 9\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reverse_num = int(str(num)[::-1])\n            if num != reverse_num and isprime(reverse_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    initial_value = 140\n    final_value = 87.5\n\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    total_apples = 29\n    min_apples_for_one_student = 3\n    \n    # Since at least one student must get at least 3 apples, we give 3 apples to one student upfront.\n    remaining_apples = total_apples - min_apples_for_one_student\n\n    # Now we can give at least 1 apple to each remaining student.\n    # After assigning 3 apples to one student, we have remaining_apples to distribute such that\n    # each student gets at least 1 apple. \n    # This is equivalent to finding the least n such that:\n    # n + (n-1) + ... + 1 <= remaining_apples\n    # which simplifies to:\n    # n*(n+1)/2 <= remaining_apples\n\n    n = 1\n    while n * (n + 1) // 2 <= remaining_apples:\n        n += 1\n\n    # Since we already gave out 3 apples to one student, we must subtract 1 from our count\n    class_size = n - 1\n    \n    return class_size\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # If the alcoholic is not at two of the bars, he must be at the third bar.\n    # The probability that he is in the third bar, given that he is not in the other two, is 100%.\n    probability = 1\n\n    return probability\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_future_age = solutions[cousin] + 4\n    return cousin_future_age\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_first_catch = 100\n    caught_fish_second_catch = 100\n    marked_fish_second_catch = 16\n\n    estimated_fish_in_pond = (marked_fish_first_catch * caught_fish_second_catch) / marked_fish_second_catch\n    \n    return estimated_fish_in_pond\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    # Initial amount of blue and green balls\n    equation1 = Eq(green + blue, 140)\n\n    # After removing 2/5 of the blue balls and 28 green balls, they are equal\n    equation2 = Eq(green - 28, blue - (2/5)*blue)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let d be the distance between them when they set off.\n    # Let x be the distance Nancy walks. Then, Randy walks x + 10 meters.\n    # According to the problem, for every 2m Nancy walks, Randy walks 3m.\n    # So, we have the proportion: 2/3 = x/(x + 10).\n    # Cross-multiplying gives us 2x + 20 = 3x.\n    # Solving for x gives us x = 20.\n    # Distance between them when they set off is Nancy's distance plus Randy's.\n    # Randy's distance is Nancy's distance plus 10.\n    nancy_distance = 20\n    randy_distance = nancy_distance + 10\n    total_distance = nancy_distance + randy_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum_1 = sum(range(10, 21, 2))\n    sum_2 = sum(range(9, 20, 2))\n    ans = sum_1 - sum_2\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(bronson, 2 * ali)\n    equation2 = Eq(ali, (bronson + charlie) / 2 - 5)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let N = 0.142424... (repeating decimal)\n    N = 0.20141414141414\n    \n    # Multiply N by 10,000 to shift the repeating part four decimal places to the left:\n    # 10,000N = 2014.14141414...\n    # Subtract N from 10,000N to get rid of the repeating part:\n    # 10,000N - N = 2014.14141414... - 0.20141414141414...\n    # 9,999N = 2014\n    # N = 2014 / 9,999\n    N = 2014 / 9999\n    \n    # Given that x/9900 = N, we find x:\n    # x/9900 = 2014 / 9,999\n    # x = (2014 / 9,999) * 9900\n    x = (2014 / 9999) * 9900\n    return int(x)\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + sister + 10 + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_but_failed_first = 3\n    \n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_but_failed_first)\n    \n    return passed_only_first_exam\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(100000, 1000000):\n        if str(i)[5] == '2':\n            new_number = int('2' + str(i)[:-1])\n            if new_number == i // 3:\n                return i\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # Since the number must be even, the last digit must be 0, 2, 4, 6, or 8\n    for last_digit in [0, 2, 4, 6, 8]:\n        for first_digit in range(1, 10):  # First digit can't be 0\n            # The second digit is the leftover to make the sum of digits equal to 8\n            second_digit = 8 - first_digit - last_digit\n            # Make sure the second digit is not the same as the first or last\n            # and is a valid digit (0-9)\n            if 0 <= second_digit <= 9 and second_digit != first_digit and second_digit != last_digit:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    remaining_bars = total_bars % people\n    return remaining_bars\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n\n    # Ensure the number is between 500 and 1000\n    while num < 500:\n        num += 5 * 8 * 9\n\n    return num\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            if product % 100 == 0 and product // 100 < 100 and product // 100 > 9:\n                return ab\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_numbers = 0\n    # Each digit appears in each place (hundreds, tens, ones) 2 times in the 6 permutations.\n    sum_of_digits_in_one_place = 2 * (a + b + c)\n    # The sum of all numbers is sum of digits in one place times 100 (hundreds place) plus\n    # times 10 (tens place) plus times 1 (ones place).\n    sum_of_numbers = sum_of_digits_in_one_place * (100 + 10 + 1)\n\n    return sum_of_numbers\n\n# Assuming a, b, and c are defined\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    decimal = round(fraction, 2)\n    return decimal\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "网络故障，请重试"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_needed = 300 / rate_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    cabins_needed = (students + capacity - 1) // capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the oranges and apples\n    oranges, apples = symbols('oranges apples')\n    \n    # Original number of oranges and apples is 125\n    equation1 = Eq(oranges + apples, 125)\n    \n    # She sold half of the apples and 35 oranges\n    # In the end, she had equal number of oranges and apples\n    equation2 = Eq(oranges - 35, apples / 2)\n    \n    # Find the solution for the equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n    \n    # We are interested in the number of oranges Mrs Lee had at first\n    return solutions[oranges]\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    cumulative_digits = 0\n    n = 1200\n    \n    while n > 0:\n        str_n = str(n)\n        len_n = len(str_n)\n        new_cumulative = cumulative_digits + len_n\n        \n        if new_cumulative >= 2011:\n            diff = new_cumulative - 2011\n            ans = int(str_n[len_n - diff - 1])\n            return ans\n        \n        cumulative_digits = new_cumulative\n        n -= 1\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number is 10001 (smallest 5-digit number where first and last digits are the same)\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome number is 999999 (largest 6-digit number where first and last digits are the same)\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_term = 50 // 5 * 5\n    num_terms = last_term // 5\n    sum_multiples = (num_terms * (5 + last_term)) // 2\n    return sum_multiples\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of coins as 'x'\n    x = symbols('x')\n    \n    # According to the problem:\n    # One quarter of the coins are showing heads initially\n    # Turning 2 more coins to heads makes it one third  \n    equation = Eq(1/4*x + 2, 1/3*x)\n    \n    # Solve the equation to get the number of coins\n    num_coins = solve(equation, x)\n\n    # Return the solution\n    return num_coins[0]\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet_1 = 30  # km/minute\n    speed_planet_2 = 40  # km/minute\n    time = 5  # minutes\n    # Calculate the distance traveled by each planet in 5 minutes\n    distance_planet_1 = speed_planet_1 * time\n    distance_planet_2 = speed_planet_2 * time\n    # Calculate the total distance apart 5 minutes ago\n    total_distance = distance_planet_1 + distance_planet_2\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Variables to represent the number of cars and motorbikes\n    cars, motorbikes = symbols('cars motorbikes')\n\n    # Equation1: The total count of vehicles\n    equation1 = Eq(cars + motorbikes, 140)\n\n    # Equation2: The total count of tyres (cars have 4 tyres, motorbikes have 2 tyres)\n    equation2 = Eq(4 * cars + 2 * motorbikes, 490)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (cars, motorbikes))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # There are 5 options for the first digit (1 to 5 because it cannot be 0)\n    # There are 6 options for the second digit (0 to 5)\n    # Total combinations = number of options for the first digit * number of options for the second digit\n    count = 5 * 6\n    return count\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26  # Common difference of the sequence\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / ratio_sum) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    sols = solve((eq1, eq2, eq3), (a, n))\n\n    valid_n = [sol[n] for sol in sols if sol[n] > 0]\n\n    for num in valid_n:\n        if (190 - a) % num == 0 and (137 - (a+4)) % num == 0 and (101 - (a+6)) % num == 0:\n            remainder = 299 % num\n            return remainder\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_height = 11\n    climb_rate = 3\n    slide_rate = 1\n    net_climb = climb_rate - slide_rate\n    \n    # Calculate the number of days it takes for the snail to climb just before reaching the top\n    days = (total_height - climb_rate) // net_climb\n    \n    # Add an extra day for the snail to climb out of the burrow completely\n    if (total_height - climb_rate) % net_climb > 0:\n        days += 1\n    days += 1  # This is for the final climb\n    \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    weight_per_box = 8\n\n    total_boxes = total_avocados // weight_per_box\n\n    return total_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n    original_number = (result - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    i = 1\n    while True:\n        if i % 2 == 1 and i % 13 == 1:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2  # Bud spends 2p\n    fraction_of_total = 1/4  # It is one-quarter of her money\n\n    # The total amount of money Bud had before spending is the amount spent divided by the fraction\n    total_money = spent / fraction_of_total\n\n    return total_money\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    largest_sum = 0\n    for y in range(2, 200):\n        if isprime(y):\n            x = (200 + y)/(2 + y)\n            if x.is_integer():\n                x = int(x)\n                if isprime(x) and x != y:\n                    largest_sum = max(largest_sum, x + y)\n    return largest_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "import math\n\ndef solution():\n    total_nums = math.factorial(6)\n    identical_2s = math.factorial(2)\n    identical_3s = math.factorial(2)\n\n    ans = total_nums // (identical_2s * identical_3s)\n    return ans\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    total_teams = 8\n    games_per_team = total_teams - 1\n    total_games = (total_teams * games_per_team) // 2\n\n    return total_games\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    \n    # establish the relationships between the dwarfs' heights\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(sleepy + doc, dopey + sneezy)\n\n    # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation5 = Eq(dopey, sneezy)\n    equation6 = Eq(dopey, bashful)\n    equation7 = Eq(dopey, grumpy)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # calculate the total height of the seven dwarfs\n    total_height = sum(solutions.values())\n    return total_height\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(31, 6) + Fraction(31, 5)) / (Fraction(1, 6) + Fraction(1, 5))\n    ans = result.numerator // result.denominator  # Get the whole part of the fraction\n\n    return ans\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_to_construct = 2600 / meters_per_day\n    return days_to_construct\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    permuted_numbers = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = permuted_numbers[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250  # miles\n    time_travelled = 5         # hours\n\n    speed_per_hour = distance_in_5_hours / time_travelled\n\n    time_for_3_hours = 3       # hours\n    distance_in_3_hours = speed_per_hour * time_for_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    for qiang in range(23):\n        for rory in range(23):\n            for sophia in range(23):\n                if qiang + rory == 11 and rory + sophia == 17 and sophia + qiang == 22:\n                    return max(qiang, rory, sophia)\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = last_term - first_term + 1\n\n    # Sum of an arithmetic series can be found by the formula S = n/2 * (a1 + an)\n    # The sum is even if number of terms n is even or both a1 and an are even.\n    # In this series, both a1 and an are even, hence the entire sum is even.\n\n    # If the first and last terms of an arithmetic sequence are both odd or both even,\n    # and the number of terms is even, the sum will be even\n\n    if num_terms % 2 == 0 or (first_term % 2 == 0 and last_term % 2 == 0):\n        ans = 'even'\n    else:\n        ans = 'odd'\n        \n    return ans\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    sol = solve(equation, triangle)\n\n    return sol[0]\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of gaps between trees is one less than the number of trees\n    num_gaps = 30 - 1\n    \n    # Each gap is 5 meters\n    gap_distance = 5\n    \n    # Total length is the number of gaps times the distance of each gap\n    road_length = num_gaps * gap_distance\n    \n    return road_length\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(1, 21):\n        if isprime(num):\n            if isprime(num + 6) or isprime(num - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)  # Initialize the result as a fraction of 1\n    for i in range(2, 10):\n        term = Fraction(1, 1) + Fraction(1, i)  # Represent each term as a fraction\n        result *= term\n    return result\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    if pages < 10:\n        return pages\n    elif pages < 100:\n        return (pages - 9) * 2 + 9\n    else:\n        return (pages - 99) * 3 + 90 * 2 + 9\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = -(-total_people // bus_capacity)  # Ceiling division\n\n    return buses_needed\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    x = symbols('x')\n\n    # Distance = Speed * Time\n    # Time for each segment is 30 minutes, or 0.5 hours\n    distance_first_30min = x * 0.5\n    distance_second_30min = (x - 20) * 0.5\n    distance_last_30min = (x + 10) * 0.5\n\n    # Total distance\n    equation = Eq(distance_first_30min + distance_second_30min + distance_last_30min, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    boys_more = 20\n    total_students = 0\n    for girls in range(1000):  # assuming a high upper limit\n        boys = girls + boys_more\n        total = 4*girls + 4*boys\n        if girls ** 2 + boys ** 2 == total:\n            total_students = total\n            break\n    return total_students\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Coach has a fixed position (middle), so we have 1 way to place the coach.\n    coach_ways = 1\n    \n    # The captain has two choices, to stand either on the right or left of the coach.\n    captain_ways = 2\n\n    # Other five players can arrange themselves in any order in the remaining five positions.\n    other_players_ways = factorial(5)\n\n    # Total number of ways is the product of the individual possibilities\n    total_ways = coach_ways * captain_ways * other_players_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cbrt_value = (-0.512) ** (1/3)\n    sqr_value = (-1.2) ** 2\n    return cbrt_value + sqr_value\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Since Denise got 1/5th of the prize money from singles and 1/15th from doubles,\n    # and together those amount to 360, we can calculate the total prize money\n    total_prize = symbols('total_prize')\n    equation = Eq((1/5) * total_prize + (1/15) * total_prize, 360)\n\n    # Solve the equation for the total prize money\n    ans = solve(equation, total_prize)\n\n    return ans[0]\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    p = symbols('p')\n\n    # Given conditions\n    # With 3 fish each, there are 25 fish left\n    eq1 = Eq(3*p + 25, 3*p + 1*(p + 1))\n\n    # Solve the equation\n    penguins = solve(eq1, p)\n\n    return penguins[0]\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    current_num = 1\n    term_count = 0\n    while term_count < 30:\n        for _ in range(current_num):\n            if term_count < 30:\n                sum_terms += current_num\n                term_count += 1\n            else:\n                break\n        current_num += 1\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    \n    max_other_votes = max(alice_votes, betty_votes)\n    votes_needed_for_majority = max_other_votes + 1\n    additional_votes_needed = votes_needed_for_majority - cindy_votes\n    \n    return additional_votes_needed\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n    return total_money\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculate each term of the expression separately\n    numerator1 = 7 / -3.3333333333333333  # Here, -3.\\dot{3} is represented as a repeating decimal\n    denominator1 = (-0.027)**(1/3)  # Cube root\n    term1 = numerator1 / denominator1\n    \n    numerator2 = 2**3 / 4**2\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))\n    term2 = numerator2 / denominator2\n    \n    repeating_fraction = 1 / 0.142857  # 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} is a repeating sequence representing 1/7\n    term3 = repeating_fraction + (2 * 0.3)\n    \n    # Calculate the final result by combining the terms\n    ans = term1 + term2 - term3\n    return ans\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age = 50\n    # James's age on 10th May 1997\n    james_age_1997 = 20\n    # James was born in 1997 - 20 years = 1977\n    # Calculate the year when Gina was born\n    gina_birth_year = 2005 - gina_age\n    # Calculate how old Gina was when James was born in 1977\n    gina_age_when_james_born = 1977 - gina_birth_year\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    total_salary = 3300\n    commission_salary = total_salary - base_salary  # This is the commission part of the salary\n    sales_at_2_percent = 25000  # Maximum sales that generate 2% commission\n    \n    # If commission is less than or equal to 2% of $25000, then it's straightforward\n    if commission_salary <= sales_at_2_percent * 0.02:\n        total_sales = commission_salary / 0.02\n    else:\n        # Sales more than $25000, $500 is from the first $25000\n        commission_salary -= sales_at_2_percent * 0.02\n        # Remaining commission is at 5%\n        sales_at_5_percent = commission_salary / 0.05\n        total_sales = sales_at_2_percent + sales_at_5_percent\n\n    return total_sales\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_team = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_two = total_height_of_team - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n    return average_height_of_two\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of marbles Ryan and Audrey have\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio condition 2:7\n    initial_condition = Eq(ryan / audrey, 2/7)\n    \n    # Final ratio condition (ryan + 20)/(audrey - 80) = 1/3\n    final_condition = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solve the equations\n    solution = solve((initial_condition, final_condition), (ryan, audrey))\n\n    # Get the number of marbles Audrey had at first\n    return solution[audrey]\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing the tests\n    p1 = 0.4  # passing the first time\n    p2 = 0.5  # passing the second time given the first test failed\n    p3 = 0.3  # passing the third time given the second test failed\n\n    # Since these are independent events use the complementary probabilities for failing\n    q1 = 1 - p1  # failing the first time\n    q2 = 1 - p2  # failing the second time given the first test failed\n\n    # Probability of passing before the fourth test:\n    #  Pass on the first try OR fail first then pass on the second try OR fail first two then pass on the third try\n    probability_pass_before_fourth = p1 + (q1 * p2) + (q1 * q2 * p3)\n\n    return probability_pass_before_fourth\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_AB = 2\n    routes_BC = 3\n    total_routes = routes_AB * routes_BC\n    return total_routes\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digit_increase = 9  # from single to double digits etc.\n    current_digit_len = 1  # starting with single-digit page numbers\n\n    while digits > digit_increase * current_digit_len:\n        digits -= digit_increase * current_digit_len\n        pages += digit_increase\n        digit_increase *= 10\n        current_digit_len += 1\n\n    pages += digits // current_digit_len\n\n    return pages + 1  # +1 since the last page is only partially counted otherwise\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    hours_to_complete = total_pieces / rate_per_hour\n\n    return hours_to_complete\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (first_term + last_term) * num_terms / 2\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grandpa_age = symbols('grandpa_age')\n    equation = Eq(grandpa_age / 4 + 32, grandpa_age - 22)\n\n    age = solve(equation, grandpa_age)\n\n    return age[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n\n    # Starting from a 1x1 grid and increasing\n    for layer in range(1, 1 + boys_more_than_girls * 2, 2):\n        boys = layer * 4 - 4 if layer != 1 else 1\n        girls = (layer + 1) ** 2 - boys\n        total_students += boys + girls\n\n        if boys - girls == boys_more_than_girls:\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    zeros = 0\n    while n > 0:\n        n //= 5\n        zeros += n\n    return zeros\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples = 0\n    for a in range(1, 48):\n        for b in range(a+1, 48):\n            for c in range(b+1, 48):\n                for d in range(c+1, 48):\n                    if a+b+c+d == 48:\n                        max_apples = max(max_apples, b)\n    return max_apples\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = 0\n    days = 0\n    while total_climbed < 18:\n        days += 1\n        if days != 6:\n            total_climbed += 7\n        else:\n            total_climbed += 3\n        if total_climbed < 18:\n            # Since we don't know how much it slides down, we temporarily store it as a variable\n            slide_down = symbols('slide_down')\n            # The next day, the snail continues to climb, but we don't know if it will reach the top\n            # So let's calculate the total climb until the start of the 6th day (5 days worth of climbing)\n            if days < 6:\n                total_climbed -= slide_down\n            # If the snail is already at the top on the 6th day or anytime after, it won't slide down anymore\n            elif total_climbed >= 18:\n                break\n    # We now need to solve the equation for the slide down value (only until the 5th night)\n    # Total climb after 5th day should be 18, considering the slide down\n    equation = Eq(7*5 - slide_down*5 + 3, 18)\n    solution = solve(equation, slide_down)\n    return solution[0]\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Time taken by Eddie, Jack, Rose and Mary\n    times = [1, 2, 5, 10]\n    max_time = 0\n\n    # Algorithm: Send the two fastest people first, then send the fastest back.\n    # Send the two slowest ones next, and again send the fastest back. Repeat this procedure.\n    \n    # First, Eddie(1 min) and Jack(2 min) go, Eddie comes back.\n    # Second, Rose(5 min) and Mary(10 min) go, Jack(2 min) goes back.\n    # Third, Eddie(1 min) and Jack(2 min) go again.\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n    \n    # Sequence of events\n    max_time += times[1]  # Eddie and Jack cross\n    max_time += times[0]  # Eddie returns\n    max_time += times[3]  # Rose and Mary cross\n    max_time += times[1]  # Jack returns\n    max_time += times[1]  # Eddie and Jack cross again\n    \n    return max_time\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 2):\n        ans += i**2 - (i + 1)**2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the original width as w and the original length as l.\n    w, l = symbols('w l')\n\n    # After increasing the length by 12, the new length is l+12 and the perimeter is 38.\n    # The perimeter of a rectangle is 2*(width + length).\n    # So the equation for the perimeter of the new rectangle is 2*(w + (l + 12)) = 38.\n    equation = Eq(2*(w + (l + 12)), 38)\n\n    # Let's solve the equation to find the relationship between w and l.\n    # We'll express w in terms of l, and since we want to find the perimeter of the original rectangle,\n    # we'll then calculate it using the original dimensions, which will be 2*(w + l).\n    solution = solve(equation, w)\n    w_solution = solution[0]  # This will give us width in terms of length.\n\n    # Now substitute w in terms of l back into the perimeter formula for the original rectangle\n    original_perimeter = 2 * (w_solution + l)\n\n    # But we have two unknowns and one equation. However, the problem has one unique solution.\n    # We have a linear relationship, so we can select an arbitrary value for l to find the perimeter.\n    # For simplicity, we can even select l=0, which means original_width = w_solution with l=0.\n    arbitrary_l = 0\n    perimeter_result = original_perimeter.subs(l, arbitrary_l)\n    return perimeter_result\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    \n    # There are 4 students and we want to find the number of ways\n    # to arrange them in a line, which is a permutation of 4 items.\n    ans = factorial(4)\n    \n    return ans\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial as fact\n\n    # Since rotating the table yields the same order, we fix one person and arrange the others\n    # There are 6 remaining seats to arrange 6 people (7 people in total and 1 fixed)\n    num_ways = fact(6)  # 6! arrangements for the remaining people\n\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Jenny has three choices for the first day: chocolate (C), peaches (P), and strawberries (S).\n    # Since she eats chocolate on the first day, she has two choices for the second day: P or S.\n    # For the third day, Jenny again has two choices, which cannot be the same as the second day.\n    \n    # If P is chosen for the second day, S will be for the third day, and vice versa.\n    # So, the pattern for the three days will be either CSP or C S.\n    \n    # Therefore, there are 2 ways for the second day and for each way of the second day, \n    # there are 2 ways for the third day. \n    # The total number is 2 * 2 = 4.\n\n    return 2 * 2\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since the order of the numbers does not matter (1+7 is the same as 7+1),\n    # we can just calculate the number of positive integers less than 8/2 = 4.\n    # So we can pair up each number from 1 to 3 with its complement to make 8.\n    num_ways = (8 // 2) - 1 \n    \n    return num_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    remaining_after_tv = 1 - (5/9)\n    remaining_after_table = remaining_after_tv * (1 - (3/4))\n    salary_left = 160\n    salary = salary_left / remaining_after_table\n    tv_cost = salary * (5/9)\n    return tv_cost\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earning = 70\n    number_of_working_days = 6\n\n    total_earning = average_daily_earning * number_of_working_days\n\n    return total_earning\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n    \n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent John's current age, and e represent Emma's current age\n    j, e = symbols('j e')\n\n    # In 3 years, John will be j+3 and Emma will be e+3\n    # The sum of their ages will be 27\n    equation1 = Eq(j + 3 + e + 3, 27)\n\n    # Emma's age is the difference between her own and John’s ages\n    equation2 = Eq(e, j - e)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, e))\n\n    # Return Emma's age\n    return solutions[e]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n\n    equation1 = Eq(dogs, 3 * children)\n    # Assuming each child has 2 legs and each dog has 4 legs\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present = 18\n    total = present / (1 - 2/5)\n    return int(total)\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    tom_speed = 48          # Tom's speed in km/h\n    jack_speed = 50         # Jack's speed in km/h\n    time_difference = 3     # Time difference of their start in hours\n    time_to_meet = 5        # Time after Jack started, they are 15 km apart in hours\n    \n    # Calculate the distance Tom travels until they are 15 km apart\n    tom_distance = tom_speed * (time_difference + time_to_meet)\n    \n    # Calculate the distance Jack travels until they are 15 km apart\n    jack_distance = jack_speed * time_to_meet\n    \n    # Total distance between A and B is the sum of distances, plus 15 km between them\n    total_distance = tom_distance + jack_distance + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) // (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8  # Rearrangement is not necessary in Python as it follows the associative property of addition.\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_people be the total number of people who took the survey\n    total_people = symbols('total_people')\n\n    # water_fraction * total_people = size of the 'Water' section on the pie chart in degrees\n    water_fraction = (36 / 360)\n    \n    # tea_fraction is given as one quarter of the total people\n    tea_fraction = 1/4\n    \n    # seven_people chose coffee, and this is not given as a fraction or percentage, just a value\n    seven_people = 7\n    \n    # cola_fraction is 30% which is 0.3 of total number of people\n    cola_fraction = 0.3\n    \n    # Equation: sum of people who chose each drink should be equal to total number of people\n    equation = Eq(tea_fraction * total_people + seven_people + cola_fraction * total_people + water_fraction * total_people, total_people)\n\n    # Solve the equation for total_people\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_centimeters = height_in_meters * 100\n    return height_in_centimeters\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_percentage = 3 / 100\n    \n    tax_amount = initial_income * tax_percentage\n    final_income = initial_income - tax_amount\n    \n    return final_income\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    saturday_cookies, sunday_cookies = symbols('saturday_cookies sunday_cookies')\n    \n    equation1 = Eq(saturday_cookies, 4 * sunday_cookies - 5)\n    equation2 = Eq(saturday_cookies, sunday_cookies + 43)\n    \n    solutions = solve((equation1, equation2), (saturday_cookies, sunday_cookies))\n    \n    return solutions[saturday_cookies]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Calculate the number of trees on each side\n    # Start from one corner and go around to avoid double-counting the corners\n    trees_on_length = (length // distance) * 2\n    trees_on_width = ((width - distance) // distance) * 2\n\n    # Total number of trees is the sum of trees on length and width sides\n    total_trees = trees_on_length + trees_on_width\n\n    # Add the starting tree\n    total_trees += 1\n\n    return total_trees\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (0.6 * 100) / 180\n    return result\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    # x is the special number\n    # y is the new number formed by moving 9 to the beginning\n    for x in range(10, 100000): # Check numbers with a reasonable upper limit\n        if x % 10 == 9:  # The units digit must be 9\n            y = int(\"9\" + str(x)[:-1])  # Take \"9\" and add the rest of the digits of x\n            if 4 * x == y:  # The condition for y being four times x\n                return x  # The special number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_volume_orange_squash = 750  # in millilitres\n    ratio_squash_to_water = 1 / 9\n    total_drink_volume = total_volume_orange_squash * (1 + ratio_squash_to_water)\n    volume_per_bottle = 1000  # millilitres in 1 litre\n\n    num_full_bottles = total_drink_volume // volume_per_bottle\n    return int(num_full_bottles)\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Let's call the number of children 'c' and the number of adults 'a'.\n    # Given: Adult ticket = 20, Children ticket = 15, Total charge = 110, at least two adults (a >= 2)\n    \n    # Start the number of children at 0 and increment until we reach a scenario that doesn't fit the given constraints\n    # Starting a at 2 because there are at least two adults\n    c = 0\n    while True:\n        # total cost = (number of adults * cost per adult) + (number of children * cost per child)\n        total_cost = 20 * (c + 2) + 15 * c\n        if total_cost == 110:\n            # If the total cost is £110, we return the number of children\n            return c\n        elif total_cost > 110:\n            # If we've exceeded the total, break the loop as we won't find a solution beyond this point\n            break\n        c += 1\n    \n    # If the loop completes without returning, there's no solution\n    return None\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # We only need the last two digits, so we can work with the remainder of the division by 100\n    # This is based on the modulo property (a + b) % m = ((a % m) + (b % m)) % m\n    last_two_digits = (pow(6, 2015, 100) + (2015 * 6) + pow(2015, 6, 100)) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # She spent 1/3 on the book, so the cost of the book is (1/3) * initial_money\n    # She then spent 1/2 of the remainder (which is 2/3 of initial_money) on the bag\n    # So the cost of the bag is (1/2) * (2/3) * initial_money = (1/3) * initial_money\n    # Therefore, the book and bag cost the same amount which means each cost\n    book_cost = total_cost / 2\n    # Let's compute the initial amount of money\n    initial_money = book_cost * 3  # We multiply by 3 because book cost is 1/3 of the initial money\n\n    return initial_money\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10        # 10 tens equals 100\n    tenths = 35 * 0.1     # 35 tenths equals 3.5\n    hundredths = 8 * 0.01 # 8 hundredths equals 0.08\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknowns\n    A, C, E, F = symbols('A C E F')\n\n    # Given values\n    B = 2\n    D = 0\n\n    # 6 * EFABCD - 5 * ABCDEF = 0\n    equation = Eq(6 * (10**5 * E + 10**4 * F + 10**3 * A + 10**2 * B + 10 * C + D) -\n                  5 * (10**5 * A + 10**4 * B + 10**3 * C + 10**2 * D + 10 * E + F), 0)\n\n    # solve for the variables such that each digit is distinct and between 0 to 9\n    solutions = solve(equation, (A, C, E, F))\n    \n    for sol in solutions:\n        if all(x.is_Integer and 0 <= x <= 9 for x in sol) and len(set(sol)) == len(sol):\n            # Calculate FACE from the solution\n            FACE = sol[0] * 10**3 + sol[1] * 10**2 + sol[3] * 10 + sol[2]\n\n            return FACE\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_in_box, cookies_sold_second_month = symbols('cookies_in_box cookies_sold_second_month')\n\n    # James sold 1680 cookies in the first month and kept the rest\n    # James sold (7/20) more cookies from a similar box in the second month than the first month\n    # If the number of cookies James kept decreased by (3/20) of the box, we have the following equation\n    equation1 = Eq(cookies_sold_second_month, 1680 + (7 / 20) * cookies_in_box)\n    equation2 = Eq(1680 + (3 / 20) * cookies_in_box, cookies_in_box - cookies_sold_second_month)\n\n    solutions = solve((equation1, equation2), (cookies_in_box, cookies_sold_second_month))\n\n    return solutions[cookies_in_box]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene's position from the front\n    jolene_position_front = 6\n\n    # Amy's position from the back\n    amy_position_back = 8\n\n    # Since Amy is directly behind Jolene, the total number of children\n    # is Amy's position from the back plus Jolene's position from the front minus 1.\n    total_children = amy_position_back + jolene_position_front - 1\n\n    return total_children\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    total_animals_initial, goats_initial, cows_initial = symbols('total_animals_initial goats_initial cows_initial')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)  # 65% of the initial animals were cows\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)  # The rest were goats\n    equation3 = Eq(cows_initial + 240 * 0.20, 0.65 * (total_animals_initial + 240))  # The percentage of cows increased by 20%\n    equation4 = Eq(goats_initial * 2, total_animals_initial + 240 - (cows_initial + 240 * 0.20))  # Number of goats doubled\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals_initial, goats_initial, cows_initial))\n\n    # We're interested in the initial number of goats\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    factors = [1, 2, 4, 7, 8]\n    # Since the number has 8 factors and we already have the first 5, the missing 3 factors\n    # must include the number itself (as the largest factor) and its counterpart (dividing the number by itself).\n    # One more factor must be between 8 and the number itself. For a number to have exactly 8 factors,\n    # it must be of the form p*q where p and q are distinct prime numbers (or a cube of a prime).\n    # However, seeing the factors we have, it does not follow the cube of a prime pattern, so we look for p*q.\n    \n    # Since 7 is a prime and is one of the factors, other factor should also be prime for it to have only 8 factors.\n    # Possible candidates for this prime would be greater than 8.\n    # Let's try to find such a prime factor.\n    \n    candidate_prime = max(factors) + 1\n    number = 0\n\n    # Check for a potential prime factor that when multiplied with 7 gives us a number with exactly 8 factors.\n    while True:\n        is_prime = True  # Initialize assumption that the candidate is a prime\n        for i in range(2, int(candidate_prime**0.5) + 1):\n            if candidate_prime % i == 0:  # If our candidate is divisible by any number other than 1 and itself\n                is_prime = False\n                break\n        # If it's a prime, we multiply by 7 to see if we can form the number with exactly 8 factors\n        if is_prime:\n            number_candidate = 7 * candidate_prime\n            # Now we check if this number has exactly 8 factors\n            count_factors = 0\n            # Check every number up to the square root, as factors come in pairs\n            for possible_factor in range(1, int(number_candidate**0.5) + 1):\n                if number_candidate % possible_factor == 0:\n                    count_factors += 2  # One factor below the square root and one above\n                    if possible_factor == number_candidate // possible_factor:\n                        # It's a perfect square so we need to subtract one factor as we counted it twice\n                        count_factors -= 1\n            if count_factors == 8:\n                number = number_candidate\n                break\n        candidate_prime += 1\n\n    return number\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 0\n    jumps = 0\n\n    while height < 40:\n        jumps += 1\n        height += 5  # monkey jumps up 5 metres\n        if height >= 40:\n            break  # monkey has reached the top\n        if jumps % 2 == 0:\n            height -= 3  # monkey falls down 3 metres every 2 jumps\n\n    return jumps\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    pounds_to_pence = 3 * 100\n    stamp_cost = 46\n    num_stamps = pounds_to_pence // stamp_cost\n    return num_stamps\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Total perimeter of the garden\n    total_perimeter = 5 * side_length\n    \n    # Sunflowers planted on the sides\n    sunflowers_on_sides = total_perimeter // distance_apart\n    \n    # One sunflower at each corner has already been counted in the sides\n    # Total sunflowers = sunflowers on sides + sunflowers on corners (5 corners)\n    # Since each corner sunflower is counted twice in the sides, we subtract 5\n    total_sunflowers = sunflowers_on_sides + 5 - 5\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    ans = 58 * 36\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_duration = 2  # in minutes\n\n    # Every round trip can take a maximum of boat_capacity people across,\n    # but one person must return with the boat.\n    # So, each round trip effectively ferries (boat_capacity - 1) people.\n    \n    # The last trip does not require a return, so we calculate separately.\n    # Total round trips needed, excluding the last one-way trip\n    total_round_trips = (total_people - boat_capacity) // (boat_capacity - 1)\n    \n    # People ferried in these round trips\n    people_ferried = total_round_trips * (boat_capacity - 1)\n    \n    # People left to ferry over in the final one-way trip\n    remaining_people = total_people - people_ferried\n    last_trip = 1 if remaining_people > 0 else 0\n\n    # Total duration includes all round trips (back and forth) and last one-way trip\n    total_duration = total_round_trips * trip_duration * 2 + last_trip * trip_duration\n\n    return total_duration\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the time it would take for Ryan to drive at his usual speed\n    # Distance = Speed * Time\n    # At 45 miles/hour, distance = 45 * t\n    # At 30 miles/hour, distance = 30 * (t + 2)\n    # Equating the distances since they are the same:\n    # 45 * t = 30 * (t + 2)\n\n    # The equation boils down to:\n    # 45t = 30t + 60\n    # Solving for t:\n    t = 60 / (45 - 30)\n    \n    return t\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def partition(number):\n    answer = [[number]]\n\n    for x in range(1, number):\n        for y in partition(number - x):\n            if x <= y[0]:\n                answer.append([x] + y)\n\n    return answer\n\ndef solution():\n    return len(partition(5)) - 1\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + (2/3) + (38/59))\n    denominator = 2.501 ** 3\n    answer = numerator / denominator\n    return round(answer, 3)\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Use the arithmetic series sum formula:\n    # sum = n/2 * (first_term + last_term)\n    # First, calculate the sum of the sequence from 3 to 10\n    first = 3\n    last = 10\n    n = last - first + 1\n    sum_forward = n / 2 * (first + last)\n\n    # Then, calculate the sum of the sequence from 10 back to 3\n    # The number of terms remains the same since it's a mirror of the first part\n    sum_backward = sum_forward\n    # The total sum is the sum of both sequences\n    total_sum = sum_forward + sum_backward - last  # Subtract last term, as it was added twice\n    return int(total_sum)\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # only the remainder is relevant\n    return b % 3\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n    return mary\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    equation = Eq(white_shirts, 6 * blue_shirts)\n    total = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation, total), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students and y be the total number of sweets.\n    # According to the problem: y = 6x - 26 (giving 6 sweets to each and short of 26)\n    # And also: y = 5x - 5 (giving 5 sweets to each and short of 5)\n    # This creates a system of equations we can solve for y.\n\n    # We solve the system of equations as follows:\n    # (1) 6x - y = 26\n    # (2) 5x - y = 5\n    # Subtract equation (2) from equation (1):\n    # (1) - (2) => x = 21\n    # Now we use equation (2) to solve for y:\n    # 5(21) - y = 5 => y = 5 * 21 - 5\n\n    y = 5 * 21 - 5\n    return y\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # The total sum we are looking for is odd\n    total_sum = 225 \n\n    # Check if the sum could be reached with the required conditions\n    # Since the difference should be one, let x be the number of fruits of the 4th tree\n    # The number of fruits of tree 1 to tree 8 will be: \n    # x - 3, x - 2, x - 1, x, x + 1, x + 2, x + 3\n    # The sum of these numbers for 7 trees would be:\n    # 7*x\n    # Since the sum must be odd, x should be odd because the sum of 7 odd numbers is odd\n    # To reach sum 225 adding another odd or even number (which is last tree's fruit number) to the solution doesn't work\n    # Because odd + odd = even and odd + even = odd, but we have an odd sum (225) not an even\n    # So it's impossible to find such a number x that makes 7*x plus any number odd or even to be 225\n    return \"No, it is not possible.\"\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    heidi_age = 8 + years\n    dad_age = 50 + years\n    equation = Eq(dad_age, 4 * heidi_age)\n    \n    solution = solve(equation, years)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    # Let Leo's current age be x and his son's current age be y.\n    # The difference in age between Leo and his son will always remain the same.\n    # When the son reaches Leo's current age (x), the age of Leo will be 70.\n\n    from sympy import symbols, Eq, solve\n\n    leo_age, son_age = symbols('leo_age son_age')\n    \n    # When Leo was the current age of his son, his son was 4 years old.\n    # leo_age - son_age = son_age - 4\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n\n    # When the son reaches Leo's current age, Leo will be 70 years old.\n    # son_age - leo_age = 70 - leo_age\n    equation2 = Eq(son_age, 70 - (leo_age - son_age))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n\n    # Return Leo's current age\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Calculating the permutations when there are at least 1 singing performance between every 2 dancing ones\n    # Make \"slots\" for the dancing performances between the singing ones including the start and the end\n    slots = 5  # S D S D S D S (4 singing performances create 5 slots)\n    # We can place 3 dancing performances in these 5 slots = combinations of 5 taken 3 at a time\n    dance_combinations = factorial(slots) // (factorial(3) * factorial(slots - 3))\n\n    # Singing performances can be ordered in any way\n    singing_permutations = factorial(4)  # 4 singing performances\n\n    # The total number of ways to arrange the performances\n    total_ways = dance_combinations * singing_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    sum_of_three_numbers = average_initial * 3 \n    average_final = 150\n    sum_of_four_numbers = average_final * 4\n    \n    fourth_number = sum_of_four_numbers - sum_of_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    prime_factor_5 = 0\n    prime_factor_2 = 0\n    \n    for i in range(1, 61):\n        n = i\n        while n % 5 == 0:\n            prime_factor_5 += 1\n            n //= 5\n            \n        while n % 2 == 0:\n            prime_factor_2 += 1\n            n //= 2\n\n    ans = min(prime_factor_5, prime_factor_2)\n    return ans\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "import sympy as sp\n\ndef solution():\n    r = sp.symbols('r', integer=True)\n    equation = sp.Eq(216 * r, sp.sqrt(216 * r)**2)\n    value_r = sp.solve(equation, r)\n    for v in value_r:\n        if v.is_integer and v > 0:\n            ans = v\n            break\n    return ans\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    \n    return discounted_price\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    # From the equation square * 15 = 11 * 14 + 26\n    # we can isolate square (which I'll name as unknown_number) as follows:\n    # unknown_number = (11 * 14 + 26) / 15\n\n    unknown_number = (11 * 14 + 26) / 15\n    return int(unknown_number)\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_climb = daily_climb - nightly_slip\n    total_days = 9\n    \n    # Calculate the total climbed distance after the 8 full days (not including the 9th day)\n    total_climbed_after_full_days = net_climb * (total_days - 1)\n    \n    # On the 9th day, the snail climbs out of the well, reaching the top without slipping back\n    total_climbed_on_last_day = total_climbed_after_full_days + daily_climb\n    \n    return total_climbed_on_last_day\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1  # Smallest possible divisor is 1 greater than the remainder\n\n    # The dividend (D) can be expressed by the equation: D = divisor * quotient + remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(6)  # Total ways without restrictions\n    teddy_first_ways = factorial(5)  # Ways if Teddy is first (not allowed)\n    ans = total_ways - teddy_first_ways\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Using the inclusion-exclusion principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n\n    # Teachers who only know French\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Rachel's purchase: 3 bags of sweets + 5 cans of drink = 4.90\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    # Rosie's purchase: 1 bag of sweets + 3 cans of drink = 2.70\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # The first negative term is the first term for which 50 + (n-1)*(-4) < 0\n    # Solving this for n gives us n > 50/4 when we want the 'first' term that is negative, so we take the ceiling\n    # since we can't have a fraction of a term and then subtract 1 because we started counting from n=1.\n    num_terms = -(-first_term // difference)\n\n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    return (4/9) * 963\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for number in range(10, 100): # 2-digit numbers start from 10\n        if (number // 10 + number % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    average = 280 // 7\n    largest_number = average + 3\n    return largest_number\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    # Let the bigger number be x and the smaller number be y\n    # According to the problem, we have two equations\n    # x + y = 49 (1)\n    # x - y = 9  (2)\n\n    # Adding the two equations, we get\n    # 2x = 58\n    # x = 58 / 2\n    x = (49 + 9) / 2\n\n    return x\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum((-1)**(i+1) * (20 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "from math import gcd\n\ndef solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(A+1, 1000):  # ensure A and B are distinct\n            # Check if they have two equal digits (not necessarily in the same place)\n            A_digits = str(A)\n            B_digits = str(B)\n            common_digits = len(set(A_digits) & set(B_digits))\n            if common_digits >= 2:\n                # Check if their highest common factor is 75\n                if gcd(A, B) == 75:\n                    max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # This sequence is not directly a sum of squares, but close.\n    # Let's express each term with its square component:\n    # 8 = 2x2^3, 32 = 2x4^3, 72 = 2x6^3, ... Thus, it's 2n^3 for n = 2, 4, 6, 8, 10, 12, 14, 16, 18.\n    # Now let's sum up these terms.\n    terms = [2 * (n ** 3) for n in range(2, 19, 2)]\n    \n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial as fact\n\ndef solution():\n    # P(magazines) * P(\"slots\" between magazines to place storybooks) * combinations of \"slots\"\n    ways_to_arrange_magazines = fact(5)\n    available_slots_for_storybooks = 6  # 5 magazines create 6 slots, including the ends\n    ways_to_choose_slots = available_slots_for_storybooks\n    \n    ways_for_storybooks_in_slots = fact(5)\n    total_ways = ways_to_arrange_magazines * ways_to_choose_slots * ways_for_storybooks_in_slots\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    positions = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in positions:\n        if skip_next:\n            if throw != 6:\n                position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    # Let x be the amount James gives to Kate.\n    x = (james - kate) / 2\n\n    return x\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    # Equation 1: Before giving money away\n    equation1 = Eq(alex + brayden, 756)\n    \n    # Equation 2: After giving money away\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 100):  # Start checking from 1 to a reasonable number\n        remaining_after_music = gums - 2  # Ate 2 in Music lesson\n        if remaining_after_music % 3 == 0:  # Can share one third with friends\n            shared_with_friends = remaining_after_music // 3\n            remaining_after_break = remaining_after_music - shared_with_friends\n            if remaining_after_break % 4 == 0:  # Can eat an equal amount in the next 4 lessons\n                return gums  # The smallest number of gums\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = 420000 + A * 1000 + 280 + B\n            if number % 99 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    # Total sum of the ten numbers\n    total_sum = 10 * 10  # average * number of items\n    \n    # Total sum of the remaining nine numbers\n    remaining_sum = 9 * 9  # new average * new number of items\n\n    # Number removed is the difference between the total sum and the remaining sum\n    number_removed = total_sum - remaining_sum\n\n    return number_removed\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kph = 3.6\n    time_seconds = 300\n\n    speed_mps = speed_kph * (1000 / 3600)\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the amount each brother would receive if the sister is included\n    x = symbols('x')\n\n    # If the brothers alone had shared the money, they would have received x + 20 each\n    # The sum of money shared among the brothers and the sister is 4x (3 brothers + 1 sister)\n    # The sum of money that would have been shared among the brothers only is 3 * (x + 20)\n\n    # Set up the equation: the amount shared among four siblings is equal to the amount shared among three brothers\n    equation = Eq(4 * x, 3 * (x + 20))\n\n    # Solve the equation\n    solved_x = solve(equation, x)\n\n    # The original sum of money is then 4 times the amount each sibling received\n    original_sum = 4 * solved_x[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Sum of first 'n' odd numbers is n^2\n    # Sum of cubes of first 'n' natural numbers is (n(n+1)/2)^2\n    # Here, we need to find sum of cubes of first 11 odd numbers\n    # which is equal to the sum of cubes of first 11 natural numbers\n    n = 11\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, blue = symbols('red green blue')\n    \n    # Total beads after giving away some\n    total_beads_left = 350\n    \n    # Relationships based on the problem description\n    equation1 = Eq(red, 2 * green)\n    equation2 = Eq(blue, red - 50)\n    equation3 = Eq(red + green + (blue + 112), total_beads_left)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n    \n    # Get the blue beads before giving away 112 beads\n    blue_beads_initial = solutions[blue] + 112\n\n    return blue_beads_initial\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n    \n    science_books = (art_books * art_books_fraction) / science_books_fraction\n    return int(science_books)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n    ratio_katelyn_to_jared = Eq(2/5, katelyn/jared)\n    jared_stickers_more_than_katelyn = Eq(jared, katelyn + 60)\n\n    solutions = solve((ratio_katelyn_to_jared, jared_stickers_more_than_katelyn), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_rate_first_three_years = 0.05\n    interest_rate_last_two_years = 0.10\n\n    # Compound interest for the first three years\n    amount_after_three_years = initial_investment * (1 + interest_rate_first_three_years) ** 3\n\n    # Compound interest for the next two years\n    final_amount = amount_after_three_years * (1 + interest_rate_last_two_years) ** 2\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    total_chinese = 42\n    total_math = 63\n    total_nature = 28\n\n    ans = gcd(gcd(total_chinese, total_math), total_nature)\n\n    return ans\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # If the average of 4 numbers is given, then their sum is 4 times the average.\n\n    # Calculate the sum of the 4 numbers for each average given.\n    sum1 = 4 * 36\n    sum2 = 4 * 38\n    sum3 = 4 * 39\n    sum4 = 4 * 45\n    sum5 = 4 * 49\n\n    # The sum of all 5 numbers should be constant no matter which 4 numbers we pick.\n    # The difference between sums when we omit different numbers gives us the omitted numbers.\n\n    # Let the total sum be x. Then:\n    # x - omitted number 1 = sum1 \n    # x - omitted number 2 = sum2 \n    # x - omitted number 3 = sum3\n    # x - omitted number 4 = sum4\n    # x - omitted number 5 = sum5\n\n    # The difference between sum5 and the rest gives us the omitted numbers.\n    omitted_number_1 = sum5 - sum1\n    omitted_number_2 = sum5 - sum2\n    omitted_number_3 = sum5 - sum3\n    omitted_number_4 = sum5 - sum4\n    # omitted_number_5 is the 5th number, we don't have its sum but we can find the largest number without it.\n\n    # The largest number among the omitted ones is the largest number overall\n    largest_number = max(omitted_number_1, omitted_number_2, omitted_number_3, omitted_number_4)\n\n    return largest_number\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    qiqi_speed = 60    # m/min\n    weiling_speed = 72  # m/min\n    time_difference = 2  # min\n    weiling_earlier_arrival = 4  # min\n\n    # Let's denote the time taken by Qiqi to reach school as t (in minutes)\n    # Then, the time taken by Weiling to reach school is t - 2 (time difference) - 4 (earlier arrival)\n\n    # The distance to school travelled by both is the same\n    # Distance by Qiqi is speed of Qiqi * time of Qiqi\n    # Distance by Weiling is speed of Weiling * time of Weiling\n    # Equating the distances gives us the equation:\n    # qiqi_speed * t = weiling_speed * (t - 2 - 4)\n\n    # Now, we'll solve this equation to find the time taken by Qiqi\n    # and then we'll find the distance\n\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    equation = Eq(qiqi_speed * t, weiling_speed * (t - time_difference - weiling_earlier_arrival))\n    time_qiqi = solve(equation, t)[0]\n\n    # Distance = Speed * Time\n    distance = qiqi_speed * time_qiqi\n\n    return distance\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    total_length_per_day = 900 / 5\n    total_length_per_company_per_day = total_length_per_day / 4\n    days_for_one_company_to_build_2700m = 2700 / total_length_per_company_per_day\n    return days_for_one_company_to_build_2700m\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Since we want to share 16 sausages among 24 people\n    # Each person should get 16/24 of a sausage\n    # To make this possible with whole sausages, we need to find the least common multiple\n    # of the number of sausages and the number of people\n\n    from math import gcd\n\n    total_sausages = 16\n    total_people = 24\n\n    # Find the greatest common divisor\n    greatest_common_divisor = gcd(total_sausages, total_people)\n\n    # Calculate the least number of cuts\n    # (total_people / greatest_common_divisor) - 1 will give us the minimum cuts required\n    # because we can form groups of sausages to match the size of the groups of people\n    least_cuts = (total_people / greatest_common_divisor) - 1\n\n    return int(least_cuts)\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # s for Star's work rate per hour, n for Nini's work rate per hour\n    s, n = symbols('s n')\n\n    # Star types for 5 hours then Nini types for 20 hours to finish 1 job\n    equation1 = Eq(5*s + 20*n, 1)\n\n    # Star types for 20 hours then Nini types for 8 hours to finish 1 job\n    equation2 = Eq(20*s + 8*n, 1)\n\n    # Solve the system of linear equations for s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Nini's work rate per hour\n    nini_rate = solutions[n]\n\n    # Time taken for Nini to finish the job alone\n    nini_time = 1 / nini_rate\n\n    return nini_time\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs_conversion_rate = 2.2\n    kg = 5\n    ans = kg * kg_to_lbs_conversion_rate\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n\n    ben_height = jane_height - height_difference\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between_ben_frank = 10\n\n    total_people = (ben_position_from_front - 1) + people_between_ben_frank + (frank_position_from_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # St Petersburg time when Richard meets his mother\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n\n    # Flight duration from Manchester to St Petersburg, assuming it's known.\n    # Please replace '7:30' with the actual flight duration if different.\n    flight_duration = timedelta(hours=7, minutes=30)\n\n    # Manchester time when the plane left\n    manchester_departure_time = st_petersburg_time - flight_duration\n\n    # Since we are not considering timezone differences in this problem,\n    # the departure time in Manchester will be the same as in St Petersburg (time-wise).\n    return manchester_departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    latte_total = (coffee_litres / coffee_ratio) * (coffee_ratio + milk_ratio)\n\n    return latte_total\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 * 140 / 100\n    return result\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 8 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum_positive = sum(range(4, 34, 4))    # Sum of 4, 8, ..., 32\n    sum_negative = sum(range(2, 32, 4))    # Sum of 2, 6, ..., 30\n    return sum_positive - sum_negative\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of marbles as 'total_marbles'.\n    total_marbles = symbols('total_marbles')\n\n    # According to the problem:\n    equation_red = Eq((2/5) * total_marbles, total_marbles - (1/3) * total_marbles - 96)\n    equation_green = Eq((1/3) * total_marbles, total_marbles - (2/5) * total_marbles - 96)\n\n    # Get the solutions from the equations\n    solution_red = solve(equation_red, total_marbles)\n    solution_green = solve(equation_green, total_marbles)\n\n    # The solutions for red and green should be the same, if they are not, then there might be an issue\n    if solution_red == solution_green:\n        return solution_red[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_last_four_digits = 0\n    current_number = 0\n\n    for i in range(1, 2016):\n        current_number = current_number * 10 + 1  # Generating the number with i digits of 1\n        sum_last_four_digits += current_number  # Summing up the numbers\n        sum_last_four_digits %= 10000  # Keeping only the last 4 digits\n\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Worst case scenario: you might pick one of each color before getting two of the same color.\n    # 1 blue + 1 yellow, you still can't be sure\n    # But once you pick one more (the 3rd marble), you must get either 2 blue or 2 yellow.\n    # Therefore, the answer is 3.\n    return 3\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    # Generate all possible combinations of three digits that add up to 8\n    for digits in combinations_with_replacement(range(0, 10), 3):\n        if sum(digits) == 8:\n            # Avoid leading zeros for three digit numbers and check if the last digit is even\n            if digits[0] > 0 and digits[2] % 2 == 0:\n                # Count permutations without repetition\n                without_repetition = len(set(digits))\n                if without_repetition == 3:\n                    count += 6  # 3! permutations\n                elif without_repetition == 2:\n                    count += 3  # 3!/2! permutations\n                else:  # all digits are the same, only one permutation possible\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    term_number = 7\n\n    # Using the arithmetic sequence nth term formula: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (term_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of powers of 13 cycles every 4 powers: 3, 9, 7, 1,...\n    # 242 % 4 = 2 -> the unit digit is the second in the cycle, which is 9.\n    unit_digit_13 = 9\n    \n    # The unit digit of powers of 17 also cycles every 4 powers: 7, 9, 3, 1,...\n    # 379 % 4 = 3 -> the unit digit is the third in the cycle, which is 3.\n    unit_digit_17 = 3\n    \n    # The unit digit of powers of 4 cycles every 2 powers: 4, 6, 4, 6,...\n    # 2012 % 2 = 0 -> the unit digit is the first in the cycle, which is 4.\n    unit_digit_4 = 4\n    \n    # Calculate the unit digit of the product of unit digits of 17^379 and 4^2012\n    unit_digit_17_4_product = (unit_digit_17 * unit_digit_4) % 10\n    \n    # Add the unit digits to find the unit digit of the final sum\n    unit_digit_sum = (unit_digit_13 + unit_digit_17_4_product) % 10\n    \n    return unit_digit_sum\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote the original sum of money as 'x'.\n    # She spent $36 on plates, so she had (x - 36) left.\n    # Then she spent 3/4 of the remaining money on cups.\n    # That leaves her with x - 36 - 3/4*(x - 36).\n    # According to the problem, she had 1/6 of the original money left, which gives us the equation:\n    # x - 36 - 3/4*(x - 36) = 1/6*x\n    # We will solve this equation for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') \n\n    # Create the equation based on the problem statement\n    equation = Eq(x - 36 - 3/4*(x - 36), 1/6*x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution which is the original sum of money\n    return solution[0]\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert the given time for 1 mile to hours\n    time_for_one_mile = 2 + 30/60  # 2 minutes and 30 seconds\n    time_for_one_mile_in_hours = time_for_one_mile / 60  # convert minutes to hours\n    \n    # Calculate the number of miles travelled in 1 hour\n    miles_in_one_hour = 1 / time_for_one_mile_in_hours\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize a counter to track the sum of valid ages\n    valid_sums = []\n    \n    # Iterate through possible ages for John (j) and Mary (m = j - 1)\n    # Adults' age should be reasonable, set limit to 100 for example\n    for j in range(1, 100):\n        m = j - 1  # Mary is one year younger\n\n        # Calculate the products of John and Mary's ages for this year and the next\n        product_this_year = j * m\n        product_next_year = (j + 1) * (m + 1)\n\n        # If the product this year is not less than 2019 or the product next year is not greater than 2020, continue\n        if not (product_this_year < 2019 and product_next_year > 2020):\n            continue\n\n        # Check children's ages based on the given constraints\n        # Children are 2 years apart, let's denote the youngest child's age as c\n        for c in range(1, 100):\n            # Calculate the ages of the other two children\n            c1 = c + 2  # middle child\n            c2 = c + 4  # oldest child\n\n            # Calculate the products of the children's ages for this year and the next\n            children_product_this_year = c * c1 * c2\n            children_product_next_year = (c + 1) * (c1 + 1) * (c2 + 1)\n\n            # Check if the children's products meet the constraints\n            if children_product_this_year < 2019 and children_product_next_year > 2020:\n                # If both conditions are met, calculate the sum of all ages and add it to the list\n                sum_of_ages = j + m + c + c1 + c2\n                valid_sums.append(sum_of_ages)\n\n    # Since the problem asks for \"this year, what is the sum of all five ages?\",\n    # We return the sum if only one valid sum found, otherwise an error is present in the logic\n    if len(valid_sums) == 1:\n        return valid_sums[0]\n    else:\n        raise ValueError(\"Multiple or no valid sums detected.\")\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (100*a + 10*b + c) + (100*b + 10*c + d) + (100*c + 10*d + e) + \\\n            (100*d + 10*e + f) + (100*e + 10*f + g) + (100*f + 10*g + h) + \\\n            (100*g + 10*h + i)\n        max_A = max(A, max_A)\n    return max_A\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    for most_balls in range(160 // 5, 0, -1):\n        balls = most_balls\n        total_balls = balls\n        for _ in range(4):\n            balls -= 1\n            total_balls += balls\n        if total_balls == 160:\n            return most_balls\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # We need to determine the 2012th position.\n    # Obviously, the first 9 numbers are single digit 8 followed by 10x80, 10x90, and then 10x100 series, until we hit 2012.\n    # So, we need to calculate how many complete series of 100 we can have with our position limit.\n    \n    position = 2012\n    current_position = 0\n    \n    # Start with the single 1-digit number 8.\n    current_position += 1\n\n    # Then add 10 2-digit numbers 80, 81, ..., 89.\n    current_position += 10\n    \n    # Find out in which 100-interval the number lies.\n    hundreds = 0\n    while True:\n        numbers_in_this_range = 100\n        if current_position + numbers_in_this_range >= position:\n            # We've found the right hundreds range.\n            break\n        # Otherwise, move to the next hundreds.\n        hundreds += 1\n        current_position += numbers_in_this_range\n        \n    # Now find the exact number in the final 100-interval.\n    exact_position = position - current_position\n    # Construct the number: start with 8, then the hundreds, then the position within the hundreds.\n    answer = int(f\"8{hundreds}{str(exact_position - 1).zfill(2)}\")\n\n    return answer\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations_with_replacement\n    \n    # Total number of envelopes\n    total_envelopes = 15\n    \n    # Minimum required envelopes for each mailbox\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    \n    # Remaining envelopes after placing the minimum required in each mailbox\n    remaining_envelopes = total_envelopes - (min_A + min_B + min_C)\n\n    # Since we know the minimum number of envelopes in each box,\n    # we look for combinations with replacement for how to distribute\n    # the remaining envelopes among the 4 boxes.\n    combination_count = 0\n    for combination in combinations_with_replacement(range(4), remaining_envelopes):\n        # combination gives us an index for each envelope,\n        # representing which box it will go into.\n        counts = [combination.count(i) for i in range(4)]\n        \n        # If we add the minimum required envelopes to the counts\n        # and the sum still equals the total_envelopes, it's a valid combination.\n        if sum(counts) + min_A + min_B + min_C == total_envelopes:\n            combination_count += 1\n\n    return combination_count\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    taxed_amount = 7000\n    lower_rate = 0.15\n    upper_rate = 0.20\n    lower_limit = 20000\n\n    # Tax on the first $20000\n    tax_at_lower_rate = lower_limit * lower_rate\n\n    # If the taxed amount is within the lower rate, calculate income directly\n    if taxed_amount <= tax_at_lower_rate:\n        income = taxed_amount / lower_rate\n    else:\n        # Calculate the remaining tax amount taxed at the upper rate\n        remaining_tax = taxed_amount - tax_at_lower_rate\n        # Calculate the income that is taxed at the upper rate\n        income_at_upper_rate = remaining_tax / upper_rate\n\n        # Total income = income within lower rate + income taxed at upper rate\n        income = lower_limit + income_at_upper_rate\n\n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor (GCD) for the lengths\n    gcd_pair = gcd(rope1, rope2)\n    greatest_length = gcd(gcd_pair, rope3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal_representation = format(1/13, '.3000f')  # More than 2022 decimal places\n\n    recurring_section = decimal_representation[2:]  # Removing '0.'\n\n    # Since the decimal is recurring every 6 digits (076923), find the pattern\n    recurrence_length = 6\n\n    # 2022nd digit will correspond to (2022 - 1) % recurrence_length in the recurring section\n    index = (2022 - 1) % recurrence_length\n\n    # The specific digit in the 2022th decimal place\n    digit = recurring_section[index]\n\n    return int(digit)\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    # Let number of chickens be c and number of rabbits be r\n    # We have two equations based on the problem statement:\n    # c + r = 40 (equation 1: number of heads)\n    # 2c + 4r = 100 (equation 2: number of legs, chickens have 2 and rabbits have 4)\n    \n    # We can solve for c from equation 1: c = 40 - r\n    # Substitute the expression for c into equation 2: 2(40 - r) + 4r = 100\n    # And solve for r\n    r = (100 - 2*40) / (4 - 2)\n    \n    # With r found, we can find c\n    c = 40 - r\n    \n    return int(c)\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of packs as x.\n    # After A sells 290 packs, it has x - 290.\n    # At this point, B has 3 times as many packs as A, which is 3 * (x - 290).\n    # Also, we know initially A and B had the same number of packs, so B also started with x.\n    # Therefore, the equation will be: x = 3 * (x - 290).\n\n    # Define symbol\n    x = symbols('x')\n    \n    # Define and solve the equation\n    equation = Eq(x, 3 * (x - 290))\n    solution = solve(equation, x)\n\n    # Total packs at first for both stores is 2x\n    total_packs = 2 * solution[0]\n\n    return total_packs\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_price = 20 * 6  # 20 dark chocolates at $6 each\n    total_milk_chocolate_price = 20 * 5  # 20 milk chocolates at $5 each\n    total_strawberry_chocolate_price = 20 * 4  # 20 strawberry chocolates at $4 each\n    \n    total_price = total_dark_chocolate_price + total_milk_chocolate_price + total_strawberry_chocolate_price\n    total_chocolates = 20 + 20 + 20  # Total number of chocolates\n    \n    average_price = total_price / total_chocolates  # Calculating the average price\n    \n    return average_price\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed = 4\n    girls_school_lunch = 7\n    boys_home = 3\n    girls = total_students - boys\n    girls_packed_and_school = girls - girls_school_lunch\n    total_home = 5\n    girls_home = total_home - boys_home\n\n    # Since all students either have a packed lunch, school lunch, or went home, and we know the numbers of \n    # students who went home and the girls who had school lunch, we can find the remaining number of students\n    # who had a packed lunch by subtracting those who went home and those who had school lunch from the total students.\n\n    packed_lunch = total_students - (total_home + boys_packed + girls_school_lunch)\n    \n    return packed_lunch\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    daily_production = 720 / 5\n    total_days_needed = 3600 / daily_production\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    max_value = 100\n    divisor = 12\n    ans = (max_value - 1) // divisor\n    return ans\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed_m_per_s = 53\n    time_seconds = 19\n    \n    train_length = speed_m_per_s * time_seconds\n\n    return train_length\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    ans = 2017\n    for i in range(2, 2018):\n        ans *= (1 - 1/i)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_each = total_fruits // friends\n\n    return fruits_each\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Rate at which the man drinks the orange juice\n    man_rate = 1/15\n\n    # Combined rate of the man and his wife drinking the orange juice\n    combined_rate = 1/12\n\n    # Rate at which the wife drinks the orange juice\n    wife_rate = combined_rate - man_rate  # The wife's rate is the combined minus the man's rate\n\n    # Number of days the wife takes to finish the barrel on her own\n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    offer_books = 3 + 1  # Buy 3 get 1 free implies getting 4 books for the price of 3\n    required_books = 5\n\n    # Calculate the full offer groups needed to acquire the required books\n    full_offer_groups = required_books // offer_books\n    full_offer_price = full_offer_groups * book_price * 3  # Pay for 3 books in each group\n\n    # Calculate remaining books if they don't fit into a full offer group\n    remaining_books = required_books % offer_books\n    remaining_books_price = remaining_books * book_price\n\n    total_price = full_offer_price + remaining_books_price\n    return total_price\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n\n    solution = solve(equation, sam_number)\n\n    return solution[sam_number]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = total_pupils * 35  # Total pencils using average pencils per pupil\n    \n    boys = symbols('boys')\n    girls = total_pupils - boys\n    \n    # boys * average_pencils_per_boy + girls * average_pencils_per_girl = total_pencils\n    eq = Eq(boys * 20 + girls * 60, total_pencils)\n    \n    sol = solve(eq, boys)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression = -154\n    mount_fuji = 3776\n    distance = abs(turpan_depression) + abs(mount_fuji)\n    return distance\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    people, men, women, children = symbols('people men women children', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(women, people * 2/5)                   # women is 2/5 of total people\n    equation2 = Eq(men, 3 * children)                      # men is thrice the number of children\n    equation3 = Eq(women, children + 190)                  # women are 190 more than children\n    \n    # Total people is the sum of men, women and children\n    equation4 = Eq(people, men + women + children)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (people, men, women, children))\n    \n    return solutions[people]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    sum = 0\n    for i in range(1, 51):\n        sum += int('1' * i)\n    ans = sum % 100  # get the last two digits\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n\n    total_students = coding_only + math_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # The number of envelopes left after fulfilling the minimum requirements\n    remaining_envelopes = 15 - (2 + 4 + 3)  # 2 for A, 4 for B, and 3 for C\n    # We need to distribute the remaining 6 envelopes to the 4 boxes\n    for distrib in product(range(7), repeat=4):\n        if sum(distrib) == remaining_envelopes:\n            A, B, C, D = distrib\n            A += 2  # Add the minimum requirement for A\n            B += 4  # Add the minimum requirement for B\n            C += 3  # Add the minimum requirement for C\n            # No minimum requirement for D, it's already considered in the distribution\n            if A + B + C + D == 15:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The number of apples and bananas Einstein can buy\n    apples, bananas = symbols('apples bananas')\n\n    # Equations based on the given conditions\n    equation1 = Eq(6 * apples + 7 * bananas, 8 * apples + 4 * bananas)\n    equation2 = Eq(apples, 1)  # Assign a unit price to an apple for simplicity\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, bananas))\n\n    # The price of one banana\n    price_per_banana = solutions[bananas]\n\n    # The total price Einstein can afford (apples have a unit price)\n    total_price = 6 * 1 + 7 * price_per_banana \n\n    # The maximum number of bananas Einstein can buy with his total funds\n    max_bananas = total_price / price_per_banana\n\n    return max_bananas\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # By Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    incorrect_divisor = 211  # Leo forgets to put the decimal point, so he uses 211 as the divisor\n    incorrect_result = 98.01  # The incorrect result\n    correct_divisor = 2.11  # The correct divisor with the decimal point\n\n    # Since dividing by a smaller number (2.11 instead of 211) would result in a larger quotient,\n    # we can calculate the true result by adding the difference (98.01) to the incorrect result,\n    # then dividing by the incorrect divisor, and finally multiplying by the correct divisor.\n    \n    true_result = (incorrect_result + 98.01) * correct_divisor / incorrect_divisor\n    return true_result\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n    \n    # Amount of money after spending\n    john_left = john - 30\n    choon_mui_left = choon_mui - 150\n\n    # Equation:\n    # - Initially, they both had the same amount of money\n    # - After spending, John's amount is 4 times Choon Mui's amount left\n    equations = [\n        Eq(john_left, 4 * choon_mui_left),\n        Eq(john, choon_mui)\n    ]\n\n    solution = solve(equations, (john, choon_mui))\n\n    # Calculate the amount of money John had left\n    john_left_amount = solution[john] - 30\n    return john_left_amount\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    after_second_sale = (remaining_eggs + 4) * 2\n    original_amount = (after_second_sale + 5) * 2\n    return original_amount\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of female visitors on the first day.\n    x = symbols('x')\n\n    # male visitors on the first day: x + 450\n    # female visitors on the second day: x * 1.15\n    # male visitors on the second day: (x + 450) * 0.82\n    # The total number of visitors on the second day is 1354.\n    equation = Eq(x * 1.15 + (x + 450) * 0.82, 1354)\n\n    # Solve the equation for x\n    female_visitors_first_day = solve(equation, x)[0]\n\n    # Calculate male visitors on the first day\n    male_visitors_first_day = female_visitors_first_day + 450\n    return male_visitors_first_day\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100\n    increased_amount = original_amount * (1 + percentage_increase)\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    real_length_m = 8  # Real yacht length in meters\n    scale_ratio = 20   # Scale ratio\n\n    # Calculate the model length in meters by dividing the real length by the scale ratio\n    model_length_m = real_length_m / scale_ratio\n    \n    # Convert meters to centimeters (1 meter = 100 centimeters)\n    model_length_cm = model_length_m * 100\n\n    return model_length_cm\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60\n    miles = miles_per_hour * time_hours\n    kilometers = miles * 1.60934\n    return kilometers\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_either = likes_one_direction + likes_the_vamps - likes_both\n    likes_neither = total_girls - likes_either\n\n    return likes_neither\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # This is a problem of Derangement (also known as \"subfactorial\" or \"!n\")\n    # In this case, derangement of 4 items (~!4)\n\n    # General formula for derangement is:\n    # !n = (n! / e) where e is Euler's number\n    # For integers, rounding is done to the nearest integer,\n    # often you'll see this implemented as:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    e = 2.718281828459045\n    n = 4 \n    derangement = int(factorial(n) / e + 0.5)  # The +0.5 is for rounding to the nearest integer\n\n    return derangement\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_progress = day_climb - night_slide\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n    \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_weekly_pay = hourly_rate * 8 * 5\n    shortfall = 700 - total_weekly_pay\n    return shortfall\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    \n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime(\"%I:%M %p\")\n    return start_time_formatted\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if A + A == A * 10 + A:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        s = str(i)\n        if s.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    # Calculate the least common multiple of 14 (2 weeks) and 10 days\n    # Each week has 7 days, so 2 weeks = 14 days\n    from math import lcm\n\n    days_arjun = 14\n    days_yahya = 10\n\n    ans = lcm(days_arjun, days_yahya)\n\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate the time for each segment\n    time1 = 280 / 7  # time to complete the first 280 meters\n    time2 = 400 / 5  # time to complete the middle 400 meters\n    time3 = 120 / 8  # time to complete the last 120 meters (since total is 800 meters)\n\n    # Calculate the total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    for a in range(10):\n        for b in range(10):\n            number = int(f\"2{a}9{b}\")\n            if number % 3 == 0 and number % 5 == 0:\n                sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    # Total length of the highway is 42 meters.\n    # Distance between trees is 7 meters.\n    # Because no trees are planted on both ends of the highway,\n    # the first planting spot will be 7 meters in, and the last spot is before the last 7 meters.\n    \n    highway_length = 42\n    distance_between_trees = 7\n    \n    # Calculate the length available for planting\n    planting_length = highway_length - distance_between_trees * 2\n    \n    # Calculate how many trees can be planted\n    num_trees = planting_length // distance_between_trees\n    \n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note = 50\n    cost_of_shoes = 30\n    lucas_loss = fake_note + cost_of_shoes  # He lost the shoes and had to return the fake note amount.\n\n    return lucas_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    total_terms = (last_term - first_term) // 1 + 1  # common difference is 1\n    sum_of_series = total_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Starting the concatenated string from '123456...'\n    concatenated_str = ''.join(str(num) for num in range(1, 31))\n\n    # Since we want the smallest number after removing 46 characters,\n    # We should remove 46 '9's first as they contribute most to the largeness of the number.\n    # If there are less '9's than 46, we remove as many '9's as possible.\n\n    nines_to_remove = 46\n    while '9' in concatenated_str and nines_to_remove > 0:\n        concatenated_str = concatenated_str.replace('9', '', 1)\n        nines_to_remove -= 1\n\n    # If there's still characters left to remove, continue with '8', and so on.\n    for digit in '876543210':\n        while digit in concatenated_str and nines_to_remove > 0:\n            concatenated_str = concatenated_str.replace(digit, '', 1)\n            nines_to_remove -= 1\n\n    # The smallest number after removing 46 characters is whatever is left\n    ans = int(concatenated_str)\n\n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, you would need to take out all blue balls first.\n    # Number of blue balls:\n    blue_balls = 6\n    # In the worst-case scenario, you take out all blue balls one by one.\n    # So, the next ball you take out has to be white.\n    balls_to_take_out = blue_balls + 1\n    \n    return balls_to_take_out\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    import math\n\n    # ABC can be treated as a single entity, so we have 10 - 3 + 1 = 8 entities to arrange\n    entities = 8\n    \n    # The students A, B, C can be arranged in 3! ways among themselves\n    abc_permutations = math.factorial(3)\n    \n    # Now arrange the 8 entities in 8! ways\n    entities_permutations = math.factorial(entities)\n    \n    # Total ways is the product of the two permutation counts\n    total_ways = entities_permutations * abc_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return total\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    ans = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return ans\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate the time spent jogging (1 hour from 6:30 am to 7:30 am)\n    jogging_time = 1  # in hours\n\n    # Calculate the jogging distance (speed * time)\n    jogging_speed = 6  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the time spent walking (2 hours from 7:30 am to 9:30 am)\n    walking_time = 2  # in hours\n\n    # Calculate the walking distance (speed * time)\n    walking_speed = 5  # in miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Calculate the total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n\n    while used_cups >= 7:\n        # Create new cups from used cups\n        new_cups_created = used_cups // 7\n        new_cups += new_cups_created\n        \n        # Subtract the used cups and add the remaining used cups to the count\n        used_cups = used_cups - new_cups_created * 7 + new_cups_created\n    \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    total_number = 2000\n    less_number = 222\n    ans = total_number - less_number\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # Each short ruler is 20 cm long\n    short_ruler_length = 20\n\n    # The overlapping part between the two short rulers is 3 cm\n    overlap_length = 3\n\n    # We have three short rulers, so there are two overlaps\n    num_overlaps = 2\n\n    # Total length of the bundle is the sum of the lengths\n    # of the short rulers minus the overlapped parts\n    total_length = (3 * short_ruler_length) - (num_overlaps * overlap_length)\n\n    return total_length\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to cm\n    spacing_cm = 15\n    first_cauliflower_offset_cm = 20\n    cauliflower_width_cm = 45\n\n    # total space needed for one cauliflower including the space after it\n    total_space_per_cauliflower = cauliflower_width_cm + spacing_cm\n\n    # available planting length after placing the first cauliflower\n    available_length_cm = plot_length_cm - first_cauliflower_offset_cm\n\n    # number of cauliflowers that can be planted\n    number_of_cauliflowers = available_length_cm // total_space_per_cauliflower\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    days_14_pages = 3 * 14\n    days_9_pages = 2 * 9\n    day_12_pages = 1 * 12\n    total_pages = days_14_pages + days_9_pages + day_12_pages\n    total_days = 6\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    a_students = 8\n    b_students = 12\n    c_students = 20\n\n    # Calculating the greatest common divisor\n    gcd_ab = gcd(a_students, b_students)\n    gcd_abc = gcd(gcd_ab, c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # speed of sound in meters per second\n    distance = 1.5 * 10**3  # distance in meters\n\n    time = distance / speed_of_sound\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n    \n    # Initial situation equation: badminton has thrice the members of the bowling club\n    equation1 = Eq(badminton, 3 * bowling)\n    # After leaving equation: both clubs have the same number of members\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Each club's number of members in the end\n    members_end_badminton = solutions[badminton] - 36\n    members_end_bowling = solutions[bowling] - 4\n\n    return int(members_end_badminton), int(members_end_bowling)\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n\n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation 2: Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (wendy, vivien))\n\n    # Wendy's age in 5 years' time\n    wendy_future_age = ages[wendy] + 5\n\n    return wendy_future_age\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    zeros = 0\n    for i in range(301, 1000):\n        while i % 10 == 0:\n            zeros += 1\n            i //= 10\n        while i % 5 == 0:\n            zeros += 1\n            i //= 5\n    return zeros\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Given values\n    total_value = 504\n    average_value = 126\n    \n    # Calculate the number of cards based on total value and average value\n    num_cards = total_value // average_value  # Since they are all integers, use floor division\n    \n    # The numbers are in an arithmetic progression since the difference is constant (6)\n    # Given the number of cards, we can find the common difference and smallest number\n    # Using the formula for the sum of n terms of an arithmetic progression: S = n/2 * (a + l)\n    # where S is the sum of the progression, n is the number of terms, a is the first term, and l is the last term.\n    # We also know that l = a + (n - 1)d, where d is the common difference (6 in this case).\n    \n    # From the given, l - a = 6, we have l = a + 6\n    # Now, we substitute l in the sum equation: S = n/2 * (a + (a + 6))\n    # 504 = num_cards/2 * (2 * a + 6)\n    # 504 = num_cards * (a + 3)\n    # Dividing both sides by num_cards gives us the smallest number a\n    smallest_number = (total_value // num_cards) - 3\n    \n    return smallest_number\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1/i for i in range(10, 20))\n    integer_part = int(sum_of_fractions)\n    return integer_part\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('boys girls girls_swim girls_not_swim boys_swim boys_not_swim')\n    total_pupils = 1690\n\n    # equations derived from the problem statement\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(boys + girls, total_pupils)\n    equation5 = Eq(boys, boys_swim + boys_not_swim)\n    equation6 = Eq(girls, girls_swim + girls_not_swim)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # total pupils who can not swim is the sum of boys and girls who can not swim\n    pupils_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):  # Loop through two-digit numbers\n        if i % 6 == 0 and (i - 1) % 13 == 0:  # Check for a multiple of 6 that is one more than a multiple of 13\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30  # m/min\n    race_distance = 6990  # m\n    sleep_time = 215  # min\n    start_delay = 10  # min\n\n    # Distance covered by the rabbit before sleeping\n    distance_before_sleep = rabbit_speed * start_delay\n    \n    # Time turtle runs while the rabbit is sleeping\n    turtle_time_while_rabbit_sleeps = sleep_time + start_delay\n\n    # Distance covered by the turtle while the rabbit is sleeping\n    distance_turtle_while_rabbit_sleeps = turtle_speed * turtle_time_while_rabbit_sleeps\n    \n    # Time the rabbit needs to finish the race after waking up\n    rabbit_time_after_sleep = (race_distance - distance_before_sleep) / rabbit_speed\n    \n    # Total time turtle runs (including time while rabbit sleeps)\n    total_turtle_time = rabbit_time_after_sleep + turtle_time_while_rabbit_sleeps\n    \n    # Distance covered by the turtle in total time\n    total_distance_turtle = turtle_speed * total_turtle_time\n    \n    # Check who reaches the finish line first\n    if total_distance_turtle >= race_distance:\n        winner = 'turtle'\n        distance_between = total_distance_turtle - race_distance\n    else:\n        winner = 'rabbit'\n        # Distance covered by the rabbit when the turtle finishes\n        rabbit_distance_when_turtle_finishes = distance_before_sleep + rabbit_speed * (race_distance / turtle_speed)\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt - boris, 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    # money received in 2020\n    money_2020 = 484\n\n    # money received in 2019 is 10% less than in 2020\n    money_2019 = money_2020 / 1.1\n\n    # money received in 2018 is 10% less than in 2019\n    money_2018 = money_2019 / 1.1\n\n    return money_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total ways to arrange 7 people in a row\n    total_arrangements = factorial(7)\n    \n    # Ways to arrange the 3 people who don't want to stand next to each other\n    unwanted_arrangements = factorial(3) * factorial(5)\n    \n    # Subtracting the unwanted arrangements from the total arrangements\n    ans = total_arrangements - unwanted_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Given values\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    # Sum of n terms in an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        k = p\n        while n >= k:\n            count += n // k\n            k *= p\n        return count\n  \n    ans = count_factors(789, 5)\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term + 1)\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Given values\n    average_A = 76\n    average_B = 67\n    average_combined = 70\n    students_A = 20\n    \n    # Let students_B be the number of students in team B\n    # We need to find students_B such that the overall average is 70.\n    # The combined total score for teams A and B is:\n    # total_score = average_A * students_A + average_B * students_B\n    # The combined number of students is students_A + students_B\n    # The average combined score is:\n    # average_combined = total_score / (students_A + students_B)\n    # So we can write the equation:\n    # average_combined * (students_A + students_B) = average_A * students_A + average_B * students_B\n    # Now solve for students_B:\n    \n    # Rearrange equation to solve for students_B\n    students_B = (average_combined * students_A - average_A * students_A) / (average_B - average_combined)\n    \n    return int(students_B)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    max_schools = 100 // 4\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    # Loop over hours (00 - 23)\n    for hour in range(24):\n        # Loop over minutes (00 - 59)\n        for minute in range(60):\n            # Convert hour and minute to string format\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count occurrences of '4'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = list(permutations(digits, 3))\n    three_digit_numbers = [100*p[0] + 10*p[1] + p[2] for p in perms]\n    products = []\n    \n    for i in range(len(three_digit_numbers)):\n        for j in range(i+1, len(three_digit_numbers)):\n            num1 = three_digit_numbers[i]\n            num2 = three_digit_numbers[j]\n            if len(set(str(num1) + str(num2))) == 6: # ensure each digit is used only once\n                products.append(num1 * num2)\n    \n    ans = min(products)\n    return ans\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef maximum_product(perm):\n    # Construct the maximum 4-digit and 3-digit numbers\n    ABCD = int(''.join(map(str, perm[:4])))\n    EFG = int(''.join(map(str, perm[4:])))\n    return ABCD * EFG\n\ndef minimum_product(perm):\n    # Construct the minimum 4-digit and 3-digit numbers\n    ABCD = int(''.join(map(str, sorted(perm[:4]))))\n    EFG = int(''.join(map(str, sorted(perm[4:]))))\n    return ABCD * EFG\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n    \n    # Generate all permutations of digits 1-9 taken 7 at a time\n    for perm in permutations(range(1, 10), 7):\n        # Split the permutation into a 4-digit number and a 3-digit number\n        ABCD, EFG = perm[:4], perm[4:]\n        \n        # Calculate the sum of the 4-digit and 3-digit numbers\n        sum_numbers = int(''.join(map(str, ABCD))) + int(''.join(map(str, EFG)))\n        \n        # Check if the sum equals 1993\n        if sum_numbers == 1993:\n            # Update max and min products from the current permutation\n            max_product = max(max_product, maximum_product(perm))\n            min_product = min(min_product, minimum_product(perm))\n    \n    # Calculate the difference between the maximum and minimum products\n    ans = max_product - min_product\n    return ans\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_roll = 6  # Maximum steps he can roll with a regular dice\n    target_position = 25  # Target position\n    min_rolls = (target_position - 1) // max_roll  # Subtract 1 because he starts at position 1\n\n    if (target_position - 1) % max_roll > 0:\n        min_rolls += 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -100\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_distance = 40\n    slip_distance = 10\n    effective_climb = climb_distance - slip_distance\n    # Calculate the position of the mouse after climbing without the final climb\n    hours = (depth - climb_distance) // effective_climb\n    # Check if there's a remainder that would require an additional hour\n    if (depth - climb_distance) % effective_climb != 0:\n        hours += 1\n    # Add the final hour for the last climb\n    hours += 1\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    # Start from 29, as it is the largest number less than 30\n    # Then check lower numbers until we find a prime\n    for num in range(29, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    total_typists = 5\n    words_per_minute = 6000 / 20\n    typists_sick = 2\n    remaining_typists = total_typists - typists_sick\n    words_needed = 9000\n\n    new_rate = words_per_minute * remaining_typists / total_typists\n    time_needed = words_needed / new_rate\n\n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_per_cabbage = 0.96\n    total_cabbages = 8\n    total_lettuces = 6\n\n    total_cost = price_per_cabbage * total_cabbages\n    price_per_lettuce = total_cost / total_lettuces\n\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_num_plants = 11\n    removed_plants = 8\n    remaining_plants = original_num_plants - removed_plants\n\n    original_intervals = original_num_plants - 1\n    new_intervals = remaining_plants - 1\n\n    new_spacing = total_distance / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # convert start time to minutes\n    end_time = 14 * 60 + 5  # convert end time to minutes\n    duration = end_time - start_time  # find the duration of the call in minutes\n    cost_per_minute = 14\n    total_cost = duration * cost_per_minute  # calculate the total cost of the call\n    \n    return total_cost\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    \n    for i in range(100, 1000):\n        number = str(i)\n        if \"2\" in number and \"3\" in number:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_pay = pen_price + ruler_price\n    return total_pay\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    ans = 251 * 27\n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 10, 17)\n    end_date = datetime(2023, 12, 20)\n    sunday_count = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        start_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol definitions\n    apple_tarts, strawberry_tarts = symbols('apple_tarts strawberry_tarts')\n\n    # equation definitions based on problem\n    equation1 = Eq(apple_tarts, 2 * strawberry_tarts)\n    equation2 = Eq(apple_tarts * (strawberry_tarts * 0.40 + apple_tarts) / apple_tarts, 40)\n\n    # solve equations\n    solutions = solve((equation1, equation2), (apple_tarts, strawberry_tarts))\n\n    # calculate the total number of tarts\n    total_tarts = solutions[apple_tarts] + solutions[strawberry_tarts]\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from fractions import gcd\nfrom math import lcm\n\ndef solution():\n    first_light_period = 0.5  # in minutes\n    second_light_period = 0.75  # in minutes\n\n    # Total period when all three lights turn green together\n    total_period = 9  # in minutes\n    \n    # Calculate Least Common Multiple (LCM) for the first two lights\n    lcm_first_two = lcm(int(first_light_period * 60), int(second_light_period * 60)) / 60\n\n    # Since two lights already sync every lcm_first_two minutes, we need to find the period for the third light\n    # such that it, together with the lcm_first_two, will result in them all turning green every 9 minutes.\n    # That period has to be a divisor of the total_period (9 minutes) and also produce an integer number\n    # of periods when combined with lcm_first_two.\n\n    # Convert total_period to seconds\n    total_period_seconds = total_period * 60\n    \n    # Minimum period for third light\n    min_third_light_period = 30  # in seconds\n\n    # Find the period for the third light that is at least 30 seconds long\n    # and is a divisor of total_period_seconds\n    for third_light_period in range(min_third_light_period, total_period_seconds + 1):\n        if total_period_seconds % third_light_period == 0:\n            # Check if the LCM of all three periods equals the total period\n            if lcm(lcm_first_two * 60, third_light_period) == total_period_seconds:\n                return third_light_period / 60\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # There are 5 friends and 5 distinct skiboards.\n    # The number of ways to distribute the skiboards is 5! (5 factorial).\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_left = 18\n    tony_position_right = 17\n\n    tony_position_left = total_children - tony_position_right + 1\n\n    if henry_position_left < tony_position_left:\n        num_children_between = tony_position_left - henry_position_left\n    else:\n        num_children_between = henry_position_left - tony_position_left + 2\n\n    return num_children_between\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres_per_metre = 1000\n    ans = metres * millimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    # 20% of the puzzle fitted on the first day\n    first_day_pieces = 0.20 * total_pieces\n    # 60 pieces fitted on the second day\n    second_day_pieces = 60\n    # The ratio of fitted to unfitted pieces is 2:5 after second day\n    # Fitted pieces are now first_day_pieces + second_day_pieces\n    # Unfitted pieces are total_pieces - the number of fitted pieces\n    # Calculate number of fitted pieces:\n    fitted_pieces = first_day_pieces + second_day_pieces\n    unfitted_pieces = total_pieces - fitted_pieces\n    \n    # The ratio of fitted to unfitted is 2:5\n    ratio_eq = Eq(fitted_pieces / unfitted_pieces, 2/5)\n\n    # Solve for total_pieces\n    solution = solve((ratio_eq,), (total_pieces,))\n\n    return solution[total_pieces]\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    paid_amount = original_amount * 0.30\n    remaining_amount = original_amount - paid_amount\n\n    return remaining_amount\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Given number of legs\n    total_legs = 28\n    \n    # Legs count for given animals\n    cat_legs = 2 * 4\n    dog_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    \n    # Legs count for known animals\n    known_animal_legs = cat_legs + dog_legs + rabbit_legs\n    \n    # Since each bird has 2 legs, the number of birds can be found by \n    # subtracting the known legs from the total and dividing by 2\n    bird_legs = total_legs - known_animal_legs\n    birds = bird_legs // 2\n    \n    return birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time taken in hours until they meet\n\n    # Distance = Speed * Time\n    # Since they are traveling towards each other, we add their distances\n    distance = (jack_speed + rose_speed) * time\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from fractions import Fraction\n    \n    # Melvin's original number of cards\n    melvin_original = 40\n    \n    # Melvin gains cards from Nelson after the first round\n    gain_first_round = Fraction(5, 8) * melvin_original\n    melvin_after_first_round = melvin_original + gain_first_round\n\n    # Cards lost to Oliver in the second round by both Melvin and Nelson\n    lost_to_oliver = Fraction(1, 4) * melvin_original\n    \n    # After the second round\n    melvin_after_second_round = melvin_after_first_round - lost_to_oliver\n    nelson_after_second_round = lost_to_oliver\n\n    # Melvin gains card from Nelson in the final round\n    gain_final_round = Fraction(1, 8) * melvin_original\n    melvin_final = melvin_after_second_round + gain_final_round\n    nelson_final = nelson_after_second_round - gain_final_round\n\n    # Oliver has the same amount of cards as Melvin and Nelson after the final round\n    oliver_final = melvin_final\n\n    # Total number of cards they all had at first\n    total_initial_cards = melvin_original + (melvin_original + gain_first_round) - gain_final_round + (2 * lost_to_oliver) - lost_to_oliver\n    \n    return total_initial_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    import math\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Prime factorization of each number\n    prime_factors = {card: sorted(dict(math.factorize(card)).items()) for card in cards}\n    \n    # Create combinations of two and three cards\n    comb_2_cards = list(combinations(cards, 2))\n    comb_3_cards = list(combinations(cards, 3))\n    \n    # Function to calculate the product of prime factors\n    def prod_prime_factors(comb):\n        prod = {}\n        for card in comb:\n            factors = prime_factors[card]\n            for prime, exp in factors:\n                prod[prime] = prod.get(prime, 0) + exp\n        return prod\n        \n    # Find equal products for 2-card and 3-card combinations\n    for c2 in comb_2_cards:\n        prod_2 = prod_prime_factors(c2)\n        for c3 in comb_3_cards:\n            prod_3 = prod_prime_factors(c3)\n            if prod_2 == prod_3:\n                all_cards_set = set(c2).union(set(c3))\n                not_picked = set(cards) - all_cards_set\n                return list(not_picked)[0]\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum([i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0])\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    polly_age_at_first_child = 20\n    # Age difference between each child is 2 years\n    age_difference = 2\n\n    def polly_plus_children_ages(polly_age):\n        child1_age = polly_age - polly_age_at_first_child\n        child2_age = child1_age - age_difference\n        child3_age = child2_age - age_difference\n        return polly_age == (child1_age + child2_age + child3_age)\n    \n    # Start checking from Polly's age at first child birth until it's not possible for the sum to equal Polly's age\n    for age in range(polly_age_at_first_child, 100):\n         if polly_plus_children_ages(age):\n            return age\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple_factor = 5\n\n    weight_of_empty_suitcase = total_weight_with_presents / multiple_factor\n\n    return weight_of_empty_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes == int(small_boxes) and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age was 10.\n    combined_age_four_years_ago = 10\n    \n    # Every year, each dog ages 1 year, so together they age 2 years.\n    # In four years, their combined age will increase by 4 * 2.\n    combined_age_increase_in_four_years = 4 * 2\n    \n    # So, their current combined age is:\n    current_combined_age = combined_age_four_years_ago + combined_age_increase_in_four_years\n    \n    # In 2 more years, their combined age will increase by 2 * 2.\n    combined_age_increase_in_two_years = 2 * 2\n    \n    # The future combined age will be:\n    future_combined_age = current_combined_age + combined_age_increase_in_two_years\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let's denote the two numbers as x and y, with x being the larger number\n    # and y being the smaller number. According to the problem:\n    # x - y = 39 (difference between two numbers)\n    # x + y = 59 (sum of the two numbers)\n    \n    # We can solve the simultaneous equations for y:\n    # Adding the two equations, we get: 2x = 98 => x = 49\n    # Subtracting y from the sum equation: y = 59 - x\n    x = (39 + 59) / 2\n    y = 59 - x\n    \n    return y\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(14*m, 8*(10 + m) - 3)\n\n    m_value = solve(equation, m)\n\n    return m_value[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_now = x - 12 + y\n    return passengers_now\n\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    \n    while mother_age != 3 * (justin_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate A + B + C using one of the solution sets (positive integers only)\n    for sol in solutions:\n        if all(val.is_real and val > 0 for val in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    import math\n    ans = math.factorial(10)\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # Cora gives Qingle 8 sweets\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1), (cora, qingle))\n    \n    # Calculate the difference in the number of sweets they have at first\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # The graph passes through the origin, so we know that when x = 0, y = 0\n    # This means the y-intercept b is 0.\n    # The graph also passes through the point (4, 8), letting us find the slope m.\n    # Slope m can be calculated using the coordinates of the origin (0, 0) and the point (4, 8).\n\n    x1, y1 = 0, 0  # origin\n    x2, y2 = 4, 8  # given point\n\n    # Calculate the slope m\n    # Slope m = (y2 - y1) / (x2 - x1)\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Since the y-intercept b = 0, the equation simplifies to y = mx\n    # Return the equation in string format: \"y = mx\"\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent the number of seashells Jane has and e represent the number of seashells Eric has.\n    j, e = symbols('j e')\n    \n    # Initial ratio of Jane's to Eric's seashells: 5j = 7e\n    equation1 = Eq(5*e, 7*j)\n    \n    # New ratio after Eric gives Jane 6 seashells: (j + 6)/(e - 6) = 11/13\n    equation2 = Eq((j + 6) * 13, (e - 6) * 11)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (j, e))\n    \n    # Total seashells they have is the sum of Jane's and Eric's seashells.\n    total_seashells = solutions[j] + solutions[e]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n\n    # Warren's additions start from 20 and decrease by 1 each time\n    # Naida's subtractions start from 1 and increase by 1 each time\n    for i in range(20, 0, -1):\n        # Warren adds\n        current_number += i\n        largest_number = max(largest_number, current_number)\n        # Naida subtracts\n        current_number -= (21 - i)\n        \n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    # First faucet fills the pool in 20 hours\n    first_faucet_rate = 1 / 20\n    \n    # Each of the other three faucets fills the pool 3 times faster than the first\n    other_faucet_rate = 3 * first_faucet_rate\n    \n    # Since there are three such faucets, we multiply the rate by 3\n    total_other_faucets_rate = 3 * other_faucet_rate\n    \n    # Total rate when all faucets are open\n    total_rate = first_faucet_rate + total_other_faucets_rate\n    \n    # Time it takes to fill the pool with all the faucets open is the reciprocal of the total rate\n    time_to_fill = 1 / total_rate\n\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    num = 48 * 925 * 38 * 435\n    count_zeroes = 0\n\n    while num % 10 == 0:\n        count_zeroes += 1\n        num //= 10\n\n    return count_zeroes\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['5', '3', '9', '4', '8']\n    even_numbers = []\n\n    # Get all permutations of the digits\n    perm = permutations(digits)\n\n    # Iterate through permutations and find even 5-digit numbers\n    for p in perm:\n        number = int(''.join(p))\n        # Check if number is even and it is a 5-digit number\n        if number % 2 == 0 and len(str(number)) == 5:\n            even_numbers.append(number)\n\n    return min(even_numbers)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils // 4\n\n    neither = total_pupils - (piano_pupils + violin_pupils - piano_and_violin)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    initial_amount = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = initial_amount * (1 + interest_rate * years)\n\n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    school_exit_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    walking_to_bus_stop_time = (bus_catch_time - school_exit_time).seconds // 60\n    bus_drop_off_time = bus_catch_time + bus_trip_duration\n    walking_home_time = (home_arrival_time - bus_drop_off_time).seconds // 60\n\n    total_walking_time = walking_to_bus_stop_time + walking_home_time\n\n    return total_walking_time\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for each digit of a four-digit number: A, B, C, D\n    A, B, C, D = symbols('A B C D')\n\n    # Set up equations based on the given conditions\n    eq1 = Eq(A, D/4)                          # A is a quarter of D\n    eq2 = Eq(B, A - 1)                        # B is one less than A\n    eq3 = Eq((10**3)*A + (10**2)*B + 10*C + D, 4*(D*10**3 + C*10**2 + B*10 + A))  # ABCD * 4 = DCBA\n    eq4 = Eq(C, 0)                            # C must be 0 as D cannot be 4 or above (as A would then be not a single digit)\n    \n    # Digits cannot be the same and must be within the range of proper digits (0-9)\n    conditions = (A > 0, A < 10, B > 0, B < 10, C >= 0, C < 10, D > 0, D < 10, A != B, A != C, A != D, B != C, B != D, C != D)\n\n    # Solve the system of equations with the given conditions\n    solutions = solve((eq1, eq2, eq3, eq4) + conditions, (A, B, C, D), dict=True)\n\n    # Find the valid solution that fits all conditions\n    for solution in solutions:\n        A_val, B_val, C_val, D_val = solution[A], solution[B], solution[C], solution[D]\n        # Check if multiplying by 4 actually reverses the digits\n        if A_val * 1000 + B_val * 100 + C_val * 10 + D_val == 4 * (D_val * 1000 + C_val * 100 + B_val * 10 + A_val):\n            # Construct the number from the digits\n            return A_val * 1000 + B_val * 100 + C_val * 10 + D_val\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    subtracted_val = result - 10\n    original_number = subtracted_val * 3\n    return original_number\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean = 5\n    total_sum = mean * (len(numbers) + 1)\n    current_sum = sum(numbers)\n    a = total_sum - current_sum\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    missing_number = (total - 30000 - 452) // 2\n    return missing_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    pieces = 2\n    length_per_piece_m = (ribbon_length_cm / pieces) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_row = 6 + 1 + 7  # Pupils to the left, Victoria, pupils to the right\n    rows = 1 + 1 + 8  # Rows in front, Victoria's row, rows behind\n    total_pupils = pupils_in_row * rows\n    return total_pupils\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Using Pigeonhole Principle: if Lina takes one sock of each colour, she does not achieve a pair.\n    # To guarantee a pair, she must take one more sock, i.e., one of each plus one more sock.\n\n    # Worst case scenario: Lina gets one sock of each colour, which do not form a pair.\n    socks_of_each_colour = 1\n\n    # Now, no matter what the next sock is, it will form a pair with one of the previously taken socks.\n    # So, we add one more sock to guarantee at least one pair.\n    min_socks_to_ensure_pair = (socks_of_each_colour * 3) + 1  # Three colours plus one sock\n\n    return min_socks_to_ensure_pair\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n    total_marks = average_marks * total_tests\n    \n    marks_remaining_test = total_marks - total_marks_two_tests\n    return marks_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100  # converting percentage to decimal\n    time = 1  # time in years\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 3) / 4) * 9, 81)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum([1 / (i * (i + 1)) for i in range(1, 20, 2)])\n    denominator_sum = sum([1 / ((20 - i) * (i + 1)) for i in range(11, 16)])\n    \n    return numerator_sum / denominator_sum\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Peter's starting distance from friend's house at 8.00 am\n    distance_at_8_am = 6300  # in meters\n\n    # Peter's distance from friend's house at 8.30 am\n    distance_at_8_30_am = 1800  # in meters\n    \n    # Calculate the distance Peter jogged in 30 minutes\n    distance_jogged_in_30_min = distance_at_8_am - distance_at_8_30_am\n    \n    # The time Peter took to jog this distance\n    time_taken_for_1800m = timedelta(minutes=30) * (distance_at_8_30_am / distance_jogged_in_30_min)\n    \n    # Peter's jogged start time\n    start_time = datetime.strptime('08:00', '%H:%M')\n    \n    # The time Peter will reach his friend's house\n    arrival_time = start_time + time_taken_for_1800m\n\n    # Format the time to be returned\n    ans = arrival_time.strftime('%H:%M')\n    return ans\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n    \n    # Total area of the isosceles right triangle\n    total_area = (2**2) / 2\n    \n    # Area of the quarter circle with radius 1 inside the triangle (1/4 of pi * r^2)\n    quarter_circle_area = sp.pi * (1**2) / 4\n    \n    # Probability is the ratio of the quarter circle area to the total area\n    probability = quarter_circle_area / total_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    x = symbols('x')\n    mr_smith_sugar = 300 * Rational(50, 100) + 600 * Rational(20, 100)\n    mrs_smith_sugar = 700 * Rational(10, 100) + 300 * Rational(x, 100)\n    \n    total_volume_mr_smith = 300 + 600\n    total_volume_mrs_smith = 700 + 300\n    \n    equation = Eq(mr_smith_sugar / total_volume_mr_smith, mrs_smith_sugar / total_volume_mrs_smith)\n    \n    solution = solve(equation, x)\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = (3 / 4) * total_candy\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = (1 / 3) * remaining_candy\n    final_candy = remaining_candy - candy_given_to_brother\n\n    return int(final_candy)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages\n    may_age_when_10, kenny_age, kenny_bro_age = symbols('may_age_when_10 kenny_age kenny_bro_age')\n\n    # Given that May will be 10 years old\n    may_current_age = 7\n    may_age_when_10 = 10\n\n    # Kenny is 2 years older than his younger brother\n    equation1 = Eq(kenny_age, kenny_bro_age + 2)\n\n    # When May is 10 years old, the sum of the ages of Kenny and his brother\n    # will be 3 times the age of May\n    equation2 = Eq(kenny_age + kenny_bro_age, 3 * may_age_when_10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny_age, kenny_bro_age))\n\n    # Calculate the difference in age between Kenny and May this year\n    kenny_current_age = solutions[kenny_age] - (may_age_when_10 - may_current_age)\n    age_difference = kenny_current_age - may_current_age\n\n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # 1 donut costs $10/7 and 1 muffin costs $6/3\n    price_donut = 10 / 7\n    price_muffin = 6 / 3\n    \n    # Let the total money Amy had initially be x.\n    # She spent x/2 on donuts and x/2 on muffins.\n    # Let the number of muffins she bought be m.\n    # Then the number of donuts she bought is m + 54.\n    \n    # Set up the equation based on the above information:\n    # (price_donut * (m + 54)) + (price_muffin * m) = x\n    # We know the amount spent on donuts is x/2, so replace price_donut * (m + 54) with x/2\n    # price_muffin * m = x/2\n    # Now solve for x in terms of m: x = 2 * price_muffin * m\n    # Then, replace x in the donut equation and solve for m:\n    # price_donut * (m + 54) = x/2 = price_muffin * m\n    # m = 54 * price_donut / (price_muffin - price_donut)\n    \n    m = 54 * price_donut / (price_muffin - price_donut)\n    \n    # Now calculate x based on the value of m found\n    x = 2 * price_muffin * m\n    \n    return x\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Calculate total cost\n    total_cost = 10  # in pounds\n\n    # Calculate number of bags\n    kg_to_g = 5 * 1000  # convert kg to g\n    sweets_per_bag = 250  # g of sweets per bag\n    num_bags = kg_to_g // sweets_per_bag\n\n    # Calculate total revenue\n    price_per_bag = 0.65  # price per bag in pounds\n    total_revenue = num_bags * price_per_bag\n\n    # Calculate profit\n    profit = total_revenue - total_cost\n\n    # Calculate percentage profit\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    max_apples = 0\n    for distribution in combinations_with_replacement(range(1, 15), 5):\n        if sum(distribution) == 14:\n            max_apples = max(max_apples, max(distribution))\n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th tooth and the 9th tooth is 30mm for 5 gaps\n    # (because there are 5 teeth and each two consecutive teeth have a gap between them)\n    # Therefore, the gap between each neighboring teeth is 30mm / 5\n    gap = 30 / 5\n    \n    # There are 100 teeth, so there are 99 gaps in total.\n    # The total length of the comb is the total length of all gaps.\n    total_length_mm = gap * (100 - 1)\n    \n    # Convert the total length from mm to cm\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the year when the grandmother was 80\n    grandmother_year_80 = 2008\n    \n    # Calculate the year when the mum was 40\n    mum_year_40 = 1996\n    \n    # Calculate the difference in years between grandmother being 80 and mum being 40\n    years_diff = grandmother_year_80 - mum_year_40\n    \n    # Since the mum was 40, we calculate how many years ago she was 25\n    years_ago_mum_25 = 40 - 25\n    \n    # The grandmother's age when the mum was 25 can be calculated as:\n    # (Grandmother's age when she was 80) - (Years between grandmother being 80 and mum being 40) - (Years ago mum was 25)\n    grandmother_age_when_mum_25 = 80 - years_diff - years_ago_mum_25\n\n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(5)\n    adjacent_ways = factorial(4) * 2\n\n    non_adjacent_ways = total_ways - adjacent_ways\n\n    return non_adjacent_ways\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from math import comb\n\n    # Deduct one ice-cream cone for each friend first, because each of them must get at least one.\n    remaining_ice_cream = 5 - 3\n\n    # Now the problem is reduced to distributing the remaining ice-cream cones to three people (the bars).\n    # This is a problem of distributing n identical items into r bins, which can be solved by the formula: comb(n + r - 1, r - 1)\n    ans = comb(remaining_ice_cream + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = 2/3 * total_vegetables\n    remaining_after_monday = total_vegetables - monday_sold\n    tuesday_sold = 2/5 * remaining_after_monday\n    total_sold = monday_sold + tuesday_sold\n\n    return total_sold\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Taking into account the worst-case scenario for pigeonhole principle problems.\n    # In the worst case, we consider picking up the balls without getting 16 of one color\n    # and 13 of another color until the last possible moment.\n    # To avoid getting 16 of the same color, we can pick at most 15 of each color.\n    # Similarly, to avoid getting 13 of another color, we can pick at most 12.\n    \n    # However, since the second color quantity we want (13) is less than the first one (16),\n    # after picking up 12 of each color we would already have satisfied the \"13 balls of one color\" condition.\n    \n    # So let's calculate how many balls we can pick without satisfying either condition:\n    # We can pick up to 15 balls of each of the 5 colors, because picking the 16th would satisfy\n    # the first condition:\n    \n    # The condition that will be satisfied last is the \"16 balls of one color\", so we aim for that.\n    # Calculate 15 balls for each color as the sublimit to not reach 16 of any.\n    max_balls_without_any_16 = (15 * 5)  # 15 for each of the 5 colors\n    \n    # Now, we add one more ball to ensure we get at least 16 of one color:\n    balls_needed = max_balls_without_any_16 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    ans = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, 856 // 5 + 1))\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p - q, 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given_away = total_biscuits / 4\n    biscuits_left = total_biscuits - biscuits_given_away\n    \n    return biscuits_left\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    B, C, A = symbols('B C A')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (B, C, A))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    original_money = spent / (1 - remaining_fraction)\n    return original_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams //= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    initial_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_ratio = 3 / 5\n\n    distance_walked_together = initial_distance - remaining_distance\n    lucas_distance = (distance_walked_together * lucas_to_mother_ratio) / (1 + lucas_to_mother_ratio)\n    \n    return lucas_distance\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n\n    sum_of_terms = number_of_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_initial / people_initial\n    pizzas_needed = unit_rate * people_final\n\n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt\n    \n    count = 0\n    for i in range(1, 2017):\n        if sqrt(i * 72).is_integer():\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_pay = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_pay\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_class_students, small_class_students = symbols('big_class_students small_class_students')\n\n    # Each student in the big class got 2 apples\n    # Each student in the small class got 2 apples\n    # Total apples = 48\n    eq1 = Eq(2 * big_class_students + 2 * small_class_students, 48)\n    \n    # Each student in the big class got 3 oranges\n    # Each student in the small class got 2 oranges\n    # Total oranges = 55\n    eq2 = Eq(3 * big_class_students + 2 * small_class_students, 55)\n\n    solutions = solve((eq1, eq2), (big_class_students, small_class_students))\n    \n    return solutions[small_class_students]\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    danny_age_now, efron_age_now, years = symbols('danny_age_now efron_age_now years')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(danny_age_now - efron_age_now, 30)  # Danny is 30 years older than Efron\n    equation2 = Eq(danny_age_now / efron_age_now, 8/3) # The ratio of their ages is 8:3 now\n\n    # Solve the equations to find their current ages\n    current_ages = solve((equation1, equation2), (danny_age_now, efron_age_now))\n\n    # Extract Danny's and Efron's ages separately\n    danny_current_age = current_ages[danny_age_now]\n    efron_current_age = current_ages[efron_age_now]\n\n    # Now create an equation for the future ages and their ratio\n    equation3 = Eq((danny_current_age + years) / (efron_current_age + years), 5/3)\n\n    # Solve for the number of years needed for the age ratio to be 5:3\n    future_years = solve(equation3, years)\n\n    # Return the number of years as the answer\n    return future_years[0]\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    cookies_wanted = 150\n\n    butter_needed = (butter_used * cookies_wanted) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Let x be the number of children at the party.\n    # The following congruences represent the given conditions:\n    # x ≡ 0 (mod 5) [No child sits out when grouped in 5s]\n    # x ≡ 6 (mod 7) [One child sits out when grouped in 7s, so it's 1 less than a multiple of 7, i.e., 7k+6]\n    # x ≡ 7 (mod 8) [One child sits out when grouped in 8s, so it's 1 less than a multiple of 8, i.e., 8k+7]\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    \n    # Using the Chinese Remainder Theorem, we find a solution for x.\n    lcm_solution = solve_congruence(*congruences)\n    \n    # The CRT gives us the least non-negative solution for x.\n    ans = lcm_solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(0, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10:  # Ensure the first digit is valid for a 3-digit number.\n            for third_digit in range(0, 10):\n                sum_digits = first_digit + second_digit + third_digit\n                if 9 < sum_digits < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose_pencil_and_ruler = pencils * rulers\n    ways_to_choose_pencil_and_pen = pencils * pens\n    ways_to_choose_ruler_and_pen = rulers * pens\n\n    total_ways = ways_to_choose_pencil_and_ruler + ways_to_choose_pencil_and_pen + ways_to_choose_ruler_and_pen\n\n    return total_ways\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    return -6 / 6 == 6\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage calculations\n    # In a single round-robin, each team plays every other team once.\n    # Since there are 4 teams in each group, each team will play 3 games. There are 8 groups.\n    # Total group games = 3 games per team * 4 teams in a group / 2 (each game is counted twice) * 8 groups\n    group_games = 3 * 4 / 2 * 8\n\n    # Knockout stage calculations\n    # After group stage, we have 16 teams for knockout.\n    # In knockout stage, each match eliminates one team.\n    # To find the top team from 16, we need 15 matches\n    # (1 match for the last 2, 2 for the last 4, 4 for the last 8, and so on until 16).\n    # The 16 teams will be reduced to 8, 4, 2, and finally 1 winner.\n    # Top 8: 8 matches to decide (16 to 8 teams)\n    # Top 4: 4 matches to decide (8 to 4 teams)\n    # Top 2: 2 matches to decide (4 to 2 teams)\n    # The final and the 3rd place match\n    knockout_games = 8 + 4 + 2 + 1  # The top 8, top 4, top 2, final and third place match\n\n    # Total games played = Group stage games + Knockout stage games\n    total_games = group_games + knockout_games\n\n    return int(total_games)\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    num = 210 / 0.7\n    return num\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    apple, banana = symbols('apple banana')\n\n    # Create the system of equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams\n    n = symbols('n')\n\n    # The number of matches played is n choose 2, which should equal 15.\n    equation = Eq(n * (n - 1) / 2, 15)\n\n    # Solve the equation for n.\n    n_value = solve(equation, n)\n\n    # We want the positive value of n, as the number of teams cannot be negative.\n    return max(n_value)\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways = pencils * rulers * pens\n\n    return ways\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    number = 224\n    prime_factors = {}\n    divisor = 2\n    while number > 1:\n        while number % divisor == 0:\n            prime_factors[divisor] = prime_factors.get(divisor, 0) + 1\n            number //= divisor\n        divisor += 1\n\n    ans = 1\n    for count in prime_factors.values():\n        ans *= (count + 1)\n\n    return ans\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    num_list = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(num_list)\n    return ans\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, tshirt = symbols('shorts tshirt')\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, tshirt))\n    \n    return solutions[tshirt]\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n    third_term = second_term + difference\n    return third_term\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t represent the number of triangles, and t+82 represents the number of quadrilaterals\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n\n    # Each triangle has 3 sides, each quadrilateral has 4 sides, and each pentagon has 5 sides\n    # The number of quadrilaterals = triangles + 82\n    # There are 2 pentagons\n    equation1 = Eq(3*triangles + 4*quadrilaterals + 5*pentagons, 394)\n    equation2 = Eq(quadrilaterals, triangles + 82)\n    equation3 = Eq(pentagons, 2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangles, quadrilaterals, pentagons))\n\n    return solutions[quadrilaterals]\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    wrong_points = -2\n    total_points = 44\n\n    # Let x be the number of correct answers\n    # Let y be the number of wrong answers\n    # x + y = total_questions (since Eddie answered all questions)\n    # correct_points*x + wrong_points*y = total_points\n\n    # From the first equation: y = total_questions - x\n    # Substitute y in the second equation:\n    # correct_points*x + wrong_points*(total_questions - x) = total_points\n    # Solve for x\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if correct_points*x + wrong_points*y == total_points:\n            return x\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    num_intervals = 3 # because there are three intervals between four posts\n\n    total_distance = distance_between_posts * num_intervals\n    \n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for num in range(lcm, 1000, lcm):  # Start from lcm and check each multiple within the range of a 3-digit number\n        if str(num).startswith('6'):\n            return num\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of sweets Rachel has\n    # Let a represent the original number of sweets Alice has\n    r, a = symbols('r a')\n\n    # Equation 1: If Rachel gives Alice 10 pieces, they would have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: If they both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total number of sweets they originally had is the sum of r and a\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let's denote the number of all-girl teams as x.\n    # According to the problem:\n    # The number of all-boy teams is 2x (iⅲ)\n    # The total number of teams is 150/3 = 50\n    # 15 teams have only 1 boy, which means 15 * 2 = 30 girls in these teams.\n    # 27 teams have two or more boys, so there are 50 - 27 = 23 teams with 0 or 1 boy.\n    # Hence, the number of all-girl teams (x) plus 15 teams with 1 boy is 23.\n    # So x + 15 = 23 => x = 8 (all-girl teams)\n    # The number of all-boy teams is therefore 2 * 8 = 16.\n    \n    # If there are 8 all-girl teams, that means there are 8 * 3 = 24 girls in all-girl teams.\n    # Adding the girls from the 15 teams with only 1 boy, we get:\n    # 24 (from all-girl teams) + 30 (from teams with 1 boy) = 54 girls in total\n\n    all_girl_teams = 23 - 15\n    girls_from_all_girl_teams = all_girl_teams * 3\n    girls_from_teams_with_one_boy = 15 * 2\n    total_girls = girls_from_all_girl_teams + girls_from_teams_with_one_boy\n\n    return total_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum([int(digit) for digit in str(product)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Total number of blue gloves (left + right)\n    blue_gloves = 1 + 3\n    # Total number of green gloves (left + right)\n    green_gloves = 2 + 4\n    \n    # If Dilly picks all blue gloves, then pick one green to ensure a pair\n    blue_picks_for_pair = blue_gloves + 1\n\n    # If Dilly picks all green gloves, then pick one blue to ensure a pair\n    green_picks_for_pair = green_gloves + 1\n    \n    # Smallest number of gloves needed for a guaranteed pair\n    ans = min(blue_picks_for_pair, green_picks_for_pair)\n\n    return ans\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    def base7_subtract(a, b):\n        result = \"\"\n        carry = 0\n        \n        # Convert to base 10 to perform the operation\n        num_a = int(str(a), 7)\n        num_b = int(str(b), 7)\n        \n        # Subtract in base 10\n        num_result = num_a - num_b\n        \n        # Convert back to base 7\n        if num_result < 0:\n            result = \"-\" + str(abs(num_result))\n        else:\n            result = \"\"\n            while num_result > 0:\n                result = str(num_result % 7) + result\n                num_result //= 7\n\n        return result if result != \"\" else \"0\"\n    \n    # Subtract 34 from 61 in base 7\n    ans = base7_subtract(61, 34)\n    return ans\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Let's denote the weight of one dog as 'd', one rabbit as 'r', and one chicken as 'c'.\n    # According to the problem, we have the following relationships:\n    # 1 dog = 8 rabbits -> d = 8r\n    # 1 rabbit = 2 chickens -> r = 2c\n    # We need to find the equivalent number of chickens that weigh as much as one dog.\n    # Substituting the second equation into the first, we get:\n    # d = 8r -> d = 8 * (2c)\n    # Therefore:\n    # d = 16c\n    # So, 1 dog weighs as much as 16 chickens.\n\n    num_chickens = 16  # this is the number of chickens that weigh as much as 1 dog\n    return num_chickens\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_initial_candies = 5 * 12\n    total_students_after = 5 + 1\n    candies_per_student_after = total_initial_candies // total_students_after\n    return candies_per_student_after\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # s represents the speed needed to arrive at 9 am.\n    # d represents the distance between Town A and Town B.\n    # let the difference in times between 10 am and 9 am be t1 = 1 hour\n    # let the difference in times between 8 am and 9 am be t2 = -1 hour (since it's earlier)\n\n    # For the first case with speed 10 km/h:\n    # Distance = Speed * Time\n    # d = 10 * (t + 1) where t is the time taken to travel at the unknown speed s for arriving at 9 am\n    \n    # For the second case with speed 15 km/h:\n    # d = 15 * (t - 1)\n\n    # As the distances are equal, we set the equations equal to each other:\n    # 10 * (t + 1) = 15 * (t - 1)\n    # By simplifying the equation:\n    # 10t + 10 = 15t - 15\n    # 10 = 5t - 15\n    # 25 = 5t\n    # t = 5\n\n    # Now, we use the time found to calculate the distance d at the unknown speed s:\n    # d = s * t\n    # d = s * 5\n\n    # We know that at 10 km/h for an additional 1 hour the distance d is covered:\n    # d = 10 * (5 + 1)\n    # d = 10 * 6\n    # d = 60 km\n\n    # Now, we have the distance and we want to find the speed s to arrive at 9 am:\n    # d = s * 5\n    # 60 = s * 5\n    # s = 60 / 5\n    # s = 12 km/h\n\n    # Therefore, Ben must cycle at 12 km/h to arrive at 9 am.\n    return 12\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 5 == 4 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    letters = \"REVISE\"\n    letter_counts = { letter:letters.count(letter) for letter in set(letters) }\n    \n    total_permutations = factorial(len(letters))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_factor\n    return final_value\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pins Eugene originally had, and y be the number that Yuna originally had.\n    eugene, yuna = symbols('eugene yuna')\n\n    # Eugene had 3 times as many pins as Yuna.\n    equation1 = Eq(eugene, 3 * yuna)\n\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene.\n    equation2 = Eq(yuna + 76, (7/9) * eugene)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_diff = 52\n    boys, girls = 0, 0\n\n    # Start with a square size of 1 and increment it by 2 to maintain the pattern of boys and girls\n    size = 1\n    while True:\n        if size % 2 == 0:  # If the size is even, it's a girl's layer\n            girls += size * 4 - 4  # Number of girls in the current layer\n        else:  # If the size is odd, it's a boy's layer\n            boys += size * 4 - 4  # Number of boys in the current layer\n\n        # Check if the difference matches the required difference\n        if boys - girls == total_diff:\n            # Total number of students is the sum of boys and girls\n            total_students = boys + girls\n            break\n\n        # Increment the size for the next layer of students\n        size += 2\n\n    return total_students\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n\n    sale_price = normal_price * (1 - (discount_percentage / 100))\n    \n    return sale_price\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Find the digit A such that the number 12345A is divisible by 9\n    # To be divisible by 9, the sum of the digits of the number must be divisible by 9\n    sum_digits = 1 + 2 + 3 + 4 + 5\n    for A in range(10):\n        if (sum_digits + A) % 9 == 0:\n            # Check the remainder when the number is divided by 4\n            # For a number to be divisible by 4, the last two digits must form a number divisible by 4\n            remainder = (50 + A) % 4\n            return remainder\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(2*n+1)\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To win the game, Kelly needs to leave an amount of matches that is a multiple of 3 for Dan.\n    # This is because whatever Dan takes (1 or 2 matches), Kelly can take 2 or 1 matches respectively and still\n    # be left with a multiple of 3, eventually leading to Kelly taking the last match.\n    # So Kelly must take 1 match to leave 10 matches, which is not a multiple of 3,\n    # and in every subsequent turn, she can leave Dan with a number of matches that is a multiple of 3.\n\n    return 1\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # The fraction of the garden that is pink flowers is (1/2) * (4/7) = 4/14 = 2/7\n    # Since there are 6 more red flowers than pink flowers,\n    # this means that (1/2) * total_flowers - (2/7) * total_flowers = 6\n    # (7/14 - 4/14) * total_flowers = 6\n    # (3/14) * total_flowers = 6\n    # total_flowers = 6 * (14/3)\n    \n    total_flowers = 6 * (14 / 3)\n    return int(total_flowers)\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = Fraction(5, 1) + Fraction(1, 7) + Fraction(3, 1) + Fraction(3, 11) + Fraction(1, 1) + Fraction(13, 23)\n    denominator = Fraction(3, 1) + Fraction(3, 7) + Fraction(2, 1) + Fraction(2, 11) + Fraction(1, 1) + Fraction(1, 23)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    \n    num_kids = 3\n    num_ways = factorial(num_kids)\n    \n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_stickers = 20\n    nicole_stickers = jason_stickers + 18 + 5  # Nicole has 18 + 5 stickers more than Jason after giving 18\n\n    return nicole_stickers\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Let the number of cars be 'c' and number of motorcycles be 'm'\n    # We have two equations based on the problem:\n    # 1. c + m = 27 (total vehicles)\n    # 2. 4c + 2m = 78 (total wheels)\n    # From equation (1), we can express m as m = total_vehicles - c\n    # Substitute m into equation (2)\n\n    # 4c + 2(total_vehicles - c) = 78\n    # 4c + 2*27 - 2c = 78\n    # 2c + 54 = 78\n    # 2c = 78 - 54\n    # 2c = 24\n    # c = 24 / 2\n    # c = 12\n    cars = (total_wheels - 2 * total_vehicles) / 2 \n    return int(cars)\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions: length (L), breadth (B), height (H)\n    # New dimensions: length (1.10L), breadth (4/5 * B), height (11/10 * H)\n    \n    # Old Volume = L * B * H\n    # New Volume = 1.10L * (4/5 * B) * (11/10 * H)\n    # New Volume = L * B * H * 1.10 * 4/5 * 11/10 \n\n    # New Volume as a percentage of Old Volume\n    # (New Volume / Old Volume) * 100\n    percentage_increase = (1.10 * (4/5) * (11/10)) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    # Initialize the number of ways to 0\n    ways = 0\n    \n    # The total weight we need to achieve\n    total_weight = 77\n    \n    # Start looping through the number of 2-gram weights\n    for two_gram_weights in range(0, total_weight + 1, 2):\n        # The remaining weight that needs to be made up by 3-gram weights\n        remaining = total_weight - two_gram_weights\n        \n        # If the remaining weight is divisible by 3, we have a valid combination\n        if remaining % 3 == 0:\n            ways += 1\n    \n    # Return the number of ways 77 grams can be made using 2-gram and 3-gram weights\n    return ways\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n    \n    # Since marshals are spread equally, the intervals are between consecutive marshals\n    # The first marshal is at the start and the last marshal is at the finish\n    # So, there are (num_marshals - 1) intervals in the 5-km race\n    num_intervals = num_marshals - 1\n    \n    # Convert the total distance to metres\n    total_distance_m = total_distance_km * 1000\n    \n    # Calculate the distance between two marshals\n    distance_between_marshals_m = total_distance_m / num_intervals\n    \n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180  # meters per minute\n    time1 = 6     # minutes\n    speed2 = 120  # meters per minute\n    time2 = 8     # minutes\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    \n    # Initial counts of red and green tiles\n    red_tiles = 0\n    green_tiles = 0\n    \n    for layer in range(0, side_length // 2):\n        if layer % 2 == 0:\n            # Layer is red\n            red_tiles += (side_length - 2 * layer) ** 2 - (side_length - 2 * (layer + 1)) ** 2\n        else:\n            # Layer is green\n            green_tiles += (side_length - 2 * layer) ** 2 - (side_length - 2 * (layer + 1)) ** 2\n    \n    # Calculate the dominant color and the difference\n    if red_tiles > green_tiles:\n        dominant_color = \"red\"\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = \"green\"\n        more_tiles = green_tiles - red_tiles\n    \n    return more_tiles\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4 / 7)\n    ans = round(mixed_number, 1)\n    return ans\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03\n\n    # Interest after the first year\n    first_year_interest = initial_amount * interest_rate\n    # Total amount at the end of the first year\n    first_year_total = initial_amount + first_year_interest\n    # Interest after the second year (compounded yearly)\n    second_year_interest = first_year_total * interest_rate\n    # Total interest earned at the end of the second year\n    total_interest = first_year_interest + second_year_interest\n\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time = 1 * 60 + 20  # minutes in one hour and twenty minutes\n    num_pictures = total_time / time_for_one_picture\n    return int(num_pictures)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = '428571'  # The recurring sequence of digits in 3/7\n    position = 69 - 1  # Adjust for 0-indexing\n    digit_index = position % len(recurring_sequence)  # Find the index within the repeating sequence\n    ans = recurring_sequence[digit_index]\n    return int(ans)\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    vastco_2014 = 100\n    megacorp_2014 = vastco_2014 / (1 + 0.68)\n    \n    vastco_2015 = vastco_2014 * (1 + 0.32)\n    megacorp_2015 = vastco_2015 / (1 + 0.44)\n    \n    megacorp_growth = ((megacorp_2015 - megacorp_2014) / megacorp_2014) * 100\n    return megacorp_growth\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')  # Represent the total number of sweets by y\n    sweets_left = y / 2  # Samantha gives half away, so she has half left\n\n    return sweets_left\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 1.5\n    first_day_sales = 0.7 * planned_profit\n    second_day_sales = 1 - 0.7\n    total_profit = 0.82 * planned_profit\n\n    # Calculate profit made on the second day\n    second_day_profit = total_profit - first_day_sales\n\n    # Calculate the selling price on the second day (since second day sales fraction is 1 - 0.7)\n    second_day_selling_price = second_day_profit / second_day_sales\n\n    # Calculate the discount rate on the second day\n    discount_rate = (1 - second_day_selling_price) * 100 # Convert to percentage\n\n    return discount_rate\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_solution = 300 * 0.35\n    daisy_solution = 200 * 0.50\n    total_salt = dylan_solution + daisy_solution\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    \n    return concentration * 100  # Returning the percentage concentration\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles, empty_bottles = 48, 48\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n        if empty_bottles == 3:\n            total_bottles += 1\n            break\n    return total_bottles\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the ages of the children\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(older_daughter - younger_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # The youngest child could be either the younger daughter or the older daughter,\n    # depending on the obtained solution. We take the minimum age as the answer.\n    youngest_age = min(solutions[younger_daughter], solutions[older_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits for 1-9\n    one_digit = 9 * 1\n    # Calculate the number of digits for 10-99\n    two_digits = (99 - 10 + 1) * 2\n    # Calculate the number of digits for 100-113\n    three_digits = (113 - 100 + 1) * 3\n    \n    # Sum all calculated digits\n    total_digits = one_digit + two_digits + three_digits\n    \n    return total_digits\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pearls = symbols('total_pearls')\n    \n    # According to the problem, total pearls is equal to half on the floor,\n    # a fourth under the chair, a sixth in her lap, and three on the strand.\n    equation = Eq(total_pearls / 2 + total_pearls / 4 + total_pearls / 6 + 3, total_pearls)\n    \n    # Solve the equation for total number of pearls\n    ans = solve(equation, total_pearls)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    # Let's define the number of erasers John's brother has as x\n    # Therefore, John has x + 32 erasers\n    # According to the problem, together they have 246 erasers\n    # So, the equation is x + (x + 32) = 246\n\n    # Calculate the value of x\n    x = (246 - 32) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of each color of rabbit\n    black, white, grey = symbols('black white grey')\n\n    # Equation 1: Total number of rabbits\n    eq1 = Eq(black + white + grey, 84)\n    \n    # Equation 2: There are 14 more black rabbits than white rabbits\n    eq2 = Eq(black, white + 14)\n    \n    # Equation 3: There are 2 fewer grey rabbits than white rabbits\n    eq3 = Eq(grey, white - 2)\n\n    # Solve system of equations\n    solution = solve((eq1, eq2, eq3), (black, white, grey))\n\n    return solution[white]\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from itertools import permutations\n\n    # Total ways without restriction: entrance ** people\n    total_ways = 3 ** 4\n\n    # Subtract the ways where one entrance isn't used (2 ** people)\n    # multiplied by the number of ways to choose which entrance is left out (choose 1 from 3)\n    ways_with_restriction = total_ways - (3 * 2 ** 4)\n\n    # For the remaining cases, we have double counted the cases where only one entrance is used\n    # Add back these cases (3 choose 1)\n    ans = ways_with_restriction + 3\n\n    return ans\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    final_number = 40\n    initial_number = (final_number - 4) / 2\n    return initial_number\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit = 92\n    # Let \"b\" be the number of glasses that Peter broke.\n    # For every glass he delivers safely, he gets $1, and for every glass he breaks, he pays $1.\n    # The total profit is thus (total_glasses - b) - b.\n    # Hence, the equation is: total_glasses - 2b = profit.\n    # We solve for b.\n\n    # total_glasses - 2b = profit\n    # 2b = total_glasses - profit\n    # b = (total_glasses - profit) / 2\n    b = (total_glasses - profit) / 2\n\n    return int(b)\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin tournament, every team plays every other team exactly once.\n    # If there are n teams, the total number of games played is n * (n - 1) / 2.\n    # We know the total number of games is 45, so we can set up the equation:\n    # n * (n - 1) / 2 = 45\n    # Now we solve for n using a simple loop to check which n satisfies the equation.\n\n    for n in range(1, 45):\n        if n * (n - 1) / 2 == 45:\n            return n\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables to represent the number of people and number of boats\n    people, boats = symbols('people boats')\n\n    # Equation representing situation with one fewer boat\n    equation1 = Eq((boats - 1) * 9, people)\n    \n    # Equation representing situation with one additional boat\n    equation2 = Eq((boats + 1) * 6, people)\n\n    # Solve the system of equations for both variables\n    solutions = solve((equation1, equation2), (people, boats))\n\n    # We are interested in the number of people, which is 'people'\n    return solutions[people]\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for number in [2, 6, 1, 10, 5, 3]:\n        if number * 3 == 2:\n            return number\n    return None\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    change = 1200 - total_cost\n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Assuming the smallest integer to be x,\n    # the second will be x + 2 and the third x + 4\n    # because they are consecutive odd integers\n\n    # sum of these three numbers will be 57\n    # x + (x + 2) + (x + 4) = 57\n    # 3x + 6 = 57\n    # 3x = 57 - 6\n    # 3x = 51\n    # x = 51 / 3\n    x = 51 // 3\n\n    return x\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 16):\n        for x2 in range(3, 16):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count // 3  # Dividing by 3 to account for permutations of the three numbers\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of cookies John and Peter initially have\n    john, peter = symbols('john peter')\n    \n    # Write the equations based on the problem description\n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(4/5 * john, 1/2 * (peter - 3/10 * peter))\n    \n    # Solve the equations for john and peter\n    solutions = solve((equation1, equation2), (john, peter))\n    \n    # John's initial number of cookies is what we're looking for\n    return solutions[john]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60\n    total_marks_after = total_marks_before + 70\n    new_average = total_marks_after / 5\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horse_apples = 20\n    pig_apples = 15\n    rabbit_apples = 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n    total_apples_eaten = (total_horses * horse_apples) + (total_pigs * pig_apples) + (total_rabbits * rabbit_apples)\n\n    average_apples_eaten = total_apples_eaten / total_animals\n\n    return average_apples_eaten\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')  # Initialize to positive infinity\n\n    for perm in permutations(digits, 4):\n        num1 = perm[0]*10 + perm[1]  # Forming the first 2-digit number\n        num2 = perm[2]*10 + perm[3]  # Forming the second 2-digit number\n        curr_sum = num1 + num2\n        min_sum = min(min_sum, curr_sum)  # Find the minimum sum\n\n    return min_sum\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if (i + j) < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    first_sale = 10  # 10% discount\n    second_sale = 20  # 20 dollar discount\n\n    # Calculate the total price without any discounts\n    total_full_price = full_price_per_cup * total_cups\n\n    # Calculate the price after the first sale (10% discount)\n    first_sale_price = total_full_price * (1 - first_sale / 100)\n\n    # Calculate the price after the second sale (20 dollar discount, but not less than zero)\n    final_price = max(first_sale_price - second_sale, 0)\n    \n    return final_price\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, peaches = symbols('A B peaches')\n\n    equation1 = Eq(peaches, 5 * A + 10)\n    equation2 = Eq(peaches, 8 * B - 2)\n    equation3 = Eq(A, B + 3)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number_to_round = 3172\n    rounding_base = 100\n    ans = int(rounding_base * round(float(number_to_round) / rounding_base))\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3/4\n    water_in_drink = total_drink * fraction_water\n    return water_in_drink\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop to calculate the terms of the series\n    for i in range(1, 2018):\n        # Add the number which consists of 'i' number of 2's to the sum\n        total_sum += int('2' * i)\n    \n    # Calculate the sum of the last 5 digits\n    last_5_digits_sum = sum(int(digit) for digit in str(total_sum)[-5:])\n    \n    return last_5_digits_sum\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    benson_spent = 74\n    jayden_spent = 120\n    total_money = 590\n    # Let's denote the money Benson had left as b and Jayden had left as j.\n    # We know that Benson had 3 times the amount left as Jayden, so we can say: b = 3j.\n    # We also know that the initial total money is the sum of the money spent by Benson and Jayden\n    # and the money they had left.\n    # So we can write a second equation: b + j + benson_spent + jayden_spent = total_money.\n    # Let's substitute b for 3j in the second equation and solve for j.\n\n    # b + j + benson_spent + jayden_spent = total_money\n    # Substitute 3j for b: 3j + j + benson_spent + jayden_spent = total_money\n    # Simplify to find j: 4j + benson_spent + jayden_spent = total_money\n    # Rearrange and solve for j: 4j = total_money - (benson_spent + jayden_spent)\n    # j = (total_money - (benson_spent + jayden_spent)) / 4\n\n    j = (total_money - (benson_spent + jayden_spent)) / 4\n    return j\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 380):\n        if number * number + number == 380:\n            return number\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    return neither_owners\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let betty_time be the time Betty takes to go from cinema to store\n    # Let kevin_time be the time Kevin takes to go from cinema to store\n    betty_time, kevin_time, betty_speed, kevin_speed = symbols('betty_time kevin_time betty_speed kevin_speed')\n\n    # Betty arrives at store in 6 minutes\n    equation1 = Eq(betty_time, 6)\n    \n    # Kevin is 150m away when Betty reaches the grocery store\n    equation2 = Eq(kevin_speed * betty_time, 150)\n    \n    # After 3 more minutes Kevin reaches store and Betty is 900 - 150 meters away from cinema\n    equation3 = Eq(betty_speed * (betty_time + 3), 900)\n    equation4 = Eq(kevin_speed * (betty_time + 3), 150 + (kevin_time - betty_time) * kevin_speed)\n    \n    # Since Kevin arrives at the store right after, the distances they've covered are equal\n    equation5 = Eq(kevin_speed * kevin_time, betty_speed * betty_time)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (betty_time, kevin_time, betty_speed, kevin_speed))\n\n    # Time difference between when Betty leaves and Kevin leaves\n    time_difference = solutions[kevin_time] - solutions[betty_time]\n\n    return time_difference\n\nans = solution()"
    ]
}