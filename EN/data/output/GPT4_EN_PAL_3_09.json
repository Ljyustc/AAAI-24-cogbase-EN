{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    m = 4\n    sum_squares = (n*(n+1)*(2*n+1))//6 - (m*(m+1)*(2*m+1))//6\n    return sum_squares\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime('09:00', '%H:%M')\n    end_time = datetime.strptime('10:00', '%H:%M')\n    \n    class_duration = end_time - start_time\n    return class_duration.seconds // 60  # convert seconds to minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.40)\n    initial_amount = remaining_after_bag / (1 - 0.20)\n    return initial_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # assume a reasonable upper limit for the number of students per side\n        if (n ** 2 + 5) + (2 * n + 1) == (n + 1) ** 2:\n            ans = n ** 2 + 5\n            return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n\n    chemistry_students = total_students - physics_students - biology_students\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    amy_gives = (amy - john - 4) // 2\n    return amy_gives\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total potted plants\n    r = 4  # potted plants to arrange\n\n    # Number of ways to arrange r potted plants from n is given by nPr (Permutation)\n    # nPr = n! / (n-r)!\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To win the game, Fred would want to leave a multiple of 4 for George (12, 8, 4)\n    # since whatever George picks (1, 2, 3), Fred can always pick in such a way\n    # to leave another multiple of 4 for George.\n    \n    total_oranges = 15\n    \n    # Find the remainder when the total is divided by 4, \n    # this will give the amount Fred needs to pick to leave a multiple of 4\n    oranges_to_take = total_oranges % 4\n    \n    # If the remainder is 0 (which is not the case here, but good to have the logic),\n    # it means the total already is a multiple of 4, and Fred can arbitrarily pick 1, 2, or 3,\n    # though he is destined to lose if George plays perfectly.\n    # Here, however, since 15 % 4 = 3, Fred has to take 3 oranges to leave 12,\n    # forcing George into a losing position if Fred plays perfectly after that.\n    \n    return oranges_to_take\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    toms_age = symbols('toms_age')\n    dads_age = 43\n    age_equation = Eq(dads_age, 4 * toms_age - 5)\n    \n    toms_actual_age = solve(age_equation, toms_age)\n    \n    return toms_actual_age[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    result = common_factor * sum_of_coefficients\n    return result\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations when Cherry wears a blouse with pants and shoes\n    blouse_pants_shoes_combos = shirts * pants * shoes\n    \n    # Combinations when Cherry wears a dress with shoes\n    dress_shoes_combos = dresses * shoes\n    \n    # Combinations when Cherry wears a dress with heels\n    dress_heels_combos = dresses * heels\n    \n    # Total combinations\n    total_combos = blouse_pants_shoes_combos + dress_shoes_combos + dress_heels_combos\n\n    return total_combos\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = '3/20' if fraction_value > decimal_value else '0.16' if decimal_value > fraction_value else 'equal'\n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDE'):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            count += 1\n        elif p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    total_both = 21\n\n    # Using the inclusion-exclusion principle\n    total_one_event_only = (total_skipping + total_long_jump) - total_both * 2\n\n    return total_one_event_only\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # time spent jogging (from 6:30 AM to 8:30 AM) in hours\n    jogging_time = 2\n    # jogging speed in km per hour\n    jogging_speed = 8\n    # distance covered while jogging in km\n    jogging_distance = jogging_time * jogging_speed\n\n    # time spent walking (from 8:30 AM to 9:30 AM) in hours\n    walking_time = 1\n    # walking speed in km per hour (half the jogging speed)\n    walking_speed = jogging_speed / 2\n    # distance covered while walking in km\n    walking_distance = walking_time * walking_speed\n\n    # total distance covered in km\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    return 74 * 15 * 8 * 250\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let's denote the number of each note in the purse as 'n'\n    \n    # £5 note value\n    value_5 = 5\n\n    # £10 note value\n    value_10 = 10\n\n    # £20 note value\n    value_20 = 20\n\n    # We need to find 'n' so that value_5 * n + value_10 * n + value_20 * n is equal to 280\n    # Therefore, (value_5 + value_10 + value_20) * n = 280\n    # (5 + 10 + 20) * n = 280\n    # 35 * n = 280\n    # n = 280 / 35\n    n = 280 // 35\n\n    # Because mum's purse contains an equal number of each note, the total number of notes is 3 * n\n    total_notes = 3 * n\n\n    return total_notes\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let x be the cost of the house sold at a profit\n    # Let y be the cost of the house sold at a loss\n    sale_price = 99000\n\n    # If the first house was sold at a 10% profit, then:\n    # sale_price = x + 0.1 * x\n    # sale_price = 1.1 * x\n    # x = sale_price / 1.1\n    x = sale_price / 1.1\n\n    # If the second house was sold at a 10% loss, then:\n    # sale_price = y - 0.1 * y\n    # sale_price = 0.9 * y\n    # y = sale_price / 0.9\n    y = sale_price / 0.9\n\n    # Calculate the total cost\n    total_cost = x + y\n\n    # Calculate the total sale\n    total_sale = 2 * sale_price\n\n    # Calculate the profit or loss\n    profit_or_loss = total_sale - total_cost\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_operator_diamond(M, N):\n        return M * N + N + 1\n\n    def custom_operator_square(M, N):\n        return 8 * M - N * N\n\n    diamond_result = custom_operator_diamond(7, 6)\n    square_result = custom_operator_square(diamond_result, 9)\n\n    return square_result\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "from sympy import isprime\n\ndef solution():\n    p = 2  # Starting from the smallest prime number\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    sum_of_fractions = Fraction(1, 1) + Fraction(1, 2) + Fraction(1, 3) + Fraction(1, 4) + Fraction(1, 5)\n    sum_as_fraction_of_60 = sum_of_fractions * Fraction(60, 1)\n    A = sum_as_fraction_of_60.numerator\n    return A\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n\n    minibusses = (students + capacity - 1) // capacity\n\n    return minibusses\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # As we consider only odd squares up to 19, there are 10 terms (1, 3, 5..., using integer division)\n    # Using the formula for the sum of squares of first n natural numbers\n    ans = (1/6) * n * (n + 1) * (2*n + 1)\n    # Adding only odd squares, so remove the even squares (2^2, 4^2, ..., (n-1)^2)\n    odd_squares_sum = ans - (1/6) * (n/2) * ((n/2) + 1) * (2*(n/2) + 1)\n    return int(odd_squares_sum)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time = 12  # total time taken from the first floor to the fourth floor\n    total_floors = 4 - 1  # number of intervals between four floors is 3\n    time_per_floor = total_time / total_floors  # time taken for each interval\n\n    first_to_second = time_per_floor  # time taken from the first floor to the second floor\n\n    return first_to_second\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum_series = sum((n**2 + (n+1)**2) / (n * (n+1)) for n in range(1, 2008))\n    return round(sum_series)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let the total number of girls be n\n    # The error introduced in the sum of heights is 162 - 126 = 36 cm\n    error = 162 - 126\n    \n    # The average is underestimated by 163 - 159 = 4 cm\n    avg_error = 163 - 159\n    \n    # The error divided by the average error gives the number of girls\n    n = error / avg_error\n    \n    return int(n)\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2s = pow(2, 100, 10)\n    last_digit_7s = pow(7, 100, 10)\n    last_digit_9s = pow(9, 100, 10)\n\n    last_digit = (last_digit_2s * last_digit_7s * last_digit_9s) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since there are 16 marbles and 4 piles,\n    # and each pile should have a different number, we start with the smallest pile\n    # and go to the largest. We try to minimize the number in the largest pile.\n    \n    # We start by assuming the smallest pile has only 1 marble,\n    # the second smallest has 2 (since it has to be different),\n    # and we continue this pattern.\n    # Let's denote the number of marbles in the piles as a, b, c, d respectively.\n    # We then have:\n    # a + b + c + d = 16\n    # a != b != c != d\n    # To minimize d, we should minimize a, b, c first\n    \n    # Minimizing a, b, and c\n    a = 1\n    b = 2  # b > a\n    # now we have only two piles left and 13 (16-1-2) marbles to distribute,\n    # we will put the third minimum number which obviously can't be 1 and 2\n    # since we already used them but it can be 3.\n    c = 3  # c > b\n    # The remaining marbles go into the last pile\n    d = 16 - (a + b + c)  # This is going to be the largest pile\n\n    return d\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 48 * 225 * 0 * 15 \n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    sum_of_series = sum(range(1, 14, 2))\n    ans = sum_of_series**2\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = hash_op(200, 199)\n    for i in range(188, 1, -1):\n        ans = hash_op(ans, i)\n    \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(1, 1)\n    for i in range(2, 10):\n        result *= Fraction(i + 1, i)\n    ans = float(result)\n    \n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n    \n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n    \n    # Find the Greatest Common Divisor (GCD) of the three ribbon lengths\n    ans = gcd(gcd(ribbon1, ribbon2), ribbon3)\n    \n    return ans\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n    # 4/5 of the number of seashells Beth had\n    beth_part = 4/5 * beth\n    # 2/5 of the number of seashells Ken had\n    ken_part = 2/5 * ken\n    # Ken had $75 more seashells than Beth\n    equation1 = Eq(ken, beth + 75)\n    # 4/5 of Beth's seashells equals 2/5 of Ken's seashells\n    equation2 = Eq(beth_part, ken_part)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    # Calculate the total number of seashells they have altogether\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_notes = 40\n    spent_10_percent = 40 / 100\n    spent_2_percent = 25 / 100\n    \n    num_10, num_2 = symbols('num_10 num_2')\n    remaining_10 = num_10 - num_10 * spent_10_percent\n    remaining_2 = num_2 - num_2 * spent_2_percent\n    gift_cost = num_10 * 10 * spent_10_percent + num_2 * 2 * spent_2_percent\n    \n    # System of equations\n    equations = (\n        Eq(num_10 + num_2, total_notes),          # Equation for the total number of notes\n        Eq(remaining_10, 4/5 * remaining_2),      # Equation for the 4/5 relationship\n    )\n    \n    solutions = solve(equations, (num_10, num_2))\n    num_10_solution = solutions[num_10]\n    num_2_solution = solutions[num_2]\n    \n    gift_cost_value = num_10_solution * 10 * spent_10_percent + num_2_solution * 2 * spent_2_percent\n    return gift_cost_value\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for n in range(1, 50):\n        cube = n ** 3\n        if (cube - 2) ** 0.5 == int((cube - 2) ** 0.5):\n            return cube - 2\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # After giving each kid two oranges, we have 13 - 3*2 = 7 oranges left\n    # This is a problem of partitioning 7 into 3 parts with unrestricted sizes\n    # We can use stars and bars theorem here. We have 7 stars (oranges) and 2 bars (divisions)\n    # to place in a row. So we calculate comb(7 + 2, 2)\n    number_of_ways = comb(7 + 2, 2)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The left-hand side of the equation is a telescoping product,\n    # where each pair of (1 + 1/(2^k)) * (1 - 1/(2^k)) will multiply to 1, \n    # except for the last term of the series which is 1/(2^(2^2009)).\n    # Therefore, after the telescope effect, the right-hand side will be 2 * (1 - 1/(2^(2^n))). \n    # To get the same term, we equate 1/(2^(2^2009)) to 1/(2^(2^n)).\n\n    # Since the bases are equal (base 2), we simply need to set the exponents equal to each other.\n    exponent_left = 2 ** 2009\n    # We are given exponent_left == exponent_right, so exponent_right is also 2 ** 2009.\n\n    # Therefore, since exponent_right is 2^n, we can say that 2^n = 2 ** 2009.\n    # Now we solve for n:\n    n = 2009\n\n    return n\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the two original numbers as x and y\n    x, y = symbols('x y')\n    \n    # We know that the sum of two numbers is 11.63\n    sum_eq = Eq(x + y, 11.63)\n    \n    # Oliver accidentally shifted the decimal point in one of the numbers, we can assume it's y, so it becomes y/10\n    incorrect_sum_eq = Eq(x + y/10, 5.87)\n    \n    # Now we can solve the two equations to find the original numbers\n    solutions = solve((sum_eq, incorrect_sum_eq), (x, y))\n    \n    # Difference between the two numbers is then y - x\n    difference = solutions[y] - solutions[x]\n    \n    # We want one hundred times the difference\n    result = 100 * difference\n    \n    return result\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sally and John's ages now\n    sally, john = symbols('sally john')\n    \n    # Equation representing the future age relation\n    future_age_relation = Eq(sally + 3, 6 * (john + 3))\n    \n    # Equation representing the total age now\n    total_age_now = Eq(sally + john, 50)\n    \n    # Solve the system of equations\n    solutions = solve((future_age_relation, total_age_now), (sally, john))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be zero as we need a 4-digit number\n            continue\n        paso = p * 1000 + a * 100 + s * 10 + o\n        soap = s * 1000 + o * 100 + a * 10 + p\n        if paso * 4 == soap:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):  # Loop through all three-digit numbers\n        if number % 7 == 1 and number % 9 == 5:\n            return number  # Return the first number that satisfies both conditions\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    common_difference = 3\n    days = 7\n    total_questions = sum(first_day + common_difference * (i - 1) for i in range(1, days + 1))\n    return total_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let wife's rate of drinking be x barrels per day\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    \n    # If they finish together in 12 days, we can get the wife's rate by subtracting the man's rate from the total rate\n    wife_rate = together_rate - man_rate\n\n    # The number of days the wife needs to finish the barrel alone is the inverse of her rate\n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    # Initialize the count of ways to pick the balls\n    count = 0\n    \n    # Loop through all possible combinations of remaining balls\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(0, 4):\n                \n                # Calculate the number of balls picked for each color\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n                \n                # Ensure the total number of balls picked is 10\n                if white_picked + red_picked + black_picked == 10:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    first_term = symbols('first_term')\n    # an = a1 + (n - 1)d\n    # 20 = first_term + (3 - 1)d\n    # 28 = first_term + (4 - 1)d\n    # 36 = first_term + (5 - 1)d\n    equation1 = Eq(20, first_term + 2 * (28 - 20))\n    equation2 = Eq(28, first_term + 3 * (28 - 20))\n    equation3 = Eq(36, first_term + 4 * (28 - 20))\n\n    solutions = solve((equation1, equation2, equation3), (first_term))\n\n    return solutions[first_term]\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if digits_sum == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    \n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    while True:\n        term = n**2 + n - 1\n        if term >= 100:\n            break\n        n += 1\n    return n**2 + n - 1 - (2*n)\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The arithmetic mean of three numbers is 120, so the sum of the three numbers is 3 * 120.\n    sum_of_three = 3 * 120\n    # The mean of the four numbers is 150, so the sum of the four numbers is 4 * 150.\n    sum_of_four = 4 * 150\n    # The fourth number is the difference between the sum of the four numbers and the sum of the first three.\n    fourth_number = sum_of_four - sum_of_three\n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the original number of pearls as x\n    # According to the problem:\n    # Half of x fell onto the floor, so we have x/2 pearls on the floor\n    # A fourth of x rolled under a chair, so we have x/4 pearls under a chair\n    # A sixth of x fell into her lap, so we have x/6 pearls in her lap\n    # Plus the three pearls that remained on the strand\n\n    # Now, let's set up an equation based on the description:\n    # x/2 (floor) + x/4 (chair) + x/6 (lap) + 3 (strand) = x (original number)\n\n    # To solve this equation for x, we can find a common denominator and sum up the fractions\n    # The common denominator of 2, 4, and 6 is 12.\n    \n    # Multiplying both sides of the equation by 12 to eliminate the denominators gives us:\n    # 6x (floor) + 3x (chair) + 2x (lap) + 36 (strand) = 12x (original number)\n    \n    # Now we rearrange the equation to solve for x:\n    # 6x + 3x + 2x + 36 = 12x\n    # 11x + 36 = 12x\n    # 36 = 12x - 11x\n    # 36 = x\n\n    # Therefore, the original number of pearls on the strand is 36.\n    return 36\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    \n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders are set up in the form (remainder, modulo)\n    congruences = [(3, 5), (4, 6), (1, 7)]\n\n    # Solve the system of congruences\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip's position from the front is 6th\n    pip_position_from_front = 6\n    \n    # Bud's position from the end is also 6th\n    bud_position_from_end = 6\n    \n    # Counting from Pip to Bud there are 5 children\n    # So between Pip and Bud there are 4 children because Pip is counted but Bud is not\n    children_between_pip_and_bud = 4\n    \n    # to get the total children we add Pip's and Bud's positions and the children in between\n    # We subtract 1 because we are counting Pip once from the front and once in the group between Pip and Bud\n    total_children = pip_position_from_front + bud_position_from_end + children_between_pip_and_bud - 1\n\n    return total_children\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    difference = (fourth_term - first_term) / (4 - 1)\n    last_term = first_term + (total_rows - 1) * difference\n\n    total_athletes = (first_term + last_term) * total_rows / 2\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    average_age_family = 29\n    total_members = 6\n    total_age_children = 64\n    \n    total_age_family = average_age_family * total_members\n    total_age_parents = total_age_family - total_age_children\n    \n    number_of_parents = total_members - (total_age_family - total_age_parents)\n    \n    average_age_parents_3_years_ago = (total_age_parents - 3 * number_of_parents) / number_of_parents\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    paintings_per_day = total_paintings_done / 5\n    total_paintings_goal = 56\n\n    remaining_paintings = total_paintings_goal - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    times = total_sum // 3\n    \n    return times\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves = pieces_of_paper // interval\n\n    return leaves\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Iterate through all possible permutations of the way to cross the river\n    for perm in permutations(times):\n        total_time = 0\n        # Simulate the river-crossing process\n        a, b, c, d = perm\n        # Fastest two go first\n        total_time += min(a, b)\n        # Fastest comes back\n        total_time += min(a, b)\n        # Slowest two go across\n        total_time += max(c, d)\n        # Second fastest comes back\n        total_time += min(c, d)\n        # Fastest two go again\n        total_time += min(a, b)\n        \n        # Keep track of the minimum time\n        min_time = min(min_time, total_time)\n    \n    return min_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Given terms of the sequence\n    a5 = 8  # 5th term\n    a12 = 50  # 12th term\n\n    # The common difference (d) can be found by the formula: an = a1 + (n-1)*d\n    # where an is the nth term, a1 is the first term and n is the term number\n\n    # For the 12th term: a12 = a1 + (12-1)*d\n    # For the 5th term: a5 = a1 + (5-1)*d\n\n    # Subtracting the two equations to eliminate a1:\n    # a12 - a5 = (12-1)*d - (5-1)*d\n    # 50 - 8 = 11*d - 4*d\n    # 42 = 7*d\n    # Therefore the common difference d is:\n    d = (a12 - a5) / (12 - 5)\n    \n    return d\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    \n    # weight of half of the mangoes\n    half_mangoes_weight = full_weight - half_full_weight\n    \n    # weight of empty basket\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    common_factor = 95\n    return common_factor * (37 + 42 + 21)\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    # x = 0 (mod 7), x + 2 = 0 (mod 8), x + 4 = 0 (mod 9)\n    # As `solve_congruence` requires the form (remainder, modulus), we adjust the equations:\n    # x ≡ 0 (mod 7), x ≡ -2 ≡ 6 (mod 8), x ≡ -4 ≡ 5 (mod 9)\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    \n    # Solve the system of congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n    \n    # Calculate the sum of all three numbers\n    total_sum = x + (x + 2) + (x + 4)\n    \n    return total_sum\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Pip, Bud, and Bob\n    pip, bud, bob = symbols('pip bud bob')\n    \n    # Equations based on the problem statement\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    a1 = 2       # The first term of the original sequence\n    d = 3        # The common difference\n    last = 242   # The last term provided\n\n    # Calculate the number of terms in the original sequence\n    n = ((last - a1) // d) + 1\n\n    # We are removing 3 terms at a time and adding one (sum of those 3 terms)\n    # So, we need to find the number of times we can do this until 3 terms are left\n    while n > 3:\n        n -= 2  # Reduce 3 terms, add 1 term back\n    \n    # Now we have to find the second number after all iterations\n    # The new sequence after iterations will still be an arithmetic sequence \n    # with the same common difference but with a new first term\n    new_a1 = a1 + (2 * (3 * d)) # As two iterations have been completed before the sequence comes down to 3 numbers\n    second_term = new_a1 + d\n    \n    return second_term\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable x\n    x = symbols('x')\n\n    # Define the equation 2x + 3x + 2 = 30 + 6x - 8x\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the journey in meters\n    # Let v be the usual speed in meters per minute\n    # Let t be the time run at usual speed in minutes\n    x, v, t = symbols('x v t', positive=True, real=True)\n\n    # Maria can cover distance x in 30 minutes at her usual speed v\n    equation1 = Eq(x, 30 * v)\n\n    # After running for time t, at speed v, distance is v * t\n    # Reduced speed is 80% of usual speed after it rains, which is 0.8 * v\n    # Remaining distance to cover is x - v * t\n    # Time run at reduced speed is ((x - v * t) / (0.8 * v)) + t\n    # She arrives 5 minutes late, so total time is 35 minutes\n    equation2 = Eq(t + (x - v * t) / (0.8 * v), 35)\n\n    # She runs 2400 meters at reduced speed, so remaining distance is 2400 meters\n    equation3 = Eq(x - v * t, 2400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, v, t))\n\n    # Length of the journey is the value of x\n    return solutions[x]\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approx_depreciation = 0.6957\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value_approx = initial_value * approx_depreciation\n\n    return round(final_value_approx, 2)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n    \n    # Using the inverse proportion:\n    # original_people * original_days = new_people * target_days\n    # Solve for new_people\n    new_people = (original_people * original_days) / target_days\n    \n    # Calculate the additional people needed\n    additional_people = new_people - original_people\n    \n    # Since it's not possible to have a fraction of a person,\n    # we must round up to the nearest whole number\n    from math import ceil\n    additional_people_ceil = ceil(additional_people)\n    \n    return additional_people_ceil\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Equation 1: total students\n    equation1 = Eq(A + B, 1050)\n\n    # Equation 2: After 20 students transfer from A to B, A has 10 more than B\n    equation2 = Eq((A - 20) - (B + 20), 10)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3\n    time_elapsed_hours = 5.5\n    temp_rise_per_hour = 2\n\n    temp_at_1030am = initial_temp + (time_elapsed_hours * temp_rise_per_hour)\n\n    return temp_at_1030am\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books on the top shelf\n    x = symbols('x')\n\n    # Sum of arithmetic sequence: n/2 * (first_term + last_term)\n    # Number of terms (n) is the number of shelves, which is 7\n    # The first term is 'x' and the last term is 'x + 3*(7-1)' because each shelf has 3 fewer books than the one below\n    equation = Eq(7/2 * (x + (x + 3*6)), 280)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # If Darrell draws all blue and all white pencils first without drawing any green,\n    # he would have drawn 3 blue + 3 white = 6 pencils.\n    # To make sure to get at least 1 green pencil, he must draw one more after that,\n    # which makes the total 6 + 1 = 7 pencils.\n    return 6 + 1\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    money_initial = symbols('money_initial')\n    \n    # Equation based on the description\n    # After shop A: money_initial / 2 - 1\n    # After shop B: (money_initial / 2 - 1) / 2 - 2\n    # After shop C: ((money_initial / 2 - 1) / 2 - 2) * (2/3) - 3\n    # Finally, she has $49 left.\n    equation = Eq((((money_initial / 2 - 1) / 2 - 2) * (2/3) - 3), 49)\n    \n    solution_money_initial = solve(equation, money_initial)\n    \n    return solution_money_initial[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2240 to get the prime factors and their powers\n    factors = factorint(2240)\n    \n    # For 2240/n to be a perfect square, all prime factors must have even powers\n    n = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            n *= prime\n\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep = 3\n    mop = 5\n    cook = 9\n    clean_windows = 3 * 7  # 3 weeks\n\n    ans = lcm(sweep, mop, cook, clean_windows)\n\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = (math_students + art_students) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies - 18 * kids, -12)\n    equation2 = Eq(candies - 15 * kids, 15 * 2)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum_of_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import cbrt, sqrt \n    ans = 16.7 - round(cbrt(((-4.56)**2 - (8.1)**3) / (7.2**3) / (-sqrt(27/4) - (-30.15))), 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    years = 0\n    while (oliver_current_age + lin_current_age) < target_sum_age:\n        years += 1\n        oliver_current_age += 1\n        lin_current_age += 1\n\n    return years\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The ratio of the speeds of Jayden to Carter is 7:4\n    speed_ratio_jayden_to_carter = 7 / 4\n    total_distance = 440\n    # Since they walk towards each other, we can think of one person standing still\n    # and the other one moving at the sum of their speeds towards the stationary person.\n    # Therefore, the relative speed ratio is Jayden's speed part out of the total combined speed.\n    relative_speed_jayden = speed_ratio_jayden_to_carter / (1 + speed_ratio_jayden_to_carter)\n    # The meeting point distance from A when Jayden meets Carter for the first time\n    first_meeting_distance_from_a = total_distance * relative_speed_jayden\n    # After the first meeting, Jayden turns around and they meet again.\n    # Now, the remaining distance for Carter to reach point A is `total_distance - first_meeting_distance_from_a`.\n    remaining_distance_carter = total_distance - first_meeting_distance_from_a\n    # The second meeting distance from A is the remaining distance for Carter to reach point A\n    # multiplied by the relative speed of Jayden since he covers this distance until they meet.\n    second_meeting_distance_from_a = remaining_distance_carter * relative_speed_jayden\n    \n    return second_meeting_distance_from_a\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim_age, mrs_lim_age = symbols('mr_lim_age mrs_lim_age')\n\n    equation1 = Eq((mr_lim_age - 7) / (mrs_lim_age - 7), 6/5)\n    equation2 = Eq(mr_lim_age + mrs_lim_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_lim_age, mrs_lim_age))\n\n    return solutions[mr_lim_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of stickers Peter had originally\n    # Then Sam had originally 7/5 * x stickers\n    sam, peter, john = symbols('sam peter john')\n    x = symbols('x')\n\n    # Sam and Peter give 20% of their stickers to John. Let's express this in terms of John's original amount (j)\n    equation1 = Eq(sam - 0.2 * sam, john + (1 + 0.8) * (sam + peter) / 2 - 20)\n    equation2 = Eq(peter - 0.2 * peter, john + (1 + 0.8) * (sam + peter) / 2)\n    equation3 = Eq(sam, 7/5 * x)\n    equation4 = Eq(peter, x)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    five_student_total_score = 87 * 5\n    six_student_total_score = 88 * 6\n    jim_score = six_student_total_score - five_student_total_score\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_of_wood = 6\n    length_of_wood = one_fifth_of_wood * 5\n    one_third_of_wood = length_of_wood / 3\n    return one_third_of_wood\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    discount_first = 0.10\n    discount_second = 0.20\n\n    first_price = original_price * (1 - discount_first)\n    final_price = first_price * (1 - discount_second)\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of baseball bats be n\n    n = symbols('n')\n\n    # Cost price of each bat is $135, so total cost = 135 * n\n    total_cost = 135 * n\n\n    # Selling price of each bat is $185, so total revenue for (n - 3) bats would be 185 * (n - 3)\n    revenue = 185 * (n - 3)\n\n    # The profit is given as $2945\n    profit = 2945\n\n    # The profit is the revenue minus the total cost\n    # So, we can write the equation as: revenue = total_cost + profit\n    equation = Eq(revenue, total_cost + profit)\n\n    # Now solve for n\n    bats_purchased = solve(equation, n)[0]\n    \n    return bats_purchased\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    capacity_per_minibus = 6\n\n    minibusses_needed = (total_boys + capacity_per_minibus - 1) // capacity_per_minibus\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_price = symbols('chair_price')\n    table_price = chair_price + 160\n    total_cost = table_price + 5 * chair_price\n    equation = Eq(total_cost, 328)\n\n    price_solution = solve(equation, chair_price)\n\n    return price_solution[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_sum = (6 * (240 + 1111)) - (4 * 240)\n    mean_last_6 = last_6_sum / 6\n    return mean_last_6\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60  # Pip's money in pence\n    bud_money = 1.10 * 100  # Converting Bud's money from pounds to pence\n\n    total_money_in_pence = pip_money + bud_money  # Sum in pence\n    total_money_in_pounds = total_money_in_pence / 100  # Convert back to pounds\n\n    return total_money_in_pounds\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'h' be the amount of water the hot tap can fill in one minute\n    # Let 'c' be the amount of water the cold tap can fill in one minute\n    h, c = symbols('h c')\n\n    # Equation 1: The cold tap's rate is twice the hot tap's rate\n    equation1 = Eq(c, 2 * h)\n\n    # Equation 2: Both taps together fill the bath in 10 minutes\n    equation2 = Eq(10 * (h + c), 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, c))\n\n    # How long would it take to fill the bath with just the cold tap\n    time_with_cold_only = 1 / solutions[c]\n\n    return time_with_cold_only\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the digits\n    I, P, S = symbols('I P S', integer=True)\n\n    # Set the constraints for the digits: they must be different and between 0 and 9\n    constraints = (I >= 0, I <= 9, P >= 0, P <= 9, S >= 0, S <= 9,\n                    I != P, I != S, P != S)\n\n    # Set up the equation based on the problem statement\n    equation = Eq(4 * (10*I + S), 10*P + I)\n\n    # Solve for the variables\n    solutions = solve((equation,) + constraints, (I, P, S))\n\n    # Find the valid solution where all numbers are different digits\n    for sol in solutions:\n        if len(set(sol)) == 3:  # Make sure all digits are different\n            return 10*sol[P] + sol[I]\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Speeds given in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances for each part of the race in meters\n    distance1 = 280\n    distance2 = 400\n    # Total distance minus the sum of the two known distances gives us the last distance\n    distance3 = 800 - (distance1 + distance2)\n\n    # Time = Distance / Speed\n    # Calculating the time spent for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time is the sum of time for each part\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Rachel's and Alice's candy count with r and a respectively.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they will have the same amount.\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candy.\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations for r and a.\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # The total number of candies they had originally is the sum of r and a.\n    total_candy = solutions[r] + solutions[a]\n    \n    return total_candy\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori  # Jocye's speed in meters per second\n    time = 10  # time in seconds\n    distance_jocye_runs = jocye_speed * time  # distance Jocye can run in meters\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    ans = round(value_after_years, 1)\n\n    return ans\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    p_20 = 0.6  # Probability of living over 20 years\n    p_25_given_20 = 0.3  # Probability of living over 25 years\n\n    # Using conditional probability formula P(A|B) = P(A and B) / P(B)\n    p_25 = p_25_given_20 / p_20  \n\n    return p_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Distance Don walks\n    distance_don = 360\n\n    # Speed Don walks at\n    speed_don = 60  # in metres per minute\n\n    # Total distance to the library\n    total_distance_to_library = 780\n\n    # Distance Danny walks\n    distance_danny = total_distance_to_library - distance_don\n\n    # Time they meet, which should be the same for both Don and Danny\n    # time = distance / speed\n    time = distance_don / speed_don\n\n    # Speed of Danny\n    # speed = distance / time\n    speed_danny = distance_danny / time\n\n    return speed_danny\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    return comb(5, 2)\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used = 792\n    pages = 0\n    digits = 0\n    while digits < digits_used:\n        pages += 1\n        digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    total_rope_skipping = 40\n    total_long_jump = 31\n    total_both = 21\n\n    total_one_event_only = (total_rope_skipping + total_long_jump) - (2 * total_both)\n    \n    return total_one_event_only\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour = 1 * 1000 + 500  # Convert kg to g and add 500g\n    sugar = 1 * 1000 + 200  # Convert kg to g and add 200g\n    butter = 900  # Already in grams\n\n    total_mixture = flour + sugar + butter\n    mixture_per_tin = total_mixture / 8  # Divide equally into 8 tins\n\n    return mixture_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    # This is a sum of fractions where each row starts with (n/n) and ends with (n/10)\n    # We sum the values for each fraction from n to 10 where n goes from 1 to 10\n    s = 0\n    for i in range(1, 11):\n        for j in range(i, 11):\n            s += i/j\n    return s\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    ans = (20 / 30) * 27\n    return ans\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Maximum number of marbles without ensuring 4 of the same color\n    max_without_4_same = (3 - 1) * 4\n    \n    # Minimum number of marbles to ensure at least 4 of the same color\n    min_with_4_same = max_without_4_same + 1\n\n    return min_with_4_same\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B have 2 positions they can occupy (far right and far left).\n    # After placing A and B, C and D can only be arranged in 1 way (the remaining spots in the line).\n    # Therefore, we consider the arrangements of A and B and multiply by the possibilities for C and D.\n    # There are 2 choices for who stands on the far left (A or B).\n    # There are also 2 choices for who stands on the far right (A or B, whoever is not on the far left).\n    # Multiplying the choices gives us the number of different ways they can line up.\n    ways_for_A_and_B = 2 * 2\n    ways_for_C_and_D = 1\n    \n    # Since C and D's order does not change, we only need to consider the order of A and B,\n    # which has been calculated as ways_for_A_and_B.\n    total_ways = ways_for_A_and_B * ways_for_C_and_D\n    return total_ways\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    for perm in permutations(digits, 2):\n        number = int(''.join(perm))\n        two_digit_numbers.add(number)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = float('inf')\n\n    for i in digits:\n        if i % 2 == 0:  # even number condition\n            for j in digits:\n                if j != i:\n                    for k in digits:\n                        if k != i and k != j:\n                            for l in digits:\n                                if l != i and l != j and l != k:\n                                    number = i * 1000 + j * 100 + k * 10 + l\n                                    smallest_even = min(smallest_even, number)\n    return smallest_even\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    worker_days_product = 3 * 3  # Since 3 workers take 3 days\n    days_for_1_worker = worker_days_product / 1  # Days required for 1 worker\n    return days_for_1_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b = symbols('a b')\n\n    # Define the equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the original components of the expression\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n    \n    # Define possible results with different placements of brackets\n    # There are 5 different places to insert brackets: around each operation and the last one combining the first and second operations\n    # Since we can insert one or two pairs of brackets, we have the following combinations\n    results = set()\n    results.add(a + b / c - d)                # Original expression with no brackets\n    results.add(a + (b / c) - d)              # Equivalent to original expression\n    results.add((a + b) / c - d)              # Brackets around first operation\n    results.add(a + b / (c - d))              # Brackets around second operation\n    results.add((a + b / c) - d)              # Brackets combining first and second operations; equivalent to original\n    results.add(a + (b / (c - d)))            # Brackets inside second operation\n    results.add((a + b) / (c - d))            # Brackets around first operation and inside second operation\n    results.add(((a + b) / c) - d)            # Double brackets around first operation; equivalent to single bracket version\n    \n    # Calculate the number of distinct results\n    num_results = len(results)\n    \n    return num_results\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked = 0\n    for i in range(1, 101):\n        if i % 3 == 0:  # If locker number is divisible by 3, reverse the lock state\n            unlocked ^= 1\n        if i % 5 == 0:  # If locker number is divisible by 5, reverse the lock state\n            unlocked ^= 1\n    return 100 - unlocked  # Subtract the number of times the state changed from the total\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef count_valid_permutations(permutation):\n    # Find indices for each relevant student\n    a_index = permutation.index('A')\n    b_index = permutation.index('B')\n    c_index = permutation.index('C')\n    d_index = permutation.index('D')\n    e_index = permutation.index('E')\n    fg_pair_indices = [permutation.index('F'), permutation.index('G')]\n\n    # Check for validity of this permutation\n    if abs(b_index - a_index) == abs(c_index - a_index) and \\\n       abs(d_index - e_index) != 1 and \\\n       abs(fg_pair_indices[0] - fg_pair_indices[1]) == 1:\n        return 1\n    return 0\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        count += count_valid_permutations(perm)\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current = 4\n    yiding_current = 3\n\n    nicolas_target = 16\n    yiding_speed_ratio = yiding_current / nicolas_current\n\n    yiding_target = nicolas_target * yiding_speed_ratio\n\n    return int(yiding_target)\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_children = 4 + 6\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / total_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    price_per_cake = symbols('price_per_cake')\n    money_lucy_has = symbols('money_lucy_has')\n    \n    # If she buys 10 cakes, she borrows 11 dollars\n    equation1 = Eq(10 * price_per_cake - money_lucy_has, 11)\n    \n    # If she buys 13 cakes, she borrows 26 dollars\n    equation2 = Eq(13 * price_per_cake - money_lucy_has, 26)\n    \n    solutions = solve((equation1, equation2), (price_per_cake, money_lucy_has))\n    \n    return solutions[price_per_cake]\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Define variables x and y as integers\n    x, y = 0, 0\n\n    # Iterate over possible values to find the values satisfying the condition\n    for i in range(10):\n        for j in range(10):\n            A = 10 * i + j\n            B = 20 * i + 2 * j\n            if B == 6 * A + 25:\n                x, y = i, j\n                break\n\n    # Calculate A using the found values for x and y\n    A = 10 * x + y\n    return A\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    known_scores_sum = 37 + 53 + 29 + 41\n    \n    total_score = mean_score * total_matches\n    x = total_score - known_scores_sum\n\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    c_count = \"CHEESE\".count('C')\n    h_count = \"CHEESE\".count('H')\n    e_count = \"CHEESE\".count('E')\n    s_count = \"CHEESE\".count('S')\n\n    ans = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Counting all numbers without any constraint\n\n    # Counting numbers without any seven (we subtract from total)\n    no_sevens = 8 * 9 * 9  # 8 choices for the first digit (no 0 or 7), and 9 choices for the others\n\n    # The result will be the total of three digit numbers minus the ones with no sevens at all\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    # Now we need to subtract the ones with exactly one seven\n    # There are three positions where the 7 could be:\n    # Position 1 (the hundredth's place): 1 choice for 7 * 9 choices for tens place * 9 choices for ones place\n    one_seven_position1 = 1 * 9 * 9\n    # Position 2 (the ten's place): 8 choices for the first place * 1 choice for the second place * 9 choices for the third place\n    one_seven_position2 = 8 * 1 * 9\n    # Position 3 (the unit's place): similar to position 1\n    one_seven_position3 = 1 * 9 * 9\n\n    # Sum the possibilities for each position together to get the count of numbers with exactly one seven\n    exactly_one_seven = one_seven_position1 + one_seven_position2 + one_seven_position3\n\n    # Subtract the count of numbers with exactly one seven from the count with at least one seven\n    at_least_two_sevens -= exactly_one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals originally be 'total'\n    # Let the original number of goats be 'goats'\n    total, goats = symbols('total goats')\n\n    # 65% of the farm were cows, so 35% were goats\n    # Equation 1: goats = 35% of total\n    equation1 = Eq(goats, 0.35 * total)\n\n    # 240 more cows and goats were added, so new total is total + 240\n    # After addition, cows became 65% + 20% = 85% of the farm\n    # Goats doubled, so the goats now are 2 * original goats\n    # Equation 2: (total + 240) - 2 * goats = 85% of (total + 240)\n    equation2 = Eq((total + 240) - 2 * goats, 0.85 * (total + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total, goats))\n\n    # Retrieve the number of goats\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for number in range(100000, 999999):\n        if number % 10 == 9:\n            new_number = int('9' + str(number)[:-1])\n            if new_number == 4 * number:\n                return number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, jonathan = symbols('abigail jonathan')\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    total_work = 1  # Represent the whole job as 1 unit\n    alice_work_per_day = 1 / 40\n    bob_work_per_day = 1 / 60\n    total_days_worked = 27\n    \n    # Let d be the days Alice takes off\n    # Total work done should be equal to 1 (the whole job)\n    # (total_days_worked - d) * alice_work_per_day + total_days_worked * bob_work_per_day = total_work\n    # Solve for d\n\n    # Total amount of work Bob does (always working)\n    bob_work_total = total_days_worked * bob_work_per_day\n    \n    # Amount of work Alice does when she is not taking days off\n    # (total_days_worked - d) * alice_work_per_day = total_work - bob_work_total\n    # d = total_days_worked - (total_work - bob_work_total) / alice_work_per_day\n    d = total_days_worked - (total_work - bob_work_total) / alice_work_per_day\n\n    return int(d)\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('0123456789', 4):\n        A, B, C, D = p\n        if A != '0' and C != '0':  # 'A' and 'C' cannot be 0\n            ABA = int(A + B + A)\n            CDC = int(C + D + C)\n            if ABA + CDC == 726:\n                return sum(map(int, [A, B, C, D]))\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of an apple and a banana\n    a, b = symbols('a b')\n    \n    # Create equations based on the information given\n    eq1 = Eq(3*a + 2*b, 1.25)\n    eq2 = Eq(a + b, 0.48)\n    \n    # Solve the system of equations for the prices of an apple and a banana\n    solutions = solve((eq1, eq2), (a, b))\n    \n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, pages = symbols('days pages')\n    # Vanessa reads 30 pages a day and finishes 2 days after the deadline\n    eq1 = Eq(30 * (days + 2), pages)\n    # Vanessa reads 39 pages a day and finishes 4 days before the deadline\n    eq2 = Eq(39 * (days - 4), pages)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (days, pages))\n\n    # Return the number of days supposed to finish the book and the total pages\n    return solution[days], solution[pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    pattern = [2, 0, 2, 0, 0]  # Pattern to be repeated\n    pattern_length = len(pattern)\n    total_digits = 535         # Total number of digits written\n\n    # Number of complete repetitions of the pattern\n    complete_reps = total_digits // pattern_length\n    \n    # Remaining digits after the complete patterns\n    remaining_digits = total_digits % pattern_length\n    \n    # Number of 2's in a complete pattern\n    twos_in_pattern = pattern.count(2)\n    \n    # Total number of 2's after all complete repetitions\n    total_twos = complete_reps * twos_in_pattern\n    \n    # Add 2's from the remaining part of the pattern\n    total_twos += pattern[:remaining_digits].count(2)\n    \n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    expr = 1000 / 17 + 2000 / 17 + 2100 / 17\n    ans = expr\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Analyze the pattern from given operations\n    # Looking at the first example: 4 Δ 1 = 17 => 4 * 1 + (4 + 1) = 4 + 17\n    # Looking at the second example: 5 Δ 4 = 29 => 5 * 4 + (5 + 4) = 20 + 9 = 29\n    # Looking at the third example: 8 Δ 16 = 80 => 8 * 16 + (8 + 16) = 128 + 24 = 152\n    \n    # Define the new operation based on the pattern\n    def delta_operation(a, b):\n        return a * b + (a + b)\n        \n    # Apply the operation to 10 Δ 9\n    result = delta_operation(10, 9)\n    return result\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    # Given conditions\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    # Find the difference in cost between the dress and the shirt\n    cost_difference = solutions[dress] - solutions[shirt]\n\n    return cost_difference\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let's use the sympy library for solving equations\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of fifty-cent and one-dollar coins Owen originally had\n    fifty_cent, one_dollar = symbols('fifty_cent one_dollar')\n    \n    # Create equations based on the problem statement\n    # The first equation represents the initial ratio of fifty-cent coins to the total number of coins\n    equation1 = Eq(fifty_cent, (2/7) * (fifty_cent + one_dollar))\n    # The second equation accounts for the additional coins given by his mother\n    equation2 = Eq(twice_fifty_cent, one_dollar + 10 - 2*five_dollar_fifty_cent)\n    # The third equation sets the final number of one-dollar coins to be twice the number of fifty-cent coins\n    equation3 = Eq(one_dollar + 10, 2 * (fifty_cent + 10))\n\n    # Solve the system of equations to find the original number of coins\n    solution = solve((equation1, equation2, equation3), (fifty_cent, one_dollar), dict=True)\n    # Calculate the total number of coins Owen had at first\n    total_coins_at_first = solution[0][fifty_cent] + solution[0][one_dollar]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each had at first\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Define equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    charlene_to_betsy = Eq(charlene - 15 - anna + 8 - betsy + 15, 0)\n    marbles_ratio = Eq(anna / betsy, 2 / 5)\n    final_ratio = Eq((anna + 8) / (betsy - 8 + 15) / (charlene - 15), 2 / 5 / 7)\n\n    # Use sympy's solve function to solve for the variables\n    solutions = solve((total_marbles, charlene_to_betsy, marbles_ratio, final_ratio), (anna, betsy, charlene))\n\n    # Return the number of marbles Betsy had at first\n    return solutions[betsy]\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily = 7\n    andy_total = 378\n    brenda_daily = 6\n\n    andy_days = andy_total // andy_daily\n    brenda_total = brenda_daily * andy_days\n\n    return brenda_total\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    correct = symbols('correct')\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n\n    # Equation based on correct and wrong answers\n    equation = Eq(points_correct * correct + points_wrong * (total_questions - correct), 44)\n\n    # Solve the equation\n    solutions = solve((equation), (correct))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # original dimensions: length (L), breadth (B), height (H)\n    # new dimensions: length (1.10 * L), breadth (0.80 * B), height (1.10 * H)\n    # Volume of original cuboid = L * B * H\n    # Volume of new cuboid = (1.10 * L) * (0.80 * B) * (1.10 * H)\n  \n    # New volume as a percentage of the original volume\n    new_volume_percentage = (1.10 * 0.80 * 1.10) * 100  # Multiply by 100 to get percentage\n  \n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "import math\n\ndef solution():\n    contestants = 8\n    ans = math.perm(contestants, 3)\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_triangles = comb(num_points, 3)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_repeated = (30 + 40 + 50) * 3\n    return sum_repeated\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = (360 * 100) / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    difference = 26\n    \n    # Let's denote the number of mushrooms gathered in the first hour as x.\n    # Then in the second hour, he gathered total_mushrooms - x mushrooms.\n    # If x + difference equals total_mushrooms - x,\n    # then we can form the equation: x + difference = total_mushrooms - x\n    # Solving this equation for x gives us x = (total_mushrooms - difference) / 2\n    # The number of mushrooms gathered in the second hour will be total_mushrooms - x.\n\n    first_hour = (total_mushrooms - difference) / 2\n    second_hour = total_mushrooms - first_hour\n    \n    return int(second_hour)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # There are 5 students, including Noa.\n    # They must all solve a different number of questions and at least one question each.\n    # The smallest amounts they can solve are 1, 2, 3, and 4 questions.\n    # This leaves 40 - (1+2+3+4) = 30 questions for Noa if Noa solves the most questions.\n    \n    return 40 - (1 + 2 + 3 + 4)\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scan, ted = symbols('scan ted')\n\n    # Current age ratio\n    equation1 = Eq(scan/ted, 1/4)\n    \n    # Age ratio after 4 years\n    equation2 = Eq((scan + 4)/(ted + 4), 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (scan, ted))\n    \n    scan_age = solutions[scan]\n    ted_age = solutions[ted]\n\n    # Find the value of k when the age ratio was 1:9\n    k = symbols('k')\n    equation3 = Eq((scan - k)/(ted - k), 1/9)\n    k_value = solve(equation3.subs({scan: scan_age, ted: ted_age}), k)\n\n    return k_value[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    return round(278, -1)\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate jogging distance from 6:30am to 7:30am\n    jogging_time = 1  # Jogging for 1 hour\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate walking distance from 7:30am to 9:30am\n    walking_time = 2  # Walking for 2 hours\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Calculate total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounding_base = 1000\n    ans = round(number / rounding_base) * rounding_base\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres_to_centimetres_conversion_factor = 100\n    metres = 9\n    centimetres = metres * metres_to_centimetres_conversion_factor\n    return centimetres\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let foldable be f and non-foldable be n\n    f, n = symbols('f n')\n\n    # Given that total = foldable + non-foldable\n    equation1 = Eq(f + n, 476)\n\n    # After selling 208 bicycles, 5/9 of the non-foldable and 4/7 of the foldable are left\n    # This means 4/9 of non-foldable and 3/7 of foldable are sold\n    equation2 = Eq(4/9 * n + 3/7 * f, 208)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, n))\n\n    # Calculate the number of foldable bicycles sold, which is 3/7 of the total foldable bicycles\n    foldable_sold = 3/7 * solutions[f]\n\n    return int(foldable_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # Snail climbs up 10 metres\n        if height_climbed >= 45:\n            break\n        height_climbed -= day  # Snail slides down n metres on the nth night\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies / 2\n    guppies = goldfish / 2\n    difference = mollies - guppies\n    \n    return int(difference)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per m\n    real_tree_height_m = 12  # in meters\n\n    model_tree_height_cm = real_tree_height_m * scale_ratio\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If Valeria distributes candies in such a way that each of the 20 students gets at most 2 candies,\n    # then the maximum number of candies she can distribute without any student getting at least 3 is\n    # 20 students * 2 candies = 40 candies.\n    # To ensure at least one student gets at least 3 candies, Valeria must distribute one more candy.\n    min_candies = 20 * 2 + 1\n    \n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n    \n    ans = sum(divisors(20))\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    marks_per_correct = 8\n    marks_deducted_per_wrong = -4\n    total_marks = 100\n    \n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We have two equations:\n    # x + y = total_questions (20)\n    # marks_per_correct*x + marks_deducted_per_wrong*y = total_marks (100)\n\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if marks_per_correct * x + marks_deducted_per_wrong * y == total_marks:\n            return x\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_flour_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_flour_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Yohan can take out all the red socks followed by all the black socks.\n    # After that, the next two socks he takes have to be white for sure.\n    # So we have 10 red + 10 black + 2 white = 22 socks.\n    max_socks = 10 + 10 + 2\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 60 / 100 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # Calculate the number of gaps between lamp posts based on the number of flowers\n    gaps_between_lamps = (total_flowers / flowers_between_lamps) + 1\n\n    # Calculate the distance between every 2 lamp posts\n    road_length = 50\n    distance_between_lamps = road_length / gaps_between_lamps\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n    final_temp = initial_temp - decrease_temp\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    num_trees = (road_length // tree_spacing) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5  # fifth number in the sequence\n\n    fifth_number = first_number * (ratio ** (n - 1))\n\n    return fifth_number\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_per_friend = (total_sweets - sweets_for_sister) // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since each child must get at least one apple, we distribute one apple to each child first\n    remaining_apples = 19 - 5\n\n    # Now we need to distribute the remaining apples so no two children get the same number\n    # Let's start by giving the max number to the first child and then distribute the rest\n    max_apples = remaining_apples\n    \n    # We need to ensure that the other 4 children get different amounts, so we subtract\n    # 4, 3, 2, and 1 from the remaining, respectively for the next children\n    # This distribution ensures that the remaining children get different numbers of apples\n    # and the first child gets the maximum number\n    max_apples -= (4 + 3 + 2 + 1)\n    \n    # Add back the initial apple that each child has.\n    max_apples += 1\n\n    return max_apples\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Calculate the effective length of the side after accounting for the 1.5 metre border on both sides\n    effective_length = 12 - 2 * 1.5\n\n    # Calculate number of rosebushes that can be planted on one side, spacing them 3 metres apart\n    # Note here we need to start with a bush at the beginning, hence we add an extra 'bush length' (3 metres) to the effective length.\n    # This is equivalent to considering the space between the bushes only, which is the effective_length minus one bush width (3 metres).\n    number_on_each_side = (effective_length + 3) // 3\n\n    # Total number of rosebushes is 4 sides multiplied by the number of rosebushes on each side\n    # We subtract the 4 corner bushes because they would be counted twice otherwise.\n    total_rosebushes = 4 * number_on_each_side - 4\n\n    return int(total_rosebushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_work_per_day = 1 / (12 * 8)\n    q_work_per_day = 1 / (8 * 10)\n\n    combined_work_per_hour = p_work_per_day + q_work_per_day\n\n    hours_needed = 1 / combined_work_per_hour\n    days_needed = hours_needed / 8\n\n    return days_needed\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km per hour\n    speed_slow_van = 78  # km per hour\n    time = 8  # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    solution = solve(equation, score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return ans\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    n = 78\n    factors_of_n = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [factor for factor in factors_of_n if factor % 2 == 0]\n    num_ways = len(even_factors)\n    \n    return num_ways\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given the following exchange rates:\n    # 9 rabbits = 3 goats and 2 goats = 4 cows\n    # We need to find out how many rabbits can be exchanged for 2 cows.\n\n    # First, find the exchange rate between goats and cows.\n    # 2 goats = 4 cows\n    # 1 goat = 2 cows\n    goats_to_cows = 4 / 2\n\n    # Now find the exchange rate between rabbits and goats.\n    # 9 rabbits = 3 goats\n    # Therefore, 1 rabbit = 1/3 goats\n    rabbits_to_goats = 3 / 9\n    \n    # To find the exchange rate between rabbits and cows, we multiply the individual rates.\n    # We need to find out how many rabbits for 2 cows\n    # Therefore, exchange rate for rabbits to 2 cows is 2 * (rabbits_to_goats * goats_to_cows)\n    rabbits_to_2cows = 2 * (rabbits_to_goats * goats_to_cows)\n\n    return rabbits_to_2cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n    correct_score = 4\n    incorrect_penalty = 1\n\n    for correct in range(attempted + 1):\n        incorrect = attempted - correct\n        score = correct * correct_score - incorrect * incorrect_penalty\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    for pencils in range(1, 1000):\n        pens = (5/4) * pencils\n        if pens % 1 == 0:\n            pens = int(pens)\n            new_pencils = pencils + 1\n            new_pens = pens - 1\n            if (new_pencils / new_pens) == (7/8):\n                return new_pencils + new_pens\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_row_seats = 30\n    common_difference = 4\n    total_rows = 10\n\n    last_row_seats = first_row_seats + (total_rows - 1) * common_difference\n    total_seats = (first_row_seats + last_row_seats) * total_rows / 2\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    # Applying the custom operation sequentially\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    result = custom_operation(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 0.40\n    girls = 72\n    total_percentage = 1.00\n    girls_percentage = total_percentage - boys_percentage\n\n    total_children = girls / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    start_missing = 14\n    end_missing = 35\n\n    # Since pages are consecutive and each sheet contains two pages (one on each side),\n    # the number of missing sheets would be half the number of missing page numbers.\n    num_missing_pages = end_missing - start_missing - 1\n    num_missing_sheets = num_missing_pages // 2\n\n    return num_missing_sheets\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Let's designate the total cost of the books as C (100% of the original cost)\n    planned_profit = 0.60 * C  # 60% profit\n    profit_first_day = 0.70 * C * 0.60  # 70% of books sold with 60% profit\n    total_profit = planned_profit * 0.80  # 80% of the planned profit\n\n    # Profit from the second day is the total profit minus the profit from the first day\n    profit_second_day = total_profit - profit_first_day\n\n    # Total remaining books cost for the second day\n    cost_second_day = 0.30 * C  # remaining 30% of the books\n\n    # Since on the second day he sold the remaining books at a discount and made a profit,\n    # we can find the selling price for the remaining books\n    selling_price_second_day = cost_second_day + profit_second_day\n\n    # The discount rate is then calculated as the difference between the supposed price with 60% profit\n    # and the actual selling price, divided by the supposed price (which includes 60% profit).\n    supposed_price_with_profit = 0.30 * C * (1 + 0.60)  # 30% of the books with 60% intended profit\n    discount = (supposed_price_with_profit - selling_price_second_day) / supposed_price_with_profit\n\n    # Convert discount rate to percentage\n    discount_rate = discount * 100\n\n    return discount_rate\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:  # Ensure the two digits selected are different \n                num = i * 10 + j  # Form the two-digit number\n                if num % 2 != 0:  # Check if the number formed is odd\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # We have two equations:\n    # b + g = 38                    (1) (Total children)\n    # 2*b + 4*g = 126               (2) (Total balloons)\n\n    # We can solve these equations using substitution or elimination.\n    # The simplest way here is to express g in terms of b from equation (1),\n    # and then substitute it in equation (2).\n\n    # From equation (1):\n    # g = 38 - b\n\n    # Substitute g into equation (2):\n    # 2*b + 4*(38 - b) = 126\n    # 2*b + 152 - 4*b = 126\n    # -2*b = 126 - 152\n    # -2*b = -26\n    # b = 26 / 2\n    # b = 13\n\n    # So there are 13 boys at the fun-fair.\n    return 13\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    first_number = 10\n    last_number = 25\n    count = last_number - first_number + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_in_meters_per_second = 36 / 60  # converting meters per minute to meters per second\n    time_in_seconds = 200\n    distance = speed_in_meters_per_second * time_in_seconds\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially\n    c, g = symbols('c g')\n\n    # Initial conditions\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding animals\n    # Cows become 65% + 20% = 85% of the total\n    # Goats become doubled\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    # Goats doubled\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n    \n    # Returning the number of goats initially\n    return solutions[g]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "from fractions import Fraction\n\ndef solution():\n    fractions = [Fraction(5, 3), Fraction(7, 5), Fraction(9, 7), Fraction(11, 9), Fraction(13, 11), Fraction(15, 13), Fraction(17, 15), Fraction(19, 17), Fraction(21, 19)]\n    result = 1\n    for frac in fractions:\n        result *= frac\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_cm = 400 * 85\n    roll_length_cm = 20 * 100\n    rolls_needed = string_needed_cm / roll_length_cm\n    return -(-rolls_needed // 1)  # Ceiling division to get whole number of rolls\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n    \n    equation1 = Eq(john, emma + 7)\n    equation2 = Eq(john + emma + 3 + 3, 27)  # Adding 3 years to each age (john+3 and emma+3) in 3 years' time\n\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    donation = salary / 4\n    remainder = salary - donation\n    spend_on_food = 5/6 * remainder\n    savings = remainder - spend_on_food\n\n    equation = Eq(spend_on_food, donation + 78)\n\n    salary_value = solve(equation, salary)\n\n    return salary_value[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    two_last_digit = 2 ** 2017 % 10\n    three_last_digit = 3 ** 2017 % 10\n    ans = (two_last_digit * three_last_digit) % 10\n    return ans\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    # Let x be the time spent at the initial speed\n    # Total distance = speed * time\n    # Initial distance at 150 m/min = 150 * x\n    # Time spent at the increased speed = x - 10 (since he increased speed after 10 minutes)\n    # Distance at increased speed (200 m/min) = 200 * (x - 10)\n    # Total distance = Initial distance + Distance at increased speed\n    # 3700 = 150x + 200(x - 10)\n    # Solve for x to find the total time spent walking\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(150 * x + 200 * (x - 10), 3700)\n    total_time = solve(equation, x)\n\n    return total_time[0]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given 7th term a7 and 15th term a15\n    a7 = 57\n    a15 = 89\n\n    # The formula for the nth term of an arithmetic sequence: an = a1 + (n-1)*d\n    # where a1 is the first term and d is the common difference. We have:\n    # a7 = a1 + 6*d\n    # a15 = a1 + 14*d\n    # Therefore, solving for d (common difference):\n    # a15 - a7 = 14*d - 6*d\n    # 89 - 57 = 8*d\n    # 32 = 8*d\n    d = (a15 - a7) / (15 - 7)\n\n    return d\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 400:\n        return ans\n        ans += 2*3*5*7\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must be a multiple of 9\n    fixed_digits_sum = 4 + 7 + 1 + 9  # These are the digits which are not variables (constants)\n    \n    # Since all digits have to be different, create a list of remaining possible digits excluding 4, 7, 1, 9\n    remaining_digits = [x for x in range(10) if x not in [4, 7, 1, 9]]\n    \n    # Try all combinations for A, B, and C from the remaining digits\n    for A in remaining_digits:\n        for B in remaining_digits:\n            for C in remaining_digits:\n                # A, B, C must be different\n                if A != B and B != C and A != C:\n                    total_sum = fixed_digits_sum + A + B + C\n                    # Check if the sum of digits is divisible by 9\n                    if total_sum % 9 == 0:\n                        # Return the first successful combination (since all digits are different and order matters)                        \n                        return A + B + C, f\"47A1B9C\".replace('A', str(A)).replace('B', str(B)).replace('C', str(C))\n\nans, number = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_bought_per_week = 45\n    sweets_eaten_per_week = 60\n    sweets_goal = 150\n    \n    sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    weeks = 0\n    \n    while sweets_left > sweets_goal:\n        sweets_left += sweets_change_per_week\n        weeks += 1\n        if sweets_left <= sweets_goal:\n            break\n    \n    return weeks\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and an orange\n    apple, orange = symbols('apple orange')\n\n    # Jessie's purchase: 2 apples + 1 orange = 40p\n    eq1 = Eq(2 * apple + orange, 40)\n\n    # Bella's purchase: 1 apple + 2 oranges = 35p\n    eq2 = Eq(apple + 2 * orange, 35)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (apple, orange))\n\n    # Carrie's purchase: 1 apple + 1 orange\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Each of the three positions can be filled with any of the 3 digits (5, 6, 7)\n    # Therefore, for each of the three positions (hundreds, tens, and ones), we have 3 choices\n    choice_for_each_digit = 3\n\n    # The total number of different three-digit numbers\n    total_combinations = choice_for_each_digit ** 3\n\n    return total_combinations\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    from sympy import lcm\n\n    # LCM of 3, 4, 5, 6\n    least_common_multiple = lcm([3, 4, 5, 6])\n\n    # The least possible number is lcm + 2, given that each child gets at least 1 sweet.\n    ans = least_common_multiple + 2\n\n    return ans\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n    \n    both_classes_students = sport_class_students + reading_class_students - total_students\n    \n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    price_per_racket = 49\n    price_per_ball = 1.5\n\n    # Calculate the money spent on two rackets\n    money_spent_on_rackets = 2 * price_per_racket\n    # Calculate the money left for tennis balls\n    money_left_for_balls = total_money - money_spent_on_rackets\n    # Calculate the number of tennis balls\n    number_of_balls = money_left_for_balls // price_per_ball\n\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case scenario, you might pick all balls of one color first, then all balls of another color.\n    # Since there are 4 balls of each color, after picking 4 balls of the first color and 4 of the second color,\n    # you are guaranteed to get a ball of a different color on the next draw.\n    purple = 4\n    white = 4\n    red = 4\n    # Drawing all purple balls (worst case)\n    draws = purple\n    # Drawing all white balls (worst case scenario after purple)\n    draws += white\n    # Drawing one red ball to ensure 3 different colors\n    draws += 1  # One red ball\n\n    return draws\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    chocolates_heinz = 87\n    chocolates_jed = 137\n\n    weeks = 0\n    while chocolates_heinz != chocolates_jed:\n        chocolates_heinz += 4\n        chocolates_jed -= 6\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n    \n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_ratio = 4/6\n    sold_durians = total_durians * sold_ratio\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, so for each point,\n    # there are 11 other points to choose from to form a right angle.\n    # However, for a right angle to occur on a circle, the two sides of the right angle\n    # must be part of radii that are perpendicular to each other. This occurs\n    # only when the points are separated by 3 points in between (forming a 90-degree angle).\n    # There are 4 such pairs for each selected point (2 pairs along one diameter, 2 along the perpendicular diameter).\n    # Once we have fixed a pair of points that form the right angle sides,\n    # we just need to count the number of points left for the hypotenuse.\n    # Since the selected two points divide the rest into two sets of 4 points each,\n    # the hypotenuse can be formed by choosing any point from those 4 points.\n    # Thus, for each right-angled pair, we have 4 choices.\n\n    # Now, we multiply the number of ways to pick a single point (12) by the number of ways to pick\n    # the hypotenuse (4), and the number of right-angled side pairs each point has (4):\n    ans = 12 * 4 * 4\n    return ans\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # As the tiger is the 11th from both the start and the end\n    # The total number of animals in the line is:\n    # 10 (animals before tiger) + 1 (the tiger itself) + 10 (animals after tiger)\n    total_animals = 10 + 1 + 10\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    # 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    # 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # first digit (hundreds place) must be at least 1 because we want a three-digit number\n        for j in range(10):  # second digit (tens place) can be 0-9\n            for k in range(10):  # third digit (ones place) can be 0-9\n                if i + j + k == 4:\n                    count += 1  # we found a valid three-digit number\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Since the first division was into 3 vases\n    initial_vases = 3\n    initial_roses = 24\n    # The roses in each of the initial 3 vases\n    roses_per_vase_initially = initial_roses // initial_vases\n    \n    # The second division is into 4 vases, with each having the same amount\n    # as each of the initial 3 vases\n    final_vases = 4\n    # Therefore, the total roses after her mother brings more is:\n    total_roses = roses_per_vase_initially * (initial_vases + final_vases)\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "from num2words import num2words\n\ndef solution():\n    total = 2405 + 1827\n    ans = num2words(total)\n    return ans\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    result = 36.42 * 1000\n    return int(result)\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # Cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # Cost of a packet of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost  # Cost of a big packet of jelly in dollars\n    return big_jelly_cost\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candy = 2\n    cherry_candy = 7\n    mint_candy = 1\n\n    # Will hates to eat candy in mint flavour\n    # So, we don't count the mint flavour candy\n    candies_will_can_eat = lemon_candy + cherry_candy\n\n    return candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    num1 = -18\n    num2 = -2\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = marble_price * 3\n    total_price_two_cheese_cakes = 2 * cheese_price\n    return total_price_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 80:\n        return ans\n        ans += 2*3*4*5\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # Since it's a single-elimination tournament, one player is eliminated in each game.\n    # The total number of games is one less than the total number of players to determine a winner.\n    total_teachers = 16\n    games = total_teachers - 1  # The last teacher remaining doesn't need to play to be determined the winner\n\n    return games\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Iterate through all possible values for A, B, C, and D\n    # Considering the constraints\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    # Digits must be different\n                    if len({A, B, C, D}) < 4:\n                        continue\n                    \n                    # AB is divisible by 2\n                    if (10*A + B) % 2 != 0:\n                        continue\n                        \n                    # BC is divisible by 3\n                    if (10*B + C) % 3 != 0:\n                        continue\n                        \n                    # CD is divisible by 5\n                    # Last digit must be 0 or 5\n                    if D != 0 and D != 5:\n                        continue\n                    if (10*C + D) % 5 != 0:\n                        continue\n                        \n                    # ABC is divisible by 9\n                    if (100*A + 10*B + C) % 9 != 0:\n                        continue\n                        \n                    # BCD is divisible by 11\n                    if (100*B + 10*C + D) % 11 != 0:\n                        continue\n                        \n                    # If all conditions are satisfied, return ABCD\n                    return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # given ratio of height to width is 3:4\n    ratio_height = 3\n    ratio_width = 4\n    \n    # given height of the television screen\n    height = 21  # in cm\n\n    # width of the television screen based on the ratio\n    # since height : width = 3 : 4, then width = (4/3) * height\n    width = (ratio_width / ratio_height) * height\n    \n    # perimeter of the screen is 2 * (height + width)\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the children's ages\n    son1, son2, daughter1, daughter2 = symbols('son1 son2 daughter1 daughter2')\n\n    # Define the equations based on the given information\n    equation1 = Eq(son1 + son2 + daughter1 + daughter2, 55) # sum of ages\n    equation2 = Eq(son1 - son2, 3) # sons are 3 years apart\n    equation3 = Eq(daughter1 - daughter2, 2) # daughters are 2 years apart\n    equation4 = Eq(son2, 2 * daughter1) # younger son is twice as old as older daughter\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (son1, son2, daughter1, daughter2))\n\n    # The youngest child will be the minimum of the ages\n    youngest = min(solutions[son1], solutions[son2], solutions[daughter1], solutions[daughter2])\n\n    return youngest\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = 20 + 19 + 18 + 17 + 16 - 15 - 14 - 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = [4, 2, 8, 5, 7, 1]\n    sequence_length = len(recurring_sequence)\n    total_sum = 0\n    \n    for i in range(58):\n        total_sum += recurring_sequence[i % sequence_length]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string_length = 13  # Tom's string length\n    nicks_string_length = toms_string_length + 25  # Nick's string is 25cm longer than Tom's\n    length_difference = nicks_string_length - toms_string_length  # Difference in lengths\n    return length_difference\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    # Compute permutations of all books as if distinct\n    permutations_all = factorial(total_books)\n    # Divide by permutations of indistinguishable books of each type\n    ans = permutations_all // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_who_chose_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_who_chose_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_in_cm = 20 * 100  # Convert plot length from meters to cm\n    spacing = 40  # Spacing between cauliflowers in cm\n    first_cauliflower_offset = 20  # Offset for the first cauliflower in cm\n\n    # Remaining length after placing first cauliflower\n    remaining_length = length_in_cm - first_cauliflower_offset\n\n    # Number of cauliflowers that can be planted is the total number of full spacings that fit into the remaining length\n    num_cauliflowers = remaining_length // spacing\n\n    # Add the first cauliflower\n    num_cauliflowers += 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Since the cards can be rotated, we can use each card in each place of the number.\n    # The number of different three-digit numbers is the number of permutations of the three digits\n    # So for each digit place we have 3 choices (1, 3, or 6)\n    \n    num_ways = 3 * 3 * 3  # three choices for each of the three places\n    \n    return num_ways\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    count = 0\n    candies = 15\n    for combo in combinations(range(1, candies), 3):\n        if sum(combo) < candies:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    prime_list = []\n    for number in range(1, 51):\n        if isprime(number) and isprime(number + 6) and number + 6 <= 50:\n            prime_count += 1\n            prime_list.append(number)\n        elif isprime(number) and isprime(number - 6) and number - 6 >= 1:\n            prime_count += 1\n            prime_list.append(number)\n    prime_list = list(set(prime_list))  # Remove duplicates\n    return prime_list, len(prime_list)\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total = 250\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100  # Convert 64 cm to meters and add to 3.7 meters\n    meters_to_subtract = 2 + 7 / 100  # Convert 7 cm to meters and add to 2 meters\n\n    ans = total_meters - meters_to_subtract  # Subtract the second length from the first\n\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return int(solutions[banana])\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    # Assuming the sequence given is the beginning of the Fibonacci sequence\n    # The next number is the sum of the two previous numbers\n    a, b = 1, 1\n    next_num = 0\n    sequence_list = [1, 2, 3, 5, 8, 13, 21]\n    while len(sequence_list) < 8:\n        next_num = a + b\n        a, b = b, next_num\n        sequence_list.append(next_num)\n\n    return sequence_list[-1]\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of solution to exchange\n    x = symbols('x')\n    \n    # Equation for the sugar in bottle A after exchange\n    equation1 = Eq(((50 * 0.11) - (0.11 * x) + (0.47 * x)), x * ((50 + 50 - x) / 100))\n    \n    # Equation for the sugar in bottle B after exchange\n    equation2 = Eq(((50 * 0.47) - (0.47 * x) + (0.11 * x)), x * ((50 + 50 - x) / 100))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence where each term is double the previous term.\n    # The n-th term of a geometric sequence can be calculated as:\n    # a_n = a_1 * r^(n-1)\n    # Where a_1 is the first term and r is the common ratio.\n    # For this sequence, a_1 is 1 and r is 2.\n\n    # Calculate the 20th term\n    a_20 = 1 * (2 ** (20 - 1))\n    \n    # Calculate the 17th term\n    a_17 = 1 * (2 ** (17 - 1))\n    \n    # Divide the 20th term by the 17th term\n    ans = a_20 / a_17\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    target_sum = 35\n    max_product = 0\n    for x in range(1, target_sum):\n        y = target_sum - x\n        product = x * y\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    return minutes * seconds_per_minute\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    average_without_dennis = 60\n    total_books_without_dennis = average_without_dennis * 3\n    average_with_dennis = average_without_dennis + 10\n    total_books_with_dennis = average_with_dennis * 4\n\n    dennis_books = total_books_with_dennis - total_books_without_dennis\n    return dennis_books\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_earnings_per_day = 70\n    days_worked_in_a_week = 6\n\n    total_earnings = average_earnings_per_day * days_worked_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # 9^2 is the largest square in two-digits\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_between_1st_and_4th = 9\n    number_of_intervals_between_1st_and_4th = 4 - 1\n    distance_between_flags = distance_between_1st_and_4th / number_of_intervals_between_1st_and_4th\n\n    number_of_intervals_between_1st_and_9th = 9 - 1\n    distance_between_1st_and_9th = distance_between_flags * number_of_intervals_between_1st_and_9th\n    \n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    day_climb = 5\n    night_slide = 3\n    effective_climb = day_climb - night_slide\n\n    # The total distance the snail must climb to get out on that day\n    # It climbs up 5 metres and slides down 3 metres each day except the last day.\n    # On the last day, it does not slide back so we can compute how many days\n    # it takes to reach (total_distance - day_climb) metres.\n    days_taken = (total_distance - day_climb) // effective_climb\n\n    # If there's a remainder, it means it requires one more day to fully climb out\n    if (total_distance - day_climb) % effective_climb:\n        days_taken += 1\n\n    # Add the final day of climbing without sliding back\n    days_taken += 1\n\n    return days_taken\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_johns_to_mikes = 2 / 3\n\n    mikes_height = johns_height / ratio_johns_to_mikes\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n\n    # If the number of chocolate bars (233) is a prime number,\n    # it cannot be divided evenly among students (other than 1 and itself).\n    # Let's check if 233 is a prime number.\n    is_michael_correct = isprime(233)\n\n    return is_michael_correct\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n    number = ones + tenths / 10 + hundredths / 100\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22  # km/h\n    speed_of_current = 3  # km/h\n    downstream_speed = speed_in_still_water + speed_of_current  # km/h\n    distance = 200  # km\n    time = distance / downstream_speed  # hours\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_pen = pen_cost // pencil_cost\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let's denote x as the number of correct answers.\n    # Each correct answer gives 6 points, so for x correct answers, Justin gets 6x points.\n    # Each incorrect answer reduces 2 points, and Justin answers all 10 questions,\n    # so for 10-x incorrect answers, Justin loses 2(10-x) points.\n    # Justin ends up with 36 points. Therefore, our equation is:\n    # 6x - 2(10 - x) = 36\n\n    # Let's rearrange the equation to find the value of x.\n    # 6x - 20 + 2x = 36\n    # 8x = 36 + 20\n    # 8x = 56\n    # x = 56 / 8\n    # x = 7\n    # Justin answers correctly 7 questions\n\n    correct_answers = (36 + 2 * (10)) // 8\n    return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    \n    total_ways = trains + buses + flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, class_A, class_B = symbols('peaches class_A class_B')\n    # Equation for Class A: class_A * 5 + 10 = peaches\n    equation1 = Eq(class_A * 5 + 10, peaches)\n    # Equation for Class B: class_B * 8 = peaches - 2\n    equation2 = Eq(class_B * 8, peaches - 2)\n    # Equation for number of students: class_A = class_B + 3\n    equation3 = Eq(class_A, class_B + 3)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (peaches, class_A, class_B))\n    \n    # Returning the number of peaches\n    return solutions[peaches]\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    # Find the greatest cube divisor of 28512\n    h = 2**3 * 3**3  # It's the cube of 2*3\n    \n    # Return the value of h\n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to pick enough M&Ms to ensure he has at least two different colors.\n    # In the worst case scenario, he picks all of one color before getting to the next,\n    # so he could pick 5 brown M&Ms and still not have two different colors.\n\n    # Next, he could pick 3 red M&Ms and still have only two colors (brown and red).\n    # However, as soon as he picks another M&M after this, he is guaranteed to have\n    # at least two different colors because the only remaining color is yellow.\n\n    # Therefore, the smallest number of M&Ms he needs to take is:\n    # 5 (for brown) + 3 (for red) + 1 (to make sure he gets a yellow) = 9\n\n    return 5 + 3 + 1\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "import itertools\n\ndef count_valid_permutations(permutation):\n    return sum(1 for i, p in enumerate(permutation) if p != i)\n\ndef solution():\n    total_permutations = itertools.permutations(range(7))\n    valid_permutations = filter(lambda p: count_valid_permutations(p) == 7, total_permutations)\n    return sum(1 for _ in valid_permutations)\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the 3 playing a sketch performances (Ps) with spaces (Ss)\n    # between them for dancing performances (Ds): P S P S P. We have 4 spaces for 7 dancing performances.\n    \n    # Calculate the number of ways to distribute 7 Ds into 4 Ss with at least 1 D in each of the 3 middle Ss\n    # Assign 1 D to each of the 3 spaces between Ps, leaving 4 Ds to arrange.\n    remaining_Ds = 7 - 3\n    \n    # Now the problem is reduced to distributing 4 Ds into 4 spaces. This is equivalent to the problem of putting\n    # 4 indistinguishable balls (4 Ds) into 4 distinguishable boxes (4 Ss). We can use \"stars and bars\".\n    # Number of ways = C(4 + 4 - 1, 4) = C(7, 4)\n    ways_to_distribute_Ds = factorial(7) // (factorial(4) * factorial(3))\n    \n    # Calculate the number of ways to arrange 3 Ps\n    ways_to_arrange_Ps = factorial(3)\n    \n    # Total number of ways = ways to distribute Ds * ways to arrange Ps\n    total_ways = ways_to_distribute_Ds * ways_to_arrange_Ps\n    \n    return total_ways\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    # One father can shake hands with 3 members (father, mother, child) from each of the 9 other families\n    father_handshakes = 9 * 3 * families\n    # One mother can shake hands with 1 father and 1 child from each of the 9 other families\n    mother_handshakes = 9 * 2 * families\n    # One child can shake hands with 1 father and 1 mother from each of the 9 other families\n    child_handshakes = 9 * 2 * families\n    \n    # Since each handshake involves two people, we divide the total by 2 to avoid counting each handshake twice\n    total_handshakes = (father_handshakes + mother_handshakes + child_handshakes) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Taking advantage of the difference of two squares formula:\n    # a^2 - b*c, where b = a + 1 and c = a - 1\n    # This simplifies to (a-b)*(a+c) = (a^2 - a) - (a^2 + a) = -2a\n    a = 31415926\n    ans = -2 * a\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = (mark_position + children_between + helen_position_from_end)\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, 9\n    odd_digits = 5\n\n    # The first digit can't be 0 because we are looking for a 3 digit number\n    # So all three positions can have one of the 5 odd digits\n    count = odd_digits * odd_digits * odd_digits\n\n    return count\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    sequence_length = len(recurring_sequence)\n    digit_position = (79 - 1) % sequence_length  # -1 because index starts from 0\n    digit = recurring_sequence[digit_position]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for num in range(999, 99, -1):\n        if (num + 2009) % 17 == 0 and (num + 2009) % 19 == 0:\n            return num\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    # The sum of arithmetic sequence: S_n = (n / 2) * (first_number + last_number)\n    total_pages = 62\n    expected_sum = (total_pages / 2) * (1 + total_pages)\n    \n    # Tim's sum is missing one page\n    tim_sum = 1939\n    \n    # Find the missing page\n    missing_page = expected_sum - tim_sum\n    \n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Draw all the marbles of the most abundant color\n    max_color_count = max(4, 7, 6, 2)\n    # Then draw 3 more, one of each of the remaining colors\n    min_draws = max_color_count + 3\n    \n    return min_draws\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket in range(999):\n        next_ticket = ticket + 1\n        if ticket + next_ticket == 777:\n            return next_ticket + 1  # Return the next ticket number after the two taken by us.\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours_free = 40\n    hours_at_5 = min((bill - 0) // 5, 10)  # this will not exceed the maximum hours in this segment\n    bill -= hours_at_5 * 5\n    \n    hours_at_8 = min((bill - 0) // 8, 10)  # the same for this segment\n    bill -= hours_at_8 * 8\n    \n    hours_at_15 = (bill - 0) // 15\n    \n    total_hours = hours_free + hours_at_5 + hours_at_8 + hours_at_15\n    return total_hours\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        elif steps == 2:\n            return 2\n        else:\n            return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    total_ways = 0\n    # Calculate the number of ways to reach the 4th step\n    ways_to_4 = count_ways(4)\n    # Calculate the number of ways to get from step 6 to step 10\n    # Jimmy can get to step 6 by reaching step 3, 4, or 5, but since the 5th is muddy, he has two clean options.\n    ways_from_6_to_10 = count_ways(10 - 6)\n    # Calculate the total number of ways to get to step 10\n    total_ways += ways_to_4 * ways_from_6_to_10\n\n    # There are two scenarios Jimmy can reach step 4 directly without touching step 5:\n    # a) Step 4 -> 6 -> ...\n    # b) Step 4 -> 7 -> ...\n    # So we need to calculate the number of ways from step 7 and step 8 to step 10 and add to total_ways.\n    ways_to_4_to_7 = count_ways(7 - 4)\n    ways_to_4_to_8 = count_ways(8 - 4)\n\n    # Calculate the number of ways to go from 7 to 10 and from 8 to 10\n    ways_from_7_to_10 = count_ways(10 - 7)\n    ways_from_8_to_10 = count_ways(10 - 8)\n\n    # Add respective ways to the total\n    total_ways += ways_to_4 * ways_to_4_to_7 * ways_from_7_to_10\n    total_ways += ways_to_4 * ways_to_4_to_8 * ways_from_8_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    num_days_in_a_week = 7\n    total_earnings = average_daily_earnings * num_days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    x = Symbol('x')\n\n    equation = Eq(5 * x - 2 * x + 7, 6 * x + 4 * x - 14)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Given that the total of the five odd numbers should be 85\n    # and we need to maximize the largest number,\n    # let's start by assigning the smallest possible odd numbers to the first four positions.\n\n    # The smallest odd positive numbers are 1, 3, 5, and 7.\n    smallest_sum = 1 + 3 + 5 + 7\n    \n    # The largest number would then be what remains after subtracting the sum of the smallest from the total.\n    largest_number = 85 - smallest_sum\n    \n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T, income = symbols('T income')\n    \n    # First part of the tax for the initial $30,000\n    tax_first_part = T / 100 * 30000\n    \n    # Second part of the tax for the amount exceeding $30,000\n    tax_second_part = (T + 3) / 100 * (income - 30000)\n    \n    # Total tax is the sum of both parts, but only if income is greater than $30,000\n    total_tax = Eq(tax_first_part + tax_second_part, (T + 1) / 100 * income)\n    \n    # An additional constraint that income is greater than $30,000\n    constraint = Eq(income > 30000, True)\n    \n    solutions = solve((total_tax, constraint), (T, income))\n    \n    # Assuming the solution exists and is unique\n    return solutions[income]\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_still_water = 88\n    current_speed = 12\n    distance = 500\n\n    downstream_speed = speed_still_water + current_speed\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return minutes_to_seconds\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let v be the speed of Alan in meters per minute.\n    # Then the speed of Phillip is v + 15 (since he walks 15 meters more per minute).\n    # Phillip takes 12 minutes, so he walks 12 * (v + 15) meters.\n    # Alan takes 3 minutes more to arrive, hence he will take 12 + 3 = 15 minutes,\n    # and so he walks 15 * v meters.\n    # Both walk the same distance, so the equations are equal:\n\n    # Alan's distance = Phillip's distance\n    # 15 * v = 12 * (v + 15)\n    \n    # Now solve for v:\n    v = (12 * 15) / (15 - 12)  # Simplify the equation: 15v = 12v + 180 -> 3v = 180\n    \n    # Now we can use v to calculate the distance between A and B by using Phillip's speed and time.\n    # Distance = speed of Phillip * time taken by Phillip\n    distance = (v + 15) * 12\n    \n    return distance\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(8, 4) * comb(12, 3)\n    return total_ways\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    alice_spent = 36\n    difference = 25.40\n    tom_money = 68.10\n\n    alice_final = tom_money - difference\n    alice_initial = alice_final + alice_spent\n\n    return alice_initial\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "import math\n\ndef solution():\n    count = 0\n    num = \"2\"\n\n    while int(num) <= 25555:\n        sqrt_value = math.sqrt(int(num))\n        if sqrt_value == int(sqrt_value):\n            count += 1\n        num += \"5\"\n\n    return count\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_5_numbers = 28\n    mean_12_numbers = 11\n\n    total_5_numbers = mean_5_numbers * 5\n    total_12_numbers = mean_12_numbers * 12\n\n    total_numbers = total_5_numbers + total_12_numbers\n    mean_all_numbers = total_numbers / (5 + 12)\n\n    return mean_all_numbers\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    number_of_gaps = 8  # Since there are 9 benches, there are 8 gaps between them\n    total_gap_length = 74 - (7 * number_of_gaps)  # Subtract total length of the gaps from total road length\n    bench_length = total_gap_length / 9  # Divide the remaining length of the road by the number of benches to find bench length\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies Jenny has\n    # Let a be the number of students in class A and b be the number of students in class B\n    x, a, b = symbols('x a b')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(4 * a, x + 20)  # If each student in A gets 4 candies, 20 more are needed\n    equation2 = Eq(6 * b, x - 16)  # If each student in B gets 6 candies, 16 are left\n    equation3 = Eq(a, 2 * b)      # The number of students in A is twice of B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, a, b))\n\n    return solutions[x]\n\n# Call the function and store the answer\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cut = 21\n    regrowth = 5\n    original_arms = total_cut - (total_cut // (regrowth + 1))\n    \n    return original_arms\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Number of coins\n    total_coins = 21\n\n    # Total amount in dollars\n    total_amount = 6.30\n\n    # Value of each type of coin in dollars\n    coin20 = 0.20\n    coin50 = 0.50\n\n    # Loop through all possible numbers of 20-cent coins\n    for num_coin20 in range(total_coins + 1):\n        # Calculate the number of 50-cent coins\n        num_coin50 = total_coins - num_coin20\n\n        # Calculate the total value with the current number of coins\n        total_value = num_coin20 * coin20 + num_coin50 * coin50\n\n        # Check if the total value matches the amount we have\n        if total_value == total_amount:\n            return num_coin50  # Return the number of 50-cent coins\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Since there are 6 gold and 6 silver coins,\n    # taking out 7 coins ensures at least two different colored coins are taken\n    # This is due to the Pigeonhole Principle.\n    return 7\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    remaining_sum = 2021 - 246  # Subtract the 3rd greatest number from the total sum\n    # The 7 numbers less than the 3rd greatest number must be as small as possible to minimize\n    # the 4th greatest number. These are at least 1, 2, 3, ..., 7.\n    min_sum_of_7_smallest = sum(range(1, 8))\n    # Subtract the minimum sum of the 7 smallest numbers from the remaining sum\n    # The result will be the sum of the 4th greatest number and the 2 greater numbers.\n    remaining_sum -= min_sum_of_7_smallest\n    # To minimize the 4th greatest number, we need to maximize the sum of the 2 greater numbers.\n    # Since the 3rd greatest is 246, the next two greater ones can be 246 + 1 and 246 + 2 minimally.\n    max_sum_of_2_greater = 246 + 1 + 246 + 2\n    # Then, the 4th greatest number is the remaining sum minus the minimum possible sum of the 2 greater numbers.\n    fourth_greatest_number = remaining_sum - max_sum_of_2_greater\n\n    return fourth_greatest_number\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # The pattern of the trees forms an arithmetic sequence.\n    # Since the distance between the 1st and 5th tree is 20 cm, we can infer that the distance between each pair of consecutive trees is 5 cm.\n    distance_between_trees = 20 / (5 - 1)\n\n    # Now, we want to find the distance from the 8th tree to the 14th tree.\n    # This is the distance between 7 intervals (from 8 to 9, 9 to 10, ..., 13 to 14).\n    number_of_intervals = (14 - 8)\n\n    # Total distance is the number of intervals times the distance between each tree.\n    total_distance = number_of_intervals * distance_between_trees\n\n    return total_distance\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_meters_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_meters_per_minute * time_minutes\n\n    return int(distance)\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    count = 0\n    for number in range(1, 25):\n        # Check that number and number+1 are coprime for numbers 1 to 23\n        if number < 24 and math.gcd(number, number + 1) == 1:\n            count += 1\n        # When the last number is reached, check that 24 and 1 are coprime\n        elif number == 24 and math.gcd(number, 1) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38 * 32 + 37 * 33 + 36 * 34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Jerry's current age as 'j' and Devi's current age as 'd'.\n    j, d = symbols('j d')\n    \n    # According to the problem, Devi is 8 years older than Jerry.\n    equation1 = Eq(d, j + 8)\n    \n    # In 4 years' time, the ratio of their ages will be 5:7.\n    equation2 = Eq((j + 4) / (d + 4), 5/7)\n    \n    # Solve the system of equations for 'j' and 'd'.\n    solutions = solve((equation1, equation2), (j, d))\n\n    # We return Jerry's current age.\n    return solutions[j]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Grey and his father's ages\n    grey_age, father_age = symbols('grey_age father_age')\n    \n    # Equation 1: Father's age when Grey was born = father_age - grey_age = 30\n    equation1 = Eq(father_age - grey_age, 30)\n\n    # Equation 2: This year father's age = 3 * grey_age\n    equation2 = Eq(father_age, 3 * grey_age)\n\n    # Solving the two equations simultaneously to find the ages\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n\n    # Returning father's age as the answer\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Since no exact numbers are required for parts graph or pie chart, we\n    # abstractly define 'Bud' as having 1 part and 'Pip' as having 5 parts.\n    bud_parts = 1\n    pip_parts = 5 * bud_parts  # Pip has 5 times the parts as Bud\n\n    parts_graph = {\"Bud\": bud_parts, \"Pip\": pip_parts}\n    return parts_graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    result = 10 * (numerator / denominator)\n    return result\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Applying the pigeonhole principle\n    max_books_in_a_layer = -(-total_books // layers)  # Ceiling division\n\n    return max_books_in_a_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_seats = (num_terms * (first_term + last_term)) // 2\n    return total_seats\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 6, 9]\n    three_digit_numbers = list(permutations(digits, 3))\n    \n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Total number of different three-digit numbers that can be formed\n    # First digit: Can be 1 or 2 (2 options, cannot be 0)\n    # Second digit: Can be any of the three numbers (3 options)\n    # Third digit: Can be any of the two remaining numbers (2 options)\n    ans = 2 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    return cows - pigs\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3*5*7  \n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The formula for the dividend is: dividend = divisor * quotient + remainder\n    # Since we need the minimum dividend, we should choose the smallest possible positive divisor.\n    # The divisor has to be greater than the remainder, so the smallest possible divisor is remainder + 1.\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    y, j = symbols('y j')  # y for Hazel's current age, j for Jessica's current age\n\n    # Create equations based on the problem statement\n    equation1 = Eq(j, y - 3)  # Jessica is 3 years younger than Hazel\n    equation2 = Eq(j + y, j + 3 + y + 3)  # Total of their ages next year (both will be one year older from three years from now)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, y))\n\n    # Calculate the total age next year\n    total_age_next_year = solutions[j] + 3 + solutions[y] + 3\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of cows and g represent the number of goats initially.\n    c, g = symbols('c g')\n\n    # Originally, 65% of all animals were cows.\n    equation1 = Eq(c / (c + g), 65/100)\n\n    # If 20% more of all animals are now cows, 85% are cows.\n    equation2 = Eq((c + 240) / (c + g + 240), (65+20)/100)\n\n    # The number of goats doubled.\n    equation3 = Eq(g * 2, (c + g + 240) - (c + 240))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert from m to cm\n    section3 = 150 / 10  # convert from mm to cm\n\n    # Calculate the total width\n    total_width = section1 + section2 + section3\n\n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    difference_in_age = 38 - melanie_age\n    uncle_age = melanie_age + difference_in_age\n\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pound_to_pence = 300  # Convert £3.00 to pence\n    part = 15  # The part we're interested in, 15p\n\n    percentage = (part / pound_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"15:25\", \"%H:%M\")\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of the variables\n    # In the given monomial -x^3 * y^(2n), degree is 3 + 2n\n    # According to the problem, the degree is 5\n    # Therefore, 3 + 2n = 5\n    # Solving for n gives us:\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    facing_teacher = 50  # Initialize with all students facing the teacher\n    for i in range(1, 51):  # Report numbers from 1 to 50\n        if i % 4 == 0 or i % 6 == 0:\n            facing_teacher -= 1  # Turn around if a multiple of 4 or 6\n    return facing_teacher\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = result.numerator // result.denominator + Fraction(result.numerator % result.denominator, result.denominator)\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different card numbers/letters (1-10, J, Q, K) in each suit,\n    # we use the Pigeonhole principle. Drawing one card of each number/letter from \n    # each suit, we will have drawn 13 cards.\n    # To ensure that we have at least two cards with the same number/letter,\n    # we must draw one more card.\n    \n    # This is because if we draw one card from each of the possible 13 numbers/letters,\n    # the 14th card must match one of the already drawn cards by the Pigeonhole principle.\n\n    number_of_cards_to_draw = 13 + 1  # 13 different cards + 1 to ensure a match\n\n    return number_of_cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    min_num = float('inf')\n    # Loop through possible hundreds, tens, and ones digits\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            for ones_digit in range(0, 10, 2):  # Must be even, so step by 2\n                if hundreds_digit + tens_digit + ones_digit == 21:\n                    min_num = min(min_num, hundreds_digit * 100 + tens_digit * 10 + ones_digit)\n    return min_num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    ans += sum(2/i for i in range(3, 21))\n    ans += sum(3/i for i in range(4, 21))\n    ans += sum(4/i for i in range(5, 21))\n    ans += sum(5/i for i in range(6, 21))\n    ans += sum(6/i for i in range(7, 21))\n    ans += sum(7/i for i in range(8, 21))\n    ans += sum(8/i for i in range(9, 21))\n    ans += sum(9/i for i in range(10, 21))\n    ans += sum(10/i for i in range(11, 21))\n    ans += sum(11/i for i in range(12, 21))\n    ans += sum(12/i for i in range(13, 21))\n    ans += sum(13/i for i in range(14, 21))\n    ans += sum(14/i for i in range(15, 21))\n    ans += sum(15/i for i in range(16, 21))\n    ans += sum(16/i for i in range(17, 21))\n    ans += sum(17/i for i in range(18, 21))\n    ans += sum(18/i for i in range(19, 21))\n    ans += 19/20\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    whole_amount = (part * 5) / 3\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    equation1 = Eq(2*cacti + 7*sunflowers, 156)\n    equation2 = Eq(cacti, sunflowers + 6)\n\n    solutions = solve((equation1, equation2), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a book\n    book_price = symbols('book_price')\n    \n    # Given: a pencil costs 40 pence\n    pencil_price = 0.40  # in pounds\n    \n    # Create equations based on the problem statement\n    # Sarah: 8 books + 3 pencils \n    # Rebecca: 3 books + 8 pencils\n    # Sarah paid 1 pound more than Rebecca\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n    \n    # Solve the equation for the price of a book\n    solution = solve(equation, book_price)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum((2*i)**2 for i in range(1, 11))\n    odd_squares_sum = sum((2*i-1)**2 for i in range(1, 11))\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    water_left = total_water - water_poured\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_fans, man_united_fans = symbols('liverpool_fans man_united_fans')\n\n    equation1 = Eq(man_united_fans + 4836, 3 * (liverpool_fans + 472))\n    equation2 = Eq(liverpool_fans - man_united_fans, 1000)\n\n    solutions = solve((equation1, equation2), (liverpool_fans, man_united_fans))\n\n    return solutions[liverpool_fans]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    sarah_spent = 8 * book_price + 3 * 0.40\n    rebecca_spent = 3 * book_price + 8 * 0.40\n    equation = Eq(sarah_spent, rebecca_spent + 1.00)\n\n    book_price_value = solve(equation, book_price)\n\n    return book_price_value[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n\n    jack_points = andrew_points + jack_more_points\n\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # Add back the $2 dollars given to Mike\n    original_nini = remaining_after_mike * 2  # Reverse the half given to Nini\n    original_bob = original_nini * 2  # Reverse the half given to Bob\n    original_money = original_bob * 2  # Reverse the half given to Andy's mother\n    return original_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Start with string consisting of numbers from 1 to 9\n    sequence = ''.join(map(str, range(1, 10)))\n\n    current_number = 10\n    while len(sequence) < 2023:\n        sequence += str(current_number)\n        current_number += 1\n\n    # Get the 2023rd digit\n    ans = int(sequence[2022])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the number of students in Class A, B be the number of students in Class B, and P be the total number of peaches\n    A, B, P = symbols('A B P')\n\n    # According to the first condition: P = 5A + 10\n    equation1 = Eq(P, 5 * A + 10)\n\n    # According to the second condition: P = 8B + 2 (since we need 2 more peaches)\n    equation2 = Eq(P, 8 * B + 2)\n\n    # It is known that Class A has 3 more students than Class B: A = B + 3\n    equation3 = Eq(A, B + 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, P))\n\n    return solutions[P]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # Age on the next day (01/01/99), which is the 11th birthday\n    age_on_birthday = 11\n\n    # Number of years between 01/01/99 and 31/12/01\n    years_difference = 2001 - 1999\n\n    # Age on 31/12/01 will be the current age plus the years difference\n    age_on_end_date = age_on_birthday + years_difference\n\n    return age_on_end_date\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    odd_numbers = []\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    tshirts, caps = symbols('tshirts caps')\n\n    # Set up the equations given the problem\n    ratio_equation = Eq(8 * caps, 5 * tshirts)\n    tshirts_sold = tshirts / 4\n    caps_sold = caps / 5\n\n    total_money_from_tshirts = 3 * tshirts_sold\n    total_money_from_caps = 5 * caps_sold\n    total_money = Eq(total_money_from_tshirts + total_money_from_caps, 132)\n\n    # Solve the system of equations regarding the number of tshirts and caps\n    solutions = solve((ratio_equation, total_money), (tshirts, caps))\n\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n\n    min_trips = (total_students + boat_capacity - 1) // boat_capacity\n\n    return min_trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n\n    ordinal_number = (nth_term - first_term) // common_difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let 'e' be the number of game cards Eric has\n    # Then Joe has '7e' game cards\n    # If Joe gives 'x' game cards to Eric, both will have 168 game cards\n    # So, after giving 'x' cards to Eric, Joe will have '7e - x' and Eric 'e + x'\n    # The equations will be:\n    # 7e - x = 168 -- (1)\n    # e + x = 168 -- (2)\n    # By adding both equations, we eliminate 'x':\n    # 7e - x + e + x = 168 + 168\n    # 8e = 336\n    # e = 336 / 8\n    e = 336 // 8\n    # Now we have the number of game cards Eric has initially, we can calculate 'x':\n    # e + x = 168\n    # x = 168 - e\n    x = 168 - e\n\n    return x\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    additional_catch = 9\n\n    final_catch = initial_catch - run_away + additional_catch\n    return final_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # converting 1 hour and 20 minutes into minutes\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # In a circle, if two numbers are directly opposite to each other\n    # It means the difference between their positions on the circle\n    # is equal to half of the total number of people in the game.\n    \n    # Here, we know numbers 6 and 19 are opposite each other, so:\n    position_difference = abs(19 - 6) # The numerical difference in positions\n    # Since they are opposite, this numerical difference represents half the circle\n    total_people = position_difference * 2 # The total number of people\n\n    return total_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Mina can split the apples into two groups where the first group has anywhere from 1 to 9 apples\n    # The second group will have the remaining apples, which will always be different from the first group.\n    # Hence, there are 9 different ways she can split the apples.\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    number_of_students = 5\n    ways_to_line_up = math.factorial(number_of_students)\n    return ways_to_line_up\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    # Total number of pears\n    total_pears = 38\n    # Anne gives Charlie 6 pears, so we divide the remaining pears into 2 to find\n    # how many pears each of them would have after giving/receiving 6 pears.\n    # Then we add back the 6 pears Anne gave to find the original number for Anne.\n    anne_pears_after_giving = (total_pears - 6) // 2\n    anne_pears_initially = anne_pears_after_giving + 6\n    return anne_pears_initially\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_swims = amy_swims - joanne_swims\n    return more_swims\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Create an equation as per the given question\n    equation = Eq((1000 * a + 100 * b + 10 * c + d) + (100 * a + 10 * b + c) + (10 * a + b) + a, 1370)\n    \n    # Solve for the digits a, b, c, and d\n    solutions = solve(equation)\n    \n    # Assuming a unique solution, extract the value of abcd\n    for sol in solutions:\n        value_abcd = 1000 * sol[a] + 100 * sol[b] + 10 * sol[c] + sol[d]\n        return value_abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    initial_condition = Eq(isaac, 5 * joseph)\n    after_gift_condition = Eq(joseph + 154, 9/10 * isaac)\n    \n    solutions = solve((initial_condition, after_gift_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "from math import factorial\n\ndef solution():\n    num_zeros = 0\n    num = factorial(29)\n    while num % 10 == 0:\n        num_zeros += 1\n        num //= 10\n    return num_zeros\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    base_8_number = \"12345654321\"\n    N = int(base_8_number, 8)  # Convert the base 8 number to a base 10 number\n    \n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Given:\n    linda_distance = 1200 # m Linda jogged when they met\n    speed_ratio_linda_ted = 3/4 # speed ratio of Linda to Ted\n    \n    # Calculate the distance Ted jogged when they met\n    ted_distance = linda_distance / speed_ratio_linda_ted # m\n    \n    # Calculate the total length of the path\n    total_length = linda_distance + ted_distance # m\n    \n    return total_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must also be divisible by 9\n    # Given number 2018A, we need to find A such that 2 + 0 + 1 + 8 + A is divisible by 9\n    # The sum is currently 11, so A must be 7 to make the sum 18, which is divisible by 9\n\n    A = 7\n    number = 20180 + A\n\n    # Now we need to find the remainder when this number is divided by 8\n    remainder = number % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_elvis = 1\n    \n    total_squirrels = ryan_front + elvis_behind + between_ryan_elvis + 2 # Ryan and Elvis themselves\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from itertools import permutations\n\n    # Number of students\n    n = 6\n    total_permutations = 0\n\n    # Generate all permutations of n elements\n    perm = list(permutations(range(n)))\n\n    for p in perm:\n        # Check if none of the students received their own paper back\n        if all(p[i] != i for i in range(n)):\n            total_permutations += 1\n\n    return total_permutations\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    \n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    total_weight = 64\n    result = percentage * total_weight\n    return result\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the number of pupils in School P at first\n    # Let y be the number of pupils in School Q at first\n    # According to the question:\n    # x/y = 2/3 (Initial ratio)\n    # (x + 240) / (y + 240) = 3/4 (Ratio after admitting 240 pupils each)\n\n    # From the first ratio: y = 3x/2\n    # Substitute y in the second equation:\n    # (x + 240) / (3x/2 + 240) = 3/4\n    # Cross-multiply to solve for x:\n    # 4(x + 240) = 3(3x/2 + 240)\n    # 4x + 960 = 9x/2 + 720\n    # Multiply through by 2 to get rid of the fraction:\n    # 8x + 1920 = 9x + 1440\n    # Bring all terms involving x to one side:\n    # 1920 - 1440 = 9x - 8x\n    # 480 = x\n    x = 480\n    \n    return x\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    total_amount = 45\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(number for number in range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack_age_now = symbols('jack_age_now')\n\n    # Create the equation based on the problem statement\n    # jack_age_now - 5 = 1/2 * (jack_age_now + 8)\n    equation = Eq(jack_age_now - 5, 1/2 * (jack_age_now + 8))\n\n    # Solve the equation\n    age_now_solution = solve(equation, jack_age_now)\n\n    # Return Jack's current age\n    return age_now_solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% of her money on a bag.\n    percentage_spent_on_bag = 70\n\n    # This leaves her with 30% of her money.\n    remainder = 100 - percentage_spent_on_bag\n\n    # Nora then spent 3/8 of the remainder on a purse.\n    percentage_spent_on_purse = (3 / 8) * remainder\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_per_student_before = 12\n    \n    total_candies = initial_students * candies_per_student_before\n    new_students_count = initial_students + 1\n    candies_per_student_after = total_candies // new_students_count\n    \n    return candies_per_student_after\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION')         # Total number of letters in EDUCATION\n    total_vowels = len('EDUAIO')             # Total number of vowels in EDUCATION\n    total_consonants = total_letters - total_vowels  # Total number of consonants in EDUCATION\n    \n    # Total number of ways to arrange all the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Total number of ways to arrange all the vowels\n    vowel_arrangements = factorial(total_vowels)\n    \n    # The total number of ways to insert the vowels in the gaps between consonants.\n    # There are (total_consonants + 1) gaps (including beginning and end of word),\n    # and we can place all the vowels together in any of these gaps.\n    vowel_insertions = factorial(total_consonants + 1)\n    \n    # The number of arrangements where vowels are together\n    vowels_together_arrangements = vowel_insertions * vowel_arrangements\n    \n    # Final answer: total arrangements - arrangements where vowels are together\n    ans = total_arrangements - vowels_together_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(30 / 100 * x + 70 / 100 * (20 - x), 20 * 54 / 100)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    total_sweets = 11\n    wrappers = 11\n\n    while wrappers >= 3:\n        extra_sweets = wrappers // 3\n        total_sweets += extra_sweets\n        wrappers = wrappers % 3 + extra_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # The sum of the angles in any triangle is 180 degrees.\n    # m∠BAC + m∠ABC + m∠ACB = 180 degrees.\n\n    # Given m∠BAC = 50 degrees, we can let m∠ABC = B and m∠ACB = C.\n    # We know that BP and CP bisect m∠ABC and m∠ACB respectively.\n\n    # Therefore, m∠ABP = B/2 and m∠ACP = C/2.\n    \n    # The sum of the angles at point P in triangle BPC will be equal to:\n    # m∠BPC + m∠BPA + m∠CPA = 180 degrees.\n    \n    # We can also express m∠BPA and m∠CPA in terms of B and C.\n    # m∠BPA = m∠ABP + m∠BAC = B/2 + 50 degrees\n    # m∠CPA = m∠ACP + m∠BAC = C/2 + 50 degrees\n    \n    # Now, since m∠ABC + m∠ACB = 180 degrees - m∠BAC,\n    # we can find B + C = 180 - 50 = 130 degrees.\n\n    # Thus, m∠BPC can be found by subtracting the other two angles at P from 180 degrees:\n    # m∠BPC = 180 - m∠BPA - m∠CPA\n    # m∠BPC = 180 - (B/2 + 50) - (C/2 + 50)\n    \n    # We substitute B + C with 130:\n    # m∠BPC = 180 - (130/2 + 50 + 50)\n    # m∠BPC = 180 - (65 + 100)\n    # m∠BPC = 180 - 165\n    # m∠BPC = 15\n    \n    # The measure of ∠BPC is 15 degrees.\n\n    return 15\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for each type of bird\n    two_tail_birds, three_tail_birds, six_tail_birds, eight_tail_birds = symbols('two_tail_birds three_tail_birds six_tail_birds eight_tail_birds')\n\n    # The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds\n    equation1 = Eq(two_tail_birds, 2 * eight_tail_birds + 5)\n    # The number of three-tailed birds is 2 more than half the number of six-tailed bird\n    equation2 = Eq(three_tail_birds, six_tail_birds / 2 + 2)\n    # The total number of their tails is 2 less than four times as many as the total number of their heads\n    equation3 = Eq(2 * two_tail_birds + 3 * three_tail_birds + 6 * six_tail_birds + 8 * eight_tail_birds,\n                   4 * (two_tail_birds + three_tail_birds + six_tail_birds + 2 * eight_tail_birds) - 2)\n    # The difference between the total number of their heads and their tails is 241\n    equation4 = Eq(two_tail_birds + three_tail_birds + six_tail_birds + 2 * eight_tail_birds -\n                   (2 * two_tail_birds + 3 * three_tail_birds + 6 * six_tail_birds + 8 * eight_tail_birds), -241)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tail_birds, three_tail_birds, six_tail_birds, eight_tail_birds))\n\n    return solutions[three_tail_birds]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40 AM', '%I:%M %p')\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways from Ayton to Beeton\n    A_to_B = 4\n    # Number of ways from Beeton to Ceeton\n    B_to_C = 5\n    # Number of ways from Ceeton to Deeton\n    C_to_D = 6\n    # Number of ways from Ayton directly to Deeton\n    A_to_D_direct = 3\n    \n    # Total ways from Ayton to Deeton through Beeton and Ceeton\n    A_to_D_via_B_C = A_to_B * B_to_C * C_to_D\n    \n    # Total different ways from Ayton to Deeton\n    total_ways = A_to_D_direct + A_to_D_via_B_C\n    \n    return total_ways\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Convert total sweets into grams\n    total_sweets_g = 5000  # 5 kg in grams\n    # Calculate the number of bags\n    bag_weight_g = 250  # weight of each bag in grams\n    num_bags = total_sweets_g / bag_weight_g  # number of bags\n\n    # Calculate total cost and revenue\n    total_cost = 10  # cost in pounds\n    sell_price_per_bag = 0.65  # sell price of each bag in pounds\n    total_revenue = num_bags * sell_price_per_bag\n\n    # Calculate profit\n    profit = total_revenue - total_cost\n\n    # Calculate percentage profit\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # The fractions are equivalent if their cross products are equal:\n    # 15 * □ = 20 * 3\n    # So we can solve for □:\n    \n    box_value = (20 * 3) / 15\n\n    return box_value\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    n_10 = 10\n    n_15 = 15\n\n    common_difference = (nth_term_15 - nth_term_10) / (n_15 - n_10)\n    nth_term_12 = nth_term_10 + (12 - n_10) * common_difference\n\n    return nth_term_12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count_twice = 0\n\n    # Only numbers that are multiples of exactly two different numbers \n    # here (2 and 3, but not 4 because it's a multiple of 2) will be counted.\n    for number in range(1, 2017):\n        count_factors = 0\n        if number % 2 == 0:\n            count_factors += 1\n        if number % 3 == 0:\n            count_factors += 1\n        if number % 4 == 0:\n            count_factors -= 1  # Subtract one if it's also a multiple of 4 (and thus 2)\n        if count_factors == 2:\n            count_twice += 1\n\n    return count_twice\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally = 3.75\n    joe = symbols('joe')\n    spent_each = 2.50\n\n    # Equation for the total amount of money left after both spent on ice-cream\n    equation = Eq(sally - spent_each + joe - spent_each, 5)\n\n    # Solve for joe's original amount\n    joe_original_amount = solve(equation, joe)\n\n    return joe_original_amount[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n\n    total_trees_first_3_days = 3 * first_3_days_avg\n    total_trees_last_5_days = 5 * last_5_days_avg\n\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    total_days = 8\n    average_trees_per_day = total_trees / total_days\n\n    return average_trees_per_day\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    # Choose 2 out of 4 options for lunch\n    # Calculate number of ways to choose salads and soups\n    salads_soups = comb(15, 1) * comb(20, 1)\n    # Calculate number of ways to choose salads and vegetable dishes\n    salads_vegetables = comb(15, 1) * comb(12, 1)\n    # Calculate number of ways to choose salads and sandwiches\n    salads_sandwiches = comb(15, 1) * comb(6, 1)\n    # Calculate number of ways to choose soups and vegetable dishes\n    soups_vegetables = comb(20, 1) * comb(12, 1)\n    # Calculate number of ways to choose soups and sandwiches\n    soups_sandwiches = comb(20, 1) * comb(6, 1)\n    # Calculate number of ways to choose vegetable dishes and sandwiches\n    vegetables_sandwiches = comb(12, 1) * comb(6, 1)\n    \n    # Add up all the possible combinations (Principle of Addition)\n    ans = (salads_soups + salads_vegetables + salads_sandwiches +\n           soups_vegetables + soups_sandwiches + vegetables_sandwiches)\n    \n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_students = 0\n    boys_excess = 32\n    layer = 0\n    \n    # Assuming that the array starts with boys on the outside, we can deduce that:\n    # - There will always be 4 more boys than girls in each pair of layers (except for the center if it's a single layer).\n    # - The difference between boys and girls in each pair of layers will be 4, until there's potentially\n    #   a single layer in the center that could be either all boys or all girls.\n    # - We can find the number of layers by dividing the boys excess by 4 and then check for an additional center layer.\n\n    layers = boys_excess // 4  # Number of pairs of boy-girl layers\n\n    # Based on layers, calculate the number of students assuming the following pattern\n    # 1st layer: 1^2 boys, 2nd layer: 3^2 girls, 3rd layer: 5^2 boys, 4th layer: 7^2 girls, etc.\n\n    for layer in range(1, 2 * layers + 1, 2):\n        if layer % 4 == 1:  # Boy layer\n            total_students += layer ** 2  # Add boys\n        else:  # Girl layer\n            total_students += layer ** 2  # Add girls\n\n    # Check if there's an additional center layer\n    if boys_excess % 4 == 0:\n        # Even number of layers, so the center is a girl layer\n        # Add the girls in the center layer\n        center_layer = (layers * 2 + 1)**2\n        total_students += center_layer\n    else:\n        # Odd number of layers, there's an additional layer of boys in the center\n        # Add the boys in the center layer\n        center_layer = (layers * 2 + 1)**2\n        total_students += center_layer\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Since n, n + 2, n + 4 are prime, n must be odd, otherwise n + 2 or n + 4 would be even and not prime.\n        # We can skip even numbers to increase efficiency.\n        if n % 2 == 0:\n            n += 1\n            continue\n        \n        # Check if all conditions are met, i.e., all numbers are prime\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 2\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # Initial condition: mangoes = strawberries + 448g\n    equation1 = Eq(mangoes, strawberries + 448)\n\n    # After giving away 900g: strawberries = 2 * (mangoes - 900g)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solution[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Equation for the apple and lemon relationship\n    equation = Eq((2/3) * total_items - (1/9) * total_items - 12, (1 - 2/3 - 1/9) * total_items)\n    \n    # Solving for total number of items\n    total_items_solution = solve(equation, total_items)\n\n    # Number of lemons is the rest of the items\n    lemons = (1 - 2/3 - 1/9) * total_items_solution[0]\n\n    return lemons\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_original, anthony_original = symbols('max_original anthony_original')\n\n    # Max buys the chocolates\n    equation1 = Eq((max_original - 12) / anthony_original, 2 / 5)\n    \n    # Anthony buys the chocolates\n    equation2 = Eq(max_original / (anthony_original - 12), 8 / 13)\n    \n    solutions = solve((equation1, equation2), (max_original, anthony_original))\n    \n    return solutions[max_original]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let r represent the original number of red stickers\n    # Let b represent the original number of blue stickers\n    # Given that the initial number of red and blue stickers are equal, we have r = b\n    # Liz gave away (2/3) of her red stickers, so she is left with (1/3)r red stickers\n    # She is left with (1/4)(r + b) of her total stickers, so the remaining number of stickers is (1/4)(2r)\n    \n    r, b = symbols('r b')  # where r and b are the original number of red and blue stickers\n    remaining_red = (1/3)*r\n    total_remaining = (1/4) * (2*r)  # because r = b, total stickers initially = 2*r\n    \n    # Since total remaining stickers is the sum of remaining red and remaining blue stickers\n    remaining_blue = total_remaining - remaining_red\n\n    # remaining_blue must be a fraction of the original blue stickers (which is the same as r)\n    fraction_of_blue_given_away = (r - remaining_blue) / r\n    \n    # Solve for the fraction\n    fraction_of_blue_given_away = solve(Eq(remaining_blue, r - fraction_of_blue_given_away * r), fraction_of_blue_given_away)\n\n    return fraction_of_blue_given_away[0]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import comb\n\ndef solution():\n    # If each kid gets at least one pen, we have to distribute 20 - 6 = 14 pens to 6 kids\n    # This is equivalent to the problem of placing 14 indistinguishable items into 6 distinguishable bins\n    # or \"stars and bars\" problem (number of ways to divide n+k-1 items into k parts),\n    # with 14 stars (pens) and 5 bars (dividers between kids).\n    return comb(14 + 6 - 1, 6 - 1)\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    power_cycle = [base_unit_digit]\n    current = base_unit_digit\n\n    for _ in range(4):  # Calculate cycle modulo 10 because we're interested in unit digits\n        current = (current * base_unit_digit) % 10\n        if current == base_unit_digit:\n            break\n        power_cycle.append(current)\n\n    power_cycle_length = len(power_cycle)\n    power_remainder = 2022 % power_cycle_length\n\n    unit_digit = power_cycle[power_remainder - 1]\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Assume x1 <= x2 <= x3 <= x4 and x1 + x2 + x3 + x4 = 16\n    for x4 in range(16, 0, -1):\n        for x3 in range(x4-1, 0, -1):\n            for x2 in range(x3-1, 0, -1):\n                for x1 in range(x2-1, 0, -1):\n                    if x1 + x2 + x3 + x4 == 16:\n                        return x4\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths_mm = [\n        10,            # 10 millimeters\n        100 * 10,      # 100 centimeters in millimeters\n        10 * 1000 * 10, # 10 meters in millimeters\n        2 * 1000 * 1000 * 10, # 2 kilometers in millimeters\n        2800 * 10,     # 2800 centimeters in millimeters\n        2500 * 1000 * 10, # 2500 meters in millimeters\n        100,           # 100 millimeters\n        100 * 1000 * 10  # 100 meters in millimeters\n    ]\n    \n    min_length = min(lengths_mm)\n    min_index = lengths_mm.index(min_length)\n    \n    return min_index  # Index of the smallest length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    diff = smallest_6_digit_number - largest_5_digit_number\n    return diff\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '123456'\n    odd_digits = '135'  # odd numbers to be at the end\n    count = 0\n    for perm in permutations(digits, 3):\n        if perm[2] in odd_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # A is 2/3 of B\n    equation1 = Eq(A, 2/3 * B)\n    # B is 4/5 of C\n    equation2 = Eq(B, 4/5 * C)\n    # A is 21 less than C\n    equation3 = Eq(A, C - 21)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    for ducks in range(26):\n        cows = 25 - ducks\n        if 4 * cows + 2 * ducks == 68:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Total number of children\n    total_children = 11 + 5\n    \n    # Average height of the group\n    avg_height_group = 122.5\n    \n    # Total height of the group\n    total_height_group = avg_height_group * total_children\n    \n    # Let the average height of the boys be x\n    # Then the average height of the girls will be x + 3.2\n    \n    # We can set up the following equation:\n    # (11 * (x + 3.2)) + (5 * x) = total_height_group\n    \n    # Simplify and solve for x\n    x = (total_height_group - (11 * 3.2)) / total_children\n    \n    # Calculate the average height of the girls\n    avg_height_girls = x + 3.2\n    \n    return avg_height_girls\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    total_students = 70\n    avg_score = 66\n\n    girls_avg = 70\n    boys_avg = 63\n\n    boys = total_students - girls\n\n    equation = Eq(girls * girls_avg + boys * boys_avg, total_students * avg_score)\n    girls_count = solve(equation, girls)\n\n    return girls_count[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since the numbers are consecutive odd numbers, they form an arithmetic sequence\n    # with a common difference of 2. Let the middle number be x.\n    # Then the sum of these numbers is 9*x because there are 4 numbers before x and\n    # 4 numbers after x, maintaining the sum as 9*x.\n    # The sum of these 9 numbers is given to be 1503.\n    \n    # Calculate the middle number\n    x = 1503 // 9\n    \n    # Calculate the smallest number\n    smallest = x - 4 * 2\n    \n    return smallest\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # The maximum number of regions into which a plane can be divided by a figure with n non-intersecting line segments is given by n(n+1)/2 + 1.\n    # For triangles, each side can be seen as a line segment. As each triangle has 3 sides, 5 triangles have a total of 15 line segments.\n    # However, as these triangles are on the same plane, their sides can intersect.\n    # The maximum number of intersections between non-parallel lines is given by the formula n(n-1)/2, where n is the number of lines.\n    # Since each triangle can have its sides intersect with the sides of 4 other triangles at most, we have a total of 5*4/2 = 10 possible intersections per triangle.\n    # Since there are 5 triangles, we multiply this number by 5.\n    # The formula for the maximum number of regions created by n lines is n(n+1)/2 + 1, thus the maximum number of parts/divisions in the plane is given by this formula:\n    \n    # Calculate the maximum number of intersections first\n    lines = 5 * 3  # 5 triangles with 3 lines each\n    max_intersections = lines * (lines - 1) // 2\n\n    # The maximum number of regions into which a plane can be divided with n lines is n(n+1)/2 + 1.\n    # To get the number of regions, we add the original 5 (for the triangles themselves, not their intersections) to the maximum intersections.\n    # Each intersection can create at most one new region.\n    \n    regions = max_intersections + 5\n    \n    return regions\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # 32nd term information\n    term_index_1 = 32\n    term_value_1 = 157\n    \n    # 108th term information\n    term_index_2 = 108\n    term_value_2 = 537\n    \n    # Calculate the common difference\n    term_difference = (term_value_2 - term_value_1) / (term_index_2 - term_index_1)\n    \n    # Calculate the first term\n    first_term = term_value_1 - (term_index_1 - 1) * term_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the total number of candies\n    x = symbols('x')\n    \n    # Calculate how many candies are left after each person\n    donna_left = x / 2 + 3\n    jane_got = donna_left / 2\n    jane_left = jane_got - jane_got / 3 - 4\n    kate_got = jane_left / 2\n    kate_left = kate_got - kate_got / 4\n    \n    # Final equation for the candies Kate had left\n    equation = Eq(kate_left, 42)\n    \n    # Solve the equation\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # For 3 passes, we have 3 choices for the first pass,\n    # 2 choices for the second pass (cannot pass back immediately),\n    # and 1 choice for the third pass (must pass back to A).\n    \n    # Total number of different methods:\n    count = 3 * 2 * 1\n\n    return count\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n\n    total_cost = cost_per_day * days\n\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the initial number of storybooks that Anthea has.\n    # Jason gives 4 storybooks to Anthea, then they have the same number,\n    # which means that after giving away the storybooks, Jason has 30 - 4 storybooks.\n    # Since they end up with the same number, Anthea will have x + 4 storybooks.\n    # Therefore, we have the equation:\n    # 30 - 4 = x + 4\n    # Solving for x gives us the initial number of storybooks Anthea has.\n\n    x = 30 - 4 - 4  # Calculation based on the equation\n    difference = 30 - x  # The initial difference between Jason's and Anthea's storybooks\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    # Since Q and P are distinct digits in a 2-digit number,\n    # they are limited to the range of 0 to 9, and Q cannot be 0.\n    # For a number to satisfy the equation P x Q = QP, \n    # P must be the multiple of Q, but since the answer is a 2-digit number, Q must equal 1\n    # So, QP is in the form of 1P\n    \n    Q = 1\n    \n    for P in range(10):\n        if Q * P == int(str(Q) + str(P)):\n            return int(str(Q) + str(P))\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 1\n    a, b = 4, 10\n    while True:\n        if lcm % a == 0 and lcm % b == 0:\n            break\n        lcm += 1\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # William's speed in metres per second\n    time_seconds = 12 * 60  # 12 minutes converted to seconds\n\n    distance = speed * time_seconds  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = 2020 * 68 + 505 * 128\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Xavier's sugar\n    sugar_xavier = 100 * 0.25\n\n    # Yelena's sugar\n    sugar_yelena = 500 * 0.55\n\n    # Carol's sugar\n    sugar_carol = 400 * 0.35\n\n    # Total sugar\n    total_sugar = sugar_xavier + sugar_yelena + sugar_carol\n\n    # Total solution weight\n    total_solution = 100 + 500 + 400\n\n    # Concentration of resulting solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote A's and B's work rates as a and b respectively.\n    a, b = symbols('a b')\n\n    # A's efficiency is twice B's, which we can translate as a = 2 * b.\n    equation1 = Eq(a, 2 * b)\n\n    # B takes 12 days more than A to finish the job, so 1/b = 1/a + 12.\n    equation2 = Eq(1 / b, 1 / a + 12)\n\n    # Solve the equations for a and b.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculate the combined work rate of A and B.\n    combined_rate = solutions[a] + solutions[b]\n\n    # The time it takes for A and B to complete the job working together is 1 / combined_rate.\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change = 4.83\n\n    tissues_cost = total_money - (newspaper_cost + change)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    boys_left = boys - (3/5) * boys\n    girls_left = girls - 42\n\n    # boys_left = girls_left + 12\n    equation = Eq(boys_left, girls_left + 12)\n\n    # Since there was an equal number of boys and girls at the beginning\n    # boys = girls\n    solutions = solve((equation, Eq(boys, girls)), (boys, girls))\n\n    total_students = solutions[boys] * 2  # since boys = girls\n\n    return total_students\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    \n    digits = '123'\n    perm = permutations(digits)\n    ans = len(list(perm))\n    \n    # calculating the number of 1 and 2 digit permutations as well\n    for i in range(1, len(digits)):\n        perm = permutations(digits, i)\n        ans += len(list(perm))\n    \n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + 3 * baskets_of_tomatoes\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n\n    # Let the distance be d km\n    # d = speed * time\n    # time = d / speed\n    \n    # When travelling at 3 km/h, he takes his usual time + 12 minutes\n    # When travelling at 5 km/h, he takes his usual time - 4 minutes\n    \n    # Therefore, the usual time = d / 3 - 12/60\n    # The time when he is early = d / 5\n    # So, d / 3 - 12/60 = d / 5 + 4/60\n    \n    # Solving the equation for d.\n    # Multiply all terms by 60 to avoid fractions: 20d - 12 = 12d + 4\n    # 8d = 16\n    # d = 2\n    \n    # The distance from his home to office is 2 km.\n    return 2\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    single_cost = 6.25\n    total_cost = 12 * single_cost\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    initial_temp = -8\n    final_temp = 13\n    increase_in_temp = final_temp - initial_temp\n    return increase_in_temp\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of candies Rachel has\n    # Let a represent the original number of candies Alice has\n    r, a = symbols('r a')\n\n    # Creating our equations based on the problem statement\n    # Equation 1: If Rachel gives Alice 10 candies, they will have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation 2: If Alice gives Rachel 10 candies, then Rachel will have 4 more\n    # than 3 times the amount of candies Alice has\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Total candies they have originally\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    initial_ratio = Eq(boys/girls, 3/2)\n    new_ratio = Eq((boys + 12)/(girls + 12), 19/14)\n\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls] + 12 + 12\n\n    return total_children\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    num_ways_4_different = factorial(4)\n    \n    # For two different colored pairs of socks (2 colors but two pairs each)\n    num_ways_2_pairs = factorial(4) / (factorial(2) * factorial(2))\n    \n    return int(num_ways_4_different), int(num_ways_2_pairs)\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    # Total number of pupils before transfer\n    total_pupils_before = 112 + 1098\n    # After transferring, both rooms have the same number of pupils\n    # total_pupils_before equals to twice the new number of pupils in each room after the transfer\n    new_number_each_room = total_pupils_before // 2\n\n    return new_number_each_room\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    weld_length = 3\n\n    full_length = length1 + length2 - weld_length\n\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    g_earth = 9.8  # acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # acceleration due to gravity on Moon in m/s^2\n    T_earth = 1  # period of pendulum on Earth in seconds\n\n    # Formula for the period T of a simple pendulum: T = 2 * pi * sqrt(l / g)\n    # Where l is the length of the pendulum and g is the acceleration due to gravity.\n    # We can assume the length of the pendulum (l) remains constant,\n    # therefore the ratio of the periods will be the square root of the inverse ratio of gravities.\n\n    # (T_moon / T_earth)^2 = g_earth / g_moon\n    # T_moon = T_earth * sqrt(g_earth / g_moon)\n    T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)  # Square root to find the side length of the wall\n\n    red_tiles = green_tiles = 0\n\n    # Calculate number of tiles for each color\n    for layer in range(side_length // 2):\n        if layer % 2 == 0:  # Red tiles in even layers (0, 2, 4, ...)\n            red_tiles += (side_length - layer * 2) ** 2\n        else:  # Green tiles in odd layers (1, 3, 5, ...)\n            green_tiles += (side_length - layer * 2) ** 2\n\n    # If the side_length is odd, the center tile color needs to be checked\n    if side_length % 2 != 0:\n        if (side_length // 2) % 2 == 0:  # Red tile in the center\n            red_tiles += 1\n        else:\n            green_tiles += 1\n\n    dominant_color = \"red\" if red_tiles > green_tiles else \"green\"\n    dominant_count = abs(red_tiles - green_tiles)\n    \n    return (dominant_color, dominant_count)\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('1/3/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('15/4/2023', '%d/%m/%Y')\n    delta = end_date - start_date\n    return delta.days + 1 # Include both the start and end dates\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):  # William can answer 0 to 10 questions correctly\n        justin_correct = william_correct + 24//6  # Justin gets 24 more points, which means 4 more correct answers\n        if justin_correct > 10: # Cannot answer more than 10 questions correctly\n            continue\n        \n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = justin_correct * 6 - (10 - justin_correct) * 2\n        \n        if william_points + justin_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since all knowledge point routes seem to point towards combinatorial number puzzles,\n    # we assume that A refers to a missing number in a number puzzle typically found in competitions.\n    # A typical puzzle of this nature would be structured in a way where the value of A depends on\n    # the operation used between other numbers. However, with no specific puzzle provided, this\n    # cannot be solved with a given Python code without additional information.\n    \n    # Placeholder for A's value until further information is provided.\n    A = None\n    \n    # Return A's value which currently cannot be determined.\n    return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's daily work rate\n    rate_a = 1 / 15\n    # B's daily work rate\n    rate_b = 1 / 10\n    \n    # Work done by A and B together in 3 days\n    work_done_3_days = 3 * (rate_a + rate_b)\n    \n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_3_days\n    \n    # Number of days B needs to finish the remaining work\n    days_for_b = remaining_work / rate_b\n    \n    return days_for_b\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people = 100\n    side_length = int(people**0.5)  # Since it is a square array\n    outermost_layer = (side_length * 4) - 4  # Each corner is counted twice\n\n    return outermost_layer\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    initial_amount = remaining_after_sister / (1 - 3/7)\n    return initial_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Since this is a combinatorics game, Tom's winning strategy revolves around Nim-sum (which should be zero to force a win).\n    # Here, we need to calculate the Nim-sum of the two piles:\n    # In binary form: 88 is '1011000' and 52 is '110100'.\n    # Their Nim-sum (binary XOR) would be '11100' which is 28 in decimal form.\n    \n    # To ensure his win, Tom must make a move that results in a zero Nim-sum.\n    # He should thus take cards from pile A (with 88 cards) to make the Nim-sum zero.\n    # To do that, he needs to turn the current Nim-sum into zero by making pile A equal to the Nim-sum of the two current piles.\n    \n    # Current Nim-sum = 88 XOR 52\n    nim_sum = 88 ^ 52\n    \n    # Tom needs to change pile A in such a way that: new pile A XOR pile B = 0\n    # This will be achieved if new pile A = nim_sum\n    move_on_pile_a = 88 - nim_sum\n\n    # Tom's winning strategy will be to reduce pile A by this number of cards in his first move\n    return move_on_pile_a\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Using the Pigeonhole Principle, if every student gets at least 1 apple,\n    # to make sure at least one student gets at least 3 apples,\n    # we distribute 1 apple to each student until we reach 78 apples.\n    # The remaining 2 apples can be given to one student, who will then have 3 apples.\n    # 80 - 78 = 2 this operation ensures at least one student has at least 3 apples\n    # Now, we calculate how many students (pigeonholes) we have by 78 apples.\n    # Since each student receives at least 1 apple, the number of students equals the number of apples distributed\n    num_students = 78  # We subtracted 2 to ensure one student gets at least 3 apples.\n\n    return num_students\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is the common difference in the arithmetic sequence\n\n    # Let n be the number of terms until the first negative term\n    # The nth term Tn can be calculated by Tn = a + (n - 1)d\n    # We want to find the smallest n such that Tn < 0\n    # So, 50 + (n - 1)(-4) < 0\n    # Rearrange the inequality to solve for n\n    # 50 - 4(n - 1) < 0\n    # 50 - 4n + 4 < 0\n    # 54 - 4n < 0\n    # -4n < -54\n    # n > 54 / 4\n\n    n = (54 // 4) + 1  # Using integer division to find the smallest integer greater than 54 / 4\n\n    return n\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 2014! will contain the factor 10 (which is 2*5),\n    # and there are more than one such factors in 2014!,\n    # the last digit of 2014! will definitely be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    total_balls = 34\n\n    # Let the common ratio for red:white be \"r\" and for white:black be \"w\".\n    # Then we have red = r, white = 2r, and white = 3w, black = 4w.\n    # From white = 2r and white = 3w, we get 2r = 3w.\n\n    # The total number of balls is red + white + black.\n    # Substituting the ratios in, we have: r + 2r + 3w + 4w = total_balls\n    # Simplify the equation to get: 3r + 7w = 34 (from 3r = 2w, we can get w = 3r/2)\n\n    # Now we substitute w from w = 3r/2 into the equation:\n    # 3r + 7(3r/2) = 34 which simplifies to 3r + 21r/2 = 34\n    # Multiplying through by 2 to clear the denominator gives us 6r + 21r = 68\n    # Combine like terms to get 27r = 68\n    # Now divide both sides by 27 to get r\n    r = 68 / 27\n\n    # The number of red balls is just \"r\"\n    red_balls = r\n\n    return int(red_balls)\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n    \n    cost_for_10_cheesecakes_and_10_logcakes = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    \n    return cost_for_10_cheesecakes_and_10_logcakes\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    value = (4 / 50) * 100\n    return value\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = sum(i * (2 * i - 1) for i in range(1, 11))\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # cost of a pencil\n    pencil_cost = 5\n    # cost of a pen\n    pen_cost = 15\n\n    # number of pencils for one pen\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    # The volume of the prism without the hole is the area of the base times the height.\n    # The volume of the hole is the area of the hole's base times the height.\n    # The total volume is the difference between the two.\n\n    base_area = 5 * 5  # Side length squared\n    hole_area = 1 * 1  # Side length of the hole squared\n\n    # Let h be the height of the prism\n    # Volume of the prism without the hole is base_area * h\n    # Volume of the hole is hole_area * h\n    # Total volume given is 480 cm^3, so we solve for h:\n    # (base_area - hole_area) * h = 480\n    h = 480 / (base_area - hole_area)  # Rearrange to solve for h\n\n    return h\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    henry_initial = 26 + 2*13 + 16  # Given to brother, to each sister, and left with Henry\n    return henry_initial\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2*i+1) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Initialize the ratio of yellow to green beads initially and after purchase\n    initial_ratio_yellow_to_green = 3 / 2\n    after_purchase_ratio_green_to_yellow = 3 / 2\n    \n    # Since these ratios are equal, cross-multiply to find the relationship between the number of beads\n    # Let y be the initial number of yellow beads and g be the initial number of green beads\n    # initial_ratio_yellow_to_green = y / g\n    # after_purchase_ratio_green_to_yellow = (g + 20) / (y + 5)\n    # Cross-multiplying the ratios we get:\n    # (y + 5) * 2 = (g + 20) * 3\n    \n    # Now express g in terms of y using the initial ratio\n    g = (2 / 3) * y\n\n    # Substitute g in the equation obtained from cross-multiplication\n    # (y + 5) * 2 = ((2 / 3) * y + 20) * 3\n    # Simplify the equation to find the value of y\n    y = (20 * 3 - 5 * 2) / (2 * (1 - 2 / 3))\n\n    # Use the value of y to find g\n    g = (2 / 3) * y\n\n    # The total number of beads initially is the sum of y and g\n    total_initial_beads = y + g\n\n    return int(total_initial_beads)\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # For numbers between 10 and 100 (two digit palindromes)\n    for i in range(1, 10):\n        count += 1  # The number itself is a palindrome e.g. 11, 22, 33, ....\n\n    # For numbers between 100 and 1000 (three digit palindromes)\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # The number with the same first and last digit e.g. 101, 111, 121, ....\n\n    return count\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed (miles per hour)\n    amy_speed = 60\n    # Christen's speed (miles per hour)\n    christen_speed = 40\n    # Time taken to meet (hours)\n    time_to_meet = 4\n    \n    # Distance Amy traveled when they meet\n    amy_distance = amy_speed * time_to_meet\n    # Distance Christen traveled when they meet\n    christen_distance = christen_speed * time_to_meet\n    \n    # Total distance between the two starting points\n    total_distance = amy_distance + christen_distance\n    \n    # Time it takes for Christen to reach Amy's starting point\n    time_for_christen = total_distance / christen_speed\n    return time_for_christen\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':  # Last digit even and first digit not zero\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    wrong_mark = -1\n    total_score = 110\n\n    # Let correct_answers be the number of correct answers\n    # Then, the number of wrong answers is (total_questions - correct_answers)\n    # The total score is the number of correct answers times the marks for correct \n    # answer plus the number of wrong answers times the marks for wrong answer.\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    ratio_sum = 4 + 5  # Sum of the ratio parts (4 parts lemon, 5 parts chocolate)\n    lemon_cakes = (4 / ratio_sum) * remaining_cakes\n    \n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit cannot be 0, ensuring a three-digit number\n        for j in range(0, 10):  # The second digit can be from 0 to 9\n            for k in range(0, 10):  # The third digit can also be from 0 to 9\n                if len({i, j, k}) == 2:  # Check if there are exactly two distinct digits\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # The three players are Cici, Lily, and April.\n    # The starting player is Lily.\n\n    # Possible passing scenarios for two passes:\n    # Scenario 1: Lily -> Cici -> Lily\n    # Scenario 2: Lily -> Cici -> April\n    # Scenario 3: Lily -> April -> Lily\n    # Scenario 4: Lily -> April -> Cici\n\n    # Since Lily cannot pass the ball to herself on the second pass, there are two choices for the first pass\n    # (to Cici or April), and for each of those choices, there are two choices for the second pass (back to Lily\n    # or to the third player).\n\n    # Therefore, the total number of different passing ways is 2 * 2 = 4\n    return 4\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    average_first_four = 89\n    score_fifth = 94\n    total_first_four = average_first_four * 4\n    total_five_assignments = total_first_four + score_fifth\n    average_all_five = total_five_assignments / 5\n    return average_all_five\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the number of books Lily has and J be the number of books Judy has\n    L, J = symbols('L J')\n    # If Lily sends x books to Judy, both will have the same amount, so L - x = J + x\n    # We also introduce the equation J = L - x - x, which results from equating the two expressions after Lily gives x books to Judy\n    equation1 = Eq(L - 2*J, 0)\n    # We know L = J + (L - J), so the second equation represents the difference in the number of books they have initially\n    equation2 = Eq(L, J + (L - J))\n\n    # We solve the two equations to find the relationship between L and J\n    solutions = solve((equation1, equation2), (L, J))\n\n    # The solution for L - J will be the number of books Lily had more than Judy at the beginning\n    ans = solutions[L] - solutions[J]\n    return ans\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    arms_per_wibble = 6\n    total_arms = 81\n    num_wibbles = 11\n\n    arms_of_wibbles = arms_per_wibble * num_wibbles\n    arms_of_wobbles = total_arms - arms_of_wibbles\n    arms_per_wobble = 5\n\n    num_wobbles = arms_of_wobbles // arms_per_wobble\n\n    return num_wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import isprime\n\ndef solution():\n    # Iterating through prime numbers that could potentially satisfy the equation\n    for a in range(2, 179):  # 179 is the limit because 7a ≤ 179\n        if isprime(a):\n            for b in range(2, 179):  # Similarly, 9b ≤ 179\n                if isprime(b) and 7 * a + 9 * b == 179:\n                    return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    amount = 420\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return int(total_seconds)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10  # km/h\n    distance_ahead = 10  # km\n\n    # Relative speed between the two\n    relative_speed = maverick_speed - kelvin_speed  # km/h\n    catch_up_time = distance_ahead / relative_speed  # hours\n\n    # convert time from hours to minutes\n    catch_up_time_minutes = catch_up_time * 60\n\n    # Checking if Maverick is correct (24 minutes to catch up)\n    maverick_correct = catch_up_time_minutes <= 24\n\n    return catch_up_time_minutes if not maverick_correct else \"Maverick is correct\"\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def custom_operator(a, b):\n        return a + b - (a * b / 910)\n\n    ans = 1  # Start with the last number in the sequence\n    for i in range(2, 2017):\n        ans = custom_operator(i, ans)  # Apply the custom operator in descending order\n\n    return ans\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the two numbers be x and y where x is the smaller number\n    x, y = symbols('x y')\n    \n    # Equation for the sum of the numbers\n    equation1 = Eq(x + y, 80)\n    \n    # Equation for the difference of the numbers\n    equation2 = Eq(y - x, 40)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    \n    # Pip's mistake was using addition instead of multiplication.\n    # Correct approach: For each boy, there are 4 choices for the girl, so it's a multiplication of possibilities.\n    ways = boys * girls\n    \n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    # Let the number of correct answers be x.\n    # Then the number of wrong answers is (total_questions - x).\n    # Formulate the equation: correct_mark * x + wrong_mark * (total_questions - x) = total_score\n    \n    for x in range(total_questions + 1):  # Number of correct answers can range from 0 to 6.\n        if correct_mark * x + wrong_mark * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total length of the road covered by plum trees\n    total_length = (41 - 1) * 4  # because there are trees at the ends\n\n    # Calculate the number of pine trees: we add 1 because there's a tree at each end\n    num_pine_trees = (total_length // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, o = symbols('y o')  # y for younger, o for older\n    equation1 = Eq(o - y, y - 4)  # When the older was the younger's age\n    equation2 = Eq(y + (o - y), 61)  # When the younger will be the older's age\n\n    solutions = solve((equation1, equation2), (y, o))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since every kid must get at least one eraser, start by giving one eraser to each kid.\n    remaining_erasers = 6 - 3  # 3 erasers are distributed, one to each kid.\n\n    # Now we need to distribute the remaining erasers to the 3 kids.\n    # This problem is equivalent to partitioning the remaining erasers into 3 non-empty parts.\n    # Since the erasers are identical, this is a problem of distributing 'n' identical items\n    # into 'r' distinct groups (stars and bars / balls and urns problem).\n\n    # If we think of the remaining erasers as stars (*) and the separations between kids as bars (|),\n    # then each unique distribution can be represented by a string of stars and bars.\n    # For example, if the first kid gets 1 more eraser, the second gets 2 more, and the third gets none,\n    # the string would be \"*||**\".\n \n    # The general formula for this is: C(n + r - 1, r - 1) where \"C\" is a combination,\n    # \"n\" is the number of identical items to distribute, and \"r\" is the number of groups.\n\n    # The count is meaning for 2 bars among bars+stars (remaining_erasers + 2) positions\n    \n    from math import comb\n    count = comb(remaining_erasers + 2, 2)  # Choose 2 bars' positions out of remaining_erasers + 2 places\n    return count\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_needed = (10 * 9) / 3\n    return int(people_needed)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let x be the total amount of money Bud had initially.\n    # She spent 1/3 of it on a book, so she had 2/3 left.\n    # Then she spent 2/5 of the remaining money on a bag which costs £120.\n    # Therefore, the equation for the bag is: (2/3 * 2/5) * x = 120\n    # Solve for x to find the initial amount of money.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (2/5) * x, 120)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_watermelons = 48\n    # After selling 60% on the second day, she is left with 40%\n    second_day_multiplier = 0.40\n    # Calculate the remaining watermelons after the first day\n    remaining_after_first_day = remaining_watermelons / second_day_multiplier\n    # Since she sold 1/3 on the first day, she had 2/3 left\n    first_day_multiplier = 2/3\n    total_watermelons = remaining_after_first_day / first_day_multiplier\n    \n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    m = 4\n    sum_squares = (1/6) * n * (n + 1) * (2*n + 1) - (1/6) * m * (m + 1) * (2*m + 1)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for i in range(1, 9):\n        for j in range(i+1, 9):\n            for k in range(j+1, 9):\n                if i + j + k == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    jessica_front = 5\n    judy_behind = 7\n    # There is one desk where Jessica sits and one where Judy sits\n    # Since Judy sits behind Jessica, desks in front of Jessica + desks behind Judy + Jessica's desk + Judy's desk\n    total_desks = jessica_front + judy_behind + 1 + 1\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls', integer=True)\n    \n    # Equation representing the total number of students\n    total_students_eq = Eq(boys + girls, 152)\n    \n    # Equation representing the condition after removing 1/11 of the boys and 5 girls\n    after_removal_eq = Eq(boys - boys / 11, girls - 5)\n    \n    # Solving the system of equations\n    solutions = solve((total_students_eq, after_removal_eq), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = (2.5 + 5) / 0.75\n    return x\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start_number = 1000\n    decrement = 11\n    current_number = start_number\n\n    while current_number >= 0:\n        current_number -= decrement\n\n    ans = current_number + decrement\n    return ans\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    return product % 100\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    first_number = 0.11\n    second_number = (midpoint - first_number) * 2 + first_number\n\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    sweets = 486\n    classmates = 17\n\n    sweets_per_person = sweets // classmates\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    unit_rate = 7 / 12\n    toffees = chocolates * unit_rate\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    multiples_of_4 = [x for x in range(28, 41) if x % 4 == 0 and 9 in [y for y in range(1, x+1) if x % y == 0]]\n    ans = multiples_of_4[0] if multiples_of_4 else None\n    return ans\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mango_cost_per_box = 56\n    mango_boxes = 24\n    lychee_boxes = 19\n\n    mango_total_cost = mango_boxes * mango_cost_per_box\n    lychee_total_cost = total_cost - mango_total_cost\n\n    lychee_cost_per_box = lychee_total_cost / lychee_boxes\n\n    return lychee_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    # Initialize a set to store unique sums\n    unique_sums = set()\n    \n    # Iterate through each possible combination of three coins\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                # Calculate the sum of the selected coins and add to the set\n                unique_sums.add(coin1 + coin2 + coin3)\n    \n    # The answer is the number of unique sums\n    return len(unique_sums)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits from 0-9 for filling A, B, and C\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # Create the numbers putting the digits in the right positions\n        num1 = 100 + 10 * A + B\n        num2 = 100 + C\n        # Multiply both numbers\n        product = num1 * num2\n        # Check if the product is a five digit number starting with 10---\n        if str(product)[:3] == '10' and str(product)[-2:] == '00':\n            return sum(perm)  # A+B+C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = principal_amount * ((1 + interest_rate) ** years)\n    return final_amount\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    decimal_sum = 0.65 + 0.507 + 0.25\n    return decimal_sum\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "def solution():\n    from itertools import permutations\n    \n    cards = ['1', '1', '2', '2']\n    distinct_permutations = set(permutations(cards, 3))\n    \n    # Filter out permutations starting with '0' (zero) since we want three-digit numbers only\n    valid_permutations = [perm for perm in distinct_permutations if perm[0] != '0']\n    \n    return len(valid_permutations)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Assuming the multiplication is of the form:\n    #   __P\n    # x __Q\n    # ------\n    #   __R\n    # Since we are multiplying two two-digit numbers,\n    # the maximum possible value for P, Q and R would be 81 (9x9).\n    # Thus, they are all single digit numbers.\n\n    # Trying all possible combinations of single digit numbers for P, Q, and R\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Multiplying P and Q as two digit numbers with tens digit as 1\n                if (10 + P) * (10 + Q) == (10 * R + P + Q):\n                    return P + Q + R\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let the number of children who only bought the shirt be x\n    # Let the number of children who got their name on the shirt be y\n    \n    # Total number of children is 50\n    # x + y = 50\n    \n    # The total amount paid is £555\n    # 10x + 15y = 555\n    \n    # Solving the system of linear equations for x and y\n    # x = 50 - y\n    # Replacing x in the second equation\n    # 10(50 - y) + 15y = 555\n    # 500 - 10y + 15y = 555\n    # 5y = 555 - 500\n    # 5y = 55\n    # y = 55 / 5\n    # y = 11\n    \n    # So, the number of children who got their name on the shirt is y\n    y = 11\n    return y\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # calculate the total distance jogged\n    jogging_time = 1  # 1 hour from 7:30 AM to 8:30 AM\n    jogging_speed = 5  # 5 miles per hour\n    jogging_distance = jogging_time * jogging_speed\n    \n    # calculate the total distance walked\n    walking_time = 2  # 2 hours from 8:30 AM to 10:30 AM\n    walking_speed = 3  # 3 miles per hour\n    walking_distance = walking_time * walking_speed\n    \n    # calculate the total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Since the numbers are consecutive, we can express them as n, n+1, n+2, n+3, n+4.\n    # The sum of these five numbers is then 5n + 10, which equals 100.\n    # To find the value of n, the smallest number, we can set up the equation 5n + 10 = 100 and solve for n.\n\n    # Solving the equation:\n    # 5n + 10 = 100\n    # 5n = 90\n    # n = 18\n    # Hence, the smallest number is 18.\n    \n    n = (100 - 10) // 5\n    return n\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factorization of the number\n    factors = factorint(44000)\n\n    # Initialize q as 1\n    q = 1\n    # We're looking for cube factors, so we need to make sure\n    # each prime factor's exponent is a multiple of 3. To find q,\n    # we multiply q by the prime factor raised to the difference\n    # between the factor's exponent and the next smaller multiple of 3.\n    for base, exp in factors.items():\n        if exp % 3 != 0:\n            q *= base ** (3 - exp % 3)\n\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    \n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    \n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    used_bags = (total_balls - 2) // balls_per_bag\n    return used_bags\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n    number_of_gaps = number_of_trees - 1\n\n    distance_between_trees = total_length / number_of_gaps\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst-case scenario,\n    # one could pick 2 cards of each number without getting 3 cards with the same number.\n    # Since there are 13 different numbers, one could draw 2 cards for each of the 13 numbers (13 * 2).\n    worst_case_for_2_cards = 13 * 2\n\n    # However, the next card drawn MUST be the 3rd card of some number,\n    # since there are no more unique numbers left to pick from without getting 3 cards with the same number.\n    next_card_ensures_third = 1\n\n    # Therefore, the number of cards one must draw is:\n    cards_to_draw = worst_case_for_2_cards + next_card_ensures_third\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possibilities for each suit\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n\n    # Initial statement by Eddie\n    # This means the card cannot be a unique number among all suits because otherwise Eddie would know\n    non_unique_numbers = (spades | hearts | diamonds | clubs) - \\\n                         ((spades - hearts - diamonds - clubs) |\n                          (hearts - spades - diamonds - clubs) |\n                          (diamonds - spades - hearts - clubs) |\n                          (clubs - spades - hearts - diamonds))\n\n    # Possible cards after Eddie's statement\n    possibilities_after_eddie = (spades & non_unique_numbers) | \\\n                                (hearts & non_unique_numbers) | \\\n                                (diamonds & non_unique_numbers) | \\\n                                (clubs & non_unique_numbers)\n\n    # Statement by Avril\n    # This means the card must be uniquely identifiable to Avril now, so it cannot be a '7' or 'K'\n    # because there are two '7's and two 'K's remaining and it has be one of the numbers left in possibilities_after_eddie\n    numbers_after_avril = possibilities_after_eddie - {'7', 'K'}\n\n    # Final card identification by Eddie\n    # After Avril's statement, this leaves only one suit for each of the remaining numbers\n    final_card_suit = ''\n    final_card_number = ''\n    for suit, numbers in {'spades': spades, 'hearts': hearts, 'diamonds': diamonds, 'clubs': clubs}.items():\n        for number in numbers_after_avril:\n            if number in numbers:\n                final_card_suit = suit\n                final_card_number = number\n                break\n        if final_card_suit:\n            break\n\n    # Convert suit to its initial\n    suit_initial = final_card_suit[0].upper()\n\n    # The card is combination of number and suit initial\n    return final_card_number + suit_initial\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy has 149 notebooks\n    # Andy gives 38 notebooks to his sister\n    # After giving away 38 notebooks, Andy and his sister have the same number\n\n    # Let's denote the initial number of notebooks his sister has as 'sister_notebooks'\n    # According to the problem:\n    # 149 - 38 = sister_notebooks + 38\n    # 111 = sister_notebooks + 38\n    # sister_notebooks = 111 - 38\n\n    sister_notebooks = 111 - 38\n\n    # Now let's check if Joey is correct\n    # Joey's calculation:\n    # He did 38 / 2 = 19 (This is incorrect as there's no need to divide by 2)\n    # Then subtracted 19 from 149 which is not relevant to the problem\n\n    # Thus, Joey's calculation is incorrect\n    # The correct number of notebooks Andy's sister originally has is calculated as shown above\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_intervals = 9 + 1\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    original_number = '200'\n    count = 0\n    for position in range(len(original_number)):\n        for digit in '0123456789':\n            if original_number[position] != digit:\n                new_number = original_number[:position] + digit + original_number[position+1:]\n                if new_number[0] != '0' and isprime(int(new_number)):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    total_sum = 5 * 5  # mean times number of elements\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    emily_position_from_back = danny_position_from_back - 1\n\n    total_people = people_in_front_of_emily + emily_position_from_back + 1  # Including Emily herself\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma needs 12 minutes to cut a piece of wood into 4 sections.\n    # To cut into 4 sections, she needs to make 3 cuts (each cut creates an additional section).\n    # If each cut takes the same amount of time, she needs 12 / 3 = 4 minutes per cut.\n\n    # If she needs to cut the wood 5 times, that will create 6 sections.\n    # Therefore, she needs 5 cuts * 4 minutes per cut.\n    minutes_per_cut = 12 / 3\n    total_minutes = 5 * minutes_per_cut\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days to finish the book and p the total number of pages\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she will finish in (d + 2) days\n    # p = 30 * (d + 2)\n    equation1 = Eq(p, 30 * (d + 2))\n\n    # If Vanessa reads 39 pages a day, she will finish in (d - 4) days\n    # p = 39 * (d - 4)\n    equation2 = Eq(p, 39 * (d - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 30:\n        page += 1\n        count += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable 'x'\n    x = symbols('x')\n    \n    # Define the equation based on Celeste's working\n    # Correct equation: 13 - 4x + 6 = 5 - x + 2\n    # Celeste's wrong step was not handling the negative sign correctly when expanding\n    equation = Eq(13 - 2*(2*x - 3), 5 - (x - 2))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Find Ms Tan's age which is the solution value of 'x'\n    return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum1 = sum(range(6, 11))\n    sum2 = sum(range(1, 6))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    result = 7.298 / 0.2\n    return result\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n\n    days_needed = total_rooms / (rooms_per_worker_per_day * workers)\n\n    return days_needed\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges for 48p\n    equation1 = Eq(apple + 2*orange, 48)\n\n    # Jade buys 1 apple and 1 orange for 31p\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for pocket money (pm) and the price of one tennis ball (tb)\n    pm, tb = symbols('pm tb')\n\n    # Create equations based on the given information\n    equation1 = Eq(4 * tb + 27, pm) # Four tennis balls plus 27p left over equals pocket money\n    equation2 = Eq(2 * tb + 1.51 * 100, pm) # Two tennis balls plus £1.51 (converted to pence) left over equals pocket money\n\n    # Solve the system of equations for pm and tb\n    solutions = solve((equation1, equation2), (pm, tb))\n\n    # Extract the pocket money solution\n    pocket_money = solutions[pm]\n\n    return pocket_money\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour  # 3600 seconds in an hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    badges_left = total_badges - given_badges\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        if str(number).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Elias and Aileen's sticker counts\n    elias, aileen = symbols('elias aileen')\n    \n    # Equation representing the initial relationship between Elias and Aileen's stickers\n    equation1 = Eq(elias, 5 * aileen)\n    \n    # Equation representing the situation after Elias gave away 88 stickers and Aileen lost 8 stickers\n    equation2 = Eq(elias - 88, aileen - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n    \n    # Number of stickers each had in the end is their initial number minus the stickers they lost\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n    \n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n\n    equation1 = Eq(thomas, 5 * gerald / 3)\n    equation2 = Eq(thomas + gerald, 104)\n\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    thomas_pieces = solutions[thomas]\n    gerald_pieces = solutions[gerald]\n\n    return thomas_pieces - gerald_pieces\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    nums = range(11, 32, 2)  # Create the sequence from 11 to 31 with a common difference of 2\n    return sum(nums)         # Sum the sequence\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    num1 = int('25', 8)  # Convert '25' from base 8 to base 10\n    num2 = int('37', 8)  # Convert '37' from base 8 to base 10\n    sum_base10 = num1 + num2  # Perform addition in base 10\n    sum_base8 = oct(sum_base10)  # Convert the sum back to base 8\n    return sum_base8[2:]  # Remove the '0o' prefix that indicates an octal number\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8 / 11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11, 3597 % 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the number of rackets purchased\n    r = symbols('r')\n\n    # Cost price of each racket is $150\n    cost_price_each = 150\n\n    # Selling price of each racket is $175\n    selling_price_each = 175\n\n    # When the shop is left with 8 rackets, it has achieved a desired profit of $525\n    # Hence, the total revenue (TR) minus the cost to purchase 'r' rackets minus the cost of remaining 8 rackets\n    # should be equal to the profit\n    equation = Eq(selling_price_each * (r - 8) - cost_price_each * r, 525)\n\n    # Solve the equation for 'r'\n    num_rackets = solve(equation, r)\n\n    return num_rackets[0]\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let's denote the initial amount of money Chloe and Gordon had as x.\n    # Since they had equal amounts at first, we can set up an equation \n    # based on the fact that their spending rates differ and the remaining\n    # money is different but their initial amounts are the same.\n\n    # Chloe's remaining amount = initial amount - (spending_rate_chloe * number_of_days)\n    # Gordon's remaining amount = initial amount - (spending_rate_gordon * number_of_days)\n\n    # Since we don't know the number of days, we can express it using the remaining amounts and the difference in spending rates.\n\n    # (initial_amount - chloe_remaining) / spending_rate_chloe = (initial_amount - gordon_remaining) / spending_rate_gordon\n    # Solving the above equation will give us the initial amount.\n\n    chloe_remaining = 157\n    gordon_remaining = 82\n    spending_rate_chloe = 20\n    spending_rate_gordon = 25\n\n    # Rearranging the equation to solve for the initial amount, we get:\n    # initial_amount = (chloe_remaining * spending_rate_gordon - gordon_remaining * spending_rate_chloe) / (spending_rate_gordon - spending_rate_chloe)\n\n    initial_amount = (chloe_remaining * spending_rate_gordon - gordon_remaining * spending_rate_chloe) / (spending_rate_gordon - spending_rate_chloe)\n\n    return initial_amount\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of girls be g, boys b, children c, and adults a\n    # We have that b = 2/7 * g (boys are 2/7 of the girls)\n    # And a = 2/3 * c (adults are 2/3 of the children)\n    # Also, a = b + 1228 (there are 1228 more adults than boys)\n    # And c = g + b (children is the sum of girls and boys)\n    \n    # We can rewrite the variables in terms of g:\n    # b = 2/7 * g\n    # c = g + b = g + 2/7 * g = 9/7 * g\n    # a = 2/3 * c = 2/3 * 9/7 * g = 6/7 * g\n    \n    # Now let's use the last equation: a = b + 1228\n    # 6/7 * g = 2/7 * g + 1228\n    # Simplify and solve for g:\n    # 4/7 * g = 1228\n    # g = 1228 * 7/4\n    g = 1228 * 7 // 4  # // is used for integer division\n    \n    # Calculate the number of boys, children, and adults:\n    # b = 2/7 * g\n    b = (2 * g) // 7\n    # c = 9/7 * g\n    c = (9 * g) // 7\n    # a = 6/7 * g\n    a = (6 * g) // 7\n    \n    # Now calculate the total number of people at the park:\n    total_people = a + c\n    \n    return total_people\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    ans = 813 * 72\n    return ans\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # x2 must be greater than x1\n            for x3 in range(x2+1, 14):  # x3 must be greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n        \n    zeros_count = 0\n    while factorial % 10 == 0:\n        zeros_count += 1\n        factorial //= 10\n    \n    return zeros_count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons / 5\n    good_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n\n    total_sales = good_melons * selling_price_per_melon\n    profit = total_sales - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n    \n    # oranges = neighbours * x + 17\n    # apples = neighbours * y + 5\n    # neighbours = GCD(oranges - 17, apples - 5)\n    \n    oranges_leftover = 150 - 17\n    apples_leftover = 100 - 5\n\n    neighbours = gcd(oranges_leftover, apples_leftover)\n\n    return neighbours\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let x be the total value of the jewels in box P before the transfer\n    # Let y be the total value of the jewels in box Q before the transfer\n    # We have 2 equations as follows:\n    # (x - 5000)/3 + 1000 = x/3  =>  x - 5000 + 3000 = x  =>  x = 5000 + 3000\n    # (y + 5000)/3 + 1000 = y/3  =>  y + 5000 + 3000 = y  =>  y = -8000\n    \n    # Since x is the total value of jewels in box P before the transfer,\n    # and y is the total value of jewels in box Q before the transfer,\n    # the total value of all 6 jewels is (x + y).\n\n    x = 5000 + 3000\n    y = -8000\n    total_value = x + y\n    \n    return total_value\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # length of the line in cm\n    cross_interval = 1  # distance between crosses in cm\n    crosses = (line_length // cross_interval) + 1  # add 1 for the cross at the beginning\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # Since the pattern is \"red, red, green, yellow, yellow, green\" which consists of 6 balloons,\n    # and the pattern repeats every 6 balloons.\n    \n    pattern_length = 6  # Length of the repeating pattern\n    green_positions = [2, 6]  # Positions are 3rd and 6th in the pattern, indexing from 1\n    \n    # Calculate number of complete patterns\n    complete_patterns = 75 // pattern_length\n    \n    # Calculate remainder balloons that do not complete a pattern\n    remainder_balloons = 75 % pattern_length\n    \n    # Calculate green balloons in complete patterns\n    green_balloons = complete_patterns * len(green_positions)\n    \n    # Add green balloons in the remainder\n    green_balloons += sum(1 for pos in green_positions if pos <= remainder_balloons)\n    \n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, jessica = symbols('sandra jessica')\n\n    initial_diff = symbols('initial_diff')\n\n    # Situation after Sandra gave Jessica 13 marbles\n    equation1 = Eq(sandra - 13, jessica + 13 - 6)\n    \n    # Relationship between initial amount of Sandra and Jessica's marbles\n    equation2 = Eq(sandra - jessica, initial_diff)\n\n    solutions = solve((equation1, equation2), (sandra, jessica, initial_diff))\n\n    return solutions[initial_diff]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_1_6 = 6 - 1  # Since we're counting the intervals between posts\n    distance_between_posts = distance_between_first_and_sixth / number_of_intervals_1_6\n\n    number_of_intervals_1_9 = 9 - 1  # Now for the first and ninth lamp posts\n    distance_between_first_and_ninth = distance_between_posts * number_of_intervals_1_9\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Kate shared the candy with her seven friends, each receiving 26 pieces.\n    shared_candy = 7 * 26\n    \n    # Total candy left after eating 1/3 at home\n    total_candy_after_eating = shared_candy + 22  # 22 pieces left with Kate\n    \n    # We assume that the total amount of candy before eating 1/3 is 'total_candy'.\n    # Given that after eating 1/3, she is left with 2/3 of 'total_candy'.\n    # total_candy_after_eating = 2/3 * total_candy\n    # Thus, we can find the initial total amount of candy before eating:\n    total_candy = total_candy_after_eating * (3/2)\n    \n    return int(total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Ratio of Andy's speed to Bob's speed\n    speed_ratio = 9 / 5\n\n    # Top floor is the 25th floor; so we need to find out which floor Bob is on when Andy is on the 25th floor\n    # using the speed ratio.\n    bob_floor_when_andy_top = 25 / speed_ratio\n\n    return int(bob_floor_when_andy_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    words_total, speed_original = symbols('words_total speed_original')\n    \n    # Original time and speed\n    equation1 = Eq(words_total / speed_original, 3)\n    \n    # Increased speed and decreased time by 1 minute\n    equation2 = Eq(words_total / (speed_original + 30), 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (words_total, speed_original))\n    \n    return solutions[words_total]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Initialize all lights to off (0)\n    lights = [0] * 10\n\n    # Ms. Lily presses every other light switch starting with 1\n    # This changes the state of all odd-numbered lights\n    for i in range(0, 10, 2):\n        lights[i] = 1\n\n    # Sam presses each even-numbered switch 7 times\n    # Pressing a switch has the effect of toggling the light, so pressing an odd number of times\n    # will change the current state, while pressing an even number of times will result in no change.\n    # As 7 is odd, the state of all even-numbered lights will change.\n    for i in range(1, 10, 2):\n        # Toggle the light\n        lights[i] = 1 if lights[i] == 0 else 0\n\n    # Count how many lights are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    total_1s = 15\n    total_2s = 14\n    \n    single_1s = 10  # From 1 to 10, there are 1 \"1\" each in 1 and 10\n    single_2s = 10  # From 2 to 20, there are 1 \"2\" each in 2 and 20\n    \n    # After 10, 1 occurs in tens place till we get the remaining 1's count\n    # Every 10 numbers, \"1\" appears 10 times in tens place (i.e., 11, 12, ..., 19)\n    tens_1s = (total_1s - single_1s) // 10 \n    tens_start_1s = tens_1s * 10 + 1  # '+1' is for the number 10\n    \n    # Tens position is filled with 1's, calculate how many 1's we need in ones place\n    ones_1s_remaining = total_1s - single_1s - tens_1s * 10\n    \n    # After 20, 2 occurs in tens place till we get the remaining 2's count\n    # After 20, every 10 numbers, \"2\" appears 10 times in tens place (i.e., 21, 22, ..., 29)\n    tens_2s = (total_2s - single_2s) // 10\n    tens_start_2s = tens_2s * 10 + 2  # '+2' is for the number 20\n    \n    # Tens position is filled with 2's, calculate how many 2's we need in ones place\n    ones_2s_remaining = total_2s - single_2s - tens_2s * 10\n    \n    # Now, find the highest number which satisfies both 1's and 2's count\n    # Since we're past the tens filled with 2's, the remaining 2's must be counted in the 100's\n    # Compare if we need more 1's or 2's and pick the larger number\n    if ones_1s_remaining > ones_2s_remaining:\n        # If we need more 1's, the highest number N will definitely finish with a 1\n        # Counts: tens_start_1s + ones_1s_remaining = number like 13, 14, ... based on remaining 1's\n        max_N_with_1s = tens_start_1s + ones_1s_remaining - 1  # '-1' as we're starting with 11\n    else:\n        # If we need more or equal 2's, the highest number can either be finishing with a 2 or exceeded to next tens\n        max_N_with_2s = tens_start_2s + ones_2s_remaining - 1  # '-1' as we're starting with 21 or 22\n        # but, if we come into the situation where 'max_N_with_2s' is greater than the number we can get\n        # with remaining 1's, we need to make sure the last number ends with a 2 (and not exceed to 30, 40..)\n        if max_N_with_2s >= tens_start_1s + 10:\n            max_N_with_2s = tens_start_2s + ones_2s_remaining - 2  # '-2' adjustment for 22, 23 as start\n            \n    N = max(max_N_with_1s, max_N_with_2s)\n    \n    return N\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for amounts of water in Pail A and B\n    A, B = symbols('A B')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    day_climb = 3\n    night_slip = 2\n    net_movement_per_day = day_climb - night_slip\n    current_distance = 0\n    day = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slip\n    \n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    original_volume = 900\n    original_sugar_percentage = 0.06\n    desired_sugar_percentage = 0.10\n    \n    original_sugar_content = original_volume * original_sugar_percentage\n    additional_sugar_needed = (original_volume * desired_sugar_percentage) - original_sugar_content\n\n    return additional_sugar_needed\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    total_parts_needed = 100\n    time_spent = 2  # hours\n    \n    rate_of_production = parts_already_made / time_spent  # parts per hour\n    remaining_parts_needed = total_parts_needed - parts_already_made\n    time_needed_to_finish = remaining_parts_needed / rate_of_production\n    \n    return time_needed_to_finish\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    number_of_bars = 4\n    total_cost = cost_per_bar * number_of_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Suppose we draw all balls of the same color in the worst case\n    # Since there are 3 colors and in the worst case we draw all balls from two colors first\n    # We would have 5 red + 5 white (or any two combinations), hence 10 balls.\n    # To ensure that we get a third color, we add 1 more ball to this count.\n    return 10 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the number of books for each grade\n    books_grade4, books_grade5, books_grade6 = symbols('books_grade4 books_grade5 books_grade6')\n\n    # Now we translate the word problem into equations \n    eq1 = Eq(books_grade5, 2 * books_grade4 + 4)  # Grade 5 books are 4 more than twice Grade 4 books\n    eq2 = Eq(books_grade6, 3 * books_grade4 + 8)  # Grade 6 books are 8 more than three times Grade 4 books\n    eq3 = Eq(books_grade4 + books_grade5 + books_grade6, 720)  # Total number of books is 720\n\n    # Now we solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (books_grade4, books_grade5, books_grade6))\n\n    # We return the number of books for Grade 6, which is one of the solutions\n    return solutions[books_grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    colors = 5\n    balls_per_person = 2\n    max_unique_combinations = comb(colors, balls_per_person)\n\n    # We need 1 more person than the number of unique combinations\n    # to ensure that at least 2 people have taken out the same kind of balls\n    minimum_people = max_unique_combinations + 1\n\n    return minimum_people\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Since a product is divisible by 4 if at least one number is even and\n    # another number is either even or a multiple of 4, we can look at the worst case\n    # scenario: drawing all odd numbers and then one even number.\n\n    # There are 16 odd numbers between 10 and 41 (inclusive)\n    odd_numbers = [x for x in range(10, 42) if x % 2 != 0]\n\n    # We can draw all these odd numbers without getting a product divisible by 4\n    # Drawing one more number (the next even number) would ensure a product divisible by 4\n    # therefore, we would need to draw 17 numbers to ensure at least one product divisible by 4\n    ans = len(odd_numbers) + 1\n\n    return ans\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    hisham, melissa = symbols('hisham melissa')\n\n    # Given equations\n    total_cards = Eq(hisham + melissa, 876)\n    melissa_cards = Eq(melissa, 2 * hisham)\n\n    # Solve for hisham and melissa\n    cards = solve((total_cards, melissa_cards), (hisham, melissa))\n    hisham_cards = cards[hisham]\n    melissa_cards = cards[melissa]\n\n    # Calculate number of cards melissa should give to hisham\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # The common difference (d) is calculated by the formula: third_term = first_term + 2*d\n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # 2 m 20 cm is equal to 220 cm\n    length_each_piece = total_length_cm / 2\n    return length_each_piece\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    cost_per_cake = 46\n    number_of_cakes = 195\n    total_cost = cost_per_cake * number_of_cakes\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # 9^2 is the largest square in two digits\n    \n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Initial ages\n    brian_age = 14\n    father_age = 41\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euros_per_coffee = 4.8\n    exchange_rate = 0.96\n    dollars_per_coffee = euros_per_coffee / exchange_rate\n    return dollars_per_coffee\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = float('-inf')\n    \n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + b/c + (d/e)*f - (g + h/j)\n        if N.is_integer() and N > max_N:\n            max_N = N\n            \n    return int(max_N)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    total_books_final = total_books_initial + 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    chinese_books_initial = (ratio_chinese / total_ratio) * total_books_initial\n    malay_books_initial = (ratio_malay / total_ratio) * total_books_initial\n    english_books_initial = (ratio_english / total_ratio) * total_books_initial\n    \n    chinese_books_final = chinese_books_initial * 1.20\n    malay_books_final = malay_books_initial * 1.10\n    english_books_final = total_books_final - (chinese_books_final + malay_books_final)\n    \n    increase_english = ((english_books_final - english_books_initial) / english_books_initial) * 100\n    \n    return increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Total number of participants\n    total_participants = 12 + 8  # juniors + seniors\n    # Total average score\n    total_average_score = 14\n    # Average score of juniors\n    average_juniors = 10\n    \n    # Total score of all participants\n    total_score = total_average_score * total_participants\n    # Total score of juniors\n    total_score_juniors = average_juniors * 12\n    \n    # Total score of seniors only\n    total_score_seniors = total_score - total_score_juniors\n    # Average score of seniors\n    average_seniors = total_score_seniors / 8\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    # The smallest possible value of the number when rounded to the nearest hundred is 9700 is actually in the range\n    # 9650 to 9749, because any number in this range would be rounded up or down to 9700.\n    # The smallest number in this range is 9650.\n    \n    smallest_possible_value = 9650\n    return smallest_possible_value\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years old.\n    combined_age_four_years_ago = 10\n    \n    # Every year, each dog gets one year older. In 4 years, their combined age will increase by 4 * 2 (each dog ages 4 years).\n    combined_age_increase_in_four_years = 4 * 2\n    \n    # The current combined age of the dogs is the age four years ago plus the age increase.\n    current_combined_age = combined_age_four_years_ago + combined_age_increase_in_four_years\n    \n    # In 2 years, their combined age will again increase by 2 * 2 (each dog ages 2 years).\n    combined_age_increase_in_two_years = 2 * 2\n    \n    # The combined age of the dogs in 2 years is the current age plus the age increase in 2 years.\n    combined_age_in_two_years = current_combined_age + combined_age_increase_in_two_years\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    unanswered_questions = 1\n\n    # Total points if all answered questions were correct\n    total_correct_points = (total_questions - unanswered_questions) * points_correct\n\n    # Difference from the actual Rex's score will give us twice the number of incorrect questions, \n    # because each incorrect answer results in a 6 point difference from the correct answer (4 points lost for correct + 2 points lost for incorrect)\n    incorrect_questions = (total_correct_points - rex_score) // (points_correct - points_incorrect)\n\n    # The number of correct answers is total questions answered minus incorrect questions answered\n    correct_answers = (total_questions - unanswered_questions) - incorrect_questions\n\n    return correct_answers\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of correct answers\n    x = symbols('x')\n\n    # Total questions\n    total_questions = 90\n\n    # Mochi attempted 60% of the questions\n    attempted_questions = total_questions * 0.6\n\n    # Number of wrong answers is the attempted questions minus correct ones\n    wrong_answers = attempted_questions - x\n\n    # Since Mochi attempted 60%, remaining 40% are unanswered\n    unanswered_questions = total_questions * 0.4\n\n    # Calculate the score\n    equation = Eq(5*x - 2*wrong_answers + unanswered_questions, 264)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    min_apples_per_container = 2\n    # By the Pigeonhole Principle, if we distribute min_apples_per_container - 1 (i.e., 1 apple per container), there will be at least one container left without an apple. Therefore, the least number of apples to ensure that every container has at least min_apples_per_container apples is containers * (min_apples_per_container - 1) + 1\n    ans = containers * (min_apples_per_container - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**(-2022)\n    denominator = 92 * 10**(-2023)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_butter = 160 / 50\n    butter_needed = 300 / cookies_per_butter\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n    \n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    digits = 0\n    num = 1\n\n    while digits < 1000:\n        num_digits = len(str(num))\n        digits += num_digits\n        \n        if digits >= 1000:\n            break\n        \n        num += 1\n\n    return int(str(num)[len(str(num)) - (digits - 1000) - 1])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    \n    equation = Eq(3 * square - 2, 19)\n    \n    solution = solve(equation, square)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n    \n    # Using Inclusion-Exclusion Principle for Three Sets\n    # |A ∪ C ∪ E| = |A| + |C| + |E| - |A ∩ C| - |A ∩ E| - |C ∩ E| + |A ∩ C ∩ E|\n    total_fruits = A + C + E - AC - AE - CE + ACE\n    \n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    louis_position = total_people - people_behind - 1\n    \n    return louis_position\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    num_pupils = 18\n    seats = 3\n\n    # Since the arrangement matters (permutations), we'll use the permutations formula\n    # P(n, r) = n! / (n - r)!\n    ans = factorial(num_pupils) / factorial(num_pupils - seats)\n\n    return int(ans)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    total_debt = 5.04\n    months_needed = total_debt / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = 4\n    jason_age = symbols('jason_age')\n    \n    # Bruce and Willie have the same age as Jason\n    bruce_age = jason_age\n    willie_age = jason_age\n    \n    # The sum of their ages is 19 years\n    total_age_eq = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n    \n    # Since Jason is older than Jack, his age is greater than 4\n    solutions = solve((total_age_eq,), (jason_age,))\n    jason_solution = [sol for sol in solutions if sol > 4]\n    \n    return jason_solution[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let the number of friends be f and the total number of erasers be e.\n    from sympy import symbols, Eq, solve\n\n    f, e = symbols('f e')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(e - 3, 5 * f)  # if each friend gets 5 erasers, 3 are left\n    equation2 = Eq(e + 2, 6 * f)  # if each friend gets 6 erasers, 2 are short\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, e))\n\n    # e is the number of erasers Andy originally had\n    return solutions[e]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    youngest = symbols('youngest')\n    oldest = 6 * youngest\n    \n    # Each child was born 15 months apart, hence there are 8 intervals\n    # The total difference in age between the oldest and youngest is 8 intervals of 15 months each\n    total_diff = 8 * 15\n    \n    equation = Eq(oldest - youngest, total_diff)\n    \n    solution = solve(equation, youngest)\n    return solution[youngest]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Brute-force approach by trying all possible bracket insertions\n    # and evaluating the expression to find the smallest result.\n    import itertools\n\n    # Define initial expression\n    numbers = [15, 5, 5, 15, -6, 7]\n    operations = ['+', '*', '+', '-', '+']\n    smallest = float('inf')\n    indexes = list(range(len(numbers)))\n\n    # Generate all combinations for the two pairs of brackets\n    for comb in itertools.combinations(indexes[:-1], 2):\n        for comb2 in itertools.combinations(indexes[1:], 2):\n            if comb[1] < comb2[0]:  # Ensure brackets don't overlap\n                expr = ''\n                # Append first bracket if necessary\n                for i in range(len(numbers)):\n                    if i == comb[0]:\n                        expr += '('\n                    expr += str(numbers[i])\n                    if i < len(operations):\n                        expr += ' ' + operations[i] + ' '\n                    if i == comb[1] or i == comb2[1]:\n                        expr += ')'\n                    if i == comb2[0] and i != comb[1]:\n                        expr += '('\n                # Evaluate the expression with brackets\n                try:\n                    result = eval(expr)\n                    if result < smallest:\n                        smallest = result\n                        smallest_expr = expr\n                except (SyntaxError, ValueError):\n                    pass\n    return smallest, smallest_expr\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    sum_value = 0\n    for i in range(1, 2008):\n        sum_value += ((i ** 2) + ((i + 1) ** 2)) / (i * (i + 1))\n    return round(sum_value)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for thousands in range(1, 10): # since it's a 4 digit number, it can't start with 0\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(0, 10):\n                    original = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    new_number = ones * 1000 + thousands * 100 + hundreds * 10 + tens\n                    if new_number - original == 5877:\n                        return original\n    return None\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = -(-50 // 11) * 11  # Ceiling division to find the first multiple\n    last_multiple = 150 // 11 * 11       # Floor division to find the last multiple\n    \n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    return 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2/15)\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has.\n    # Then Cayden has x + 5 sweets.\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang will have x + 10 sweets,\n    # Cayden will have (x + 5) - 10 = x - 5 sweets.\n    # The difference in the number of sweets they have now\n    # will be the absolute difference between (x + 10) and (x - 5) sweets.\n    difference = abs((x + 10) - (x - 5))\n    return difference\n\n# Since x is not defined, and the specific number of sweets are not required, we can simplify:\ndef solution_simplified():\n    # The difference without giving sweets is 5.\n    # Cayden gives 10 sweets to Jiaxiang, which means the difference will decrease by 10.\n    # Now the new difference is 5 - 10 = -5\n    # Take the absolute value to find the actual difference.\n    new_difference = abs(5 - 10)\n    return new_difference\n\nans = solution_simplified()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Number of other pupils is 5\n    other_pupils = 5\n    \n    # Their total score is 5 pupils * 72%\n    total_score_without_mary = other_pupils * 72\n    \n    # Total pupils including Mary\n    total_pupils = 6\n    \n    # New average with Mary's score included is 75%\n    total_score_with_mary = total_pupils * 75\n    \n    # Mary's score is the difference between total scores with her and without\n    marys_score = total_score_with_mary - total_score_without_mary\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # in meters\n    bridge_length = 220  # in meters\n    speed = 60  # in meters per second\n\n    # Total distance to be covered is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n    \n    # Time taken to cross the total distance is the total distance divided by the speed\n    time_taken = total_distance / speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = (1/5) * total_cookies\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = (3/4) * remainder_cookies\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    greatest_number = 0\n    for i in range(999, 99, -1):\n        if i % 2 != 0 and i % 9 == 0 and (i // 10) % 10 % 4 == 0:\n            greatest_number = i\n            break\n    return greatest_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each of the four students must get at least one donut,\n    # we can start by giving one to each, leaving us with 11 - 4 = 7 donuts to distribute freely.\n    remaining_donuts = 11 - 4\n    \n    # Now we need to calculate the number of ways 7 identical doughnuts can be distributed\n    # to 4 students. This is a problem of distributing indistinguishable items into distinguishable\n    # boxes, which can be solved using the stars and bars method.\n    \n    # Calculating combinations using \"stars and bars\" method where:\n    # number of stars = remaining_donuts = 7 (the things to distribute)\n    # number of bars = 4 - 1 = 3 (the partitions between 4 students)\n    # number of ways = C(remaining_donuts + 4 - 1, 4 - 1)\n    \n    return comb(remaining_donuts + 4 - 1, 4 - 1)\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n\n    time_taken = distance / speed\n\n    return int(time_taken)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Since we want 4 different colored marbles,\n    # we consider the worst case scenario in which\n    # we take out all marbles of one color, then all of another, and so on.\n\n    # Take out all marbles of one color (4 red) + all but one of the second color (7 - 1 green)\n    # + all but one of the third color (6 - 1 blue) + one of the last color (1 orange)\n    marbles = 4 + (7 - 1) + (6 - 1) + 1\n\n    return marbles\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Five different coins with values that are multiples of 5 pence are:\n    # 5p, 10p, 20p, 50p, 100p (1 pound), the sum of these is 185p or 1.85 pounds\n    total_change = 5 * 100  # in pence, since 1 pound = 100 pence\n    coins_sum = 5 + 10 + 20 + 50 + 100  # sum of the values of five different coins\n\n    spent = total_change - coins_sum  # total amount spent\n\n    # convert the spent amount back to pounds from pence\n    ans = spent / 100\n\n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop = 11\n    midnight_temp = midday_temp - drop\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.8\n    spent_percentage_2 = 0.75\n    remaining_ratio = 3 # thrice as many $10 notes as $2 notes\n\n    # Loop through possible combination of $10 and $2 notes that add up to 38 notes in total\n    for ten_notes in range(total_notes + 1):\n        two_notes = total_notes - ten_notes\n        \n        # Calculate amount spent and remaining for $10 and $2 notes\n        spent_10 = ten_notes * spent_percentage_10 * 10\n        spent_2 = two_notes * spent_percentage_2 * 2\n        remaining_10 = ten_notes * (1 - spent_percentage_10)\n        remaining_2 = two_notes * (1 - spent_percentage_2)\n        \n        # Check if the remaining notes condition is met\n        if remaining_10 == remaining_ratio * remaining_2:\n            cost_of_fan = spent_10 + spent_2\n            return cost_of_fan\n    return None\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_honey = 50\n    target_honey = 90\n    \n    # Calculate honey production rate per hive\n    honey_per_hive = current_honey / current_hives\n    \n    # Calculate the number of hives needed to produce the target amount of honey\n    required_hives = target_honey / honey_per_hive\n    \n    # Calculate the additional number of hives needed\n    additional_hives = required_hives - current_hives\n    \n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of erasers Ali initially has, and y be the number Kumar initially has.\n    x, y = symbols('x y')\n\n    # Initial ratio condition: Ali to Kumar is 7:5\n    initial_ratio = Eq(x/y, 7/5)\n    \n    # After giving condition: Ali gave Kumar 10 erasers\n    after_giving = Eq((x-10)/(y+10), 1/5)\n\n    # Solve the equations\n    solutions = solve((initial_ratio, after_giving), (x, y))\n\n    # Calculate the total number of erasers they have together\n    total_erasers = solutions[x] + solutions[y]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 23\n\n    # nth term of an arithmetic sequence formula: an = a1 + (n - 1)d\n    ans = first_term + (nth_term - 1) * common_difference\n    return ans\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    \n    # Horizontal movement: 15 km east then 9 km west resulting in 15 - 9 = 6 km east\n    horizontal_distance = 15 - 9\n    \n    # Vertical movement: 3 km north then 5 km north resulting in 3 + 5 = 8 km north\n    vertical_distance = 3 + 5\n    \n    # Shortest distance from A to B (Pythagoras theorem)\n    shortest_distance = sqrt(horizontal_distance**2 + vertical_distance**2)\n    \n    return shortest_distance\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert hours to minutes\n    activity_and_break = 45 + 20  # Activity and break duration in minutes\n    activities = total_minutes // activity_and_break  # Total possible complete activities\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 92\n    # Adding all three equations:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 92\n    # (Adam + Adam) + (Ben + Ben) + (Carl + Carl) = 291\n    # 2 * (Adam + Ben + Carl) = 291\n    # Adam + Ben + Carl = 291 / 2\n    # Total weight\n    total_weight = (102 + 97 + 92) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = [0, 3, 5, 8]\n    valid_numbers = 0\n\n    for perm in permutations(cards):\n        if perm[0] > 5:\n            valid_numbers += 1\n            \n    return valid_numbers\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # A's efficiency is twice B's\n    # A's time to complete work is (B's time - 5 days)\n    b_days = symbols('b_days')\n    a_days = b_days - 5  # A finishes 5 days earlier than B\n    # Since A's efficiency is twice B's, A would finish in half the time B would, if they had the same time to complete\n    equation = Eq(a_days, b_days / 2)\n    \n    b_days_solution = solve(equation, b_days)\n    return b_days_solution[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    # Implementing the divisibility rule for 11\n    number_str = \"123456\"\n    sum_even_indices = sum(int(number_str[i]) for i in range(0, len(number_str), 2))\n    sum_odd_indices = sum(int(number_str[i]) for i in range(1, len(number_str), 2))\n    difference = abs(sum_even_indices - sum_odd_indices)\n\n    # Check for divisibility by 11 using the rule\n    divisible_by_11 = difference % 11 == 0\n\n    return 0 if divisible_by_11 else (difference % 11)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    final_length_m = 78 / 100  # Final length in meters (converting from cm to m)\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percent = 40 / 100\n    base = 650\n    ans = percent * base\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    steps = [0] * 10  # As there are 9 steps, we need an array of 10 to include step 0\n    steps[0] = 1  # There is 1 way to stay on step 0 (not climbing at all)\n    \n    for i in range(1, 10):\n        # We can get to step i either from step i-1 (by climbing 1 step)\n        # or from step i-4 (by climbing 4 steps), if i-4 is non-negative\n        steps[i] += steps[i-1]\n        if i - 4 >= 0:\n            steps[i] += steps[i-4]\n\n    return steps[9]  # Return the number of ways to reach the 9th step\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    after_second_stop = after_first_stop - (1/4) * after_first_stop + 13\n\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Create a list with the terms from 0.5 to 10 with increments of 0.5\n    terms = [i * 0.5 for i in range(1, 21)]\n\n    # Sum the terms to get the sum of the sequence\n    sum_of_terms = sum(terms)\n\n    # Use the formula for the sum of cubes of the first n natural numbers\n    # (1^3 + 2^3 + ... + n^3 = (1 + 2 + ... + n)^2)\n    ans = sum_of_terms ** 2\n\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    # Nearest £5 means the actual value could be £2.5 less or £2.5 more\n    least_actual_price = estimated_price - 2.5\n    return least_actual_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n    difference_in_sum = future_sum - current_sum\n    # Since both Geoff and his sister age by one year for every passing year,\n    # the combined increase in age per year is 2 (each ages 1 year).\n    years_until_future_sum = difference_in_sum // 2\n    return years_until_future_sum\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    # Since the elephant is on the right side of the rabbit, the rabbit's position is\n    # to the left of the elephant's position counting from the left.\n    rabbit_position_from_left = elephant_position_from_left - (toys_between_rabbit_and_elephant + 1)\n\n    # The rabbit's position counting from right to left is\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the work done by a person in one day be their respective productivity rate\n    nancy_rate = symbols('nancy_rate')\n    tim_rate = symbols('tim_rate')    \n\n    # Equation for Nancy completing the work alone in 6 days\n    equation1 = Eq(nancy_rate * 6, 1)\n    \n    # Equation for both Nancy and Tim completing the work in 4 days together\n    equation2 = Eq((nancy_rate + tim_rate) * 4, 1)\n\n    # Solve equations to get the rate for Nancy and Tim\n    solutions = solve((equation1, equation2), (nancy_rate, tim_rate))\n\n    # Tim's time to complete the book alone will be the reciprocal of his rate\n    tim_time = 1 / solutions[tim_rate]\n\n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 0\n    while True:\n        pencils += 1\n        if (pencils % 2 == 1) and (pencils % 3 == 2) and (pencils % 4 == 3) and (pencils % 5 == 4):\n            return pencils\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert 172 kg to grams\n    total_mass_grams = 172 * 1000\n\n    # Define the mass of each ingredient per packet\n    mass_P = 300  # in grams\n    mass_Q = 400  # in grams\n    mass_R = 500  # in grams\n\n    # Define the ratio of the ingredients\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n\n    # Calculate the total ratio\n    total_ratio = ratio_P + ratio_Q + ratio_R\n\n    # Calculate the mass for each ingredient\n    mass_per_ratio = total_mass_grams / total_ratio\n    mass_P_total = mass_per_ratio * ratio_P\n    mass_Q_total = mass_per_ratio * ratio_Q\n    mass_R_total = mass_per_ratio * ratio_R\n\n    # Calculate the packets for each ingredient\n    packets_P = mass_P_total / mass_P\n    packets_Q = mass_Q_total / mass_Q\n    packets_R = mass_R_total / mass_R\n\n    # Calculate the total packets used\n    total_packets = packets_P + packets_Q + packets_R\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean = 12\n    total_numbers = len(numbers) + 1  # Including 'a' in the count\n    total_sum = mean * total_numbers\n    sum_without_a = sum(numbers)\n    a = total_sum - sum_without_a\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from sympy import lcm\n    \n    # The LCM of traffic lights timing in seconds\n    # Convert minutes to seconds for the first two lights: 1 min = 60 sec, 1.5 min = 90 sec\n    lcm_first_two = lcm(60, 90)\n    \n    # Every 9 minutes all three lights turn green together.\n    # Convert 9 minutes to seconds\n    lcm_all_three = 9 * 60\n    \n    # Since the third light timing must divide the LCM of all three\n    # and be at least 30 seconds or longer, we look for factors of the lcm_all_three\n    # that are greater than or equal to 30\n    for third_light_timing in range(30, lcm_all_three + 1):\n        if lcm_all_three % third_light_timing == 0:\n            return third_light_timing\n\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to metres\n    pink_length = 2.5\n    blue_length = 220 / 100.0\n    orange_length = 30.5 / 100.0\n\n    # Compare lengths to find the longest ribbon\n    longest_ribbon = max(pink_length, blue_length, orange_length)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon == pink_length:\n        return 'pink'\n    elif longest_ribbon == blue_length:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    time_for_preparation = 10\n    time_for_baking = 15\n    time_for_washing = 5\n    time_for_eating = 15\n\n    total_time = time_for_preparation + time_for_baking + time_for_washing + time_for_eating\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    average_people_per_car = total_people / total_cars\n    return average_people_per_car\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given variables\n    rachel_speed = 84  # km/h\n    time_difference = 1.5  # hours\n    eleanor_travel_time = 4  # hours\n\n    # Calculate the distance Rachel travelled before Eleanor reached City G\n    distance_rachel_travelled = rachel_speed * time_difference\n\n    # Since Eleanor has reached city G, the additional distance Rachel has to cover to reach City F\n    additional_distance_to_city_f = 39  # km\n\n    # Total distance between City F and City G is what Eleanor covered in 4 hours (her speed * time)\n    # which is also the sum of what Rachel has covered and the additional distance to City F\n    total_distance = distance_rachel_travelled + additional_distance_to_city_f\n\n    # Calculate Eleanor's speed using the total travel time and distance\n    eleanor_speed = total_distance / eleanor_travel_time\n\n    # Calculate the total distance knowing Eleanor's speed and total travel time\n    distance_between_cities = eleanor_speed * eleanor_travel_time\n\n    return distance_between_cities\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(3):\n        result += int(str(4) * (i + 1))\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    number_of_boys = 5\n\n    percent_boys = (number_of_boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollar_price = 64\n    exchange_rate = 1.25\n    us_dollar_price = canadian_dollar_price / exchange_rate\n    return us_dollar_price\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th from the back,\n    # there must be 7 shelves before it and 9 shelves after it.\n    total_shelves = 7 + 1 + 9  # 1 is the shelf on which the book is located\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Initialize the variables for the five students\n    lowest_possible_score = None\n    \n    # Iterate over possible lowest scores for the total scores to be 450 (5 students * 90 average score)\n    for lowest_score in range(1, 100):\n        # Rest of the students scores must be unique and whole numbers above the lowest score\n        for s2 in range(lowest_score + 1, 100):\n            for s3 in range(s2 + 1, 100):\n                for s4 in range(s3 + 1, 100):\n                    for s5 in range(s4 + 1, 100):\n                        # If the sum matches the target sum, store the lowest score\n                        if lowest_score + s2 + s3 + s4 + s5 == 450:\n                            if lowest_possible_score is None or lowest_score < lowest_possible_score:\n                                lowest_possible_score = lowest_score\n    \n    return lowest_possible_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the lengths of Rope A, B, and C in cm\n    A, B, C = symbols('A B C')\n\n    # Equation 1: A is 3 times B\n    equation1 = Eq(A, 3 * B)\n    # Equation 2: C is 56 cm longer than B\n    equation2 = Eq(C, B + 56)\n    # Equation 3: A is 130 cm (1 m 30 cm) longer than C\n    equation3 = Eq(A, C + 130)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # The total length of the three ropes in cm\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return int(total_length)\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    \n    result = (2 * largest_number) - (3 * smallest_number)\n    \n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    all_possible_3_letter_combinations = list(combinations('ABCDE', 3))\n    count_with_A_and_B = sum(1 for combo in all_possible_3_letter_combinations if 'A' in combo and 'B' in combo)\n    probability = count_with_A_and_B / len(all_possible_3_letter_combinations)\n    \n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_male = male_members * 0.16\n    student_female = female_members * 0.10\n    total_members = male_members + female_members\n    total_students = student_male + student_female\n    student_percentage = (total_students / total_members) * 100\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_1 = 200 * 0.35\n    fruit_juice_2 = 300 * 0.50\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    new_concentration = (total_fruit_juice / total_volume) * 100\n    return new_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x, proportion = symbols('x proportion')\n    equation = Eq(3 / 4, x / 48)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    target_difference = 4\n\n    # Let x be the number of apples Amy gives to John\n    # Amy will have (amy_apples - x) apples left\n    # John will have (john_apples + x) apples\n    # Amy must have 4 more apples than John, so we equate the two and solve for x:\n    # amy_apples - x = john_apples + x + target_difference\n    x = ((amy_apples - john_apples) - target_difference) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    # Eliza sold twice as many cookies as Veron\n    equation1 = Eq(eliza, 2 * veron)\n    # Betty sold 185 fewer cookies than Eliza\n    equation2 = Eq(betty, eliza - 185)\n    # The total number of cookies sold\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers, n be the original rate of papers per hour.\n    x, n = symbols('x n')\n    \n    # In the first hour, she marks n papers, and there are x - n papers left.\n    # As per her initial plan, she has to mark (x - n) / 4 papers per hour for the remaining 4 hours.\n    # She increases her rate by 6 papers per hour, so she plans to mark n + 6 papers per hour now.\n    # Therefore, the number of papers she marks in the remaining 4 hours is 4 * (n + 6).\n    equation1 = Eq((x - n) / 4, n + 6)\n    \n    # If she marks 10 more papers per hour for the remaining 3 hours,\n    # she can finish 1 hour early. So, she plans to mark n + 10 papers per hour now.\n    # Therefore, the number of papers she marks in the remaining 3 hours is 3 * (n + 10).\n    equation2 = Eq((x - n) / 3, n + 10)\n    \n    # Solving the equations to find the values of x and n.\n    solutions = solve((equation1, equation2), (x, n))\n    \n    # We return the total number of papers which is x.\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    # Number of chicken, vegetable, and fruit pies\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # Calculate the fractions\n    chicken_more_than_vegetable = Fraction(chicken_pies - vegetable_pies, vegetable_pies)\n    vegetable_less_than_fruit = Fraction(vegetable_pies, fruit_pies)\n\n    # Return results as a tuple containing both calculated fractions\n    return (chicken_more_than_vegetable, vegetable_less_than_fruit)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_bought = 32\n    markers_given_away = 7\n    markers_left = markers_bought - markers_given_away\n    markers_per_bag = 5\n\n    num_bags = markers_left // markers_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    \n    # Count the number of each digit in each position\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    \n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_made = 3/4\n    total_designs = designs_made / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the total amount of money Caleb has is m.\n    # Let the cost of each wristband be w.\n    # Then, the cost of each cap will be 3w.\n    m, w = symbols('m w')\n\n    # The total cost for 4 caps and 6 wristbands\n    total_cost_caps_wristbands = Eq((4 * 3 * w + 6 * w), m * 2/5)\n\n    # Solve for the cost of each wristband\n    wristband_cost = solve(total_cost_caps_wristbands, w)[0]\n\n    # Money remaining after buying 4 caps and 6 wristbands\n    money_remaining = m - (4 * 3 + 6) * wristband_cost\n\n    # Money spent on buying more caps (which is 1/3 of the remaining money)\n    money_spent_more_caps = money_remaining * 1/3\n\n    # Number of more caps bought (cost of each cap is 3 times the cost of a wristband)\n    more_caps_bought = money_spent_more_caps / (3 * wristband_cost)\n\n    # Total number of caps bought altogether (initial 4 + more_caps_bought)\n    total_caps = 4 + more_caps_bought\n\n    # Since the problem only asks for the total number of caps, we should return an integer.\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Constants/Variables for the equation\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h_initial = 3000  # initial height in meters\n    h_final = 2000  # final height in meters\n    v_initial = symbols('v_initial')  # initial velocity, which is essentially 0 if we ignore air resistance\n\n    # Energy conservation principle: initial potential energy = final kinetic energy + final potential energy\n    # m * g * h_initial + 1/2 * m * v_initial**2 = 1/2 * m * v_final**2 + m * g * h_final\n    # Since mass (m) is in every term, it cancels out.\n    # g * h_initial + 1/2 * v_initial**2 = 1/2 * v_final**2 + g * h_final\n    # Solve for v_final:\n    v_final = symbols('v_final')\n    equation = Eq(g * h_initial + 1/2 * v_initial**2, 1/2 * v_final**2 + g * h_final)\n\n    # We solve for v_final with the initial velocity (v_initial) being 0\n    solution = solve(equation.subs(v_initial, 0), v_final)\n\n    # As there can be two solutions (+ or -), we take the positive one because we're interested in speed\n    speed = max(solution)\n\n    return speed\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # In the worst scenario, we can get 3 non-consecutive numbers from each pattern, hence 3 * 4 = 12.\n    # Then we need to draw one more card to ensure at least one set of four consecutive numbers regardless of pattern.\n    # So 12 + 1 = 13 cards are needed at the minimum to guarantee 4 cards with consecutive numbers.\n    return 13\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]\n    for perm in permutations(remaining_digits):\n        B, D, E, F, H, I, J = perm\n        if (B % 2 == 0 and\n            int(f\"3{B}{1}\") % 3 == 0 and\n            int(f\"3{B}1{D}\") % 4 == 0 and\n            int(f\"3{B}1{D}{E}\") % 5 == 0 and\n            int(f\"3{B}1{D}{E}{F}\") % 6 == 0 and\n            int(f\"3{B}1{D}{E}{F}{7}\") % 7 == 0 and\n            int(f\"3{B}1{D}{E}{F}{7}{H}\") % 8 == 0 and\n            int(f\"3{B}1{D}{E}{F}{7}{H}{I}\") % 9 == 0 and\n            J == 0):\n            return {'A': 3, 'B': B, 'C': 1, 'D': D, 'E': E, 'F': F, 'G': 7, 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    ashley_age_3_years_ago = ashley_age - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    pages_skipped = (89 - 1) // 3\n    last_page_number = 89 + pages_skipped\n    return last_page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n   \n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n   \n    solutions = solve((equation1, equation2), (adults, children))\n   \n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    multiples_of_3 = 600 // 3\n    multiples_of_5 = 600 // 5\n    multiples_of_15 = 600 // 15  # Multiples of both 3 and 5 are multiples of 15\n\n    # Applying the Inclusion-Exclusion Principle\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_present_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n\n    # Find the difference in years between Tom's future age and present age\n    age_difference = tom_future_age - tom_present_age\n\n    # Grandma's present age would be her future age minus the age difference\n    grandma_present_age = grandma_future_age - age_difference\n\n    return grandma_present_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the number of students in class B is x\n    # Since the number of students in class A is twice that of class B, so the number of students in class A is 2x\n    # If given 4 candies each, class A would need 20 more candies, hence 4*(2x) + 20 candies in total\n    # If given 6 candies each, there would be 16 candies left for class B, hence 6*x - 16 candies in total\n    # These two expressions represent the total amount of candies Miss Jenny has\n\n    # Let y be the total number of candies\n    x, y = symbols('x y')\n\n    # Equations based on the problem statement\n    equation1 = Eq(4 * (2 * x) + 20, y)\n    equation2 = Eq(6 * x - 16, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The solution for y gives us the total amount of candies Miss Jenny has\n    return solutions[y]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Since we want to ensure we get 2 stickers of the same color,\n    # we utilize the Pigeonhole Principle. The worst case scenario\n    # would be if we draw stickers one by one in alternating colors.\n    # We have 3 red and 3 green stickers, so we can draw:\n    # 1 red, 1 green, 1 red, 1 green, and by this point, there is no\n    # way to avoid getting two of the same color with the next draw.\n\n    max_unique_draws = 3 + 1 # There are 2 colors, so max unique draws without repetition is colors + 1\n\n    return max_unique_draws\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Sheila must take out at least one more ball than the total number\n    # of balls minus the maximum possible number of balls of the same color\n    # to be sure of having 4 balls of the same color. This ensures that\n    # even if she takes out the maximum number of each of the other colors,\n    # the next ball she takes must complete a set of 4 of at least one color.\n    \n    max_same_color = 4  # She wants 4 of the same color\n    total_balls = 5 + 4 + 2  # Total number of balls\n\n    # The worst case is when she takes the maximum number from other colors.\n    # Since there are 5 blue and 4 orange, she can take 3 blue and 3 orange\n    # without fulfilling the condition. But when she takes the 8th ball,\n    # no matter the color, she will have 4 of that color.\n    # The worst-case without getting 4 of the same color is taking\n    # 3 blue, 3 orange, and 2 yellow balls.\n\n    # To calculate, we use the sum of all balls minus one of each color\n    # plus one more ball to ensure 4 of a kind.\n    balls_to_take = (total_balls - (max_same_color - 1) * 3) + 1\n\n    return balls_to_take\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Ducklings have 2 legs each\n    ducklings_legs = 4 * 2\n    # Baby geese have 2 legs each\n    geese_legs = 2 * 2\n    # Calculate the number of legs that lambs have\n    lambs_legs = 36 - (ducklings_legs + geese_legs)\n    # Since each lamb has 4 legs, divide by 4 to find the number of lambs\n    num_lambs = lambs_legs / 4\n    \n    return int(num_lambs)\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    for girls in range(1, 570//4 + 1):\n        boys = 3 * girls\n        if (boys * 2) + (girls * 4) == 570:\n            return boys\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Each layer of the pyramid is a square\n    # The top layer has 1^2 = 1 box\n    # The second layer has 2^2 = 4 boxes\n    # The third layer has 3^2 = 9 boxes\n    # Total number of boxes is the sum of boxes in these three layers\n    total_boxes = 1**2 + 2**2 + 3**2\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spent = 2.35 + 0.78 + 0.65\n    total_note = 5\n    change = total_note - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n    \n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n    \n    ans = int(total_copies_A + total_copies_B)\n    \n    return ans\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    expression = (1.2 + 1.23 + 1) * (1.2 + 1.23 + 1) - (1.2 + 1.23 + 1) * (1.2 + 1.23)\n    return expression\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let son's total time to harvest by himself be x hours\n    son_time = symbols('x')\n\n    # Equation based on combined work rate\n    # (1/24 + 1/x) * (16) = 1, which means the total job is done\n    # The son also does 6 hours of work, which is 6/x of the job\n    equation = Eq((1/24 + 1/son_time) * 16, 1)\n\n    # Solve for son's time\n    son_total_time = solve(equation, son_time)\n\n    return son_total_time[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    \n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the amount of sugar from each person's solution\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n    \n    # Calculate the total amount of sugar\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    \n    # Calculate the total weight of the mixed solution\n    total_weight = 300 + 400 + 300\n    \n    # Calculate the concentration of sugar in the mixed solution\n    concentration = total_sugar / total_weight\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    first_drop = 10  # initial height\n    first_bounce = first_drop / 2  # height after first bounce\n\n    # Total distance is the sum of the first drop, the first bounce up, and then down again\n    total_distance = first_drop + first_bounce + first_bounce\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    num_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_5s = num_rolls * probability_of_5\n    return expected_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef hugh_filter(permutation):\n    # Get indices of Hugh, Louise, and Richard\n    hugh_idx = permutation.index(\"Hugh\")\n    louise_idx = permutation.index(\"Louise\")\n    richard_idx = permutation.index(\"Richard\")\n    # Check if Hugh is between Louise and Richard\n    if louise_idx < hugh_idx < richard_idx or richard_idx < hugh_idx < louise_idx:\n        return False\n    return True\n\ndef solution():\n    # All possible names\n    children = [\"Hugh\", \"Louise\", \"Richard\", \"Child1\", \"Child2\"]\n    total_permutations = factorial(len(children))  # Total permutations without restriction\n    # Count the number of valid permutations where Hugh is not between Louise and Richard\n    valid_permutations = sum(1 for _ in itertools.permutations(children) if hugh_filter(_))\n    return valid_permutations\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Let the total number of matches be x\n    # They won 2/5 of their matches, so they won 2/5 * x matches\n    # They drew 7/20 of their matches, so they drew 7/20 * x matches\n    # They lost 10 matches\n    \n    # Points for wins: 3 points per win\n    points_for_wins = (2/5) * 3\n    \n    # Points for draws: 1 point per draw\n    points_for_draws = (7/20) * 1\n    \n    # Total points from wins and draws per match\n    total_points_per_match = points_for_wins + points_for_draws\n    \n    # Given that they lost 10 matches, let's find out how many matches they played in total.\n    # They played all possible matches for wins, draws, and losses.\n    total_matches = 10 / (1 - (2/5) - (7/20))\n    \n    # Total points = points per match * total matches\n    total_points = total_points_per_match * total_matches\n    \n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's calculation\n    incorrect_product = quotient * remainder\n    incorrect_sum = incorrect_product + divisor\n    # Check for Johnny's error in calculation\n    if incorrect_sum == (divisor * quotient + remainder):\n        error_in_calculation = True\n    else:\n        error_in_calculation = False\n\n    # Correct calculation\n    correct_dividend = divisor * quotient + remainder\n\n    return correct_dividend, error_in_calculation\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    for i in range(2, 41, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_spent = (4 * 75) + (3 * 95)  # Calculate total spent in pence\n    total_spent_in_pounds = total_spent / 100  # Convert pence to pounds\n    change = 10 - total_spent_in_pounds  # Calculate the change from £10 note\n\n    return change\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    after_first_discount = initial_price * (1 - first_discount)\n    final_price = after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    total_mean = 555\n    mean_diff = 296\n    \n    mean_last_five = (total_numbers * total_mean + 3 * mean_diff) / 5\n    \n    return mean_last_five\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    ans = (end // step) - (start // step) + 1\n    return ans\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vicky_stickers = 99\n    timmy = symbols('timmy')\n\n    equation1 = Eq(vicky_stickers, 6 * timmy - 3)\n    timmy_stickers = solve(equation1, timmy)[0]\n    kevin_stickers = timmy_stickers + 32\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    people = 5\n    days_needed = 15\n    target_days = 5\n\n    work_rate = people / days_needed  # Work rate in bridges/people/day\n    required_rate = 1 / target_days  # Required work rate to finish in 5 days\n\n    # Required people = required rate / individual work rate\n    required_people = required_rate / work_rate\n\n    return required_people - people  # Subtract initial people to find additional people needed\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    total_baskets = 7\n    total_footballs = footballs_per_basket * total_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Rasidah, Chai_Seng = symbols('Rasidah Chai_Seng')\n    equation1 = Eq(Chai_Seng, Rasidah + 48)\n    equation2 = Eq(Chai_Seng - (6/7) * Chai_Seng, (1/2) * (Rasidah - (3/5) * Rasidah))\n\n    solutions = solve((equation1, equation2), (Rasidah, Chai_Seng))\n\n    return solutions[Rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    equation = Eq(isaac_current_age - years_ago, (mother_current_age - years_ago) / 3)\n\n    ans = solve(equation, years_ago)\n\n    return ans[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences to solve are:\n    # grandma_age ≡ 2 (mod 4)\n    # grandma_age ≡ 3 (mod 5)\n    # grandma_age ≡ 6 (mod 9)\n    \n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age, _ = solve_congruence(*congruences)\n    \n    return grandma_age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    conversion_factor = 2.2\n    kilograms = pounds / conversion_factor\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def operation(a, b):\n        total = sum(range(a, b)) - b\n        return total\n\n    val1 = operation(5, 10)\n    val2 = operation(4, 9)\n\n    ans = val1 - val2\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3    # Cat's speed in m/s\n    distance_behind = 500 # Distance Elena is behind in meters\n    \n    # Relative speed between Elena and her cat\n    relative_speed = elena_speed - cat_speed\n    \n    # Time taken for Elena to catch up with her cat\n    time_to_catch_up = distance_behind / relative_speed\n    \n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from math import factorial\n    \n    # Number of different digits to choose from\n    number_of_digits = 3\n    # Number of places in each number\n    number_of_places = 3\n\n    # The number of ways to arrange 'number_of_digits' items in 'number_of_places' places\n    # This is given by the permutation formula P(n, r) = n! / (n-r)!\n    ans = factorial(number_of_digits) / factorial(number_of_digits - number_of_places)\n\n    return int(ans)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # Calculate the differences between the terms\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    \n    # Calculate the differences of the differences\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]\n    \n    # Since it's a double arithmetic sequence, the second differences should be constant\n    # Hence, the next difference should be the same as the previous second difference\n    next_difference = differences[-1] + second_differences[-1]\n    \n    # The next number in the sequence is the last number plus the next difference\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of permutations for the last digit being even (2 or 4)\n    even_last_digit_count = factorial(4)  # 4! for the first four cards\n\n    # There are two choices for the even last digit\n    total_even_permutations = even_last_digit_count * 2\n\n    return total_even_permutations\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit must be between 1 and 9 for a 2-digit number\n        ones_digit = 15 - tens_digit\n        if 0 <= ones_digit < 10:     # The ones digit must be between 0 and 9\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50  # Total weight of 8 apples\n    total_weight_final = 9 * 52    # Total weight of 9 apples with the extra apple\n    extra_apple_weight = total_weight_final - total_weight_initial  # Weight of the extra apple\n    \n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    ans = int(250 ** 0.5)\n    return ans\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -4**2\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    # Given numbers can be calculated using the formula for sum of an arithmetic sequence\n    # Sum = n/2 * (first_term + last_term), where n is the number of terms\n    n = 4\n    first_term = 96\n    last_term = 99\n    ans = n / 2 * (first_term + last_term)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n\n    time_original = pages / 50\n    time_faster = pages / 70\n\n    equation = Eq(time_original - time_faster, 2)\n\n    result = solve(equation, pages)\n\n    return result[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)  # January 28th, 2013 is a Monday\n    one_year = timedelta(days=365)\n    four_years = timedelta(days=365*4)\n    one_day = timedelta(days=1)\n\n    # Leap year cycle is typically every 4 years, though not every year divisible by 4 is a leap year\n    # We need to check each year but increase by 4 after finding a non leap year\n    current_date = start_date\n    while True:\n        current_date += one_year   # Add one year for the next iteration\n        if current_date.year % 4 == 0 and (current_date.year % 100 != 0 or current_date.year % 400 == 0):\n            # Leap year\n            if current_date.weekday() == 0:  # Check if it's a Monday\n                break\n            current_date += one_day  # Adjust for leap year, if it's a leap year the day moves one extra day\n        else:\n            if current_date.weekday() == 0:\n                break\n            current_date += four_years - one_year  # Advance by 4 years but subtract a year since we already added one year before\n\n    ans = current_date.year\n    return ans\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100): # The upper range limit is arbitrary, can be adjusted if needed\n        dividend = divisor * 8 + 7\n        if dividend % divisor == 7:\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # First hour from 6:30 AM to 7:30 AM, jogging at 6 miles per hour\n    jogging_distance = 6 * 1\n    \n    # Next two hours from 7:30 AM to 9:30 AM, walking at 5 miles per hour\n    walking_distance = 5 * 2\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    saved_per_day = 1\n    num_days_saved = 7\n    lent_to_brother = 5\n    money_spent_snacks = 3\n\n    amount_left = initial_amount + (saved_per_day * num_days_saved) - lent_to_brother - money_spent_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days_to_build_by_4_companies = 5\n\n    expressway_per_company_per_day = (total_expressway / companies) / days_to_build_by_4_companies\n\n    return expressway_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount_rate = 0.10\n    number_of_members = 30\n\n    discounted_cost = normal_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / number_of_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 0.80\n    additional_rate = 0.05\n    total_charge = 1.4\n\n    if total_charge <= base_rate:\n        minutes = 15\n    else:\n        additional_charge = total_charge - base_rate\n        additional_minutes = additional_charge / additional_rate\n        minutes = 15 + additional_minutes\n\n    return int(minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_of_2_power = (2 ** (2017 % 4)) % 10  # 2 power cycle every 4\n    last_digit_of_3_power = (3 ** (2017 % 4)) % 10  # 3 power cycle every 4\n    ans = (last_digit_of_2_power * last_digit_of_3_power) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 2 + b % 3)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq((number - 4) / 2 + 11, 37)\n\n    result = solve(equation, number)\n\n    return result[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    # Find the first multiple of 5 greater than or equal to 56\n    if 56 % 5 == 0:\n        first_multiple = 56\n    else:\n        first_multiple = (56 // 5 + 1) * 5\n    \n    # Find the last multiple of 5 less than or equal to 120\n    last_multiple = 120 // 5 * 5\n    \n    # Calculate the number of multiples of 5\n    count = (last_multiple - first_multiple) // 5 + 1\n    \n    return count\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Calculate the year when Gina was 35\n    gina_birth_year = 2005 - 50\n    year_gina_35 = gina_birth_year + 35\n    \n    # Calculate the year when James was 20\n    james_birth_year = 1997 - 20\n    \n    # Calculate James's age when Gina was 35\n    james_age_when_gina_35 = year_gina_35 - james_birth_year\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    whole_number = 2\n    fraction = 1/2\n    total_value = whole_number + fraction\n    num_quarters = total_value * 4\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5  # 5th from the front\n    eddie_position = 9  # 9th from the back\n    people_between = 2\n\n    # Since Lucy is in front of Eddie, the total number of people is the position of Lucy from the front,\n    # plus the people between them, plus the position of Eddie from the back.\n    total_people = lucy_position + people_between + eddie_position\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        num = int(f\"26{B}789\")\n        if num % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]  # considering the remainder should be prime numbers\n    for i in range(3, 8):  # we want unique remainders so skip 2 (can't have remainder 2 when dividing by 3)\n        if i not in primes:\n            primes.append(i)\n\n    # The remainders when divided by 3, 5, 7, and 8, should be a permutation of 4 prime numbers\n    from itertools import permutations\n\n    for perm in permutations(primes, 4):\n        for i in range(0, 3*5*7*8):  # Check each number for the conditions.\n            if i % 3 == perm[0] and i % 5 == perm[1] and i % 7 == perm[2] and i % 8 == perm[3]:\n                return i\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # convert meters to cm\n    dress_length_cm = 5 * 100 + 8    # convert meters to cm\n    \n    remainder_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remainder_cm // 9\n    \n    stripe_length_m = stripe_length_cm // 100              # convert cm to m\n    stripe_length_cm_remainder = stripe_length_cm % 100    # remaining cm\n    \n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    \n    # Setting up the equation according to the given word problem\n    # based on the operations performed in reverse order\n    equation = Eq((x + 4) * 7 - 21, 35)\n    \n    # Solving the equation for x\n    result = solve(equation, x)\n    \n    # Since solve returns a list, we take the first (and only) solution\n    return result[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Equation for the sum of all flowers\n    equation1 = Eq(orchids + tulips + roses, 3616)\n\n    # Equation for the ratio of orchids to tulips\n    equation2 = Eq(orchids/tulips, 3/5)\n\n    # Equation for the remaining flowers after sales\n    equation3 = Eq(orchids * 0.6 + tulips * 0.8 + roses * 0.75, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Since we want the smallest number of right-handed girls,\n    # we assume all the boys are right-handed first. So we have:\n    right_handed_boys = min(right_handed, total_pupils - girls)\n    \n    # Then the smallest number of right-handed girls would be:\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    cost_books = 12\n    cost_files = 9\n\n    equation1 = Eq(books * cost_books + files * cost_files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digit_sum = 0\n\n    for i in range(1, 10):\n        ones_digit = pow(i, 2013, 10)  # Compute the ones digit directly\n        ones_digit_sum += ones_digit\n\n    ans = ones_digit_sum % 10  # Get the ones digit of the sum\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter takes one sock of each color, which is 3 socks in total.\n    # At this moment, he does not have a matching pair yet.\n    # The next sock Peter takes must match one of the three he already took.\n    # So, he must take out 4 socks in total to guarantee he has a matching pair.\n    return 4\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure = datetime(2023, 7, 2, 20, 0) # 8pm of 2nd July in Japan time\n    arrival = datetime(2023, 7, 3, 1, 0) - timedelta(hours=7) # 1am of 3rd July in France time adjusted to Japan time\n    flight_duration = arrival - departure\n    return flight_duration.seconds // 3600 # Convert to hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    pages = 131\n    digits = 0\n    \n    # Count digits for 1-9\n    digits += 9\n\n    # Count digits for 10-99\n    digits += 2 * (99 - 10 + 1)\n\n    # Count digits for 100-131\n    digits += 3 * (pages - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score_for_correct = 4\n    score_for_wrong = -1\n    total_score = 168\n\n    # Using the concept of Chicken-Rabbit problem\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # We have two equations:\n    # 1. x + y = number of attempted questions\n    # 2. 4x - y = total score\n\n    # From equation 1: y = attempted - x\n    # Substituting the value of y in equation 2:\n    # 4x - (attempted - x) = total score\n    # 4x - attempted + x = total score\n    # 5x = total score + attempted\n    # x = (total score + attempted) / 5\n\n    correct_answers = (total_score + attempted) // score_for_correct\n\n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9*necklace + 5*earring, 1440)\n    equation2 = Eq(2*necklace + 3*earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n\n    # After Eugene used 71 coins and Sid used 16 coins,\n    # they had 51 coins left altogether\n    equation2 = Eq(eugene + sid - (71 + 16), 51)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    # Returning the number of coins Eugene had at first\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # 2-digit number: _ _\n\n    # First digit can be either 1 or 2 (0 is not allowed as it would not make it a 2-digit number)\n    first_digit_options = 2\n\n    # Second digit can be 0, 1, or 2 (including 0 as it's now a 2-digit number)\n    second_digit_options = 3\n\n    # Total possibilities: product of the number of options for each digit\n    total_possibilities = first_digit_options * second_digit_options\n\n    return total_possibilities\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # The sum of an arithmetic sequence can be found using the formula: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms.\n    # Since we have 5 consecutive even numbers, their sum will be 5/2 * (first_term + last_term) = 200\n    # We can represent the consecutive even numbers as:\n    # first_term, first_term + 2, first_term + 4, first_term + 6, first_term + 8\n    # The sum of these numbers is:\n    # 5 * first_term + 20 = 200\n    # Therefore:\n    # first_term = (200 - 20) / 5\n    # Solve for first_term:\n    first_term = (200 - 20) / 5\n\n    return first_term\n  \nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables\n    x = symbols('x')  # volume of sugar solution transferred\n\n    # Container A\n    sugar_A = 50 * 0.10  # initial amount of sugar in A\n    water_A = 50         # initial amount of water in A\n\n    # Container B\n    sugar_B = 30 * 0.20  # initial amount of sugar in B\n    water_B = 30         # initial amount of water in B\n\n    # Equations after transferring x grams of sugar solution\n    # The concentration of sugar is the same in both\n    # Final amount of sugar  = Initial sugar + Sugar gained - Sugar lost\n    # Final amount of water  = Initial water - x (transferred volume in grams)\n    \n    # Amount of sugar after transfer for container A\n    sugar_A_final = sugar_A - (sugar_A / water_A) * x + (sugar_B / water_B) * x\n    water_A_final = water_A - x\n    \n    # Amount of sugar after transfer for container B\n    sugar_B_final = sugar_B - (sugar_B / water_B) * x + (sugar_A / water_A) * x\n    water_B_final = water_B - x\n    \n    # Concentration of sugar should be the same\n    concentration_eq = Eq(sugar_A_final / water_A_final, sugar_B_final / water_B_final)\n\n    # Solve for x\n    solution_dict = solve(concentration_eq, x)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    ans = sum(factorial(100) / (factorial(97) * factorial(100 - i) * factorial(i - 3)) for i in range(3, 101))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections.\n    # That means 4 cuts are needed, because 1 piece of wood requires 0 cuts, and each additional section requires 1 more cut.\n    # It takes her 8 minutes to make 4 cuts.\n\n    # If her cutting speed remains the same, we find out how many minutes per cut.\n    minutes_per_cut = 8 / 4\n\n    # Now we need to calculate the time for 6 cuts, since 6 sections require 6 - 1 = 5 cuts.\n    time_for_six_cuts = 5 * minutes_per_cut\n\n    return time_for_six_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    remaining_votes = total_votes - (22 + 27 + 35)\n\n    # Peter needs more than half of the total votes to be elected, \n    # therefore he needs one more than half of 120 to guarantee a win.\n    votes_needed_for_majority = total_votes // 2 + 1\n    \n    # Now, we subtract the votes Peter already has from the majority needed.\n    additional_votes_needed = votes_needed_for_majority - votes_for_peter\n    \n    # If there are not enough remaining votes for a majority,\n    # it is impossible for Peter to win.\n    if additional_votes_needed > remaining_votes:\n        return \"Impossible for Peter to be elected.\"\n    else:\n        return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    return max(31, 32)\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount_pence = 490 # Total amount in pence\n    # Let n be the number of coins of each type in the money box\n    # Each 5p, 10p, and 20p coin contributes to the total amount \n    # So we have the equation: 5n + 10n + 20n = 490\n    # This simplifies to: 35n = 490\n    # Solving for n gives us the number of each type of coin\n    n = total_amount_pence // 35\n    \n    # Since there is an equal number of 5p, 10p, and 20p coins, the total number of coins is:\n    total_coins = 3 * n # Three types of coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    normal_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / normal_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Total sum of the arithmetic sequence\n    total_sweets = 135\n    # Number of terms in the sequence (9 days)\n    n = 9\n    # Each day the boy ate 3 more sweets than the day before,\n    # this gives us the common difference of the arithmetic sequence\n    d = 3\n\n    # To find the first term (a1), we can use the formula for \n    # the sum of an arithmetic sequence: \n    # Sn = n/2 * [2a1 + (n - 1)d]\n    # Solving for a1, we have:\n    # a1 = (Sn/(n/2) - (n - 1)d) / 2\n    a1 = (total_sweets/(n/2) - (n - 1) * d) / 2\n\n    # The last term (an) of the arithmetic sequence can be found using the formula:\n    # an = a1 + (n - 1)d\n    an = a1 + (n - 1) * d\n\n    return int(an)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    remaining_after_book = initial_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_money = 28  # in dollars\n    gift_cost = 20  # in dollars\n\n    money_left_dollars = initial_money - gift_cost\n    money_left_cents = money_left_dollars * 100  # converting dollars to cents\n\n    return money_left_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    number_of_years = 5\n\n    final_amount = initial_amount * (1 + interest_rate) ** number_of_years\n\n    return final_amount\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    digits = 0\n    for i in range(1, 186):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    monthly_salary = annual_salary / 12\n    pay_rise_amount = monthly_salary * pay_rise_percent / 100\n    new_monthly_salary = monthly_salary + pay_rise_amount\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    result = 123 - (23 + 56)\n    return result\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month * 31 + day * 12 == 376:\n                if month in [1, 3, 5, 7, 8, 10, 12]:\n                    return f\"{day:02d}{month:02d}\"\n                elif month in [4, 6, 9, 11] and day <= 30:\n                    return f\"{day:02d}{month:02d}\"\n                elif month == 2 and day <= 29:\n                    return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    left_side = 4.08 * 20\n    known_part = 1.08 * 20\n    missing_number_times_20 = left_side - known_part\n    missing_number = missing_number_times_20 / 20\n\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sequence = [119, 117, -115, 113, -111, 109, -107, 105, -103, 101, -99]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = price_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6          # Original price of calculator in pounds\n    protractor_original_price = 0.30       # Original price of protractor in pounds (30p = 0.30 pounds)\n\n    calculator_sale_price = calculator_original_price * (1 - 1/4)   # Sale price after reducing by a quarter\n    protractor_sale_price = protractor_original_price * (1 - 1/2)   # Sale price after reducing by half\n\n    num_calculators = 8   # Number of calculators bought\n    num_protractors = 20  # Number of protractors bought\n\n    total_price = (calculator_sale_price * num_calculators) + (protractor_sale_price * num_protractors)\n\n    return total_price\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_original = 40\n    milk_original = 80\n    flour_tom = 25\n\n    milk_tom = (flour_tom * milk_original) / flour_original\n    \n    return milk_tom\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_left + sweets_taken\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let's denote the current age of the older elephant as x years.\n    # At some point in the future, the younger elephant will be x years old.\n    # At that time, the older elephant will be 62 years old.\n    # The difference in age between the two elephants will always be the same.\n    # Therefore, the difference in age now is the same as it will be in the future.\n    # So we can write the following equation where the difference in ages is (x - 18):\n    # x + (x - 18) = 62\n\n    x = symbols('x')\n    equation = Eq(x + (x - 18), 62)\n    solution = solve(equation, x)\n    \n    # Since the older elephant's age is x, we return the solution for x:\n    return solution[0]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Assuming all oxen eat at the same rate\n    # 27 oxen * 6 weeks = 23 oxen * 9 weeks = total amount of grass\n    total_grass = 27 * 6\n\n    # now we find out how many weeks it would take for 21 oxen to finish the total grass\n    weeks_for_21_oxen = total_grass / 21\n\n    return weeks_for_21_oxen\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    result_in_tonnes = 1.194 * (2/3)\n    ans = result_in_tonnes * 1000  # converting tonnes to kilograms\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride from 7:30 am to 8:30 am\n    bike_speed = 10  # miles per hour\n    bike_time_hours = 1  # 8:30 am - 7:30 am\n    bike_distance = bike_speed * bike_time_hours\n\n    # Train ride from 8:30 am to 10:30 am\n    train_speed = 50  # miles per hour\n    train_time_hours = 2  # 10:30 am - 8:30 am\n    train_distance = train_speed * train_time_hours\n\n    # Total distance is the sum of bike distance and train distance\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Each ball can be placed in any of the 3 boxes, so for 5 balls,\n    # each ball has 3 possibilities, independently of the others.\n    # Thus, the total number of ways is 3^5.\n    ans = 3**5\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    # Let the number of blue marbles be x\n    # Then the number of red marbles is x + 25\n    # And the number of green marbles is x + 25 + 32\n    # The total number of marbles is x + (x + 25) + (x + 25 + 32)\n\n    # Here we form the equation for the total number of marbles\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + (x + 25) + (x + 25 + 32), 112)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    num_arrangements = factorial(len(word))\n    for count in letter_counts.values():\n        num_arrangements //= factorial(count)\n    \n    return num_arrangements\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # 3rd from front to back means there are 2 people in front of Lucas, and 1 behind him, \n    # so there are 3 rows in the array\n\n    # 2nd from back to front means there are 1 person behind Lucas, and 2 in front of him,\n    # confirming that there are 3 rows\n\n    # 4th from left to right means there are 3 people to the left of Lucas, \n    # and 2 to the right of him, so there are 5 columns in the array\n\n    # 3rd from right to left means there are 2 people to the right of Lucas, \n    # and 3 to the left of him, confirming that there are 5 columns\n\n    # number of students equals the number of rows times the number of columns\n    ans = 3 * 5\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # After spending, they have the same amount of money left\n    equation2 = Eq(ema - ema / 4, keng_wee - (4 / 7) * keng_wee)\n    \n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 25 / 100  # 25% discount\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 216\n    while True:\n        number += 1\n        if sum(map(int, str(number))) == 9:\n            return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square = one_tenth_of_square * 10\n    return square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Since Lucas is the 3rd from the front and 2nd from the back, there must be 3 + 2 - 1 = 4 people in his column.\n    # 3rd from front, 2nd from back -> 3 - 1 + 2 = 4 (counting Lucas only once)\n    columns = 3 + 2 - 1\n    \n    # Since Lucas is the 4th from the left and 3rd from the right, there must be 4 + 3 - 1 = 6 people in his row.\n    # 4th from left, 3rd from right -> 4 - 1 + 3 = 6 (counting Lucas only once)\n    rows = 4 + 3 - 1\n\n    # Total students = rows * columns\n    return rows * columns\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    # Original ratio of girls to boys is 9/11\n    equation1 = Eq(girls, (9/11) * boys)\n    \n    # After transferring 2 girls, the ratio becomes 10/11\n    equation2 = Eq(girls + 2, (10/11) * boys)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    # Calculate the total number of students now (boys + girls + 2 transferred in)\n    total_students = solutions[girls] + solutions[boys] + 2\n    \n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    return sum(numbers)\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1\n    for i in range(2, 11):\n        ans += sum([j / i for j in range(1, i + 1)]) * 2 - (i / i)\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation = Eq(2*(3*x - y), 2*x + 4)\n\n    solutions = solve(equation, (x, y))\n\n    bracket_term = 2 * x - y\n\n    ans = bracket_term.subs(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    change_pence = 500 - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Define the sweets for Trevor and Siobhan as variables\n    trevor = 5 * 24\n    return trevor\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    total_tiles = 390\n    # Let x be the number of tiles Mr Tan has. Then Mr Lim has 5x tiles.\n    # x + 5x = 390\n    # 6x = 390\n    # x = 390 / 6\n    mr_tan_tiles = total_tiles / 6\n    mr_lim_tiles = 5 * mr_tan_tiles\n    \n    # The difference between Mr Lim's and Mr Tan's tiles\n    difference = mr_lim_tiles - mr_tan_tiles\n    \n    return int(difference)\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    current_age = symbols('current_age')\n\n    future_age = current_age + 12\n    equation = Eq(future_age, 3 * current_age)\n\n    current_age_solution = solve(equation, current_age)\n\n    return current_age_solution[0]\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total number of students\n    total_students = 15\n    # Number of students to choose\n    students_to_choose = 5\n    # Cases when exactly one of A, B, or C is chosen\n    ways_with_one_of_abc = 3 * comb(12, 4)\n\n    return ways_with_one_of_abc\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    \n    cost_per_ticket = total_cost / num_tickets\n    \n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    value = 0.36\n    percent = value * 100\n    return percent\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    # Let the amount of lemon juice originally in the bottle be x ml\n    # Let the amount of water in the bottle be y ml\n    # According to the problem, the initial ratio is 2:3, so we have 2 parts of x for every 3 parts of y\n    # The ratio becomes 6:5 after adding 80 ml of lemon juice, so we have 6 parts of (x + 80) for every 5 parts of y\n    # We can set up the equations based on the given ratios and solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Initial ratio equation: 2 parts lemon juice to 3 parts water\n    equation1 = Eq((2/3), x/y)\n\n    # Final ratio equation: 6 parts lemon juice to 5 parts water after adding 80ml lemon juice\n    equation2 = Eq((6/5), (x + 80)/y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the amount of lemon juice originally in the bottle\n    return solutions[x]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    shaila_sweets = 36\n\n    total_sweets = shaila_sweets * (savannah_ratio + shaila_ratio) / shaila_ratio\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    given_to_mother = savings / 3\n    dresses = 177\n    earrings = 129\n    left = given_to_mother / 2\n\n    equation = Eq(given_to_mother + dresses + earrings + left, savings)\n\n    total_savings = solve(equation, savings)\n    \n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increased speed\n    late_time_hours = 9 / 60  # 9 minutes converted to hours\n    \n    # distance = speed * time\n    # usual_time = distance / usual_speed\n    # increased_time = distance / increased_speed\n    # usual_time - increased_time = late_time_hours\n\n    # By combining the two equations above:\n    # distance / usual_speed - distance / increased_speed = late_time_hours\n    # Solving for distance:\n    distance = (late_time_hours) / (1/usual_speed - 1/increased_speed)\n    \n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    for num in range(-1000, 1000):  # Arbitrarily chosen range\n        if ((((num + 8) * 8) - 8) / 8) == 80:\n            return num\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # total ropes\n    total_ropes = 10\n    # total length\n    total_length = 26\n    # length of red rope\n    length_red = 2\n    # length of blue rope\n    length_blue = 3\n\n    # we iterate over the possible number of red ropes\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        # check if the length matches\n        if length_red * red_ropes + length_blue * blue_ropes == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping = 40\n    long_jump = 31\n    both_events = 21\n    \n    # Calculate students participating in only one event\n    # Using the Inclusion-Exclusion Principle\n    only_one_event = (skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    percentage = 30\n    part_value = 21\n    P = (part_value * 100) / percentage\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half_per_month = 65\n    months_in_second_half = 6\n    \n    total_second_half = average_second_half_per_month * months_in_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 0\n    while True:\n        children += 7\n        if children % 9 == 2:\n            return children\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the original speed in m/min and t be the original time in minutes\n    s, t = symbols('s t', positive=True, real=True)\n    \n    # If the cyclist increases his speed by 25%, the new speed is 1.25s\n    # New time taken, t1, will be such that 1.25s * t1 = s * t\n    eq1 = Eq(1.25 * s * (t - 20), s * t)\n    \n    # If the cyclist decreases his speed by 45 m/min, the new speed is s - 45 m/min\n    # New time taken, t2, which is 75% more, will be such that (s - 45) * 1.75t = s * t\n    eq2 = Eq((s - 45) * 1.75 * t, s * t)\n    \n    # Solve the system of equations for s and t\n    solutions = solve((eq1, eq2), (s, t))\n\n    # Calculate distance with the original speed and time\n    distance = solutions[s] * solutions[t]\n\n    return distance\n    \nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    ans = total_used.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:  # The difference must be a factor of 41\n            num = 41 + i\n            # Check if this number truly has the difference in factors as 41\n            if max([j for j in range(1, num+1) if num % j == 0]) - i == 41:\n                A = num\n                break\n    seventh_multiple_A = A * 7\n    return seventh_multiple_A\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    # The ratio of height to width is 3:4, so we can find the width as follows:\n    width = (height * 4) / 3\n\n    # The perimeter of the rectangle is 2 times the sum of its height and width.\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "import fractions\n\ndef solution():\n    result = fractions.Fraction(1, 1)  # Representing the number as a fraction\n    for i in range(2, 12):\n        result *= fractions.Fraction(i + 1, i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let the smaller number be x\n    # Then the larger number will be x + 36 (since the difference is 36)\n    # The sum of the numbers is 98, therefore:\n    # x + (x + 36) = 98\n    # Solving for x gives us the value of the smaller number.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 36, 98)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = int((last_term - first_term) / difference + 1)\n    \n    sum_of_terms = (first_term + last_term) * num_terms // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # The last digit of a number only depends on the last digit of the factors\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10  # 11 has the same last digit as 1\n    \n    # Calculate the last digit of the entire expression\n    last_digit_product = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return last_digit_product\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_answer_percentage = 70\n    correct_marks = 3\n    wrong_deduction = 1\n    total_score = 78\n\n    correct_answers = total_questions * (correct_answer_percentage / 100)\n    wrong_answers = total_questions - correct_answers\n\n    # total_score = correct_answers * correct_marks - wrong_answers * wrong_deduction\n    # Simplify the equation to find correct_answers\n    # 78 = correct_answers * 3 - (60 - correct_answers) * 1\n    # 78 = correct_answers * 3 - 60 + correct_answers\n    # 78 + 60 = correct_answers * 3 + correct_answers\n    # 138 = 4 * correct_answers\n    # correct_answers = 138 / 4\n    correct_answers = (total_score + wrong_deduction * total_questions) / (correct_marks + wrong_deduction)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n    \n    baking_time = end_time - start_time\n    return baking_time.seconds // 60\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns: cost of one file (f) and cost of one ruler (r)\n    f, r = symbols('f r')\n\n    # Equation based on the given condition: 6 files + 10 rulers = 40\n    equation1 = Eq(6 * f + 10 * r, 40)\n    \n    # Solve for f and r\n    solutions = solve((equation1), (f, r))\n    f_cost = solutions[f]\n    r_cost = solutions[r]\n\n    # Calculate the cost for 9 files and 15 rulers using the found costs\n    total_cost = 9 * f_cost + 15 * r_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n\n    # Original amounts relation\n    equation1 = Eq(john, 5/13 * jessie)\n    # Amounts after transfer\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate the total money\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Initialize the count for 1s and 2s.\n    count_1s, count_2s = 0, 0\n    # Increment N until the conditions are met.\n    N = 0\n    while count_1s < 15 or count_2s < 14:\n        N += 1\n        # Convert the current number to a string to count digits.\n        str_N = str(N)\n        # Count the occurrences of '1' and '2' in the string representation.\n        count_1s += str_N.count('1')\n        count_2s += str_N.count('2')\n    # Return the value of N when the condition is met.\n    return N\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps\n    t, c = symbols('t c')\n\n    # Ratio of T-shirts to caps and their costs\n    cost_tshirt = 3  # cost of each T-shirt\n    cost_cap = 5     # cost of each cap\n    ratio_tshirt_to_cap = 8 / 5\n\n    # Equations based on the problem statement\n    equation1 = Eq(t / c, ratio_tshirt_to_cap) # T-shirts to caps ratio\n    equation2 = Eq((1/4) * t * cost_tshirt + (1/5) * c * cost_cap, 132) # Total money collected\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Return the number of T-shirts\n    return solutions[t]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Cost calculation\n    bananas_cost = 3 * 12  # in pence\n    apples_cost = 5 * 11   # in pence\n\n    # Total cost in pence\n    total_cost_pence = bananas_cost + apples_cost\n\n    # Ian pays with a £2 coin, convert £2 to pence\n    ian_pays_pence = 200  # £2 = 200 pence\n\n    # Change in pence\n    change_pence = ian_pays_pence - total_cost_pence\n\n    # Convert change to pounds and pence\n    change_pounds = change_pence // 100\n    remaining_pence = change_pence % 100\n\n    # Final change as a combination of pounds and pence\n    ans = (change_pounds, remaining_pence)\n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    age_difference = 2\n    number_of_siblings = 7\n    youngest_age = 7\n\n    oldest_age = youngest_age + age_difference * (number_of_siblings - 1)\n\n    return oldest_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_muffins = 1/5\n    flour_cookies = 1/2\n    flour_left = 360 / 1000  # convert grams to kilograms\n    \n    total_flour = flour_muffins + flour_cookies + flour_left\n    \n    return total_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Define the cost of oranges and lemons in pence\n    cost_orange = 26\n    cost_lemon = 30\n    # Convert the total amount Gordon spent into pence\n    total_spent = 500  # ￡5 = 500p\n\n    # Initialise variables to count the solutions\n    solutions = []\n    \n    # Loop through possible combinations of oranges and lemons\n    for num_oranges in range(total_spent // cost_orange + 1):\n        for num_lemons in range(total_spent // cost_lemon + 1):\n            # If the combination adds up exactly to the total spent\n            if num_oranges * cost_orange + num_lemons * cost_lemon == total_spent:\n                solutions.append((num_oranges, num_lemons))\n\n    # Calculate the total number of fruits bought for each solution\n    # and return the count of the first solution as the amount does not change\n    total_fruits = solutions[0][0] + solutions[0][1]\n\n    return total_fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # For circular arrangements, (n-1)! gives the number of distinct arrangements\n    # since one person can be fixed and the remaining n-1 can be arranged in (n-1)! ways.\n    num_people = 4\n    num_arrangements = factorial(num_people - 1)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for male and female visitors\n    male, female = symbols('male female')\n\n    # Equation for the first day\n    equation1 = Eq(male - female, 450)\n\n    # Female visitors increased by 15% on the second day\n    female_second_day = female + (female * 15 / 100)\n\n    # Male visitors decreased by 18% on the second day\n    male_second_day = male - (male * 18 / 100)\n\n    # Total number of visitors on the second day\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male, female))\n\n    # Calculate the total number of visitors on the first day\n    total_first_day = solutions[male] + solutions[female]\n\n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo-220, jason)\n    equation2 = Eq(jason+1100, 2*(leo+180))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    same_books = factorial(3) * factorial(4) * factorial(2) * factorial(2)  # Product of factorials of same type books\n\n    ans = factorial(total_books) // same_books  # Division of total permutations by the repetitions\n\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):  # Try all permutations of 5 digits\n        a, b, c, d, e = p\n        if (a*10 + b) - (c*10 + d) == e:\n            return e*10000 + a*1000 + c*100 + b*10 + d\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since we are dealing with identical objects (pencils) being placed into \n    # identical containers (pencil cases), we use the stars and bars theorem.\n    # We must find the number of solutions to the equation\n    # x_1 + x_2 + x_3 = 7, where x_i represents pencils in the i-th pencil case.\n    # We consider the pencils as stars (*) and the separations of containers as bars (|).\n    # So, for 7 pencils and 2 bars (as we have 3 containers), the sequence would look like:\n    # **|***|** -> x_1 = 2 pencils, x_2 = 3 pencils, x_3 = 2 pencils\n\n    pencils = 7\n    pencil_cases = 3\n    \n    # The number of ways to choose positions for the bars in the sequence (which is 'pencils-1')\n    # is given by the combination formula: C(n+k-1, k-1) where \n    # n is the number of identical items and k is the number of containers.\n    # Here n = pencils, k = pencil_cases\n    \n    # In this case, the formula simplifies to C(7+3-1, 3-1) or C(9, 2)\n    ways = math.comb(pencils + pencil_cases - 1, pencil_cases - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    total_robots = robots_per_day * days_per_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n\n    # Using modulo operation to find the last positive number before passing zero.\n    last_positive_number = start_number % step\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    number_of_friends = 5\n\n    each_payment = total_cost / number_of_friends\n\n    return each_payment\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Total amount paid by the children\n    total_paid = 555\n    # Cost of the shirt without a name\n    plain_shirt_cost = 10\n    # Cost of the shirt with a name\n    custom_shirt_cost = 15\n    # Total number of children\n    num_children = 50\n\n    # Let the number of plain shirts be x and custom shirts be y\n    # We have two equations:\n    # x + y = num_children\n    # plain_shirt_cost*x + custom_shirt_cost*y = total_paid\n\n    # We can rearrange the first equation to find y:\n    # y = num_children - x\n\n    # So, we substitute y in the second equation and solve for x:\n    # plain_shirt_cost*x + custom_shirt_cost*(num_children - x) = total_paid\n    # This simplifies to:\n    # (custom_shirt_cost - plain_shirt_cost)*x = total_paid - custom_shirt_cost*num_children\n\n    # Now we calculate the value of x:\n    x = (total_paid - custom_shirt_cost * num_children) / (plain_shirt_cost - custom_shirt_cost)\n\n    # Since we want the number of custom shirts, we calculate y:\n    y = num_children - x\n\n    return int(y)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the time David walked at each speed\n    t1, t2 = symbols('t1 t2')\n    \n    # Define the equations based on the given information\n    equation1 = Eq(150 * (t1 + 10), 3700) # Walking at 150 m/min including the first 10 minutes\n    equation2 = Eq(150 * t1 + (150 + 50) * t2, 3700) # Total distance covered\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (t1, t2))\n    \n    # Total walking time is the sum of the time at 150 m/min and 200 m/min\n    total_time = solutions[t1] + solutions[t2] + 10\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female visitors on the first day\n    f = symbols('f')\n    # Number of male visitors on the first day is f + 450\n    m_first_day = f + 450\n    # Number of female visitors on the second day increased by 15%\n    f_second_day = f * 1.15\n    # Number of male visitors on the second day decreased by 18%\n    m_second_day = m_first_day * 0.82\n\n    # The total number of visitors for the second day is 1354\n    total_second_day = Eq(f_second_day + m_second_day, 1354)\n\n    # Solve the equation\n    solutions = solve(total_second_day, f)\n\n    # Calculate the number of male visitors on the first day\n    male_visitors_first_day = solutions[0] + 450\n    return male_visitors_first_day\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time when the plane took off\n    sg_takeoff = 5  # 05:00\n    # London time when the plane landed\n    london_landing = 11  # 11:00\n\n    # Time difference between Singapore and London\n    time_difference = 7  # 7 hours ahead\n\n    # Calculate the time in Singapore when the plane landed\n    sg_landing = london_landing + time_difference\n    if sg_landing >= 24:  # If it's over 24, subtract 24 to get the correct time\n        sg_landing -= 24\n\n    # Calculate the total duration of the flight\n    if sg_landing < sg_takeoff:  # If the result is earlier than the takeoff, add 24 hours to get the duration\n        duration = (sg_landing + 24) - sg_takeoff\n    else:\n        duration = sg_landing - sg_takeoff\n\n    return duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    num_hearts = factorial(4)\n    num_spades = factorial(3)\n    num_diamonds = factorial(7)\n    num_total_permutations = factorial(total_cards)\n\n    # divide by the permutations of each type since they are indistinguishable\n    num_different_ways = num_total_permutations / (num_hearts * num_spades * num_diamonds)\n    return int(num_different_ways)\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5   # The smallest multiple of 5\n    second_digit = 1  # The smallest odd number among the natural numbers\n    third_digit = 9   # The largest single-digit odd number\n    fourth_digit = 0  # The smallest even number\n    fifth_digit = 8   # The largest single-digit number that is a multiple of 2\n    sixth_digit = 3   # The smallest odd number greater than 1\n    seventh_digit = 0 # A digit that makes the number a multiple of 2 and 5 must be 0\n\n    phone_number = (first_digit * 10**6) + (second_digit * 10**5) + (third_digit * 10**4) + \\\n                   (fourth_digit * 10**3) + (fifth_digit * 10**2) + (sixth_digit * 10) + seventh_digit\n    \n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jon, miguel = symbols('jon miguel')\n\n    # Given that Jon has 30% more money than Miguel\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n\n    # Together they have £46\n    equation2 = Eq(jon + miguel, 46)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_read = 80  # Pages read on the last day\n    daily_increment = 5\n    pages_first_day = 20\n    days_count = 1  # Start counting from the first day\n\n    while total_pages_read < 80 + pages_first_day:\n        # Increment the number of pages read by the daily increment\n        pages_first_day += daily_increment\n        total_pages_read += pages_first_day\n        days_count += 1  # Another day passed\n\n    return total_pages_read\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds = Fraction(4, 9)\n    cashews = Fraction(1, 3)\n    difference = almonds - cashews\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    dividend = 4 * 9 + 2  # The correct way to calculate the dividend is (quotient * divisor) + remainder\n    divisor = 4\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n\n    return (quotient == 9 and remainder == 2, dividend)  # Check if Johnny's work was correct and return the correct dividend\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    positive_sum = sum(range(4, 55, 4))\n    negative_sum = sum(range(2, 53, 4))\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    for num in range(1, 6*7*8):\n        if num % 6 == 3 and num % 7 == 4 and num % 8 == 1:\n            return num\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq(4*boys - 3*girls, 62)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # The sequence follows a pattern where each number n appears n times.\n    # So, to find the median before the first 11 appears, we can calculate the total number of terms:\n    total_terms = sum(range(1, 11))  # Since 11 is not included, we sum up to 10\n\n    # The median is the middle value, so we need to find the value at the middle index\n    middle_index = total_terms // 2\n\n    # Now we will find the number that occupies that middle index\n    count = 0\n    for i in range(1, 11):\n        count += i\n        if count >= middle_index:\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n\n    equation = Eq((65 - cut_length), 3 * (29 - cut_length))\n\n    solutions = solve((equation), (cut_length))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12 * 6 / 18\n    return numerator\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    # Given ratios A:B = 2:3 and B:C = 6:5\n    # Convert the given ratios to the same scale for B and find equivalent A:C\n    # For B to be on the same scale, find least common multiple of the B's in both ratios (3 and 6)\n    lcm_B = 6\n    ratio_scale_A = lcm_B // 3  # scale to make B equal in A:B ratio\n    ratio_scale_C = lcm_B // 6  # scale to make B equal in B:C ratio\n    \n    # Now, the A:B:C can be expressed as A:B:C = 2*ratio_scale_A : lcm_B : 5*ratio_scale_C\n    A = 2 * ratio_scale_A\n    C = 5 * ratio_scale_C\n    B = lcm_B\n    \n    # Since the average of A,B,C is 45, their sum is 3 times the average (because there are 3 numbers)\n    total_sum = 3 * 45\n    \n    # Now we can express the total sum as the sum of A + B + C\n    total_sum_expression = A + B + C\n    \n    # Solving for B in the total sum expression\n    B_value = total_sum / total_sum_expression * B\n\n    return B_value\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, 9\n    # Each of the three positions in a 3-digit number can be any of these five digits\n    odd_digits_count = 5\n    \n    # The number of 3 digit numbers with all odd digits is 5 * 5 * 5\n    total_numbers = odd_digits_count ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n    \n    # Equation representing the combined work of both decorators\n    # (1 house / 8 days) = (1 house / 12 days) + (1 house / x days)\n    equation = Eq(1/8, 1/12 + 1/x)\n    \n    # Solve for x\n    days_lazy = solve(equation, x)\n    \n    return days_lazy[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the length (L) and the width (W) of the rectangle\n    L, W = symbols('L W')\n\n    # We add 12 cm to the length to get the new perimeter\n    equation = Eq(2 * (L + 12) + 2 * W, 38)\n\n    # The perimeter of the original rectangle is 2L + 2W\n    # We cannot just solve the equation for L and then get the perimeter,\n    # Because no information about width W is given in the problem\n    # But, we can express W in terms of L using the perimeter equation,\n    # Then replace W in the original perimeter formula.\n    solutions = solve(equation, W)\n    W_expr = solutions[0] # This should represent W in terms of L\n\n    # The original perimeter in terms of L\n    original_perimeter = 2 * L + 2 * W_expr\n\n    # Now we need to find a possible length L that satisfies the original perimeter\n    # However, since the question doesn't give a definite width, we have infinitely many solutions.\n    # We can't solve for a unique original perimeter without additional information.\n\n    # But we can still solve for L in terms of W using the given perimeter after increasing the length by 12:\n    # P = 2(L + 12) + 2W = 38 => L = 19 - 12 - W\n    # Then the original perimeter P_o = 2L + 2W\n    # P_o = 2(19 - 12 - W) + 2W\n    # P_o = 14 + 2W - 2W (W cancels out)\n    # P_o = 14 (constant value)\n    return 14\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9)*baby_chickens\n    roosters = (1/4)*hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stamps Natasha has\n    x = symbols('x')\n    \n    # Jamie-Anne has 18 more stamps than Natasha, and their ratio is 5:3\n    equation = Eq(5*x - 3*x, 18)\n\n    # Solve for x\n    natasha_stamps = solve(equation, x)[0]\n\n    # Calculate Jamie-Anne's stamps\n    jamie_anne_stamps = 5/3 * natasha_stamps\n\n    # Calculate the total number of stamps\n    total_stamps = natasha_stamps + jamie_anne_stamps\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it is a digit in the hundred's place.\n        for b in range(0, 10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    \n    # Original equation: Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n    # Sana and Mina had 234 coins in total at first\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Calculate how many coins Mina had left after giving away 12 coins\n    mina_left = solutions[mina] - 12\n    \n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = total_grapes * 3 / 7\n    remainder_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = remainder_after_monday * 3 / 8\n    remainder_after_tuesday = remainder_after_monday - sold_on_tuesday\n    \n    bag_weight = 3 / 4\n    num_bags = remainder_after_tuesday / bag_weight\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    total_students = 123\n    total_flour = flour_per_student * total_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n    \n    # Formula for the n-th term: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence_in_pound = 100\n    total_pence = 3 * pence_in_pound\n    percentage = (15 / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Time taken to cycle from the first lamp post to the eleventh lamp post\n    time_first_to_eleventh = 50\n    # Number of lamp posts passed from first to eleventh\n    num_lamp_posts = 11 - 1  # since we start counting from first lamppost, subtract one to get lamps passed\n\n    # Lamp posts passed per second\n    lamp_posts_per_sec = num_lamp_posts / time_first_to_eleventh\n\n    # Time in seconds after Uncle Sam starts cycling\n    time_cycling = 80\n\n    # Number of lamp posts Uncle Sam will pass after 80 seconds\n    lamp_posts_passed = lamp_posts_per_sec * time_cycling\n\n    # Add one because he starts at the first lamp post\n    total_lamp_posts = lamp_posts_passed + 1\n\n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    # Subtract the corners as they are counted in each adjacent side's flower count\n    total_flowers = (flowers_per_side * corners) - (corners * (corners - 1))\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    items = symbols('items')\n    \n    # Equation based on the problem statement\n    equation = Eq((2/3) * items - ((1 - 2/3 - 1/9) * items), 12)\n    \n    # Solve the equation for the total number of items\n    total_items = solve(equation, items)[0]\n    \n    # Calculate the number of lemons\n    lemons = (1 - 2/3 - 1/9) * total_items\n    \n    return int(lemons)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    ones_place = sum([i for i in range(1, 5) if 4 % i == 0])\n    hundreds_place = 8\n    thousands_place = hundreds_place + 1\n    tens_place = hundreds_place - ones_place\n    most_significant_digit = 4\n\n    number = (most_significant_digit*10000 + thousands_place*1000 +\n              hundreds_place*100 + tens_place*10 + ones_place)\n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_court_extra_length = 56\n\n    football_court_length = basketball_court_length + football_court_extra_length\n\n    return football_court_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percent = ana_discount * 100\n    return ana_discount_percent\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    min_value = 3 / 10\n    max_value = 5 / 16\n\n    for s in range(1, 1000):  # Assuming a reasonable upper bound for s\n        for r in range(1, s):  # r must be less than s for fraction to be less than 1\n            frac = Fraction(r, s)\n            if min_value < frac < max_value:\n                return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_two_days = 300 + 250\n    total_steering_wheels = first_two_days / (5/6)\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_in_children = 40\n    children_on_bus = 15\n    adult_capacity = 24\n\n    # Calculate the remaining space on the bus in terms of children\n    remaining_space_in_children = total_capacity_in_children - children_on_bus\n\n    # Use equivalent substitution to convert remaining space into adult capacity\n    remaining_space_in_adults = (remaining_space_in_children * adult_capacity) // total_capacity_in_children\n\n    return remaining_space_in_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "from sympy import factorint\n\ndef solution():\n    num = 28\n    factors = factorint(num)\n    ans = 1\n    \n    # In a perfect square, every prime factor's exponent should be even.\n    # Double the exponent if it is odd to make it even (perfect square).\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            ans *= prime\n            \n    return ans\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_to_cook_one_batch = 3  # minutes\n    pancakes_per_batch = 2\n    total_time_available = 12  # minutes\n\n    batches_in_total_time = total_time_available / time_to_cook_one_batch\n    total_pancakes = pancakes_per_batch * batches_in_total_time\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    # There are 35 students and 3 different sizes of uniforms.\n    # Using the Pigeonhole Principle, we know that at least one size has to be worn\n    # by ceil(35 / 3) students, which ensures that at least that many students are\n    # wearing the same size of uniform.\n    from math import ceil\n    \n    students = 35\n    uniform_sizes = 3  # L, M, S\n\n    # Calculate the minimum number of students wearing the same size\n    min_students_same_size = ceil(students / uniform_sizes)\n    \n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    inner_triangle = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner_triangle)\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    dvd_price = 740\n    remaining_after_dvd = salary - dvd_price\n    tv_price = 3 / 4 * remaining_after_dvd\n    remaining_after_tv = salary - dvd_price - tv_price\n    final_remaining = 1 / 5 * salary\n\n    equation = Eq(remaining_after_tv, final_remaining)\n\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let current age of Russell be r\n    r = symbols('r')\n\n    # Equation based on the information provided\n    equation = Eq(r + 32, 4 * (r - 16))\n\n    # Solve for r\n    age_now = solve(equation, r)\n\n    # Return Russell's current age\n    return age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # We know that no. 6 is directly opposite to no. 19.\n    # That means there are an equal number of people from 6 to 19 as there are from 19 back to 6.\n    # The number of people between 6 and 19, in one half-circumference:\n    half_circle = 19 - 6\n\n    # The total number of people is twice the half-circumference:\n    total_people = 2 * half_circle\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Pip's number has the form ABCA - 1000A + 100B + 10C + A = 1001A + 100B + 10C\n    # Bud reverses the units and tens digits to get ACBA - 1000A + 100C + 10B + A = 1001A + 10B + 100C\n    # The sum of these numbers is 5510\n    # Adding the equations gives us: (1001A + 100B + 10C) + (1001A + 10B + 100C) = 5510\n    # Simplify to: 2002A + 110B + 110C = 5510\n    # Simplify further to: 2A + 11(B + C) = 55\n    # This implies 2A has to be a multiple of 2 and 11(B + C) is a multiple of 11 which implies B+C must be 5 since 2A can at most be 18 (since A<=9)\n    # A can be 1 through 9, B + C = 5, B and C can be 0 through 9 but their sum must be 5\n\n    for A in range(1, 10):  # A can be 1 through 9\n        for B in range(0, 6):  # B can be 0 through 5, as B+C shouldn't be larger than 5\n            C = 5 - B  # Since B + C = 5\n            if 2 * A + 11 * (B + C) == 55:  # Check if the equation is satisfied\n                return 1001 * A + 100 * B + 10 * C  # Return Pip's number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of students in 6A be x\n    # Then the original number of students in 6B is (9/4) * x\n    x = symbols('x')\n    \n    # After the reshuffling 3 students went from 6A to 6B and 18 students moved the other way\n    # This means that the new number of students in 6A is x - 3 + 18\n    # And the new number of students in 6B is (9/4) * x - 18 + 3\n    # Since the number of students in both classes is now equal:\n    equation = Eq(x - 3 + 18, (9/4) * x - 18 + 3)\n    \n    # Solve the equation to find x, the original number of students in 6A\n    original_students_6A = solve(equation, x)[0]\n    \n    return original_students_6A\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut which divides the rod into 2 pieces.\n    # To have 5 pieces, we need 4 cuts in total.\n    total_cuts = 5 - 1\n    time_per_cut = 2\n    total_time = total_cuts * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    spelling_books_per_shelf = 72 // 15\n    shelves_with_spelling_books = 72 // 9\n    \n    shelves_with_math_books = 15 - shelves_with_spelling_books\n    math_books = shelves_with_math_books * 4\n    \n    return math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Given time to walk from first floor to fourth floor\n    time_first_to_fourth = 6\n    \n    # Assuming the floors are evenly spaced, the number of intervals from 1st to 4th floor is 3\n    intervals_first_to_fourth = 4 - 1\n\n    # Total intervals from 1st to 10th floor\n    intervals_first_to_tenth = 10 - 1\n    \n    # Time per interval is the same for any interval\n    time_per_interval = time_first_to_fourth / intervals_first_to_fourth\n    \n    # Time to walk from first floor to tenth floor\n    time_first_to_tenth = time_per_interval * intervals_first_to_tenth\n\n    return time_first_to_tenth\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_in_recipe = 100\n    chocolate_in_recipe = 40\n    available_biscuits = 75\n\n    chocolate_needed = (chocolate_in_recipe * available_biscuits) / biscuits_in_recipe\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_a_week = 7\n    \n    total_earnings = average_daily_earnings * days_in_a_week\n    \n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n    harry_flowers = luna_flowers - difference\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    num_pasta = 2\n    num_sauces = 3\n    num_toppings = 2\n    ans = num_pasta * num_sauces * num_toppings\n    return ans\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if 32 / n == n / 2:\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    initial_students = 16 * 2 # since the 16th student is directly opposite the 8th\n    new_opposite_student = 22\n    new_total_students = new_opposite_student * 2 # since the 22nd student is now directly opposite the 8th\n\n    new_students_joined = new_total_students - initial_students\n\n    return new_students_joined\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    speed1 = 7  # speed in m/s for the first 280 meters\n    distance1 = 280  # distance for the first part in meters\n\n    speed2 = 5  # speed in m/s for the middle 400 meters\n    distance2 = 400  # distance for the second part in meters\n    \n    speed3 = 8  # speed in m/s for the remaining distance\n    distance3 = 800 - (distance1 + distance2)  # distance for the third part in meters\n    \n    time1 = distance1 / speed1  # time for the first part in seconds\n    time2 = distance2 / speed2  # time for the second part in seconds\n    time3 = distance3 / speed3  # time for the third part in seconds\n\n    total_time = time1 + time2 + time3  # total time in seconds\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person initially had\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    total_initial_marbles = Eq(A + B + C, 168) # Total marbles initially\n    final_ratio_A = A + 8 # Anna's final marbles after receiving 8 from Betsy\n    final_ratio_B = B - 8 + 15 # Betsy's final marbles after giving 8 to Anna and receiving 15 from Charlene\n    final_ratio_C = C - 15 # Charlene's final marbles after giving 15 to Betsy\n    ratio_equation = Eq(final_ratio_A/final_ratio_B/final_ratio_C, 2/5/7) # The final ratio equation\n\n    # Solve the equations\n    solutions = solve((total_initial_marbles, ratio_equation), (A, B, C))\n\n    # Return the answer\n    return solutions[B]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    total_ways = factorial(total_cards) // (\n        factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards)\n    )\n    \n    return total_ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Original ratio 5:7\n    original_ratio = Eq(lollipops / gum_drops, 5/7)\n\n    # After adding 120 pieces to each, new ratio 4:5\n    new_ratio = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (lollipops, gum_drops))\n\n    # Calculate the total number of pieces of candy now\n    total_candy = solutions[lollipops] + solutions[gum_drops] + 120 + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Convert the dimensions of the paper to centimeters\n    width_cm = 136\n    height_cm = 80\n\n    # Calculate the greatest common divisor (GCD) of the width and height\n    square_side = gcd(width_cm, height_cm)\n\n    # Calculate the number of squares that can be cut\n    num_squares = (width_cm // square_side) * (height_cm // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [5, 7]:  # Must be an odd number\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    # Define the limit\n    limit = 201\n    \n    # Define the count function for multiples of a number less than limit\n    def count_multiples(n, limit):\n        return (limit - 1) // n\n        \n    # Count the multiples of 5 and 7\n    count_5 = count_multiples(5, limit)\n    count_7 = count_multiples(7, limit)\n    \n    # Count the multiples of 5 and 7 (intersection)\n    count_5_and_7 = count_multiples(5*7, limit)\n    \n    # Use the inclusion-exclusion principle to find the total count\n    total_count = count_5 + count_7 - count_5_and_7\n    \n    return total_count\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's purchase\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's purchase\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Let n be the number of teams in the league. Each team plays n-1 other teams twice,\n    # thus there are (n-1) * n total matches, but we divide by 2 because each match is counted twice.\n    # Setting this equal to 30 (the total number of matches in the season), we can solve for n.\n    \n    # Given the equation is n * (n - 1) / 2 = 30\n    # n * (n - 1) = 60\n    # n^2 - n - 60 = 0 (quadratic equation to solve for n)\n    \n    # We can use the quadratic formula to solve for n: (-b ± sqrt(b^2 - 4ac)) / (2a)\n    # where a = 1, b = -1, and c = -60\n    \n    from math import sqrt\n    \n    a = 1\n    b = -1\n    c = -60\n    \n    # Calculate the determinant (b^2 - 4ac)\n    det = sqrt(b**2 - 4*a*c)\n    \n    # Calculate both potential solutions for n\n    n1 = (-b + det) / (2*a)\n    n2 = (-b - det) / (2*a)\n    \n    # We need to return the positive integer value of n, so we check which of n1 or n2 is positive\n    ans = n1 if n1 > 0 else n2\n    \n    return int(ans)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum([(i if i % 2 == 0 else -i) for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(135, 1000):\n        if i + 135 == int(str(i) + '0'):\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    ans = (10.05 + (3 - 0.85) / (5/6)) / 505.2\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    \n    # All students have to go to the other side and then we need to return\n    # the boat for the next group. Since the boat can carry only 5 people,\n    # one trip means sending the boat to the other side with people and\n    # returning it empty.\n\n    # One person from each group of 5 must row back, except the last group.\n    # We calculate the number of full groups and the remaining students.\n    full_groups = students // boat_capacity\n    remaining_students = students % boat_capacity\n\n    # Trips for full groups (each group needs to go and one student returns)\n    trips_for_full_groups = full_groups * 2 - 1  # Last group doesn't include a return trip\n\n    # Include the trip for the remaining students, if any\n    if remaining_students > 0:\n        if remaining_students == 1:\n            # In the case where there is only 1 student left, we take another strategy:\n            # Instead of just taking this student across, we can have a different trip\n            # before that, where we take only 3 people across. One of them rows back,\n            # so we have 2 left on the other side and can take 4 more (3 + 4 = 7).\n            trips_for_remaining = 2  # one trip for the last remaining group + the one before\n        else:\n            trips_for_remaining = 1\n            \n    else:\n        trips_for_remaining = 0\n\n    total_trips = trips_for_full_groups + trips_for_remaining\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Percentage choosing both A and B is calculated\n    # by (A + B - Neither - Both)\n    percent_choosing_A = 80\n    percent_choosing_B = 35\n    percent_choosing_neither = 10\n    percent_choosing_both = percent_choosing_A + percent_choosing_B - percent_choosing_neither - 100\n\n    # Calculate the total number of students by (number choosing both / percentage choosing both)\n    num_choosing_both = 75\n    total_students = int(num_choosing_both / (percent_choosing_both / 100))\n\n    return total_students\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ans = 3 * 100 + 2 * 10 + 7 * 1\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\n\ndef factors_count(n):\n    return sum(n % i == 0 for i in range(1, n + 1))\n\ndef solution():\n    # All possible combinations of numbers picked by the teacher\n    all_combinations = list(combinations(range(1, 14), 9))\n    valid_combinations = []\n\n    # Filtering combinations where two students are sure about the distinct factor counts\n    for combo in all_combinations:\n        factor_counts = [factors_count(num) for num in combo]\n        if factor_counts.count(factor_counts[0]) == 1:  # Only one student is sure\n            continue\n        contains_two_unique = len(set(factor_counts)) <= len(combo) - 2\n        contains_prime_factors = all(factors_count(num) != 2 for num in combo)\n        if contains_two_unique and contains_prime_factors:\n            valid_combinations.append(combo)\n\n    # Valid combinations after Alic\\textquoteright e and May\\textquoteright s statements\n    final_combinations = []\n\n    # Iterate over each valid combination\n    for combo in valid_combinations:\n        # Numbers as seen by Alice and May\n        for i in range(len(combo)):\n            alice_num = combo[i]\n            alice_factors_count = factors_count(alice_num)\n            # Alice has already stated that her number is odd and has a unique factor count\n            if alice_num % 2 == 0 or alice_factors_count != 2:\n                continue\n\n            # Iterate over the remaining numbers for May's perspective\n            for j in range(len(combo)):\n                if i == j:\n                    continue\n\n                may_num = combo[j]\n                may_factors_count = factors_count(may_num)\n                \n                # Check May's constraints based on Alice's number\n                if may_num % 2 == 0 or may_num >= alice_num or may_factors_count != 4:\n                    continue\n\n                # Check if there's a valid number for Mark based on May's statement\n                mark_possible = may_num - 1\n                if mark_possible in combo:\n                    # Check if May and Mark have unique factor counts\n                    mark_factors_count = factors_count(mark_possible)\n                    if mark_factors_count == may_factors_count:\n                        continue\n\n                    # A valid condition has been met for this combination\n                    final_combinations.append(combo)\n\n    # Now find the combination that is unique based on these constraints\n    if len(final_combinations) == 1:\n        unselected_numbers = set(range(1, 14)) - set(final_combinations[0])\n        # Returning the product of the four numbers not selected\n        ans = 1\n        for num in unselected_numbers:\n            ans *= num\n        return ans\n    else:\n        # If there is not exactly one valid combination, then it's impossible to determine\n        return None\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) / (factorial(99) + factorial(98))\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Frank, Alex, and Paul's ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Create the equations based on the problem\n    equation1 = Eq(frank - alex, alex - paul)  # Difference in ages are the same\n    equation2 = Eq(frank + alex + paul, 99)    # Sum of their ages is 99\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Return Alex's age\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '4', '6', '9']\n    \n    # Generate all possible 4-digit permutations of the digits\n    perm = permutations(digits)\n    \n    sum_of_numbers = sum(int(''.join(p)) for p in perm)\n    count_of_numbers = len(list(permutations(digits)))\n    \n    # Calculate the average\n    average = sum_of_numbers / count_of_numbers\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, girls)\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for hundreds in range(9, 10):  # The greatest 1-digit number\n        for tens in range(0, 10):  # All potential tens digits\n            for ones in range(0, 10):  # All potential ones digits\n                # Check if the digits are all different, even, and add to 15\n                if hundreds != tens and hundreds != ones and tens != ones and (tens + ones) == 15 and ones % 2 == 0:\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # km/h for the van\n    speed_car = 120  # km/h for the car\n    lead_time = 3  # hours the van leads\n    \n    # Calculate distance van traveled during the lead time\n    distance_van_lead = speed_van * lead_time\n    \n    # Relative speed between car and van\n    relative_speed = speed_car - speed_van\n    \n    # Time it takes for the car to catch up with the van\n    catch_up_time = distance_van_lead / relative_speed\n    \n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    # There are 5 options for hats: 0, 1, 2, 3, or 4 hats.\n    hat_options = len(list(combinations([1, 2, 3, 4], 0))) + \\\n                  len(list(combinations([1, 2, 3, 4], 1))) + \\\n                  len(list(combinations([1, 2, 3, 4], 2))) + \\\n                  len(list(combinations([1, 2, 3, 4], 3))) + \\\n                  len(list(combinations([1, 2, 3, 4], 4)))\n    \n    # Since shirts, pants, and skirts are not optional, Wendy has to bring\n    # 3 shirts, 2 pairs of pants and 1 skirt.\n    # The combinations for these items are fixed and equal to:\n    # 1 combination for 3 shirts (all of them)\n    # 1 combination for 2 pairs of pants (both of them)\n    # 1 combination for 1 skirt (the skirt)\n    \n    # Therefore, the number of different combinations of clothing is:\n    shirt_options = 1\n    pants_options = 1\n    skirt_options = 1\n\n    total_combinations = hat_options * shirt_options * pants_options * skirt_options\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    repetend = '01'  # The repetend of the first number 0.0101...\n    length_repetend = len(repetend)  # Length of the repetend\n    product_repetend_length = length_repetend**2  # Length of repetend of the product\n    return product_repetend_length\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's rate: 300 pages in 12 minutes\n    rate_A = 300 / 12  # pages per minute\n    # Printer B's rate: 300 pages in 10 minutes\n    rate_B = 300 / 10  # pages per minute\n\n    # Total rate when both printers work together\n    total_rate = rate_A + rate_B  # pages per minute\n\n    # Time given is half an hour, which is 30 minutes\n    time_minutes = 30\n\n    # Pages printed by both printers in half an hour\n    pages_printed = total_rate * time_minutes\n\n    return pages_printed\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantity of each type of fruit\n    total_items = symbols('total_items')\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n\n    # Set up the equation based on the given information\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for the total number of items\n    total_solution = solve(equation, total_items)[0]\n\n    # Calculate the number of lemons based on the total number of items\n    num_lemons = lemons.subs(total_items, total_solution)\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check for valid day-month combinations\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                continue\n            \n            # Format the date as an 8-digit string\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            \n            # Count the number of '3's in the formatted date string\n            count += date_str.count('3')\n    \n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    # The ratio of the number of puffs sold\n    ratio_durian = 3\n    ratio_chocolate = 4\n    ratio_strawberry = 2\n\n    # The prices of each puff\n    price_durian = 5\n    price_chocolate = 3\n    price_strawberry = 4\n\n    # Total money collected\n    total_money = 560\n\n    # Set up the proportion equations based on the ratio and prices\n    equation1 = Eq(durian, chocolate * ratio_durian / ratio_chocolate)\n    equation2 = Eq(durian, strawberry * ratio_durian / ratio_strawberry)\n    equation3 = Eq(price_durian * durian + price_chocolate * chocolate + price_strawberry * strawberry, total_money)\n\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Calculate the amount of money collected from durian puffs\n    money_from_durian_puffs = price_durian * solutions[durian]\n\n    return money_from_durian_puffs\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from itertools import permutations\n\n    for A, B, C, D in permutations(range(1, 19), 4):\n        for Zachary, Yvonne, Xavier, Waylon in permutations(range(1, 19), 4):\n            condition_1 = A < D and A > C\n            condition_2 = B < Xavier\n            condition_3 = D == 5 * Yvonne\n            condition_4 = (Zachary + 2 - Xavier) == (Zachary + 2 - Waylon)\n            condition_5 = Zachary == Yvonne + Xavier\n\n            if condition_1 and condition_2 and condition_3 and condition_4 and condition_5:\n                return A\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is cut into 490 equal small cubes,\n    # and the dimensions are 7x5x14, each small cube will be 1x1x1\n\n    # Only the corners of the cuboid will have exactly three faces painted\n    # There are 8 corners in a cuboid\n    \n    corners = 8\n\n    return corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original = tens * 10 + ones\n            swapped = ones * 10 + tens\n            if swapped == (original // 3) + 3:\n                return original\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_three_years_rate = 1.191\n    last_two_years_rate = 1.166\n\n    total_amount = initial_investment * first_three_years_rate * last_two_years_rate\n    return round(total_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for raisin roll and donut\n    roll, donut = symbols('roll donut')\n\n    # Given conditions\n    equation1 = Eq(5 * roll + 6 * donut, 14.70)\n    equation2 = Eq(roll, 3 * donut)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roll, donut))\n\n    # Return the price of a raisin roll\n    return solutions[roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n    \n    num_students_school1 = 24\n    num_students_school2 = 36\n    num_students_school3 = 42\n\n    # Calculate the greatest common divisor (GCD) of the numbers of students from all three schools\n    gcd_12 = gcd(num_students_school1, num_students_school2)\n    gcd_all = gcd(gcd_12, num_students_school3)\n\n    return gcd_all\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the price of each item\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Write down the system of equations based on the given information\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    # Get the price of the pencil case\n    pencil_case_price = solutions[pencil_case]\n    \n    return pencil_case_price\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let the first term be a and the common difference be d.\n    # The sum of the first n terms of an arithmetic sequence is given by S_n = (n/2) * (2a + (n-1)d)\n    # We have two equations based on the given sums:\n    # S_9 = (9/2) * (2a + 8d) = 99\n    # S_27 = (27/2) * (2a + 26d) = 540\n    \n    # Let's solve for a and d using the given sums.\n    a_9 = 9/2 * (2 * 99 / 9)\n    differ_9 = 2 * 99 / 9\n    \n    a_27 = 27/2 * (2 * 540 / 27)\n    differ_27 = 2 * 540 / 27\n    \n    # Now we equate both expressions to find d\n    d = (differ_27 - differ_9) / (27 - 9)\n    \n    # Now substitute the value of d back into the expression for a_9 to find a\n    a = (differ_9 - 8 * d) / 2\n    \n    # Calculate the sum of the first 16 terms with the derived values of a and d\n    S_16 = (16/2) * (2 * a + (16 - 1) * d)\n    \n    return S_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be non-zero\n        for tens in range(10):      # Tens digit\n            for units in range(10):  # Units digit\n                # Checking whether the hundreds digit is divisible by the tens\n                # and units digits (avoiding division by zero)\n                if tens != 0 and units != 0 and hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # The pattern suggests that each number n appears n times in the sequence.\n    # We need to write all the 12's, i.e., 12 appears 12 times.\n    # To find the median when all the 12s are written, we calculate the total number\n    # of terms which is the sum of first 12 natural numbers.\n\n    total_terms = sum(range(1, 13)) # This is also (12*13)//2 which is a formula for sum of first n natural numbers\n\n    # The median is the central value of the sequence. If the sequence has an odd number of terms, the median\n    # is the middle term. If the sequence has an even number of terms, the median is the average of the two\n    # middle terms. Since the total number of terms will be even (1+2+3+...+12),\n    # we need to find the two middle terms.\n\n    # To find the two middle terms in the sequence, we need to find the terms at positions total_terms//2 and total_terms//2 + 1\n\n    middle_term1_position = total_terms // 2\n    middle_term2_position = middle_term1_position + 1\n\n    # Now we must find the value that occupies these positions.\n    # We do this by iterating over the number sequence and summing the count of occurrences\n    # until we reach the positions of the middle terms.\n\n    position = 0\n    for n in range(1, 13):\n        position += n  # Sum of occurrences of numbers\n        if middle_term1_position <= position:\n            median1 = n\n            break\n\n    # Because the numbers are repeated n times, the next term will be the same for an even count.\n    median2 = median1  \n\n    # Finally, calculate the median as the average of the two middle terms\n    median = (median1 + median2) / 2  # This will just be median1 or median2 in our case\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '8']\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    \n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digits = 3  # from 7 to 9\n    double_digits = 40 - 10 + 1  # from 10 to 40\n\n    return single_digits + 2 * double_digits\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Number of games in the group stage\n    games_per_group = 6  # Each team plays 3 games in a round-robin of 4 teams\n    total_groups = 8\n    group_games = games_per_group * total_groups\n\n    # Number of games in the knockout rounds\n    # Round of 16, quarterfinals, semifinals, third place and final\n    knockout_games = 16 + 8 + 4 + 2 + 1\n\n    # Total games played\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Find the least common multiple (LCM) of the two flash rates\n    from math import gcd\n\n    red_light = 4  # red light flashes 4 times a minute\n    green_light = 6  # green light flashes 6 times a minute\n\n    # Calculate the LCM of the two flash rates\n    lcm = (red_light * green_light) // gcd(red_light, green_light)\n\n    # Since the LCM is the number of times the lights will flash together in a minute,\n    # we need to find out how many times they flash together in an hour.\n\n    flashes_per_hour = 60 // lcm\n\n    # Including the first and the last time, add 1 to the result\n    ans = flashes_per_hour + 1\n\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num = symbols('num')\n    equation = Eq(3 * num + 1, 22)\n\n    solution = solve(equation, num)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = 0.4 * total_paintings  # 40% are landscapes\n    still_lifes = total_paintings - landscapes\n    french_landscapes = 25\n    total_french_paintings = 40\n    non_french_still_lifes = still_lifes - (total_french_paintings - french_landscapes)\n\n    return int(non_french_still_lifes)\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # ml of rose syrup + ml of water\n    max_volume_per_glass = total_volume // 9  # use floor division to find the maximum full volume per glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    amount_1 = 100\n    concentration_1 = 0.50\n\n    amount_2 = 400\n    concentration_2 = 0.80\n\n    total_amount = amount_1 + amount_2\n    total_rice = (amount_1 * concentration_1) + (amount_2 * concentration_2)\n    \n    concentration_of_mixture = total_rice / total_amount\n\n    return concentration_of_mixture\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24  # Speed in meters per minute\n    time_seconds = 300    # Time in seconds\n    time_minutes = time_seconds / 60  # Convert time from seconds to minutes\n    \n    distance = speed_m_per_min * time_minutes  # Calculate the distance\n    \n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    number = 0\n    for i in range(2017):\n        number = number * 10 + 2 \n        total_sum += number\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15\n    days_for_20_horses = total_hay / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Loop through all 4-digit numbers\n    for number in range(1000, 10000):\n        # Convert the number to string to access digits\n        num_str = str(number)\n        # Move the first digit to the end\n        new_num_str = num_str[1:] + num_str[0]\n        # Convert back to integer\n        new_number = int(new_num_str)\n        # Check if the new number is larger by 4707\n        if new_number - number == 4707:\n            return number\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Current ages of Oliver and Lin\n    oliver_age = 20\n    lin_age = 26\n    \n    # Define the number of years from now as a variable\n    years_later = symbols('years_later')\n    \n    # The equation representing the sum of their ages being 48 years later\n    equation = Eq(oliver_age + years_later + lin_age + years_later, 48)\n\n    # Solve the equation for years_later\n    solution = solve(equation, years_later)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    \n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    \n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    \n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    i = 1\n    while True:\n        num = 35 * i  # Get a multiple of 35\n        if str(num).endswith(\"35\"):  # Check if it ends with '35'\n            if sum(map(int, str(num))) == 35:  # Check if the digit sum equals 35\n                return num\n        i += 1\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    total_money = 8 * y\n    spent_on_watch = 4 * y\n    spent_on_handbag = 20\n    each_child_received = y - 5\n    \n    # Money given to 2 children\n    money_given_to_children = 2 * each_child_received\n    \n    # Equation based on the total money spent and given\n    equation = Eq(total_money, spent_on_watch + spent_on_handbag + money_given_to_children)\n    \n    # Solve for y\n    solution = solve(equation, y)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    regular_years = 99  # since leap year calculation will start from 1904\n    leap_years = 0\n    \n    for year in range(1904, 2001, 4):\n        leap_years += 1\n        regular_years -= 1\n    \n    total_days = (regular_years * 365) + (leap_years * 366)\n    \n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_money = 100\n    deposit_amount = 10\n    spend_amount = 8\n    net_amount_per_cycle = deposit_amount - spend_amount\n    \n    # Number of complete cycles (2 days per cycle)\n    full_cycles = total_days // 2\n    \n    # Money after completing the full cycles\n    money_after_full_cycles = initial_money + full_cycles * net_amount_per_cycle\n    \n    # Remaining days after the full cycles\n    remaining_days = total_days % 2\n    \n    # Add the effect of the remaining days\n    final_money = money_after_full_cycles + (deposit_amount if remaining_days == 1 else 0)\n\n    return final_money\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 3 != 0 and i % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    first_term = 1\n    last_term = 12\n    number_of_terms = 12\n\n    # The sum of an arithmetic sequence is given by:\n    # sum = n/2 * (first_term + last_term)\n    sum_of_strikes = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_coins = 40 / 10  # since each coin is ten-pence, divide 40 by 10 to get the number of coins\n    total_weight = weight_per_coin * total_coins  # total weight is the weight per coin times the number of coins\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    for nina_buttons in range(1, 22):\n        james_buttons = 22 - nina_buttons\n        if nina_buttons - 4 == james_buttons + 4:\n            return nina_buttons\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    for correct_answers in range(7):\n        wrong_answers = 6 - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    adults = (ratio_adults * total_people) / total_ratio\n    return int(adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_velocity = 10 # m/s\n    angle_degrees = 37 # degrees\n    g = 9.81 # m/s^2, acceleration due to gravity\n    \n    # Convert angle from degrees to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n    \n    # Calculate the height using conservation of energy and kinematic equation\n    # Since there is no friction, potential energy at the top equals kinetic energy at the bottom\n    # mgh = 1/2 * m * v^2 (mass m cancels out)\n    # h = v^2 / (2 * g)\n    # To get the height along the ramp, h_along_ramp = h / sin(angle)\n    height_vertical = initial_velocity**2 / (2 * g)\n    height_along_ramp = height_vertical / math.sin(angle_radians)\n\n    # Calculate the distance the box slides up the ramp before stopping\n    # Using the equation for vertical height\n    distance_along_ramp = initial_velocity**2 / (2 * g * math.cos(angle_radians))\n\n    # The question asks for two values, height and distance up the ramp\n    return height_along_ramp, distance_along_ramp\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    total_seats = 9\n    \n    last_seat = (total_candies - 1 + starting_seat) % total_seats\n    return last_seat if last_seat != 0 else total_seats\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Since we want two groups of 4 balls of the same color\n    # In the worst case, she could take all balls of one color that is not enough to make two groups of 4.\n    # That is, she could take all 5 blue balls, and it wouldn't be enough.\n    \n    # Then, she starts taking the balls of the second color. In the worst case, she takes all of them.\n    # So we have 5 (blue) + 4 (orange), still not enough to make two groups of 4 of the same color.\n    \n    # Now, she starts taking balls of the last color.\n    # The moment she takes 3 yellow balls, she will have at least two groups of 4 of the same color,\n    # because she will have 5 blue, 4 orange, and 3 yellow.\n    # At this point, there are either two groups of 4 blue balls or two groups containing 4 balls\n    # (one group of blue and one group of orange).\n    \n    # Therefore, she must take 5 (blue) + 4 (orange) + 3 (yellow) = 12 balls.\n    \n    return 5 + 4 + 3  # Total number of balls she needs to take out.\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    # in a knockout tournament, the number of matches required to determine a winner\n    # is always the initial number of players - 1 because in each match one player is knocked out\n    matches = players - 1\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    return sum(numbers)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Let the original number be abc, where a is in thousands place, b in hundreds, c in tens, and d in ones.\n    # The new number will be bcd + 1000a. \n    # According to the given condition, bcd + 1000a = abcd + 4707\n    # which simplifies to 999a - bcd = 4707\n    # Now we just need to loop over possible values of a, b, c, and d \n    # such that a,b,c,d are all in [0, 9] and a > 0 since it is the thousands place.\n    \n    for a in range(1, 10):  # Thousand's place cannot be 0\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    original_number = 1000 * a + 100 * b + 10 * c + d\n                    new_number = 1000 * b + 100 * c + 10 * d + a\n                    if new_number - original_number == 4707:\n                        return original_number\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / number_of_bags\n    \n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    n_9 = 9\n    s_9 = 72\n    n_23 = 23\n    s_23 = 736\n\n    a = (2 * s_9) / n_9  # First term of the sequence\n    d = ((2 * s_23) / n_23 - a) / (n_23 - 1)  # Common difference\n\n    n_16 = 16\n    s_16 = (n_16 / 2) * (2 * a + (n_16 - 1) * d)\n\n    return int(s_16)\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Given exchange rates are required to solve this problem\n    # However, this information is not provided in the question\n    # Assuming the exchange rate of £1 is equal to x rubles, the amount of money Richard has in rubles is 14 * x\n    # Cost per CD in rubles (c) is also needed\n\n    # Using hypothetical values for x and c to illustrate how the solution would work\n    # In real scenario, the values for x (exchange rate) and c (cost per CD in St Petersburg) must be provided or obtained from a reliable source\n\n    x = 1  # Placeholder for the actual exchange rate (rubles per 1 pound)\n    c = 1  # Placeholder for the cost of a CD in St Petersburg in rubles\n\n    rubles = 14 * x  # Convert £14 to rubles\n    num_cds = rubles // c  # Use integer division to find out how many CDs he could buy\n\n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n    \n    for age in [28, 39, 52, 84]:\n        age_3_years_ago = age - 3\n        age_next_year = age + 1\n        age_in_12_years = age + 12\n        \n        # Check if age 3 years ago was a perfect square\n        if (age_3_years_ago**0.5).is_integer():\n            # Check if age next year is a prime number\n            if isprime(age_next_year):\n                # Check if age in 12 years is a perfect cube\n                if round(age_in_12_years**(1/3))**3 == age_in_12_years:\n                    return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart needs to take at least one chip of each color to guarantee he has two different colors.\n    # Start with one color:\n    # Take all 3 red M&Ms -> 3 chips taken, but all are red\n    # Then move to the next color:\n    # Take all 4 yellow M&Ms (after having all red) -> 3 (red) + 4 (yellow) = 7 chips taken\n    # At this point, no matter which color is taken next, he will have 2 different colors.\n    # Take 1 brown M&M -> 7 (red + yellow) + 1 (brown) = 8 chips taken\n    # So, the minimum number of M&Ms he needs to ensure 2 different colors is 8.\n    return 8\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Let's assume Bernice's speed is 1 level per unit time.\n    # When Andrew is at level 5, Bernice is at level 3.\n    # The time it took for Andrew to reach level 5 would be enough for Bernice to reach level 5\n    # So, Andrew's speed is (5 / 3) per unit time.\n\n    # Now, when Bernice is at level 6, Cassandra is already at level 10.\n    # The time it took for Bernice to reach level 6 (from level 3) would be enough for Cassandra to reach level 10 (from level 5, since they started at the same time)\n    # We can calculate Cassandra's speed. Time taken by Bernice to go from level 3 to level 6 is 3 (at speed 1 level per unit time)\n    # In that time, Cassandra went from level 5 to level 10, which is 5 levels.\n    # So, Cassandra's speed is (10 / 3) per unit time.\n\n    # Now, we want to find out when Cassandra is at level 19, where is Andrew?\n    # Time taken by Cassandra to reach level 19 from level 10 would be (19 - 10) / (10 / 3) = 27 / 10 unit time\n    # During this time, Andrew, with speed (5 / 3) per unit time, would climb additional levels.\n\n    andrew_speed = 5.0 / 3\n    cassandra_speed = 10.0 / 3\n\n    time_for_cassandra_to_19 = (19 - 10) / cassandra_speed\n    additional_levels_for_andrew = time_for_cassandra_to_19 * andrew_speed\n\n    # Andrew's level when Cassandra is at level 19 will be his initial level 5 plus the additional levels climbed\n    andrew_level_at_cassandra_19 = 5 + additional_levels_for_andrew\n\n    return int(andrew_level_at_cassandra_19)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a + b\n    \n    # Given 2 ⋁ (x ⋁ 4) = 59, we need to find the value of x.\n    # Let's consider y = x ⋁ 4, then we have 2 ⋁ y = 59\n    # Using the definition of the operation ⋁, we get:\n    # 2*y + 2 + y = 59\n    # Simplifying we get: 3*y + 2 = 59\n    # i.e., 3*y = 57\n    # Therefore, y = 57 / 3 = 19\n    # Now we know y = x ⋁ 4 and y = 19, we can write:\n    # x*4 + x + 4 = 19\n    # Solving for x, we get: 5*x = 15\n    # Hence, x = 15 / 5 = 3\n    y = (59 - 2) // 3\n    x = (y - 4) // 5\n\n    return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    total_length = 43\n\n    full_repeats = total_length // pattern_length\n    partial_repeats = total_length % pattern_length\n\n    sum_full_repeats = sum(int(digit) for digit in pattern) * full_repeats\n    sum_partial_repeats = sum(int(pattern[i]) for i in range(partial_repeats))\n\n    total_sum = sum_full_repeats + sum_partial_repeats\n\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # time taken for one quiz in minutes\n    num_quizzes = 4     # number of quizzes\n    total_time_minutes = time_per_quiz * num_quizzes  # total time in minutes\n    total_time_hours = total_time_minutes / 60     # converting minutes to hours\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_in_a_kilometre = 100000\n    ans = kilometres * centimetres_in_a_kilometre\n    return ans\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_shafur_samuel_together = 40 / 60\n    \n    # Calculate the distance Samuel traveled before turning back\n    distance_samuel_before_turning = 66 * time_shafur_samuel_together\n    \n    # Calculate the time Shafur traveled alone\n    time_shafur_alone = distance_samuel_before_turning / 54\n    \n    # Total time it took for Shafur to reach Town Y is the time together plus time alone\n    total_time_shafur = time_shafur_samuel_together + time_shafur_alone\n    \n    # Calculate the distance between Town X and Town Y using Shafur's speed and total time\n    distance_X_Y = 54 * total_time_shafur\n    \n    return distance_X_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n\n    # Let's call the number of years needed 'n'\n\n    # Grandpa's age in 'n' years will be grandpa_age + n\n    # Sum of grandsons' ages in 'n' years will be each of their ages plus 'n'\n    # We need to find 'n' such that grandpa_age + n = sum(grandson_ages) + 3n\n\n    # Simplify the equation: grandpa_age + n = sum(grandson_ages) + 3n\n    # 2n = grandpa_age - sum(grandson_ages)\n    # n = (grandpa_age - sum(grandson_ages)) / 2\n\n    n = (grandpa_age - sum(grandson_ages)) // 2\n    return n\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost, table_cost = symbols('chair_cost table_cost')\n\n    equation1 = Eq(table_cost, 3 * chair_cost)\n    equation2 = Eq(4 * table_cost + 9 * chair_cost, 504)\n\n    solutions = solve((equation1, equation2), (chair_cost, table_cost))\n\n    return solutions[chair_cost]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for fives in range(0, 41, 5):\n        for tens in range(0, 41, 10):\n            if fives + tens == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4  # The common difference, since the sequence is decreasing\n\n    # Let n be the number of terms until the first negative term\n    # an = a1 + (n - 1)d\n    # 0 > a1 + (n - 1)d // since we are looking for the term before becoming negative\n    # Solving for n considering the inequality a1 + (n - 1)d < 0\n\n    # 0 > 50 + (n - 1)(-4)\n    # 0 > 50 - 4n + 4\n    # 4n > 54\n    # n > 13.5\n\n    # Since n must be a whole number and we want the first negative term:\n    n = 14\n\n    return n\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if 100 <= product <= 999:\n            return i\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    flowers_per_vase = 9\n    \n    vases_needed = (flowers + flowers_per_vase - 1) // flowers_per_vase\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First part\n    seven_div_neg_3_3 = 7 / -3.33333333333333  # -3.\\dot{3} is -10/3 as a repeating decimal\n    root_neg_0_027 = (-0.027) ** (1/3)  # Cube root of -0.027\n    first_part = seven_div_neg_3_3 / root_neg_0_027\n    \n    # Second part\n    two_cubed_div_four_squared = (2 ** 3) / (4 ** 2)\n    second_part_calculation = 0.125 * (1.8 - (0.2 * 7))\n    second_part = two_cubed_div_four_squared / second_part_calculation\n    \n    # Third part\n    one_div_0_142857 = 0.1 / 0.142857142857  # 0.1 / 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} is 0.1 / 1/7\n    two_times_0_3 = 2 * 0.3\n    third_part = one_div_0_142857 + two_times_0_3\n    \n    # Final answer\n    ans = (first_part + second_part - third_part)\n    \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3)  # Ceiling division to find the first multiple of 3\n    last_multiple = 81 // 3       # Floor division to find the last multiple of 3\n    count = last_multiple - first_multiple + 1\n    \n    return count\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    first_half = sum(range(3, 11))  # Sum from 3 to 10\n    second_half = sum(range(3, 7))  # Sum from 3 to 6 (the last part of the sequence)\n\n    # The total sum is the sum of the first half and the second half\n    total_sum = first_half + second_half\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip - bud, 50)\n\n    # 80% of Pip's money is spent, so he has 20% left\n    # 3/4 of Bud's money is spent, so she has 1/4 left\n    # The ratio of Pip's leftover money to Bud's is 6:5\n    equation2 = Eq((1 - 0.80) * pip / ((1 - 3/4) * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_phones = symbols('total_phones')\n\n    jan_sold = total_phones / 2 + 22\n    feb_sold = (total_phones - jan_sold) / 2 + 13\n\n    equation = Eq(jan_sold + feb_sold + 78, total_phones)\n\n    initial_phones = solve(equation, total_phones)\n\n    return initial_phones[0]\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths = 18\n    number = three_sevenths * (7 / 3)\n    five_sixths = number * (5 / 6)\n    return five_sixths\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # Since there's only one winner, the number of games is\n    # one less than the total number of players.\n    num_players = 5\n    num_games = num_players - 1\n    \n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400 * 1\n    oct_to_dec = 300 * 3\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    total_months = 12\n\n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n\n    total_apples = initial_apples + additional_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_red_packets = 4\n    amount_short = 15\n    amount_per_packet = 70\n\n    total_amount = (total_red_packets * amount_per_packet) - amount_short\n    return total_amount\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament with 5 people, each game eliminates one player.\n    # The tournament is over when there is only one winner remaining.\n    # Therefore, the number of games needed will be 4 (since 5 - 1 = 4).\n    return 4\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Write the equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)  # Total marbles\n    after_transactions = Eq(anna + (betsy - 15 + 8) + (charlene + 15 - 8), 168)  # Total marbles after transactions\n    ratio = Eq(anna/betsy/charlene, 2/5/7)  # Ratio of their marbles\n\n    # Solve the system of equations\n    sol = solve((total_marbles, after_transactions, ratio), (anna, betsy, charlene))\n    \n    # Calculate Betsy's original number of marbles\n    betsy_initial = sol[betsy] + 15\n\n    return betsy_initial\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    return 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back,\n    # There must be 7 shelves before and 9 shelves after it.\n    # To find the total number of shelves we add the number of shelves before the book,\n    # the shelf with the book itself, and the number of shelves after.\n    total_shelves = 7 + 1 + 9  # 7 before, 1 for the book's shelf, and 9 after\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(2016)\n    # From the prime factorization we get:\n    # 2016 = 2^5 * 3^2 * 7^1\n    # As all ages are under 10, we need to find a combination of factors which gives us\n    # four numbers each one of them being less than 10 and the product is 2016.\n    # The numbers can only be 1, 2, 3, 4, 6, 7, 8, 9 (under 10)\n    # Looking at the prime factorization, we can compose the numbers:\n    # 8 = 2^3, 4 = 2^2, 7 = 7^1, 3 = 3^1, 1 (implicit)\n    # Thus, the children's ages could be 8, 4, 7, and 3 (3 comes from the remaining 2 * 3)\n    sum_ages = 8 + 4 + 7 + 3\n    return sum_ages\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    students_from_front_to_back = 7 + 4 - 1  # Chris is double-counted\n    students_from_left_to_right = 3 + 7 - 1  # Chris is double-counted\n    total_students = students_from_front_to_back * students_from_left_to_right\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, combined age was 10, so now their combined age is 10 + 4*2 (since we have two dogs and time passed is 4 years)\n    current_combined_age = 10 + 4*2\n    # In two years, the combined age will be current_combined_age + 2*2 (2 years for each dog)\n    future_combined_age = current_combined_age + 2*2\n    return future_combined_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    total_amount = 1575 # since the amount is in pence\n    # Let the number of 10p coins be x.\n    # Then the number of 20p coins is 2x and the number of 5p coins is 0.5x.\n    # According to the problem, the total value should be the sum of the values of each coin, and it is given by:\n    # 5 * 0.5x + 10 * x + 20 * 2x = 1575\n    # Simplifying the equation: 2.5x + 10x + 40x = 1575\n    # Combine like terms: 52.5x = 1575\n    # Find x: x = 1575 / 52.5\n    x = total_amount / 52.5\n    # Since we need to find the number of 20p coins, which is 2x:\n    num_20p_coins = 2 * x\n    \n    return int(num_20p_coins)\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - 1, girls)  # Each boy has as many sisters as brothers (minus himself)\n    equation2 = Eq(girls - 1, 2 * (boys - girls))  # Each girl has half as many sisters as brothers (minus herself)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Convert minutes to hours\n    first_duration = 30 / 60\n    second_duration = 30 / 60\n    third_duration = 30 / 60\n\n    # Create equations based on the problem statement\n    equation = Eq(first_duration * x + second_duration * (x - 20) + third_duration * (x + 10), 70)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    remaining_grams = 60\n    original_mass = remaining_grams / remaining_fraction\n    \n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    duration_days = 3 * 7  # 3 weeks * 7 days per week\n\n    end_date = start_date + timedelta(days=duration_days - 1)  # minus 1 because the start day counts as day 1\n\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base10_number = 96\n    base6_number = ''\n\n    while base10_number > 0:\n        digit = base10_number % 6\n        base6_number = str(digit) + base6_number\n        base10_number //= 6\n    \n    return base6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    for max_apples in range(1, 28):\n        remaining_apples = 27 - max_apples\n        max_possible_for_others = remaining_apples - 4  # Since we have 4 other children\n        # Checking if with the max_apples we can give the remaining children different numbers of apples\n        if max_possible_for_others < max_apples and 1+2+3+4 < max_apples:\n            return max_apples\n    return None  # In case there's no solution (which shouldn't happen for this problem)\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    note_amount = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * tip_percentage\n    total_payment = total_cost + total_tip\n\n    change = note_amount - total_payment\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    well_depth = 10\n    climb_up = 4\n    slide_down = 2\n    current_height = 0\n    day = 0\n    \n    while True:\n        day += 1\n        current_height += climb_up\n        if current_height >= well_depth:\n            break\n        current_height -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # In this game, the winning strategy involves ensuring that after your turn,\n    # a multiple of 4 marbles are left because no matter what the next player does,\n    # you can always leave a multiple of 4 marbles after your turn.\n    # Since the total number of marbles is 26, the closest multiple of 4 is 24.\n    # To leave 24 marbles, Jason must take 2 marbles in the first turn.\n\n    # Determine the number of marbles to take on the first turn \n    # to ensure a multiple of 4 marbles remains (i.e., 24)\n    marbles_to_take_first_turn = 26 - 24\n\n    return marbles_to_take_first_turn\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    n = 1\n    total = 0\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    solutions = []\n    count = 0\n    for x1 in range(1, 25):\n        for x2 in range(x1+1, 25):\n            for x3 in range(x2+1, 25):\n                for x4 in range(x3+1, 25):\n                    for x5 in range(x4+1, 25):\n                        for x6 in range(x5+1, 25):\n                            for x7 in range(x6+1, 25):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25:\n                                    solutions.append((x1, x2, x3, x4, x5, x6, x7))\n                                    count += 1\n    return solutions\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic is not at two of the bars,\n    # the probability that he is at the third bar is 100% or 1,\n    # because the question states he drinks 90% of the day and goes to three fixed bars at random.\n    # If he is not at the other two, he must be at the third one.\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    number = (three_sevenths * 7) / 3\n    five_sixths = (number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let G be the amount of grass grown per week\n    # Let T be the total amount of grass available at the beginning\n    # 120 cows eat all the grass in 12 weeks: T + 12*G = 120*12\n    # 150 cows eat all the grass in 8 weeks: T + 8*G = 150*8\n    from sympy import symbols, Eq, solve\n\n    T, G = symbols('T G')\n    equation1 = Eq(T + 12*G, 120*12)\n    equation2 = Eq(T + 8*G, 150*8)\n\n    solutions = solve((equation1, equation2), (T, G))\n\n    # Now we know the values of T and G, we use them to calculate the amount of cows for 6 weeks\n    # Let's say 'x' cows can eat all the grass in 6 weeks: T + 6*G = x*6\n    # We then solve for 'x'\n    T_value = solutions[T]\n    G_value = solutions[G]\n\n    x = symbols('x')\n    equation3 = Eq(T_value + 6*G_value, x*6)\n\n    x_value = solve(equation3, x)[0]\n\n    return x_value\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Initialize variables for volunteers and trees\n    volunteers = 1\n\n    # Try different numbers of volunteers to match the conditions\n    while True:\n        trees = volunteers * 4 + 5  # The total number of trees when each plants 4 trees\n        if (trees - 5) % 7 == 0:  # Check if the total minus 5 is divisible by 7 (each plants 7 trees)\n            break\n        volunteers += 1\n\n    # Return the number of volunteers and the total number of trees\n    return volunteers, trees\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    more_boys = 55\n    total_students = 0\n    \n    for boys in range(1, more_boys + 1, 2):  # Start from 1 boy and increase by 2 (forming the outer layer of boys)\n        girls = boys - 2  # Inner layer will have 2 fewer (one from each side of the square) to form a layer of girls\n        if girls > 0:\n            total_boys = boys ** 2\n            total_girls = girls ** 2\n            total_students = total_boys + total_girls\n            if total_boys - total_girls == more_boys:\n                break\n    \n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')   # Initial number of stickers in Bag A and B\n\n    # Equation 1: Initial total number of stickers\n    equation1 = Eq(a + b, 270)\n    \n    # Equation 2: After moving, number of stickers in Bag B to stickers in Bag A is 3:2\n    equation2 = Eq((b + 56) / (a - 56), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    # Cross multiply to find x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    percentage = 5\n    total = 180\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        total = sum([i for i in range(1, number) if number % i == 0])\n        return total\n    \n    num = 2  \n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10  # 10th term in the sequence\n    last_shown_term = 31\n    common_difference = 3  # Difference between terms\n    # The first term can be calculated by subtracting (n-1) * common_difference from the last shown term\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box + (total_cakes % cakes_per_box > 0)\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    equation1 = Eq(lovelle + makayla, 3998)\n    equation2 = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the total amount of money Irene had initially\n    x = symbols('x')\n\n    # Create the equation based on the problem\n    equation = Eq(x * 1/4 + x * 2/7, 225)\n\n    # Solve the equation for x\n    money_had_initially = solve(equation, x)\n\n    # Money Irene had at first is the solution to the equation\n    return money_had_initially[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    count = 0\n    # Since we want the maximum number of different positive integers,\n    # we start from 1 and go up until we can no longer use different integers \n    # that sum up to 30.\n    for i in range(1, 30):\n        if (i * (i + 1)) // 2 > 30:\n            break\n        count = i\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Worst case scenario is to pick 9 cards of each of the first three colors and then 1 more card.\n    # This guarantees that the last card picked will belong to a color that already has 9 cards.\n    cards_to_pick = 9 + 9 + 9 + 1\n    return cards_to_pick\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    gap = 1.1\n    number_of_daffodils = 8\n    number_of_gaps = number_of_daffodils - 1  # since there's a daffodil on both ends\n\n    total_length = (number_of_gaps * gap) + (2 * 0)  # daffodils have no width\n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    total_boxes = 1450\n    books_per_box = 258\n    total_books = total_boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "from itertools import combinations\n\ndef solution():\n    total_stickers = 9\n    possibilities = combinations(range(1, total_stickers), 2)\n    valid_combinations = [\n        combo for combo in possibilities\n        if sum(combo) < total_stickers and len(set(combo)) == 2\n    ]\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let x be the amount Jane drinks, then Alex drinks 1.5x.\n    jane_drinks = total_juice / (1 + 1.5)\n    alex_drinks = 1.5 * jane_drinks\n    \n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48  # Total distance to the wet market in meters\n    speed = 8      # Auntie Lina's walking speed in meters per minute\n    time = distance / speed  # Time taken in minutes\n\n    return int(time)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "def solution():\n    from math import comb\n\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n\n    # Calculate total combinations without any restrictions\n    total_combinations = comb(total_boys + total_girls, group_size)\n\n    # Calculate combinations with only girls (which we want to subtract)\n    only_girls_combinations = comb(total_girls, group_size)\n\n    # Subtract the only-girls combinations from the total to ensure at least 1 boy\n    ans = total_combinations - only_girls_combinations\n\n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    missing_number = (1 / 2) * (16 / (1 / 4))\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    total_friends = 6\n\n    fruits_per_friend = (total_pear + total_strawberry + total_chocolate) // total_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    bag_cost = 60\n    fraction_remaining_after_book = 1 - 1/4\n    fraction_spent_on_bag = 2/5\n\n    # Money spent on the bag is 2/5 of the remaining money after buying the book\n    remaining_after_book = bag_cost / fraction_spent_on_bag\n\n    # Total money she had at first is 1/(1 - 1/4) times the remaining money after buying the book\n    total_money_initially = remaining_after_book / fraction_remaining_after_book\n\n    return total_money_initially\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6 # base of 6^3 is 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    pages = 0\n    digits_used = 0\n\n    for i in range(1, total_digits + 1):\n        # Determine how many digits each value i contains\n        digits_in_i = len(str(i))\n        # Update the count of digits used so far\n        digits_used += digits_in_i\n        # Check if we exceed the total digit count; break if so\n        if digits_used > total_digits:\n            break\n        # Increment the page count\n        pages = i\n    \n    return pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Checking only odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7) - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total length of the road calculated by number of gaps between trees multiplied by the distance between each tree\n    total_length = (41 - 1) * 3\n\n    # Calculate number of lamp posts by dividing the total length by the distance between lamp posts\n    # we have to add one to include the lamp post at the beginning of the road.\n    num_lamp_posts = (total_length // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    possible_prices = []\n    for i in range(10):\n        for j in range(10):\n            price_str = f\"{i}679{j}\"\n            price = int(price_str)\n            if price % 72 == 0:\n                possible_prices.append(price // 72)\n\n    if len(possible_prices) == 1:\n        ans = possible_prices[0]\n    else:\n        ans = possible_prices\n    \n    return ans\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')\n\n    # students_a is twice the number of students_b\n    students_a = 2 * students_b\n\n    # equations based on the problem statement\n    equation1 = Eq(4 * students_a - candies, 20)   # If each student in class A get 4 candies, 20 more candies are needed\n    equation2 = Eq(candies - 6 * students_b, 16)  # If each student in class B can get 6 candies, there will be 16 candies left\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i % 10 + i // 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    spent_on_dvd = total_savings / 3\n    remaining = total_savings - spent_on_dvd\n    spent_on_book = 0.25 * remaining\n    left = remaining - spent_on_book\n    return left\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    years = 3\n\n    for year in range(years):\n        # Rabbits multiply by 3\n        rabbits *= 3\n        # Wolves eat half of the rabbits\n        rabbits //= 2\n\n    return rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60  # Time = Distance / Speed\n    time_for_second_mile = 1 / 30  # Time = Distance / Speed\n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2  # Sum of distances\n    average_speed = total_distance / total_time  # Average Speed = Total Distance / Total Time\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    car_wash_earnings = 1.40\n    goal_amount = 12\n\n    number_of_washes = goal_amount / car_wash_earnings\n\n    return int(number_of_washes) + 1 if number_of_washes % 1 != 0 else int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):  # Check if '2' is in the string representation of the number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_day_1 = 2\n    day = 4\n    candies_day_n = candies_day_1 * (2 ** (day - 1))\n    return candies_day_n\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    a, n = symbols('a n', integer=True)\n    eq1 = Eq(((290 - a) % n), 0)\n    eq2 = Eq(((235 - (a + 2)) % n), 0)\n    eq3 = Eq(((200 - (a + 5)) % n), 0)\n    \n    solutions = solve((eq1, eq2, eq3), (a, n))\n    # We take the solution where 'n' is greater than 1 as per the question.\n    ans = next(s[1] for s in solutions if s[1] > 1)\n    return ans\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6  # From Monday to Saturday\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the smaller angle as x\n    # The larger angle then would be 2x, since it's 2 times larger\n    # And the third angle is the right angle, which is 90 degrees\n\n    x = symbols('x')\n    equation = Eq(x + 2*x + 90, 180)  # Sum of angles in a triangle is 180 degrees\n\n    # Solving for x \n    solution = solve(equation, x)\n\n    # Now we can find the larger angle, which is 2x\n    larger_angle = 2 * solution[0]\n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if len(set([P, I, S])) == 3:  # Ensure all digits are different\n                    PI = 10 * P + I\n                    IS = 10 * I + S\n                    if 4 * IS == PI:\n                        return PI\n    return None\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_age = 765\n    total_members = 9\n    \n    # The middle age will be the average since the ages are consecutive\n    average_age = total_age // total_members\n    \n    # Since the ages are consecutive and odd in number, the middle one is the average\n    middle_age = average_age\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    # 9 necklaces and 5 earrings cost $1440\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    # 3 necklaces and 1 earring cost $438\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    # Cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    six_day_total = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine = six_day_total + sunday_sunshine\n    average_sunshine = total_sunshine / 7\n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n\n    # Total time taken to walk to school, hence total distance to school in minutes\n    total_walking_time = 24  # minutes\n    total_distance = walking_speed * total_walking_time  # m\n\n    # Half the journey covered by walking\n    half_distance = total_distance / 2\n    time_walking_half = half_distance / walking_speed  # minutes\n\n    # The other half by running\n    time_running_half = half_distance / running_speed  # minutes\n\n    # Total time for half walk and half run\n    total_time_half_walk_run = time_walking_half + time_running_half\n\n    return total_time_half_walk_run\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    num_trees = 79\n    length_road = 320\n    distance_between = length_road / (num_trees + 1)\n    \n    return distance_between\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return total_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    savings = symbols('savings')\n    \n    # 1/3 of savings given to mother\n    given_to_mother = savings / 3\n    \n    # Spent 177 on dresses and 129 on earrings\n    spent_on_dresses_and_earrings = 177 + 129\n    \n    # Amount left is 1/2 of what she gave her mother\n    amount_left = given_to_mother / 2\n    \n    # Equation representing the situation\n    equation = Eq(savings - given_to_mother - spent_on_dresses_and_earrings, amount_left)\n    \n    # Solving the equation\n    sol = solve(equation, savings)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Since the baskets are identical, we are effectively calculating the partition\n    # of the number 6 into at most 3 parts.\n    # The number of partitions of 6 into at most 3 parts is equal to\n    # the coefficient of x^6 in the expansion of the generating function\n    # (1 + x + x^2 + x^3 + ...) * (1 + x^2 + x^4 + ...) * (1 + x^3 + x^6 + ...)\n    # which simplifies to (1 / (1-x) * (1 / (1 - x^2)) * (1 / (1 - x^3))\n    # We only need to find the coefficient of x^6 in the expansion,\n    # which corresponds to the sum of:\n    # 1. Number of ways to partition 6 into 1 part (which is 1 way, [6])\n    # 2. Number of ways to partition 6 into 2 parts, which are distinct.\n    # 3. Number of ways to partition 6 into 3 distinct parts.\n\n    count = 1  # One way to have all apples in a single basket\n\n    # Two baskets, we need to consider partitions of 6 into two numbers\n    # that are less than or equal to 6 when added up.\n    # Possibilities: [1, 5], [2, 4] - ignoring permutations like [5, 1] or [4, 2]\n    # because baskets are identical.\n    count += 2\n\n    # Three baskets, we need to consider partitions of 6 into three numbers that\n    # are less than or equal to 6 when added up.\n    # Possibilities: [1, 1, 4], [1, 2, 3] - ignoring permutations\n    # because baskets are identical.\n    count += 2\n\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    segment_length = 15\n    remainder = total_length % segment_length\n    return remainder\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    num_matches = (num_teams * (num_teams - 1)) // 2\n    return num_matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N += N\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        workers = day  # Each day the number of workers is the same as the day\n        day_skirts = workers * skirts_per_worker_per_day\n        total_skirts += day_skirts\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    total_animals = 8\n    total_legs = 26\n    # Assume all animals are chickens with 2 legs\n    all_chickens_legs = total_animals * 2\n    \n    # Every cow we add will replace a chicken and thus add 2 extra legs\n    # (since cows have 4 legs and chickens have 2)\n    # The difference between all chickens' legs and total legs gives how many extra legs are present,\n    # which is the number of cows if each cow adds 2 extra legs\n    extra_legs = total_legs - all_chickens_legs\n    cows = extra_legs // 2\n\n    # Subtract number of cows from total animals to get number of chickens\n    chickens = total_animals - cows\n    \n    return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    max_possible_students = total_sweets // min_sweets_per_student\n\n    return max_possible_students\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n    num_range = range(30, 61)  # 60 included as the end is exclusive in range\n\n    sequence_terms = set(range(first_term, max(num_range) + 1, common_difference))\n    numbers_in_sequence = [num for num in num_range if num in sequence_terms]\n\n    return numbers_in_sequence\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    # Start with single-digit numbers: 1-9\n    current_position = 0\n    current_number = 1\n    digit_length = 1\n    \n    # Find the position range for each digit length\n    while True:\n        numbers_with_current_length = 9 * (10 ** (digit_length - 1))\n        digits_with_current_length = numbers_with_current_length * digit_length\n        \n        # If position 2023 is within the current range\n        if current_position + digits_with_current_length >= 2023:\n            break\n        \n        # Move to the next digit length\n        current_position += digits_with_current_length\n        current_number += numbers_with_current_length\n        digit_length += 1\n    \n    # Calculate the exact number that contains the 2023rd digit\n    remaining_digits = 2023 - current_position\n    number_offset, digit_offset = divmod(remaining_digits - 1, digit_length)\n    final_number = current_number + number_offset\n    final_number_str = str(final_number)\n    \n    return int(final_number_str[digit_offset])\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 150000\n    tax_paid = 15000\n    first_50k_tax = 0.08 * 50000\n    remaining_income = income - 50000\n    remaining_tax = tax_paid - first_50k_tax\n\n    # remaining_tax = remaining_income * (0.08 + T/100)\n    equation = Eq(remaining_tax, remaining_income * ((0.08 + T/100)))\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 24  # Woody answered all but one of the 25 questions\n\n    # Let x be the number of correct answers\n    # The number of incorrect answers then is total_questions - x\n    # The score for correct answers is 4x\n    # The score for incorrect answers is -2(total_questions - x)\n    # The total score is the sum of the scores for correct and incorrect answers\n    # 4x - 2(total_questions - x) = 66 points\n    # Solving for x gives us the number of correct answers\n\n    for x in range(total_questions + 1):\n        if 4 * x - 2 * (total_questions - x) == 66:\n            return x\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_football_club = 432\n    minimum_boys_per_day = boys_in_football_club // days_in_january\n    if boys_in_football_club % days_in_january != 0:\n        minimum_boys_per_day += 1\n    return minimum_boys_per_day\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel's and Alice's original amount of candy\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: If Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation 2: If they both eat 8 pieces, Rachel has 3 times what Alice has\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total amount of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Numbers: 0, 2, 3\n\n    # For a three-digit number, the first digit can't be 0\n    # There are 2 possibilities for the first digit (2, 3)\n\n    # For the second digit, there are 3 possibilities (including 0)\n\n    # For the third digit, there are 2 possibilities (excluding the digits used)\n\n    # Multiply the possibilities for each place\n    count = 2 * 3 * 2\n\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_number_of_spaces = 31\n\n    total_length_of_cars = first_car_length + (other_cars_length * number_of_other_cars)\n    total_length_of_spaces = space_between_cars * total_number_of_spaces\n\n    total_length = total_length_of_cars + total_length_of_spaces\n\n    return total_length\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # As given, 105, 120, and 135 are the 7th, 8th, and 9th terms of the arithmetic sequence respectively. \n    # We can find the common difference by subtracting the 7th term from the 8th term.\n    common_difference = 120 - 105\n    \n    # Now that we have the common difference, we can calculate the first term a1 by subtracting 6 times the common difference from the 7th term (because the 7th term is a1 + 6 * d).\n    first_term = 105 - 6 * common_difference\n    \n    # To find the 100th term, we use the formula for the nth term of an arithmetic sequence: an = a1 + (n-1)*d.\n    # where a1 is the first term, d is the common difference, and n is the term number.\n    nth_term = first_term + (100 - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n                total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    initial_chocolates = 5 * 10\n    chocolates_given = 23\n    remaining_chocolates = initial_chocolates - chocolates_given\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    # Define the cards and possible first digits for numbers greater than 5000\n    cards = ['0', '3', '5', '8']\n    valid_first_digits = ['5', '8']  # The number must start with 5 or 8 to be greater than 5000\n\n    valid_numbers = []\n    # Iterate only through permutations where the first digit ensures the number is greater than 5000\n    for first_digit in valid_first_digits:\n        remaining_cards = [c for c in cards if c != first_digit]\n        for perm in permutations(remaining_cards):\n            # Concatenate the first digit with the permutation of the remaining cards\n            number_str = first_digit + ''.join(perm)\n            valid_numbers.append(int(number_str))\n    \n    # Count the valid numbers\n    ans = len(valid_numbers)\n    return ans\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    # The cost of one packet of biscuits in pounds\n    cost_per_biscuit_packet = 0.73\n    # The cost of one large cake in pounds\n    cost_per_large_cake = 1.13\n\n    # Total cost for biscuits\n    total_biscuit_cost = 7 * cost_per_biscuit_packet\n    # Total cost for large cakes\n    total_cake_cost = 9 * cost_per_large_cake\n\n    # Total cost\n    total_cost = total_biscuit_cost + total_cake_cost\n    \n    # Amount Malcolm has (£20)\n    malcolm_money = 20\n\n    # Change Malcolm will receive\n    change = malcolm_money - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_factor = 1/5\n    original_length = current_length / (1 + growth_factor)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Peter had at first\n    x = symbols('x')\n\n    # Sam had 40 stickers more than Peter\n    sam = x + 40\n\n    # Sam gave 20% of his stickers to Peter\n    peter_after_giving = x + 0.20 * sam\n\n    # Peter gave 25% of his new total to Sam\n    sam_after_getting = sam - 0.20 * sam + 0.25 * peter_after_giving\n\n    # In the end, Sam had 96 stickers more than Peter after giving\n    peter_after_getting = peter_after_giving - 0.25 * peter_after_giving\n\n    # Equation representing the difference after transactions\n    equation = Eq(sam_after_getting - peter_after_getting, 96)\n\n    # Solve the equation\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n\n    combinations = tops * bottoms\n\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('2:50 PM', '%I:%M %p')\n    total_time_before_lunch = timedelta(minutes=(10 + 20 + 20))  # 10 for playing, 20 for TV, 20 for lunch\n    home_arrival_time = lunch_end_time - total_time_before_lunch\n    return home_arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial as fact\n\ndef solution():\n    # Define function to calculate permutations: nPr\n    def nPr(n, r):\n        return fact(n) // fact(n - r)\n\n    # Calculate the number of 3-digit numbers that can be formed with 4 digits\n    # 3-digit numbers can be formed by excluding any one of the 4 digits and arranging the remaining 3 digits\n    num_of_3_digit_numbers = 4 * nPr(3, 3)\n\n    # Calculate the number of 4-digit numbers that can be formed with 4 digits\n    # Since 0 cannot be the first digit, the first digit can be selected in 3 ways and remaining 3 digits can be arranged in 3! ways\n    num_of_4_digit_numbers_1 = 3 * nPr(3, 3)  # When 0 is excluded from being the first digit\n\n    # When 0 is included and is not the first digit, all 4 digits can be used\n    num_of_4_digit_numbers_2 = nPr(4, 4) - num_of_4_digit_numbers_1  # Subtract the case where 0 is the first digit\n\n    # Sum the numbers of 3-digit and 4-digit numbers that can be formed using each of the 4 digits from 2017 at most once.\n    ans = num_of_3_digit_numbers + num_of_4_digit_numbers_2\n\n    return ans\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    return 6.5 / 0.5\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    n = 14\n\n    last_term = first_term + (n - 1) * common_difference\n    sum_of_terms = (n * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    nines, pages, multiplier = 0, 0, 1\n    while nines < 181:\n        pages += 1\n        temp_pages = pages\n        while temp_pages > 0:\n            if temp_pages % 10 == 9:\n                nines += 1\n            temp_pages //= 10\n            if nines == 181:\n                return pages\n        if pages // (multiplier * 10) > 0:\n            multiplier *= 10\n            nines += multiplier\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Jason sells 10 more than half of his crystals to Yvonne\n    sold_to_yvonne = (initial_crystals / 2) + 10\n    # Jason mines 20 more crystals in Singapore\n    mined_in_singapore = 20\n    # Jason sells 14 crystals to Cherlyn\n    sold_to_cherlyn = 14\n    # Jason has 35 crystals in the end\n    final_crystals = 35\n\n    # Set up the equation based on the information given\n    equation = Eq(initial_crystals - sold_to_yvonne + mined_in_singapore - sold_to_cherlyn, final_crystals)\n\n    # Solve the equation for the initial number of crystals\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_length = 1 + 2 + 2  # black, white, grey\n    grey_pattern_ratio = 2 / pattern_length\n\n    total_rabbits = grey_rabbits / grey_pattern_ratio\n\n    return int(total_rabbits)\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '5', '8']\n    distinct_three_digit_numbers = set()\n\n    # Generate all permutations of the three different digits\n    for perm in permutations(digits, 3):\n        # Skip permutations where the first digit is '0', as we want a three-digit number\n        if perm[0] != '0':\n            number = int(''.join(perm))\n            distinct_three_digit_numbers.add(number)\n\n    # Find the smallest and largest numbers\n    smallest_number = min(distinct_three_digit_numbers)\n    largest_number = max(distinct_three_digit_numbers)\n\n    # Calculate the difference between the largest and smallest numbers\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    import math\n    students_A = 12\n    students_B = 15\n    students_C = 18\n    \n    gcd_AB = math.gcd(students_A, students_B)\n    gcd_ABC = math.gcd(gcd_AB, students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    factor_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 9 == 0:\n            factor_count += 1\n    return factor_count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return int(total_age)\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "def solution():\n    # There are 3 choices for the thousands digit (1, 3, or 4 - can't be 2 because the number must be even)\n    thousands_digit = 3\n    # There are 2 choices for the hundreds digit after choosing the thousands digit\n    hundreds_digit = 2\n    # There is 1 choice for the tens digit after choosing the first two digits\n    tens_digit = 1\n    # There is only 1 choice for the ones digit; it has to be 2 to make the number even\n    ones_digit = 1\n    # The total number of passwords is the product of the number of choices for each digit \n    # following the multiplication principle\n    return thousands_digit * hundreds_digit * tens_digit * ones_digit\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # According to the divisibility rule for 9, the sum of the digits must be divisible by 9\n    # Sum of the given number's digits excluding 'a' is 2 + 6 + 5 + 3 + 9 = 25\n    sum_excluding_a = 25\n\n    # Try all possible digits for 'a' from 0 to 9\n    for a in range(10):\n        total_sum = sum_excluding_a + a\n        if total_sum % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    total_stickers = 100\n    equation = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, total_stickers)\n    \n    solutions = solve((equation, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_price = price_per_box * number_of_boxes\n    return total_price\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Conversion from Pounds to Pence, 1 Pound = 100 Pence\n    budget_pence = 2 * 100\n\n    # Cost per sweet if bought individually\n    cost_single = 12\n\n    # Cost for three sweets if bought in a set\n    cost_for_three = 30\n\n    # Maximum number of sweets that can be bought in sets of three within the budget\n    sets_of_three = budget_pence // cost_for_three\n    \n    # Remaining budget after buying sets of three\n    remaining_budget = budget_pence % cost_for_three\n    \n    # Additional sweets that can be bought with the remaining budget\n    additional_sweets = remaining_budget // cost_single\n    \n    # Total number of sweets that can be bought\n    total_sweets = (sets_of_three * 3) + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    # Let's denote May's current age as m, which is 7\n    m = 7\n    # Let's denote Kenny's younger brother's age as b\n    # and Kenny's age as k. We know that k = b + 2\n    # We are given that when May is 10, the sum of the ages\n    # of Kenny and his younger brother will be 3 times May's age (i.e., 3 * 10).\n    # So, we have the equation: (k + 3) + (b + 3) = 3 * (m + 3)\n    \n    # We can simplify this equation by substituting k with (b + 2)\n    # (b + 2 + 3) + (b + 3) = 3 * (m + 3)\n    # 2b + 8 = 3m + 9\n    \n    # We know that m is 7, so we can plug in that value:\n    # 2b + 8 = 3 * 10\n    # 2b + 8 = 30\n    # 2b = 30 - 8\n    # 2b = 22\n    # b = 11\n    # Now that we know b, Kenny's age k is b + 2, which equals 11 + 2\n    k = 11 + 2\n    \n    # To find out how much older Kenny is than May this year,\n    # we subtract May's age from Kenny's age:\n    ans = k - m\n\n    return ans\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # We can use the stars and bars method to calculate the number of ways\n    # to put n identical balls into k different boxes is comb(n+k-1, k-1)\n    # Since we want at least one ball in each box, we can think of it as\n    # putting 10 balls into 7 boxes, but first, we put one ball into each\n    # box, leaving us with 10 - 7 = 3 balls to distribute.\n    balls = 10 - 7\n    boxes = 7\n    return comb(balls + boxes - 1, boxes - 1)\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # To win, Felix needs to ensure that he always puts John in a position\n    # where the remaining candy can be finished on Felix's next turn.\n    # This means Felix wants to always face a situation where the number of candies\n    # is one more than a multiple of 3 (because each can eat 1 or 2 candies).\n    # To make this strategy work, Felix must go first and eat 1 candy.\n    # Then no matter whether John eats 1 or 2 candies, Felix will make the total eaten candies\n    # become a multiple of 3 by eating 2 or 1 candies respectively (opposite of John's move).\n    # Eventually, this will lead to Felix winning by eating the last candy.\n    # Felix should start first and eat 1 candy, then always play to make\n    # the total number of candies eaten a multiple of 3 after his turn.\n\n    return \"Felix should go first and eat 1 candy, then ensure the total candies eaten is a multiple of 3 after each turn.\"\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 5\n    total_length = 305\n\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) if total_length % pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the total number of liters needed to fill the fish tank.\n    # Equation 1: If Mr Nelson uses a 5-litre pail, x = 5n + 4, where n is the number of pails.\n    # Equation 2: If he uses a 3-litre pail, x = 3(m - 4), where m is the number of pails and he needs 4 more pails.\n    # Since both equations represent the total volume of the tank, they are equal.\n    # 5n + 4 = 3(m - 4)\n    # Now we find a common multiple of 3 and 5 which is 15, and we know that the surplus from the 5-litre pail\n    # and the shortage of the 3-litre pail should also sum up to a multiple of 15:\n    # Surplus of 4 litres when using the 5-litre pails implies that the number of pails is one less than a multiple of 3.\n    # Shortage of 4 litres when using the 3-litre pails (needing 4 more pails) implies that the number of pails is actually one more than a multiple of 5.\n    # Therefore, we are looking for a volume x which is 4 less than a multiple of 5 and also 4 more than a multiple of 3.\n    # After trying various multiples, we find that 44 satisfies this condition as 44 is 4 less than 48 (a multiple of 5) and 4 more than 40 (a multiple of 3).\n    # Thus, 44 litres of water are needed.\n\n    return 44\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        times_underlined = 0\n        if number % 2 == 0:\n            times_underlined += 1\n        if number % 3 == 0:\n            times_underlined += 1\n        if number % 4 == 0:\n            times_underlined -= 1  # because multiples of 4 were already counted in multiples of 2\n        if times_underlined == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 28:\n        if '3' in str(page):\n            count += str(page).count('3')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    # Total amount originally possessed by Zoey in cents\n    total_amount = 50 + 20 + 10 + 5\n    \n    # Coins available to Zoey\n    coins = [50, 20, 10, 5]\n    \n    # Iterate through each coin type to find out which one she lost\n    for coin in coins:\n        if (total_amount - coin) % 2 == 0 and (total_amount - coin) // 2 not in coins:\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # The sum of the 4 numbers with an average of 36, 38, 39, 45, 49 are:\n    sum_36 = 36 * 4\n    sum_38 = 38 * 4\n    sum_39 = 39 * 4\n    sum_45 = 45 * 4\n    sum_49 = 49 * 4\n    \n    # The total sum for all 5 numbers\n    total_sum = sum_36 + sum_38 + sum_39 + sum_45 + sum_49\n    \n    # The sum of each number occurs 4 times\n    # Subtract the sum of 4 numbers (total_sum) from 4 times the grand total (grand_total) to find the 5th number\n    total_sum_4_numbers = total_sum - (sum_36 + sum_38 + sum_39 + sum_45)\n    grand_total = sum_49 * 5  # Since the largest average is 49, the largest number must be part of this average\n    \n    # Find the largest number\n    largest_number = grand_total - total_sum_4_numbers\n    \n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # convert 16.35 to minutes\n\n    # You arrive 4 minutes after the first bus, so add 4 minutes to the first bus time\n    arrival_time = first_bus_time + 4  \n\n    # The wait time is the time from when you arrive until the second bus leaves\n    wait_time = second_bus_time - arrival_time  \n\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let's assume the original number of boys is b\n    # Therefore, original number of girls is 152 - b\n    # After removing 1/11 of boys and 5 girls, numbers become equal\n    # So, b - (1/11)*b = (152 - b) - 5\n    # Simplifying the equation, we get:\n    # 10/11 * b = 147 - b\n    # Solving for b gives us the original number of boys\n    b = (147 * 11) / (11 + 10)\n    \n    return int(b)\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    # Since each tree occupies one point along the road and there's 5m between each two trees,\n    # the total distance occupied by trees and gaps would be equal to the length of the road minus\n    # the last gap (because there's no gap after the last tree).\n    # If the distance between every two trees is 5m, and the road is 40m long,\n    # then the total number of 5m segments (trees + gaps) we can fit in 40m is:\n    # 40m / 5m per segment, but we need to add 1 because the count of trees is always one more\n    # than the count of gaps in between them.\n    total_trees = (40 // 5) + 1\n    return total_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "import math\n\n\ndef solution():\n    workers = 70\n    lorry_capacity = 8\n\n    num_lorries = math.ceil(workers / lorry_capacity)\n\n    return num_lorries\n\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days_avg = 20\n    next_four_days = next_four_days_avg * 4\n    last_two_days = 60\n\n    total_pages = first_three_days + next_four_days + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We are looking for a number that leaves a remainder of 3 when divided by 4, 5, and 9.\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Applying the Chinese Remainder Theorem to find the least positive solution that satisfies all congruences.\n    number, _ = solve_congruence(*congruences)\n\n    # Iterating through the numbers to find the one less than 200\n    while number < 200:\n        if 99 < number < 200:  # since the number is a positive three-digit number\n            return number\n        # Add the product of the moduli to check the next possibility\n        number += 4 * 5 * 9\n\n    return None\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let the total number of students be x\n    # if 4 students live in one room, x % 4 = 6 (since there are 6 students left without a room)\n    # if 5 students live in one room, (x+1) % 5 = 0 (since there is 1 room left without students)\n    # We are looking for a number x that satisfies both of these conditions\n    \n    x = 0\n    while True:\n        if (x % 4 == 6) and ((x + 1) % 5 == 0):\n            break\n        x += 1\n    return x\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill = 70\n    grandsons = [6, 12, 18]\n    \n    while True:\n        bill += 1\n        grandsons = [age + 1 for age in grandsons]\n        if bill == sum(grandsons):\n            return bill\n    \nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_after_removal = 6 * 10\n    removed_number = total_initial - total_after_removal\n    \n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    leaving_people = total_people / 3\n    remaining_people = total_people - leaving_people\n    return int(remaining_people)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    # Find least common multiple of the three intervals\n    lcm_intervals = lcm(interval_a, interval_b, interval_c)\n    \n    # Find the next time by adding lcm to the starting time of 10:00 am\n    starting_hour = 10\n    starting_minute = 0  # 10:00 am\n    \n    total_minutes_next_arrival = starting_minute + lcm_intervals\n    hours_next_arrival = total_minutes_next_arrival // 60\n    minutes_next_arrival = total_minutes_next_arrival % 60\n\n    # The final time is 10:00 am plus hours_next_arrival and minutes_next_arrival\n    next_arrival_hour = starting_hour + hours_next_arrival\n    next_arrival_minute = minutes_next_arrival\n        \n    # Format the next arrival time\n    if next_arrival_minute < 10:\n        next_time = f\"{next_arrival_hour}:0{next_arrival_minute}\"\n    else:\n        next_time = f\"{next_arrival_hour}:{next_arrival_minute}\"\n\n    # Return the final result in the format specified\n    ans = next_time\n    return ans\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_deduction = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        total_score = correct_answers * correct_mark + wrong_answers * wrong_deduction\n        if total_score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # According to the inclusion-exclusion principle:\n    # At least one sport: swimmers + cyclists + table_tennis_players\n    # Subtract twice the sum of students doing at least two sports, because they are counted twice in the earlier sum\n    # Add the students playing all three sports, because they were subtracted out previously\n\n    # The minimum number of students playing all three sports happens when the overlaps between two sports are maximized,\n    # Since we have more students playing any sports than the total number of students, we need to find the overcount:\n\n    max_two_sports_overlap = (swimmers + cyclists + table_tennis_players) - total_students\n\n    # If all the overcounted students played exactly in two sports, the minimum number playing in all three sports\n    # would be this overcount minus the maximum possible double overlap:\n\n    max_possible_double_overlap = (swimmers + cyclists + table_tennis_players) - 3 * total_students\n\n    # The students playing all three sports at least include the double overlaps subtracted once\n    all_three_sports_min = max_two_sports_overlap - max_possible_double_overlap\n\n    return all_three_sports_min\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # seconds\n    length_of_train = 360  # meters\n    speed_of_train = length_of_train / time_to_pass_tree  # meters per second\n    \n    # Convert speed to meters per hour\n    speed_of_train_mph = speed_of_train * 3600 / 1000  # kilometers per hour\n    return speed_of_train_mph\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance - day_distance:\n        days += 1\n        current_distance += net_distance\n    \n    # The final climb happens on the following day, hence increment by 1\n    return days + 1\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # There are 12+9+8+3 = 32 total marbles, but we care about the worst case scenario\n    # to ensure 4 different colors. In the worst case we could pick all of one color\n    # then all of another, and then all of another, and we would still not have all\n    # different colors.\n    # After this, the next marble we pick has to be of the fourth color to make sure\n    # we have 4 different colors. So we need to consider the largest counts of three colors\n    # and add 1 to get the number of picks to guarantee 4 different colors.\n\n    # Sort the number of marbles for each color\n    marbles = sorted([12, 9, 8, 3], reverse=True)\n\n    # Sum the largest counts of three colors and add 1\n    worst_case_picks = sum(marbles[:3]) + 1\n\n    return worst_case_picks\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for people in range(1, 100):  # Trying a reasonable range for number of people\n        if (10 + people // 2) % people == 24 % people:\n            return people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percent = 20\n    books_stationery = (books_stationery_percent / 100) * pocket_money\n\n    food_to_transport_ratio = 3\n    savings_less_than_food = 6\n\n    # Let's denote transport cost as x\n    # Then food cost will be 3 * x\n    # Savings will be (3 * x) - 6\n    # Total expenditure is the sum of books_stationery, transport, food, and savings\n    # 80 = books_stationery + x + 3*x + ((3*x) - 6)\n    # 80 = books_stationery + 7*x - 6\n\n    # Solving for x gives us the transport cost\n    transport = (pocket_money - books_stationery + 6) / 7\n    food = 3 * transport\n    savings = food - savings_less_than_food\n\n    # The percentage of pocket money that goes to savings is \n    savings_percent = (savings / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    # List of factors of 66\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n\n    # List of possible ages for Meiling\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    \n    # Assuming there is only one valid age that fits the criteria.\n    age_this_year = possible_ages[0]\n\n    return age_this_year\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    import math\n    a = 24\n    b = 64\n    ans = a * b // math.gcd(a, b)\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    # Initialize the count of numbers\n    count = 0\n    \n    # Create a list of digits that can be used to form the numbers\n    digits = ['1', '2', '3', '4', '5', '6']\n    \n    # Count numbers in the range 3267-3999\n    for thousand in ['3']:\n        for hundred in [d for d in digits if d != thousand]:\n            for ten in [d for d in digits if d not in (thousand, hundred)]:\n                for one in [d for d in digits if d not in (thousand, hundred, ten)]:\n                    number = int(thousand + hundred + ten + one)\n                    if 3267 <= number <= 3999:\n                        count += 1\n    \n    # Count numbers in the range 4000-4999\n    for thousand in ['4']:\n        for hundred in [d for d in digits if d != thousand]:\n            for ten in [d for d in digits if d not in (thousand, hundred)]:\n                for one in [d for d in digits if d not in (thousand, hundred, ten)]:\n                    number = int(thousand + hundred + ten + one)\n                    if 4000 <= number <= 5120:\n                        count += 1\n\n    # Count numbers in the range 5000-5120\n    for thousand in ['5']:\n        for hundred in [d for d in digits if d != thousand]:\n            for ten in [d for d in digits if d not in (thousand, hundred)]:\n                for one in [d for d in digits if d not in (thousand, hundred, ten)]:\n                    number = int(thousand + hundred + ten + one)\n                    if 5000 <= number <= 5120:\n                        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    two_digit_factors = [i for i in factors_of_75 if 10 <= i <= 99 and i % 6 == 3]\n\n    return two_digit_factors[0] if two_digit_factors else None\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    correct_subtrahend = 14\n    incorrect_result = 50\n\n    # Find the minuend Little Miss Careless used to get the incorrect result\n    minuend = incorrect_result + incorrect_subtrahend\n    \n    # Calculate the correct difference using the correct subtrahend\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - 2*i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # 5 apples each for 4 sisters\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount_after_4_years = 7320.5\n    years = 4\n\n    # A = P(1 + r/n)^(nt), for n=1 (compounded annually)\n    # 7320.5 = 5000(1 + r)^4\n    # (1 + r)^4 = 7320.5 / 5000\n    # 1 + r = ((7320.5 / 5000) ** (1/4))\n\n    interest_rate = ((amount_after_4_years / principal) ** (1 / years)) - 1\n\n    return interest_rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for i in range(1, 31):\n        initial_soldiers = i * i\n        final_soldiers = (i + 1) * (i + 1)\n        if final_soldiers - initial_soldiers == 31:\n            return final_soldiers\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    result = 21 * 3 // 56\n    return result\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 6.77 + 8.88 \n    \n    ans = (a * b) - (a + 6.3) * c\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10    # in minutes\n    total_time_available = 80    # one hour and twenty minutes in minutes\n\n    pictures_painted = total_time_available // time_for_one_picture\n\n    return pictures_painted\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = symbols('P')  # Principal amount to find\n    r = 0.08  # Annual interest rate\n    t = 4  # Time in years\n    A = 924  # Amount after t years\n\n    equation = Eq(P * (1 + r)**t, A)  # Compound interest formula A = P(1 + r)^t\n    principal = solve(equation, P)  # Solve for P\n\n    return principal[0]\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Considering there are 6 children including Ann and each of them has to get at least one apple,\n    # we give 1 apple each to the other five children to satisfy the condition.\n    \n    apples_to_others = 5  # 1 apple each to the other five children\n    # Subtracting the apples given to other children from the total apples,\n    # we calculate the remaining apples that Ann can possibly get.\n    ann_apples = 30 - apples_to_others  \n    \n    return ann_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = \"1356789\"\n    \n    for perm in permutations(digits):\n        first_number = int(\"\".join(perm[:3]))\n        second_number = int(\"\".join(perm[3:5]))\n        third_number = int(\"\".join(perm[5:]))\n        \n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors, prod\n\n    # The highest common factor is 75, which means both M and N have 3^1 * 5^2 in their prime factorization\n    # M has 12 factors and N has 10 factors\n    # For M and N to have the given number of factors, their prime factorizations would have to be of the form:\n    # M = 3^a * 5^b, N = 3^c * 5^d with the constraints that (a+1)(b+1) = 12 and (c+1)(d+1) = 10\n\n    # Since they both share 3^1 * 5^2, we can start with that as a given\n    common_factors = [3, 5, 5]\n\n    # Finding all possible (a, b) combinations for M\n    M_factors_combinations = [(a, b) for a in range(1, 13) for b in range(1, 13) if (a + 1) * (b + 1) == 12]\n\n    # Finding all possible (c, d) combinations for N\n    N_factors_combinations = [(c, d) for c in range(1, 11) for d in range(1, 11) if (c + 1) * (d + 1) == 10]\n\n    # Filtering combinations for M and N that contain only the prime factors 3 and 5\n    M_factors_combinations = [(a, b) for (a, b) in M_factors_combinations if a % 3 != 2 and b % 3 != 2]\n    N_factors_combinations = [(c, d) for (c, d) in N_factors_combinations if c % 3 != 2 and d % 3 != 2]\n    \n    # Since M and N share 3^1 * 5^2, we need to subtract those from a, b and c, d before calculating M and N\n    valid_M_factors = [(a - 1, b - 2) for (a, b) in M_factors_combinations]\n    valid_N_factors = [(c - 1, d - 2) for (c, d) in N_factors_combinations]\n    \n    # Now we construct M and N from the valid combinations\n    M_values = [prod([3] * a + [5] * b) for (a, b) in valid_M_factors]\n    N_values = [prod([3] * c + [5] * d) for (c, d) in valid_N_factors]\n    \n    # We then calculate the sum of M and N, noting that there should only be one valid pair\n    for m in M_values:\n        for n in N_values:\n            if len(divisors(m)) == 12 and len(divisors(n)) == 10:\n                return m + n\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    num_shirts = 3\n    num_pants = 2\n    num_dresses = 3\n    num_shoes = 4\n    num_heels = 2\n\n    # Outfits with blouse and pants paired with shoes\n    outfits_with_pants = num_shirts * num_pants * num_shoes\n\n    # Outfits with dress paired with shoes or heels\n    outfits_with_dress = num_dresses * (num_shoes + num_heels)\n\n    ans = outfits_with_pants + outfits_with_dress\n    return ans\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    eq1 = Eq(A + B, 13)\n    eq2 = Eq(A + C, 25)\n    eq3 = Eq(C, 3 * B)\n\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n    \n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    total_mass_g += total_mass_kg * 1000  # convert total mass to grams\n    soil_mass_g += soil_mass_kg * 1000    # convert soil mass to grams\n\n    sand_mass_g = total_mass_g - soil_mass_g  # find the sand mass in grams\n\n    difference_g = abs(soil_mass_g - sand_mass_g)  # find the difference in grams\n\n    return difference_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons James originally has.\n    # Nina has 22 - x buttons originally.\n    # After Nina gives 4 buttons to James, they both have the same number.\n    # James will then have x + 4 buttons, and Nina will have 22 - x - 4 buttons.\n\n    # Set up the equation where both have the same number of buttons after the transfer.\n    # x + 4 = 22 - x - 4\n    # Solve the equation for x.\n    x = (22 - 4)//2    \n\n    # Nina's original number of buttons is 22 - x.\n    nina_original = 22 - x\n\n    return nina_original\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum([sum([1/i for i in range(1, j+1)]) for j in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_score = 4\n    incorrect_deduction = -2\n    total_score = 29\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * correct_score + incorrect * incorrect_deduction\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = 5\n    num_repetitions = 52 // pattern_length\n    remaining_digits = 52 % pattern_length\n\n    pattern_sum = sum(range(1, pattern_length + 1))\n    total_sum = pattern_sum * num_repetitions + sum(range(1, remaining_digits + 1))\n\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_amount = 4.8\n    paper_per_kite = 0.36\n    kites = paper_amount / paper_per_kite\n    return int(kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    road_length = 320\n\n    distance_between_each_tree = road_length / (total_trees + 1)\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen traded 10 fish for 4 rabbits, which means the ratio is 10 fish / 4 rabbits\n    fish_to_rabbits_ratio = 10 / 4\n\n    # Oscar traded 5 rabbits for 6 packs of wheat, so the ratio is 5 rabbits / 6 packs of wheat\n    rabbits_to_wheat_ratio = 5 / 6\n\n    # To find fish to packs of wheat ratio, multiply fish_to_rabbits_ratio by rabbits_to_wheat_ratio\n    fish_to_wheat_ratio = fish_to_rabbits_ratio * rabbits_to_wheat_ratio\n\n    # Owen needs to get 12 packs of wheat, so we can use the fish_to_wheat_ratio to calculate\n    fish_for_12_wheat = fish_to_wheat_ratio * 12\n\n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod_length = Fraction(54, 5)  # 10 4/5 meters as an improper fraction\n    short_rod_length = Fraction(3, 10)\n\n    number_of_short_rods = long_rod_length // short_rod_length\n\n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_quantity = 30\n    required_quantity = 20\n    \n    total_cost_without_deal = single_laptop_cost * required_quantity\n    cost_per_laptop_on_deal = deal_cost / deal_quantity\n    total_cost_with_deal = cost_per_laptop_on_deal * required_quantity\n    \n    savings = total_cost_without_deal - total_cost_with_deal\n    \n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # There will be exactly 3 slots for singing performances between the 4 dancing performances, \n    # and 3 additional slots either at the beginning, between, or at the end. \n    # So we choose 3 singing performances to place between the dancing ones from the 6 available.\n    songs_between_dances = factorial(6) // (factorial(3) * factorial(6 - 3))\n    \n    # The remaining 3 singing performances and the 4 dancing performances can be arranged in any order. \n    # This amounts to 7 slots to fill with either type of performance.\n    total_slots = 3 + 4\n    remaining_performances_arrangement = factorial(total_slots)\n    \n    # The combined number of arrangements is the product of choosing the singing performances and arranging the remaining.\n    count = songs_between_dances * remaining_performances_arrangement\n    \n    return count\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n\n    # Equation representing fish left when each penguin gets 3 fish\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    # Solve for penguins\n    number_of_penguins = solve(equation1, penguins)\n\n    return number_of_penguins[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    \n    total_earnings = hourly_wage * hours_worked\n    \n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    mistakenly_subtracted = 26\n    correct_operation = 26\n\n    actual_number = incorrect_result + mistakenly_subtracted\n    correct_result = actual_number + correct_operation\n\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Loop over all possible scores for one team at halftime (0 to 3)\n    for team1_half in range(4):\n        # Loop over all possible scores for the other team at halftime (0 to 2)\n        for team2_half in range(3):\n            # The score at halftime can't be greater than the final score\n            if team1_half <= 3 and team2_half <= 2:\n                # Both teams can score at most (final score - halftime score) goals in the second half\n                if 3 - team1_half >= 0 and 2 - team2_half >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    result = 689 / 13\n    return result\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    cards_lost = original_cards * (3 / 8)\n    return cards_lost\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys in the class.\n    g, b = symbols('g b', integer=True)\n    \n    # 3/8 of the girls can swim, so 5/8 cannot.\n    # 3/5 of the boys can swim, so 2/5 cannot.\n    # 20 pupils in total cannot swim; 10 girls and 10 boys cannot swim (equal number).\n    equation1 = Eq(5/8 * g, 10)\n    equation2 = Eq(2/5 * b, 10)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Total number of pupils in class\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    weight_full = 80\n    weight_half_full = 60\n    weight_mangoes_half_full = weight_half_full - weight_full / 2\n    weight_empty_basket = weight_full - 2 * weight_mangoes_half_full\n    return weight_empty_basket\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85\n    total_amount = 400\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Mike's position is second no matter how you count.\n    # This means that Mike is positioned in a corner of the classroom,\n    # and he can be the second in the row or the column.\n    # Since the exact length and width of the array are not given, \n    # we must consider all possible lengths and widths that satisfy the condition.\n\n    # Let's denote the number of desks (length of rectangular array) by 'l'\n    # and the number of chairs (width of the rectangular array) by 'w'. \n    # The total number of students would be 'l*w'.\n\n    # We are looking for all combinations of 'l' and 'w' such that:\n    # - l > 1 and w > 1, since Mike must be second in line from any side.\n    # - All students can form a large rectangle (l * w must be an integer).\n\n    # We can start with the assumption that the minimum size of the array is 2x2,\n    # which gives us 4 students, and increase the size looking for other possibilities.\n    # Given that one of the dimensions must be 2 (to satisfy Mike's second in line condition),\n    # we can iterate over possible lengths to find all configurations where the width would be 2.\n\n    students = set()\n    length = 2\n    while True:\n        # Check if 'length' leads to a valid configuration with width 2\n        width = 2\n        total = length * width\n        if total not in students:\n            students.add(total)\n        # Check if 'width' leads to a valid configuration with length 2\n        # (since it's the symmetric case, it always leads to the same number)\n        # We don't need to check it separately.\n\n        # The only way to exit the loop would be to have an upper bound to the classroom size,\n        # which we don't have, so we have to stick to the idea that there are infinite solutions.\n        # However, the problem likely assumes a reasonable classroom size that we need to adhere to.\n        \n        # Without an upper bound, the number of possible configurations would, in theory, be infinite\n        # since Mike's condition (second in line) can always be satisfied for any rectangular array \n        # where one side length is 2 (2, 2*2, 2*3, 2*4, ...).\n\n        # For demonstration purposes, let's say we consider the problem only up to a certain limit;\n        # for example, a classroom can't be larger than 100 in width or length (just as a stopping condition).\n        if length > 100:  # Stopping at an arbitrary upper limit to prevent an infinite loop.\n            break\n\n        length += 1  # Increase the length to check the next possible configuration.\n\n    return len(students)\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    sweets_left_for_bud = 16\n    fraction_bud = 2/5 # Bud had the remaining 2/5 since Pip had 3/5\n\n    total_sweets = sweets_left_for_bud / fraction_bud\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    ans = (result * 100) / 40\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost = cost_per_cup * 5\n    return total_cost\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    rabbits_in_big = big_houses * 4\n    \n    rabbits_in_small = total_rabbits - rabbits_in_big\n    rabbits_per_small_house = rabbits_in_small / small_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 9, 2))\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * number_of_months\n    \n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23\n    product = total_sum // (2 * 3)\n    return product\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, ryan = symbols('abigail ryan')\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables\n    drink, popcorn = symbols('drink popcorn')\n\n    # Define the equations based on the problem\n    equation1 = Eq(drink + popcorn, 90)    # 90p = £0.90\n    equation2 = Eq(2 * drink + popcorn, 145)  # £1.45 = 145p\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n\n    last_multiple = (92 // 4) * 4\n\n    ans = (last_multiple - first_multiple) // 4 + 1\n    return ans\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return int(ans)\n        ans += 3 * 4 * 5  # the least common multiple of the moduli\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # Number of steps Daniel needs to reach\n    n = 6\n    # Ways to reach each step\n    # Initialize base cases: 0 ways to reach step 0, 1 way to reach step 1\n    ways = [0] * (n + 1)\n    ways[0], ways[1] = 1, 1\n\n    # Since Daniel can only climb 1, 2, or 3 steps at a time\n    # The number of ways to reach the current step is the sum of the ways\n    # to reach the previous three steps.\n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n\n    return ways[n]\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_seq)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1)**((i-1) // 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base_ones_digit = 9\n    power = 99\n    ones_digit_cycle = [base_ones_digit**i % 10 for i in range(1, 5)] # Finds cycle of ones digits for powers of 9.\n    cycle_length = len(ones_digit_cycle)\n    index = (power - 1) % cycle_length # The ones digit pattern of powers of 9 repeats every 4. Get the index for 99th power.\n    ones_digit = ones_digit_cycle[index]\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assumption: Claire's current age is a symbol\n    claires_age = symbols('claires_age')\n\n    # Equation representing the relationship between Claire's age now and in 6 years\n    equation = Eq(claires_age + 6, 3 * claires_age)\n\n    # Solving for Claire's current age\n    claires_current_age = solve(equation, claires_age)[0]\n\n    # Claire's age two years from now\n    return claires_current_age + 2\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    actual_time, expected_time = symbols('actual_time expected_time')\n    \n    equation1 = Eq(actual_time, expected_time * 11/12)\n    equation2 = Eq(actual_time - (15 - 5), expected_time)\n    \n    solutions = solve((equation1, equation2), (actual_time, expected_time))\n    \n    return solutions[expected_time]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    return (4/15) - (7/10) + (11/15) - (3/10)\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # UK currency coin denominations in pence.\n    coin_denominations = [1, 2, 5, 10, 20, 50, 100, 200]\n\n    # Susan's bus fare.\n    bus_fare = 44\n\n    # Variable to track the smallest number of coins.\n    smallest_number_of_coins = 0\n\n    # Start with the largest coin and work down.\n    for coin in reversed(coin_denominations):\n        # If the coin value is less than bus fare, use as many as possible.\n        while bus_fare >= coin:\n            bus_fare -= coin\n            smallest_number_of_coins += 1\n\n    # If there's still bus fare left, add a coin for it.\n    if bus_fare > 0:\n        smallest_number_of_coins += 1\n\n    return smallest_number_of_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # We are going to use the pigeonhole principle to figure out the maximum\n    # number of marbles Jane needs to draw to ensure she has all four colors.\n\n    # Worst case scenario, she could draw all but one of the colors completely\n    # before getting any of the last color.\n    # Thus we need to add up the maximum amounts of the other three colors\n    # and then add one more to guarantee the fourth color.\n    \n    max_other_three = red + green + blue - 3 # Subtracting one from each color (except the least)\n    ans = max_other_three + 1 # Adding one to ensure we have the fourth color\n    \n    return ans\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    climb_per_day = 3\n    slide_per_night = 1\n\n    # The effective climb distance in a day (day + night)\n    effective_climb = climb_per_day - slide_per_night\n\n    # The snail reaches 3 meters below the top and climbs out on the next day\n    days_to_reach_near_top = (total_distance - climb_per_day) // effective_climb\n\n    # Adding the final day when the snail climbs out\n    if (total_distance - climb_per_day) % effective_climb == 0:\n        # If there is no remainder, it doesn't slip back on the last day\n        days_to_climb_out = days_to_reach_near_top + 1\n    else:\n        # If there is a remainder, it climbs out on the next day\n        days_to_climb_out = days_to_reach_near_top + 2\n\n    return days_to_climb_out\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import comb\n\ndef solution():\n    # There are 19 books and 4 kids.\n    # We want to find the number of ways to distribute the books such \n    # that each kid gets at least one book.\n    # We first give each kid 1 book to satisfy the condition.\n    # This leaves us with 19 - 4 = 15 books to distribute freely.\n    # We can treat this as a problem of partitioning 15 objects into 4\n    # compartments, which is equivalent to the problem of placing 3 dividers\n    # in the 15 gaps between the books.\n    # This is \"15 choose 3\" (since we are choosing where to place the 3 dividers).\n    \n    books_left = 19 - 4  # Distributing one book to each kid\n    dividers = 4 - 1  # 3 dividers between the kids\n    num_ways = comb(books_left + dividers, dividers)\n\n    return num_ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    # Let m represent the number of motorbikes (each with 2 wheels)\n    # Let t represent the number of tricycles (each with 3 wheels)\n    # Let v represent the number of vans (each with 4 wheels)\n    m, t, v = symbols('m t v')\n    \n    # Create equations based on the problem statement\n    # Total wheels from motorbikes and vans - total wheels from tricycles = 35\n    equation1 = Eq(2 * m + 4 * v - 3 * t, 35)\n    # Total wheels from tricycles and vans - total wheels from motorbikes = 13\n    equation2 = Eq(3 * t + 4 * v - 2 * m, 13)\n    # Total wheels at the dealership\n    equation3 = Eq(2 * m + 3 * t + 4 * v, 101)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n    \n    # Return the difference between the number of motorbikes and vans\n    return solutions[m] - solutions[v]\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while a < 100:\n        a, b = b, a + b\n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 0\n    for blue in range(1, 6):\n        for red in range(1, 6 - blue):\n            green = 6 - (blue + red)\n            if green > 0:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(b, c + 5)\n    equation3 = Eq(c + d, a)\n    equation4 = Eq(d, 41)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, d))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2 * i + 2) ** 2 - (2 * i) ** 2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    cups_needed = 30\n    gallons_needed = cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Since Pip is directly in front of Bud, they together count as one position\n    people_between_pip_and_bud = 1\n\n    total_people = people_in_front_of_pip + people_between_pip_and_bud + people_behind_bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    for m in range(1, 13):\n        if m < 10:\n            month = '0' + str(m)\n        else:\n            month = str(m)\n\n        for d in range(1, 32):\n            if d < 10:\n                day = '0' + str(d)\n            else:\n                day = str(d)\n\n            date = '2014' + month + day\n\n            if date.count('0') == date.count('1') == date.count('2'):\n                if m in [1,3,5,7,8,10,12]:\n                    count += 1\n                elif m in [4,6,9,11]:\n                    if d <= 30:\n                        count += 1\n                elif m == 2:\n                    if d <= 28:\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    total_numbers = len(numbers) + 2  # Including p and q\n    total_sum = 6 * total_numbers\n\n    current_sum = sum(numbers)\n    sum_pq = total_sum - current_sum\n\n    # Difference between highest and lowest value is 6\n    # Since p < q, the lowest possible value for q is when p is minimized\n    # So, when difference is 6, and we want q to be the highest, p must be the lowest of the two, that is p = min(numbers)\n\n    min_num = min(numbers)\n    max_possible_q = sum_pq - min_num\n\n    # However, q has to be greater than the current max to maintain the difference of 6\n    current_max = max(numbers)\n    if max_possible_q <= current_max:\n        q = current_max + 6\n    else:\n        q = max_possible_q\n\n    return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let the number of students who like both sports be x\n    # Then, the number of students who like football is 3x\n    # And the number of students who like basketball is 4x\n    # The total number of students is the sum of those who like both,\n    # those who like only football, and those who like only basketball\n    # However, those who like both sports are counted twice in 3x and 4x\n    # So we use the inclusion-exclusion principle to find the total number of students\n    total_students = 36\n    football_and_basketball = 3 + 4 - 1  # Inclusion-exclusion principle\n    x = total_students / football_and_basketball\n\n    return int(x)\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    for i in range(10000, 100000):\n        if i % 7 == 3 and i % 11 == 7 and i % 13 == 9:\n            return i\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam in km/h\n    speed_adam = 60\n    # Speed of Jacob in km/h\n    speed_jacob = 80\n    \n    # Jacob reached home after 3 hours, so distance to his home is:\n    distance_jacob_home = speed_jacob * 3\n    \n    # Adam still had 30 minutes to reach home which is 0.5 hours\n    # Adam traveled for 3 hours already, so his total travel time is 3.5 hours\n    distance_adam_home = speed_adam * 3.5\n    \n    # Total distance apart is the sum of both distances to their respective homes\n    total_distance_apart = distance_adam_home + distance_jacob_home\n    \n    return total_distance_apart\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def new_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    step1 = new_operation(1, 2)\n    step2 = new_operation(step1, 3)\n    step3 = new_operation(step2, 4)\n    ans = new_operation(step3, 5)\n    return int(ans)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Since 252 = 36 * 7, we factorize 36 and 7\n    # Prime factorization of 252\n    # 36 = 2^2 * 3^2\n    # 7 = 7^1\n    # 252 = 2^2 * 3^2 * 7^1\n    \n    # To find the number of factors, add 1 to each of the exponents and multiply them\n    # (2+1) * (2+1) * (1+1) = 3 * 3 * 2 = 18\n    number_of_factors = (2+1) * (2+1) * (1+1)\n\n    return number_of_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Pigeonhole principle calculation\n    max_cakes_in_layer = (total_cakes + layers - 1) // layers\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_percent = 7\n    total_paid = 0.91\n\n    original_cost = total_paid / (1 + gst_percent / 100)\n\n    return original_cost\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case scenario for Lucy not to get 2 marbles of the same color:\n    # She takes out 1 blue marble and 1 yellow marble.\n    # To guarantee she gets 2 marbles of the same color, she needs to take\n    # one more marble, which will be either blue or yellow, ensuring she has 2 of the same color.\n    return 1 + 1 + 1  # One more than the two different ones she could have taken initially\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Converting all weights to grams\n    weight_kg_1 = 2.49 * 1000  # Converting kilograms to grams\n    weight_g_2 = 670\n    weight_kg_3 = 3 * 1000  # Converting kilograms to grams\n    weight_g_3 = 80\n    \n    # Adding all weights\n    total_weight = weight_kg_1 + weight_g_2 + weight_kg_3 + weight_g_3\n    \n    return total_weight\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple of the three lap times\n    meet_time = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the meet time in hours, minutes, and seconds\n    hours = meet_time // 3600\n    minutes = (meet_time % 3600) // 60\n    seconds = (meet_time % 3600) % 60\n\n    # Starting time is 10:00 am, convert it to 24-hour format\n    start_hour = 10\n\n    # Calculate the next meet time\n    meet_hours = (start_hour + hours) % 24\n    meet_minutes = minutes\n    meet_seconds = seconds\n\n    # Format the next meet time as required\n    time_str = f\"{meet_hours:02d}:{meet_minutes:02d}:{meet_seconds:02d} a.m.\" if meet_hours < 12 \\\n               else f\"{meet_hours - 12:02d}:{meet_minutes:02d}:{meet_seconds:02d} p.m.\"\n\n    return time_str\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # total exercise time in minutes\n    cycling_fraction = 1/3\n    cycling_time = total_exercise_time * cycling_fraction\n    jogging_time = total_exercise_time - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_current = symbols('justin_current')\n    \n    # In 18 years, Justin will be 4 times as old as he was 6 years ago\n    future_age = justin_current + 18\n    past_age = justin_current - 6\n    \n    equation = Eq(future_age, 4 * past_age)\n    \n    solutions = solve(equation, justin_current)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 22 - 18\n    last_term = 2\n    next_term = last_term - common_difference\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    sum_of_min_apples = sum(range(1, 6))  # since each child must have a different and at least one apple\n    max_apples_for_last_child = 30 - sum_of_min_apples  # remaining apples for the child who gets the most\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Sam's car specs\n    distance = 273\n    sam_miles_per_gallon = 72.8\n\n    # Sam's petrol consumption for the distance\n    sam_gallons_consumed = distance / sam_miles_per_gallon\n\n    # Tom's petrol consumption for the distance\n    tom_gallons_consumed = sam_gallons_consumed + 6 + 3/4\n\n    # Tom's miles per gallon average rate\n    tom_miles_per_gallon = distance / tom_gallons_consumed\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # the worst case is to pick all of one color first, so we start with that scenario\n    # if Bart picks all the red ones first, that is the smallest number\n    # therefore he needs to pick one more of any of the other colors to ensure he has 2 different colors\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # Taking all of one color (red) and one more from either of the other two\n    ans = red + 1\n\n    return ans\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    sum_result = 3017 + 4962\n    return sum_result\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has two choices for shirts and two choices for skirts\n    num_shirts = 2\n    num_skirts = 2\n\n    # By the principle of multiplication, the total number of outfits is the product\n    # of the number of choices for shirts and skirts\n    total_outfits = num_shirts * num_skirts\n\n    return total_outfits\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Assuming the pattern is a geometric sequence, each term is multiplied by a common ratio to get the next term.\n    # Term 2 (3) divided by Term 1 (1) is 3.\n    # Assuming the common ratio is 3:\n    # Term 3 = Term 2 * common ratio.\n    term_3 = 3 * 3  # Since 1, 3, then 9, 27, 81 implies the common ratio is 3.\n\n    return term_3\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = 120 - 105  # which is the difference between the 8th and 7th term\n\n    # Calculate the first term of the sequence\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Calculate the 100th term of the sequence\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n\n    sum_base_10 = num1 + num2\n\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    # Total number of choices they have\n    choices = 9 + 3 + 2\n\n    return choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of oranges originally be 3x and lemons be 5x.\n    x = symbols('x')\n    # After selling 48 oranges, the number of oranges becomes 3x - 48.\n    # The new ratio becomes (3x - 48) : 5x = 1 : 2\n    equation = Eq((3 * x - 48) / (5 * x), 1 / 2)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    # Find the initial number of lemons by evaluating 5x\n    lemons_initial = 5 * x_value[0]\n\n    return lemons_initial\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate how much of a bale each animal eats per day\n    horse_per_day = 1 / 2\n    cow_per_day = 1 / 3\n    sheep_per_day = 1 / 12\n\n    # Calculate the total consumption rate per day for all animals\n    total_per_day = horse_per_day + cow_per_day + sheep_per_day\n\n    # Calculate how many days the bales of hay will last\n    days = 22 / total_per_day\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5/8) * 160\n    return result\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n\n    equation1 = Eq(mother_age_now + (mother_age_now - daughter_age_now), 75)\n    equation2 = Eq(daughter_age_now, mother_age_now - daughter_age_now + 3)\n    \n    solutions = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solutions[mother_age_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    year = \"2014\"\n    for m in range(1, 13):\n        month = f\"{m:02}\"\n        for d in range(1, 32):\n            day = f\"{d:02}\"\n            date = year + month + day\n            # Check validity of the date\n            valid = False\n            try:\n                if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n                    valid = int(day) <= 31\n                elif int(month) in [4, 6, 9, 11]:\n                    valid = int(day) <= 30\n                elif int(month) == 2:\n                    valid = int(day) <= 28\n            except ValueError:\n                continue\n            \n            # If valid, check the condition for equal numbers of digits 0, 1, and 2\n            if valid and date.count('0') == date.count('1') == date.count('2'):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # if Isabella picks all non-red apples, she still wouldn't have 3 red apples\n    # The worst case scenario is picking all 11 green and 7 yellow apples\n    non_red_apples = 11 + 7\n    \n    # After picking these, the next 3 apples she picks must be red\n    # since only red apples remain\n    red_apples_needed = 3\n    \n    # Total apples she needs to pick to ensure 3 red apples\n    total_apples = non_red_apples + red_apples_needed\n    \n    return total_apples\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*(x+2), 51+2*(x-1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed girls, assuming all boys are right-handed\n    max_left_handed_girls = total_pupils - right_handed\n    \n    # Minimum number of right-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # Total games for a single round-robin tournament with 6 teams:\n    # Each team plays with every other team once, so we use the combination formula C(6, 2)\n    games = 6 * (6 - 1) // 2\n\n    # Each game results in two points being distributed\n    total_points = games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n\n    minibuses_needed = -(-children // minibus_capacity) # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    sum_result = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return sum_result\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Counting the total marbles except those for the worst case from each color\n    # Worst case: having all marbles of 3 colors (except one of each) plus 1 to guarantee the 4th color\n    marbles_to_draw = (4 - 1) + (7 - 1) + (6 - 1) + 1\n    return marbles_to_draw\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 0\n    count_fives = 0\n    while count_fives < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_fives += 1\n            temp //= 5\n\n    return n\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    total_pupils = 1690\n    from sympy import symbols, Eq, solve\n    # Define symbols for unknowns\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)  # Ratio of girls who can swim to those who cannot\n    equation3 = Eq(girls + boys, total_pupils)  # Total number of pupils\n    equation4 = Eq(boys_swim, boys_not_swim - 120)  # Boys who can swim is 120 less than those who cannot\n    \n    # Relation between number of girls who can/cannot swim and total number of girls\n    equation5 = Eq(girls_swim + girls_not_swim, girls)\n    # Relation between number of boys who can/cannot swim and total number of boys\n    equation6 = Eq(boys_swim + boys_not_swim, boys)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    return 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 42):\n        if isprime(a):\n            for b in range(2, 42):\n                if isprime(b) and 3*a + 7*b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n\n    return '4pc' if price_per_pc_4pc < price_per_pc_6pc else '6pc'\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # Total number of possible outcomes for two dice\n    total_outcomes = 6 * 6\n    \n    # Number of outcomes where the sum is greater than 10 (i.e., (5,6),(6,5),(6,6))\n    favorable_outcomes = len([(i, j) for i in range(1, 7) for j in range(1, 7) if i + j > 10])\n    \n    # Probability of getting a sum greater than 10\n    probability = favorable_outcomes / total_outcomes\n    \n    # Expected winnings per game\n    expected_winnings = probability * 10\n    \n    # Expected loss per game (since the player bets £1 each game)\n    expected_loss_per_game = 1 - expected_winnings\n    \n    # Expected total loss after playing 60 times\n    expected_total_loss = expected_loss_per_game * 60\n    \n    return expected_total_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    \n    phone_cost = 740\n    remaining_after_phone = salary - phone_cost\n    rent_cost = 0.75 * remaining_after_phone\n    remaining_after_rent = salary - phone_cost - rent_cost\n    \n    equation = Eq(remaining_after_rent, salary / 5)\n    \n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    # Let 'b' be the weight of the basket and 'a' the average weight of one apple\n    # We can set up two equations based on the given information:\n    # 1) b + 5a = 580  -- The basket with 5 apples weighs 580 grams\n    # 2) b + 2a = 280  -- The basket with 2 apples (after taking 3 out) weighs 280 grams\n    \n    # Subtract the second equation from the first to isolate 'a'\n    a = (580 - 280) / 3\n    \n    # Now we use the value of 'a' to solve for 'b'\n    b = 580 - 5 * a\n\n    return b\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    all_combinations = set()\n    for i in range(1, 4):\n        all_combinations.update(set(permutations([2, 3, 4], i)))\n    ans = len(all_combinations)\n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Start time\n    start_hour = 2\n    start_minute = 31\n    # How many minutes until all digits 0, 1, 2, 3 next appear together\n    # Loop through minutes after start time\n    count_minutes = 0\n    while True:\n        count_minutes += 1\n        start_minute += 1\n        if start_minute == 60:\n            start_minute = 0\n            start_hour += 1\n            if start_hour == 24:\n                start_hour = 0\n        # Convert current time to string and check if all digits appear\n        current_time = f\"{start_hour:02d}{start_minute:02d}\"\n        if all(d in current_time for d in \"0123\"):\n            break\n    return count_minutes\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # Milliliters left after class plus what was drunk after class\n    original_amount = remaining_after_class * 2  # Multiply by 2 since half was drunk before class\n\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of mushrooms gathered each hour\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Create an equation based on the given information\n    # The total number of mushrooms is 40\n    total_mushrooms_eq = Eq(first_hour + second_hour, 40)\n\n    # The second hour's mushrooms is 26 more than the first hour\n    hour_difference_eq = Eq(second_hour - first_hour, 26)\n\n    # Solve the system of equations\n    solutions = solve((total_mushrooms_eq, hour_difference_eq), (first_hour, second_hour))\n\n    return solutions[second_hour]  # Return the number of mushrooms gathered in the second hour\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    equation1 = Eq(lynn - 160, mary - 58)\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def diamond_operator(A, B):\n    return A * A - 3 * B\n\ndef triangle_operator(A, B):\n    return 5 * A - B * B\n\ndef solution():\n    result_diamond = diamond_operator(4, 2)\n    ans = triangle_operator(result_diamond, 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3 / 7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3 / 8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3 / 4\n    number_of_bags = remaining_after_tuesday / bag_weight\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60\n    tickets_remaining = 28\n    percent_remaining = 100 - percent_sold\n    total_capacity = tickets_remaining * 100 / percent_remaining\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    return sum((-1)**(i + 1) * (64 - 2 * i) for i in range(11))\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n    \n    answer = solve(equation, number)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deⅵ, jerry = symbols('deⅵ jerry')\n    equation1 = Eq(deⅵ - jerry, 8)\n    equation2 = Eq((deⅵ + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deⅵ, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n    number_of_jugs = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division\n    return number_of_jugs\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Since Serene mistook the tens place as 5 instead of 3, the actual tens place is 2 less\n    # And since Serene mistook the ones place as 3 instead of 2, the actual ones place is 1 more\n    # Thus, we can adjust the mistaken difference by subtracting 20 and adding 1\n    mistaken_difference = 36\n    correct_difference = mistaken_difference - 20 + 1\n    return correct_difference\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Total balls including the blue one\n    target_percentage = 0.9  # 90%\n\n    for red_balls_removed in range(0, 49):\n        remaining_red_balls = 49 - red_balls_removed\n        if remaining_red_balls / total_balls == target_percentage:\n            return red_balls_removed\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    sum = 0\n    numerator = 100\n    denominator = 97\n    while numerator >= 4:\n        sum += float(numerator) / denominator\n        numerator -= 1\n        denominator -= 1\n    return sum\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n    \n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cows, birds = symbols('cows birds')\n    \n    equation1 = Eq(cows + birds, 1300) # total animals\n    equation2 = Eq(4*cows + 2*birds, 3440) # total legs\n    \n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    num = 96\n    factor_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factor_count += 1\n    return factor_count\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n\n    return total_books\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let x be the number of pens Ben has at first\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    # After giving away 28 pens, Jenny has:\n    jenny_pens_after = jenny_pens - pens_given_to_ben\n\n    # Ben has the same amount of pens as Jenny after receiving the pens\n    ben_pens = jenny_pens_after\n\n    return ben_pens\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    from math import sqrt\n\n    # Define the symbols for the velocities\n    v_f = symbols('v_f')\n    \n    # Masses of the cars\n    m1 = m2 = 500  # kg\n\n    # Velocities of the cars before the collision\n    v1_north = 20  # m/s, due north\n    v2_west = -30  # m/s, due west (negative sign for westward direction)\n\n    # Using conservation of momentum, assuming north as positive y and west as negative x\n    # Momentum before = momentum after\n    # m1*v1_north + m2*0 = (m1 + m2) * vy_f (in the y direction)\n    # 0 + m2*v2_west = (m1 + m2) * vx_f (in the x direction)\n\n    # Since the mass is the same for both and they stick together, we can simplify: \n    # v1_north = vy_f; v2_west = vx_f\n    vy_f = v1_north\n    vx_f = v2_west\n\n    # The velocity of the cars after the impact is the vector sum of vx_f and vy_f\n    # Using Pythagorean theorem to find the magnitude of the final velocity\n    magnitude_v_f = sqrt(vx_f**2 + vy_f**2)\n\n    # The answer should be the magnitude only, as the velocity direction will depend on the context of the problem\n    return magnitude_v_f\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_trees = 2\n    distance_between_lamp_posts = 10\n    number_of_trees = 21\n\n    total_distance = (number_of_trees - 1) * distance_between_trees\n    number_of_lamp_posts = (total_distance // distance_between_lamp_posts) + 1\n\n    return int(number_of_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3\n    colours = 5\n\n    return sizes * colours\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dvd_player = symbols('dvd_player')\n    \n    # 1 laptop + 1 DVD player = $2960\n    laptop = 2960 - dvd_player\n    \n    # Equation representing total cost\n    total_cost_eq = Eq(5 * laptop + 4 * dvd_player, 14438)\n    \n    # Solving for the price of one DVD player\n    dvd_player_cost = solve(total_cost_eq, dvd_player)[0]\n    \n    return dvd_player_cost\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        if p[0] != 0:  # leading digits cannot be zero\n            square, circle, triangle = p\n            if 4 * (10 * square + circle) == 100 * square + 10 * triangle + triangle:\n                return triangle\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the variables\n    initial_average, num_people = symbols('initial_average num_people', real=True, positive=True)\n    \n    # Create equations based on the problem statement\n    equation1 = Eq((initial_average * num_people + 45) / (num_people + 1), 61)\n    equation2 = Eq((initial_average * num_people + 45 + 71) / (num_people + 2), 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (initial_average, num_people))\n    \n    # Return the initial average weight\n    return float(solutions[initial_average])\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = '12345'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    length_pattern = len(pattern)\n    \n    full_patterns = 2000 // length_pattern\n    remaining_digits = 2000 % length_pattern\n    \n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 515  # in pence\n    coffee_cost = 369  # in pence\n    milk_cost = 89  # in pence\n\n    sugar_cost = total_cost - coffee_cost - milk_cost\n\n    return sugar_cost  # in pence\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let h be the number of hours passed since midnight\n    # Then, 12 - h is the number of hours remaining until noon\n    # According to the problem, h = 2 * (12 - h)\n    # Solve for h\n    h = 2 * (12 - h)\n    h = 24 - 2 * h\n    h = 24 / 3  # Simplifying the equation\n\n    return h\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n\n    return total_cost\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario:\n    # She takes out all 5 blue balls and still doesn't have 4 of the same color (other than blue).\n    # Then she takes out all 4 orange balls and still doesn't have 4 of the same color (other than orange).\n    # To ensure she gets 4 of the same color, she must take out at least 1 more ball (which will be yellow),\n    # because she would have all the other colors.\n\n    # Therefore, she must take out at least 5 (blue) + 4 (orange) + 1 (yellow) = 10 balls.\n    return 5 + 4 + 1\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Total work is represented by the lcm of A and B's individual work days\n    # however, since they are both factors of 30 (3 * 5 * 2), we can \n    # represent the work by a total work 'units' of 30 (as 15 and 10 both divide 30)\n    \n    total_work = 30\n\n    # A's work per day is total_work divided by his number of days\n    A_work_per_day = total_work / 15\n    # B's work per day is total_work divided by his number of days\n    B_work_per_day = total_work / 10\n\n    # They work together for 4 days\n    work_done_in_4_days = 4 * (A_work_per_day + B_work_per_day)\n\n    # Remaining work after 4 days\n    remaining_work = total_work - work_done_in_4_days\n\n    # B completes the remaining work alone, so we divide the remaining work by B's work per day to get the days needed\n    days_for_B_to_finish = remaining_work / B_work_per_day\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum from 1 to 13 using the formula for the sum of an arithmetic series.\n    sum_ascending = (13 * (1 + 13)) // 2\n\n    # We have the sequence from 1 to 13 twice except the number 13.\n    # So, we just double the sum we previously calculated and subtract one instance of 13.\n    total_sum = 2 * sum_ascending - 13\n\n    return total_sum\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_count = len(numbers) + 1  # Including 'a'\n\n    # Sum of all numbers including 'a'\n    total_sum = mean_value * total_count  \n\n    # Sum of given numbers\n    given_sum = sum(numbers)\n\n    # Finding 'a'\n    a = total_sum - given_sum\n\n    return a\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    discount = original_price - reduced_price\n    discount_percentage = (discount / original_price) * 100\n    return discount_percentage\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n    test_tubes = 0\n    while 2 ** test_tubes < num_bottles:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Largest 3-digit number is 999\n    # The number should be divisible by 9 and the last digit should be odd\n    # The tens place should be divisible by 4\n    for number in range(999, 100, -1):\n        if number % 9 == 0 and number % 2 == 1:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_diff = 52\n    total_students = 0\n\n    # We assume the number of layers for boys and girls are equal\n    # Boy layers will have a 2 unit larger perimeter compared to the girl layers\n    # Thus forming a 2n difference between boys and girls for each complete layer cycle\n\n    # Try to find a suitable square n*n, where (n-2)(n-2) gives the girls square\n    # Difference in one layer (boys - girls) = 4 * n - 4, (because we subtract the corners which got counted twice)\n    # Sum of differences in all layers must equal total_diff\n\n    n = 1  # we start with the smallest possible square of boys\n    while True:\n        girls = (n - 2)**2\n        boys = n**2 - girls\n        diff = boys - girls\n\n        if diff == total_diff:\n            # When we find the difference that matches, we return the total number of students\n            total_students = n**2\n            break\n        n += 1  # Increase the size of the square for the next attempt\n    \n    return total_students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    liters = 2.5\n    milliliters_per_liter = 1000\n    n = liters * milliliters_per_liter\n    return n\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings have 2 legs, baby geese have 2 legs, lambs have 4 legs.\n    # Total legs are 36.\n    # Let's calculate the total legs of ducks and geese first.\n    ducklings_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    \n    # Subtract ducklings and geese legs from total to find lamb legs\n    remaining_legs = 36 - (ducklings_legs + baby_geese_legs)\n    \n    # Each lamb has 4 legs, so we divide the remaining legs by 4 to find the number of lambs\n    num_lambs = remaining_legs // 4\n    \n    return num_lambs\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_sweets *= 4  # On the fourth day, 1/4 were eaten, so multiply by 4 to reverse\n    remaining_sweets *= 5  # On the third day, 1/5 were eaten, so multiply by 5 to reverse\n    remaining_sweets *= 6  # On the second day, 1/6 were eaten, so multiply by 6 to reverse\n    remaining_sweets *= 7  # On the first day, 1/7 were eaten, so multiply by 7 to reverse\n    return remaining_sweets\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # n * (n - 1) = Number of matches if each team plays each other once\n    # Because each team plays each other twice, we have:\n    # n * (n - 1) * 2 = Total number of matches\n    # We know that the total number of matches is 30, hence:\n    # n * (n - 1) * 2 = 30\n    # We can solve this quadratic equation for n.\n\n    n = symbols('n')\n    equation = Eq(n * (n - 1) * 2, 30)\n    \n    solutions = solve(equation, n)\n    \n    # Since n must be a positive integer representing the number of teams,\n    # we discard negative solutions if present.\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    daily_output = 720 / 5\n    total_days = 3600 / daily_output\n\n    return total_days\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    hebe_left = 42\n    hebe_ate_fraction = 1/4\n    emerald_ate_constant = 4\n    emerald_ate_fraction = 1/3\n    charlene_kept_constant = 8\n    charlene_kept_fraction = 1/2\n\n    # Equation representing the cookies Hebe had after eating 1/4 of them and having 42 left\n    hebe_eq = Eq(cookies * hebe_ate_fraction + hebe_left, cookies)\n    \n    # Solve for the number of cookies Hebe had before eating\n    hebe_cookies_before_eating = solve(hebe_eq, cookies)[0]\n\n    # Equation representing the cookies Emerald had before giving some to Hebe and after eating some herself\n    emerald_eq = Eq(cookies * emerald_ate_fraction + emerald_ate_constant + hebe_cookies_before_eating, cookies)\n    \n    # Solve for the number of cookies Emerald had before eating\n    emerald_cookies_before_eating = solve(emerald_eq, cookies)[0]\n\n    # Equation representing the cookies Charlene had before giving some to Emerald\n    charlene_eq = Eq(cookies * charlene_kept_fraction + charlene_kept_constant + emerald_cookies_before_eating, cookies)\n\n    # Solve for the number of cookies Charlene had initially\n    initial_cookies = solve(charlene_eq, cookies)[0]\n\n    return initial_cookies\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    second_number = symbols('second_number')\n    first_number = second_number + 1099\n    third_number = second_number - 877\n\n    equation = Eq(first_number + second_number + third_number, 7656)\n\n    solution = solve(equation, second_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def count_ways(steps):\n        ways = [0] * (steps + 1)\n        ways[0], ways[1] = 1, 1\n        for i in range(2, steps + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        return ways[steps]\n    \n    # Nelson has to step on the 5th step, so we calculate the ways to the 5th and then from the 5th to the 10th\n    ways_to_5th = count_ways(5)\n    ways_from_5th_to_10th = count_ways(10 - 5)\n    \n    # The total ways will then be the product of the two possibilities\n    return ways_to_5th * ways_from_5th_to_10th\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "import math\n\ndef solution():\n    for i in range(40, 51):\n        if math.sqrt(i) % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorize each number in the product\n    prime_factors = factorint(2*2*2*3*8*5*5*25)\n\n    # Number of zeros at the end of the product will be determined by the minimum power of prime factors 2 and 5\n    # because 10 = 2 * 5, and each 10 contributes to one zero.\n    min_power = min(prime_factors.get(2, 0), prime_factors.get(5, 0))\n\n    return min_power\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150\n    cup_volume = 40\n    cups_filled = 3\n    water_used = cups_filled * cup_volume\n    remaining_water = initial_water - water_used\n    \n    return remaining_water\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases, and 5 erasers for $50.\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # A notebook and a pencil case cost $6.\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost $8.\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # In 10 years, their total age will be 53 years old\n    equation2 = Eq((alice + 10) + (sister + 10), 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    n = 1\n    while True:\n        product = n * (n + 1) * (n + 2) * (n + 3)\n        if product == 3024:\n            return n + 3\n        n += 1\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n\n    # Bob has 15 more cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # Colin gives Bob 25 cards, and now Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the two equations for bob and alan\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Find the least common multiple of the pack sizes\n    least_common_multiple = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of packs needed to get at least 1000 markers\n    # lcm gives the total markers of 1 pack of each type, so we divide 1000 by this number\n    # and round up to ensure we have at least 1000 markers\n    min_packs = -(-1000 // least_common_multiple)\n\n    # Calculate the total number of packs\n    total_packs = min_packs * 4  # because there are 4 different pack sizes\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    n_students = 10\n    # each student shakes hands with n_students - 1 other students\n    handshakes_per_student = n_students - 1\n    # total handshakes is half this number, as each handshake is counted twice\n    total_handshakes = (n_students * handshakes_per_student) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals to their fractional form\n    n1 = 0.1 * 10**5 + 1992517 / 9999990 - 0.1\n    n2 = 0.2 * 10**4 + 34567 / 999990 - 0.2\n    \n    # Subtract the two numbers to find the point at which their digits differ\n    diff = abs(n1 - n2)\n    \n    # Initialize n as the smallest value of the nth decimal place\n    n = 1\n    \n    # Find the smallest value of n where the nth digit is different\n    while diff * 10**n < 1:\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    anne_apples = solve(total_apples, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    result = (20 / 100) * 90 - (90 / 100) * 20\n    return result\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange = 10  # grams\n    ratio_orange = 2\n    ratio_water = 25\n    water = (orange / ratio_orange) * ratio_water\n    return water\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    needed_average = 8.5\n    total_scores_needed = needed_average * 5\n    current_total = sum(scores)\n    final_judge_score = total_scores_needed - current_total\n\n    return final_judge_score\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for the common difference\n    d = symbols('d', integer=True, positive=True)\n\n    # Equation based on the sum of an arithmetic sequence: n/2 * (2*a1 + (n - 1)*d)\n    # a1 = first term = 30\n    # an = last term = 70\n    # S(n) = total pages = 550\n    # n  = total days read\n    # S(n) = n/2 * (a1 + an) => 550 = n/2 * (30 + 70)\n    # n = 550 * 2 / 100\n    n = 550 * 2 / 100\n\n    # Set up the equation based on the last term: an = a1 + (n - 1)*d\n    # 70 = 30 + (n - 1)*d\n    equation = Eq(70, 30 + (n - 1) * d)\n\n    # Solve the equation for common difference 'd'\n    d_value = solve(equation, d)\n\n    # Return the result\n    return d_value[0]\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol x\n    equation = Eq(60 - 8 * (2 * x - 5), 4)  # Create the equation\n\n    solutions = solve(equation, x)  # Solve for x\n\n    return solutions[0]  # Return the solution\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the interest rate per year.\n    r = symbols('r')\n\n    # The amount after the first year is 10000 + 10000*r\n    # The amount after the second year is (10000 + 10000*r) + (10000 + 10000*r)*r\n    # We know that at the end of the second year, the interest is $816, so:\n    # (10000 + 10000*r) + (10000 + 10000*r)*r - 10000 = 816\n\n    equation = Eq((10000 + 10000*r) + (10000 + 10000*r)*r - 10000, 816)\n    \n    solution = solve(equation, r)\n    \n    # Annual interest rate in percentage\n    return solution[0] * 100  # Multiply by 100 to convert to percent\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    product = quotient * divisor\n    total = product + remainder\n    if remainder < divisor:\n        return total\n    else:\n        return \"Incorrect method. Remainder cannot be equal to or greater than the divisor.\"\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let x be the original number\n    # According to the question, the equation is 2*x + 7 = 43\n    # To find x, we need to perform inverse operations on the equation\n    result = (43 - 7) / 2\n    return result\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for Hannah's speed\n    hannah_speed = symbols('hannah_speed')\n\n    # Define the equation based on the ratio and difference in speed\n    equation = Eq(3 / (hannah_speed + 15), 4 / hannah_speed)\n\n    # Solve the equation\n    hannah_speed_value = solve(equation, hannah_speed)\n\n    return hannah_speed_value[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # equations based on given information\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_exam_time = 90\n    time_spent_multiple_choice = 23\n    time_spent_fill_in_blank = 35\n\n    time_remaining = total_exam_time - (time_spent_multiple_choice + time_spent_fill_in_blank)\n\n    return time_remaining\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # m/s\n    crossing_time = 45  # s\n    \n    # Distance covered by the train to cross the tunnel entirely = Speed * Time\n    total_distance = train_speed * crossing_time\n    \n    # Length of tunnel = Total distance covered - Length of train\n    train_length = 850  # m\n    tunnel_length = total_distance - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of coins Owen had initially.\n    x = symbols('x')\n    \n    # Initially, 2/7 of his coins were fifty-cent coins,\n    # so 5/7 of his coins were one-dollar coins.\n    fifty_coins_initial = 2/7 * x\n    one_dollar_coins_initial = 5/7 * x\n\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins which is 10 fifty-cent coins.\n    one_dollar_coins_after = one_dollar_coins_initial + 10\n    fifty_coins_after = fifty_coins_initial + 10\n\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins.\n    equation = Eq(one_dollar_coins_after, 2 * fifty_coins_after)\n\n    # Solve the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved = 32.50\n    spent = total_money - saved\n    \n    # Let x be the amount he spent on transportation\n    # Then the amount he spent on food is 2*x\n    # So we have x + 2*x = spent\n    # Which means 3*x = spent\n    # x = spent / 3\n    \n    transportation = spent / 3\n    food = 2 * transportation\n    \n    return food\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    # The maximum number of regions created by n circles is given by:\n    # n^2 - n + 2 (every new circle can intersect every other circle at 2 new points at most,\n    # creating n additional regions with the nth circle, plus the circle itself dividing one region into two)\n    \n    # For n circles\n    n = 5\n    regions_by_circles = n**2 - n + 2\n\n    # A single line can divide all existing regions into two, hence it multiplies the count by 2\n    regions_by_line = regions_by_circles * 2\n    \n    return regions_by_line\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # initial quantities\n    base_rate = 4\n    first_n_tons = 3\n    additional_rate = 3\n    service_fee = 4\n    total_amount = 109\n\n    # calculate the amount remaining after subtracting the base cost for first_n_tons and service fee\n    remaining_amount = total_amount - (first_n_tons * base_rate) - service_fee\n\n    # calculate additional tons she can use\n    additional_tons = remaining_amount // additional_rate\n\n    # calculate total tons of water used\n    total_tons = first_n_tons + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from math import factorial\n\ndef solution():\n    total_entrances = 4\n    total_people = 3\n\n    # Calculate permutations for 3 people to choose from 4 entrances\n    permutations = factorial(total_entrances) // factorial(total_entrances - total_people)\n\n    # Calculate the number of ways for Joe and Mike to enter without joining the same entrance\n    # For each of the 4 entrances Joe can enter, Mike can enter any of the remaining 3 entrances\n    joe_mike_ways = total_entrances * (total_entrances - 1)\n\n    # There are 2 remaining possibilities for Tina's entrance after Joe and Mike have entered\n    tina_ways = total_entrances - 2\n\n    # Multiply the permutations by the number of ways Joe and Mike can enter and by Tina's possibilities\n    total_ways = joe_mike_ways * tina_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    daniel = symbols('daniel')\n    bala = daniel + 320\n    carl = symbols('carl')\n    \n    # Bala had half as many cookies as Amelia, Carl, and Daniel.\n    equation1 = Eq(bala, (amelia + carl + daniel) / 2)\n\n    # Carl had three-quarters as many cookies as Amelia, Bala, and Daniel.\n    equation2 = Eq(carl, (amelia + bala + daniel) * 3 / 4)\n    \n    # Total number of cookies.\n    equation3 = Eq(amelia + bala + carl + daniel, 6230)\n    \n    # Solving the system of equations for Bala and Carl.\n    solutions = solve((equation1, equation2, equation3), (carl, daniel))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # To find the smallest possible dividend, \n    # we need to consider the smallest divisor that is more than the remainder\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples - apples / 3 + oranges - oranges / 2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Total candy brought by Eve, Alice and Irene\n    num_girls = 3  # Number of girls\n\n    # Divide the total candy equally among the girls\n    candy_per_girl = total_candy // num_girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for the lazy gardener to mow the lawn alone\n    x = symbols('x')\n    \n    # Equation representing combined work of both gardeners: 1/12 + 1/x = 1/8\n    equation = Eq(1/12 + 1/x, 1/8)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since there might be multiple solutions, we pick the one that makes sense (positive time)\n    answer = [sol.evalf() for sol in solution if sol > 0]\n    \n    # Assuming there's only one valid answer\n    return answer[0]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n\n    matthew_tomatoes = belinda_tomatoes - belinda_gave\n    initial_matthew_tomatoes = matthew_tomatoes - belinda_gave\n\n    return initial_matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    initial_money = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_money = 5 * x\n    \n    # equation representing the total expenses and remaining money\n    equation = Eq(initial_money, x * dress_cost + x * skirt_cost + remaining_money)\n    \n    # solving the equation for x\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 1*2\n    product = 1\n    for i in range(3, 15, 2):\n        product *= i\n        ans += product * (i + 1)\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # Capacity of the jug in milliliters\n    half_jug = jug_capacity / 2  # Half of the jug's capacity\n    cup_capacity = half_jug / 3  # Capacity of each cup\n    return cup_capacity\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5  # in minutes\n    red_line_interval = 6  # in minutes\n\n    # Find the least common multiple (LCM) of the two intervals\n    lcm = green_line_interval * red_line_interval\n    for i in range(1, green_line_interval * red_line_interval + 1):\n        if i % green_line_interval == 0 and i % red_line_interval == 0:\n            lcm = i\n            break\n\n    # Since the interval is represented in minutes, convert it to hours and minutes\n    hours = lcm // 60\n    minutes = lcm % 60\n\n    # Trains start at 5 am, so we add the hours and minutes to get the next time\n    next_time_hour = 5 + hours\n    next_time_minute = minutes\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    ans = total_cars - blue_car_position_from_front + 1\n    return ans\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Number of trees between the first and the 101st tree (excluding the first)\n    num_trees = 101 - 1\n    \n    # Total distance between the first and the 101st tree in meters\n    distance = num_trees * 3  # 3 meters for each tree\n    \n    # Time taken to walk this distance in minutes\n    time_to_walk = 3\n    \n    # Walking speed in meters per minute\n    walking_speed = distance / time_to_walk\n    \n    # Total distance to school is 4000 meters, calculate time to travel to school\n    time_to_school = 4000 / walking_speed\n\n    return time_to_school\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the sum of the series of squares using the formula for sum of squares of the first n natural numbers\n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # The sequence given is 4^2, 8^2, 12^2, ..., 124^2.\n    # This can be written as (4*1)^2, (4*2)^2, (4*3)^2, ..., (4*31)^2.\n    # Extract the factor 4^2 to get 4^2 * (1^2 + 2^2 + 3^2 + ... + 31^2), which means we need to find the sum of\n    # squares of the first 31 natural numbers and then multiply it by 4^2.\n\n    # Calculate the sum of squares of the first 31 numbers\n    sum_squares_31 = sum_of_squares(31)\n\n    # Multiply the result by 4^2 to get the final answer\n    ans = 4**2 * sum_squares_31\n\n    return ans\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    apple_price, banana_price = symbols('apple_price banana_price')\n\n    # Define the equations\n    equation1 = Eq(3*apple_price + 2*banana_price, 1.25)\n    equation2 = Eq(apple_price + banana_price, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple_price, banana_price))\n\n    # Cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana_price]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_squares = sum([i**2 for i in range(6, 52, 5)])\n    return sum_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen trades 5 fish for 2 rabbits\n    fish_to_rabbit_ratio = 5 / 2\n\n    # Oscar trades 4 rabbits for 7 packs of wheat\n    rabbit_to_wheat_ratio = 4 / 7\n    \n    # Simplify the continued ratio of fish to wheat\n    # Fish to rabbit to wheat = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * (1 / rabbit_to_wheat_ratio)\n    \n    # Number of fish for 14 packs of wheat\n    number_of_fish = fish_to_wheat_ratio * 14\n    \n    return number_of_fish\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3]\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    all_permutations = set(permutations(entrances*4, 4))\n    \n    valid_permutations = {\n        p for p in all_permutations if len(set(p)) != 1\n    }\n\n    return len(valid_permutations)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    incorrect_penalty = -2\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + incorrect_answers * incorrect_penalty\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' be the number of goats initially.\n    c, g = symbols('c g')\n\n    # According to the problem, 65% of the animals were cows.\n    eq1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more animals were added, the percentage of cows increased by 20%.\n    # It means there were now 85% cows. Also, the number of goats doubled.\n    eq2 = Eq(0.85 * (c + g + 240), c + 240)\n    eq3 = Eq(2 * g, g + 240)\n\n    # Now we solve the equations.\n    solutions = solve((eq1, eq2, eq3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    total_time_needed = time_per_drawing * total_drawings\n    return total_time_needed\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    for x in range(1, 100):\n        if x % 4 == 1 and x % 5 == 2 and x % 6 == 3:\n            return x\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount = 15 if total_cost >= 50 else 4 if total_cost >= 20 else 0\n    to_pay = total_cost - discount\n    return to_pay\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "网络故障，请重试"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for age in ages:\n        if age % 3 == 0 and age != max(ages):\n            ans = age\n            break\n    return ans\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Considering the worst case scenario using Pigeonhole Principle\n    # Drawing 5 red balls and 5 white balls, but still not 3 different coloured balls\n    worst_case_without_all_three_colors = 5 + 5\n\n    # To ensure we get the third color, we draw one more ball\n    one_more_to_get_third_color = 1\n\n    # Total number of balls drawn to definitely have all three colors\n    minimum_balls_to_draw = worst_case_without_all_three_colors + one_more_to_get_third_color\n\n    return minimum_balls_to_draw\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    \n    # 2 boys can be arranged in 2! ways and 3 girls can be arranged in 3! ways.\n    boys_arrangements = factorial(2) # A boy at each end, hence 2! possibilities.\n    girls_arrangements = factorial(3) # 3 girls in the middle, hence 3! possibilities.\n    \n    # By multiplication principle, total arrangements are:\n    total_arrangements = boys_arrangements * girls_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    return 80040\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # There are Avril and 5 other children, so we have 6 share recipients in total.\n    # We need to find the maximum number of apples Avril can get if everyone else gets a different number,\n    # and everyone gets at least one apple.\n    # The smallest numbers of apples the other five children can get are 1, 2, 3, 4, and 5 (in increasing order).\n    # To maximize Avril's share, other children should get the minimum numbers.\n    # So the total number of apples other children get is 1 + 2 + 3 + 4 + 5 = 15.\n    \n    # Subtract the apples that the other children will get from the total to find Avril's share.\n    return 28 - 15\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    triangle = symbols('triangle')\n    # Based on the first equation: triangle + triangle = square, we get square = 2 * triangle\n    square = 2 * triangle\n    # Based on the second equation: square + triangle = circle, we get circle = square + triangle = 3 * triangle\n    circle = square + triangle\n    # Based on the third equation: diamond = circle + square + triangle, we get diamond = circle + square + triangle = 6 * triangle\n    diamond = circle + square + triangle\n\n    # Now we need to express diamond in terms of the number of triangles\n    ans = diamond / triangle\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    cost_of_laptop = total_money * fraction_spent\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # The ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori\n\n    time_seconds = 10  # Time in seconds\n    distance_jocye = jocye_speed * time_seconds  # Distance Jocye can run in 10 seconds\n\n    return distance_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2  # because there were 2 numbers initially\n    new_sum = new_average * 3  # after adding one more number, total numbers become 3\n    new_number = new_sum - original_sum  # the difference is the new number\n\n    return new_number\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number_str = '2023'\n    n = 1\n    while True:\n        num = int(number_str * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    # Parsing the times into datetime objects\n    school_leave_time = datetime.strptime('15:22', '%H:%M')\n    bus_catch_time = datetime.strptime('16:01', '%H:%M')\n    bus_dropoff_time = datetime.strptime('16:19', '%H:%M')  # 18 minutes after catching the bus\n    home_arrival_time = datetime.strptime('16:35', '%H:%M')\n\n    # Calculate total walking time\n    first_walk_duration = bus_catch_time - school_leave_time\n    second_walk_duration = home_arrival_time - bus_dropoff_time\n\n    # Sum up the total walking minutes\n    total_walking_minutes = first_walk_duration.total_seconds() / 60 + second_walk_duration.total_seconds() / 60\n\n    return int(total_walking_minutes)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # calculate trophies for questions 1 to 5\n    trophies_1_to_5 = sum(range(1, 6))\n    \n    # calculate trophies for questions 6 to 9\n    trophies_6_to_9 = sum(range(4, 0, -1))  # start at 4 and decrease by 1\n    \n    # total number of trophies\n    total_trophies = trophies_1_to_5 + trophies_6_to_9\n    \n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Let the number of cookies eaten on the first day be x.\n    # Arithmetic sequence: x, x+6, x+12, x+18, x+24\n    # Sum of the sequence = number of terms * (first term + last term) / 2\n    # 100 (total cookies) = 5 (days) * (x + (x + 24)) / 2\n    # Solve for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(5 * (x + (x + 24)) / 2, 100)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    sequence.sort()\n    n = len(sequence)\n    \n    if n % 2 == 1:\n        median = sequence[n // 2]\n    else:\n        median = (sequence[(n // 2) - 1] + sequence[n // 2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Total marbles of each color in the box\n    blue = 18\n    red = 6\n    orange = 8\n\n    # Worst case: We pick all marbles of the other two colors first\n    worst_case = blue + orange\n\n    # Ensure at least 2 red marbles are picked\n    # We must take one more than all the other marbles to ensure at least 2 reds\n    marbles_to_take = worst_case + 2\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    \n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students = 30\n    facing_teacher = 0\n    \n    for number in range(1, students + 1):\n        # Check if the number is a multiple of 2 or 3 (i.e., if turning occurs an odd number of times)\n        turns = (number % 2 == 0) + (number % 3 == 0)\n        if turns % 2 == 0:  # If turns is even, student is facing the teacher\n            facing_teacher += 1\n            \n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # Difference in arithmetic sequence\n    difference = (fourth_term - first_term) / (4 - 1)\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # If you switch, you win if and only if your first choice was wrong, which happens with probability 2/3.\n    # If you stick with your first choice, you win if and only if your first choice was correct, which happens with probability 1/3.\n    # Therefore, you should switch to gate 2.\n    # We return the gate number that has the higher chance to contain the car.\n    return 2\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # Define the variable x as a symbol\n    total_spent = 6 * x  # Since Sean went to the restaurant 6 times and spent x dollars each time\n\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original sum of money David had\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    equation = Eq(x - (75 + (x - 75) / 4), x / 3)\n    \n    # Solve the equation for x\n    original_sum = solve(equation, x)\n    \n    return original_sum[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 trainers can catch 7 pokemon in 7 minutes,\n    # the rate per trainer per minute is 1 pokemon.\n    # So we need the same number of trainers to catch 49 pokemon in 49 minutes.\n    \n    number_of_trainers = 7\n\n    return number_of_trainers\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    ways = factorial(7) // (factorial(1)**3 * factorial(7 - 3))\n    return ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 1 + 12  # Tommy and 12 friends\n    minutes_per_person = 142\n\n    total_time = total_people * minutes_per_person\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    num_repeats = 99 // 9\n    remainder = (928 * num_repeats) % 9\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oplus = symbols('oplus')\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    solution = solve(equation, oplus)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect = 1500\n\n    percentage = (incorrect / total_people) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let x be the number of bars each person bought.\n    # Eliot's total cost is 12x (since each bar costs 12p)\n    # Maya's total cost is 17x (since each bar costs 17p)\n    # Eliot pays with three £1 coins, which equals 300p, so his change is 300 - 12x.\n    # Maya pays with four £1 coins, which equals 400p, so her change is 400 - 17x.\n    # They receive the same amount of change, so we can set the change equal:\n    # 300 - 12x = 400 - 17x\n    # To find x, we can solve the equation:\n    \n    x = (400 - 300) / (17 - 12)\n    return int(x)\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 3, 5, 4]  # Available digits\n    # We start by finding the smallest even digit for the unit place.\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    smallest_even_digit = min(even_digits)\n    # Remove the smallest even digit from the list, as it will be used for the units place.\n    digits.remove(smallest_even_digit)\n    # Sort the remaining digits in ascending order.\n    digits.sort()\n    # Concatenate the numbers starting with the smallest one to form the smallest 4-digit number.\n    smallest_number = int(str(digits[0]) + str(digits[1]) + str(digits[2]) + str(smallest_even_digit))\n\n    return smallest_number\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, and c such that a <= b <= c\n\n    # From the problem, we have the following information:\n    # a + b + c = 56 (sum of the three numbers)\n    # (a + b) / 2 = 14 (average of the smallest two numbers)\n    # (b + c) / 2 = 22 (average of the largest two numbers)\n\n    # We can rewrite these equations as follows:\n    # a + b = 28 (from the second equation, multiplying both sides by 2)\n    # b + c = 44 (from the third equation, multiplying both sides by 2)\n\n    # Solving for b from the first equation: \n    # b = 56 - a - c\n\n    # We substitute b in the a + b equation:\n    # a + (56 - a - c) = 28\n    # Simplify: 56 - c = 28\n    # c = 56 - 28\n\n    c = 56 - 28  # c is the largest number while a is the smallest.\n\n    # We substitute c in the b + c equation:\n    # b + (56 - 28) = 44\n    # Simplify: b + 28 = 44\n    # b = 44 - 28\n\n    b = 44 - 28  # b is the median number\n\n    # Now we can find a since we have c and b:\n    # a = 56 - b - c\n\n    a = 56 - b - c\n\n    # The median among the three numbers is b, because a <= b <= c\n    return b\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10  # Total litres of orange juice\n    per_container = 2  # Litres per container\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n\n    eq1 = Eq(6 * dumpling + 4 * bun, 92)\n    eq2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    solutions = solve((eq1, eq2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j be the current age of Jackson and c be the current age of Chloe.\n    j, c = symbols('j c')\n\n    # The current sum of their ages is 54.\n    equation1 = Eq(j + c, 54)\n\n    # In 3 years, Jackson will be 5 times as old as Chloe.\n    equation2 = Eq(j + 3, 5 * (c + 3))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (j, c))\n\n    # We need Jackson's age 3 years later.\n    jackson_age_in_3_years = solutions[j] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    additional_cost = total_cost - base_fare\n    additional_distance = additional_cost / additional_fare\n\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # if at least one student gets at least 3 apples\n    # then remaining apples are 80-3 = 77\n    # To find out the maximum number of students such that each student gets at least one apple,\n    # we distribute one apple per student, i.e., 77 apples to 77 students\n    # but since one student already got 3 apples, the class size must be one less than that\n    num_students = 77\n    return num_students\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yellow = symbols('yellow')\n    red = 2 * yellow\n    blue = 3 * yellow\n    total_balloons = Eq(red + yellow + blue, 150)\n    \n    number_of_yellow = solve(total_balloons, yellow)[0]\n    number_of_red = 2 * number_of_yellow\n    \n    return number_of_red\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolates = 8\n    original_chocolates = received_chocolates * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    \n    big_cars_needed = boys_in_big_cars // 4\n    small_cars_needed = girls_in_small_cars // 2\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_future_age = 100\n    \n    # Since the year is the same for all three to reach the total age, \n    # we can sum their current ages and find the difference to the target sum of ages\n    current_total_age = mother_age + father_age + julia_age\n    years_needed = total_future_age - current_total_age\n    \n    return years_needed\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    ounces_to_pounds = ounces / 16\n    pounds_to_kilograms = ounces_to_pounds / 2.2\n    return round(pounds_to_kilograms, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Sum for the increasing series from 5 to 80\n    series_sum_increasing = sum(range(5, 81))\n\n    # Sum for the decreasing series from 79 back to 5\n    series_sum_decreasing = sum(range(5, 80))\n\n    # Total sum of both series\n    total_sum = series_sum_increasing + series_sum_decreasing\n    \n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (a*100 + b*10 + c) + \\\n            (b*100 + c*10 + d) + \\\n            (c*100 + d*10 + e) + \\\n            (d*100 + e*10 + f) + \\\n            (e*100 + f*10 + g) + \\\n            (f*100 + g*10 + h) + \\\n            (g*100 + h*10 + i)\n        max_sum = max(max_sum, A)\n    return max_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 20 / 100)\n    final_price = 32 - 4\n    total_discount = (original_price - final_price) / original_price * 100\n    return total_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # There are 3 fixed relative positions for A, B, and C (A-B-C).\n    # The two remaining people (D and E) can be arranged in 2! ways.\n    # And the trio A-B-C can be positioned in the remaining 3 spots in 3! ways.\n    count_ABC = 2 * factorial(2)\n    positions_ABC = factorial(3)\n\n    return count_ABC * positions_ABC\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum_of_series = 0\n    for i in range(3, 2019, 7):\n        sum_of_series += 2019 / (i * (i + 7))\n    return sum_of_series\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (x // 10 - x % 10) ** 2\n\n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_permutations = sorted(set(permutations(digits, 6)))\n    answer = int(''.join(all_permutations[504]))  # Index 504 for the 505th number\n\n    return answer\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Initialize the digit count\n    digits_count = 3\n\n    # Initialize the possible digits\n    digits = [0, 2, 3]\n\n    # Initialize the count of numbers\n    count = 0\n\n    # Generate all possible three-digit numbers\n    for i in digits:\n        if i != 0:  # The first digit must not be 0\n            for j in digits:\n                for k in digits:\n                    if len(set([i, j, k])) == digits_count:  # All digits must be unique\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_students = 36\n    average_class = 89\n    average_girls = 88\n    average_boys = 91\n\n    # total score for the class is average * number of students\n    equation1 = Eq(girls * average_girls + boys * average_boys, total_students * average_class)\n    # total number of girls and boys is equal to total students\n    equation2 = Eq(girls + boys, total_students)\n\n    # since we're only looking for the number of girls, we can solve for girls\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_time = 27\n    total_work = 1\n    \n    # Let d be the days Alice takes off\n    for d in range(total_time):\n        if (total_time - d) * alice_work_rate + total_time * bob_work_rate >= total_work:\n            return d\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red, white / 2)\n    equation2 = Eq(white, 3 * black / 4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # 4 red socks and 4 blue socks\n    # Worst case scenario to ensure a matching pair:\n    # Taking out 5 socks guarantees 1 matching pair (since after 4 socks there could still be no pairs if we're really unlucky)\n    return 5\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # 120 is the 8th term, hence the common difference (d) can be found by:\n    # 120 - 105 = 15 (since 120 is the 8th term, 105 is the 7th)\n    d = 120 - 105\n\n    # Find the first term (a) using the 8th term formula: a + (n-1)d = term\n    # Hence, a + (8-1)*15 = 120 -> a = 120 - 7*15\n    a = 120 - 7 * d\n\n    # Now, we need to find the 100th term using the nth term formula: a + (n-1)d\n    # So for the 100th term: a + (100-1)*d\n    ans = a + (100 - 1) * d\n\n    return ans\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's call the number of Ryan's marbles R, and Audrey's marbles A\n    R, A = symbols('R A')\n\n    # Initial ratio of Ryan's to Audrey's marbles (2:7)\n    equation1 = Eq(R / A, 2 / 7)\n\n    # After changes, the new ratio (1:3)\n    equation2 = Eq((R + 20) / (A - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (R, A))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    # Each hour, the hour hand moves 360 degrees / 12 hours = 30 degrees\n    # Each minute, the minute hand moves 360 degrees / 60 minutes = 6 degrees\n\n    # At 8.30, the hour hand is 8.5 hours through its cycle\n    hour_angle = 8.5 * 30\n\n    # At 8.30, the minute hand is 30 minutes through its cycle\n    minute_angle = 30 * 6\n\n    # The angle we want is the absolute difference between the two\n    angle = abs(hour_angle - minute_angle)\n\n    # Since the maximum angle between any two points on a clock is 180 degrees,\n    # If we get a value greater than that, we subtract it from 360 degrees\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    apples_left = 20\n\n    total_apples = justin_apples + sisters_apples + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_past = 24  # Combined age 4 years ago\n    combined_age_future = combined_age_past + 3 * 4 + 3 * 2  # Add 4 years for each dog and then 2 more years for each\n    return combined_age_future\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_beads = 3 + 2 + 2  # Total beads in one pattern repetition\n    pattern_black_beads = 3  # Number of black beads in one pattern repetition\n\n    # Calculate completed pattern repetitions within the 65 beads\n    full_patterns = total_beads // pattern_beads\n\n    # Calculate remaining beads after the last full pattern\n    remaining_beads = total_beads % pattern_beads\n\n    # Calculate black beads in complete patterns\n    black_beads = full_patterns * pattern_black_beads\n\n    # Add black beads from the last incomplete pattern (if any)\n    if remaining_beads > 0 and remaining_beads <= 3:\n        # All remaining beads are black\n        black_beads += remaining_beads\n    elif remaining_beads > 3:\n        # Only the first 3 beads can be black (maximum black beads in a pattern)\n        black_beads += 3\n\n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    from datetime import timedelta, datetime\n    \n    total_minutes = 13 + 23 + 8 + 27\n    latest_arrival_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    latest_wake_up_time = latest_arrival_time - timedelta(minutes=total_minutes)\n    \n    return latest_wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1)**((i-1)//2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote chickens and ducks by c and cows by w\n    c, w = symbols('c w')\n\n    # We know that chickens and ducks have the same number\n    # chickens + ducks + cows = 51 heads\n    # 2c (since c = chickens = ducks) + w = 51\n    equation1 = Eq(2*c + w, 51)\n\n    # chickens (2 legs each) + ducks (2 legs each) + cows (4 legs each) = 160 legs\n    # 2c * 2 (since c = chickens = ducks) + w * 4 = 160\n    equation2 = Eq(2*2*c + 4*w, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, w))\n\n    # Number of chickens is what we've denoted as c\n    return solutions[c]\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # Coins denominations\n    coins = [1, 2, 5]\n    \n    # Set to store the unique totals that can be made with exactly 3 coins\n    unique_totals = set()\n    \n    # Generate all possible combinations of 3 coins and sum them up\n    for coin1 in coins:\n        for coin2 in coins:\n            for coin3 in coins:\n                total = coin1 + coin2 + coin3\n                unique_totals.add(total)\n    \n    # Count the unique totals\n    return len(unique_totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    for perm in permutations(range(4), 3):\n        entrances = set(perm)\n        if len(entrances) < 3:  # Joe and Mike use the same entrance\n            continue\n        total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # in nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = (time_days * 24) + time_hours  # converting total time into hours\n\n    average_speed = total_distance / total_time_hours  # calculating average speed\n\n    return round(average_speed)  # rounding to the nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of first punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in the first punch\n\n    volume2 = 3  # volume of second punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in the second punch\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n\n    last_multiple = (150 // 11) * 11\n\n    num_multiples = ((last_multiple - first_multiple) // 11) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the initial number of women, and m be the initial number of men.\n    w, m = symbols('w m')\n\n    # When 36 women left, the number of women became w - 36.\n    # At this point, w - 36 is 3/5 of the number of men, m.\n    equation1 = Eq(w - 36, 3/5 * m)\n\n    # Then, 48 men left, making the number of men m - 48.\n    # Now there is an equal number of men and women: m - 48 = w - 36 \n    equation2 = Eq(m - 48, w - 36)\n\n    # Solve the equations for w and m.\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Calculate the total initial number of people: w + m.\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_more = 777\n\n    remaining_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_more\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(20, 30))\n    return primes[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Fatouma's age\n    age = symbols('age')\n\n    # Create an equation based on the problem description\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    # Solve the equation\n    solution = solve(equation, age)\n\n    # Return Fatouma's age\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len(set([x1, x2, x3])) == 3:\n                    sorted_combination = sorted([x1, x2, x3])\n                    if sorted_combination not in combinations:\n                        combinations.append(sorted_combination)\n                        count += 1\n    return count, combinations\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # There are 132 - 124 + 1 = 9 possible heights\n    # To guarantee at least 4 students of the same height by Pigeonhole Principle,\n    # we need to have one more than 3 groups of 8 (one for each height), \n    # which is 3 * 8 + 1 = 25.\n    \n    # Calculate the minimum class size\n    class_size = 3 * 8 + 1\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n    value_of_x = solve(equation, x)\n\n    return value_of_x[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    english_books = 1849\n    total_books = 3154\n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To ensure a win, Fred should leave a multiple of 4 oranges for George.\n    # This way, no matter if George takes 1, 2, or 3 oranges, Fred can always\n    # take a number that makes the total taken (including George's move) equal to 4.\n\n    total_oranges = 15\n\n    # Fred needs to make the remaining number of oranges to be a multiple of 4.\n    # This is because whatever George takes (1, 2 or 3), Fred can take (3, 2 or 1)\n    # to make sure the remaining number of oranges George sees is always a multiple of 4.\n\n    for i in range(1, 4):  # Fred takes 1, 2 or 3 oranges\n        if (total_oranges - i) % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total_students = (go + checkers + chess) - (go_checkers + go_chess + checkers_chess) + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # let x be the number of years later\n    # the age of Oliver will be 20 + x\n    # the age of Lin will be 26 + x\n    # their sum of ages will be (20 + x) + (26 + x) = 48\n    # so we solve for x: 2x + 46 = 48\n    x = (48 - 46) // 2\n    return x\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    # Since there are no poles right outside her school and house,\n    # the total number of spaces between the poles is 40 - 1 = 39\n    number_of_poles = 40\n    distance_between_poles = 3  # in meters\n\n    # Calculate the total distance\n    total_distance = (number_of_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 245 and get the prime factors and their powers as a dictionary\n    factors_245 = factorint(245)\n    \n    # To make 245p a cube, each prime factor's power when multipled by p must be a multiple of 3\n    # Initialize p = 1\n    ans = 1\n    for prime, power in factors_245.items():\n        # Find the least power needed for the current prime factor to complete a cube\n        required_power = (3 - (power % 3)) % 3\n        # Multiply p by the prime raised to the required power\n        ans *= prime**required_power\n\n    return ans\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    ans = 736 / 100\n    return ans\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 2  # one sick and one personal leave\n    attendance_rate = (present_students / total_students) * 100\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 8\n    denominator_initial = 15\n    numerator_initial = 5\n\n    denominator_final = (numerator * denominator_initial) / numerator_initial\n\n    return denominator_final\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    # Generating all permutations of the numbers 0-9 for the variables E, S, A, M, O\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n\n        # Since E is the most significant digit in ESSE and S is in SASMO, \n        # they cannot be zero. It would also make SA and AS have the same value.\n        if E == 0 or S == 0 or A == 0:\n            continue\n\n        # Map the variables to their respective values\n        ESSE = (E * 1000) + (S * 100) + (S * 10) + E\n        SASMO = (S * 10000) + (A * 1000) + (S * 100) + (M * 10) + O\n\n        # Check if the equation is satisfied\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([(-1)**(i+1) * (64 - 2*i) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    return sum([k/(i+1) for i in range(1,2018) for k in range(1, i+1)])\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percent = 30\n    total_amount = 270\n    result = (percent / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year = 36000\n    last_year_min = this_year / 4\n    last_year = last_year_min + 1  # Since it has to be more than 1/4 of this year's production\n    \n    return int(last_year)\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position from front to back gives us the number of rows before Tim\n    # Since Tim is 4th from the front, there are 3 people in front of him.\n    rows_front = 4\n    \n    # Tim's position from back to front gives us the number of rows after Tim\n    # Since Tim is 3rd from the back, there are 2 people after him.\n    rows_back = 3\n    \n    # Tim's position from left to right gives us the number of columns to his left\n    # Since Tim is 1st from left, there are no people to his left.\n    columns_left = 1\n    \n    # Tim's position from right to left gives us the number of columns to his right\n    # Since Tim is 4th from right, there are 3 columns to his right.\n    columns_right = 4\n    \n    # Total number of rows = People in front of Tim + Tim's row + People after Tim\n    total_rows = rows_front + rows_back - 1  # Subtract 1 to count Tim's row only once\n    \n    # Total number of columns = Columns to the left of Tim + Columns to the right of Tim\n    total_columns = columns_left + columns_right - 1  # Subtract 1 to count Tim's column only once\n    \n    # Total number of band members is the product of the number of rows and columns\n    total_band_members = total_rows * total_columns\n    \n    return total_band_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    # Let's denote the number of apples as A and the number of oranges as O.\n    # The initial ratio of apples to oranges is 3:8, so we have A/O = 3/8.\n    # When one apple is removed, the ratio becomes 1:3, so we have (A-1)/O = 1/3.\n\n    # To solve these equations, we can equate the cross-products.\n    # From the first ratio, A = 3/8 * O (cross-multiplying gives us 8A = 3O)\n\n    # From the second ratio, A-1 = 1/3 * O (cross-multiplying gives us 3(A-1) = O)\n\n    # We will now use algebra to solve for O.\n    # Firstly, express A in terms of O using the first ratio:\n    A = 3/8 * O  # From A = 3/8 * O\n\n    # Now plug this expression for A back into the second ratio:\n    O = 3 * (A - 1)  # From (A-1) = 1/3 * O\n\n    # Replacing A with 3/8 * O gives us:\n    O = 3 * (3/8 * O - 1)\n    O = 9/8 * O - 3\n    # When we collect like terms, we get:\n    O - 9/8 * O = -3\n    O * (1 - 9/8) = -3\n    O * (-1/8) = -3\n    # Dividing both sides by -1/8 gives us O:\n    O = -3 / (-1/8)\n    O = 3 * 8\n\n    # The number of oranges is therefore:\n    return int(O)\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(100 - x))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_saving = 2.40\n    days_needed = total_amount / daily_saving\n    weeks_needed = days_needed / 7\n    # Since we need the least number of whole weeks, we round up\n    from math import ceil\n    return ceil(weeks_needed)\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    original_sum = sum(range(1, 15))  # sum of the numbers from 1 to 14\n    new_sum = original_sum + 2019\n\n    # there are 8 consecutive numbers and we don't know the first one, \n    # to find the first one we can set a variable x for it\n    # then the sum will be (x + (x+1) + ...(x+7)) which equals 8*x + 28\n    # by solving the equation 8x + 28 = new_sum for x we find the first number of the consecutive 8 numbers\n\n    for x in range(1, new_sum):\n        if 8 * x + 28 == new_sum:\n            return x\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    mixed_number = 6 + 1/2\n    divisor = 1/4\n\n    ans = mixed_number / divisor\n\n    return ans\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_frequencies = {letter: word.count(letter) for letter in set(word)}\n\n    ways = factorial(len(word))\n    for freq in letter_frequencies.values():\n        ways //= factorial(freq)\n\n    return ways\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Time taken for individual tasks\n    cut_wood = 3\n    weave_grass = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # Tasks that can be done simultaneously\n    # Cutting wood can be done at the same time as mowing grass and soaking cut grass\n    simultaneous_tasks = max(cut_wood + choose_wood, mow_grass + soak_grass)\n    # Adding time for drying the wood as it is the next step after both cutting wood and soaking grass are done\n    total_days = simultaneous_tasks + dry_wood\n    # Weave grass into rope can be done while wood is drying\n    total_days = max(total_days, weave_grass)\n    # Prepare food can be done on the last day, no additional day needed\n    total_days += prepare_food\n    \n    return total_days\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    \n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    brother_age = (ashley_age - 3) - 2\n    return brother_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rabbit, chicken, kangaroo = symbols('rabbit chicken kangaroo')\n    equation1 = Eq(2 * rabbit, 6 * chicken)\n    equation2 = Eq(3 * kangaroo, 4 * rabbit)\n\n    solutions = solve((equation1, equation2), (rabbit, chicken, kangaroo))\n\n    kangaroo_weight_in_chickens = solutions[kangaroo] / solutions[chicken]\n\n    return kangaroo_weight_in_chickens\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    ans = common_factor * (836 + 162 + 2)\n    return ans\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle and 7th from the front,\n    # this means she is also 7th from the back.\n    # Hence, there are 7 - 1 people in front of her and 7 - 1 people behind her.\n    total_dwarves = (7 - 1) * 2\n\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # To guarantee that the school with the most participants had at least 4 participants,\n    # we utilize the Pigeonhole Principle.\n    # If every school had 3 participants or less, then the school with the most would not reach 4.\n    # Therefore, we divide the total participants by 3 and round up to ensure at least 4 in one.\n    max_schools = -(-participants // 3)\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fractional_parts = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        sum_fractional_parts += fractional_part\n    return sum_fractional_parts\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "import math\n\ndef solution():\n    for num in range(1000, 10000):\n        if math.isqrt(num // 6)**2 == num // 6 and round((num * 6)**(1/3))**3 == num * 6:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_fast = 48\n    # Speed of the slower train\n    speed_slow = 36\n    # The faster train travels 70 km more than the slower train\n\n    # The time taken for both trains to meet is the same.\n    # Let 'time' be the time taken for both trains to meet.\n\n    # Distance covered by the faster train = speed_fast * time\n    # Distance covered by the slower train = speed_slow * time\n    \n    # The difference in distance is 70 km:\n    # (speed_fast * time) - (speed_slow * time) = 70\n    # time * (speed_fast - speed_slow) = 70\n\n    # Therefore, time = 70 / (speed_fast - speed_slow)\n    time = 70 / (speed_fast - speed_slow)\n\n    # Total distance between the two stations is the sum of the distances\n    # covered by both trains when they meet.\n    # Total distance = distance covered by faster train + distance covered by slower train\n    # Total distance = (speed_fast * time) + (speed_slow * time)\n    total_distance = (speed_fast * time) + (speed_slow * time)\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position from front to back gives the total number of rows\n    rows_front = 4\n    rows_back = 3\n    total_rows = rows_front + rows_back - 1\n\n    # Tim's position from left to right gives the total number of columns\n    columns_left = 4\n    columns_right = 7\n    total_columns = columns_left + columns_right - 1\n\n    # The total number of band members is the product of rows and columns\n    total_members = total_rows * total_columns\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 3 and number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    # After Lily gives Gigi 36 tonnes, Lily has 26 more than Gigi.\n    equation1 = lily - 36 - (gigi + 36) - 26\n\n    # Lily's wheat is 8 times Gigi's wheat.\n    equation2 = lily - 8 * gigi\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Total amount Zoey had before losing the coin\n    total_amount = 50 + 20 + 10 + 5\n\n    # Try each coin to determine which one she lost\n    for coin in [50, 20, 10, 5]:\n        if (total_amount - coin) == 2 * (total_amount - coin - total_amount // 2):\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Assuming a reasonable upper limit for number of boats\n        for students in range(1, 1000):  # Assuming a reasonable upper limit for number of students\n            if (boats + 1) * 6 == students and (boats - 1) * 9 == students:\n                return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pair_count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Start from i+1 to avoid repeating pairs\n            if (i + j) % 5 == 0:\n                pair_count += 1\n    return pair_count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    # Let x be the total number of chocolates and y be the number of friends.\n    # We have two equations based on the problem:\n    # Equation 1: x = 18y + 41 (If she gives each friend 18 pieces, she'll have 41 left)\n    # Equation 2: x = 23y - 34 (If she gives each friend 23 pieces, she'll be short of 34)\n    # Solve these equations to find x and y.\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x, 18 * y + 41)\n    equation2 = Eq(x, 23 * y - 34)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Now we know how many chocolates in total (x) and friends (y)\n    total_chocolates = solutions[x]\n    number_of_friends = solutions[y]\n    \n    # Now calculate leftovers if she gives each friend 20 chocolates\n    leftovers = total_chocolates - 20 * number_of_friends\n    \n    return leftovers\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_spent = 3/5 * rasidah\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = 6/7 * chai_seng\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng - chai_seng_spent, 1/2 * (rasidah - rasidah_spent))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens < 10:\n                for ones in range(hundreds + 1, 10):\n                    if ones + tens + hundreds + thousands == 16:\n                        return ones\n    return None\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    for first_digit in digits[1:]:  # Skip '0' for the first digit\n        for second_digit in digits:\n            if first_digit != second_digit:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    result = 371 + (24 + 19) * 3\n    return result\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    digits = [2, 4, 6, 8]\n    perms = permutations(digits)\n    for perm in perms:\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Amy's uphill and downhill distances are the same, so we'll calculate the distance first.\n    uphill_distance = 5 * 3  # speed * time\n    downhill_distance = 10 * 2  # speed * time\n    # Since the distances are the same, we only need one of them to calculate the average speed.\n    total_distance = uphill_distance  # or downhill_distance, as they are the same\n\n    # Calculate the total time for the whole trip.\n    total_time = 3 + 2  # uphill time + downhill time\n\n    # Calculate the average speed for the whole trip.\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed variables based on the problem statement\n    fixed_service_fee = 3\n    initial_rate_per_kwh = 2\n    additional_rate_per_kwh = 1\n    initial_kwh = 5\n    total_cost = 63\n\n    # Calculate the cost for the first 5 kwh\n    initial_cost = initial_kwh * initial_rate_per_kwh\n\n    # Calculate the remaining money after subtracting the fixed service fee and initial cost\n    remaining_money = total_cost - fixed_service_fee - initial_cost\n\n    # Calculate the number of additional kwh she can use with the remaining money\n    additional_kwh = remaining_money / additional_rate_per_kwh\n\n    # Calculate the total number of kwh she can use\n    total_kwh = initial_kwh + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_of_63 = 54\n    whole_number = 63\n    number_in_box = fraction_of_63 * 7 / whole_number\n    return int(number_in_box)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 400 + 10 * x + y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    # Factorize 4320\n    prime_factors = {\n        2: 5,  # 2^5\n        3: 3,  # 3^3\n        5: 1   # 5^1\n    }\n\n    # Each time we multiply by (3/2), we are effectively increasing the power of 3 by 1 and decreasing the power of 2 by 1.\n\n    # The power of 2 can decrease until it reaches 0 (since 2^0 = 1).\n    # The power of 3 can increase indefinitely (as it does not affect the integer status of the result).\n\n    # The range for n is therefore the current power of 2, which is 5. \n    # Hence the number of integer values for n is from 0 to 5 (inclusive).\n    \n    return prime_factors[2] + 1\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    # Amount of fruit juice in the first punch\n    juice1 = 20 * 0.35\n    # Amount of fruit juice in the second punch\n    juice2 = 30 * 0.60\n    # Total amount of punch after mixing\n    total_punch = 20 + 30\n    # Total amount of fruit juice after mixing\n    total_juice = juice1 + juice2\n    # Calculate the percent concentration of the new mixture\n    percent_concentration = (total_juice / total_punch) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the original amount of grain in warehouse B\n    original_b = symbols('original_b')\n\n    # Warehouse A originally had 50 tons and received an additional 12 tons\n    final_a = 50 + 12\n\n    # Warehouse B originally had 'original_b' tons and shipped out 16 tons\n    final_b = original_b - 16\n\n    # Create an equation for the problem statement\n    # The final amount in warehouse A is twice the amount in warehouse B\n    equation = Eq(final_a, 2 * final_b)\n\n    # Solve the equation\n    solution = solve(equation, original_b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total number of pupils who passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Number of pupils who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # At least one test passed is equal to the sum of passed in each subject minus the number\n    # of pupils who passed two tests minus twice the number of pupils who passed all three tests\n    # Since we need to find the maximum number of pupils that passed all three tests,\n    # we assume no pupils passed only two tests\n    passed_only_two_tests = 0\n    \n    # We use the principle of inclusion-exclusion to find the maximum possible value for pupils\n    # that passed all three tests\n    max_passed_all_three = passed_math + passed_science + passed_english - total_passed_at_least_one - 2 * passed_only_two_tests\n    \n    # If the calculation is negative, it means the maximum number cannot be below 0, so we take 0\n    max_passed_all_three = max(0, max_passed_all_three)\n    \n    return max_passed_all_three\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    prime_numbers = [29, 31, 37, 41, 43]  # List of consecutive prime numbers\n    return prime_numbers[2]  # The missing prime number in the sequence\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    per_box = 6\n\n    boxes = (cookies + per_box - 1) // per_box\n\n    return boxes\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen the fisher trades 3 fishes for 1 rabbit.\n    fishes_per_rabbit = 3\n\n    # Oscar the hunter trades 2 rabbits for 3 packs of wheat.\n    rabbits_per_pack_of_wheat = 2 / 3\n\n    # Calculate the number of fishes Owen needs to give Dennis for 1 pack of wheat.\n    fishes_per_pack_of_wheat = fishes_per_rabbit * rabbits_per_pack_of_wheat\n\n    return fishes_per_pack_of_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Assume a reasonable upper limit for the number of people\n        if (people + 7) % 3 == 0 and (people - 7 * 3) % 7 == 0:\n            return people\n    return None\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    pencils = 0\n    for i in range(400, 501):\n        if i % 4 == 1 and i % 5 == 2 and i % 7 == 4:\n            pencils = i\n            break\n    return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # since x1 can be 0\n        for x2 in range(10):  # since x2 can be 0\n            for x3 in range(10):  # since x3 can be 0\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Given data in the problem\n    dell_stickers = 32\n\n    # Dell had twice as many stickers as Ginnie\n    ginnie_stickers = dell_stickers // 2\n\n    # Ginnie had 4 times as many stickers as Lyn\n    lyn_stickers = ginnie_stickers // 4\n\n    # Total stickers Ginnie and Lyn had altogether\n    total_stickers = ginnie_stickers + lyn_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return 21 - 11\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    share = (total_amount / ratio_sum) * 3  # The bigger share corresponds to the bigger part of the ratio\n\n    return share\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):       # First digit: 1-9 odd numbers\n        for j in range(0, 10):      # Second digit: 0-9\n            for k in range(0, 10):  # Third digit: 0-9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the empty bottle mass and the mass of apple juice per fraction of the bottle\n    empty_mass, juice_per_fraction = symbols('empty_mass juice_per_fraction')\n    \n    # Two equations: one for 5/6 filled and one for 2/3 filled\n    equation1 = Eq((5/6) * juice_per_fraction + empty_mass, 4.6)\n    equation2 = Eq((2/3) * juice_per_fraction + empty_mass, 4.45)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (empty_mass, juice_per_fraction))\n    \n    # The mass of the empty bottle in grams (1000 grams in a kilogram)\n    empty_bottle_mass_grams = solutions[empty_mass] * 1000\n    \n    return empty_bottle_mass_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    favourite_number = symbols('favourite_number')    \n    equation = Eq(favourite_number * 2 - 3, 19)\n    \n    solution = solve(equation, favourite_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    digits_per_section = [9, 180, 2700]  # section1: 1-9, section2: 10-99, section3: 100-999\n    digits_count = 0\n    section = 0\n    pages = 0\n\n    # Find in which section the total_digits ends\n    while digits_count < total_digits and section < len(digits_per_section):\n        if digits_count + digits_per_section[section] < total_digits:\n            digits_count += digits_per_section[section]\n            section += 1\n        else:\n            break\n\n    # Calculate the pages up to the beginning of this section\n    for i in range(1, section):\n        pages += 9 * 10**(i - 1)\n\n    # Calculate the remaining pages\n    remaining_digits = total_digits - digits_count\n    pages_per_digit_in_section = 10**(section)\n    pages += remaining_digits // (section + 1)\n\n    return pages\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    total = sum((-1)**(i+1) * i for i in range(1, 21))\n    return total\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    # This is not a geometric sequence. It's quadratic.\n    # The n-th term of the sequence is given by T(n) = n^2 + n - 1\n    n = 10  # Start with 10 because it's the first two-digit number\n    while True:\n        term = n**2 + n - 1\n        if term >= 100:  # Stop when we reach three digits\n            # Previous term will be the largest two-digit number\n            ans = (n - 1)**2 + (n - 1) - 1\n            break\n        n += 1  # Increment to check the next term\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let x be Adam's weight, y be Ben's weight, and z be Carl's weight.\n    # We have the following system of equations:\n    # x + y = 102\n    # y + z = 97\n    # x + z = 93\n\n    # Adding all the equations together, we get 2(x + y + z) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    # Now we divide by 2 to get the total weight of Adam, Ben, and Carl\n    total_weight = total_double / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    for magazines in range(23):\n        books = (23 - magazines * 1.6) / 3.4\n        if books.is_integer():\n            return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38  # After giving 38, Andy and his sister have the same number\n    sister_notebooks_at_first = sister_notebooks - 38  # Subtract the 38 notebooks given to find initial amount\n\n    return sister_notebooks_at_first\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = 2 * ashley\n    justin = 10 * ashley\n\n    equation = Eq(justin - crystal, 64)\n\n    ashley_pages = solve(equation, ashley)[0]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n\n    total_pages = ashley_pages + crystal_pages + justin_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):\n        if int(str(age) + '0', 3) == age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratios and remaining flowers\n    ratio_orchids_to_tulips = Eq(3 * tulips, 5 * orchids)\n    sold_orchids = 0.40 * orchids\n    sold_tulips = 1/5 * tulips\n    sold_roses = 0.25 * roses\n    remaining_flowers = Eq(3616 - (sold_orchids + sold_tulips + sold_roses), 2644)\n\n    # Total number of flowers originally\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n\n    # Solve the system of equations\n    solutions = solve((ratio_orchids_to_tulips, remaining_flowers, total_flowers), (orchids, tulips, roses))\n\n    # Return the number of orchids\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors_7 = []\n    # Finding factors of 7007 that are multiples of 7 and have 2 digits.\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors_7.append(i)\n            # Since there would be only two such 2-digit factors of 7007,\n            # we can break once we find both\n            if len(factors_7) == 2:\n                break\n    # Summing the two factors\n    ans = sum(factors_7)\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    # Since the table can be rotated, fix one person's position and arrange the remaining 6\n    ans = factorial(6)\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # We need to find partitions of the number 10 into exactly 3 parts.\n    # We can use the stars and bars theorem here.\n    # If we have n identical items to put into k distinct bins/boxes/piles then the answer is C(n+k−1,k−1).\n    # For Shaun's problem, n=10 identical pins and k=3 piles.\n    \n    from math import comb\n    n = 10\n    k = 3\n    \n    # We subtract 1 from each k since at least one pin must be in each pile.\n    ans = comb(n + k - 1 - (k - 1), k - 1)\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n    \n    for prime in range(2, 55):\n        if isprime(prime) and isprime(55 - prime):\n            return prime * (55 - prime)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    return 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given 1 cookie costs $9\n    cookie_price = 9\n    \n    # Given 3 pieces of cheesecake is equal to the cost of 5 cookies\n    cheesecake_price_for_3 = 5 * cookie_price\n    \n    # Given the cost of 3 pieces of chocolate cake is equal to the cost of 2 pieces of cheesecake\n    # the cost for 1 piece of cheesecake is cheesecake_price_for_3 / 3\n    chocolate_cake_price_for_3 = 2 * (cheesecake_price_for_3 / 3)\n    \n    # the cost for 1 piece of chocolate cake is chocolate_cake_price_for_3 / 3\n    chocolate_cake_price_for_1 = chocolate_cake_price_for_3 / 3\n    \n    return chocolate_cake_price_for_1\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of basketball and volleyball\n    cost_basketball, cost_volleyball = symbols('cost_basketball cost_volleyball')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(2 * cost_basketball + 3 * cost_volleyball, 195)\n    equation2 = Eq(4 * cost_basketball + 5 * cost_volleyball, 355)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (cost_basketball, cost_volleyball))\n    \n    return solutions[cost_volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Digits must be different\n                if len({2, 0, A, M, C, 1, 9}) == 7:\n                    # The number 20AMC19 must be divisible by 9\n                    if (2 + 0 + A + M + C + 1 + 9) % 9 == 0:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    total_candy = 36\n    valeria_candy_left = 22\n    mike_candy_left = 6\n    # Calculate how many candies they eat\n    candies_eaten_each = (total_candy - mike_candy_left - valeria_candy_left) // 2\n    # Calculate Valeria's initial amount of candy\n    valeria_initial_candy = valeria_candy_left + candies_eaten_each\n    \n    return valeria_initial_candy\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    fraction_read_per_day = 1/4 / 3\n    days_to_finish_book = 1 / fraction_read_per_day\n    return days_to_finish_book\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n    equation1 = Eq(mother - melissa, 32 - 8)\n    equation2 = Eq(mother, 3 * melissa)\n\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_part = [8, 5, 7, 1, 4, 2]  # digits in the recurring cycle\n    cycle_length = len(recurring_part)\n    sum_of_digits = sum(recurring_part)  # sum of one complete cycle\n    full_cycles = 58 // cycle_length\n    remaining_digits = 58 % cycle_length\n    \n    total_sum = sum_of_digits * full_cycles + sum(recurring_part[:remaining_digits])\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert recurring decimal 4.7373... to a fraction\n    recurring_decimal = 4 + Fraction(737, 999)\n    non_recurring_decimals = [4.73, 4.77, 4.737]\n\n    # Add the recurring decimal to the list as float\n    non_recurring_decimals.append(float(recurring_decimal))\n\n    # Find the smallest value\n    smallest_decimal = min(non_recurring_decimals)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    # Reverse operation of Joel's removal\n    before_joel = (remaining_plants + 2) * 2\n    # Reverse operation of Valerie's removal\n    before_valerie = (before_joel + 3) * 2\n    # Reverse operation of Ethan's removal\n    original_plants = (before_valerie + 1) * 2\n    \n    return original_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # Train's length in meters\n    tunnel_length = 544  # Tunnel's length in meters\n    speed = 52  # Train's speed in meters/second\n\n    # Total distance the train has to cover to completely pass through the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time = Distance / Speed\n    time_to_pass = total_distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    sold_second_batch = (remaining_eggs / 2) + 7\n    total_after_first_sale = remaining_eggs + sold_second_batch\n    sold_first_batch = (total_after_first_sale / 2) - 16\n    initial_eggs = total_after_first_sale + sold_first_batch\n    return int(initial_eggs)\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 1.40  # 40% increase\n\n    original_price = increased_price / increase_percentage\n\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "from sympy import symbols, Eq, solve, sqrt\n\ndef solution():\n    # Let x be the length of the cube edge.\n    x = symbols('x')\n\n    # Use Pythagorean theorem in the right-angle triangles PAB, PAC, PAD, and PAG.\n    # AB is a diagonal on a face of the cube\n    # so by Pythagorean theorem:\n    PA_AB = Eq(x**2 + x**2, 60*sqrt(10)**2)\n    \n    # AC is an edge of the cube so PC = x\n    PA_AC = Eq(x**2, 60*sqrt(5)**2)\n    \n    # AD is a diagonal on a face of the cube\n    # so by Pythagorean theorem:\n    PA_AD = Eq(x**2 + x**2, 120*sqrt(2)**2)\n    \n    # AG is a space diagonal of the cube\n    # so by Pythagorean theorem:\n    PA_AG = Eq(x**2 + x**2 + x**2, 36*sqrt(7)**2)\n    \n    # We only need to solve one of the equations for x, all should give the same solution\n    # Hence, solving for x using PAC that only includes one power of x.\n    cube_edge = solve(PA_AC, x)[0]  # selecting the positive solution\n\n    # Use this to find PA in PAG by substituting the cube edge we got.\n    PA = sqrt(PA_AG.lhs.subs(x, cube_edge)).evalf()\n\n    return PA\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let x be the number of P1 students and y be the number of P6 students.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Each P6 student carried 2 buckets of water -> 2 * y buckets.\n    # 2 P1 students carried 1 bucket of water -> 1/2 * x buckets (since each pair of P1 students carried 1 bucket).\n    # There are a total of 120 students -> x + y = 120\n    # There were a total of 180 buckets of water -> 1/2 * x + 2 * y = 180\n\n    equation1 = Eq(x + y, 120)\n    equation2 = Eq(1/2 * x + 2 * y, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_first_toss = 2  # Heads or Tails\n    outcomes_second_toss = 2  # Heads or Tails\n    \n    total_outcomes = outcomes_first_toss * outcomes_second_toss\n    \n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    result = 7 / (1/3)\n    return result\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n    greatest_common_divisor = gcd(pencils, pens)\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Ratio of fish to rabbit: 3 fish for 1 rabbit\n    fish_to_rabbit = 3 / 1\n\n    # Ratio of rabbit to wheat packs: 1 rabbit for 3/2 packs of wheat\n    rabbit_to_wheat = 1 / (3/2)\n\n    # Total ratio of fish to wheat packs\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    return fish_to_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's initial solution\n    incorrect_answer = 9 * 2 + 4  # This is the error\n\n    # To find the correct number that when divided by 4 gives a quotient of 9 and a remainder of 2\n    correct_quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Calculate the correct answer\n    correct_answer = correct_quotient * divisor + remainder\n\n    # The answer is correct if the incorrect_answer is the same as the correct_answer\n    is_correct = incorrect_answer == correct_answer\n\n    return correct_answer, is_correct\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            if dice1 + dice2 == 8:\n                count += 1\n                ways.append((dice1, dice2))\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return int(total_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    # Let the total number of students at first be x\n    # Initially, the number of boys is 40% of x, so number of girls is 60% of x\n    # After 16 boys leave and 16 girls enter, the boys make up 2/15 of the students\n\n    # Setup the equation based on the above information\n    # Initially: boys = 0.4 * x, girls = 0.6 * x\n    # Finally: (0.4 * x - 16) / (x + 16 - 16) = 2/15\n    # Solve the equation to find the value of x\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((0.4 * x - 16) / x, 2/15)\n    \n    total_students_initially = solve(equation, x)[0]\n\n    # Now calculate the number of girls after the change\n    # Initially, girls = 0.6 * x\n    # After the change: girls_now = 0.6 * x + 16\n\n    girls_now = 0.6 * total_students_initially + 16\n    \n    return int(girls_now)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n    \n    # Generate all possible permutations with 1, 2, and 3 digit numbers\n    for i in range(1, 4):\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if isprime(num) and num < 100:\n                primes.add(num)\n    \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    # Perform the calculations step by step\n    numerator = (3 + 1/3) * 1.9 + 19.5 / (4 + 1/2)\n    denominator = (62/75) - 0.16\n    first_fraction = numerator / denominator\n    \n    second_numerator = 3.5 + (4 + 2/3) + (2 + 2/15)\n    second_denominator = 0.5 * (1 + 1/20 + 4.1)\n    second_fraction = second_numerator / second_denominator\n    \n    ans = first_fraction / second_fraction\n    \n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for n in range(1000, 10000):  # Four-digit numbers range from 1000 to 9999\n        str_n = str(n)\n        # Generate M for each possible digit removal\n        for i in range(4):\n            m = int(str_n[:i] + str_n[i+1:])\n            if n - m == 2021:\n                return n    # Return N when the condition is satisfied\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'b' represent the cost of one banana and 'p' represent the cost of one pear.\n    b, p = symbols('b p')\n    \n    # Max buys 1 banana and 2 pears for 94p.\n    equation1 = Eq(b + 2 * p, 94)\n    \n    # Emily buys 1 banana and 1 pear for 62p.\n    equation2 = Eq(b + p, 62)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # Return the cost of one banana.\n    return solutions[b]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    both = swimming + jogging - (total_students - neither)\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # The rate at which A can complete the job per day\n    rate_a = 1 / 15\n    # The rate at which B can complete the job per day\n    rate_b = 1 / 10\n    # The rate at which A and B can complete the job together per day\n    rate_both = rate_a + rate_b\n    \n    # The work completed after 4 days\n    work_completed = rate_both * 4\n    \n    # The remaining work to be completed\n    remaining_work = 1 - work_completed\n    \n    # The number of days B will take to finish the remaining work\n    days_b = remaining_work / rate_b\n    \n    return days_b\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    first_term = (1 + 0.23 + 0.34)\n    second_term = (0.23 + 0.34 + 0.65)\n    third_term = (1 + 0.23 + 0.34 + 0.65)\n    fourth_term = (0.23 + 0.34)\n    \n    ans = first_term * second_term - third_term * fourth_term\n    \n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    # The first and the last tree are planted at the opposite ends of the road.\n    # So we subtract these end points from the length of the road and then\n    # divide by the distance between trees. Finally, we add 1 for the first tree\n    # and 1 for the last tree that are at the ends of the road.\n    num_trees = ((road_length - tree_distance) // tree_distance) + 2\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda's rate in problems/minute\n    cici_rate = 1 / 6   # Cici's rate in problems/minute\n    \n    total_rate = linda_rate + cici_rate     # Combined rate in problems/minute\n    time = 2 * 60                           # Total time in minutes\n\n    total_problems = total_rate * time   # Total problems done together\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    difference = 4\n\n    # Let x be the number of apples Amy gives to John.\n    # Then Amy will have (amy_initial - x) apples left\n    # John will have (john_initial + x) apples\n    # We want to find x such that (amy_initial - x) = (john_initial + x) + difference\n\n    # rearrange the equation to find x\n    x = (amy_initial - john_initial - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    # Find the odd number greater than 13 and less than 17\n    for num in range(14, 17):\n        if num % 2 != 0:\n            return num\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    goats_to_rabbits_ratio = 4\n    total_rabbits_for_15_days = 14 * goats_to_rabbits_ratio\n    days_for_70_rabbits = 8\n\n    # Total daily consumption for 70 rabbits\n    daily_consumption_70_rabbits = 70 / days_for_70_rabbits\n\n    # Total daily consumption for the equivalent number of rabbits\n    daily_consumption_14_goats = total_rabbits_for_15_days / 15\n\n    # Since both consume the same piece of pasture, we equate the daily consumption\n    # Total capacity of pasture (in \"rabbit days\")\n    total_capacity = daily_consumption_70_rabbits * 15\n\n    # Daily consumption of 17 goats (as equivalent number of rabbits)\n    daily_consumption_17_goats = 17 * goats_to_rabbits_ratio\n\n    # Daily consumption of 20 rabbits\n    daily_consumption_20_rabbits = 20\n\n    # Total daily consumption for 17 goats and 20 rabbits\n    total_daily_consumption = daily_consumption_17_goats + daily_consumption_20_rabbits\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    num_days = total_capacity / total_daily_consumption\n\n    return num_days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_of_numbers = 37\n    total_sum = mean_of_numbers * 10\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    X, Y, Z = symbols('X Y Z')\n\n    # Create the equations based on the given conditions\n    equation1 = Eq(X, Y + 83)\n    equation2 = Eq(Z, X + 24)\n    equation3 = Eq(X + Y + Z, 283)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n\n    # Return the result for the number of Prizes Y\n    return solutions[Y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    answer = tens + tenths + hundredths\n\n    return answer\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "网络故障，请重试"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for each person's erasers\n    tasha, sandra, riley = symbols('tasha sandra riley')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha, riley + 60)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    total_height = 45\n    daily_climb = 10\n    height_after_climbing = 0\n    night_slide = 0\n    days = 0\n\n    while height_after_climbing < total_height:\n        days += 1\n        height_after_climbing += daily_climb\n        if height_after_climbing >= total_height:\n            break\n        night_slide += 1\n        height_after_climbing -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    a, b = 4, 3\n    ans = sum(int(str(a) * i) for i in range(1, b + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january = 13\n    february = 18\n    march = 5\n    mean_savings = (january + february + march) / 3\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # Convert the word 'Angel' and the original password to lists of integers\n    angel = [0, 1, 4, 1, 7, 0, 5, 0, 2, 1]\n    angel_word = ['A', 'n', 'g', 'e', 'l']\n    \n    # Create a mapping from the letters to the digits\n    angel_map = dict(zip(angel_word, angel))\n    \n    # Define the word 'Devil' and map the letters to numbers using the angel_map\n    devil_word = ['D', 'e', 'v', 'i', 'l']\n    devil_password = [angel_map.get(letter, '*') if letter in angel_map else '*' for letter in devil_word]\n    \n    # Andy's attempt\n    andy_attempt = [4, 0, 0, 5, 2, 2, 0, 9, 1, 2]\n\n    # Check if Andy's attempt matches the correct combination\n    correct_password = [angel_map.get(letter, '*') for letter in devil_word] * 2  # Assuming pattern repeats\n    \n    # Convert the numbers back to a single string\n    correct_password_str = ''.join(map(str, correct_password))\n    andy_attempt_str = ''.join(map(str, andy_attempt))\n\n    # Check if Andy can unlock the treasure chest\n    if andy_attempt_str == correct_password_str:\n        return True  # Andy's attempt is correct\n    else:\n        return correct_password_str  # Andy's attempt is incorrect and here is the correct password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # Using the \"stars and bars\" theorem to find the number of ways to split the number 6\n    # into two or more positive numbers, we subtract the cases where there's only one number (which is 1: just 6)\n    # and the case where there are 6 ones to distribute (which is 1). \n    # This corresponds to the binomial coefficient C(n - 1, k - 1).\n    # Since we want at least two numbers, the number of bars (k - 1) is at least 1, which means k is at least 2.\n    # For n = 6 and k ranging from 2 to 6, we have:\n    # C(6 - 1, 2 - 1) + C(6 - 1, 3 - 1) + C(6 - 1, 4 - 1) + C(6 - 1, 5 - 1) + C(6 - 1, 6 - 1)\n    #\n    # We sum these up to get the total number of ways.\n    from math import comb\n    total_ways = sum(comb(6 - 1, k - 1) for k in range(2, 7))\n    return total_ways\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert repeating decimals to fractions\n    d1 = Fraction(1, 90)  # 0.01\n    d2 = Fraction(12, 90)  # 0.12\n    d3 = Fraction(23, 90)  # 0.23\n    d4 = Fraction(34, 90)  # 0.34\n    d5 = Fraction(45, 90)  # 0.45\n    d6 = Fraction(54, 90)  # 0.54\n    d7 = Fraction(78, 90)  # 0.78\n\n    # Calculate the sum of fractions\n    total = d1 + d2 + d3 + d4 + d5 + d6 + d7\n\n    # Convert fraction to decimal form\n    ans = float(total)\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    x, a = symbols('x a', real=True, positive=True)\n    expr1 = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n    sol = solve(expr1, x)\n    \n    # Since we have the condition a > 0, we take the positive root for x\n    x_value = sol[0]\n    \n    expr2 = sqrt(x_value**2 + 8 * x_value)\n\n    ans = expr2.subs(x, x_value)\n    \n    # Simplify the expression (if needed) and return as answer\n    return ans.simplify()\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for x in range(2017, 2036):\n        for y in range(x + 1, 2036):\n            for z in range(y + 1, 2036):\n                if (x + y + z) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    min_sheep_in_max_pen = (total_sheep + total_pens - 1) // total_pens\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for number in range(300, 401):\n        if (number % 3 == 2 and\n            number % 4 == 2 and\n            number % 5 == 2 and\n            number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_choir = 45\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age_choir = total_age_boys + total_age_girls\n\n    mean_age_choir = total_age_choir / total_choir\n\n    return mean_age_choir\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel = '0141705021'\n    devil = '4005220912'\n\n    # Create a dictionary to track the count of each digit in \"Angel\"\n    angel_count = {str(i): angel.count(str(i)) for i in range(10)}\n    \n    # Create a dictionary to track the count of each digit in \"Devil\"\n    devil_count = {str(i): devil.count(str(i)) for i in range(10)}\n\n    # Check if the count of each digit in \"Angel\" is the same as in \"Devil\"\n    can_unlock = angel_count == devil_count\n\n    # If Andy can unlock, return 'Yes' and the reason\n    if can_unlock:\n        return \"Yes\"\n    else:\n        # If Andy cannot unlock, find the correct password by sorting \"Devil\"\n        correct_password = ''.join(sorted(angel))\n        return correct_password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 6), (8, 13)]\n    ans = solve_congruence(*congruences)\n\n    return next(num for num in ans if 200 < num < 300)\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 12, 16)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Maximum balls to pick from each color to not get 5 of the same color\n    # is one less than 5 for each color.\n    max_green = 4\n    max_yellow = 4\n    max_red = 2  # There are only 2 red balls so picking both won't give us 5 of the same color.\n\n    # Now we calculate how many balls we must take to be sure of having 5 of the same color.\n    # This would be the worst case scenario where we pick the maximum number of each color without getting 5 of the same.\n    # Then we add one, because the next ball we pick must be the 5th ball of some color.\n    balls_required = max_green + max_yellow + max_red + 1\n    \n    return balls_required\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    table, chair = symbols('table chair')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25  # This is the step between the terms in the sequence\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # We need to find a_1 (the first term), we know a_n (the last term shown) and d (the common difference).\n    # So we rearrange the formula to solve for a_1: a_1 = a_n - (n - 1)d\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # length of the swimming pool in meters\n    sam_speed = 1     # Sam's speed in meters per second\n    ben_speed = 0.6   # Ben's speed in meters per second\n    total_time = 600  # Total time in seconds (10 minutes * 60 seconds)\n\n    # Calculate the combined speed of Sam and Ben\n    combined_speed = sam_speed + ben_speed\n\n    # Calculate the total distance both will cover when they meet\n    total_distance_when_meet = combined_speed * total_time\n\n    # Calculate the number of times they meet by dividing the total distance by pool length\n    meets = total_distance_when_meet / pool_length\n\n    return int(meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    return a * b + c * d\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    ans = max(temperatures) - min(temperatures)\n    return ans\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    # Average height of Bob and Cindy\n    avg_bob_cindy = 120\n    # Total height of Bob and Cindy combined\n    total_bob_cindy = avg_bob_cindy * 2\n    # Height of Doris\n    height_doris = 126\n    # Total height of all three children\n    total_three_children = total_bob_cindy + height_doris\n    # Average height of all three children\n    avg_three_children = total_three_children / 3\n\n    return avg_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be Destin's current age and n be his nephew's age\n    d, n = symbols('d n')\n\n    # In 6 years, Destin will be twice his nephew's age\n    equation1 = Eq(d + 6, 2 * (n + 6))\n\n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((d - 6) / (n - 6), 5)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (d, n))\n\n    # Calculate the sum of their ages in 10 years\n    sum_of_ages_in_10_years = solution[d] + 10 + solution[n] + 10\n    \n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n    total_pencils = 35 * 40\n\n    equation = Eq(20 * boys + 60 * girls, total_pencils)\n\n    num_boys = solve(equation, boys)[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the number of pies Mrs Tan had originally.\n    # Let 'l' be the number of pies Mrs Lim had originally.\n    t, l = symbols('t l')\n\n    # Mrs Tan bought another 12 pies -> t + 12\n    # Mrs Lim gave away 4 pies -> l - 4\n    # Mrs Tan has twice as many pies as Mrs Lim -> t + 12 = 2 * (l - 4)\n\n    # Set up the equation based on the problem statement.\n    equation = Eq(t + 12, 2 * (l - 4))\n\n    # t and l are equal initially.\n    same_pies_condition = Eq(t, l)\n\n    # Solve the system of equations.\n    solutions = solve((equation, same_pies_condition), (t, l))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        ""
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"6:35 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"10:22 AM\", \"%I:%M %p\")\n    duration = end_time - start_time\n    return duration.seconds // 60\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    num_repeats = 50 // len(pattern)\n    remaining_digits = 50 % len(pattern)\n    \n    sum_repeated = sum(map(int, pattern)) * num_repeats\n    sum_remaining = sum(map(int, pattern[:remaining_digits]))\n    \n    ans = sum_repeated + sum_remaining\n    \n    return ans\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3/5) / (5/7) / (7/9) / (9/13) / (13/15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3 / 5\n    fraction_second_group = 1 / 4\n    \n    sweets_first_group = fraction_first_group * total_sweets\n    num_students_first_group = sweets_first_group / 6\n    \n    remainder_sweets = total_sweets - sweets_first_group\n    sweets_second_group = (remainder_sweets * fraction_second_group)\n    num_students_second_group = sweets_second_group / 4\n    \n    sweets_third_group = remainder_sweets - sweets_second_group\n    num_students_third_group = sweets_third_group / 5\n    \n    total_students = num_students_first_group + num_students_second_group + num_students_third_group\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from sympy import factorint\n    \n    # List of numbers on cards\n    numbers = [6, 12, 35, 175, 245, 300]\n    # Dictionary to store the prime factors for each number\n    factors_dict = {number: factorint(number) for number in numbers}\n    \n    # Helper function to calculate the product of the prime factors\n    def calculate_product(factors):\n        product = 1\n        for key in factors:\n            product *= key ** factors[key]\n        return product\n    \n    # Loop through the combinations and find the two groups with equal product\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            # Choose 2 cards for Candy\n            candy_product = calculate_product(factors_dict[num1]) * calculate_product(factors_dict[num2])\n            remaining_numbers = [num for num in numbers if num not in (num1, num2)]\n            \n            # Loop through the combinations for 3 cards that Candice could pick\n            for j, c_num1 in enumerate(remaining_numbers):\n                for k, c_num2 in enumerate(remaining_numbers[j+1:]):\n                    for c_num3 in remaining_numbers[k+1:]:\n                        # Choose 3 cards for Candice\n                        candice_product = (calculate_product(factors_dict[c_num1]) *\n                                           calculate_product(factors_dict[c_num2]) *\n                                           calculate_product(factors_dict[c_num3]))\n                        # Compare the products of Candy and Candice\n                        if candy_product == candice_product:\n                            # Find which number was not picked\n                            total_numbers = set(numbers)\n                            picked_numbers = {num1, num2, c_num1, c_num2, c_num3}\n                            unpicked = list(total_numbers - picked_numbers)\n                            if len(unpicked) == 1:\n                                return unpicked[0]\n                            \nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Let Tom's current age be T and his father's current age be F\n    T = 10  # Tom's current age\n\n    # We know from the problem that when Tom reaches his father's current age (F),\n    # his father will be 70 years old. Let's say the number of years it will take for\n    # Tom to reach his father's current age is Y. So, we have:\n\n    # F + Y = 70 (1)  -> Father will be 70 years old.\n    # T + Y = F  (2)  -> Tom will reach his father's current age.\n\n    # From equation (2) we get Y = F - T\n\n    # Substituting the value of Y in equation (1):\n    # F + (F - T) = 70\n    # 2 * F - T = 70\n    # 2 * F - 10 = 70\n\n    F = (70 + T) / 2\n\n    return F\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return True\n        return False\n    \n    def can_be_split(n):\n        for a in range(4, n-7, 2):\n            for b in range(4, n-a-3, 2):\n                c = n - a - b\n                if is_composite(a) and is_composite(b) and is_composite(c):\n                    return True\n        return False\n\n    for number in range(999, 2, -2):\n        if not can_be_split(number):\n            ans = number\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_A = 25\n    packet_B = 20\n\n    # Finding least common multiple of packet sizes\n    days_to_sync = lcm(packet_A, packet_B)\n\n    # March 1st is the starting point (1 day already accounted for)\n    next_start_day = days_to_sync + 1\n\n    # Days in each month (assuming non-leap year for simplicity)\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    current_day = 1\n    month_index = 2  # Starting from March (0-indexed, so 2 represents March)\n\n    # Loop through each month and subtract the number of days in the month\n    # until we find which month the next start day falls in.\n    while next_start_day > days_in_months[month_index]:\n        next_start_day -= days_in_months[month_index]\n        month_index += 1\n        if month_index >= len(days_in_months):  # If we go past December, return to January\n            month_index = 0\n\n    # The month_index is 0-indexed, so we need to add 1 for the actual month number (1=January, 2=February, etc.)\n    actual_month = month_index + 1\n\n    return actual_month, next_start_day\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    number1 = 17\n    number2 = 35\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    bigger_amount = (3 + 1/4) - (1 + 3/4)\n    return round(bigger_amount, 2)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    # Define the total prize money and the amount each boy and girl receives\n    total_prize = 580\n    boy_amount = 8\n    girl_amount = 5\n\n    # Let the number of girls be x, and thus the number of boys would be 3x,\n    # since there are thrice as many boys as girls.\n    # total_prize = boy_amount * (3x) + girl_amount * x\n    \n    # Rearrange the equation: total_prize = (boy_amount*3 + girl_amount) * x\n    # Solve for x: x = total_prize / (boy_amount*3 + girl_amount)\n    x = total_prize / (boy_amount * 3 + girl_amount)\n\n    # The number of boys is 3 times the number of girls, so multiply x by 3\n    number_of_boys = 3 * x\n    \n    return int(number_of_boys)\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    difference = 4\n    last_term = 99  # largest number less than 100 with a remainder of 3 when divided by 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # Perimeter of the isosceles triangle\n    p = 12\n    # The maximum length for one side of the isosceles triangle when perimeter is 12\n    # is 11 (but it wouldn't be a triangle), so we use 10 here because two sides\n    # at least must be equal and the sum of two sides must be greater than the third side.\n    for equal_side in range(1, p // 2):\n        # The third side length, based on the perimeter\n        third_side = p - 2 * equal_side\n        # Check if it forms a valid triangle: two same sides must be bigger than third side.\n        if third_side < 2 * equal_side:\n            count += 1\n    # The result is the count of the valid triangles\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n    \n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    \n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    equation1 = Eq(elder + younger, 42)\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    strawberries_given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    A = 8\n    B = 12\n    C = 20\n\n    # Find the greatest common divisor of the three numbers\n    gcf = gcd(gcd(A, B), C)\n\n    return gcf\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    pass_only_first_exam = pass_first_exam - (total_students - fail_second_exam - pass_second_fail_first)\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes from A to D directly\n    direct_AD = 6\n\n    # Routes from A to B to C to D\n    A_B_C_D = 7 * 5 * 2\n\n    # Routes from A to B to D\n    A_B_D = 7 * 2\n\n    # Routes from A to C to D\n    A_C_D = 4 * 2\n\n    # Total ways from A to D\n    total_ways = direct_AD + A_B_C_D + A_B_D + A_C_D\n\n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of chocolate cupcakes and y be the number of cheese cupcakes\n    x, y = symbols('x y')\n\n    # Eric baked 255 cupcakes in total\n    equation1 = Eq(x + y, 255)\n\n    # After selling 40% of chocolate cupcakes and 75% of cheese cupcakes, the remaining amounts are equal\n    equation2 = Eq(x - (40/100) * x, y - (75/100) * y)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    chocolate_left = solutions[x] - (40/100) * solutions[x]\n    cheese_left = solutions[y] - (75/100) * solutions[y]\n\n    # The number of chocolate cupcakes left is equal to the number of cheese cupcakes left\n    ans = chocolate_left  # Could also be cheese_left as they are the same.\n\n    return ans\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    num_pencils = 3\n    num_pens = 2\n\n    total_pencil_cost = pencil_cost * num_pencils\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / num_pens\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    daily_hay_per_cattle = total_hay / (total_cattle * total_days)\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for oldest in range(middle + 1, 10):\n                if youngest * middle * oldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3/8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survived = total_seedlings - seedlings_killed\n\n    return int(seedlings_survived)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n\n    days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - days * daily_consumption\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Equation for the total number of notes\n    equation1 = Eq(x + y, 116)\n\n    # Equations representing the money spent\n    equation2 = Eq(x - 0.6 * x, 4/7 * (y - 0.25 * y))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Number of $10 and $5 notes before spending\n    x_notes = solutions[x]\n    y_notes = solutions[y]\n\n    # Money spent for $10 and $5 notes\n    spent_10_notes = 0.6 * x_notes * 10\n    spent_5_notes = 0.25 * y_notes * 5\n\n    # Total cost of the bag\n    total_cost = spent_10_notes + spent_5_notes\n\n    return total_cost\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12*92 + 22*82 + 32*72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the amount Don initially had, and b be the amount Ben initially had\n    d, b = symbols('d b')\n\n    # Initial ratio of stickers\n    original_ratio = Eq(2*b, 3*d)\n\n    # After the changes in the number of stickers\n    changed_ratio = Eq(6*(b - 5), 7*(d + 10))\n\n    # Solving the system of equations\n    solutions = solve((original_ratio, changed_ratio), (d, b))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    result = 726 * 8\n    ans = round(result, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    sum_positives = sum(range(2, 2017, 4))\n    sum_negatives = sum(range(3, 2016, 4))\n    ans = sum_positives - sum_negatives\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # According to the problem statement, we have the following equation:\n    # 1/4 * b = 2/5 * g\n    # Also, from the given total number of students, we know:\n    # b + g = 39\n\n    # Import fractions to handle fraction calculations\n    from fractions import Fraction\n\n    # Calculate the number of boys b using the relationship between boys and girls\n    # Convert the fractions to a common denominator to solve for b: 5 * b = 8 * g\n    # Then, add the equation for the total number of students: b + g = 39\n    # This system of two equations can be solved as follows:\n\n    # 5b = 8g\n    # b + g = 39\n\n    # Solving for g in the second equation gives us:\n    # g = 39 - b\n\n    # Substituting g in the first equation gives us:\n    # 5b = 8 * (39 - b)\n    # 5b = 312 - 8b\n    # 13b = 312\n    b = 312 // 13\n\n    # Now we can find g, using the second equation:\n    g = 39 - b\n\n    # The difference between the number of boys and girls:\n    difference = b - g\n\n    return difference\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy = 50\n    sally = 26\n    amy_give = (amy - sally) // 2\n    return amy_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        ""
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather_saved = 12.15\n    zach_saved = 3 * heather_saved\n    serena_saved = zach_saved + 24.50\n    jason_saved = serena_saved / 5\n    william_saved = jason_saved - 1.54\n    return william_saved\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # The given sequence is the sum of the squares of the first 20 natural numbers.\n    # The expression to calculate is the sum of products of odd numbers starting from 1.\n    # The pattern in the products is (2n-1)(2n+1) where n ranges from 1 to 20\n\n    sum_of_products = 0\n    for n in range(1, 21):\n        sum_of_products += (2 * n - 1) * (2 * n + 1)\n\n    return sum_of_products\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Calculate arrangements for the two twin brothers and triplet sisters\n    # Number of ways to arrange 5 elements (3 girls as one unit + 2 boys) with restriction on twins\n    ways_to_arrange_boys = factorial(5) - factorial(4)\n\n    # Number of ways to arrange the triplet sisters among themselves\n    ways_to_arrange_girls = factorial(3)\n\n    # Multiply the two results to get the total number of arrangements\n    ans = ways_to_arrange_boys * ways_to_arrange_girls\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    length_of_road = 150\n    distance_between_trees = 10\n\n    # Since trees are planted at both ends, subtract one distance unit before dividing\n    # Then add the two end trees after division calculation\n    num_trees = ((length_of_road - distance_between_trees) // distance_between_trees) + 2\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    gallons_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = gallons_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    min_students_in_max_week_day = (total_students // days_in_week) + 1\n\n    return min_students_in_max_week_day\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    days_in_week = 7\n    days_in_vacation = 55\n\n    # If the vacation starts on a Friday, then every 7th day will be a Friday.\n    # The number of Fridays will then be the total number of days divided by 7, plus one initial Friday.\n    max_fridays = (days_in_vacation // days_in_week) + 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    # Solve the complex fraction\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2 * 3 * 4 * 5  # LCM of 2, 3, 4, 5, 6, 8, 9 (consider only the prime factorization)\n    N = lcm\n    while (N % 7) != 5:\n        N += lcm\n    return N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # price of a pencil\n    price_pencil = 2\n    # price of a pen\n    price_pen = 4\n\n    # If Owen wants to trade a pen from Oscar\n    # he should give the equivalent value in pencils\n    # Hence, we calculate how many pencils make the price of one pen\n    pencils_for_one_pen = price_pen / price_pencil\n\n    return int(pencils_for_one_pen)\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost of one mug\n    cost_per_mug = 3.50 / 5\n    \n    # Cost of one pen\n    cost_per_pen = 6.80 / 8\n    \n    # Total cost for 7 mugs\n    total_mug_cost = 7 * cost_per_mug\n    \n    # Total cost for 5 pens\n    total_pen_cost = 5 * cost_per_pen\n    \n    # Total cost of 7 mugs and 5 pens\n    total_cost = total_mug_cost + total_pen_cost\n\n    # Money left after purchase from £10\n    change = 10 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_fraction = 1/5\n    \n    pupils_away = total_pupils * away_fraction\n    pupils_going = total_pupils - pupils_away\n    \n    return int(pupils_going)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3  # 3 minutes for one child to sing a song\n    number_of_songs = 2  # each child needs to sing 2 songs\n    number_of_children = 50  # there are 50 children in class\n\n    # Total time for one child to sing 2 songs\n    total_time_per_child = time_per_child_per_song * number_of_songs\n\n    # Total time for all children to sing 2 songs\n    total_time = total_time_per_child * number_of_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_1_apple = weight_of_3_apples / 3\n    weight_of_basket = weight_with_2_apples - 2 * weight_of_1_apple\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    num1 = 0.25\n    num2 = 0.3\n    ans = max(num1, num2)\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years_claimed = 5\n\n    # Calculate the amount with compound interest formula\n    amount_with_interest = principal * ((1 + interest_rate) ** years_claimed)\n    \n    # Compare if the amount matches the final amount\n    if round(amount_with_interest, 2) == final_amount:\n        return \"right\"\n    else:\n        # If not, calculate the correct number of years\n        correct_years = (final_amount / principal) ** (1 / interest_rate) - 1\n        return round(correct_years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    from math import lcm\n\n    lcm_3_7 = lcm(3, 7)\n    multiplier = 1\n    while True:\n        number = lcm_3_7 * multiplier\n        if str(number)[-1] == '2':\n            return number\n        multiplier += 1\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n    \n    # There were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n\n    # After selling, a total of 48 cookies and cakes were left\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # Calculate the number of cookies left in the end\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_per_week = 7\n    num_weeks = 2\n    total_days = days_per_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    # Place value of 3 in hundreds of thousands position\n    hundreds_of_thousands_3 = 3 * 10 ** 5\n    \n    # Place value of 3 in tens position\n    tens_3 = 3 * 10 ** 1\n    \n    # Difference between the place values\n    diff = hundreds_of_thousands_3 - tens_3\n    \n    return diff\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the rate at which John works (walls per hour)\n    # Let a represent the rate at which Angus works (walls per hour)\n    # Let jon represent the rate at which Jonah works (walls per hour)\n    j, a, jon = symbols('j a jon')\n    \n    # John, Jonah and Angus take 27 hours to build a single wall\n    equation1 = Eq(1, 27 * (j + jon + a))  # The combined rate times the time gives 1 wall\n    \n    # Jonah and Angus together take 36 hours to build the same wall\n    equation2 = Eq(1, 36 * (jon + a))  # The combined rate times the time gives 1 wall\n    \n    # We want to find the time it takes for John to build the wall by himself\n    # 1 wall = John's rate * John's time\n    # Let's find John's time (t_j) in terms of his rate (j)\n    t_j = symbols('t_j')\n    equation3 = Eq(1, t_j * j)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (j, jon, a, t_j))\n\n    return solutions[t_j]\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    base = 2\n    exponent = 17\n    number = base ** exponent\n    ones_digit = number % 10\n    return ones_digit\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    actual_pages = sum(range(1, 21))\n    return actual_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This is a classic problem in number theory known as the Coin Problem.\n    # According to the Chicken McNugget Theorem, the greatest amount that\n    # cannot be obtained with two relatively prime (coprime) denominations\n    # a and b, is given by ab - a - b\n    \n    # Here the coins' denominations are 4z and 5z which are coprime.\n    a = 4\n    b = 5\n    \n    # Greatest amount that cannot be made:\n    largest_non_makable_total = a * b - a - b\n    \n    # Multiply by z to get the actual total in terms of z\n    largest_non_makable_total *= 1  # We don't know the value of z, but it will just scale up\n    \n    return largest_non_makable_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Given the sum of the 10 numbers is 1001\n    # To maximize the gcd, all numbers should ideally be multiples of the same largest number\n    # Hence, we find the largest divisor of 1001 that can be a common divisor for 10 numbers\n    total_sum = 1001\n    max_d = 1\n\n    # We iterate in reverse order from 1001 downwards to find the largest divisor\n    for d in range(total_sum, 0, -1):\n        # Check if d is a divisor of total_sum and total_sum is divisible into 10 parts or less\n        if total_sum % d == 0 and total_sum / d <= 10:\n            max_d = d\n            break\n\n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Five years ago, if their combined age was 14, currently their combined age would be 14 + (2 * 5)\n    current_combined_age = 14 + 10\n    # In 3 years, their combined age will be their current combined age plus 3 years for each person\n    future_combined_age = current_combined_age + (2 * 3)\n    return future_combined_age\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a*10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of an apple and a pear\n    apple, pear = symbols('apple pear')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    # Calculate the weight of 4 apples and 4 pears using the obtained solutions\n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    import math\n    length1 = 45\n    length2 = 30\n\n    # The longest possible length of each piece is the greatest common divisor (GCD)\n    gcd_value = math.gcd(length1, length2)\n\n    return gcd_value\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    girls_removed = 5\n\n    # Let's assume the number of boys is b.\n    # Then the number of girls would be 152 - b.\n    # After removing 1/11th of the boys and 5 girls, we would get:\n    # New number of boys, b_new = b - b / 11, which simplifies to 10b/11\n    # New number of girls, g_new = 152 - b - 5, which simplifies to 147 - b\n    # According to the problem, the new number of boys is equal to the new number of girls:\n    # 10b/11 = 147 - b\n    # Solving for b we get:\n\n    b = symbols('b')\n    equation = Eq(10 * b / 11, 147 - b)\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    boxes = total_pencils / pencils_per_box\n\n    return int(boxes)\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    days_to_adulthood = 30\n    total_days = 40\n    \n    # Calculate the number of days when Ermintrude can lay eggs that will become adults by day 40\n    laying_days = total_days - days_to_adulthood\n    # Each day's eggs will become adults on different days but within the 40 day period\n    new_adult_fleas = laying_days * daily_eggs\n    \n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (7 * 3) + 24\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people who speak each language\n    french = 15\n    japanese = 12\n    italian = 13\n    \n    # Number of people who speak two languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    \n    # Number of people who speak all three languages\n    all_three = 1\n    \n    # Using the Inclusion-Exclusion Principle to calculate the total number of people\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n    \n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3 / 4\n    water_litres = total_drink * water_fraction\n    return water_litres\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    num_rows = 22\n\n    last_term = first_term + (num_rows - 1) * common_difference\n    total_students = (num_rows * (first_term + last_term)) // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + (3 * story_books)\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(21 * 286 + 21, 286)\n    num2 = Fraction(6 * 2530 + 647, 2530)\n    num3 = Fraction(1 * 2829 + 1370, 2829)\n    \n    ans = num1 * num3 / num2\n    \n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_amount = 3.85\n    cost_pencil = 0.38\n    cost_ruler = 0.59\n\n    amount_left = total_amount - (cost_pencil + cost_ruler)\n\n    return amount_left\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rate_star, rate_nini = symbols('rate_star rate_nini')\n\n    # Star types for 5 hours and Nini types for 20 hours\n    equation1 = Eq(rate_star * 5 + rate_nini * 20, 1)\n\n    # Star types for 20 hours and then Nini types for 8 hours\n    equation2 = Eq(rate_star * 20 + rate_nini * 8, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rate_star, rate_nini))\n\n    # Time taken for Nini to finish the job by herself\n    time_nini = 1 / solutions[rate_nini]\n\n    return time_nini\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the dimensions of the small cube\n    # Since the volume of the big cuboid is 720 times the volume of the small cube\n    # and the volume of the cuboid is 6 * 10 * 12, one side of the small cube must be the cube root of 720\n    volume_cuboid = 6 * 10 * 12\n    volume_small_cube = volume_cuboid // 720\n    side_small_cube = int(volume_small_cube ** (1/3))\n\n    # Calculate the number of small cubes along each dimension\n    num_cubes_x = 6 // side_small_cube\n    num_cubes_y = 10 // side_small_cube\n    num_cubes_z = 12 // side_small_cube\n\n    # Calculate the number of cubes with exactly one face painted\n    # We subtract 2 to account for the cubes on the edges which have more than one face painted\n    one_face_painted_x = (num_cubes_x - 2) * (num_cubes_y - 2) * 2 # top and bottom faces\n    one_face_painted_y = (num_cubes_y - 2) * (num_cubes_z - 2) * 2 # front and back faces\n    one_face_painted_z = (num_cubes_z - 2) * (num_cubes_x - 2) * 2 # left and right faces\n\n    # Add the number of cubes with exactly one face painted from each dimension\n    total_painted = one_face_painted_x + one_face_painted_y + one_face_painted_z\n\n    return total_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total = Eq(anne + maria, 44)\n\n    ans = solve(total, anne)[0]\n\n    return ans\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # Prime factorize 140 \n    # 140 = 2^2 * 5 * 7\n    # The number of pieces of candy in each pile must be odd,\n    # hence we need to distribute the even factor of 2 separately.\n    # In this case, we can ignore the 2^2 since the piles need to be odd\n    # which means the number of piles could be a divisor of 5 * 7 = 35\n    odd_part = 5 * 7\n\n    # Calculate all divisors of odd_part\n    pile_options = divisors(odd_part)\n\n    # Subtract 1 from the number of divisors to not count the trivial\n    # division by 1 (all candy in one pile)\n    ans = len(pile_options) - 1\n\n    return ans\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Number of classrooms and keys is 20\n    num_classrooms = 20\n    \n    # In the worst-case scenario, the warden would have to try every key for the first classroom (20 attempts),\n    # then for the second classroom, he would have 19 keys left, and so on, until the last classroom has only 1 key left to try.\n    \n    # The maximum number of attempts follows the arithmetic series: 20 + 19 + 18 + ... + 1\n    max_attempts = sum(range(1, num_classrooms + 1))\n    \n    return max_attempts\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B first, so the stacks are now:\n    # Stack A: 20 stones, Stack B: 16 stones\n    \n    # Jerry wants to win the game, for that he needs to make sure that after his round\n    # both stacks have the same number of stones. That way, whatever Tom does next,\n    # Jerry can always mimic on the other stack and make sure that he picks the last stone.\n    \n    # Jerry can take 4 stones from Stack A, making both stacks equal:\n    # Stack A: 16 stones, Stack B: 16 stones\n    \n    # Jerry's move:\n    stones_taken = 4\n    stack = 'A'  # Jerry takes from Stack A\n    \n    return stones_taken, stack\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Since newspapers are folded in half and stacked,\n    # each sheet contains 4 page numbers.\n    # The third sheet will contain page numbers 5, 6, 7, and 8.\n\n    page_sum = 5 + 6 + 7 + 8\n    return page_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    girls_fraction = 3 / 7\n    num_girls = total_students * girls_fraction\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    apples_per_watermelon = watermelon_to_peaches * peaches_to_apples\n    return apples_per_watermelon\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    pages = 0\n    digits_used = 0\n\n    for i in range(1, total_digits + 1):\n        if i < 10:\n            # pages with 1 digit\n            digits_used += 1\n        elif i < 100:\n            # pages with 2 digits\n            digits_used += 2\n        elif i < 1000:\n            # pages with 3 digits\n            digits_used += 3\n        pages = i\n        if digits_used >= total_digits:\n            break\n            \n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    # Define prices per cup for each juice\n    apple_price = 5\n    orange_price = 3\n    peach_price = 10\n\n    # Define the number of cups of each juice\n    apple_cups = 30\n    orange_cups = 50\n    peach_cups = 20\n\n    # Calculate the total cost for each type of juice\n    total_apple_cost = apple_cups * apple_price\n    total_orange_cost = orange_cups * orange_price\n    total_peach_cost = peach_cups * peach_price\n\n    # Calculate the total cost for all juices\n    total_cost = total_apple_cost + total_orange_cost + total_peach_cost\n\n    # Calculate the total number of cups of juice\n    total_cups = apple_cups + orange_cups + peach_cups\n\n    # Calculate the average cost per cup\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Calculating the number of pens in Box A and Box B before transfer\n    pens_in_box_a = 10 + 15 + 20 + 25  # Each color pens in Box A\n    pens_in_box_b = 10 + 15 + 20 + 25  # Each color pens in Box B\n\n    # After transferring 20 pens from Box A to Box B\n    pens_in_box_a -= 20\n    pens_in_box_b += 20\n\n    # Pens needed to be returned from Box B to Box A\n    pens_to_return = 0\n\n    # Ensuring that Jane has at least 15 pens of each color in Box A\n    while True:\n        if pens_in_box_a - 10 >= 15 and pens_in_box_a - 15 >= 15 and \\\n                pens_in_box_a - 20 >= 15 and pens_in_box_a - 25 >= 15:\n            break\n        else:\n            pens_in_box_a += 1\n            pens_in_box_b -= 1\n            pens_to_return += 1\n\n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = 9 * 60 + 15  # 9:15 PM in minutes\n    end_time = 23 * 60 + 6    # 11:06 PM in minutes\n\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    fraction = 1 / 8\n    return fraction\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let the divisor be x\n    # Then, the dividend will be 29x + 11\n    # According to the problem statement, x + (29x + 11) = 431\n    # Solving for x, we get 30x + 11 = 431 => 30x = 420 => x = 14\n    divisor = 14\n    # Now we calculate the dividend\n    dividend = 29 * divisor + 11\n    \n    # The difference between the two numbers is:\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_diff = 32\n    boys = 0\n    girls = 0\n\n    # Start with 1 boy (1x1 square)\n    side_length = 1\n    while True:\n        if side_length % 2 == 1:\n            boys += 4 * (side_length - 1)\n        else:\n            girls += 4 * (side_length - 1)\n\n        if boys - girls == total_diff:\n            break\n\n        side_length += 1\n\n    # Calculate total number of students\n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_percentage = 12.5\n    number_of_violin_players = 11\n    total_number_of_pupils = (number_of_violin_players * 100) / violin_percentage\n    return int(total_number_of_pupils)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Since there are only 12 milk chocolates and 16 chocolates have soft centres,\n    # At least 4 plain chocolates must have soft centres, as the 12 milk chocolates \n    # can only account for 12 of the soft-centred chocolates. This is because if we \n    # consider the case where all milk chocolates have soft centres (which is the maximum \n    # possible), there would still be a need for 4 more soft-centred chocolates to \n    # make the total up to 16, which must come from the plain chocolates.\n    min_plain_soft_centres = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n    \n    # However, it's also possible that all plain chocolates also have soft-centres,\n    # in the case that some of the milk chocolates don't have a soft-centre.\n    # Hence, the number of plain chocolates with soft-centres could be all 8 of them.\n    max_plain_soft_centres = plain_chocolates\n\n    # Since we aren't provided with details on an exact number, the answer is a range.\n    return (min_plain_soft_centres, max_plain_soft_centres)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution(n) # 'n' would be replaced with the actual number of chocolate bars when calling the function."
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each type of coin\n    x = symbols('x')\n    \n    # Since each type of coin has the same count, we can represent the total sum with an equation\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Calculate the total number of coins (4 types of coins)\n    total_coins = 4 * solution[0]\n    \n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of apples and 'p' be the number of pears originally.\n    a, p = symbols('a p')\n\n    # We have two equations based on the problem statement:\n    # 1. The total number of apples and pears was 105.\n    equation1 = Eq(a + p, 105)\n\n    # 2. After selling, 5/6 as many apples as pears are left.\n    equation2 = Eq((2/3)*a, (5/6)*(3/5)*p)\n\n    # Solve the system of equations for 'a' and 'p'\n    solution = solve((equation1, equation2), (a, p))\n\n    # Retrieve the number of apples and pears.\n    apples = solution[a]\n    pears = solution[p]\n\n    # Calculate the total number of apples and pears sold: 1/3 of apples and 2/5 of pears.\n    apples_sold = (1/3) * apples\n    pears_sold = (2/5) * pears\n\n    # The total number of fruits sold is the sum of apples and pears sold.\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # Write the equations based on the given ratios and the difference between A and C\n    equation1 = Eq(A/B, 4/5)\n    equation2 = Eq(B/C, 5/6)\n    equation3 = Eq(C - A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the sum of A, B, and C\n    sum_abc = solutions[A] + solutions[B] + solutions[C]\n\n    return sum_abc\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat students A, B, C, D as one unit since they must be together.\n    # So we now have 9 units (instead of 12 students) to arrange.\n    units = 9\n    arrangements_of_units = factorial(units)\n    \n    # Additionally, students A, B, C, D can be arranged among themselves in 4! ways.\n    arrangements_within_unit = factorial(4)\n    \n    # Total arrangements will be the product of these two possibilities.\n    ans = arrangements_of_units * arrangements_within_unit\n    return ans\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # Equation for giving 13 stickers to each pupil\n    equation1 = Eq(stickers - 13*pupils, 190)\n\n    # Equation for giving 17 stickers to each pupil\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    # Return the number of stickers\n    return solutions[stickers]\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # The total number of games played\n    total_games = 6 * (6 - 1) / 2\n\n    # Total points distributed (2 points per game)\n    total_points = total_games * 2\n\n    # Points already accounted for\n    known_points = 7 + 6 + 5 + 4 + 3\n\n    # Calculate the points of the remaining student\n    remaining_points = total_points - known_points\n\n    return int(remaining_points)\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    initial_ratio = Eq(A / B, 5 / 3)\n    new_ratio = Eq((A - 10) / (B + 10), 7 / 5)\n\n    solutions = solve((initial_ratio, new_ratio), (A, B))\n    total_weight = solutions[A] + solutions[B]\n    \n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    unit_rate = number_of_boys / boys_to_girls_ratio\n    number_of_girls = unit_rate * 5\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    # Total number of players\n    total_players = 378\n    # Players in the first line\n    first_line = 22\n    # Players in the last line\n    last_line = 62\n    \n    # Number of lines can be found by\n    # n = (total_players * 2) / (first_line + last_line)\n    # and since n must be an integer, we will vary d until we find an integer n\n    d = 1  # Let's start with difference d = 1 and increment until we find a solution\n    while True:\n        # Using the formula for sum of an arithmetic series:\n        # total_players = n/2 * (first_line + last_line)\n        n = (total_players * 2) / (first_line + last_line)\n        # Check if n is an integer, which implies that we have a valid arithmetic sequence\n        if n.is_integer() and (last_line - first_line) == d * (n - 1):\n            return d\n        d += 1\n        if d > (last_line - first_line):\n            break\n    return -1\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 5), (2, 7)]\n    num, _ = solve_congruence(*congruences)\n    while num < 100:\n        num += 3 * 5 * 7  # Increase num by the product of the moduli until it falls within the range 100-200\n    return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product\n    product = 48 * 925 * 38 * 435\n    \n    # Initialize the number of zeros at the end\n    num_zeros = 0\n    \n    # Check how many times the product is divisible by 10\n    while product % 10 == 0:\n        num_zeros += 1\n        product //= 10\n    \n    return num_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # All masses converted to grams\n    largest_mass = max(masses)  # Find the largest mass\n\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Total number of days with dog barking\n    days_in_a_week = 7\n    times_barking_per_week = 3\n    total_barking_nights = (1000 / days_in_a_week) * times_barking_per_week\n    \n    # Probability of a theft given the dog has barked\n    thief_events = 2\n    prob_bark_given_thief = 0.9\n    # Since there are only 2 theft events, we assume these are the only events the dog\n    # barked due to a thief.\n    barks_due_to_thief = thief_events * prob_bark_given_thief\n\n    # The probability of the dog barking during the occurrence of the theft\n    prob_of_barking_during_theft = barks_due_to_thief / total_barking_nights\n\n    return prob_of_barking_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    girls = total_children * fraction_girls\n    boys = total_children - girls\n    \n    return int(boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the actual number of stickers Mr. Ya has\n    # Let y be the number of pupils\n    x, y = symbols('x y')\n\n    # Based on the problem statement, we can set up two equations:\n    # Equation 1: x = 13y + 190\n    # Equation 2: x = 17y + 50\n    eq1 = Eq(x, 13 * y + 190)\n    eq2 = Eq(x, 17 * y + 50)\n\n    # Solve the system of equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Extract the value of x (the number of stickers Mr Ya has)\n    return solutions[x]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_diff = float('inf')\n    numbers = list(itertools.permutations('123456789'))\n    \n    for num1 in numbers:\n        for num2 in numbers:\n            if num1 != num2:\n                diff = abs(int(''.join(num1)) - int(''.join(num2)))\n                if diff == 0:  # same number, skip\n                    continue\n                if diff < smallest_diff:\n                    smallest_diff = diff\n    \n    return smallest_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original condition: there were 65 fewer boys than girls\n    original_condition = Eq(boys, girls - 65)\n\n    # After some boys and girls leave, there are equal numbers left\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n    after_recess_condition = Eq(boys_left, girls_left)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, after_recess_condition), (boys, girls))\n\n    # Calculate the total number of students left in the hall\n    total_left = boys_left.subs(boys, solutions[boys]) + girls_left.subs(girls, solutions[girls])\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_after_third = 68 + 25\n    second_trip = (remaining_after_third - 11) * 2\n    remaining_after_second = second_trip + remaining_after_third\n    first_trip = (remaining_after_second + 26) * 2\n    total_bricks = first_trip + remaining_after_second\n\n    return total_bricks\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can swim to who cannot\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # 120 less boys swim than don't swim\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Total number of girls\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Total number of boys\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    ans = solutions[girls_not_swim] + solutions[boys_not_swim]  \n\n    return ans\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count_1s = 0\n    for page in range(1, 131):\n        count_1s += str(page).count('1')\n    return count_1s\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    ans = math.factorial(3)\n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Start with a possible minimum number of students (a square of 4)\n    # Since we need to line up perfectly in a square array, i.e., the number of desks and chairs\n    # should form a perfect square, we start testing from 4 (2x2) and move upward.\n    students = 4\n    \n    while True:\n        # Check if Mike can be the 2nd in line from all directions\n        # In a square array for this to be true, Mike must be seated\n        # in one of the four corner 2x2 sub-squares.\n        # Check if sqrt(students) - 1 (which denotes the dimension of the square excluding the corners) \n        # can be composed of two consecutive numbers (a perfect square - 1 is always even, so that could be possible)\n        root = int(students**0.5)\n        if root > 1 and (root - 1) % 2 == 0:\n            half = (root - 1) // 2\n            if (half * (half + 1)) == (root - 1):\n                return students\n        students += 1\n        \nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_of_ages = 22\n    desired_sum_of_ages = 40\n    years_until_desired_sum = desired_sum_of_ages - current_sum_of_ages\n    return years_until_desired_sum\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    digits = 0\n    for page in range(1, 21):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    def count_ways(steps_remaining, memo):\n        if steps_remaining in memo:\n            return memo[steps_remaining]\n        if steps_remaining < 0:\n            return 0\n        if steps_remaining == 0:\n            return 1\n        \n        # Calculate the number of ways for remaining steps\n        memo[steps_remaining] = count_ways(steps_remaining - 2, memo) + \\\n                                count_ways(steps_remaining - 3, memo)\n        return memo[steps_remaining]\n    \n    memo = {}\n    return count_ways(10, memo)\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for digit1 in range(1, 10):  # The first digit cannot be 0 for a 4-digit number\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10):\n                for digit4 in range(1, 10):  # The last digit cannot be 0 after the change\n                    original = digit1 * 1000 + digit2 * 100 + digit3 * 10 + digit4\n                    new_number = digit4 * 1000 + digit1 * 100 + digit2 * 10 + digit3\n                    if new_number - original == 5877:\n                        return original\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The smallest possible divisor is 1. Thus, the minimum dividend is:\n    min_divisor = 1\n    min_dividend = (min_divisor * quotient) + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = '1998'\n    for n in range(1, 33 * len(num)):\n        repeated_num = int(num * (n // len(num)))\n        if n % len(num) != 0:\n            repeated_num = int(str(repeated_num) + num[:n % len(num)])\n        if repeated_num % 33 == 0:\n            return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_element = group_number\n    second_element = group_number ** 2\n    third_element = group_number ** 3\n\n    sum_of_numbers = first_element + second_element + third_element\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_run = 1/4\n    total_distance = 3.75\n    num_runs = total_distance / distance_per_run\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    ratio_boys_to_girls = 3 / 2\n\n    girls = (boys / ratio_boys_to_girls)\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if (number % 5 == 3) and (number % 6 == 4) and (number % 9 == 1):\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    return (14 * 10) // 21\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    # loop through all two-digit numbers that end with 0\n    for number in range(10, 100, 10):\n        if number % 6 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote erasers of Candice, Doris and Elly as c, d and e respectively\n    c, d, e = symbols('c d e')\n    \n    # Equation 1: Total erasers\n    equation1 = Eq(c + d + e, 50)\n    \n    # Equation 2: Elly's erasers are 6 more than Doris's\n    equation2 = Eq(e, d + 6)\n    \n    # Equation 3: Candice's erasers are 5 times Elly's\n    equation3 = Eq(c, 5 * e)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (c, d, e))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10  # 7 tens more\n    correct_answer = original_number + tens_more\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # The problem is asking for the maximum quantity of different positive integers that can sum up to 27.\n    # This can be rephrased to finding the longest sequence of consecutive positive integers that sum up to 27.\n    # Since we are looking for different numbers, a sequence of consecutive numbers is the optimal strategy.\n    # We start by testing the longest sequence possible starting from 1 and keep reducing its length until the sum reaches 27.\n    \n    # Initialize the starting integer and length of the sequence to 1\n    start = 1\n    length = 27  # We start with the maximum possible length assuming all 1s\n    while True:\n        # Calculate the sum of the sequence of `length` starting from `start`\n        current_sum = sum(range(start, start + length))\n        if current_sum == 27:\n            # If the current sum equals 27, we have found our maximum length\n            break\n        elif current_sum < 27:\n            # If the current sum is smaller than 27, we need a longer sequence.\n            # Increment the start and reset the length\n            start += 1\n            length = 27 - sum(range(1, start))\n        else:\n            # If the current sum is greater than 27, we reduce the length of the sequence\n            length -= 1\n    \n    return length\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # converting 3m to cm\n    lengths_cm = [147, 32.5, 67]  # lengths of three pieces in cm\n\n    total_known_length_cm = sum(lengths_cm)  # sum of the lengths of the known pieces\n    fourth_length_cm = total_length_cm - total_known_length_cm  # length of the fourth piece\n\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    # Calculate probability for each possible number of people passing\n    most_likely_pass = 0\n    highest_prob = 0\n    \n    for i in range(4):\n        prob_i_pass = binom.pmf(i, 3, sum(probabilities) / len(probabilities))\n        if prob_i_pass > highest_prob:\n            highest_prob = prob_i_pass\n            most_likely_pass = i\n            \n    return most_likely_pass\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = (pieces_of_paper - 1) // interval\n    \n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    a = 101 + 234 + 567\n    b = 234 + 567 + 89\n    c = a - 89\n    d = 234 + 567\n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # This accounts for the initial \"1\" in the sequence\n\n    for denominator in range(2, 11):  # Iterate through denominators from 2 to 10\n        ans += (denominator - 1) * (1 / denominator) * 2  # Each fraction appears twice\n\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    equation1 = Eq(watches/caps, 8/11)\n    equation2 = Eq(watches/(caps - 88), 12/11)\n\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam rides from the first house to the sixth house in 30 minutes\n    # The distance between each adjacent house is equal\n    # This means he passes 5 equal intervals in 30 minutes\n\n    # To pass 1 interval, it takes him 30 minutes / 5 intervals\n    time_per_interval = 30 / 5\n\n    # To ride from the first house to the tenth house\n    # Sam needs to pass 9 intervals (because the width of the house is negligible)\n\n    # Total time = time per interval * number of intervals\n    total_time = time_per_interval * 9\n\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n    digits = [A, B, C, D]\n\n    # The first condition, A is 1/4 of D\n    condition1 = Eq(A, D / 4)\n\n    # The second condition, B is 1 less than A\n    condition2 = Eq(B, A - 1)\n\n    # When you multiply ABCD by 4, its digits appear in reverse order\n    condition3 = Eq(4 * (A*1000 + B*100 + C*10 + D), D*1000 + C*100 + B*10 + A)\n\n    # None of the digits are the same, setting the inequality conditions\n    conditions_ineq = [Ne(digits[i], digits[j]) for i in range(len(digits)) for j in range(i+1, len(digits))]\n\n    # Digits constraints\n    digit_conditions = [A > 0, B >= 0, C >= 0, D > 0, A <= 9, B <= 9, C <= 9, D <= 9]\n\n    # Find a solutions to the equations\n    solutions = solve([condition1, condition2, condition3] + conditions_ineq + digit_conditions, (A, B, C, D))\n\n    solution_number = None\n    for sol in solutions:\n        # To ensure that all digits are different\n        if len(set(sol)) == 4:\n            solution_number = \"\".join(str(num) for num in sol)\n            break\n\n    return int(solution_number) if solution_number else None\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # total length in meters\n    total_length_cm = total_length_m * 100  # convert to centimeters\n\n    # Let the shorter piece be x, so the longer piece is 2x.\n    # Therefore, x + 2x = total_length_cm\n    # 3x = total_length_cm\n    shorter_piece_length_cm = total_length_cm / 3\n    longer_piece_length_cm = 2 * shorter_piece_length_cm  # Twice as long as the shorter piece\n\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    gallon_to_litre = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * gallon_to_litre\n    cost_of_petrol = litres_used * cost_per_litre\n\n    return cost_of_petrol\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # The total coins to make the opponent lose is 2015.\n    # The key is to leave a multiple of 12 (1+2+3+4+5+6+7+8+9+10+11 = 66, which is 12*6 -6 (to account the 0 in this scenario)) for the opponent.\n    # This will force the opponent to always leave a multiple of 12 situation after their move.\n    # Jack needs to take away enough coins to reach the previous multiple of 12.\n    \n    total_coins = 2015\n    coins_per_round = 66  # Sum(1 to 11)\n\n    # Jack wants to leave a multiple of coins_per_round for Ken.\n    # So he should pick enough coins to reach a total that is one less than a multiple of coins_per_round.\n    coins_to_leave = ((total_coins - 1) // coins_per_round) * coins_per_round\n\n    # Jack's first move should be to pick up this many coins:\n    jack_first_pick = total_coins - coins_to_leave\n    return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know b = 0.\n    # Now we need to find m, using the point (4, 8).\n    x1, y1 = 0, 0  # Origin\n    x2, y2 = 4, 8  # Point through which the line passes\n    \n    # The slope m of the line is given by (y2-y1)/(x2-x1).\n    # Since one point is the origin, this simplifies to y2/x2.\n    m = y2 / x2\n    \n    # Since b is 0, the equation simplifies to y = mx.\n    # We return the equation in the form of a string.\n    equation = f\"y={m}x\"\n    return equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # One complete cycle consists of 2 white balls and 3 black balls\n    cycle_white_balls = 2\n    cycle_total_balls = 5\n\n    # Number of complete cycles that can be formed with 92 white balls\n    complete_cycles = 92 // cycle_white_balls\n\n    # Number of balls in complete cycles\n    balls_in_complete_cycles = complete_cycles * cycle_total_balls\n\n    # Remaining white balls that do not complete a cycle\n    remaining_white_balls = 92 % cycle_white_balls\n\n    # Total number of balls arranged by Pip\n    total_balls = balls_in_complete_cycles + remaining_white_balls\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\" # Formats the time as a four-digit string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_holes(num):\n        holes = {\n            '0': 1,\n            '1': 0,\n            '2': 0,\n            '3': 0,\n            '4': 1,\n            '5': 0,\n            '6': 1,\n            '7': 0,\n            '8': 2,\n            '9': 1\n        }\n        return sum(holes[digit] for digit in str(num))\n\n    ans = count_holes(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # The age of the second youngest dwarf will be x + 1\n    # The age of the third youngest dwarf will be x + 2\n    # The sum of their ages is 42 years: x + (x + 1) + (x + 2) = 42\n    # Solving for x gives us:\n    x = (42 - 3) // 3  # Subtract 3 (1+2) from 42 and divide by 3 to isolate x\n\n    # The age of the oldest one will be x + 6 (since there are seven consecutive years and we start counting from 0),\n    # where x is the age of the youngest dwarf.\n    oldest_age = x + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    for pears in range(1, 1000):  # Arbitrarily choose 1000 as upper limit for search\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let's denote the initial number of passengers as x.\n    # After the first stop, 2/5 of the passengers got off, so there are 3/5*x passengers left.\n    # At the next stop, 1/3 of the remaining passengers, which is 1/3*(3/5*x), got off.\n    # This leaves us with 3/5*x - 1/3*(3/5*x) = 22 passengers.\n\n    # Let's set up the equation and solve it for x.\n    # 3/5*x - (1/3)*(3/5)*x = 22\n    # 3/5*x - 1/5*x = 22\n    # (3/5 - 1/5)*x = 22\n    # 2/5*x = 22\n    # x = 22 / (2/5)\n    # x = 22 * (5/2)\n    # x = 11 * 5\n    x = 11 * 5\n\n    return x\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_amount_mm = 4\n    sharpened_amount_cm = sharpened_amount_mm / 10\n\n    new_length_cm = original_length_cm - sharpened_amount_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of stickers John originally had\n    # Let y be the number of stickers Peter originally had\n    \n    # Sam and Peter had stickers in the ratio 7 : 5, so Sam had 7/5 * y stickers\n    # Sam gave away 20%, which is 7/5 * y * 0.20 = 7/25 * y\n    # Peter gave away 20%, which is y * 0.20 = y / 5\n    # After giving away 20%, Sam has 7/5 * y - 7/25 * y\n    # After giving away 20%, Peter has y - y / 5\n    # John's stickers are increased by 80%, so John initially had x stickers\n    # and received 7/25 * y + y / 5, which is 80% or 0.8x increase\n    \n    # After giving stickers, Sam has 20 stickers more than John.\n    # So, we have the following equations:\n    # 20 = (7/5 * y - 7/25 * y) - (x + 7/25 * y + y / 5)\n    # x * 0.80 = 7/25 * y + y / 5\n    \n    x, y = symbols('x y')\n    equation1 = Eq((7/5 * y - 7/25 * y) - (x + 7/25 * y + y / 5), 20)\n    equation2 = Eq(x * 0.80, 7/25 * y + y / 5)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Peter's original number of stickers is y\n    return solutions[y]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    # Distances in meters\n    distance1 = 420\n    distance2 = 620\n    \n    # Total distance\n    total_distance = 1200\n    \n    # Time taken for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    distance3 = total_distance - (distance1 + distance2)\n    time3 = distance3 / speed3\n    \n    # Total time\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    # Initial conditions\n    current_total_score = 89 * 4\n    current_number_of_tests = 4\n    desired_average = 95\n\n    # Calculate the total score needed to achieve the desired average\n    # The formula is: total_score = average * number_of_tests\n    # We don't know the total number of tests yet but we want the average to be at least 95\n    # Let x be the number of additional tests needed\n\n    # Iterate to find the minimum number of additional tests x\n    x = 0  # Initialize x\n    while True:\n        new_total_tests = current_number_of_tests + x\n        new_total_score = new_total_tests * desired_average\n        if new_total_score <= current_total_score + x * 100:\n            x += 1\n        else:\n            break\n    \n    return x\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_dollar_notes, ten_dollar_notes = symbols('two_dollar_notes ten_dollar_notes')\n    total_notes = Eq(two_dollar_notes + ten_dollar_notes, 72)\n    spent_two_dollar = 0.75 * two_dollar_notes\n    spent_ten_dollar = 0.90 * ten_dollar_notes\n    remaining_two_dollar = two_dollar_notes - spent_two_dollar\n    remaining_ten_dollar = ten_dollar_notes - spent_ten_dollar\n    remaining_ratio = Eq(remaining_ten_dollar, 2 * remaining_two_dollar)\n    \n    solutions = solve((total_notes, remaining_ratio), (two_dollar_notes, ten_dollar_notes))\n    \n    two_dollar_notes_solution = solutions[two_dollar_notes]\n    ten_dollar_notes_solution = solutions[ten_dollar_notes]\n\n    gift_cost = spent_two_dollar * 2 + spent_ten_dollar * 10\n\n    gift_cost_value = gift_cost.subs(two_dollar_notes, two_dollar_notes_solution).subs(ten_dollar_notes, ten_dollar_notes_solution)\n\n    return gift_cost_value\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the rates of Hose A, B, and C respectively.\n    a, b, c = symbols('a b c')\n\n    # The equations represent the times it takes for the hoses to fill the pool.\n    equation1 = Eq(1/a + 1/b, 1/9)\n    equation2 = Eq(1/a + 1/c, 1/12)\n    equation3 = Eq(1/b + 1/c, 1/18)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Get the individual rates of A, B, and C.\n    rate_a = solutions[a]\n    rate_b = solutions[b]\n    rate_c = solutions[c]\n\n    # Calculate the time it takes for all hoses to fill the pool together.\n    time_all = 1 / (rate_a + rate_b + rate_c)\n\n    return time_all\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n\n    total_length = days * meters_per_day\n\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    num_colors = 3  # Red, yellow, and blue\n    return num_colors + 1  # Worst case, take one from each color + 1\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_notes = 58\n    total_value = 164\n\n    for five_dollar_notes in range(total_notes + 1):\n        two_dollar_notes = total_notes - five_dollar_notes\n        if (five_dollar_notes * 5 + two_dollar_notes * 2) == total_value:\n            return five_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Find the common difference by analyzing the given sequence\n    diff = 120 - 105\n\n    # Find the first term using the 7th term which is 105\n    # a_n = a_1 + (n - 1) * d\n    # 105 = a_1 + (7 - 1) * d => a_1 = 105 - 6 * d\n    first_term = 105 - 6 * diff\n\n    # Use the formula to find the 100th term\n    # a_100 = a_1 + (100 - 1) * d\n    hundredth_term = first_term + (100 - 1) * diff\n\n    return hundredth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Total amount spent on cupcakes and muffins initially\n    total_spent_initially = (5 / 9) + (1 / 6)\n    # Simplify the fraction\n    total_spent_initially = (5 * 6 + 9) / (9 * 6)\n    # Simplify further\n    total_spent_initially = (30 + 9) / 54\n    total_spent_initially = 39 / 54\n    # Simplify to the smallest term\n    total_spent_initially = 13 / 18\n    \n    # Total amount spent on cupcakes\n    total_spent_cupcakes = 187.50\n    \n    # Price of one cupcake is thrice as much as the price of one muffin\n    # Let the price of one muffin be x\n    # Then the price of one cupcake is 3x\n    # Cellina bought 36 cupcakes and 32 muffins\n    # So, 36 cupcakes cost 36 * 3x and 32 muffins cost 32 * x\n    # We know that Cellina spent 5/9 of her money on 36 cupcakes and 32 muffins\n    \n    # Let total money Cellina had be y\n    # So, (5/9) * y = 36 * 3x + 32 * x\n    # But the total spent initially is 13/18 of total money\n    # (13/18) * y = 36 * 3x + 32 * x\n    # We know the total spent on cupcakes is 187.50 which is for 36 cupcakes\n    # So, 36 * 3x = 187.50\n    # Now we can find the value of x\n    x = 187.50 / (36 * 3)\n    # Now we can find the amount spent on 32 muffins\n    amount_spent_on_muffins = 32 * x\n\n    return amount_spent_on_muffins\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # since there are 10 boxes, and only 2 boxes can have the same number of marbles,\n    # we start with the smallest multiples of 2 and assign them to boxes, ensuring there\n    # are two boxes with the same smallest multiple of 2\n    \n    # starting from the smallest multiple of 2, which is 2, and we need it twice\n    marbles_count = [2, 2]\n    \n    # Now, we assign the next unique smallest multiples of 2 (4, 6, 8, ..., up to 10 boxes)\n    multiple = 4\n    while len(marbles_count) < 10:\n        marbles_count.append(multiple)\n        multiple += 2\n    \n    # Return the sum which is the smallest number of marbles Celeste can have\n    return sum(marbles_count)\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    series_sum = sum(range(1, 10)) + sum(range(4, 9))\n    return series_sum\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    # Pigeonhole principle: if n pigeons are put into m pigeonholes, where n > m,\n    # then at least one pigeonhole must contain more than ⌊n/m⌋ pigeons.\n    # Here, ⌊n/m⌋ is the floor division of n by m.\n    pigeons_per_cage_at_least = (total_pigeons // total_cages) + (total_pigeons % total_cages > 0)\n\n    return pigeons_per_cage_at_least\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    num_sprinklers = (num_parterres - 1)\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n\n    james_workings_correct = False # James's calculation is incorrect\n    correct_total_mass = total_mass\n\n    return (james_workings_correct, correct_total_mass)\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    average = (first_number + second_number) / 2\n    return average\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry, alexis, charlotte = symbols('marry alexis charlotte', real=True, positive=True)\n    \n    # Marry had 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, 7/5 * alexis)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(marry - 0.20 * marry, marry - (marry * 20) / 100)\n    equation3 = Eq(alexis - 0.20 * alexis, alexis - (alexis * 20) / 100)\n    \n    # Charlotte's stickers increased by 80%\n    equation4 = Eq(charlotte + 0.20 * charlotte, charlotte + (charlotte * 80) / 100)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    equation5 = Eq(marry - (marry * 20) / 100, charlotte + (charlotte * 80) / 100 + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (marry, alexis, charlotte))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n    first_day = 8\n    second_day = total_length / 6 + 4\n    equation = Eq(first_day + second_day, 5/12 * total_length)\n\n    ans = solve(equation, total_length)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Fraction of the collection left after giving away 440 bottle caps\n    fraction_left = 5/9\n    \n    # Given that Justin has 5/9 of his collection left,\n    # It means he gave away 4/9 of his collection which is 440 bottle caps.\n    # Therefore, 1/9th of his collection is 440 / 4 bottle caps\n    one_ninth_collection = 440 / 4\n    \n    # Total collection originally would be 9 times of one_ninth_collection\n    total_collection = one_ninth_collection * 9\n    \n    return int(total_collection)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Calculate the perimeter of the field\n    perimeter = 2 * (144 + 204)  # in meters\n\n    # Since a wheat is planted on every corner, subtract the 4 corner wheat from the total\n    wheat_along_sides = 116 - 4\n\n    # Calculate the distance between every 2 wheat by dividing the perimeter by the number of intervals\n    # The number of intervals is one less than the number of wheat plants along the sides\n    distance_between_wheat = perimeter / wheat_along_sides\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        str_multiple = str(multiple)\n        digit_sum = sum(int(d) for d in str_multiple)\n        if str_multiple.endswith('35') and digit_sum == 35:\n            break\n        multiple += 35\n    return multiple\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_nuts = 112\n    total_days = 8\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let x be the number of sunny days and (total_days - x) be the number of rainy days\n    for x in range(total_days + 1):\n        if sunny_nuts * x + rainy_nuts * (total_days - x) == total_nuts:\n            return total_days - x\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence\n    price1 = 15  # Price for 1 bottle\n    price2 = 28  # Price for 2 bottles\n    price5 = 60  # Price for 5 bottles\n\n    min_cost = float('inf')\n\n    # Loop through each combination of individual, pairs, and packs of 5\n    # To calculate the minimum cost\n    for pack5 in range(17 // 5 + 1): # Maximum possible packs of 5\n        for pair in range((17 - 5 * pack5) // 2 + 1): # Remaining divisible by 2\n            # Calculate remaining bottles after packs of 5 and pairs\n            single = 17 - 5 * pack5 - 2 * pair\n            # Calculate total cost for this combination\n            cost = pack5 * price5 + pair * price2 + single * price1\n            # Update min_cost if the current cost is lower\n            min_cost = min(min_cost, cost)\n\n    # Convert pence to pounds\n    return min_cost / 100\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Number of people is 4\n    # In a knockout tournament, each match eliminates one person.\n    # Therefore, for 4 people, we need 3 matches to determine a winner.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    correct_first = 10\n    correct_second = 15\n    correct_both = 7\n    only_one_correct = (correct_first + correct_second) - (2 * correct_both)\n    return only_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    \n    day_off = (end_date - start_date).days + 1\n    \n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42 # m/s\n    time = 5 # seconds\n\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Assume a, b, c, d correspond to 285, 15, 5, 2 respectively\n    a, b, c, d = 285, 15, 5, 2\n    results = set()\n\n    # Try different combinations of brackets\n    results.add(a + (b / c) - d)\n    results.add((a + b) / c - d)\n    results.add((a + (b / c)) - d)\n    results.add(a + b / (c - d))\n    results.add(a + (b / (c - d)))\n    \n    # Inserting brackets around 15 and 5 only, since division has higher precedence than addition and subtraction\n    results.add((a + b) / c - d)\n    results.add(a + (b / c) - d)\n    \n    # We have tried all combinations of inserting one or two pairs of brackets in different places\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    # Bud spent less than £10 on brushes, which means she can buy at most 3 brushes (3 brushes * £3/brush = £9).\n    # We iterate through the possible number of brushes she could have bought (0 to 3) to find the number that results in a total of £59 when combined with towels.\n    for brushes in range(4):  # only check from 0 to 3\n        # Calculate the remaining money after buying brushes\n        remaining = total_spent - (brush_price * brushes)\n        \n        # Check if the remaining amount can be divided by the towel price without remainder,\n        # which means the purchase is possible.\n        if remaining % towel_price == 0:\n            return brushes\n\n    return None  # In case there's no solution within the constraints.\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    difference = 2\n    \n    # sum of an arithmetic sequence is n/2 * (first term + last term)\n    # we have total_bears = total_days/2 * (first_term + last_term)\n    # Since we know the sequence increases by a constant difference, we can express the last term as\n    # last_term = first_term + (total_days - 1) * difference\n    # Now we have two unknowns (first_term and last_term) and two equations. We can solve for both.\n    \n    # Substitute last_term in the total_bears equation:\n    # total_bears = total_days/2 * (first_term + first_term + (total_days - 1) * difference)\n    # 35 = 5/2 * (2 * first_term + 4 * 2)\n    # 35 = 5/2 * (2 * first_term + 8)\n    # 14 * 2 = 2 * first_term + 8\n    # 28 = 2 * first_term + 8\n    # 20 = 2 * first_term\n    # 10 = first_term\n\n    first_term = (total_bears - (total_days/2 * (total_days - 1) * difference)) / (total_days/2)\n    \n    # last_term = first_term + 4 * difference\n    fifth_day_bears = first_term + (total_days - 1) * difference\n    \n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(7 * number + 8, 71)\n\n    original_number = solve(equation, number)[0]\n\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rick's and Morty's test scores\n    rick, morty = symbols('rick morty')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    # Return Rick's test score\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '8']\n    # Generate all permutations\n    all_permutations = list(permutations(digits, 3))\n    # Remove those permutations which have '0' as the first digit\n    valid_permutations = [perm for perm in all_permutations if perm[0] != '0']\n    # Count the number of valid permutations\n    count = len(valid_permutations)\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n    \n    # To ensure a blue marble is drawn, we need to consider the worst case scenario\n    # where we draw all the non-blue marbles first.\n    non_blue_marbles = pink + grey\n    \n    # Since we want to guarantee a blue marble, we draw one more after all non-blue marbles.\n    draw_to_ensure_blue = non_blue_marbles + 1\n    \n    return draw_to_ensure_blue\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    \n    total_miles = miles_per_day * days_in_two_weeks\n    \n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n\n    price_of_computer = tax_paid / tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    for perm in permutations(nums):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1)):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    return (3/10) / (6/7) * 100\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation: boys = girls - 30\n    equation1 = Eq(boys, girls - 30)\n\n    # Equation: (3/5) * boys = (5/8) * (girls - (5/8) * girls)\n    # Simplifies to: (3/5) * boys = (3/8) * girls\n    equation2 = Eq((3/5) * boys, (3/8) * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Extract the solution for the number of boys\n    num_boys = solutions[boys]\n\n    return num_boys\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the initial expression parts\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n\n    # All possible ways to insert brackets\n    expressions = [\n        (a + (b / c)) - d,\n        a + ((b / c) - d),\n        ((a + b) / c) - d,\n        (a + b) / (c - d),\n        a + (b / (c - d)),\n        a + (b / c - d),\n        ((a + b / c) - d),\n        (a + (b / c - d)),\n    ]\n\n    # Calculate the result of each expression, using a set to store unique results\n    results = set()\n    for expr in expressions:\n        results.add(expr)\n\n    # The number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if ((24 - i) / 4) == 4:\n            return i\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # 1/(A+B) is the work rate of A and B together, and they finish the job in 3 hours, so their work rate is 1/3\n    # Similarly, 1/(B+C) is the work rate of B and C together (1/4) and 1/(A+C) for A and C together (1/8)\n\n    # Rate of A + B\n    rate_ab = 1 / 3\n    # Rate of B + C\n    rate_bc = 1 / 4\n    # Rate of A + C\n    rate_ac = 1 / 8\n\n    # Let's add the rates of A + B, B + C, and A + C\n    # This sums to 2 * (A + B + C), since the rate of each worker is counted twice\n    combined_rate = rate_ab + rate_bc + rate_ac\n\n    # The combined rate corresponds to twice the rate of A + B + C\n    # So, the actual rate of A + B + C working together is half of combined_rate\n    rate_abc = combined_rate / 2\n\n    # The time taken by A, B, and C to finish the job together is the inverse of their combined work rate\n    time_abc = 1 / rate_abc\n\n    return time_abc\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kids, candies = symbols('kids candies')\n    \n    equation1 = Eq(kids * 18, candies + 12)\n    equation2 = Eq((kids + 2) * 15, candies)\n    \n    solutions = solve((equation1, equation2), (kids, candies))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    equation1 = Eq(frogs_initial, dragonflies_initial + 9)\n    equation2 = Eq(frogs_initial - dragonflies_initial, 1)\n\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n    \n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown quantity of 15% sugar water\n    sugar_water_15 = symbols('sugar_water_15')\n    \n    # Equation based on the total amount of sugar in the mix\n    equation = Eq(2 * 0.45 + sugar_water_15 * 0.15, (2 + sugar_water_15) * 0.25)\n    \n    # Solve for the unknown quantity\n    amount_15 = solve(equation, sugar_water_15)\n    \n    return amount_15[0]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    mod = 10**5  # We only want last 5 digits, so use modulus 10^5\n    S = 0        # Initialize sum S\n    \n    # Iterate to create each number with '2's and add to sum S in a mod 10^5 manner\n    for i in range(1, 2018):\n        S += int('2' * i) % mod\n        S %= mod\n\n    return S\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result_after_addition = 77 // 7\n    original_number = result_after_addition - 6\n    return original_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    sam, tim = symbols('sam tim')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(sam + tim, 1170)                               # Sam and Tim had 1170 cookies\n    equation2 = Eq(sam - sam / 4 + (tim + tim / 5), 1170)         # After eating and buying, the total is still 1170\n    equation3 = Eq(tim + tim / 5 - (sam - sam / 4), 663)          # Sam had 663 fewer cookies than Tim after the changes\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, tim))\n    \n    # Calculate how many cookies Sam ate, which is 1/4 of her original amount\n    cookies_eaten = solutions[sam] / 4\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    kg_per_six_days = 24\n    kg_per_day = kg_per_six_days / 6\n    kg_per_eight_days = kg_per_day * 8\n    return kg_per_eight_days\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    # Johnson and Vicky have $48 coins between them\n    equation1 = Eq(johnson + vicky, 48)\n    \n    # If Johnson gives Vicky 8 coins, Vicky will still have 2 fewer coins than Johnson\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % x == 1 for x in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting.\n    # Initially, Sally had $40$ stamps and Ting had $32$ stamps.\n    # After giving x stamps, Sally has $40 - x$ stamps, and Ting has $32 + x$ stamps.\n    # The ratio of their stamps after the transaction is $1:2$ (Sally:Ting).\n    # Therefore, we can set up the following equation: (40 - x) / (32 + x) = 1 / 2\n    \n    # Solving the equation for x to find out how many stamps Sally gave away:\n    x = symbols('x')\n    equation = Eq((40 - x) / (32 + x), 1 / 2)\n\n    # Solve the equation to find the value of x.\n    solution = solve(equation, x)\n    \n    # Calculate the number of stamps Ting has in the end: 32 (initial) + x (received from Sally).\n    stamps_ting_end = 32 + solution[0]\n\n    return stamps_ting_end\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom = symbols('tom')\n    \n    # Jerry's rate per hour\n    jerry_rate = 1 / 18\n    # Combined rate when Tom helps Jerry\n    combined_rate = 1 / 6\n    # Tom's rate per hour, which is the combined rate minus Jerry's rate\n    tom_rate = combined_rate - jerry_rate\n\n    # Equation: Tom's time (tom) times Tom's rate (tom_rate) equals 1 job\n    equation = Eq(tom * tom_rate, 1)\n\n    # Solve for Tom's time\n    tom_time = solve(equation, tom)[0]\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time (in minutes) spent at the initial speed, so x+10 is the time at the increased speed\n    x = symbols('x')\n    \n    # Distance walked at initial speed\n    distance_initial = 150 * x\n    \n    # Distance walked at increased speed\n    distance_increased = (150 + 50) * (x + 10)\n    \n    # Total distance equals sum of distances at both speeds\n    total_distance = Eq(distance_initial + distance_increased, 3700)\n\n    # Solve for x\n    time_spent_initially = solve(total_distance, x)[0]\n\n    # Total time spent walking is the sum of the time spent at the initial speed and the time spent at the increased speed\n    total_time_spent = time_spent_initially + (time_spent_initially + 10)\n\n    return total_time_spent\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    money = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    sweets_from_free_packets = 0\n    \n    packets_bought = money // price_per_packet\n    free_packets = packets_bought // 2\n    total_sweets = (packets_bought + free_packets) * sweets_per_packet\n\n    return total_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let g represent the number of girls and b represent the number of boys\n    g, b = symbols('g b', integer=True)\n\n    # Initial condition: 40% more boys than girls\n    initial_condition = b - 1.4 * g\n\n    # After 24 boys and 24 girls left the gathering\n    # there were 50% more boys than girls\n    condition_after_leaving = (b - 24) - 1.5 * (g - 24)\n\n    # Set up the equations based on the problem statement\n    equations = (initial_condition, condition_after_leaving)\n\n    # Solve the equations\n    solution = solve(equations)\n\n    # Get the number of boys at the gathering at first\n    b_at_first = solution[b]\n\n    return b_at_first\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # The problem is equivalent to dividing 88 - 8 = 80 pieces among 8 children\n    # such that no two children get the same number of pieces.\n    # The least number of pieces for the child who gets the most can be determined by\n    # arranging the distribution in increasing order starting with each child getting\n    # at least one piece. We start by giving each child one piece and then distribute\n    # the remaining pieces one by one to the next child with the least pieces.\n    \n    # Start with each child having one piece.\n    pieces = [1] * 8\n    remaining = 80 - sum(pieces)\n    \n    # Distribute the remaining pieces.\n    i = 0\n    while remaining > 0:\n        pieces[i] += 1\n        i = (i + 1) % 8\n        remaining -= 1\n    \n    # The child who gets the most pieces is the last one in the distribution.\n    pieces.sort()\n    return pieces[-1]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    initial_pink = 5\n    initial_total = 5 + 7 + 8\n    initial_probability = initial_pink / initial_total\n\n    # Now let's find the number of pink counters needed to double the initial probability\n    # 2 * (initial probability of pink) = (initial pink + extra pink) / (initial total + extra pink)\n    # Let x be the number of extra pink counters to add\n    # So we need to solve the equation: 2 * (initial_pink / initial_total) = (initial_pink + x) / (initial_total + x)\n\n    # Move everything to one side of the equation to find x\n    # 2 * initial_pink * (initial_total + x) = initial_total * (initial_pink + x)\n    # After rearranging terms, we have:\n    # 2 * initial_pink * initial_total + 2 * initial_pink * x = initial_total * initial_pink + initial_total * x\n    # initial_total * x - 2 * initial_pink * x = initial_pink * initial_total - 2 * initial_pink * initial_total\n    # x * (initial_total - 2 * initial_pink) = initial_total * (initial_pink - 2 * initial_pink)\n    # x = initial_total * (initial_pink - 2 * initial_pink) / (initial_total - 2 * initial_pink)\n\n    x = initial_total * (initial_pink - (2 * initial_pink)) / (initial_total - (2 * initial_pink))\n    return abs(int(x))\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zero_count = 0\n    while n > 0:\n        n //= 5\n        zero_count += n\n    return zero_count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Since there are three colors, Cindy might pick 1 of each color before she\n    # gets a matching pair. That's a total of 3 socks.\n    # After that, she will need to pick 3 more socks to guarantee a pair.\n    # Because even in the worst case, when she picks one more of each color,\n    # the next one must be a match to one of the pairs she already has.\n\n    # Therefore, she needs to take out 3 socks to potentially get one pair,\n    # and then she needs a maximum of 3 more socks to ensure a second pair.\n    # 3 (initial socks) + 3 (to guarantee the first pair) + 2 (to guarantee the second pair)\n    # = 8 socks in total.\n    \n    socks_needed = 3 + 3 + 2\n    return socks_needed\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let x be the initial number of cupcakes and muffins\n    cupcakes = muffins = x\n    \n    # 60 cupcakes sold\n    cupcakes -= 60\n    \n    # 12 muffins sold\n    muffins -= 12\n    \n    # Now, the remaining muffins are twice the remaining cupcakes\n    # muffins_left = 2 * cupcakes_left\n    # x - 12 = 2 * (x - 60)\n    # Solve for x\n    x = (2 * 60 + 12) / (2 - 1)\n    \n    # Total number at first is the sum of initial cupcakes and muffins\n    total = x + x\n    return int(total)\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 1.5  # 90 minutes is 1.5 hours\n\n    round_trip_time = shanghai_to_la + la_to_shanghai\n\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    \n    # Initial ratio equation: Eddi / Wiya = 3 / 2\n    equation1 = Eq(eddi/wiya, 3/2)\n    \n    # Ratio after Eddi receives $4 from Lisa: (Eddi + 4) / Wiya = 8 / 5\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (eddi, wiya))\n\n    return solution[wiya]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Helen's pocket money as 'h' and George's pocket money as 'g'.\n    helen, george = symbols('helen george')\n    \n    # George receives $3 more than Helen every day.\n    eq1 = Eq(george, helen + 3)\n    \n    # Each spends $5 a day, so we subtract $5 to find the daily savings.\n    # Helen's daily savings: helen - 5\n    # George's daily savings: george - 5\n\n    # After some time when Helen has saved $60,\n    # Number of days it takes for Helen to save $60 is $60 / (helen - 5)\n    # In the same number of days, George saves $90 more than Helen.\n    # Total savings of George is Helen's savings ($60) + $90.\n    # Since they save the same amount each day, the number of days it takes should be equal; hence,\n    # $60 / (helen - 5) * (george - 5) = $60 + $90\n    eq2 = Eq((60 / (helen - 5)) * (george - 5), 60 + 90)\n\n    # Now we solve the system of equations.\n    solution = solve((eq1, eq2), (helen, george))\n\n    # Return Helen's pocket money.\n    return solution[helen]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the first term and common difference\n    a, d = symbols('a d')\n\n    # The 9th term is a + 8d, the 15th term is a + 14d\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # The sum of the 20th term, a + 19d, and the 12th term, a + 11d, is 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate the 32nd term using the value of the first term and common difference\n    term_32 = solutions[a] + 31*solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculating the sum of the first 30 natural numbers\n    sum_first_30 = sum(range(1, 31))\n    \n    # Since the series is symmetrical, the sum of the series is doubled\n    # except for the number at the middle (30), which is counted once\n    ans = 2 * sum_first_30 - 30\n    \n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using the Inclusion-Exclusion Principle to find the number of students in both classes\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    distance_first_part = 2 * 40  # Speed * Time for the first part\n    distance_second_part = 280  # Given distance for the second part\n\n    time_second_part = distance_second_part / 70  # Time = Distance / Speed for the second part\n\n    total_time = 2 + time_second_part  # Total time for the whole trip\n    total_distance = distance_first_part + distance_second_part  # Total distance\n\n    average_speed = total_distance / total_time  # Average speed = Total distance / Total time\n\n    return average_speed\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if 3 * three_page_penpals + 4 * four_page_penpals == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    return 8 * 10 ** (len(str(768354)) - str(768354).index('8') - 1)\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    # There are 3 different cases for a 3 digit number to contain at least two '7's.\n    # Case 1: The first two digits are 7. The form is 77x, where x can be any digit except 7.\n    case1 = 9  # Digits from 0 to 9, excluding 7\n\n    # Case 2: The last two digits are 7. The form is x77, where x can be any digit from 1 to 9 (can't be 0 as it is a 3-digit number).\n    case2 = 9  # Digits from 1 to 9\n\n    # Case 3: The first and last digits are 7. The form is 7x7, where x can be any digit except 7.\n    case3 = 9  # Digits from 0 to 9, excluding 7\n    \n    # But there's an overlap between these cases which we've counted twice: 777.\n    # So we need to subtract the overlap.\n    overlap = 1  # The number 777\n\n    # Add all the distinct cases and subtract the overlap to get the final result.\n    ans = case1 + case2 + case3 - overlap\n    return ans\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    packets_of_25 = 25\n    packets_of_20 = 20\n\n    days_to_sync = lcm(packets_of_25, packets_of_20)\n\n    start_day = 1  # March 1st\n    next_start_day = start_day + days_to_sync\n\n    return next_start_day\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Calculate ways to arrange 4 dancing performances with spaces between them\n    # Using 6-1 (5) singing performances as dividers, which gives 5+1 (6) slots\n    # C(6, 4) for choosing 4 slots out of 6 for dancing\n    slots = factorial(6) // (factorial(4) * factorial(6 - 4))\n\n    # Calculate ways to arrange the rest of the singing performances\n    # 2 singing performances can be freely arranged in the remaining positions\n    rest_singing = factorial(2)\n\n    # Multiply the arrangements of dance slots with the arrangements of the rest of the singing\n    total_arrangements = slots * rest_singing\n\n    return total_arrangements\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Equation for the mistake Aiden made\n    mistake_eq = Eq(x / 4 - 25, 2021)\n\n    # Solve the equation for the number Aiden used\n    number = solve(mistake_eq, x)[0]\n\n    # The correct calculation with the number\n    correct_ans = number * 4 + 25\n\n    return correct_ans\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors = [75, 56, 12, 105]\n    twos_count = 0\n    fives_count = 0\n\n    for number in prime_factors:\n        while number % 2 == 0:\n            twos_count += 1\n            number //= 2\n        while number % 5 == 0:\n            fives_count += 1\n            number //= 5\n    \n    ans = min(twos_count, fives_count)  # The number of zeros is the minimum of the counts of twos and fives\n    return ans\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    A = Fraction(1, 1)\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    # Subtract all ai from A to get a0\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    # Simplify the fraction of a0\n    a0 = a0.limit_denominator()\n    # Calculate m + n\n    return a0.numerator + a0.denominator\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna_books = symbols('donna_books')\n    equation = Eq(donna_books * 4, donna_books + 816)\n    num_of_books = solve(equation, donna_books)\n    return num_of_books[0]\n\nfrom sympy import symbols, Eq, solve\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    return (8 * 3) - 4\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' represent the number of adults, 'c' the number of children,\n    # 'g' the number of girls, and 'b' the number of boys.\n    a, c, g, b = symbols('a c g b')\n\n    # We have three equations according to the problem\n    equation1 = Eq(a, 3 * c)           # three times as many adults as children\n    equation2 = Eq(b, 2 * g)           # twice as many boys as girls\n    equation3 = Eq(a, g + 176)         # 176 more adults than girls\n\n    # Now we solve the three equations\n    solutions = solve((equation1, equation2, equation3), (a, c, g, b))\n\n    # Total number of people at the concert is the sum of adults, children, girls, and boys\n    a, c, g, b = solutions[a], solutions[c], solutions[g], solutions[b]\n    total_people = a + c + g + b\n\n    return total_people\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # All possible digits based on the information given (0-9)\n    possible_digits = set(range(10))\n    \n    # Remove digits from the fourth guess as none are correct\n    fourth_guess = set([5, 4, 3, 0])\n    possible_digits -= fourth_guess\n\n    # Create a set for each guess to eliminate the possibility of repeated digits\n    first_guess_wrong_pos = {8, 7, 6, 5}\n    second_guess_wrong_pos = {1, 0, 2, 3}\n    third_guess_right_pos = [8, 6, 4, 2]\n\n    # Remove digits from the first and second guess that are no longer possible\n    # This will leave us with only the digits that could possibly be in the number\n    possible_digits -= (first_guess_wrong_pos - set(third_guess_right_pos))\n    possible_digits -= (second_guess_wrong_pos - set(third_guess_right_pos))\n\n    # Based on third guess, find the position of the two correct digits\n    correct_positions = {i: d for i, d in enumerate(third_guess_right_pos) if d in possible_digits}\n\n    # Now we will try to fit the remaining possible digits into the number\n    # while satisfying the conditions given by the teacher for each guess.\n    for i in possible_digits:\n        for j in possible_digits:\n            if i != j:\n                # Test a combination where i and j take the free positions\n                test_number = list('0000')\n                for idx, val in correct_positions.items():\n                    test_number[idx] = str(val)\n                \n                # Free positions not yet filled (should not match third guess)\n                free_positions = [idx for idx in range(4) if idx not in correct_positions]\n                \n                test_number[free_positions[0]] = str(i)\n                test_number[free_positions[1]] = str(j)\n                \n                # Convert to string to check conditions\n                test_number_str = ''.join(test_number)\n\n                # Check the conditions for each guess\n                if (\n                    len(set(test_number_str) & first_guess_wrong_pos) == 2 and\n                    len(set(test_number_str) & second_guess_wrong_pos) == 2\n                ):\n                    # Found the number that satisfies all the given conditions\n                    return int(test_number_str)\n\n    # If we get here, no number was found (should not happen based on assumptions)\n    return None\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999\n    exponent = 99\n    # Since we only care about the ones digit, we can simplify the problem by\n    # looking at the ones digit of the base, which is 9, and taking that to the\n    # power of the exponent modulo 10.\n    ones_digit = pow(9, exponent, 10)  # This computes 9^99 mod 10\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 194))\n    for a in primes:\n        for b in primes:\n            if 3 * a + 11 * b == 193:\n                return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            a0b = a * 100 + b\n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    annabella_cost = solutions[banana] + solutions[apple]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    a, b, c = 12, 15, 60\n    ans = gcd(gcd(a, b), c)\n\n    return ans\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n    \n    equation = Eq(children, men + 20)\n\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate the number of houses one worker can build in one day\n    houses_per_worker_per_day = (houses_built_initial / workers_initial) / days_initial\n\n    # Calculate the number of houses 9 workers can build in 2 days\n    houses_built_final = houses_per_worker_per_day * workers_final * days_final\n\n    return houses_built_final\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_per_ball, total_money = symbols('cost_per_ball total_money')\n    \n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n    \n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n    \n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    # Initialize the minimum product to a large number\n    min_product = float('inf')\n    \n    # Since we have the sum of ages and Fido is the youngest\n    # we can iterate through possible ages for Fido (starting from 1)\n    for fido_age in range(1, 28):\n        # Rex is older than Fido and younger than Bob, iterate Rex's age\n        for rex_age in range(fido_age + 1, 28):\n            # Determine Bob's age based on the other two and the sum of ages\n            bob_age = 28 - (fido_age + rex_age)\n            # Ensure all dogs have different ages\n            if bob_age > rex_age and bob_age != fido_age:\n                # Bob is the oldest dog, so subtract 10 years from his age to compare with Fido's age\n                if bob_age - 10 == fido_age:\n                    # Calculate the product of their ages\n                    product = fido_age * rex_age * bob_age\n                    # Update the minimum product if we found a smaller product\n                    if product < min_product:\n                        min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(A, 1000):  # start from A to avoid repetition and ensure A != B\n            if A != B and B % 75 == 0 and A % 75 == 0:\n                # Convert numbers to strings to check for the equal digits condition\n                str_A, str_B = str(A), str(B)\n                # Count common digits\n                common_digits = sum(str_A[i] == str_B[j] for i in range(3) for j in range(3))\n\n                # If there are two equal digits (not necessarily side by side)\n                if common_digits == 2:\n                    new_sum = A + B\n                    if new_sum > max_sum:\n                        max_sum = new_sum\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    height_after_first_bounce = height_after_second_bounce * 3\n    initial_height = height_after_first_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n    \n    part1_numerator = Fraction(1, 30) + Fraction(1, 6)\n    part1_denominator = Fraction(2, 25)\n    part1 = part1_numerator / part1_denominator\n    \n    part2_numerator = Fraction(2) - Fraction(2, 3)\n    part2_denominator = Fraction(8, 3)\n    part2 = part2_numerator / part2_denominator\n    \n    ans = part1 + part2\n    return float(ans)\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the number of hours Lee takes to finish the job alone\n    # Let n be the number of hours Nancy takes to finish the job alone\n    l, n = symbols('l n')\n\n    # 1/l + 1/n = 1/10 (Both working together)\n    equation1 = Eq(1/l + 1/n, 1/10)\n\n    # 6/l + 20/n = 1 (Lee works for 6 hours and Nancy for 20 hours to finish the job)\n    equation2 = Eq(6/l + 20/n, 1)\n\n    # Solving the system of equations for l and n\n    solutions = solve((equation1, equation2), (l, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_marks = total_students * 90\n    average_difference = 7\n    \n    # Let the average score of Class A be x\n    # Then the average of Class B will be x + average_difference\n    # Total marks for Class A will be 40 * x\n    # Total marks for Class B will be 30 * (x + average_difference)\n\n    # According to the problem statement\n    # 40 * x + 30 * (x + average_difference) = total_marks\n    \n    # Solving for x gives us average score for Class A\n    # Then we can find average for Class B\n    x = (total_marks - 30 * average_difference) / (40 + 30)\n    class_b_average = x + average_difference\n    \n    return class_b_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the value of the complex fraction\n    ans = 1 / (1/(2007 * 2008) + 1/(2008 * 2009) + 1/2009)\n    \n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n\n    # Iterate over possible combinations of coins\n    for ten_pence in range(6): # 0 to 5 inclusive, since Jeremy has 5 ten-pence coins\n        for twenty_pence in range(4): # 0 to 3 inclusive, since Jeremy has 3 twenty-pence coins\n            for fifty_pence in range(2): # 0 to 1 inclusive, since Jeremy has 1 fifty-pence coin\n                total = 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence\n                if total == 70:\n                    ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    capacity = 7\n    boats_needed = (students + capacity - 1) // capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    return 11 - 2 + 7 - 4 + 2\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the age of Becky be represented by 'b'\n    # Since Aaron is older than Becky by the same difference 'd' as Becky is older than Chris\n    # Aaron's age is b + d and Chris' age is b - d\n    b, d = symbols('b d')\n    equation1 = Eq((b + d) + b + (b - d), 60)\n    \n    # Solve the equation to find the age of Becky\n    solutions = solve(equation1, b)\n    \n    # Return Becky's age from the solutions\n    return solutions[0]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f\"125{J}6\") % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # 5 tables and 12 chairs cost 720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    # each table costs 25 more than each chair\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and a peach\n    apple, peach = symbols('apple peach')\n\n    # Create the equations based on the given information\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (apple, peach))\n\n    return solution[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_result = 66\n    initial_result = final_result / 6\n    original_number = initial_result - 7\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    # a odot b = 5a - 2b\n    # 9 odot x = 33\n    # 5 * 9 - 2 * x = 33\n    # Solve for x:\n    x = (5 * a - 33) / 2\n    return x\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Formula for the sum of the squares of the first n natural numbers\n    # S_n^2 = (1^2 + 2^2 + ... + n^2) = n(n + 1)(2n + 1)/6\n    def sum_of_squares(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of the series using the sum of squares formula\n    ans = sum(i * (i + 1)**2 for i in range(24))\n    \n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time in minutes\n    ratio_up = 5\n    ratio_down = 4\n    combined_ratio = ratio_up + ratio_down\n\n    time_up = (total_time * ratio_up) / combined_ratio\n    time_down = total_time - time_up\n\n    # Assuming speed_down is s, then speed_up is s - 10\n    # We have two equations now:\n    # distance_up = speed_up * time_up\n    # distance_down = speed_down * time_down\n\n    # distance_up = distance_down because it's the same hill\n    # (s - 10) * time_up = s * time_down\n    # By substituting the values of time_up and time_down, we can find s\n\n    # (s - 10) * (total_time * ratio_up / (ratio_up + ratio_down)) = s * (total_time * ratio_down / (ratio_up + ratio_down))\n    # Simplify to find s:\n    s = 10 * combined_ratio / (ratio_down - ratio_up)\n\n    # Now calculate the distance\n    distance_up = (s - 10) * time_up\n    distance_down = s * time_down\n\n    # The total distance is just 2 times distance_up or distance_down since the hill is the same\n    total_distance = 2 * distance_up\n\n    return total_distance\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from sympy import lcm\n\ndef solution():\n    packet_25 = 25\n    packet_20 = 20\n    days_in_march = 31\n\n    least_common_multiple = lcm(packet_25, packet_20)\n    \n    # Calculate the next start date\n    total_days = least_common_multiple\n    months = total_days // days_in_march\n    start_day = total_days % days_in_march\n\n    # If start_day is 0, it means the packet starts on the last day of March\n    if start_day == 0:\n        start_day = days_in_march\n        months -= 1\n\n    return (start_day, months)\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_each = num_friends - 1\n    total_cards = num_friends * cards_sent_each\n    \n    return total_cards\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    return 36 + 17 + 18 + 24 + 33\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the mass each car carries\n    car_mass = 24.2 / 4\n    \n    # Calculate the mass each truck carries\n    truck_mass = 410 / 50\n    \n    # Calculate the difference in mass between what a truck carries and what a car carries\n    difference = truck_mass - car_mass\n    \n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    arrived_time = 9 * 60 + 22  # Convert 9:22 to minutes\n    next_bus_time = 9 * 60 + 15  # Initial bus time at 9:15\n\n    # If Aiden arrived after the bus, find the next bus time\n    while arrived_time >= next_bus_time:\n        next_bus_time += bus_interval\n\n    # Calculate waiting time\n    wait_time = next_bus_time - arrived_time\n\n    return wait_time\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Tom's current age and Jerry's current age\n    tom, jerry = symbols('tom jerry')\n\n    # Tom will be twice his current age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the system of equations to find Tom's and Jerry's current ages\n    ages = solve((equation1, equation2), (tom, jerry))\n\n    # The years required for Jerry's age to be doubled\n    years_for_jerry_double = symbols('years_for_jerry_double')\n\n    # The equation describing the age Jerry would be double\n    equation3 = Eq(jerry + years_for_jerry_double, 2 * jerry)\n\n    # Solve for how many years it will take for Jerry's age to be doubled from now\n    years_to_double_jerry = solve(equation3.subs(jerry, ages[jerry]), years_for_jerry_double)\n\n    return years_to_double_jerry[0]\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_per_week = 7\n    weeks_until_birthday = total_days / days_per_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62 \n    brother_speed = 70 \n    time = 5 \n\n    distance_meet = eddie_speed * time\n    total_distance = distance_meet + brother_speed * time\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    ans = 161 / 46\n    return ans\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    \n    days = 0\n    while True:\n        watermelons_left = watermelons - days * watermelons_per_day\n        pineapples_left = pineapples - days * pineapples_per_day\n\n        if pineapples_left == 3 * watermelons_left:\n            break\n        days += 1\n    \n    return days\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    final_price = original_price * (1 - discount_rate) * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # total flowers divided by flowers planted between 2 lamp posts gives the number of intervals\n    total_flowers = 30\n    flowers_between_posts = 3\n    intervals = total_flowers // flowers_between_posts\n\n    # total length of road divided by the number of intervals gives distance between 2 lamp posts\n    road_length = 50\n    distance_between_posts = road_length / (intervals + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    ans = 1 + circles + circles*(circles-1)//2 + circles*(circles-1)*(circles-2)//6\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_remaining = total_books - books_given_away\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Lora and her mother as symbols\n    lora, mother = symbols('lora mother')\n\n    # Setup the equations based on the problem\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    # Lora's age is the solution for lora\n    return solutions[lora]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    males = total_adults * fraction_male\n    return int(males)\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    pattern = [base_unit_digit]\n    \n    # Compute the unit digits pattern\n    for _ in range(1, 4):  # We calculate the next 3 to see the repeating pattern\n        base_unit_digit = (base_unit_digit * 4) % 10\n        pattern.append(base_unit_digit)\n\n    # The pattern of the unit digit in powers of 4 repeats every 2 steps: [4, 6]\n    power = 2008\n    # Subtract 1 because list indices start at 0\n    index = (power % len(pattern)) - 1\n    \n    # If index is -1, it means the last element of pattern which is 6\n    ans = pattern[index] if index >= 0 else pattern[-1]\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    ages = [7, 5, 29, 31]\n    year = 2017\n\n    # Loop until we find the next year where all ages are prime\n    while True:\n        year += 1\n        # Increase all ages by 1 as the year progresses\n        ages = [age + 1 for age in ages]\n        # Check if all ages are prime\n        if all(isprime(age) for age in ages):\n            return ages[3]  # Return father's age\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n\n    total_sweets = ben_sweets + bob_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio_shop_to_school = 6 * 2\n    paths_book_shop_to_school = 4 * 2\n    paths_chapel_to_school = 5 * 3\n\n    total_paths = paths_audio_shop_to_school + paths_book_shop_to_school + paths_chapel_to_school\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight_twice = adam_ben + ben_carl + adam_carl\n    total_weight = total_weight_twice / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n    \n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.5 + twenty_pence_coins * 0.2\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    belle_sticks, eddie_sticks = symbols('belle_sticks eddie_sticks')\n\n    # Given information\n    equation1 = Eq(belle_sticks, 49)  # Belle initially has 49 sticks\n    equation2 = Eq(eddie_sticks - 11, belle_sticks + 11)  # After the exchange, they have the same amount\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (belle_sticks, eddie_sticks))\n\n    return solutions[eddie_sticks]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lampposts = 50\n    distance_between_lampposts = 2\n    \n    # Total distance is the product of the (number of lampposts - 1) \n    # and the distance between each lamppost.\n    total_distance = (number_of_lampposts - 1) * distance_between_lampposts\n    \n    return total_distance\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    boxes = 6\n\n    total_weight = weight_per_box * boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)  # together they have 25 coins\n    equation2 = Eq(kofi + 4, john - (4 + 3))  # Kofi's coins after getting 4 from John\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea // 2\n    tea_to_give = tea_each - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6]\n    all_permutations = permutations(digits)\n\n    # Count the number of permutations which are the number of different natural numbers\n    count = len(list(all_permutations))\n\n    return count\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for normal rabbits and special rabbits\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    # Equation for the total number of heads\n    # normal rabbits have 1 head, special rabbits have 3 heads\n    heads_eq = Eq(normal_rabbits + 3 * special_rabbits, 53)\n\n    # Equation for the total number of feet\n    # normal rabbits have 4 feet, special rabbits have 2 feet\n    feet_eq = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    # Solve the system of equations for the number of normal and special rabbits\n    solutions = solve((heads_eq, feet_eq), (normal_rabbits, special_rabbits))\n\n    # Return the total number of rabbits (normal ones plus special ones)\n    ans = solutions[normal_rabbits] + solutions[special_rabbits]\n    return ans\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    cost_for_13_bananas = cost_per_banana * 13\n    change_from_10_pounds = (10 * 100) - cost_for_13_bananas  # convert £10 to pence\n\n    return change_from_10_pounds\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    numerator = 1\n    denominator = 70\n    remainder = numerator % denominator\n    for i in range(499):  # Loop 499 times to get the 500th digit\n        remainder *= 10\n        remainder %= denominator\n    # Calculating the 500th remainder\n    remainder *= 10\n    ans = remainder // denominator\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    neelesh_sweets_before_eating = neelesh_sweets_after_eating + 1\n    total_sweets = neelesh_sweets_before_eating * 6\n    ayesha_sweets_left = total_sweets - neelesh_sweets_before_eating\n    return ayesha_sweets_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    copper, iron = symbols('copper iron')\n    \n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n    \n    solutions = solve((equation1, equation2), (copper, iron))\n    \n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(3) / Fraction(1, 3)\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of gummy bears, y be the number of lollipops before adding 120 pieces to each\n    x, y = symbols('x y')\n\n    # original ratio before adding candies\n    original_ratio = Eq(x/y, 5/7)\n    \n    # new ratio after adding 120 pieces to each\n    new_ratio = Eq((x + 120)/(y + 120), 4/5)\n\n    # solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (x, y))\n    \n    # total number of candies after adding 120 pieces to each\n    total_candies = solutions[x] + 120 + solutions[y] + 120\n\n    return total_candies\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:  # Ensure fraction is less than 1 and irreducible\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    \n    # Let marbles_in_C be x, then marbles_in_B is 2x\n    # We have the equation: marbles_in_A + marbles_in_B + marbles_in_C = total_marbles\n    # 80 + 2x + x = 560\n    marbles_in_C = (total_marbles - marbles_in_A) / 3\n\n    return int(marbles_in_C)\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    pounds_per_stone = 14\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n\n    andrew_weight_pounds = 275\n\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    value_nth_term = 31\n    common_difference = 28 - 25\n\n    first_term = value_nth_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    ans = sum(numbers) * 3\n    return ans\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert base 3 numbers to decimal\n    num1 = int(\"12101\", 3)\n    num2 = int(\"2210\", 3)\n\n    # Subtract the numbers\n    difference = num1 - num2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while difference:\n        ans = str(difference % 3) + ans\n        difference //= 3\n        \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    base_amount = 3.20\n    percent_value = 50 / 100\n    result = base_amount * percent_value * percent_value\n    return result\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize a list for the first 20 positive integers\n    integers = list(range(1, 21))\n\n    # Initialize the largest possible set\n    largest_set = set()\n\n    # Loop through the list to find all numbers that\n    # do not differ by 5 from any number in largest_set\n    for number in integers:\n        if all(abs(number - x) != 5 for x in largest_set):\n            largest_set.add(number)\n\n    # Return the size of the largest set\n    return len(largest_set)\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_correct = 6\n    marks_per_correct = 12\n    total_wrong = 2\n    marks_per_wrong = 0\n    total_questions = total_correct + total_wrong\n    \n    total_marks = (total_correct * marks_per_correct) + (total_wrong * marks_per_wrong)\n    average_mark = total_marks / total_questions\n    \n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016 + 875/1000\n    denom1 = 2017 + 1/3\n    denom2 = 2016 + 875/1000\n    mult = 3 + 23/32\n\n    # Perform the necessary calculations\n    numerator = (num1 * num2 - num3 * (11/3))\n    denominator = (denom1 - denom2) * 17\n    result = (numerator / denominator) * mult\n\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for b in range(1, 10):\n        for digit_1 in range(10):\n            num_pencils = int(f\"{b}{digit_1}{b}\")\n            if num_pencils % 44 == 0:\n                return num_pencils // 44\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent John's current age and m represent his mother's current age.\n    j, m = symbols('j m')\n\n    # John's age in 8 years = his mother's age - 20 years\n    equation1 = Eq(j + 8, m - 20)\n\n    # At some point in the past, mother's age was 5 times John's age:\n    # m - age_difference (d) = 5 * (j - age_difference (d))\n    # We know age_difference (d) from equation1: m - j = 28\n    equation2 = Eq(m - 28, 5 * (j - 28))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, m))\n\n    # John's age when his mother was 5 times his age\n    john_age_when = 28 - solutions[j]\n\n    return john_age_when\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\nfrom functools import reduce\n\ndef solution():\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcm_multiple(numbers):\n        return reduce(lcm, numbers)\n\n    ans = lcm_multiple([4, 6, 7])\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = [M % i for i in range(2, 11)]\n        if len(set(remainders)) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Least common multiple (LCM) of Tom's and William's lap times will be the time they meet at the starting point\n    from math import lcm\n    tom_lap_time = 24\n    william_lap_time = 8\n\n    time_to_meet = lcm(tom_lap_time, william_lap_time)\n\n    return time_to_meet\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n    num_containers = (total_apples + per_container - 1) // per_container\n    return num_containers\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    # Let r represent the amount Reema collects\n    # Let romily represent the amount Romily collects\n    # From the problem statement, we have the equation:\n    # romily = reema + 10\n    # However, we do not have total amount collected or any other details\n    # Thus, with the information given, we can't solve for a numerical value of reema\n    # The problem seems to be incomplete as there is no total or other relationship given.\n    # If this task is hypothetical, and we are just establishing the relationship between\n    # Romily's and Reema's collections, then Reema's collection would be 'r' and Romily's would be 'r + 10'\n    # But since we need a numerical answer and since there's no other information, we cannot determine 'r'\n    \n    # For the purpose of this hypothetical function, we will return None\n    # because the problem does not give enough information for a numerical answer.\n    reema = None\n    return reema\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(28)\n    product = 1\n    \n    for factor, count in factors.items():\n        if count % 2 != 0:\n            product *= factor\n    \n    return product\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n\n    # Posts are needed at both ends, so add 1 to the division result\n    num_posts = (field_length // post_interval) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero as it's a two-digit number\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time taken after he reached home before finishing lunch\n    time_taken = timedelta(minutes=(10 + 20 + 20))\n    \n    # Time when lunch finished\n    lunch_finished_time = datetime.strptime('2:50 PM', '%I:%M %p')\n    \n    # Time when Benson reached home\n    home_reached_time = lunch_finished_time - time_taken\n    \n    # Formatting to standard time format without seconds\n    ans = home_reached_time.strftime('%I:%M %p')\n    \n    return ans\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # A and B are considered as one unit and we have then 5 units to arrange, the 5 units being (AB), C, D, E, F.\n    # The number of ways to arrange 5 units is 5!.\n    units_arrangement = factorial(5)\n\n    # A and B as a unit can arrange among themselves in 2! ways, since A can be before B or B before A.\n    ab_arrangement = factorial(2)\n\n    # Total arrangements is the product of units_arrangement and ab_arrangement.\n    total_arrangements = units_arrangement * ab_arrangement\n\n    return total_arrangements\n    \nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    growth_rate = 5\n    death_rate = 1/2\n    years = 5\n    \n    for _ in range(years):\n        initial_population = (initial_population * growth_rate) * death_rate\n    return int(initial_population)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y):\n    x = symbols('x')\n    equation = Eq(6 * x, y)\n    return equation\n\ny = symbols('y')\nans = solution(y)"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # Since the number must be divisible by 4 and 5 leaving a remainder of 3, \n    # it must be of the form 4n + 3 and 5m + 3. But since 4 and 5 are coprime, \n    # any common divisible number must be of the form 20k + 3 (LCM(4, 5) = 20).\n    \n    # To find the largest two-digit number of this form,\n    # start from the largest two-digit number (99) and go downwards until we find a number that\n    # satisfies the condition (20k + 3).\n    \n    # We're looking for the largest number less than or equal to 99 with the form 20k + 3.\n    \n    num = 99\n    while (num - 3) % 20 != 0 or num < 10:  # The number should be two-digit.\n        num -= 1\n        \n    return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    eq1 = Eq(buzz, 3 * jessie)\n    eq2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((eq1, eq2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 / 5 * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_possible_class_size = total_sweets // min_sweets_per_student\n    for class_size in range(max_possible_class_size, 0, -1):\n        if total_sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    ans = (246 * 135) + (2 * 135)\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_values = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n    \n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n    number_of_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return number_of_children\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given_away = total_blocks / 4\n    blocks_left = total_blocks - blocks_given_away\n    return blocks_left\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # Since it's an even number < 8 (half of ones)\n        for tens_digit in range(0, 10, 2):  # It has to be even\n            if tens_digit != hundreds_digit * 2 and tens_digit != hundreds_digit:\n                ones_digit = hundreds_digit * 2\n                if ones_digit < 10 and tens_digit > hundreds_digit:  # Ensure all conditions are met\n                    number = 100 * hundreds_digit + 10 * tens_digit + ones_digit\n                    if number % 2 == 0 and number % 9 == 0:  # Check divisibility by 2 and 9\n                        return number\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the number of steps of the escalator be x\n    # When Peter is walking at 1 step per second, the escalator takes him up (x - 10) steps\n    # Therefore, (x - 10) represents the time in seconds it takes for Peter to reach the top at 1 step per second\n\n    # When Peter is walking at 2 steps per second, he takes 8 seconds (16 steps at 2 steps per second)\n    # In that time, the escalator would take him up (x - 16) / 2 steps\n\n    # Now we set up the equation, since the escalator has constant speed:\n    # (x - 10) = 2 * ((x - 16) / 2) \n    # Simplifying the equation, we get:\n    # x - 10 = x - 16 + 8\n    # This simplifies to x = x + 2, which is not correct.\n\n    # We made a mistake in the calculation. Let's re-evaluate.\n    # In the 8 seconds, the escalator itself would contribute 8 steps.\n    # 8 + (x - 16)/2 should therefore equal x - 10.\n    # Again, let's solve that equation.\n    \n    # x - 10 = 8 + (x/2 - 8)\n    # This simplifies to x - 10 = x/2\n    # Or 2*(x - 10) = x\n    # Therefore, 2x - 20 = x\n    # So, x = 20\n\n    return 20\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    sally, ken = symbols('sally ken')\n  \n    # Initial ratio given as 5:7 which means for some k, sally = 5k and ken = 7k\n    # After giving chocolates ken = 7k - 24 and sally = 5k + 24\n    # Finally, sally has twice as many chocolates as ken, so sally = 2 * ken\n\n    # Set up the equations\n    # sally = 5k + 24\n    # ken = 7k - 24\n    # sally = 2 * ken -> 5k + 24 = 2 * (7k - 24)\n\n    eq = Eq(5 * ken - 7 * sally, -24)\n    eq2 = Eq(2 * sally - ken, 24)\n\n    solutions = solve((eq, eq2), (sally, ken))\n  \n    return solutions[ken]\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    colour_pencil, notebook = symbols('colour_pencil notebook')\n\n    equation1 = Eq(5 * colour_pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * colour_pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (colour_pencil, notebook))\n\n    total_cost = solutions[colour_pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    hours_free = 40\n    max_hours_before_high_rate = 60\n\n    # if the bill is less than or equal to the cost of the first extra 10 hours,\n    # the hours parked can be calculated directly\n    if bill <= 10 * 5:\n        hours_parked = hours_free + (bill / 5)\n    # if the bill is less than or equal to the cost of the first 20 extra hours,\n    # the hours parked can be calculated by adding 10 hours to the result of the \n    # division of the amount left after deducting the first $50 by the hourly rate\n    # between 50 and 60 hours\n    elif bill <= (10 * 5) + (10 * 8):\n        hours_parked = hours_free + 10 + ((bill - (10 * 5)) / 8)\n    else:\n        # if the bill is greater than the cost of the first 20 extra hours,\n        # the hours parked can be calculated by adding 20 hours to the result of\n        # the division of the amount left after deducting the first $50 by the highest\n        # hourly rate\n        hours_parked = hours_free + 20 + ((bill - (10 * 5) - (10 * 8)) / 15)\n\n    return hours_parked\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip = bill * 0.20\n    tax = bill * 0.10\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vijay, raju, patrick = symbols('vijay raju patrick')\n    total_money = 507 * 3  # because average amount is 507\n\n    # Raju has 3 times as much money as Vijay\n    equation1 = Eq(raju, 3 * vijay)\n    # Raju has 152 more than Patrick\n    equation2 = Eq(raju, patrick + 152)\n    # Sum of their money is total_money\n    equation3 = Eq(vijay + raju + patrick, total_money)\n    \n    solutions = solve((equation1, equation2, equation3), (vijay, raju, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    # Number of sides in a square\n    sides_square = 4\n    # Number of sides in a triangle\n    sides_triangle = 3\n\n    # Double the number of sides in a square\n    double_sides_square = 2 * sides_square\n\n    # Subtract the number of sides in a triangle from double the number of sides in a square\n    ans = double_sides_square - sides_triangle\n\n    return ans\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12\n    new_pay = original_pay * (1 + increase_percentage / 100)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    total_digits = 0\n    \n    while total_digits < 1014:\n        possible_pages = 10**digits_per_page - 10**(digits_per_page - 1)\n        possible_digits = digits_per_page * possible_pages\n        \n        if total_digits + possible_digits > 1014:\n            break\n        else:\n            total_digits += possible_digits\n            pages += possible_pages\n            digits_per_page += 1\n    \n    remaining_digits = 1014 - total_digits\n    pages += remaining_digits // digits_per_page\n    \n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_per_week = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly * weeks) - (amy_spent_per_week * weeks)\n\n    difference = joanna_total - amy_total\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n\n    # choose 1 teacher in 2 ways\n    # choose 4 students (with at least 1 female) in several ways:\n\n    # 0 males, 4 females\n    total_ways += comb(2, 1) * comb(7, 0) * comb(6, 4)\n    # 1 male, 3 females\n    total_ways += comb(2, 1) * comb(7, 1) * comb(6, 3)\n    # 2 males, 2 females\n    total_ways += comb(2, 1) * comb(7, 2) * comb(6, 2)\n    # 3 males, 1 female\n    total_ways += comb(2, 1) * comb(7, 3) * comb(6, 1)\n\n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    number = symbols('number')\n\n    # Given equation: 3 * number + 6 = number + 16\n    equation = Eq(3 * number + 6, number + 16)\n\n    # Solve the equation\n    solution = solve(equation, number)\n\n    # Get the result\n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    salary_per_month = 3.248\n    debt = 1.6\n    months_needed = debt / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    total = 0\n    for i in range(1, 8):\n        total += (i * 10) - (i * 10 - 4)\n    total += 2021\n    return total\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let Alice's age be 'a' and her sister's age be 's'\n    a, s = symbols('a s')\n\n    # Equation 1: Alice is twice as old as her sister now.\n    equation1 = Eq(a, 2 * s)\n\n    # Equation 2: In 10 years time, their total age is 53 years old.\n    equation2 = Eq(a + 10 + s + 10, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, s))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    terms_diff = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / terms_diff\n    twelfth_term = tenth_term + (2 * common_difference)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # degree of the monomial is the sum of the exponents of all variables\n    # In -x^3y^(2n), the degree is 3 + 2n\n    # According to the question, the total degree is 5\n\n    # So, 3 + 2n = 5\n    # Solving for n, n = (5 - 3) / 2\n\n    n = (5 - 3) // 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    number_of_cups = 45\n\n    total_milk = milk_per_cup * number_of_cups\n    total_tea = tea_per_cup * number_of_cups\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    pencil_price = 40  # 40p, which is £0.40\n    sarah_books = 8\n    sarah_pencils = 3\n    rebecca_books = 3\n    rebecca_pencils = 8\n    difference = 1  # £1.00 difference\n    \n    equation = Eq(sarah_books * book_price + sarah_pencils * pencil_price / 100,\n                  rebecca_books * book_price + rebecca_pencils * pencil_price / 100 + difference)\n    \n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for each person's number of gummy bears\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Given price per gummy bear in pence\n    price_per_gummy_bear = 6  # in pence\n    \n    # Given total spent in pounds, convert to pence (1 pound = 100 pence)\n    total_spent = 3.42 * 100  # in pence\n\n    # Angela buys two more gummy bears than Bernice\n    equation1 = Eq(angela, bernice + 2)\n\n    # Bernice buys eight more gummy bears than Candice\n    equation2 = Eq(bernice, candice + 8)\n\n    # Together the three girls spend 3.42 pounds on gummy bears\n    equation3 = Eq(angela * price_per_gummy_bear + bernice * price_per_gummy_bear +\n                   candice * price_per_gummy_bear, total_spent)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    # Return the number of gummy bears Angela buys\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Median of the list is the middle value since the list is already sorted.\n    # Since there are 10 numbers, the median will be the average of the 5th and 6th values.\n    # The list is: n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19\n    # Thus, the median is (n+7 + n+8)/2 = 20\n    median = (2 * n + 15) // 2\n    n = 20*2 - 15\n    # Calculate the mean\n    # The mean of the list is the sum of all numbers divided by the count of numbers\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_n = (n * (n + 1)) // 2\n    return sum_n\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weights of the three apples be a, b, and c where a < b < c.\n    # If Tim eats the largest apple, the mean weight of the remaining two apples is 70 grams.\n    # So, (a + b) / 2 = 70\n    # -> a + b = 140\n    \n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams.\n    # So, (b + c) / 2 = 105\n    # -> b + c = 210\n    \n    # Therefore, the weight of the middle apple b is the total weight subtracted by a and c:\n    # b = (a + b + c) - a - c\n    # Since a + b = 140 and b + c = 210:\n    # b = (140 + 210) / 2 - 140\n    # b = 350 / 2 - 140\n    b = 175 - 140\n    \n    # Thus, a = 140 - b\n    a = 140 - b\n\n    # And c = 210 - b\n    c = 210 - b\n    \n    # The weight difference between the heaviest apple and the lightest apple is c - a.\n    weight_difference = c - a\n    \n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the first number be x, thus other numbers are (x+1), (x+2)\n    # The sum of three consecutive numbers is x + (x + 1) + (x + 2)\n    x = symbols('x')\n    equation = Eq(x + (x + 1) + (x + 2), 60)\n    solution = solve(equation, x)\n    # The largest number is the third one, which is (x + 2)\n    largest_number = solution[0] + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    per_container_volume = 2\n\n    num_containers = total_volume / per_container_volume\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    shaking_members = total_members - non_shaking_groups\n    total_shakes_between_non_shakers = non_shaking_groups * (non_shaking_groups - 1) // 2\n    total_shakes = total_members * (total_members - 1) // 2\n    shakes_with_non_shakers_involved = non_shaking_groups * shaking_members\n    shakes_happened = total_shakes - total_shakes_between_non_shakers - shakes_with_non_shakers_involved\n    return shakes_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables\n    A, B, C, D, E, F, G, H, I = symbols('A B C D E F G H I')\n\n    # Set up the equations based on the vertical forms\n    eq1 = Eq(A - C, I)\n    eq2 = Eq(A - B + 10*E, H*10 + I)\n    eq3 = Eq(D + E, G*10 + H)\n    eq4 = Eq(B + F, D)\n    eq5 = Eq(G + H + C, F*10 + E)\n    eq6 = Eq(E + C, B)\n    eq7 = Eq(H + A + B, G*100 + F*10 + E)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (A, B, C, D, E, F, G, H, I))\n\n    # Return the value of A\n    return solutions[A]\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        original_number = i\n        new_number = int(str(i) + '0')\n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter which direction he counts,\n    # both the number of rows in front of and behind Bob, and the number of columns\n    # to the left of and right of Bob must be 2.\n    \n    # Therefore, Bob is positioned at the third row and third column of the array.\n    \n    # Since he is the third from both ends, the array must be 3 * 2 = 6 rows\n    # and also 3 * 2 = 6 columns.\n    \n    # The total number of animals in the array is the number of rows * number of columns.\n    total_animals = 6 * 6\n\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of one-cent, two-cent, and five-cent coins as x, y, z respectively.\n    x, y, z = symbols('x y z')\n\n    # According to the question, the ratios of stacking height are given by:\n    # 6 one-cent coins have the same height as 5 two-cent coins -> 6x = 5y\n    # 4 one-cent coins have the same height as 3 five-cent coins -> 4x = 3z\n    # Also, he used a total of 124 coins -> x + y + z = 124\n\n    equation1 = Eq(6*x, 5*y)\n    equation2 = Eq(4*x, 3*z)\n    equation3 = Eq(x + y + z, 124)\n\n    # Solving the system of equations for x, y, and z.\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    x_value = solutions[x]\n    y_value = solutions[y]\n    z_value = solutions[z]\n\n    # The total value of coins in cents is x + 2y + 5z.\n    total_value = x_value + 2*y_value + 5*z_value\n\n    return total_value\n\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total length of the road with plum trees (40 intervals of 4m each)\n    total_length = 4 * (41 - 1)\n    \n    # Calculate the number of pine trees (intervals of 5m each)\n    # +1 is for the tree at the end of the road\n    num_pine_trees = (total_length // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = ((100 // 11) + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_sum = 4000 * 12\n    correct_sum = incorrect_sum - 2800 + 3040\n    correct_avg = correct_sum / 12\n    \n    return correct_avg\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    \n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    # define the ratio constants\n    blue_green_ratio = 2 / 5\n    green_red_ratio = 4 / 1\n\n    for green_pens in range(1, 100):\n        blue_pens = blue_green_ratio * green_pens\n        red_pens = green_pens / green_red_ratio\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and green_pens % 1 == 0 and blue_pens % 1 == 0 and red_pens % 1 == 0:\n            max_red_pens = max(max_red_pens, int(red_pens))\n    \n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    spent_on_books = total_money * 0.25\n    remaining_after_books = total_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.2\n    remaining_after_dvd = remaining_after_books - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # If m components were produced last year, and there are 12 months in a year,\n    # the number of monthly produced components would be m divided by 12.\n    return m / 12\n\n# Example usage:\n# When m is the total yearly production,\n# ans will hold the average monthly production\nm = 1200  # Example total yearly production\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for number in range(998001, 100000, -1):  # Start from the largest 6 digit number and go backwards\n        if str(number) == str(number)[::-1]:  # Check if the number is a palindrome\n            if number % 6 == 0:  # Check if it is divisible by 6\n                return number\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys = 216\n    girls = 153\n    new_children = 37\n\n    total_children_after_an_hour = boys + girls + new_children\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days_to_eat = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_to_eat\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_items = total_pins_needles - sold_pins\n\n    # Let's denote needles originally as n and sold_needles as sold_n,\n    # such that sold_n = 4/5 * n\n    # Thus, total_pins_needles = pins + needles = 1820 + n,\n    # and remaining_items = 1/5 * needles = needles - sold_needles = remaining_pins\n    # Hence, n - sold_n = remaining_items\n    # We substitute sold_n with (4/5 * n) and simplify it\n    # n - (4/5) * n = remaining_items\n    # (1/5) * n = remaining_items\n    # n = 5 * remaining_items\n\n    needles_left = 5 * remaining_items\n\n    # Check if the initial calculation matches up with the total quantity,\n    sold_needles = (4 / 5) * needles_left\n    if sold_pins + sold_needles == 1820:\n        return needles_left\n    else:\n        # If the above condition does not hold, then Paul's solution is incorrect,\n        # and we need to correct our equation respecting the fact that she was left with\n        # an equal number of pins and needles (pins = needles).\n        # remaining_items = pins_left + needles_left = 2 * needles_left\n        # needles_left = remaining_items / 2\n        needles_left = remaining_items / 2\n        return needles_left\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # Desired length in meters\n    shortage_m = 0.10  # Shortage in meters (10 cm converted to meters)\n    \n    garage_piece_length_m = desired_length_m - shortage_m  # Length of the piece in the garage in meters\n    \n    # Convert the length from meters to centimeters if needed\n    garage_piece_length_cm = garage_piece_length_m * 100  # Length of the piece in the garage in centimeters\n    \n    return garage_piece_length_cm\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the original number of marbles\n    original_marbles = symbols('original_marbles')\n\n    # Wei Yan gave away 3/8 of his marbles\n    marbles_after_giving_friends = original_marbles * (5/8)\n\n    # He gave 5/7 of the remaining marbles to his brother\n    marbles_after_giving_brother = marbles_after_giving_friends * (2/7)\n\n    # His cousin gave him 408 marbles\n    final_marbles = marbles_after_giving_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * original_marbles)\n\n    # Solve the equation\n    solutions = solve(equation, original_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    sequence_sum = 0\n\n    for i in range(41):\n        sequence_sum += pattern[i % pattern_length]\n\n    return sequence_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2/7) * 315\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 47, 2):\n        for five_p in range(0, 47, 5):\n            if two_p + five_p == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1/8 - 1/9 + 1/10 - 1/11\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):  # Pile 1\n        for x2 in range(1, 11 - x1):  # Pile 2\n            x3 = 11 - x1 - x2  # Pile 3\n            if x3 > 0:  # All piles should have at least one apple\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = 654876\n    num2 = 279745\n\n    num1_rounded = round(num1, -2)\n    num2_rounded = round(num2, -2)\n    \n    estimated_difference = num1_rounded - num2_rounded\n\n    return estimated_difference\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        # Increment their ages\n        brian_age += 1\n        father_age += 1\n        \n        # Reverse of Brian's age\n        reverse_age = int(str(brian_age)[::-1])\n        \n        # Check if the reverse of Brian's age is father's age\n        if father_age == reverse_age:\n            return brian_age\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x in range(1, 8):\n        y = 8 - x\n        if y != x:\n            count += 1\n    return count // 2\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time taken to pass a tree in seconds\n    length_of_train = 480  # length of the train in meters\n    speed_of_train = length_of_train / time  # speed = distance / time\n    return speed_of_train  # speed of the train in meters per second\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2 / 5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    # There are 113 lampposts, including the first and the last one\n    num_lampposts = 113\n    \n    # The distance between each lamppost is 8m\n    distance_between_lampposts = 8\n    \n    # Calculate the length of the road excluding the last lamppost\n    # Subtract 1 from the number of lampposts to get the number of intervals\n    # between the lampposts, and then multiply by the distance between each lamppost\n    length_of_road = (num_lampposts - 1) * distance_between_lampposts\n    \n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    value = (10**5) / (5**5)\n    return value\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    \n    failed_percentage = (failed_pupils / total_pupils) * 100\n    \n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum(page for page in range(1, 51) if '3' in str(page))\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    num_pastas = 4\n    num_sauces = 3\n    num_toppings = 3\n    \n    num_combinations = num_pastas * num_sauces * num_toppings\n    return num_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    return 45\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    bag_size = 12\n    poppers_left = guests % bag_size\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    base = 7\n    exponent = 2023\n    ones_digit = pow(base, exponent, 10)\n    return ones_digit\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    num_str = ''.join(str(i) for i in range(1, 31))\n    new_num_str = num_str[:46] + num_str[47:]\n    return int(new_num_str)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number\n    least_5_digit_palindrome = int(\"10001\")\n\n    # The greatest 6-digit palindrome number\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # Calculate the difference\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import symbols, nsimplify, sqrt, Pow, Rational\n\n    x = symbols('x')\n    # Convert repeating decimals to rational numbers\n    neg_thirteen_point_repeating = nsimplify(\"-13.333333333333...\", [x], tolerance=1e-10)\n    four_point_repeating = nsimplify(\"4.09090909090909...\", [x], tolerance=1e-10)\n    eleven_point_repeating = nsimplify(\"11.111111111111...\", [x], tolerance=1e-10)\n\n    # Evaluate the expression\n    expression = (Pow(neg_thirteen_point_repeating, Rational(1, 3)) * Pow(four_point_repeating, 2)) / (\n        59.24 - sqrt(eleven_point_repeating))\n    \n    # Round to 3 decimal places\n    ans = round(expression.evalf(), 3)\n\n    return ans\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    select_children = 2\n\n    combinations = comb(total_children, select_children)\n\n    return combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    girls = boys * 3  # Since three quarters are girls, there is three times as many girls as boys.\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n    annabella_price = solutions[banana] + solutions[apple]\n\n    return annabella_price\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age_now = 8\n    lucy_age_now = 36\n    sum_of_ages_target = 60\n\n    years_later = (sum_of_ages_target - (sara_age_now + lucy_age_now)) // 2\n\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    capacity = two_seater_benches * 2 + three_seater_benches * 3\n    return capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # Paying with 16 one pound coins, as you cannot pay £15.49 exactly with £1 coins.\n    change = payment - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    ans = sum(99 + i * 2 * (-1)**i for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 * (1/7)) / 8 - (1/7)\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs', integer=True)\n\n    # Original ratio of footballs to basketballs\n    equation1 = Eq(footballs, 2/5 * basketballs)\n\n    # Ratio after 16 basketballs were sold\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    return solutions[footballs] + solutions[basketballs]\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current_age, younger_current_age = symbols('older_current_age younger_current_age')\n\n    equation1 = Eq(older_current_age - younger_current_age, 12)       # When older's age - younger's age was 12\n    equation2 = Eq(older_current_age + (younger_current_age - 12), 27) # When younger's age is older's current age, older will be 27\n\n    solutions = solve((equation1, equation2), (older_current_age, younger_current_age))\n\n    return solutions[older_current_age]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To make sure Rona has a pair, she needs to take out one glove more than the number\n    # of available colors, since taking out one of each color does not guarantee a pair.\n    number_of_colors = 5\n    gloves_to_guarantee_pair = number_of_colors + 1\n\n    return gloves_to_guarantee_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = (30 // 8) + (1 if 30 % 8 != 0 else 0)\n    end = 82 // 8\n    num_multiples = end - start + 1\n    return num_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    max_junctions = 13 * (13 - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    price_after_increase = original_price * (1 + increase_rate)\n    price_after_decrease = price_after_increase * (1 - decrease_rate)\n    \n    return price_after_decrease\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # Peter after receiving stickers\n    peter_after = peter + 0.20 * sam\n    # Sam after giving stickers\n    sam_after = sam - 0.20 * sam\n\n    # In return, Peter gave 25% of his stickers to Sam\n    # Sam after receiving stickers from Peter\n    sam_final = sam_after + 0.25 * peter_after\n    # Peter after giving stickers to Sam\n    peter_final = peter_after - 0.25 * peter_after\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # In the group stage:\n    # Each group has 4 people and each person plays with every other person in a single round-robin -> C(4, 2) for each group\n    group_games = 4 * (4 * 3) // 2  # 4 groups, each group has 4*3/2 games\n\n    # In the knockout stage:\n    # Top 8 -> 4 games, Top 4 -> 2 games, Top 2 -> 1 game, and one game for third place\n    knockout_games = 4 + 2 + 1 + 1\n\n    # Total games is the sum of group stage games and knockout games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert the time from minutes to hours\n    total_time_hours = 7.2 / 60\n    \n    # The relative speed when the teacher runs towards the front\n    speed_towards = 12 + 8\n    \n    # The relative speed when the teacher runs towards the end\n    speed_backwards = 12 - 8\n    \n    # Calculate the total distance covered by the teacher during the whole trip\n    total_distance = total_time_hours * 12\n    \n    # Using the equation: distance = time * speed\n    # Let the time taken to reach the front be t hours\n    # So, distance to the front = t * speed_towards\n    # And distance from the front back to the end = (total_time_hours - t) * speed_backwards\n    # Total distance is the sum of both distances, which equals total_distance\n    # Therefore, we can set up the equation: t * speed_towards + (total_time_hours - t) * speed_backwards = total_distance\n    # Solving for t gives us the time taken to reach the front, which we can then use to calculate the length of the line\n    \n    # Distance to the front (length of the line) = t * speed_towards\n    # Time taken to the front t = total_distance / (speed_towards + speed_backwards)\n    t = total_distance / (speed_towards + speed_backwards)\n    \n    # Now we can calculate the length of the line\n    length_of_line = t * speed_towards\n    \n    return length_of_line\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's current age\n    flora_age_now = 5\n    \n    # Flora's age two years ago\n    flora_age_2_years_ago = flora_age_now - 2\n    \n    # Father's age two years ago\n    father_age_2_years_ago = 9 * flora_age_2_years_ago\n    \n    # Father's current age\n    father_age_now = father_age_2_years_ago + 2\n    \n    return father_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = 0\n    for n in range(31, 40):\n        if n % 4 == 0 and n % 6 == 0:\n            sweets = n\n            break\n    return sweets\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Speeds\n    speed_1 = 4  # in km/h\n    speed_2 = 6  # in km/h\n  \n    # Time differences in hours (20 minutes late is +1/3 hours, 10 minutes early is -1/6 hours)\n    time_diff_1 = 20/60  # in hours\n    time_diff_2 = -10/60  # in hours\n\n    # Distance is the same for both cases, using the formula distance = speed * time\n    # Let the actual time to travel at speed_1 be t hours\n    # Then at speed_1: distance = speed_1 * (t + 1/3)\n    # and at speed_2: distance = speed_2 * (t - 1/6)\n\n    # Since the distances are equal:\n    # speed_1 * (t + 1/3) = speed_2 * (t - 1/6)\n    # Solving for t:\n    t = (speed_1 * (1/3) + speed_2 * (1/6)) / (speed_2 - speed_1)\n  \n    # Now we can find the distance by substituting t back into one of the original equations:\n    distance = speed_1 * (t + 1/3)\n    return distance\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 100  # Since 1 pound = 100 pence\n    conversion_rate = 1.25  # 1 pound is worth 1.25 pounds on that day\n\n    value_in_pence = 1 * pounds_to_pence / conversion_rate\n\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen = 8\n    pineapple_juice = ramen - 5\n    roasted_duck = 6 * ramen\n    \n    total_spent = ramen + pineapple_juice + roasted_duck\n    return total_spent\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    ken_taken = (remaining + 1) * 2\n    remaining += ken_taken\n    nini_taken = (remaining - 3) * 2\n    remaining += nini_taken\n    ivy_taken = (remaining + 2) * 2\n    remaining += ivy_taken\n    eddie_taken = (remaining - 1) * 2\n    initial_candies = remaining + eddie_taken\n    return initial_candies\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    distinct_permutations = set(permutations('CYZZ'))\n    return len(distinct_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n    # Total distance climbed at the end of the fifth day\n    distance_by_fifth_day = (daily_climb * 5) - sixth_day_climb\n    # Remaining distance on the sixth day which is covered by the sixth_day_climb\n    remaining_distance_sixth_day = total_distance - distance_by_fifth_day\n    # Slide down distance is the difference between sixth_day_climb and remaining_distance_sixth_day\n    slide_down_distance = sixth_day_climb - remaining_distance_sixth_day\n    \n    return slide_down_distance\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls, 3 * boys)\n    equation2 = Eq(2 * girls + 3 * boys, 99)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    A = 12\n    B = 16\n    C = 20\n\n    ans = gcd(gcd(A, B), C)\n\n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = 3 ** 2 * 2 ** 3\n    return m + n\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to centimeters for comparison\n    # 1 foot = 30.48 cm\n    # 1 m = 100 cm\n    # 1 mm = 0.1 cm\n\n    # Convert 5 m to cm\n    height_5m = 5 * 100\n\n    # 120 cm is already in cm\n\n    # Convert 50 mm to cm\n    height_50mm = 50 * 0.1\n\n    # Convert 8 feet to cm\n    height_8feet = 8 * 30.48\n\n    # Average height of an 11 year old is between 130 and 160 cm\n    # So we expect the estimate to be within this range.\n\n    # Now let's see which estimation could be correct\n    plausible_heights = []\n    for height in (height_5m, 120, height_50mm, height_8feet):\n        if 130 <= height <= 160:\n            plausible_heights.append(height)\n\n    # Return the plausible height(s) or None if no height is plausible\n    if len(plausible_heights) == 1:\n        ans = plausible_heights[0]\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    avg_boys = 74\n    total_avg = 82\n\n    # Total score for boys\n    total_score_boys = total_boys * avg_boys\n    # Total score for all\n    total_score_all = (total_boys + total_girls) * total_avg\n    # Total score for girls\n    total_score_girls = total_score_all - total_score_boys\n    # Average score for girls\n    avg_girls = total_score_girls / total_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    # How Alyson, Clara, and Joyce cut their strings:\n    # Alyson cuts into 2m pieces -> The length must be a multiple of 2\n    # Clara cuts into 3m pieces -> The length must be a multiple of 3\n    # Joyce cuts into 5m pieces -> The length must be a multiple of 5\n\n    # To find the shortest possible length of string that satisfies all conditions,\n    # we need to find the least common multiple (LCM) of 2, 3, and 5.\n\n    from math import lcm\n    ans = lcm(2, 3, 5)\n    return ans\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # apply the capture-recapture method to estimate the total population size\n    marked = 100\n    caught_second_time = 200\n    marked_second_time = 25\n\n    total_fish = (marked * caught_second_time) / marked_second_time\n\n    return total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_rabbit_days = 12 * 15\n    days_for_20_rabbits = total_rabbit_days / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10 + 22\n    dress_cost = 56\n    more_money_needed = dress_cost - susan_money\n\n    return more_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wakeup_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = wakeup_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    # 2x + 3y = 77\n    for x in range(0, 77 // 2 + 1):\n        for y in range(0, 77 // 3 + 1):\n            if 2 * x + 3 * y == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    sum_to_20 = sum(range(21)) ** 2\n    sum_to_9  = sum(range(10)) ** 2\n    ans = sum_to_20 - sum_to_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    num_quarters = total_amount * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score = 90 * 5\n    sum_of_first_four_scores = 96 + 85 + 89 + 92\n    fifth_score = total_score - sum_of_first_four_scores\n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    n = 1\n    while not (n % 4 == 3 and n % 5 == 4 and n % 7 == 6):\n        n += 1\n    return n\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    num_coaches = total_pupils // pupils_per_coach\n    if total_pupils % pupils_per_coach != 0:\n        num_coaches += 1\n\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Setting up the equations based on the problem description\n    original_ratio = Eq(pip / bud, 4/7)\n    new_ratio = Eq((pip) / (bud + 5), 8/15)\n\n    # Solving the system of equations\n    solutions = solve((original_ratio, new_ratio), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # You need to draw 10 pencils for each of the first 4 colours.\n    # Regardless of which colours they are, you need to draw 10 each to reach the requirement of at least 10 pencils of a colour.\n    # That's a total of 4 different colours times 10 pencils = 40 pencils.\n\n    # Now for the fifth colour, you need only 1 more pencil to ensure you have 5 different colours.\n    # So in the worst case scenario, you are drawing all 10 pencils from one colour first, then the next, and so on.\n    # After having drawn 40 pencils (10 for each of the first 4 colours), the next pencil you draw could be of the same\n    # 4 colours or a new, fifth colour.\n\n    # To ensure you have 5 different colours, you need to draw one more pencil, which brings the total to 41 pencils.\n\n    return 40 + 1\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter of the rectangular field\n    perimeter = 2 * (144 + 204)\n    \n    # Total number of intervals between the wheats\n    # Intervals = number of wheats - 1 because the first wheat is at the corner\n    intervals = 116 - 1\n    \n    # Distance between every 2 wheats is the perimeter divided by the number of intervals\n    distance = perimeter / intervals\n\n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # Last digit of a power of 5 is always 5\n    last_digit_5 = 5\n    \n    # Last digit of powers of 7 cycles every 4: the cycle is [7, 9, 3, 1]\n    # So we find the position in the cycle for 7^30, which is 30 % 4 = 2\n    # Hence the last digit of 7^30 is the second digit in the cycle: 9\n    last_digit_7 = 9\n    \n    # The last digit of the entire expression is the last digit of the product\n    # of the last digits of each term\n    last_digit_expression = (last_digit_5 * last_digit_7) % 10\n\n    return last_digit_expression\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Equation 1: Total girls\n    equation1 = Eq(girls_swim + girls_not_swim + 90, boys_swim + boys_not_swim)\n    # Equation 2: Ratio of girls who can swim to those who can't\n    equation2 = Eq(girls_swim, 31 * (girls_not_swim / 49))\n    # Equation 3: Number of boys who can swim is 120 less than those who can't\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    # Equation 4: Total pupils\n    equation4 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    pupils_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "from math import gcd\n\ndef solution():\n    length1 = 39\n    length2 = 52\n\n    longest_possible_length = gcd(length1, length2)\n\n    return longest_possible_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # A and B represent the points for an A grade and a B grade, respectively\n\n    # Simon's score equation: 4A + 4B = 36\n    simon_eq = Eq(4 * A + 4 * B, 36)\n\n    # Peter's score equation: 2A + 3B = 22\n    peter_eq = Eq(2 * A + 3 * B, 22)\n\n    # Solve the system of equations for A and B\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    # Calculate the score for 3A + 5B using the obtained values for A and B\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    # Assuming Joe shares it equally with one friend,\n    # they would each get half the squares.\n    joe_squares = total_squares // 2\n    return joe_squares\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # Given that each student A, B, C knows one prime number and each of these prime numbers is different and less than 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and B != C and A != C:  # They know different prime numbers\n                    # A statement: A + B != C and A + C != B and B + C != A\n                    if A + B != C and A + C != B and B + C != A:\n                        # B statement: B - 1 = A + C - 7\n                        if B - 1 == A + C - 7:\n                            # C statement: 2C = A + B or 2C = A or 2C = B\n                            if 2 * C == A + B or 2 * C == A or 2 * C == B:\n                                # Teacher's confirmation: 2C + A + B forms a correct addition equation\n                                if 2 * C + A + B in primes and 2 * C + A + B != A and 2 * C + A + B != B and 2 * C + A + B != C:\n                                    # Since they did not get any new information and cannot solve it without the teacher's confirmation\n                                    # It indicates that 2C + A + B is a new number that they didn't know before\n                                    # and since 2 times a prime is even, the only even prime is 2, so C cannot be 2\n                                    return A + B + C\n    return None\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_place = 4\n    amanda_behind = 7\n    between = 2\n\n    total_children = laura_place + between + amanda_behind\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    mary_original, alexis_original, charlotte_original = symbols('mary_original alexis_original charlotte_original')\n\n    # Mary and Alexis had stickers in the ratio 7 : 5\n    ratio_eq = Eq(mary_original / alexis_original, 7 / 5)\n\n    # Each gave 20% of their stickers to Charlotte\n    mary_gave = 0.2 * mary_original\n    alexis_gave = 0.2 * alexis_original\n\n    # Charlotte's stickers increased by 80%\n    charlotte_gave_eq = Eq(charlotte_original + mary_gave + alexis_gave, charlotte_original * 1.8)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    mary_end = mary_original - mary_gave\n    charlotte_end = charlotte_original * 1.8\n    mary_charlotte_diff_eq = Eq(mary_end, charlotte_end + 20)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_gave_eq, mary_charlotte_diff_eq), (mary_original, alexis_original, charlotte_original))\n\n    # Return the number of stickers Alexis had at first\n    alexis_initial = solutions[alexis_original]\n\n    return alexis_initial\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n\n    return people_on_train_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero\n    C = 1  # 1 is neither prime, composite, nor zero\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 10  # 10 is the largest composite number up to 10\n    # F only has factors 1 and 5, hence it is 5 because it stands for a digit and not 1\n    F = 5\n    # G is the greatest factor of 8 that is not 8 itself\n    G = 4  # Factors of 8 are 1, 2, 4, and 8. 8 is not considered because G must be a single digit and less than 8.\n    # H is the lowest multiple of 6 that is not 0 itself, hence it must be 6 because it stands for a digit and not 0\n    H = 6\n\n    # Concatenating the digits to form the phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    one_day_seconds = 24 * 60 * 60  # Convert one day into seconds\n    fraction_of_day = 1/4 * 1/6 * 1/8  # Calculate the fraction of the day\n    seconds = one_day_seconds * fraction_of_day  # Calculate the number of seconds in the given fraction of the day\n    return int(seconds)  # Return the integer value of seconds\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    from math import factorial\n\n    # Eddie, mom, dad are considered one unit + the 4 possible people\n    units = 1 + 4\n    # Possible permutations of the unit + 4 people\n    permutations_of_people = factorial(units)\n    \n    # Possible permutations of Eddie, mom, and dad within the unit\n    permutations_of_family = factorial(3)\n    \n    # Apply the multiplication principle\n    total_permutations = permutations_of_people * permutations_of_family\n    return total_permutations\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    num_twos = 3\n    num_threes = 2\n    # Number of permutations of all the digits divided by the repetitions of each digit\n    perms = factorial(total_digits) / (factorial(num_twos) * factorial(num_threes))\n    \n    # Subtract cases where the first digit is 0, but since 0 is not in the digits', this step is not needed\n    return int(perms)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands_units in range(1, 10):  # thousands and units digits must be the same and non-zero\n        for tens in range(0, 10):\n            for hundreds in range(0, 10):\n                pips_number = 1000 * thousands_units + 100 * hundreds + 10 * tens + thousands_units\n                buds_number = 1000 * tens + 100 * thousands_units + 10 * thousands_units + hundreds\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let's assume the total amount of grass available is G\n    # We use the equation: number_of_cows * number_of_days = constant_amount_of_grass\n    # From the problem statement, we have two equations:\n    # 25 * 10 = G (scenario 1)\n    # 15 * 20 = G (scenario 2)\n    # Therefore, G = 25 * 10 = 15 * 20\n\n    # We need to find the number of cows that can be fed for 50 days,\n    # so we set up the equation: number_of_cows * 50 = G\n    # We can find G from scenario 1 or scenario 2 as they are equal\n\n    G = 25 * 10  # or 15 * 20, both are equal to G\n\n    # Now we set up the equation for 50 days\n    number_of_cows = G / 50\n\n    return number_of_cows\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    sum_pages = 95\n    days = 0\n    pages_per_day = 0\n\n    while sum_pages > pages_per_day:\n        days += 1\n        pages_per_day += days\n        sum_pages -= pages_per_day\n\n    return days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let the number of oranges initially be 3x and lemons be 5x. \n    # After selling 48 oranges, the number of oranges become 3x - 48.\n    # According to the new ratio 1:2, we have (3x - 48) / 5x = 1 / 2.\n\n    # From this equation, we can solve for x, which represents a common multiple of the number of fruits.\n    # Then, we can solve for the initial amount of lemons, which is 5x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x - 48)/(5*x), 1/2)\n\n    x_value = solve(equation, x)\n\n    # Calculate the initial number of lemons\n    lemons_initial = 5 * x_value[0]\n\n    return lemons_initial\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3 # since first day is 1/3 of second day\n    third_day = (5/3) * second_day # third day is 5/3 of second day\n\n    total = first_day + second_day + third_day\n\n    return int(total)\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    initial_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    price_after_discount = initial_price * (1 - discount)\n    price_after_member_discount = price_after_discount - member_discount\n    final_price = price_after_member_discount * (1 + sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12  # Calculate how much flour is needed for one cake\n    number_of_cakes = 250 / flour_per_cake  # Calculate how many cakes can be made with 250g of flour\n    return int(number_of_cakes)  # We assume Isaac cannot make a fraction of a cake\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Consider the 3 math books as one unit and 2 English books as another unit.\n    # Now we have 3 other books + 1 unit of math books + 1 unit of English books = 5 'units' to arrange.\n    \n    units_arrangements = factorial(5)\n    \n    # We can also arrange the 3 math books among themselves in 3! ways,\n    # and the 2 English books among themselves in 2! ways.\n    \n    math_books_arrangements = factorial(3)\n    english_books_arrangements = factorial(2)\n    \n    # The total number of arrangements is the product of the arrangements of units\n    # and the arrangements within each unit.\n    \n    total_arrangements = units_arrangements * math_books_arrangements * english_books_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Ivy's daily work rate\n    ivy_rate = 1 / 24\n    # Kevin's daily work rate\n    kevin_rate = 1 / 20\n    # Total work they have to do is 1 job\n    \n    # Ivy will work for the entire 12 days\n    ivy_work = ivy_rate * 12\n\n    # Let k be the number of days Kevin takes off\n    # Kevin then works for (12 - k) days\n    # kevin_work + ivy_work should equal the whole job, which is 1\n    # kevin_work = kevin_rate * (12 - k)\n    \n    # Formulate the equation and solve for k:\n    k = symbols('k')\n    equation = Eq(kevin_rate * (12 - k) + ivy_work, 1)\n\n    # Find the solution for k\n    solutions = solve(equation, k)\n\n    # Only consider the solution where the number of days off is less than 12\n    days_off = min(s for s in solutions if s >= 0 and s <= 12)\n\n    return days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, 5 / 8 * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    missing_number = (32 * 8) / 20\n    return missing_number\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kg_to_grams = 0.0025 * 1000\n    return kg_to_grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # She needs to take at least 3 socks to ensure she has a pair of the same color.\n    # Worst case scenario: She takes two socks of different colors first, then the third one will match one of them.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n    \n    # The number of ways to arrange 4 out of 9 statues is given by the formula for permutations: P(n, k) = n! / (n - k)!\n    total_statues = 9\n    statues_to_arrange = 4\n\n    permutations = factorial(total_statues) / factorial(total_statues - statues_to_arrange)\n    \n    return int(permutations)\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10 / 100  # Convert pence to pound\n    new_price = 1.00\n    percentage_increase = ((new_price - original_price) / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    price_before_gst = 80\n    gst_rate = 0.08\n    final_price = price_before_gst * (1 + gst_rate)\n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let b represent the number of bicycles and t represent the number of tricycles\n    b, t = symbols('b t')\n\n    # since the shop has 300 tricycles and bicycles\n    equation1 = Eq(b + t, 300)\n\n    # each bicycle has 2 wheels and each tricycle has 3 wheels,\n    # with the total number of tricycle wheels being 180 more than the total number of bicycle wheels\n    equation2 = Eq(3*t, 2*b + 180)\n\n    # solving the equations for b and t\n    solutions = solve((equation1, equation2), (b, t))\n\n    # returning the number of bicycles\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_count = 14\n    pattern_total = 5  # 1 black, 2 white, 2 grey make up a pattern\n    pattern_grey = 2\n\n    # Determine how many complete patterns there are\n    complete_patterns = grey_count // pattern_grey\n\n    # Check for a partial pattern at the end\n    extra_grey = grey_count % pattern_grey\n\n    # If there's an extra grey, we have one more white and black\n    extra_rabbits = 0 if extra_grey == 0 else 3\n\n    # Calculate the total number of rabbits\n    total_rabbits = complete_patterns * pattern_total + extra_rabbits\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciated_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return depreciated_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # The divisor must be at least one more than the quotient to produce a non-zero remainder\n\n    dividend = quotient * divisor + remainder  # Formula: Dividend = Quotient * Divisor + Remainder\n\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = (2015 * 2015) - (2016 * 2014)\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped_biscuits = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    # Using the inclusion-exclusion principle\n    # Total = Chocolate Biscuits + Foil Wrapped Biscuits - (Chocolate with Foil) + Neither Chocolate nor Foil\n    chocolate_biscuits = total_biscuits - foil_wrapped_biscuits - neither_chocolate_nor_foil + chocolate_with_foil\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 80 / 100 + 4 / 5 * 100 / 100\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    tongtong_answer = 9764.0\n    return rounded_number != tongtong_answer, rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Prime factors for 5 and 2 will determine the number of trailing zeros.\n    # The number of trailing zeros is equal to the minimum of the number of 2s and 5s in prime factorization\n    # Since A = 5^15 * 2^10, the number of trailing zeros will be min(15, 10) which is the power of 2\n    zeros_count = min(15, 10)\n    return zeros_count\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    # Olaf had thrice as many carrots as Anna initially\n    equation1 = Eq(olaf, 3 * anna)\n    \n    # After Olaf gave away 335 carrots, Anna had twice as many as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Let's denote the initial number of crystals Jason had as 'initial_crystals'.\n    # According to the problem, after selling to Yvonne he's left with initial_crystals - (10 + half of initial crystals).\n    # Then he mines 20 more: initial_crystals - (10 + half of initial crystals) + 20.\n    # Then he sells 14 to Cherlyn: initial_crystals - (10 + half of initial_crystals) + 20 - 14\n    # At the end he has 35 crystals.\n    # So we have the following equation: initial_crystals - (10 + half of initial_crystals) + 20 - 14 = 35\n\n    equation = Eq(initial_crystals - (10 + initial_crystals / 2) + 20 - 14, 35)\n\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    all_permutations = list(permutations(digits))\n    # Each permutation can have 3 possible positions for the decimal point\n    # (after the first, second, or third digit)\n    count = len(all_permutations) * 3\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    # Since Bala is directly behind Ali, we only count Ali once\n    total_people = people_in_front_of_Ali + people_behind_Bala + 1  # +1 for Bala\n    \n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original speed in meters per minute\n    # Let t be the original time in minutes to cover the distance\n    x, t = symbols('x t')\n\n    # If speed is increased by 25%, new speed is 1.25x\n    # New time is therefore t - 20\n    equation1 = Eq(1.25 * x * (t - 20), x * t)\n\n    # If speed is decreased by 45 meters per minute, new speed is x - 45\n    # New time is t + 0.75t = 1.75t\n    equation2 = Eq((x - 45) * 1.75 * t, x * t)\n\n    # Solve the system of equations for x and t\n    solutions = solve((equation1, equation2), (x, t))\n\n    # Assuming there's only one physical solution where speed and time are both positive\n    x_val = 0\n    t_val = 0\n    for sol in solutions:\n        if all(value > 0 for value in sol):\n            x_val, t_val = sol\n            break\n\n    # The distance travelled is speed (x) times time (t)\n    distance = x_val * t_val\n\n    return distance\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Cars that are either Black or Dodge (but not both) = Total cars - Blue Fords\n    # Blue Fords = Blue cars - (Black Dodges - Blue Black Dodges)\n    # We assume all black cars are dodges, then if there are any blue dodges, they are subtracted from black dodges\n    # This relies on the principle of inclusion and exclusion\n    \n    # All black cars assumed to be dodges, any black fords are subtracted from this\n    blue_fords = blue_cars - (black_dodges - (total_cars - fords - blue_cars))\n    \n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_price_pence = 85  # in pence\n    budget_pounds = 30  # in pounds\n    budget_pence = budget_pounds * 100  # convert pounds to pence\n\n    num_plants = budget_pence // plant_price_pence  # use floor division to get the whole number of plants\n    \n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Starting from the lowest composite number, 4.\n    A = 4\n    \n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if all four numbers are composite\n        if all(not is_prime(n) for n in (A, B, C, D)):\n            return A + B + C + D\n        A += 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Using the Pigeonhole principle, to ensure at least one of each color is picked,\n    # the magician must pick at least the total number of balls of all but one color, plus one.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # Calculate the minimum number of times the magician needs to pick up balls\n    # To guarantee that they have at least one of each color, they must pick:\n    # one more than the total number of balls of the two most populous colors\n    min_picks = red_balls + green_balls + 1  # blue has the fewest, so we ignore it for the minimum\n    \n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    number = 0\n    while True:\n        if number % 11 == 5 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    number_of_workdays = 5\n    \n    total_weekly_earnings = average_daily_earnings * number_of_workdays\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = -2\n    total_marks = 125\n\n    for correct in range(total_questions+1):\n        wrong = total_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_marks:\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time for a game\n\n    return num_games\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # If we want to minimize the maximum number of apples a child can have,\n    # we must first ensure that each child gets one. That leaves us with:\n    remaining_apples = total_apples - children\n    \n    # Now distribute the remaining apples as evenly as possible.\n    # The Pigeonhole Principle tells us that once we have distributed apples\n    # to the point where each child has an equal number, giving one more apple\n    # to any child will mean that child has the most apples.\n    # Therefore, the least amount that the child with the most apples can have is:\n    least_possible_most_apples = (remaining_apples // children) + 1\n    \n    # Since this will be one more than what every other child has,\n    # we add the one apple that every child started with.\n    least_possible_most_apples += 1\n\n    return least_possible_most_apples\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    # Calculate the greatest common divisor (gcd) for the first two numbers\n    gcd_60_72 = gcd(60, 72)\n    \n    # Using the gcd of the first two numbers, calculate the gcd with the third number\n    ans = gcd(gcd_60_72, 84)\n    \n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # The difference between the stopping number (30) and the clock's number (10)\n    diff = 30 - 10\n    \n    # Since there are 12 numbers on the clock, we use modulo operator to find the starting point\n    start = diff % 12 \n    \n    # If the start is 0, it means he started at 12 o'clock\n    # Otherwise, subtract from 12 to reverse the clockwise direction \n    ans = 12 if start == 0 else 12 - start\n    return ans\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]  # Initialize the first two numbers of the sequence\n    while len(sequence) < 2011:  # Keep generating numbers until the 2011th is reached\n        next_num = (sequence[-1] + sequence[-2]) % 10  # The next number is the last digit of the sum of the last two numbers\n        sequence.append(next_num)  # Add the next number to the sequence\n    return sequence[2010]  # Return the 2011th number in the sequence (0-indexed)\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    k, m = symbols('k m', integer=True)\n    sum_of_sequence = Eq(sum(2*i - 1 for i in range(12, k+1)), m**2)\n\n    solutions = solve((sum_of_sequence, k > 30), (k, m))\n\n    for sol in solutions:\n        if sol[k] > 30 and isinstance(sol[m], int) and sol[m] > 0:\n            return sol[m]\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n    \n    # The remaining distance Linda drove\n    distance_second_part = 280  # provided in the question\n    \n    # Calculate the time it took Linda to drive the remaining distance\n    time_second_part = distance_second_part / 70  # distance / speed\n    \n    # Total distance traveled by Linda\n    total_distance = distance_first_part + distance_second_part\n    \n    # Total time Linda spent driving\n    total_time = 2 + time_second_part\n    \n    # Calculate the average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    equation1 = Eq(bob - alan, 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (bob, alan))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = (original_amount + (daily_saving * days_saved)) - (lent_to_brother + spent_on_snacks)\n\n    return current_amount\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    men_ratio = 37\n    women_to_children_ratio = 4 / 5\n    men_children_diff = 12\n    \n    # The ratio of men is 37%, so women and children together make up 100% - 37% = 63%.\n    # Let's assume the total number of visitors is v.\n    # Then the number of men is 37/100 * v.\n    # If we let the number of women be 4x and children be 5x (according to the ratio),\n    # the sum of these is 9x = 63/100 * v and men - children = 12 => 37/100 * v - 5x = 12.\n    \n    # From 37/100 * v = 12 + 5x and 9x = 63/100 * v, we get two equations:\n    # 37v = 1200 + 500x ...(1)\n    # 9x = 63v ...(2)\n    \n    # Divide equation (1) by 500 and equation (2) by 9 to get values for x and v in terms of each other:\n    # v/500 = 12/500 + x ...(3)\n    # x/9 = 7v/100 ...(4)\n    \n    # Multiply equation (3) by 9 and equation (4) by 500 and equate them to get a single equation in terms of v:\n    # 9v/500 = 9*12/500 + 9x\n    # 500x/9 = 3500v/100\n    # Equating 9v/500 and 500x/9 gives:\n    # v/500 * 9 = x/9 * 500\n    \n    # Simplify to find v:\n    # v = x * 500**2 / 9**2\n    \n    # Substitute the value of v from (4) into (3):\n    # 63v/900 = 9x, so v = 9x * 900/63\n    # Replace v in the first equation:\n    # x * 500**2 / 9**2 = 9x * 900/63 + 12/500 * 500\n    # Solve for x:\n    x = 12 / (500/9**2 - 900 * 9/(500*63))\n    \n    # Number of women:\n    women = 4 * x\n    \n    return int(women)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's payment\n    equation1 = Eq(2*banana + 3*apple, 3)\n    # Beth's payment\n    equation2 = Eq(3*banana + 2*apple, 4)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # calculate Annabella's payment for 10 bananas and 10 apples\n    annabella_payment = 10*solutions[banana] + 10*solutions[apple]\n\n    return annabella_payment\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(89 - x, 12 * (45 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability that both trains are on time\n    prob_both_on_time = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability that at least one train is late\n    prob_at_least_one_late = 1 - prob_both_on_time\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_strawberries_initial = 86\n    lena_strawberries_given_away = 29\n    lena_strawberries_final = 100\n\n    strawberries_received_from_mother = lena_strawberries_final - (lena_strawberries_initial - lena_strawberries_given_away)\n\n    return strawberries_received_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digits = 90  # 10 through 99 (inclusive)\n    no_six = 8 * 8  # 1-9 excluding 6 for tens place and units place\n\n    at_least_one_six = total_two_digits - no_six\n    \n    return at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 April', '%d %B')\n    end_date = datetime.strptime('18 May', '%d %B')\n\n    # Add 1 to include the end date in the count\n    ans = (end_date - start_date).days + 1\n\n    return ans\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    first_part = floor(2017)\n    second_part = floor(201.7)\n    third_part = ceil(20.17)\n    fourth_part = ceil(2.017)\n\n    ans = first_part - second_part + third_part - fourth_part\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # The last digit of a number only depends on the last digit of its components\n    # when raised to a power and summed up\n    # Last digit of 2023^2\n    last_digit_2023 = 3\n    last_digit_2023_sq = (last_digit_2023**2) % 10\n    \n    # Last digit of 2^2023\n    # Pattern of last digits of powers of 2 repeats every 4: 2, 4, 8, 6\n    power_pattern = [2, 4, 8, 6]\n    last_digit_2_pow = power_pattern[(2023 % 4) - 1]\n    \n    # Add the last digits and calculate the last digit of the sum\n    last_digit_sum = (last_digit_2023_sq + last_digit_2_pow) % 10\n    \n    # Raise it to the power of 3 and find the last digit\n    last_digit_final = (last_digit_sum**3) % 10\n    \n    return last_digit_final\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for number in range(1, 2023):\n        if number % 7 != 0 and number % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for cost of each fruit\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Given total costs of combinations of fruits\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n\n    # Kelly's purchase\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solving the system of equations to find the cost of each fruit\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n    \n    # Returning the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    lines = 13\n    max_intersections = lines * (lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    dividend = 9744\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # The last digit of a number is determined by the last digits of the factors\n    # that make up that number. The last digit of a power of 5 is always 5 and\n    # the last digit of a power of 7 cycles through 7, 9, 3, and 1 every four powers.\n\n    # As there are 20 fives, the last digit contributed by the 5s will be 5.\n    last_digit_of_5s = 5\n\n    # We only need the last digit of 7 raised to the power of 20.\n    # As the pattern 7, 9, 3, 1 repeats every 4 numbers, we can find the last\n    # digit by taking the remainder of the exponent divided by 4.\n    # For an exponent of 20, the remainder when divided by 4 is 0, so we use the last\n    # number in the cycle, which is 1.\n    last_digit_of_7s = 1\n\n    # Multiply the last digits of both large numbers to find the last digit of\n    # the entire expression\n    last_digit = (last_digit_of_5s * last_digit_of_7s) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # AB and CD are the diameters of the semicircles\n    # therefore, the radius of each semicircle is half of AB (or CD)\n    radius_semicircle = 14 / 2\n    \n    # The perimeter of each semicircle is half the circumference of a full circle\n    perimeter_semicircle = (22/7) * radius_semicircle\n    \n    # Since there are 2 semicircles, we need to multiply this by 2\n    total_semicircles_perimeter = 2 * perimeter_semicircle\n\n    # The perimeter of each quadrant is a quarter of the circumference of a full circle\n    # Since there are 2 quadrants and each quadrant is identical to a semicircle, the total perimeter\n    # of the 2 quadrants combined is equal to the circumference of one semicircle\n    total_quadrants_perimeter = perimeter_semicircle\n\n    # The total perimeter of the figure is the sum of the perimeters of the semicircles and the quadrants\n    total_perimeter = total_semicircles_perimeter + total_quadrants_perimeter\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n\n    num_students = gcd(pencils, pens)\n    \n    return num_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - (3/5))\n    total_watermelons = remaining_after_first_day / (1 - (1/3))\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n    \n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n    \n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price_per_packet = 95  # pence\n    total_pasta_price = 6 * pasta_price_per_packet  # total cost of pasta in pence\n\n    rice_packet = symbols('rice_packet')\n    \n    # Equation for the total cost: (pasta price in pence) + (rice price per packet * number of rice packets) = total in pence\n    equation = Eq(total_pasta_price + rice_packet * 5, 1170)\n\n    # Solve for the price of one packet of rice\n    rice_packet_price = solve(equation, rice_packet)\n\n    return rice_packet_price[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm_of_3_5_7 = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    \n    for number in range(100, 1000):\n        if number % lcm_of_3_5_7 == 0 and str(number).startswith('6'):\n            return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    total_amount = 1\n    fraction1 = 3/4\n    fraction2 = 2/5\n\n    ans = total_amount * fraction1 * fraction2\n    return ans\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    a, b, c = symbols('a b c')\n    equation = Eq(13/10, 1 + 1 / (a + 1 / (b + 1 / c)))\n    sol = solve(equation, (a, b, c))\n\n    for possible_solution in sol:\n        # we are only interested in the solution where a, b, c are whole numbers\n        if all(s.is_integer and s > 0 for s in possible_solution):\n            return possible_solution[0] + 2 * possible_solution[1] + 3 * possible_solution[2]\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    energetic_days = 20  # Productive decorator can paint alone in 20 days.\n    both_days = 12       # Both together can paint in 12 days.\n\n    # 1 work unit is painting the house once\n    # 1/(energetic_days) is the work per day of the energetic decorator.\n    # 1/(both_days) is the combined work per day of both decorators.\n    # Let x be the number of days the lazy one would take to paint the house alone.\n\n    # Setting up the equation: work per day of both equals sum of individual works per day\n    # 1/(both_days) = 1/(energetic_days) + 1/x\n    \n    # We rearrange the equation to solve for x:\n    # 1/x = 1/(both_days) - 1/(energetic_days) => x = 1 / (1/(both_days) - 1/(energetic_days))\n    lazy_days = 1 / (1/(both_days) - 1/(energetic_days))\n\n    return int(lazy_days)\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 0.30 * (2/3) * 45\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    n = 1\n    while True:\n        if n % 4 == 0 and n % 6 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def count_4_in_number(number):\n    return str(number).count('4')\n\ndef solution():\n    total_count = 0\n    for page_number in range(1, 201):\n        total_count += count_4_in_number(page_number)\n    return total_count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Let the first term of the sequence be a, and let the common difference d = 1 since the numbers are consecutive.\n    # The sum S of an arithmetic sequence where n = 15 (since we have 15 consecutive numbers) is given by:\n    # S = n/2 * (2a + (n-1)d)\n    # Given that the sum S is 1650, we need to solve for 'a' when n = 15, d = 1, and S = 1650.\n    n = 15\n    S = 1650\n\n    # 2a is the sum of the first and last term since the numbers are consecutive.\n    # 2a = (2S/n) - (n-1)\n    two_a = (2 * S / n) - (n - 1)\n    \n    # Therefore, the sum of the largest and smallest number (which is 2a) is:\n    return two_a\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    # Number of 1-digit oddtastic numbers\n    one_digit_oddtastics = 5  # (1, 3, 5, 7, 9)\n    \n    # Number of 2-digit oddtastic numbers\n    two_digit_oddtastics = 5 * 5 # Each digit has 5 choices (1, 3, 5, 7, 9)\n    \n    # Number of 3-digit oddtastic numbers\n    three_digit_oddtastics = 5 * 5 * 5 # Each digit has 5 choices (1, 3, 5, 7, 9)\n    \n    # Total oddtastic numbers from 1 to 999\n    total_oddtastics = one_digit_oddtastics + two_digit_oddtastics + three_digit_oddtastics\n    \n    return total_oddtastics\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # For 'a', let's find numbers that give a remainder of 6 when divided by 8\n    # a can be expressed as a = 8k + 6, where k is any integer\n    # For 'b', let's find numbers that give a remainder of 7 when divided by 8\n    # b can be expressed as b = 8m + 7, where m is any integer\n    \n    # When adding a and b together, the sum can be expressed as:\n    # (a + b) = (8k + 6) + (8m + 7) = 8(k + m) + 13\n    \n    # When divided by 8, the remainder will be the same as the remainder\n    # of 13 when divided by 8 since 8(k + m) is divisible by 8\n    \n    remainder = 13 % 8  # This will give us the remainder of (a + b) when divided by 8\n    \n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    used_cloth_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - used_cloth_for_skirts\n    cloth_per_blouse = remaining_cloth / num_blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    number = 1\n    \n    # Create a loop that will go through the numbers and count digits\n    while digit_count < 2019:\n        # Convert the current number to a string to count its digits\n        digit_count += len(str(number))\n        \n        # If we have counted past 2019 digits, break the loop\n        if digit_count >= 2019:\n            break\n        \n        # Increment the number\n        number += 1\n\n    # The digit we are looking for is in the string representation of 'number'\n    # We find how many digits over 2019 we've counted\n    digits_over = digit_count - 2019\n    \n    # The digit we are looking for is 'digits_over' digits from the end of 'number'\n    ans = int(str(number)[len(str(number)) - digits_over - 1])\n\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # There are 11 keys and 11 rooms, so in the worst case, the security guard could be unlucky enough\n    # to have the last key being the right one for each room. \n    # Thus, for each room, in the worst case, the guard tries all the remaining keys.\n    # This forms a decreasing arithmetic sequence with the number of trials per room:\n    # 11, 10, 9, ..., 2, 1. The sum of this sequence gives the total maximum number of tries.\n\n    total_tries = sum(range(1, 12))  # Sum from 1 to 11\n    return total_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    perms = set(permutations(digits))\n    four_digit_numbers = {int(\"\".join(p)) for p in perms if p[0] != '0'}\n    return len(four_digit_numbers)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # convert mass of basket from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4\n\n    # Total mass of kittens\n    total_kittens_mass_kg = number_of_kittens * kitten_mass_kg\n\n    # Calculate mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + total_kittens_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20 / 100\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # Mary's 3 brothers, 4 sisters, and Mary herself\n    eggs_bought = (family_members - 1) * family_members  # Each buys an egg for each other member\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"7:50\", \"%H:%M\")\n    end_time = datetime.strptime(\"8:40\", \"%H:%M\")\n    \n    journey_duration = end_time - start_time\n    return journey_duration.total_seconds() // 60\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The sequence appears to increment by increasing integers: 3 (+3) -> 6 (+4) -> 10 (+5) -> 15\n    # The next increment would be 6, since the pattern is increasing by 1 each time.\n    next_term = 15 + 6\n    \n    # Return the next term in the sequence, which is the missing number.\n    return next_term\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # x represents the total amount Samuel had initially.\n\n    # Samuel spends 1/6 of his money and an additional $5 on a DVD.\n    money_after_dvd = x - (x / 6) - 5  # Remaining money after buying the DVD.\n\n    # He then spends 2/5 of the remaining money and an additional $12 on magazines.\n    money_after_magazines = money_after_dvd - (2 / 5) * money_after_dvd - 12\n    \n    # He has $24 left at the end.\n    equation = Eq(money_after_magazines, 24)\n\n    # Solve the equation for x.\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_handbag = 80 / (1 - 3/5)\n    original_money = remaining_money_after_handbag / (1 - 1/5)\n    return original_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    bottle_volume = 5\n    remaining_volume = total_volume - bottle_volume\n    tanks = 6\n    tank_volume = remaining_volume / tanks\n    return tank_volume\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    johnny_age = 8\n    grandpa_age = 72\n    years_future = 0\n    \n    while True:\n        if (grandpa_age + years_future) == 5 * (johnny_age + years_future):\n            break\n        years_future += 1\n    \n    return years_future\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip's position from the front\n    pip_position = 8\n    \n    # Bud's position from the end\n    bud_position_from_end = 10\n    \n    # Number of children between Pip and Bud\n    children_between = 4\n    \n    # Since Pip is in front of Bud and there are 4 children between them,\n    # we can add Bud's position from the end to the number of children in between and then add\n    # Pip's position to find the total number of children in queue.\n    total_children = pip_position + children_between + bud_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # After Colin gives Bob 25 cards, Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    rate = symbols('rate')\n\n    # Compound interest formula A = P(1 + r)^n\n    equation = Eq(principal * (1 + rate)**years, amount)\n    \n    # Solve for the interest rate\n    interest_rate = solve(equation, rate)[0]\n    \n    # Convert to percentage and round to the nearest tenth of a percent\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Define a variable to capture the total number of oranges\n    total_oranges = (25 * 24) + (10 * 20)  # 25 boxes with 2 dozen each + 10 elderly*20 oranges\n\n    # Find divisors of the total number of oranges\n    divisors = [i for i in range(1, total_oranges + 1) if total_oranges % i == 0]\n\n    # We filter through divisors to find an appropriate number of oranges\n    # That Janice can give to each elderly person\n    for oranges_each in divisors:\n        if total_oranges // oranges_each > 10:\n            ans = oranges_each\n\n    return ans\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given equation: x~Δ~9 = 37 can be translated to 5x + 3*9 = 37\n    # Solve for x using the formula 5x + 27 = 37\n    x = (37 - 27) / 5\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # To ensure getting 4 balls of the same color,\n    # Sheila has to account for the worst-case scenario.\n    # That is, she needs to take out all balls of the other two colors first.\n    \n    # Maximum balls she can take out without being sure of getting 4 of the same color is:\n    # 3 blue balls (not 4, to avoid having the same color)\n    # 3 orange balls (not 4, to avoid having the same color)\n    # 2 yellow balls (all yellow balls, as there are only 2)\n    # One more ball guarantees 4 of the same color\n    \n    ans = 3 + 3 + 2 + 1  # the last \"+1\" is for the fourth ball of the same color\n    return ans\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:15 AM\"\n    duration_str = \"3:50\"\n    \n    arrival_time = datetime.strptime(arrival_time_str, '%I:%M %p')\n    duration = datetime.strptime(duration_str, '%H:%M') - datetime.strptime(\"0:0\", '%H:%M')\n    \n    departure_time = arrival_time - duration\n\n    return departure_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_weight = full_weight * (1/5)\n    weight_after_removal = full_weight - removed_soil_weight\n    empty_weight = weight_after_removal - 27\n    \n    return abs(empty_weight)\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tim and Tyler's initial amount of cookies\n    tims_cookies, tylers_cookies = symbols('tims_cookies tylers_cookies')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(tims_cookies / 6, tylers_cookies * 3 / 8)\n    equation2 = Eq(tims_cookies, 9 * (tylers_cookies - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tims_cookies, tylers_cookies))\n\n    # Total number of cookies initially present\n    total_cookies = solutions[tims_cookies] + solutions[tylers_cookies]\n    \n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # chocolate cupcakes = vanilla cupcakes + 72\n    equation1 = Eq(chocolate, vanilla + 72)\n    # blueberry cupcakes = vanilla cupcakes - 36\n    equation2 = Eq(blueberry, vanilla - 36)\n    # (1 - 1/6) * chocolate + (1 - 2/3) * vanilla + (1 - 7/9) * blueberry = 427\n    equation3 = Eq((5/6) * chocolate + (1/3) * vanilla + (2/9) * blueberry, 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Find the number of chocolate cupcakes sold which is 1/6 of total chocolate cupcakes\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n\n    # Trains leave the first platform every 24 minutes\n    platform_1 = 24\n    # Trains leave the second platform every 30 minutes\n    platform_2 = 30\n\n    # Least common multiple of two departure intervals will give the time\n    # in minutes after 9 AM when trains leave both platforms at the same time\n    minutes = lcm(platform_1, platform_2)\n\n    # The time when trains next leave both platforms at the same time\n    hours = 9 + minutes // 60\n    minutes = minutes % 60\n\n    # Convert it to 24-hour format if necessary\n    hours = hours % 24\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3 / 4\n    water_poured = 24\n\n    full_tank = water_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for each child's age\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    # Equations based on the problem's statements\n    eq1 = Eq(dave - chris, 5)  # Dave is 5 years older than Chris\n    eq2 = Eq(dave - benu, 3)   # Dave is 3 years older than Benu\n    eq3 = Eq(anu - chris, -3)  # Anu is 3 years younger than Chris\n    eq4 = Eq(anu + benu + chris + dave, 20)  # Sum of ages is 20\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (anu, benu, chris, dave))\n    \n    # Return the age of Anu\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, w, p, b = symbols('r w p b')  # r: red marbles, w: white marbles, p: red marbles added by Pip, b: white marbles added by Bud\n\n    # Initial ratio of red to white marbles\n    equation1 = Eq(r/w, 3/2)\n    \n    # Ratio after Pip adds some red marbles\n    equation2 = Eq((r + p)/w, 5/3)\n    \n    # Ratio after Bud adds some white marbles\n    equation3 = Eq((r + p)/(w + b), 5/4)\n    \n    # Bud puts 100 more marbles than Pip\n    equation4 = Eq(b, p + 100)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Consider that 'a' divided by 8 leaves a remainder of 6\n    # and 'b' divided by 8 leaves a remainder of 7.\n\n    # For any number 'x' that when divided by 8 leaves a remainder 'r',\n    # 'x' can be expressed as: x = 8 * k + r, where 'k' is the quotient.\n    # So we can say:\n    # a = 8 * k1 + 6\n    # b = 8 * k2 + 7\n\n    # When adding 'a' and 'b', we get:\n    # a + b = (8 * k1 + 6) + (8 * k2 + 7)\n    # a + b = 8 * (k1 + k2) + 13\n\n    # The remainder of (a + b) divided by 8 is the same as the remainder of 13 divided by 8\n    # which is 5.\n\n    return 5\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n    \n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Jessica has 5 desks in front of her, and Judy has 7 desks behind her.\n    # Since Jessica sits in front of Judy, we can think of Judy's desk as\n    # being the one immediately behind Jessica's desk.\n    # Thus, the desks in front of Jessica also includes Jessica's desk, and\n    # the desks behind Judy also includes Judy's desk.\n    # Therefore, the total number of desks is:\n    # 5 (in front of Jessica, including her own) + 1 (Judy's desk) + 7 (behind Judy)\n    total_desks = 5 + 1 + 7\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the total weight of the group before Aaron joined.\n    # Let n be the number of people in the group before Aaron joined.\n\n    # After Aaron joined, the total weight became x + 45\n    # And the total number of people became n + 1\n    # The new average after Aaron joined is 61, so we have the equation:\n    # (x + 45) / (n + 1) = 61  \n    # x + 45 = 61 * (n + 1)\n\n    # After Ben joined, the total weight became x + 45 + 71\n    # And the total number of people became n + 2\n    # The new average after Ben joined is 62, so we have the equation:\n    # (x + 45 + 71) / (n + 2) = 62  \n    # x + 116 = 62 * (n + 2)\n\n    # We can now set up a system of equations:\n    # Equation 1: x + 45 = 61 * (n + 1)\n    # Equation 2: x + 116 = 62 * (n + 2)\n\n    # We will solve this system for x and n:\n    from sympy import symbols, solve, Eq\n\n    x, n = symbols('x n')\n    equation1 = Eq(x + 45, 61 * (n + 1))\n    equation2 = Eq(x + 116, 62 * (n + 2))\n\n    # Solve the system of equations for x and n\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Extract the original total weight before Aaron joined\n    original_total_weight = solutions[x]\n\n    # Calculate the original number of people before Aaron joined\n    original_number_of_people = solutions[n]\n\n    # Calculate the original average weight before Aaron joined\n    original_average_weight = original_total_weight / original_number_of_people\n\n    return original_average_weight\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_balls = 1991 + 1000  # Start with the total number of balls in Bag A.\n    white_balls = 1991         # Initially there are 1991 white balls.\n    black_balls = 1000         # Initially there are 1000 black balls.\n\n    for _ in range(2989):      # Repeat the process for 2989 times.\n        if white_balls > 0 and black_balls > 0:\n            # If there are both white and black balls left,\n            # one white and one black ball are taken out.\n            white_balls -= 1\n            black_balls -= 1\n            # Then one white ball is put back.\n            white_balls += 1\n        elif white_balls >= 2:  \n            # If only white balls are left, two white balls are taken out.\n            white_balls -= 2\n            # Then one black ball is put back in Bag A from Bag B.\n            black_balls += 1\n        else:                   \n            # If only black balls are left, two black balls are taken out,\n            # but one black ball is put back in Bag A from Bag B.\n            black_balls -= 1\n\n    ans = (total_balls - (2989 - black_balls), 'white') if white_balls > 0 else (total_balls - 2989, 'black')\n    return ans\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        # Ensuring that none of the leading digits are zero\n        if a == 0 or c == 0:\n            continue\n        first_num = a * 10 + b\n        second_num = c * 100 + d * 10 + e\n        product = first_num * second_num\n        # Checking if the product has the same digits as the multiplier\n        product_digits = sorted(str(product))\n        unique_digits = sorted(str(a) + str(b) + str(c) + str(d) + str(e))\n        if product_digits == unique_digits:\n            return product\n    return None\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_final = 2\n\n    work_rate = people_initial / time_initial\n    people_final = work_rate * time_final\n\n    return people_final\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # convert meters to centimeters\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4  # for four glasses of orange juice\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "from itertools import combinations\n\ndef solution():\n    ways = set()\n    for i in range(1, 5):\n        for comb in combinations(range(1, 5), i):\n            if sum(comb) == 5:\n                ways.add(tuple(sorted(comb)))\n    return len(ways)\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for units in range(1, 10):\n            if units == hundreds + 2:\n                # No condition on tens digit, so it can be anything from 0-9.\n                count += 10\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    total_mass = 91.2\n    multiplier = 3\n    daughter_mass = total_mass / (multiplier + 1)\n    mr_han_mass = multiplier * daughter_mass\n    return mr_han_mass\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 80/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    total_votes = 25\n    # Since Samantha has more votes than anyone else,\n    # let's assume the other two students have the same\n    # number of votes as each other, which is the best case\n    # for Samantha to have the least number of votes.\n    # If they both have x votes, then Samantha must have x+1 votes.\n    # Using the Pigeonhole Principle, 25 votes must be split into\n    # three groups such that two groups have the same number.\n    # This requires the smallest two groups to have at least n votes,\n    # where 2n + (n+1) = 25 => 3n + 1 = 25 => 3n = 24 => n = 8\n    # So the other two students have 8 votes each and Samantha has 9.\n    samantha_votes = (total_votes // 3) + 1\n\n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    # Initialize the count of different totals\n    totals = set()\n\n    # Loop through all combinations of three coins using a nested loop\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                # Add up the total value of the three coins\n                total = coin1 + coin2 + coin3\n                # Add the total to the set (duplicates are ignored)\n                totals.add(total)\n\n    # The number of different totals is the size of the set\n    count = len(totals)\n\n    return count\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    x = symbols('x') # The interest rate\n    principal = 6000 # Initial amount of money\n    amount = 8029.35 # Amount of money after 5 years\n    years = 5 # Number of years\n    \n    # Compound interest formula: A = P * (1 + r) ** n\n    equation = Eq(principal * (1 + x/100) ** years, amount)\n    \n    # Solve for x (interest rate)\n    x_value = solve(equation, x)\n    \n    return float(x_value[0])\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    total_digits = 0\n\n    while total_digits < 291:\n        pages += 1\n        total_digits += len(str(pages))\n\n    # If the total went over 291, we've counted one page too many\n    if total_digits > 291:\n        pages -= 1\n        \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    rooms_for_girls = girls // girls_per_room + (girls % girls_per_room > 0)\n    rooms_for_teachers = teachers // teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n    return total_rooms\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, not_read = symbols('read not_read')\n    total_pages = read + not_read\n\n    # Initial condition equation: read to not_read is 1:5\n    equation1 = Eq(read, not_read / 5)\n\n    # After reading 80 more pages the read pages will become 70% of the total\n    equation2 = Eq(read + 80, 0.70 * (total_pages))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (read, not_read))\n\n    # Since we need to find the total number of pages\n    ans = solutions[read] + solutions[not_read]\n    return ans\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of correct answers for CC\n    # Let y be the number of correct answers for Vivi\n    x, y = symbols('x y')\n    \n    # Each correct answer gives 10 points, and wrong answer subtracts 5 points\n    # Total points for CC is 10x - 5(10 - x)\n    # Total points for Vivi is 10y - 5(10 - y)\n    # Together they got 95 points\n    total_points_eq = Eq(10*x - 5*(10 - x) + 10*y - 5*(10 - y), 95)\n    \n    # Vivi got 15 more points than CC\n    vivi_more_points_eq = Eq(10*y - 5*(10 - y), 10*x - 5*(10 - x) + 15)\n    \n    # Solve the system of equations\n    solutions = solve((total_points_eq, vivi_more_points_eq), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15 = 650\n    people = 18\n    flour_for_18 = (flour_for_15 / 15) * people\n    return flour_for_18\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket = 6.34\n    child_ticket = 4.75\n\n    total_cost = (2 * adult_ticket) + (3 * child_ticket)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    s = '2581953752'\n    min_sum = float('inf')\n\n    for split1, split2 in combinations(range(1, len(s)), 2):\n        part1 = int(s[:split1])\n        part2 = int(s[split1:split2])\n        part3 = int(s[split2:])\n\n        current_sum = part1 + part2 + part3\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    mm_value = 7000000\n    m_value = mm_value / mm_to_m_conversion_factor\n    return m_value\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the two original numbers.\n    x, y = symbols('x y')\n\n    # The sum of the two numbers is 11.63.\n    equation1 = Eq(x + y, 11.63)\n\n    # Oliver's mistaken sum, shifting the decimal of y one position to the left.\n    equation2 = Eq(x + (y / 10), 5.87)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculating one hundred times the difference between the two numbers.\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n\n    minimum_dividend = minimum_divisor * quotient + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n\n    equation1 = Eq(mother, melissa + 24)\n    equation2 = Eq(mother, 3 * melissa)\n\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Worst case: taking all marbles of one color and all but two of the second color\n    # For example, taking all blue and all but two yellow marbles to ensure the 3rd marble of any color.\n    # 4 blue + (3-2) yellow + (1-2) red + 1 more to guarantee the 3rd of the same color\n    # (since we may take 1 red initially, but we'd need 2 more pulls to ensure 3 reds)\n    ans = 4 + (3 - 2) + (1 - 2) + 1\n    return ans\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Calculate the flowers on each side, excluding the corners, and multiply by 4 (for each side)\n    flowers_per_side_excluding_corners = 6 - 1 - 1  # Subtract corners\n    total_flowers_excluding_corners = flowers_per_side_excluding_corners * 4  # Multiply by sides\n    \n    # Add the corner flowers back in (4 corners with 1 flower each)\n    total_flowers_including_corners = total_flowers_excluding_corners + 4\n    \n    return total_flowers_including_corners\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n\n    piece3 = original_length - (piece1 + piece2)\n    longest_piece = max(piece1, piece2, piece3)\n    shortest_piece = min(piece1, piece2, piece3)\n\n    difference = longest_piece - shortest_piece\n\n    return difference\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n    \n    # Let the common factor for science club and literature club be x\n    # and the common factor for literature club and math club be y.\n    # Thus, members in science club = 9x, literature club = 10x, and math club = 7y.\n    # Since the literature club members are the same in both ratios, we equate 10x = 5y.\n\n    # To find the common factors x and y for the ratios to hold true\n    # while giving a total of 99 members, we solve:\n    # 9x + 10x + 7y = 99 and 10x = 5y.\n  \n    # Simplify the second equation: y = 2x.\n    # Replace y in the first equation: 9x + 10x + 7(2x) = 99\n    # Simplify further: 9x + 10x + 14x = 99\n    # Combine like terms: 33x = 99\n    # Divide both sides by 33 to find x: x = 99 / 33, x = 3.\n  \n    # Now we calculate y: y = 2 * x = 2 * 3 = 6\n  \n    # Members in math club: 7 * y = 7 * 6 = 42\n    # Members in literature club: 10 * x = 10 * 3 = 30\n    # Calculate the difference: math club members - literature club members = 42 - 30\n\n    x = total_members / 33\n    y = 2 * x\n    math_club_members = 7 * y\n    literature_club_members = 10 * x\n    difference = math_club_members - literature_club_members\n    \n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # calculate the cost of the book\n    book_cost = 132 / (1 + 3/2) # since the bag costs 3/2 of the book\n    \n    # the book cost 1/3 of the total money\n    total_money = book_cost * 3 # the total money is 3 times the cost of the book\n\n    return total_money\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the volleyball and basketball prices\n    volleyball, basketball = symbols('volleyball basketball')\n\n    # Equation representing the total cost\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n\n    # Equation representing the price difference\n    equation2 = Eq(basketball, volleyball + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (volleyball, basketball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    repeat_length = len(pattern)\n    total_digits = 47\n\n    full_repeats = total_digits // repeat_length\n    remaining_digits = total_digits % repeat_length\n\n    sum_full_repeats = sum(map(int, pattern)) * full_repeats\n    sum_remaining_digits = sum(map(int, pattern[:remaining_digits]))\n\n    ans = sum_full_repeats + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_six = 2.52\n    cost_per_bottle = cost_for_six / 6\n    cost_for_nine = cost_per_bottle * 9\n    return cost_for_nine\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Average pencils per boy is 20\n    total_pencils_boys = 20 * boys\n    # Average pencils per girl is 60\n    total_pencils_girls = 60 * girls\n    # Total pupils in class is 40\n    total_pupils = Eq(boys + girls, 40)\n    # Average pencils per pupil is 35\n    average_pencils = Eq((total_pencils_boys + total_pencils_girls) / (boys + girls), 35)\n    \n    solutions = solve((total_pupils, average_pencils), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because it's a 2-digit number\n        for b in range(10): # b can be 0\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct_jack in range(26):\n        incorrect_jack = 25 - correct_jack\n        score_jack = 4 * correct_jack - incorrect_jack\n        for correct_johnson in range(correct_jack):\n            incorrect_johnson = 25 - correct_johnson\n            score_johnson = 4 * correct_johnson - incorrect_johnson\n            if score_jack == 61 and score_johnson == 61:\n                not_answered_jack = incorrect_jack - correct_jack\n                return not_answered_jack\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 0.57\n    ans = total_pounds + total_pence\n    return ans\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Given values\n    base_price_per_cupcake = 4.50\n    discount_rate = 0.20\n    shipping_handling = 12\n    total_bill = 120\n\n    # Calculate the total cost for 20 cupcakes (which are not discounted)\n    base_cost_for_20 = 20 * base_price_per_cupcake + shipping_handling\n    \n    # If the total bill is not greater than base cost for 20 cupcakes,\n    # it means all cupcakes are bought at the base price\n    if total_bill <= base_cost_for_20:\n        # Subtract the shipping and handling, then divide by the price per cupcake\n        return (total_bill - shipping_handling) / base_price_per_cupcake\n\n    # For more than 20 cupcakes\n    # Calculate the price after discount for each additional cupcake over 20\n    discounted_cupcake_price = base_price_per_cupcake * (1 - discount_rate)\n    \n    # Subtract the base cost for 20 cupcakes from total bill to find the cost of additional cupcakes\n    additional_cupcakes_cost = total_bill - base_cost_for_20\n    \n    # Divide the additional cost by the discounted price of each cupcake to find the number of additional cupcakes\n    additional_cupcakes_count = additional_cupcakes_cost / discounted_cupcake_price\n    \n    # Total number of cupcakes is 20 (non-discounted) plus the additional (discounted) cupcakes\n    total_cupcakes = 20 + additional_cupcakes_count\n    \n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of one pig and one goat\n    pig, goat = symbols('pig goat')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * pig + 1 * goat, 440)  # 3 pigs and 1 goat cost £440\n    equation2 = Eq(1 * pig + 2 * goats, 280)  # 1 pig and 2 goats cost £280\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    # Calculate the cost for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) == int(str(i) + '1') // 3:\n            return i\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n \n    solution = solve(equation, A)\n \n    return solution[0] # Assuming there is a unique solution\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    # Total people is people in front of her + herself + the people behind her\n    # We subtract one because counting both from front and back includes her twice\n    total_people = people_in_front + position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy, energetic = symbols('lazy energetic')\n\n    # 1/lazy is the part of the house the lazy painter can paint in one day\n    # 1/energetic is the part of the house the energetic painter can paint in one day\n    # Together, they paint in 6 days, so in one day they paint 1/6 of the house\n    equation1 = Eq(1/lazy + 1/10, 1/6)\n\n    # Solve the equation for the lazy worker's time\n    solutions = solve(equation1, lazy)\n\n    return solutions[lazy]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol for the number John thought of\n    number = symbols('number')\n\n    # Now let's write the equation as described in the problem\n    # (John thought of a number + 45) / 3 = John's original number * 2\n    equation = Eq((number + 45) / 3, number * 2)\n\n    # Solve the equation to find the number\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_series = (n * (n + 1)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):\n        for x2 in range(2, 10):\n            x3 = 10 - x1 - x2\n            if x3 >= 2 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # divide by the number of permutations for each combination\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # In the worst case scenario, we could pick all the marbles of one color before getting a different color.\n    # To ensure we get 4 marbles of different colors, we take all of one color, all of another, and all of another,\n    # and then one more marble to guarantee the fourth color.\n\n    # Number of marbles of the most three plentiful colors\n    red = 12\n    blue = 9\n    yellow = 8\n    # Do not need to consider the 3 red marbles, as they are not among the most plentiful three\n\n    # Adding one more to ensure the fourth color\n    marbles_drawn = red + blue + yellow + 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Initialize the number as a string, replacing the square with a placeholder 'x'\n    number_str = '5' * 19 + 'x' + '9' * 19\n    # Replace 'x' with digits from 0 to 9 and check divisibility by 7\n    for digit in range(10):\n        replaced_str = number_str.replace('x', str(digit))\n        if int(replaced_str) % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1 / 5\n    total_pages = pages_first_day / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return 9  # Because only the tens place can change from 1 to 9\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    previous_purchase = 105.6 - 14.4\n    total_spent = previous_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote Anthea's original amount of storybooks as A.\n    # According to the problem, after giving away 4 books, Jason and Anthea have the same number.\n    # So, Jason has 30 - 4 books after giving them to Anthea, which means Anthea has 26 storybooks after receiving them.\n    # Therefore, Anthea originally had 26 - 4 books (because she received 4 from Jason).\n    # Now we can calculate the difference between Jason's and Anthea's original amounts.\n    \n    jason_original = 30\n    anthea_after_receiving = jason_original - 4\n    anthea_original = anthea_after_receiving - 4\n    difference = jason_original - anthea_original\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10  # Initialize the first two integers\n     \n    for _ in range(2021):  # We need to find the 2023rd integer\n        a, b = b, a + b   # The iteration rule\n\n    ans = b % 3  # The remainder when the 2023rd integer is divided by 3\n    return ans\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since no two children have the same height and Tom stands at the 10th place,\n    # the maximum height would mean that all the children before Tom are the shortest\n    # possible, and since all heights are whole numbers, we start from 1 cm.\n    \n    shortest_heights_sum = sum(range(1, 10))  # Sum heights for the nine shortest children\n    \n    # Find the next greatest whole number height for Tom\n    tom_height = 9 + 1  # Tom is the next in line after 9 children\n\n    # Now we need to consider the remaining children after Tom.\n    # Since we are looking for the maximum height for Tom, the 21 children after him\n    # should be the tallest possible, meaning their heights would follow directly\n    # after Tom's maximum possible height without gaps. Thus, we start counting from\n    # Tom's height and add 21 children's heights to reach the last child's height.\n\n    # Calculate the total heights of children after Tom, knowing the last child's height\n    total_children_heights_sum = sum(range(tom_height + 21, 132))  # 131 cm is the last child's height\n    \n    # Subtract the sum of heights of children after Tom and sum of shortest children from the total sum\n    # to find out the maximum height Tom can be.\n    max_tom_height = sum(range(1, 132)) - total_children_heights_sum - shortest_heights_sum\n\n    return max_tom_height\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let n be the number of students and x be the total number of gifts.\n    # From the first condition, we have x = 5n + 3\n    # From the second condition, we have x = 4n + 9\n\n    # Since both expressions equal x, we can set them equal to each other:\n    # 5n + 3 = 4n + 9\n    # Solving for n:\n    n = 9 - 3\n\n    return n\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from math import prod\n    \n    number = 840\n    prime_factors = []\n    \n    # Find the prime factors.\n    for i in range(2, number + 1):\n        while number % i == 0:\n            prime_factors.append(i)\n            number //= i\n            \n    # Count the exponents + 1 for each unique prime factor.\n    prime_factor_counts = [prime_factors.count(i) for i in set(prime_factors)]\n    \n    # Calculate the number of factors using the theorem of the number of factors.\n    num_factors = prod([x + 1 for x in prime_factor_counts])\n    \n    return num_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alan, Bella, and Chloe's money\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Equations based on the problem statement\n    equation1 = Eq(alan + bella + chloe, 200)   # Total money equation\n    equation2 = Eq(alan, 4/7 * (alan + bella))   # Alan to Bella ratio equation\n    equation3 = Eq(alan, chloe + 20)             # Alan has £20 more than Chloe\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_cost = 7.85\n    bar_cost = 1.83\n    note = 20\n    \n    total_cost = box_cost + 2 * bar_cost\n    change = note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Since Lily and her mother's places are fixed, we have 3 family members left whose positions can be permuted.\n    # The number of ways to arrange these 3 family members is given by the factorial of 3.\n    from math import factorial\n\n    return factorial(3)  # 3!\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the 2-digit numbers with the given digits\n    perm = list(permutations(range(1, 9), 2))\n\n    # Filter according to the given conditions\n    cond1 = [10 * a + b for a, b in perm if b == 2 * a]               # The ones digit is twice the tens digit\n    cond2 = [10 * a + b for a, b in perm if a + b == 9]               # The sum of ones and tens digits is 9\n    cond3 = [10 * a + b for a, b in perm if a == b + 5]               # The tens digit is 5 more than the ones digit\n    cond4 = [10 * a + b for a, b in perm if (10 * a + b) % 2 == 1]    # Only one odd number\n\n    # Find valid numbers fulfilling the conditions\n    valid_numbers = []\n    for x in perm:\n        number = x[0] * 10 + x[1]\n        if (number in cond1 or number in cond2 or number in cond3) and (number in cond4) \\\n                and x not in valid_numbers:\n            valid_numbers.append(x)\n    \n    # Sort the numbers to find the second smallest one\n    valid_numbers.sort()\n    second_smallest = 10 * valid_numbers[1][0] + valid_numbers[1][1]\n    return second_smallest\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n\n    # Number of terms in the sequence can be found using the formula: n = (last_term - first_term) / difference + 1\n    num_terms = (last_term - first_term) // difference + 1\n\n    # Sum of an arithmetic sequence can be found using the formula: S = n/2 * (first_term + last_term)\n    total_seats = num_terms * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_visitors be the total number of visitors at the fair\n    total_visitors = symbols('total_visitors')\n\n    # Equation representing the number of children\n    children = (3/5) * total_visitors\n    \n    # Remaining visitors after removing the children\n    remaining = total_visitors - children\n    \n    # Equation representing the number of men (1/2 of the remaining visitors)\n    men = (1/2) * remaining\n\n    # Equation based on the information that there were 140 more children than men\n    equation = Eq(children - men, 140)\n\n    # Solve the equation to find the total number of visitors\n    visitors = solve(equation, total_visitors)\n\n    return visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    sam, peter = symbols('sam peter')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(sam, peter + 40)  # Sam had 40 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.25 * peter + 96)  # After swapping stickers, Sam has 96 more\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_numbers_initial = 3\n    num_numbers_final = 4\n\n    total_initial = average_initial * num_numbers_initial\n    total_final = average_final * num_numbers_final\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    start = 5\n    # Using the sum of squares formula: n(n + 1)(2n + 1)/6, \n    # Calculate the sum up to 15^2 and subtract sum up to 4^2\n    correct_answer = (n*(n + 1)*(2*n + 1)/6) - (start - 1)*start*(2*(start - 1) + 1)/6\n    return correct_answer\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Amy's initial amount of money as 'x'\n    x = symbols('x')\n    \n    # After spending 6/11 of her money and an additional $5, the amount remaining is\n    # x - (6/11)*x - 5\n    # Then, she spends 3/10 of the remainder and an additional $12, so we have\n    # (x - (6/11)*x - 5) - 3/10*(x - (6/11)*x - 5) - 12 = 30\n    equation = Eq((x - (6/11)*x - 5) - 3/10*(x - (6/11)*x - 5) - 12, 30)\n    \n    # Solve the equation for x\n    initial_money = solve(equation, x)[0]\n\n    return initial_money\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let s be Sally's current age and g be Gillian's current age\n    s, g = symbols('s g')\n\n    # the first equation representing the current ratio of Sally's to Gillian's age\n    equation1 = Eq(s/g, 2/7)\n\n    # the second equation representing the future ratio of Sally's to Gillian's age after 15 years\n    equation2 = Eq((s + 15) / (g + 15), 1/2)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (s, g))\n\n    # s is Sally's age, so we return that from the solutions tuple\n    return solutions[s]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n\n    incorrect_minuend = incorrect_subtrahend + incorrect_result\n    correct_result = incorrect_minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    # LCM of 3 and 4 is 12, which is the interval at which customers will\n    # receive both a pen and a file\n    lcm = 12\n\n    # Number of customers that will receive both a pen and a file is the\n    # count of multiples of the LCM that do not exceed the total number of\n    # customers, which is 40 in this case\n    ans = 40 // lcm\n\n    return ans\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9  # 9 apples have a mass of 1 kg\n    total_apples = 8 * apples_per_kg  # Total number of apples used by the baker\n    apples_per_cake = 4  # 4 apples are used to bake a cake\n\n    # Number of cakes that can be baked\n    cakes = total_apples // apples_per_cake\n\n    return cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    result = 35 * 9 / 45\n    return result\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5  # distance between seeds in metres\n    total_seeds = 12\n    total_distance = distance_apart * total_seeds  # total distance around the circle\n\n    # The total distance around the circle is the circumference\n    circumference = total_distance\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    cut_pieces = 0\n\n    while original_pieces + (cut_pieces * 2) != final_pieces:\n        cut_pieces += 1\n\n    return cut_pieces\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    avg_score_boys = 10\n    avg_score_all = 14\n\n    total_score_all = (total_boys + total_girls) * avg_score_all\n    total_score_boys = total_boys * avg_score_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    avg_score_girls = total_score_girls / total_girls\n\n    return avg_score_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    n = 1\n    while True:\n        initial_square = n * n\n        surplus_students = initial_square + 9\n        new_square = (n + 1) * (n + 1)\n        needed_students = new_square - surplus_students\n        if needed_students == 16:\n            return surplus_students\n        n += 1\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Before her friends gave her postcards\n    envelopes_before = 5\n    postcards_before = 50  # Total postcards\n\n    # Let's find the unit rate before her friends gave her more postcards\n    postcards_per_envelope_before = postcards_before / envelopes_before\n\n    # After her friends gave her postcards\n    envelopes_after = 2\n\n    # Given that the number of postcards per envelope remains the same, we have:\n    postcards_per_envelope_after = postcards_per_envelope_before\n\n    # Since the additional envelopes also have the same number of postcards per envelope\n    postcards_after = envelopes_after * postcards_per_envelope_after\n\n    # Total postcards after her friends gave her more\n    total_postcards = postcards_before + postcards_after\n\n    return int(total_postcards)\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Define the possible values of coins in GBP\n    coin_values = [1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n    # Iterate over each coin value\n    for coin in coin_values:\n        # The coin count must be even since for each coin there is one other of same value\n        if (2.50 % coin) == 0 and ((2.50 / coin) % 2) == 0:\n            return coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    # Let x be the number of cookies Jolie baked.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # She threw away 3/5 of the cookies, and she has 2/5 left.\n    remaining = 2/5 * x\n    # She sold 75% (or 3/4) of the remaining cookies.\n    sold = 3/4 * remaining\n    # The number of cookies she burnt was 42 more than the number of cookies she sold.\n    burnt = sold + 42\n\n    # The cookies burnt are 3/5 of the total cookies she baked.\n    equation = Eq(3/5 * x, burnt)\n\n    # Solve the equation to find the number of cookies Jolie baked.\n    solution = solve(equation, x)\n\n    # Return the solution\n    ans = solution[0]\n    return ans\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    cost_for_250g = (cost_per_100g / 100) * 250\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-(2/5))**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 1000):\n            original = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original:\n                return original\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1070 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front, so there are 5! ways to arrange the other five students.\n    five_students_arrangement = factorial(5)\n\n    # Rita cannot stand at the end, which means she has 4 positions to choose from.\n    rita_positions = 4\n\n    # The number of ways to form the line is the product of both possibilities.\n    return five_students_arrangement * rita_positions\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    solution_weight = sugar + water\n    concentration = (sugar / solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50_percent = 0.50\n    additional_discount_20_percent = 0.20\n    \n    price_after_50_percent_discount = regular_total_price * (1 - discount_50_percent)\n    final_price = price_after_50_percent_discount * (1 - additional_discount_20_percent)\n    \n    return final_price\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let the total length of the road be x miles\n    # Jerry travels 3/7 of the road which is (3/7)x miles\n    # Kevin travels 4/7 of the road which is (4/7)x miles\n    # The speed of Kevin is 80 mph\n    \n    # According to the problem, Jerry travels (2/5)x miles in 1 hour (since it's 2/5 of the road length)\n    # Let's find the time it takes for Kevin to travel (4/7)x miles at 80 mph\n    # Time = Distance / Speed\n    \n    # For Kevin: time = (4/7)x / 80\n    # For Jerry: time = (3/7)x / ((2/5)x)\n    # Both times must be equal, since they start at the same time and meet at the same time\n    # (4/7)x / 80 = (3/7)x / ((2/5)x)\n    # Now we solve for x\n    \n    # Cross multiply\n    # (4/7)x * ((2/5)x) = (3/7)x * 80\n    # Simplify the equation and solve for x\n    # (8/35)x^2 = (240/7)x\n    # Divide both sides by x\n    # (8/35)x = 240/7\n    # Multiply both sides by 35/8\n    x = (240/7) * (35/8)\n    \n    return x\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction = 4/7\n    total_apples = sold_apples / fraction\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    singapore_departure = datetime.strptime('24/08 05:00', '%d/%m %H:%M')\n    london_arrival = datetime.strptime('24/08 11:00', '%d/%m %H:%M')\n    time_difference = timedelta(hours=7)\n\n    # Since Singapore is ahead, we subtract the time difference to get the London departure time\n    london_departure = singapore_departure - time_difference\n    flight_duration = london_arrival - london_departure\n\n    return flight_duration.total_seconds() // 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n    boys_average = 20\n    girls_average = 60\n    \n    # Let the number of boys be b and the number of girls be g\n    # We know that total_pupils = b + g and\n    # total_average * total_pupils = boys_average * b + girls_average * g\n    # Also, we know that total_pupils - b = g (the number of girls)\n    \n    # So we have two equations:\n    # 1) b + g = total_pupils\n    # 2) boys_average * b + girls_average * g = total_average * total_pupils\n    \n    # Using equation 1 to express g in terms of b:\n    # g = total_pupils - b\n    \n    # Substituting g into equation 2:\n    # boys_average * b + girls_average * (total_pupils - b) = total_average * total_pupils\n    # Solving for b:\n    b = (girls_average * total_pupils - total_average * total_pupils) / (girls_average - boys_average)\n\n    return int(b)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob  # Probability that Sally will lose a game\n\n    # Probability that Sally wins the first game and loses or draws the second game\n    prob_win_first = win_prob * (draw_prob + lose_prob)\n\n    # Probability that Sally draws or loses the first game and wins the second game\n    prob_win_second = (draw_prob + lose_prob) * win_prob\n\n    # Total probability that Sally wins exactly one game\n    prob_exactly_one_win = prob_win_first + prob_win_second\n\n    return prob_exactly_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Start with the minimum number of lollipops that can be left\n    # This minimum is based on the leftover lollipops for the box size of 4\n    lollipops = 32\n\n    # We will loop indefinitely until we find a solution\n    while True:\n        # If the remaining lollipops when divided by 7 leaves a remainder of 3,\n        # we found the correct number of lollipops\n        if (lollipops - 3) % 7 == 0:\n            return lollipops\n        # If not, we add 4 more lollipops as they increase the number of lollipops\n        # in steps that match the first condition of having 32 leftovers with boxes of size 4\n        lollipops += 4\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n\n    # Calculate the greatest common divisor of the differences\n    d = gcd(diff1, diff2)\n\n    # Since we want the largest possible value of D, we take D as the gcd of differences\n    # R can be obtained as the remainder of any number divided by D.\n    R = 2010 % d\n\n    # Return D + R\n    return d + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Calculate the recurring cycle of 1/13 in decimal\n    cycle = '076923'  # 1/13 = 0.076923 repeating\n\n    # Find the position in the cycle\n    cycle_position = (2012 - 1) % len(cycle)  # -1 because we start counting decimal places from 0\n\n    # Return the digit at the given position in the cycle\n    return int(cycle[cycle_position])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # range of two-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # if the sum of the digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let x be the common ratio before Eddi gave 4 cards to Wiya\n    # Eddi's cards = 8x, Wiya's cards = 7x\n    # After giving away 4 cards: Eddi's cards = 8x - 4, Wiya's cards = 7x + 4\n    # The new ratio would be (8x - 4):(7x + 4) = 18:17\n    \n    # We can set up a proportion to find the value of x\n    # (8x - 4) / (7x + 4) = 18 / 17\n    # 17 * (8x - 4) = 18 * (7x + 4)\n    # 136x - 68 = 126x + 72\n    # 10x = 140\n    # x = 14\n    \n    x = 140 / 10\n    \n    # Eddi's cards at first = 8x\n    eddis_cards = 8 * x\n    \n    return eddis_cards\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2*x - 2), 30 - 3*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Red is to blue as 5 is to 6\n    red_marbles = (5/6) * blue_marbles\n    # Red is twice the number of green marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    term1_numerator = Fraction(2017, 1) + Fraction(7, 8)\n    term1_denominator = Fraction(3, 1) + Fraction(2, 3)\n\n    term2_numerator = Fraction(2016875, 1000)\n    term2_denominator = Fraction(11, 3)\n\n    term3_numerator = (Fraction(2017, 1) + Fraction(1, 3)) - Fraction(2016875, 1000)\n    term3_denominator = Fraction(17, 1)\n\n    term4 = Fraction(3, 1) + Fraction(23, 32)\n\n    numerator = (term1_numerator * term1_denominator) - (term2_numerator * term2_denominator)\n    denominator = term3_numerator * term3_denominator\n\n    ans = numerator / denominator * term4\n\n    return ans\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    sleep_time = 215  # min\n    initial_time = 10  # min\n\n    # Distance both the rabbit and turtle would have covered before the rabbit sleeps\n    initial_distance_rabbit = initial_time * rabbit_speed\n    initial_distance_turtle = initial_time * turtle_speed\n\n    # The turtle continues to move at its speed during the rabbit's nap\n    sleep_distance_turtle = sleep_time * turtle_speed + initial_distance_turtle\n\n    # Total distance that turtle travels (before + during rabbit's nap)\n    total_distance_turtle = initial_distance_turtle + sleep_distance_turtle\n\n    # If the turtle has already reached the finish line, return the distance between them (should be 0)\n    if total_distance_turtle >= race_distance:\n        distance_between = total_distance_turtle - race_distance\n        winner = 'turtle'\n    else:\n        # Time it takes for the rabbit to finish the race after waking up\n        remaining_distance_rabbit = race_distance - initial_distance_rabbit\n        remaining_time_rabbit = remaining_distance_rabbit / rabbit_speed\n\n        # Total time turtle runs (initial 10 mins + rabbit's sleep + rabbit's remaining time)\n        total_time_turtle = initial_time + sleep_time + remaining_time_rabbit\n\n        # Total distance that the turtle covers in the total time\n        total_distance_turtle = total_time_turtle * turtle_speed\n\n        # Distance between the rabbit and the turtle when the first one reaches the finish line\n        if remaining_time_rabbit + initial_time < sleep_time + initial_time:\n            winner = 'rabbit'\n            distance_between = race_distance - total_distance_turtle\n        else:\n            winner = 'turtle'\n            distance_between = total_distance_turtle - race_distance\n\n    # Return who won and the distance between them when the first one reached the finish line\n    return winner, round(distance_between)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A has 47 more students than B\n    equation1 = Eq(A, B + 47)\n\n    # Moving x students from A to B, A will have 9 more students than B\n    x = symbols('x')\n    equation2 = Eq((A - x), (B + x) + 9)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (A, B, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    max_product = 0\n\n    # Generate all combinations of A, B, and C whose sum is 31.\n    for numbers in combinations_with_replacement(range(1, 32), 3):\n        if sum(numbers) == 31:\n            max_product = max(max_product, numbers[0] * numbers[1] * numbers[2])\n            \n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 1.2\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        oddtastic = True\n        for digit in str(number):\n            if int(digit) % 2 == 0:\n                oddtastic = False\n                break\n        if oddtastic:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2): # hundreds digit, must be odd (1 to 9, step by 2)\n        for j in range(10): # tens digit (0 to 9)\n            for k in range(10): # ones digit (0 to 9)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    cost_per_avocado_pence = (total_cost_pounds * 100) / (total_pairs * 2)  # Convert pounds to pence and divide by number of individual avocados\n\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    outcomes = [0] * 13  # Initialize an array to store the count of sums (2-12)\n    # Go through all possible outcomes for two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            outcomes[die1 + die2] += 1\n    \n    # Find the index (sum value) of the maximum outcome count\n    most_likely_score = outcomes.index(max(outcomes[2:]))  # We start at index 2, as the minimum sum is 2\n    \n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    square_tables = 8\n    # For each square table, two sides (parallel) can be used for sitting\n    sides_for_sitting = 2\n\n    # The number of people that can sit evenly spaced around this long table without the corners\n    max_people_without_corners = people_per_square_table*square_tables - 4*square_tables\n    \n    # Adding the corners of the first and the last table\n    max_people_with_corners = max_people_without_corners + 4\n\n    return max_people_with_corners\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n    \n    equations = (equation1, equation2)\n    \n    solutions = solve(equations, (andrew, boris, jeffery, xavier))\n\n    jeffery_and_boris = solutions[jeffery] + solutions[boris]\n\n    return jeffery_and_boris\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let the number of rhinos be r, and the number of deer be d, and ostriches be o.\n    # From the problem we have two equations\n    # r + d + o = 28 (since head of each animal is 1)\n    # Since the number of rhinos is equal to the number of deer we can say r = d\n    # 4*r (legs of each rhino) + 4*d (legs of each deer) + 2*o (legs of each ostrich) = 88\n\n    # Substitute r for d since r equals d\n    # 4*r + 4*r + 2*o = 88\n    # 8*r + 2*o = 88\n\n    # We also have r + r + o = 28, which can be written as 2*r + o = 28\n\n    # Now we have two equations:\n    # 8*r + 2*o = 88\n    # 2*r + o = 28\n\n    # We can solve these equations to find the values of r and o.\n\n    # From the second equation -> o = 28 - 2*r\n    # Substitute o in the first equation\n    # 8*r + 2*(28 - 2*r) = 88\n    # 8*r + 56 - 4*r = 88\n    # 4*r = 88 - 56\n    # 4*r = 32\n    # r = 32 / 4\n    # r = 8\n\n    # So, there are 8 rhinos in the farm.\n    r = 8\n    return r\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_per_page = 0\n    page = 1\n    while total_digits > digits_per_page:\n        digits_per_page += len(str(page))\n        if total_digits >= digits_per_page:\n            page += 1\n    return page - 1\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors\n\n    count = 0\n    for i in range(15, 15**15, 15):\n        if len(divisors(i)) == 15:\n            count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit of 32^33\n    ones_digit_32_power_33 = pow(32, 33, 10)\n    \n    # Calculate the ones digit of 22^29\n    ones_digit_22_power_29 = pow(22, 29, 10)\n    \n    # Find the ones digit in the subtraction of the two numbers\n    ans = (ones_digit_32_power_33 - ones_digit_22_power_29) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    total_people = 0\n    difference = 52\n    side_student = 2\n    side_teacher = 1\n\n    while True:\n        students = side_student ** 2\n        teachers = side_teacher ** 2\n        if students - teachers == difference:\n            total_people = students + teachers\n            break\n        side_student += 2\n        side_teacher += 2\n\n    return total_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                difference = B - A\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    \n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial condition: apples = (5/7) * oranges\n    equation1 = Eq(apples, (5/7) * oranges)\n\n    # After purchasing 12 more oranges:\n    # apples = (2/3) * (oranges + 12)\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Given 8 * 80 * 100 = 8^2 * X, solve for X\n    # First calculate 8 * 80 * 100\n    value = 8 * 80 * 100\n    # Then divide that by 8^2 to find X\n    ans = value // (8**2)\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, nsimplify, solve\n\n    x, y, z = symbols('x y z')\n    target_fraction = nsimplify(2014/37)\n    fraction_form = 54 + 1 / (x + 1 / (y + 1 / z))\n\n    equation = fraction_form - target_fraction\n\n    solutions = solve(equation, (x, y, z))\n\n    # Find the integer solution which has distinct values for x, y, and z\n    for sol in solutions:\n        if all(isinstance(term, int) for term in sol) and len(set(sol)) == 3:\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    # Counting starts at the point when Eddie stops, which is at number 10\n    stop_number = 10\n    # Eddie counts up to 30\n    total_count = 30\n    # The clock has 12 numbers and repeats every 12 counts (periodic)\n    clock_numbers = 12\n    \n    # Find the starting number\n    start_number = (stop_number - (total_count % clock_numbers)) % clock_numbers\n    # If start_number is 0, it means he started at 12\n    if start_number == 0:\n        start_number = clock_numbers\n    \n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200+198+196+194+24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the amount of oil sold from each bucket\n\n    # Equation for the big bucket after selling x kilograms\n    equation_big = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation\n    solution = solve(equation_big, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    \n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    winners = 9\n\n    amount_per_person = total_jackpot / winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens including the one who is purchasing\n    aliens = 6\n    \n    # Cost for shoes and socks for one alien\n    cost_per_alien_shoes = 78 * 5  # 5 shoes per alien as it is a five-legged alien\n    cost_per_alien_socks = 12 * 5  # 5 pairs of socks per alien as it is a five-legged alien\n    \n    # Total cost\n    total_cost = (cost_per_alien_shoes + cost_per_alien_socks) * aliens\n    \n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on remainder of 1 when divided by each number\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    # Using the Chinese Remainder Theorem to find the smallest number\n    # that leaves remainder of 1 for all the divisions\n    lcm, remainder = solve_congruence(*congruences)\n    \n    # Loop to find the smallest three-digit number which satisfies the condition\n    num = remainder\n    while num < 100:  # smallest three-digit number is 100\n        num += lcm\n    \n    return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "from sympy import primerange\n\ndef solution():\n    # Extract equations from given conditions.\n    # 31 + a = 26 + b\n    # 31 + a = 20 + c\n    # Which means:\n    # b = a + 5\n    # c = a + 11\n    # Since a, b, and c are prime, we try to find the smallest prime 'a' such that \n    # 'a + 5' and 'a + 11' are also primes.\n\n    for a in primerange(1, 100):  # Arbitrary range, knowing that a prime answer must exist within a reasonable range\n        b = a + 5\n        c = a + 11\n        if b in primerange(1, b + 1) and c in primerange(1, c + 1):\n            return a * b * c\n    \nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Let d be the distance between the home and park\n    # Let t1 be the time it takes to jog to the park, and t2 be the time to jog back\n\n    # Average speed going = distance/time -> 5 = d/t1 -> t1 = d/5\n    # Average speed returning = distance/time -> 4 = d/t2 -> t2 = d/4\n\n    # Total time is t1 + t2 = 54 min, which is 54/60 hours\n\n    # d/5 + d/4 = 54/60\n    # Simplify the equation: 4d + 5d = 54 * 5 * 4 / 60\n    # 9d = 54 * 5 * 4 / 60\n    # d = 54 * 5 * 4 / 60 / 9\n\n    d = (54 * 5 * 4) / (60 * 9)\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    joleen, rennie = symbols('joleen rennie')\n    \n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n    \n    solutions = solve((equation1, equation2), (joleen, rennie))\n    \n    total_pies = solutions[joleen] + solutions[rennie]\n    \n    return int(total_pies)\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x.\n    # Therefore, the number of girls would be x + 8.\n    # The total number of pupils is x + (x + 8).\n    # According to the information given, x + (x + 8) = 26.\n    \n    # We can now solve for x (the number of boys).\n    x = (26 - 8) // 2  # We subtract the 8 extra girls and divide by 2 to find the number of boys.\n    \n    # We can now find the number of girls by adding 8 to the number of boys.\n    num_girls = x + 8\n    return num_girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a_and_b = symbols('a_and_b')  # a_and_b represents the number of students who like both apples and bananas\n    a = 3 * a_and_b  # Number of students who like apples\n    b = 5 * a_and_b  # Number of students who like bananas\n    total_students = 35\n\n    # Using Inclusion-Exclusion Principle for two sets\n    # Total = n(A) + n(B) - n(A ∩ B)\n    equation = Eq(a + b - a_and_b, total_students)\n\n    solution = solve(equation, a_and_b)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n    \n    # 1 job is finished by both working together for 10 hours\n    equation1 = Eq((lee_rate + nancy_rate) * 10, 1)\n    \n    # Nancy works for 20 hours, Lee works for 6 hours for 1 job\n    equation2 = Eq(nancy_rate * 20 + lee_rate * 6, 1)\n    \n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n    \n    # Time taken for Nancy to finish the job alone is 1 job divided by Nancy's rate\n    time_nancy = 1 / solutions[nancy_rate]\n    \n    return time_nancy\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    pie_oranges_g = 550\n    juice_oranges_g = 1050\n\n    remaining_oranges_g = (total_oranges_kg * 1000) - (pie_oranges_g + juice_oranges_g)\n    remaining_oranges_kg = remaining_oranges_g / 1000\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # The equation given in the question is B = 6 * A + 25\n    # where A is xy (meaning x*10 + y) and B is 2xy (meaning 2*x*10 + y)\n    # This means that 2*x*10 + y = 6 * (x*10 + y) + 25\n    for x in range(1, 10):  # x cannot be zero as it's the tens place in A\n        for y in range(10):  # y can be zero\n            A = x * 10 + y\n            B = 2 * x * 10 + y\n            if B == 6 * A + 25:\n                return A  # We found the value of A that satisfies the condition\n    return None  # If no such A is found, though this won't happen in this case\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    total_days = 5\n    difference = 3\n    chairs = [first_day_chairs]\n    \n    for day in range(1, total_days):\n        chairs.append(chairs[day-1] + difference)\n        \n    total_chairs = sum(chairs)\n    \n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    # The number of ways to choose 1 pencil colour from 15 pencil colours\n    pencil_choices = 15\n    # The number of ways to choose 1 ruler colour from 20 ruler colours\n    ruler_choices = 20\n    # The number of ways to choose 1 pen colour from 10 pen colours\n    pen_choices = 10\n  \n    # Since we can choose any two items, we have three scenarios:\n    # 1. Choose a pencil and a ruler\n    pencil_ruler_combinations = pencil_choices * ruler_choices\n    # 2. Choose a pencil and a pen\n    pencil_pen_combinations = pencil_choices * pen_choices\n    # 3. Choose a ruler and a pen\n    ruler_pen_combinations = ruler_choices * pen_choices\n  \n    # Sum the combinations from the three scenarios\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12/25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    blue_marbles = 4\n    yellow_marbles = 3\n    red_marble = 1\n\n    # Worst case scenario would mean picking all yellow marbles (3) which aren't enough to reach 3 of the same color.\n    # Then picking all red marbles (1) plus one blue marble.\n    # At this point, we have picked 5 marbles (3 yellow, 1 red, 1 blue) without 3 of the same color.\n    # With the next marble we pick, we will have 3 of the same color (blue in the worst case).\n    # So we need to pick one more blue marble (total of 6 marbles picked) to ensure we have 3 of one color.\n\n    return yellow_marbles + red_marble + 2  # 1 extra blue to make three of a kind\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    # We are looking for a number that leaves a remainder of 3 when divided by 4,\n    # and leaves a remainder of 1 when divided by 13.\n    # This is a perfect use case for the Chinese Remainder Theorem.\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are (remainder, modulo)\n    congruences = [(3, 4), (1, 13)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Now we need to check if 'ans' is between 100 and 190\n    while ans < 100:\n        ans += 4 * 13  # The LCM of 4 and 13\n\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Given that the sum of Mary and her son's age is 45\n    sum_current_ages = 45\n    # After 5 years, both will be 5 years older\n    sum_future_ages = sum_current_ages + (2 * 5)  # Both Mary and her son age 5 years\n    return sum_future_ages\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # total cost in pence\n    paid_amount = 100    # paid amount in pence (£1 = 100p)\n\n    change = paid_amount - total_cost\n\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sebastian and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n    \n    # Sebastian is 24 years younger than Garrett\n    equation1 = Eq(sebastian, garrett - 24)\n    \n    # In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n    \n    # Return Garrett's current age\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: girls = boys + 65\n    equation1 = Eq(girls, boys + 65)\n\n    # After leaving: boys - (2/5)*boys = girls - (3/7)*girls\n    equation2 = Eq(boys - (2/5)*boys, girls - (3/7)*girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of students remaining\n    remaining_boys = solutions[boys] - (2/5)*solutions[boys]\n    remaining_girls = solutions[girls] - (3/7)*solutions[girls]\n\n    ans = remaining_boys + remaining_girls\n\n    return ans\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    sofa_price = sales_tax_paid / sales_tax_rate\n    return sofa_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    num_days = 7\n    cost_travel_per_person = 150\n    cost_hotel_per_day_per_person = 50\n    cost_spending_money_per_person = 250\n\n    total_travel_cost = cost_travel_per_person * num_people\n    total_hotel_cost = cost_hotel_per_day_per_person * num_days * num_people\n    total_spending_money = cost_spending_money_per_person * num_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    return 98-87+76-65+54-43+32-21+10\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # calculate permutations of the blocks (math, chemistry, physics, biology)\n    block_permutations = factorial(4) # because we have 4 blocks: M, Ch, P, and B\n    # calculate internal permutations of books within their respective subjects\n    math_permutations = factorial(4)\n    chemistry_permutations = factorial(3)\n    physics_permutations = factorial(2)\n    biology_permutations = factorial(1) # which is 1, but for completeness we'll include it\n    # total permutations is the product of block and internal permutations\n    total_permutations = block_permutations * math_permutations * chemistry_permutations * physics_permutations * biology_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(7)\n    vowels_permutations = factorial(3)\n    consonants_permutations = factorial(4)\n    total_vowels_together = vowels_permutations * factorial(5) # Treat the vowels as a single entity\n\n    ans = total_permutations - total_vowels_together\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    height_in_kilometres = height_in_metres / 1000\n    return height_in_kilometres\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene_initial, melvin_initial, david_initial = symbols('eugene_initial melvin_initial david_initial', integer=True)\n    eugene_final = symbols('eugene_final', integer=True)\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(eugene_initial - 2*melvin_initial + eugene_final/2, 46)\n    equation2 = Eq(melvin_initial + 2*melvin_initial - david_initial, 12)\n    equation3 = Eq(david_initial + david_initial - eugene_final/2, 7)\n    equation4 = Eq(eugene_initial + melvin_initial + david_initial, 260)\n    total_final = Eq(eugene_final + 12 + 7, 46 + 12 + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, total_final), (eugene_initial, melvin_initial, david_initial, eugene_final))\n\n    return solutions[eugene_initial]\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # Define the number of questions in each category\n    cat1 = 30\n    cat2 = 40\n    cat3 = 45\n    \n    # Apply the principle of multiplication\n    ans = cat1 * cat2 * cat3\n    \n    return ans\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import isprime, Eq, solve, symbols\n    \n    # Define the symbols\n    a, b, c = symbols('a b c')\n    \n    # Set up the equations according to the problem statement\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b, c))\n    \n    # Extract solutions for a, b, and c\n    a = solutions[a]\n    b = solutions[b]\n    c = solutions[c]\n    \n    # Since a, b, and c are prime, we check the prime condition. We also take into account\n    # that we need to find the right values for a, b, c that satisfy the equations and prime property.\n    for possible_a in range(2, 31+1):\n        possible_b = 31 + a - 26\n        possible_c = 26 - 15  # b = c + 6, so c = b - 6 => c = (31 + a - 26) - 6 => 31 - 26 + a - 6 = a - 1.\n        if isprime(possible_a) and isprime(possible_b) and isprime(possible_c):\n            if possible_a + 31 == possible_b + 26 == possible_c + 20:\n                a = possible_a\n                b = possible_b\n                c = possible_c\n                break\n    \n    # Calculate the product a * b * c\n    product = a * b * c\n    \n    return product\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 13):\n        for b in range(a, 13):\n            c = 12 - a - b\n            if c >= b and 2*b > c and c > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Since the game is about taking matches and the player who takes the last one wins,\n    # it is a zero-sum game and it has an optimal strategy for one of the players.\n    # By analyzing the game, we can see if there's a winning strategy for Eddie, who goes first.\n\n    # The winning strategy revolves around the concept of Nim-Sum, which is the XOR of the\n    # number of matches in each pile. In a winning position, the Nim-Sum is 0.\n    # Thus, Eddie's goal would be to always leave a Nim-Sum of 0 after his turn.\n\n    # Calculate the Nim-Sum of the initial piles:\n    nim_sum = 35 ^ 24\n\n    # If the Nim-Sum is not zero at the start, then the player who goes first (Eddie) has a winning strategy:\n    # He can make a move that results in a Nim-Sum of zero for the second player.\n    \n    if nim_sum == 0:\n        return \"Wei'er has the winning strategy because the nim-sum is initially zero.\"\n    else:\n        # To find out the exact move for the winning strategy, find a move that makes the Nim-Sum 0.\n        for matches_to_take in range(1, 35 + 1):  # Check for pile A\n            if (35 - matches_to_take) ^ 24 == 0:\n                return f\"Eddie has the winning strategy: take {matches_to_take} matches from pile A.\"\n        \n        for matches_to_take in range(1, 24 + 1):  # Check for pile B\n            if 35 ^ (24 - matches_to_take) == 0:\n                return f\"Eddie has the winning strategy: take {matches_to_take} matches from pile B.\"\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # there are 6 people and 8 seats, so 2 seats are always empty\n    # since the table is circular, we fix one person's position to avoid equivalent rotations\n    # there are then 5! ways to arrange the remaining people\n    \n    return factorial(5)\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: equal number of boys and girls\n    initial_condition = Eq(boys, girls)\n\n    # After 12 boys came and 8 girls left\n    after_change = Eq(boys + 12, 2 * (girls - 8))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_change), (boys, girls))\n\n    initial_students = solutions[boys] * 2  # since boys = girls initially\n\n    return initial_students\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([80-78, 76-74, 72-70, 68-66, 64-62, 60-58, 56])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds given in the problem\n    speed1 = 7  # speed for the first 280m\n    speed2 = 5  # speed for the middle 400m\n    speed3 = 8  # speed for the final stage\n\n    # Distances for each stage\n    dist1 = 280\n    dist2 = 400\n    # Since the total race is 800m, the distance for the last stage can be calculated by subtracting the\n    # sum of the first two stages from the total race distance\n    dist3 = 800 - (dist1 + dist2)\n\n    # Time = Distance / Speed\n    time1 = dist1 / speed1\n    time2 = dist2 / speed2\n    time3 = dist3 / speed3\n\n    # Total time is the sum of times for each stage\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 7]\n    perm = permutations(digits)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if primes[i] + primes[j] == 25:\n                return primes[i] * primes[j]\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    import math\n    length_ribbon1 = 15\n    length_ribbon2 = 45\n\n    largest_possible_length = math.gcd(length_ribbon1, length_ribbon2)\n\n    return largest_possible_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hours = 6\n    start_time_minutes = 52\n    end_time_hours = 8\n    end_time_minutes = 24\n\n    total_start_minutes = start_time_hours * 60 + start_time_minutes\n    total_end_minutes = end_time_hours * 60 + end_time_minutes\n\n    time_spent = total_end_minutes - total_start_minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n\n    # She had 36 fewer blueberry cupcakes than vanilla cupcakes\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling cupcakes, Sally had 427 cupcakes left altogether\n    # Sold 1/6 of chocolate: chocolate - chocolate / 6\n    # Sold 2/3 of vanilla: vanilla - vanilla * 2 / 3\n    # Sold 7/9 of blueberry: blueberry - blueberry * 7 / 9\n    equation3 = Eq(chocolate - chocolate / 6 + vanilla - vanilla * 2 / 3 + blueberry - blueberry * 7 / 9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold: chocolate / 6\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n    # The number of spaces between lamp posts is one less than the number of posts\n    num_spaces = num_lamp_posts - 1\n    road_length = num_spaces * distance_between\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    max_peaches = (total_peaches + total_students - 1) // total_students\n\n    return max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n    num_pages = end_page - start_page + 1\n    return num_pages\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Seven consecutive numbers have a constant difference of 1.\n    # Let the first term be x. Then, the sum of these seven consecutive numbers is:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) + (x + 5) + (x + 6)\n    # This can be simplified to: 7x + (1 + 2 + 3 + 4 + 5 + 6) = 7x + 21\n    # We are given that the sum is 140, hence:\n    # 7x + 21 = 140\n    # Solving for x gives us the smallest number in the sequence\n\n    sum_given = 140\n    sum_of_differences = 21\n    total_numbers = 7\n\n    x = (sum_given - sum_of_differences) / total_numbers\n\n    return int(x)\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    _, least_children = solve_congruence(*congruences)\n\n    return least_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45   # cost in pence\n    stamps_cost = 10 * 27       # cost in pence\n    total_cost_pence = post_cards_cost + stamps_cost\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n\n    change = 10 - total_cost_pounds   # subtract from £10 note\n\n    return round(change, 2)           # round to 2 decimal places if necessary\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Total number of ways to arrange 3 people around a table with fixed seats is (3-1)!\n    # This is because the circular arrangement is considered the same when rotated.\n    total_ways = 2\n    \n    # However, one of these arrangements will have Tony sitting opposite Claire\n    # So we subtract that arrangement\n    valid_ways = total_ways - 1\n    \n    # For each valid arrangement, Chantel and Cale can swap seats, so we multiply by 2\n    valid_ways *= 2\n    \n    return valid_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_rate = 180 / 10\n    ryan_rate = 180 / 15\n    more_tables = frank_rate - ryan_rate\n    return more_tables\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of questions Miss Atkinson needed to mark.\n    x = symbols('x')\n    # If she marks 4 questions per minute, she takes x/4 minutes.\n    # If she marks 6 questions per minute, she takes x/6 minutes.\n    # We are given that if she marks 4 questions in a minute, she's 5 minutes late,\n    # and if she marks 6 questions in a minute, she's 5 minutes early.\n    # Let y be the actual number of minutes she had to mark the questions.\n    equation = Eq(x / 4 - (x / 6), 10)\n\n    # Solving the equation for x\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # The smallest possible mass when rounded to 1 decimal place is 7.4\n    # would have to be just smaller than 7.45, because 7.45 would round up to 7.5\n    return 7.35\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        if (i + i + 1 + i + 2) % 37 == 0 and (i + 1 + i + 2 + i + 3) % 60 == 0:\n            return i + 4\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_marks = 79\n    correct_marks = 5\n    wrong_marks = 2\n    total_questions = 20\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_marks - wrong_answers * wrong_marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n    number_of_cakes = total_money_raised / price_per_cake\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3/7) * total_money\n    remainder = total_money - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder\n    left_money = remainder - spent_on_fees\n    return left_money\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    amy_give = amy_candies - candies_each\n\n    return amy_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # There is a gap between chimes, so with 3 chimes, there are 2 gaps.\n    num_gaps_at_3pm = 3 - 1\n    # It takes 6 seconds for 2 gaps, hence one gap takes 3 seconds.\n    gap_seconds = 6 / num_gaps_at_3pm\n    \n    # At 6 pm, for 6 chimes, there are 5 gaps.\n    num_gaps_at_6pm = 6 - 1\n    # Total seconds taken for 5 gaps at 6 pm.\n    total_seconds_at_6pm = num_gaps_at_6pm * gap_seconds\n\n    return total_seconds_at_6pm\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    q_days = 8\n    p_hours = 8\n    q_hours = 10\n\n    # P's work rate per hour\n    p_rate = 1 / (p_days * p_hours) \n    # Q's work rate per hour\n    q_rate = 1 / (q_days * q_hours) \n    \n    # Combined work rate per hour when working 8 hours a day\n    combined_rate_per_hour = p_rate + q_rate \n    combined_rate_per_day = combined_rate_per_hour * 8\n    \n    # Number of days needed if they work together\n    days_needed = 1 / combined_rate_per_day\n    \n    return int(days_needed) if days_needed.is_integer() else int(days_needed) + 1\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_cm = 3.2 * 100\n    difference_in_cm = meters_to_cm - 30\n    return difference_in_cm\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kilogram = 56  # in pence\n    total_kilograms = 5  # kilograms\n    amount_paid = 10 * 100  # convert pounds to pence\n\n    total_cost = cost_per_kilogram * total_kilograms\n    change = amount_paid - total_cost\n\n    return change / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from math import prod\n    from sympy import factorint\n\n    # Get the prime factorization of the number\n    prime_factors = factorint(120)\n    # For each prime factor, add 1 to its exponent and multiply the results\n    factors_count = prod([exponent + 1 for exponent in prime_factors.values()])\n\n    return factors_count\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    from math import sqrt\n    \n    product = 180\n    min_difference = product  # Initialize with a large difference\n    \n    # Check for factors up to square root of the product\n    for i in range(1, int(sqrt(product)) + 1):\n        if product % i == 0:\n            factor = product // i\n            difference = abs(factor - i)\n            if difference < min_difference:\n                min_difference = difference\n                \n    return min_difference\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 15):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define variables\n    luca_speed, max_speed, time_luca, time_max = symbols('luca_speed max_speed time_luca time_max')\n    \n    # Given ratio of speeds\n    equation1 = luca_speed / max_speed - 2 / 3\n    \n    # Luca takes 10 more minutes than Max\n    equation2 = (time_luca - time_max) - 10\n    \n    # Distance is the same, so speed * time should be equal\n    equation3 = luca_speed * time_max - max_speed * (time_luca - 10)\n    \n    # If Luca had walked at double his usual speed\n    equation4 = 2 * luca_speed * (time_max / 2) - luca_speed * time_max\n    \n    # Solve the equations\n    solution = solve((equation1, equation2, equation3, equation4), (luca_speed, max_speed, time_luca, time_max))\n    \n    # Extract and return the time it would take Luca at double his speed\n    return solution[time_max] / 2\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_weight_durian + total_weight_watermelon\n    \n    average_weight = total_weight / total_fruits\n    \n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    actual_score = 71\n    supposed_score = 2 * total_questions\n\n    error_in_score = supposed_score - actual_score\n    \n    # Since 2 marks are awarded for every correct answer and 1 mark deducted for wrong, each wrong answer\n    # loses Tom 3 marks in comparison to a correct answer: +2 for a correct vs. -1 for a wrong.\n    marks_lost_per_wrong = 3\n\n    num_wrong_answers = error_in_score // marks_lost_per_wrong\n \n    return num_wrong_answers\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    difference = 1000000 - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let the original number of pens be x and pencils be x as well.\n    # She gives away 5 pencils, so pencils left are x - 5.\n    # She now has twice as many pens as pencils so pens are 2 * (x - 5).\n    # But the number of pens is still x, so we can set up the equation:\n    # x = 2 * (x - 5)\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(x, 2 * (x - 5))\n\n    original_pens = solve(equation, x)[0]\n\n    # She then buys another 18 pens, so we add 18 to the original number of pens.\n    final_pens = original_pens + 18\n\n    return final_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 6.5  # in miles per hour\n    \n    # Calculate the distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 4.5  # in miles per hour\n    \n    # Calculate the distance covered while walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance covered during the exercise\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    cards_to_draw = 13 * 3 + 1  # Draw all of 3 patterns plus 1 card\n    return cards_to_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def count_digit_3_in_number(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 3:\n            count += 1\n        n //= 10\n    return count\n\ndef solution():\n    total_count = 0\n    for page in range(1, 319):\n        total_count += count_digit_3_in_number(page)\n    return total_count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    num_piles = 10\n    \n    books_per_pile = total_books // num_piles\n    \n    return books_per_pile\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    length_per_piece = 40\n\n    num_pieces = remaining_length // length_per_piece\n\n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 0.1\n    proportion_left_handed = 0.25\n\n    total_left_handed = left_handed_tennis_players / proportion_left_handed_tennis\n    total_students = total_left_handed / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    butter_for_100_cookies = 100 / cookies_per_gram\n    return butter_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = 3  # We have 3 different digits to choose from: 6, 7, 8\n    places = 3  # A three-digit number has 3 places to fill each with 6, 7, or 8\n    # Each place can be filled with 3 options (6, 7, or 8) and they can repeat.\n    ans = digits ** places\n    return ans\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters per week\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    # Initialize counters for the number of zeros and the current number being written\n    zero_count = 0\n    number = 1\n\n    # Function to count zeros in a string\n    def count_zeros(s):\n        return s.count('0')\n\n    # Loop until we find the 100th zero\n    while zero_count < 100:\n        zero_count += count_zeros(str(number))\n        if zero_count < 100:\n            number += 1\n\n    return number\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*(2*x - 2), 30 - 3*x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    distance_first_part = 180 * 6\n    distance_second_part = 120 * 8\n    total_distance = distance_first_part + distance_second_part\n    return total_distance\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = total_cars * 5 / 12\n    blue_cars = total_cars * 20 / 100\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let's denote the first number of the consecutive whole numbers as x.\n    # Since they are consecutive, the other seven will be x+1, x+2, ..., x+7.\n    # So, the sum will be x + (x+1) + (x+2) + ... + (x+7) = 2012.\n    # This implies: 8x + (1+2+...+7) = 8x + 28 = 2012.\n    # We can now solve for x and then calculate the largest number, which is x+7.\n\n    # Sum of a sequence: 1+2+...+7 is the sum of the first 7 numbers.\n    sum_of_sequence = sum(range(1, 8))\n\n    # Now we solve 8x + sum_of_sequence = 2012 for x:\n    x = (2012 - sum_of_sequence) // 8\n\n    # Largest number:\n    largest_number = x + 7\n\n    return largest_number\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # Adding 1 for Elias himself\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    together_rate = sachin_rate + peter_rate\n    \n    time_together = 1 / together_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    result = 24.4 * 1000\n    return result\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in class A and B\n    A, B = symbols('A B', integer=True)\n\n    # Given conditions\n    equation1 = Eq(A, 5/7 * B)  # A is 5/7 of B\n    equation2 = Eq(A + 3, 4/5 * (B - 3))  # A+3 is 4/5 of B-3\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # A is the number of students in class A currently\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    girls = 17\n    # Let the side of the smaller square be x.\n    # The larger square, after including the girls, will have a side of x + 1.\n    # The total number of people in the new square is (x + 1)^2, which is the boys plus 17 girls.\n    # Therefore, the number of boys must be a perfect square, so we can set up the equation:\n    # x^2 + (2x + 1) = (x + 1)^2 = x^2 + 17\n\n    # Solving for x gives us:\n    # 2x + 1 = 17\n    # 2x = 16\n    # x = 8\n\n    # The number of boys is the smaller square array of boys (x^2):\n    num_boys = 8 ** 2  # x was found to be 8\n\n    return num_boys\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let the number of bottles Faye has at first be x.\n    # She swaps 5 times, each time reducing the number of bottles by 3 and increasing by 1 (net change -2 bottles).\n    # After 5 swaps, she is expected to have 4 bottles. So 5 swaps would use up (x - 5*2 = x - 10) bottles.\n    # However, she has 1 more bottle than expected, so she has (4 + 1) bottles after 5 swaps.\n    # Therefore, initially she had 4 + 1 + 5*2 = x bottles.\n    # Solve for x.\n    x = 4 + 1 + 5*2\n    return x\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    distance, speed = symbols('distance speed')\n    \n    # Equation for travelling at original speed\n    original_time = 6  # 7 PM - 1 PM\n    eq_original = Eq(distance / speed, original_time)\n    \n    # Equation for travelling at increased speed to save one hour\n    new_time = 5  # one hour earlier\n    eq_new = Eq(distance / (speed + 2), new_time)\n    \n    # Solve the equations\n    solutions = solve((eq_original, eq_new), (distance, speed))\n    \n    # Get the distance\n    return solutions[distance]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_water_litres = 40\n    flow_rate_ml_per_second = 125\n    total_water_ml = total_water_litres * 1000\n    time_seconds = total_water_ml / flow_rate_ml_per_second\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    digits = 0\n    pages = 0\n    \n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n        \n    return pages - 1 if digits > 237 else pages\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    correct_total = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    difference_in_savings = incorrect_day_savings - correct_day_savings\n    difference_in_averages = incorrect_total - correct_total\n\n    days = difference_in_savings / difference_in_averages\n\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Since it takes 12 minutes to cut a rope into 4 pieces, each piece requires 3 cuts\n    # The time for each cut is therefore 12 minutes / 3 cuts = 4 minutes per cut\n\n    # To cut the rope into 12 pieces, he needs 11 cuts (since the first piece doesn't require a cut)\n    # Time needed for 11 cuts is then 11 cuts * 4 minutes per cut\n    time_for_11_cuts = 11 * 4\n    \n    return time_for_11_cuts\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a_ninth, a_fifteenth, a_twentieth, a_twelfth, d = symbols('a_ninth a_fifteenth a_twentieth a_twelfth d')\n\n    # Define the equations based on the properties of arithmetic progression\n    # a_ninth = a1 + 8d\n    # a_fifteenth = a1 + 14d\n    # The 9th term is 18 more than the 15th term.\n    equation1 = Eq(a_ninth - a_fifteenth, 18)\n\n    # a_twentieth = a1 + 19d\n    # a_twelfth = a1 + 11d\n    # The sum of the 20th and 12th terms is 88.\n    equation2 = Eq(a_twentieth + a_twelfth, 88)\n\n    # 9th term can be written in terms of the 15th term and difference\n    a_ninth = a_fifteenth + 18\n\n    # 20th term can be written in terms of the 12th term and difference\n    a_twentieth = a_twelfth + 8*d\n\n    # Substitute a_ninth and a_twentieth in equation2\n    equation2 = equation2.subs({a_twentieth: a_twelfth + 8*d, a_twelfth: a_ninth - 7*d})\n\n    # Substitute a_ninth in terms of a_fifteenth + 18 into equation2\n    equation2 = equation2.subs(a_ninth, a_fifteenth + 18)\n\n    # Now equation2 only contains a_fifteenth and d, solve it to find d\n    solutions = solve(equation2, (a_fifteenth, d))\n\n    # Extract the solution for d\n    d = solutions[d]\n\n    # Now find the first term (a1) using the 15th term\n    a1 = a_fifteenth - 14 * d\n\n    # Calculate the 32nd term\n    a_thirtysecond = a1 + 31 * d\n\n    # Substitute a_fifteenth in terms of d and 18 (from equation1 which we simplified earlier)\n    a_thirtysecond = a_thirtysecond.subs(a_fifteenth, d + 18)\n\n    # Simplify to find the solution\n    ans = a_thirtysecond.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    difference = 3  # The common difference between terms\n\n    # Calculate the first term using the arithmetic sequence formula:\n    # nth_term = first_term + (n - 1) * difference\n    first_term = term_value - (term_position - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    lily, marry, carol = symbols('lily marry carol')\n    equation = Eq(4 * lily * marry * carol, 2240)\n    age_relations = (carol - marry - 2, marry - lily - 1)\n\n    ages = solve((equation,) + age_relations, (lily, marry, carol))\n    return ages[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Chewy's initial equation with a mistake\n    chewy_equation = ((8 * x + 8) / 2) - 3 * (x + 6)\n\n    # Simplify the equation properly\n    simplified_equation = chewy_equation.simplify()\n\n    return simplified_equation\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22+3*(6-2*x), 8+10*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flower_fraction = 2 / 5\n    purple_flower_fraction = 1 / 8\n\n    red_flowers = total_flowers * red_flower_fraction\n    purple_flowers = total_flowers * purple_flower_fraction\n\n    return int(red_flowers), int(purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        smallest_number = 0\n    else:\n        smallest_number = remainder\n    \n    return smallest_number\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05668821  # 1 liter is approximately 1.05668821 quarts\n    cup_capacity_quarts = 0.5\n    number_of_cups = liters_to_quarts / cup_capacity_quarts\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # In the worst case scenario, Jeremy might pick 2 red, 2 blue, and 2 white cars,\n    # which would be 6 toys without having three of the same color.\n    # With the next pick, no matter what, he will have 3 of the same color.\n    # This is because if he picks a red, blue, or white, it will be the third of that color.\n    \n    worst_case_picks = (2 * 3) + 1  # 2 each from red, blue, white, plus 1 more pick\n    return worst_case_picks \n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # When splitting n identical items into k non-empty piles, the number of ways is the binomial coefficient C(n-1, k-1)\n    # In our case n = 10 marbles and k = 2 piles.\n    # We need to calculate C(10 - 1, 2 - 1) which is C(9, 1)\n\n    from math import comb\n    ans = comb(9, 1)\n    return ans\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert all lengths to metres\n    wood1 = 85 / 100  # 85 cm to m\n    wood2 = 2         # 2 m is already in metres\n    wood3 = 147 / 100 # 147 cm to m\n\n    # Add the lengths together\n    total_length_m = wood1 + wood2 + wood3\n\n    # Return the total length in metres\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fraction = 34 / 100\n    decimal_number = whole_number + fraction\n    return decimal_number\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):\n        legs_spiders = spiders * 8\n        remaining_legs = 64 - legs_spiders\n        if remaining_legs % 6 == 0:\n            ants = remaining_legs // 6\n            if ants > max_ants:\n                max_ants = ants\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    vivian, justin = symbols('vivian justin')\n    \n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    remaining_stamps = 34\n    stamps_used_malaysia = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = remaining_stamps + stamps_used_malaysia + stamps_given - stamps_bought\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000  # 1 litre is 1000 millilitres\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number\n    x = symbols('x')\n\n    # Apply the operations in reverse order\n    # Start with the final answer, which is 6\n    final_answer = 6\n    \n    # Last operation was division by 6, so multiply by 6\n    step3 = final_answer * 6\n    \n    # Before that, 6 was added, so subtract 6\n    step2 = step3 - 6\n    \n    # Then, the result was multiplied by 6, so divide by 6\n    step1 = step2 / 6\n    \n    # Finally, 6 was subtracted from the number, so add 6\n    original_number = step1 + 6\n    \n    # Create an equation to represent this process\n    equation = Eq(original_number, x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let x be the height from which the ball was dropped initially.\n    # After the first bounce, it reaches a height of 3 * x.\n    # After the second bounce, it reaches a height of 3 * 3 * x = 9 * x.\n    # After the third bounce, it reaches half the previous height: 4.5 * x.\n    # We're given that after the fourth bounce, it reaches a height of 36 m,\n    # which is half the height of the previous bounce: 4.5 * x / 2 = 36.\n    # Therefore, we have x = (36 * 2) / 4.5\n    \n    x = (36 * 2) / 4.5\n    return x\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two original numbers\n    x, y = symbols('x y')\n\n    # The sum of the two numbers is 11.63    \n    equation1 = Eq(x + y, 11.63)\n\n    # The incorrect sum when the decimal of x is shifted is 5.87\n    # The shifted x is one-tenth of the actual x\n    equation2 = Eq((x / 10) + y, 5.87)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate one hundred times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent_amount = initial_amount / 2\n    remaining_amount = initial_amount - spent_amount\n\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):\n        num_str = '8' + ''.join(perm)\n        num = int(num_str)\n        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    num_songs = 12\n    cd_price_pounds = 8.99\n    \n    total_price_pence = num_songs * single_song_price_pence\n    cd_price_pence = cd_price_pounds * 100\n\n    savings = total_price_pence - cd_price_pence\n    \n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = [int(a+b) for a in digits for b in digits if a != b]\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = i\n        reversed_num = int(str(i)[::-1])\n        if original > reversed_num:\n            results.add(original - reversed_num)\n        else:\n            results.add(reversed_num - original)\n\n    if len(results) == 1:\n        ans = True, list(results)[0]\n    else:\n        ans = False, results\n\n    return ans\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(0, 10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = [i for i in range(10)]  # All digits from 0 to 9\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n\n    # Sort the digits to get the smallest and largest numbers possible\n    digits.sort()\n\n    # Form the smallest number with the smallest digits at the front, \n    # but the second smallest number should start with the smallest non-zero digit\n    smallest = int(''.join(map(str, digits[1:5] + digits[:1])))\n    \n    # Form the largest number with the largest digits at the front\n    largest = int(''.join(map(str, digits[::-1])))\n    \n    # The difference between the smallest and largest 5-digit numbers formed\n    min_diff = largest - smallest\n\n    return min_diff\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the stickers\n    sam, peter = symbols('sam peter')\n\n    # Initial condition: Sam had 40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n\n    # Peter gives 25% of his stickers to Sam\n    peter_gives = 0.25 * (peter + sam_gives)\n\n    # Final condition: After exchanges, Sam had 96 stickers more than Peter\n    final_condition = Eq(sam - sam_gives + peter_gives, (peter + sam_gives - peter_gives) + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    # Get the number of stickers Peter had initially\n    return solutions[peter]\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time taken to pass the tree in seconds\n    length = 450  # length of the train in meters\n\n    # Since the width of the tree is negligible, the speed of the train\n    # is the length of the train divided by the time taken to pass the tree.\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    ali_front = 14\n    bala_behind = 10\n    ali_bala = 1 # Bala is directly behind Ali, so we count them as one position\n\n    total_people = ali_front + ali_bala + bala_behind\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    # There are 4 friends and each one sends a card to every other friend\n    friends = 4\n    # Each friend sends out 3 cards (since they don't send a card to themselves)\n    cards_sent_by_each = friends - 1\n    # Calculate total number of cards sent\n    total_cards_sent = friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    ans = sum(str(i).count('9') for i in range(1, 829))\n    return ans\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    # Find the least common multiple of the numbers 1 through 6\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total = 0\n    for i in range(1, 102):\n        total += i * (i + 1)\n    return total - 101 * 102\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs = 4\n    \n    total_water_added = jug_capacity * number_of_jugs\n    total_water = initial_water + total_water_added\n    \n    return total_water\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    days_1 = 3\n    cookies_per_day_1 = 9\n    days_2 = 2\n    cookies_per_day_2 = 15\n    days_3 = 2\n    cookies_per_day_3 = 10\n    \n    total_days = days_1 + days_2 + days_3\n    total_cookies = (days_1 * cookies_per_day_1) + (days_2 * cookies_per_day_2) + (days_3 * cookies_per_day_3)\n    \n    average_cookies_per_day = total_cookies / total_days\n    \n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let d be the number of days David takes off\n    d = symbols('d')\n\n    # Create an equation based on work done\n    # Candy works for 12 days (1/20 per day), David works for (12 - d) days (1/25 per day)\n    equation = Eq((1/20) * 12 + (1/25) * (12 - d), 1)\n\n    # Solve the equation for d\n    days_off = solve(equation, d)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude and opposite in direction\n    # to the force of gravity acting on the book. This is an application of Newton's third law of motion.\n    # Since the mass of the book is given as 20N, which is the weight of the book (force due to gravity),\n    # the force exerted by the table (normal force) must be equal to 20N to support the book in place.\n    \n    force_exerted_by_table = 20  # in Newtons\n\n    return force_exerted_by_table\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for amount collected by each friend\n    chloe, david, emily = symbols('chloe david emily')\n\n    # We already know how much Alan and Bilal raised\n    alan = 74\n    bilal = 86\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)  # Chloe collects twice as much as David\n    equation2 = Eq(david, 3 * emily)  # David raises three times as much as Emily\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)  # Sum of all collections equals £400\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Set variable T, which we need to find\n    T = symbols('T')\n\n    # First $50,000 taxed at 5%\n    tax_first_50000 = 0.05 * 50000\n\n    # The rest (140000-50000 = 90000) is taxed at (8+T)%\n    remaining_income = 140000 - 50000\n    tax_remaining_income = remaining_income * (0.08 + T/100)\n\n    # Total tax is the sum of both taxes\n    total_tax = tax_first_50000 + tax_remaining_income\n\n    # The tax paid was $15,100\n    tax_paid = 15100\n\n    # Set an equation for total tax equal to tax paid\n    equation = Eq(total_tax, tax_paid)\n    \n    # Solve for T\n    solution = solve(equation, T)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guys_age = y - 3\n    return guys_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    apples = 4/5 * total_fruits\n    pears = total_fruits - apples\n    \n    remaining_fruits = 1/4 * total_fruits\n    remaining_apples = 1/8 * apples\n    remaining_pears = 30\n\n    equation1 = Eq(remaining_apples + remaining_pears, remaining_fruits)\n\n    solutions = solve((equation1), (total_fruits))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum count of balls for the two other types before getting 6 of the same type\n    max_others = 5 + 5  # 5 basketballs and 5 volleyballs\n    \n    # Minimum count to guarantee 6 of the same type (worst case)\n    min_count_to_get_same_type = max_others + 1  # Plus one to guarantee the sixth ball of the same type\n    \n    return min_count_to_get_same_type\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0   # height in meters\n\n    # Potential energy at the top (PE_top) = Kinetic energy at the bottom (KE_bottom)\n    # m*g*h = 1/2*m*v^2\n    # 2*g*h = v^2\n    # Solve for v\n    v = sqrt(2 * g * h)\n\n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes = 6\n    number_of_desired_cakes = 10\n\n    time_per_cake = time_for_6_cakes / number_of_cakes\n    total_time_for_10_cakes = time_per_cake * number_of_desired_cakes\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip = bill * 0.15\n    tax = bill * 0.08\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # We start by checking numbers with a digit sum of 20\n    # and divisible by 11, beginning from the smallest possible\n    for number in range(10, 10000):  # upper bound arbitrarily chosen\n        if sum(map(int, str(number))) == 20:\n            if number % 11 == 0:\n                return number\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    vi = 5    # initial velocity (m/s)\n    h = 30    # height (m)\n    \n    # Break initial velocity into horizontal and vertical components\n    vi_x = vi * math.cos(math.radians(45))  # horizontal component\n    vi_y = vi * math.sin(math.radians(45))  # vertical component\n    \n    # Using kinematic equation for vertical motion: vf_y^2 = vi_y^2 + 2*g*h\n    # As the arrow hits the ground, its final vertical velocity vf_y is:\n    vf_y = math.sqrt(vi_y**2 + 2 * g * h)\n    \n    # The final speed of the arrow is the magnitude of the final horizontal and vertical velocity vectors\n    vf = math.sqrt(vi_x**2 + vf_y**2)\n    \n    return vf\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n    \n    total_combinations = food_options * drink_options * dessert_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(10):\n            if A == S:\n                continue\n            for M in range(10):\n                if M in [S, A]:\n                    continue\n                for O in range(10):\n                    if O in [S, A, M]:\n                        continue\n                    for G in range(10):\n                        if G in [S, A, M, O]:\n                            continue\n                        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n                        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n                        if SASMO * 4 == OGAMS:\n                            return SASMO\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_from_A_to_B = equal_volume - 28\n\n    return transfer_from_A_to_B\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(elephants, 5*cows / 2)\n    equation2 = Eq(cows, 3*horses / 4)\n    equation3 = Eq(horses, 5*pigs / 3)\n    \n    # Using the equations, express elephants in terms of pigs\n    equations = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n    \n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_per_elephant = 1 / equations[pigs]\n    pigs_for_8_elephants = 8 * pigs_per_elephant\n    \n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    # Define variable for the interest rate\n    r = symbols('r')\n\n    # The compound interest formula: A = P(1 + r)^n\n    # where A is amount, P is the principal, r is the annual interest rate,\n    # and n is the number of years.\n    equation = Eq(principal * (1 + r)**years, amount)\n\n    # Solve for r\n    interest_rate = solve(equation, r)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n    total_cases_mangoes = 24\n    total_cases_lychees = 20\n    total_cost = 1160\n\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(total_cases_mangoes * price_mangoes + total_cases_lychees * price_lychees, total_cost)\n\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.6 * (2/5) * 75\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import factorial\n\ndef solution():\n    # Total oranges to be divided\n    total_oranges = 13\n    # Kids to divide the oranges amongst, minus 1 because last kid will get the rest\n    kids = 3 - 1\n\n    # Number of ways to divide oranges is given by combinations with repetition\n    # Formula = C(n + k - 1, k) => C(total_oranges - 1, kids)\n    ways = factorial(total_oranges - 1) // (factorial(kids) * factorial((total_oranges - 1) - kids))\n    return ways\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 0.18\n    tax_percent = 0.10\n    \n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_five_boxes = 350\n    weight_per_box = total_weight_five_boxes / 5\n    total_weight_three_boxes = weight_per_box * 3\n    return total_weight_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    comics_factorial = factorial(4)  # Permutations of comics among themselves.\n    fictions_factorial = factorial(6)  # Permutations of fictions among themselves.\n    together_factorial = factorial(2)  # Two groups, can be ordered in 2! ways.\n\n    total_permutations = comics_factorial * fictions_factorial * together_factorial\n    return total_permutations\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7/10)\n    return ans\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef comb(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef solution():\n    # The maximum number of slots between dancing performances is 5 (D_S_D_S_D_S_D_S_D)\n    # Since there are 6 singing performances, we want to distribute these into these 5 slots\n    \n    # Total number of ways to arrange 4 Ds in 5 slots (with at least one S between them)\n    ways_to_place_D = comb(5, 4)\n\n    # The remaining singing performances can be arranged in any order\n    ways_to_arrange_S = factorial(6)\n\n    # Final answer will be the product of the ways to place D and the ways to arrange S\n    ans = ways_to_place_D * ways_to_arrange_S\n\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # let x be the number of questions Dora answered correctly\n    # let y be the number of questions Justin answered correctly\n    # since they both answered 10 questions and the score for a correct answer is 10 points\n    # and for each wrong answer, they lose 5 points, we can set up the following equations:\n    # 10x - 5(10 - x) + 10y - 5(10 - y) = 155, because the total score is 155\n    # y - x = 15 / 10, because Justin got 15 more points than Dora and each correct answer is 10 points\n\n    # Simplifying the system of equations:\n    # 15x + 15y = 155 + (5 * 10) * 2, we add 5 points for each question not correctly answered by both (x + y)\n    # y = x + 15 / 10\n\n    # Solve the system of equations\n    for x in range(11):  # Dora can answer correctly at most 10 questions\n        y = x + 1.5  # Convert 15 point difference to the number of questions\n        if 15 * x + 15 * y == 155 + (5 * 10) * 2:\n            return x\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Class A's groups average\n    A_avg = 12\n    # Class A and B's combined groups average\n    AB_avg = 8\n    \n    # Total candies sold by Class A\n    total_A = A_avg * 3\n    \n    # Since average for both Class A and B is 8, and there are 7 groups in total (3 from A and 4 from B)\n    # we can calculate the total candies sold by both classes\n    total_AB = AB_avg * (3 + 4)\n    \n    # The total number of candies sold by Class B is then\n    total_B = total_AB - total_A\n    \n    # The average candies sold by each group in Class B\n    B_avg = total_B / 4\n    \n    return B_avg\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Nancy takes to finish the job by herself\n    # Let y be the time Lee takes to finish the job by herself\n    x, y = symbols('x y')\n\n    # When they work together, they finish in 10 hours\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # When Lee types for 6 hours and Nancy types for 20 hours, they finish the job\n    equation2 = Eq(6/y + 20/x, 1)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the time it takes Nancy to finish the job by herself\n    return solutions[x]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    # Ratio of coffee to milk\n    coffee_ratio = 3\n    milk_ratio = 8\n    # Total ratio units\n    total_ratio_units = coffee_ratio + milk_ratio\n    \n    # Amount of coffee used\n    coffee_used = 6  # in litres\n    \n    # Calculate the total amount of Latte based on the amount of coffee used\n    total_latte = coffee_used * (total_ratio_units / coffee_ratio)\n    \n    return total_latte\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let the original number of passengers be x\n    remaining_after_first_stop = 3/5  # Since 2/5 got off\n    remaining_after_second_stop = 2/3  # Since 1/3 got off\n\n    # After two stops, there are 22 passengers left which is equal to\n    # (3/5) * (2/3) * x\n    # We set the equation to find x\n    passengers_left = 22\n    x = passengers_left / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return int(x)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    num_flavours = 7\n    num_doughnuts = 2\n    ans = comb(num_flavours, num_doughnuts)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_to_milk_to_dark = Eq(white / milk, 3 / 7)\n    ratio_milk_to_dark = Eq(milk / dark, 7 / 5)\n    chocolates_difference = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_to_milk_to_dark, ratio_milk_to_dark, chocolates_difference), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    students = Symbol('students')\n\n    badminton = students / 4 + 3\n    table_tennis = (students - badminton) / 3 - 3\n    football = 25\n\n    equation = Eq(badminton + table_tennis + football, students)\n\n    ans = solve(equation, students)\n\n    return ans[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to be added.\n    # Probability of getting a green ball after adding x red balls is (10 / (5 + x + 10)).\n    # We set this probability equal to 1/3 and solve for x.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 / (5 + x + 10), 1/3)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    ans = (large_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    # We are looking for the least common multiple (LCM) of 3 and 7 that is a two-digit number.\n    # Since 3 and 7 are coprime, their LCM is simply their product.\n    lcm = 3 * 7\n    \n    # We need to find the smallest two-digit number that is a multiple of the LCM.\n    # Since the LCM itself is a two-digit number (21), it is the answer.\n    return lcm\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    number_of_pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction_of_total = 1 / 4\n    total_money = spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    ans = 12 * 3 * 50\n    return ans\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit for each power independently using mod 10\n    ones_digit_32_33 = pow(32, 33, 10)\n    ones_digit_22_29 = pow(22, 29, 10)\n\n    # Subtract the ones digits and take the result mod 10 to ensure it's a single digit\n    ones_digit_difference = (ones_digit_32_33 - ones_digit_22_29) % 10\n\n    return ones_digit_difference\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_6s(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n    \n    pages = 1\n    while True:\n        if count_6s(pages) >= 18:\n            break\n        pages += 1\n\n    # Since we may break as soon as we hit 18 or more sixes, we ensure we don't exceed the count\n    if count_6s(pages) > 18:\n        pages -= 1\n\n    return pages\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the number of stickers Peter had initially\n    p = symbols('p')\n    # Sam had 40 stickers more than Peter initially\n    s = p + 40\n    # Sam gave 20% of his stickers to Peter\n    s = s - 0.20 * s\n    p = p + 0.20 * (p + 40)\n    # Peter gave 25% of his stickers to Sam\n    p = p - 0.25 * p\n    s = s + 0.25 * p\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(s - p, 96)\n\n    # Solve the equation for p\n    solution = solve(equation, p)\n    return solution[0]\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Loop through each possible value for the first die\n    for x1 in range(1, 7):\n        # Loop through each possible value for the second die that is not the value of the first die\n        for x2 in range(1, 7):\n            # Loop through each possible value for the third die that is not the value of the first or second die\n            for x3 in range(1, 7):\n                # Check if the sum is 12 and all dice have different numbers\n                if x1 != x2 and x2 != x3 and x1 != x3 and x1 + x2 + x3 == 12:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    return num_fruits * num_vegetables\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # given ratio 4:9 is equivalent to ? : 81\n    # we can set up the proportion as 4/9 = ?/81\n    # cross multiply to find the missing number '?'\n    missing_number = (4 * 81) / 9\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n\n    # height gained after every 2 jumps\n    net_gain_per_period = (jump_up * jumps_per_period) - slide_down\n\n    # calculating periods required to reach just below or at the top minus last jump\n    periods_required = (total_height - jump_up) // net_gain_per_period\n\n    # total jumps after full periods\n    total_jumps = periods_required * jumps_per_period\n\n    # remaining height to be covered\n    remaining_height = (total_height - jump_up) % net_gain_per_period\n\n    # if remaining height is greater than 0, we need an additional single jump to reach or cross the top\n    if remaining_height > 0:\n        total_jumps += 1\n\n    # the last jump to reach the top\n    total_jumps += 1\n\n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    total = 0\n    for i in range(1, 2013):\n        total += (2*i)**3 / (i * (2*i) * (2*i + 1))\n    total += 1 / 4026\n    return total\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i ** 0.5 % 1 == 0 and (i + 1) % 5 == 0 and i % 16 == 0:\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    common_difference = 21 - 15\n    current_term = 39\n    next_term = current_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_answer_score = 4\n    wrong_or_unanswered_score = -2\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of wrong/unanswered answers\n    # We have the equation 4x - 2(total_questions - x) = 152\n    # which simplifies to:\n    # 4x - 160 + 2x = 152\n    # 6x = 312\n    # x = 312 / 6\n    correct_answers = (152 + 2 * total_questions) / (correct_answer_score + abs(wrong_or_unanswered_score))\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To divide 16 sausages among 24 people,\n    # each person should get 16/24 = 2/3 of a sausage.\n    # Therefore, we need to make cuts in such a way\n    # that one sausage can be shared among three people.\n    # This means we need to make 2 cuts per sausage.\n    # Since there are 16 sausages, the least number of cuts required is:\n    sausages = 16\n    cuts_per_sausage = 2\n    total_cuts = sausages * cuts_per_sausage\n    return total_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"RAINBOW\"))\n    vowels = \"AI\"\n    vowels_permutations = factorial(len(vowels))\n    \n    consonants = \"RNBW\"\n    consonant_permutations = factorial(len(consonants))\n    \n    total_vowel_permutations = factorial(len(consonants) + 1)\n    total_vowels_together = vowels_permutations * total_vowel_permutations\n    \n    ans = total_permutations - total_vowels_together\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendys_age_in_5_years = solutions[wendy] + 5\n    \n    return wendys_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original amount of water in Container B be x\n    # Therefore, the original amount of water in Container A is x + 350\n    a, b = symbols('a b')\n\n    # After 500 mL is spilled from A, we have the equation:\n    # b = 2 * (a - 500)\n    # The original relationship between A and B was:\n    # a = b + 350\n\n    equation1 = Eq(b, 2 * (a - 500))\n    equation2 = Eq(a, b + 350)\n\n    # Now we solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n    gcd1 = gcd(diff1, diff2)\n    ans = gcd(gcd1, diff3)\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let x be the number of team members in the gymnastics team\n    x = symbols('x')\n\n    # Lovelle said 3 sentences to each of the 5 other team members she spoke to\n    # Therefore, Lovelle spoke to 5 team members\n    lovelle_spoke_to = 5\n\n    # 12 team members did not speak to Lovelle\n    not_spoken_to_lovelle = 12\n\n    # The total number of team members is the sum of those who did and did not speak to Lovelle\n    # plus Lovelle herself\n    total_team_members = Eq(lovelle_spoke_to + not_spoken_to_lovelle + 1, x)\n\n    # Solving the equation for the number of team members\n    num_team_members = solve(total_team_members, x)\n\n    return num_team_members[0]\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # initialize the variable to store the number of digits\n    total_digits = 0\n\n    # count digits for pages 1 through 9, which use one digit each\n    total_digits += 9\n    \n    # count digits for pages 10 through 99, which use two digits each\n    if 325 >= 10:\n        total_digits += 2 * (min(325, 99) - 9)\n        \n    # count digits for pages 100 through 325, which use three digits each\n    if 325 >= 100:\n        total_digits += 3 * (325 - 99)\n    \n    return total_digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Count the total permutations of STATISTIC without restriction\n    total_permutations = factorial(len(\"STATISTIC\")) // (factorial(3) * factorial(3) * factorial(2))\n\n    # Count the permutations where Ts are together\n    # Treat the three Ts as one entity for this calculation\n    permutations_with_T_together = factorial(len(\"SATISTIC\") + 1) // (factorial(3) * factorial(2))\n\n    # Subtract permutations with Ts together from the total permutations\n    ans = total_permutations - permutations_with_T_together\n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_gums in range(1, 1000):  # Assuming a reasonable upper limit\n        remaining_after_secret = total_gums - 2\n        shared_gums = remaining_after_secret // 3\n        if remaining_after_secret % 3 == 0:\n            remaining_after_sharing = remaining_after_secret - shared_gums\n            if remaining_after_sharing % 4 == 0:\n                return total_gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50\n    time_needed = total_pieces / average_rate\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) // 8\n    return result\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern = [2945, 3445, 3245, 3745]\n    differences = [pattern[i+1] - pattern[i] for i in range(len(pattern) - 1)]\n    # observing the differences, they follow +500, -200, +500\n    # thus we assume the next difference is -200\n    missing_number = pattern[-1] - 200\n    return missing_number\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # If each chest can only be opened by 1 unique key and each key can only be used once,\n    # then the maximum number of attempts is when the explorer always tries the wrong keys before finding the right one.\n    # For the first chest, they could try all 9 keys (maximum 8 wrong attempts before the right one).\n    # For the second chest, they could try the remaining 8 keys (maximum 7 wrong attempts).\n    # For the third chest, they could try the remaining 7 keys (maximum 6 wrong attempts).\n    # For the fourth chest, they would have to try the remaining 6 keys (maximum 5 wrong attempts).\n    max_attempts = (8 + 7 + 6 + 5)\n    return max_attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    total = 0\n    for i in range(1, 26, 2):\n        total += i ** 2\n    return total\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    first_hour = symbols('first_hour')\n    second_hour = Eq(first_hour + 26, 40 - first_hour)\n    mushrooms_second_hour = solve(second_hour, first_hour)[0] - 26\n    \n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # There are 11 coins, and the total length will be the diameter of 10 coins\n    # plus the radius (half the diameter) of the first and last coin,\n    # since they contribute only half to the length of the row when touching.\n    diameter = 1.85\n    radius = diameter / 2\n    total_length = diameter * (11 - 1) + radius * 2\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    num_terms = 14\n    first_term = 5\n    common_difference = 8 - 5\n    last_term = first_term + (num_terms - 1) * common_difference\n    \n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number_to_round = 5345\n    nearest_hundred = 100\n\n    ans = round(number_to_round / nearest_hundred) * nearest_hundred\n\n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator_1 = 3\n    denominator_1 = 12\n    denominator_2 = 20\n\n    multiplier = denominator_2 / denominator_1\n    numerator_2 = multiplier * numerator_1\n    \n    return int(numerator_2)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 / (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    # Subtract 1 since circular permutations consider one position as fixed\n    num_people = 8 - 1\n    # Calculate the factorial for the number of ways to arrange the remaining people\n    arrangements = factorial(num_people)\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    \n    return night_temp - morning_temp\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    # Let x be the initial number of ants.\n    # After sweeping 3/4 of the ants, (1 - 3/4)x = 1/4 * x ants remain.\n    # After 2/5 of the remaining ants ran out, (1 - 2/5)(1/4) * x = 3/5 * 1/4 * x ants remain.\n    # 185 ants came into the kitchen, so the final amount of ants is (3/5 * 1/4 * x) + 185.\n    # The end number of ants is twice the initial number, so we have the equation:\n    # 2 * x = (3/5 * 1/4 * x) + 185\n    # Solve for x.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x, (3/5) * (1/4) * x + 185)\n\n    # Get the solution for the equation\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n\n    total_cost = book_cost * (books_first_day + books_second_day)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    result = 6342 // 7\n    return result\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the first term of the arithmetic progression as a, and the common difference as d.\n    # Then the terms of the arithmetic progression are: a, a+d, a+2d, a+3d, a+4d, a+5d, a+6d, a+7d.\n    a, d = symbols('a d')\n    \n    # The sum of the first four terms is: a + (a+d) + (a+2d) + (a+3d)\n    sum_first_four = 4*a + 6*d\n    \n    # The sum of the last four terms is: (a+4d) + (a+5d) + (a+6d) + (a+7d)\n    sum_last_four = 4*a + 22*d\n    \n    # According to the problem statement, the sum of the last four terms is $32 more than the sum of the first four:\n    # sum_last_four = sum_first_four + 32\n    equation = Eq(sum_last_four, sum_first_four + 32)\n    \n    # Now we solve for the common difference d.\n    solution = solve(equation, d)\n    \n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_term_index = 8  # As there are already 7 terms in the sequence\n    next_term = next_term_index ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    num_friends = 42\n\n    total_pens = pens_per_friend * num_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    current_number = 1\n    for _ in range(2021):\n        next_number = current_number * 2 + 4\n        if next_number >= 100:\n            next_number %= 100  # Remove the hundreds digit\n        current_number = next_number\n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    red_flash_rate = 4  # red light flashes 4 times a minute\n    green_flash_rate = 6  # green light flashes 6 times a minute\n\n    # The number of flashes both lights would have in one hour (60 minutes)\n    red_flashes = red_flash_rate * 60\n    green_flashes = green_flash_rate * 60\n\n    # The greatest common divisor will tell us how many times they flash together in a minute\n    from math import gcd\n    gcd_flashes = gcd(red_flash_rate, green_flash_rate)\n\n    # The number of times they flash together in one hour will be the lcm divided by either flash rate\n    # This is equivalent to the number of minutes in an hour divided by the minute intervals they flash together\n    flashes_together_per_hour = 60 // (min(red_flash_rate, green_flash_rate) // gcd_flashes)\n\n    # Including the first and last time\n    ans = flashes_together_per_hour + 1\n    return ans\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 42):\n        if isprime(a):\n            for b in range(2, 42):\n                if isprime(b) and 3 * a + 7 * b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    first_number = 4.5\n    second_number = 10.3\n    \n    ans = (first_number + second_number) / 2\n    \n    return ans\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    profit_percent_1 = 30  # The first profit is 30%\n    selling_price = 6500\n    cost_price = selling_price / ((100 + profit_percent_1) / 100)\n\n    profit_amount_2 = 5000\n    profit_percent_2 = (profit_amount_2 / cost_price) * 100\n\n    return profit_percent_2\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    \n    solutions = solve(equation, n)\n    \n    return solutions[0]  # Assume we want the positive solution as n is a \"number\" usually implying positive in this context.\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = (120 / (1 - 3/5))\n    water_volume_per_bottle = total_volume_per_bottle * 3/5\n    total_water_for_6_bottles = water_volume_per_bottle * 6\n    return total_water_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kilograms = 8.2\n    grams_per_kilogram = 1000\n    n = kilograms * grams_per_kilogram\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    word = 'EARTH'\n    unique_letter_count = len(set(word))\n    ans = factorial(unique_letter_count)\n    return ans\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = p\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        if s == 0 or m == 0:  # leading zeros not allowed\n            continue\n        if send + more == m*10000 + o*1000 + n*100 + e*10 + y:\n            return send * more\n    return -1  # just in case there's no solution\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total = factorial(7)  # Total permutations for 7 items\n    identical_items = factorial(2) * factorial(2) * factorial(2)  # Identical items for bells, stars, and red balls\n    ans = total // identical_items\n    return ans\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    fastest = 1\n    second = 2\n    third = 5\n    slowest = 10\n    \n    # Strategy:\n    # Step 1: Fastest (Eddie) and Second (Jack) cross - Total: 2 minutes\n    # Step 2: Fastest (Eddie) returns - Total: 1 minute\n    # Step 3: Slowest (Mary) and Third (Rose) cross - Total: 10 minutes\n    # Step 4: Second (Jack) returns - Total: 2 minutes\n    # Step 5: Fastest (Eddie) and Second (Jack) cross again - Total: 2 minutes\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n    \n    total_time = second + fastest + slowest + second + second\n    return total_time\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed_walking = 150  # feet per minute\n    friend_speed_walking = 200  # feet per minute\n    simon_speed_running = 2 * simon_speed_walking  # twice the walking speed\n    time_walking = 10  # minutes\n\n    # Calculate the distance Simon walked away from school\n    distance_simon_walked = simon_speed_walking * time_walking\n    # Calculate the distance Simon's friend walked away from school\n    distance_friend_walked = friend_speed_walking * time_walking\n    \n    # Calculate the time Simon runs back to school\n    time_simon_runs = distance_simon_walked / simon_speed_running\n    # total time friend walked when Simon reaches the school (walking + running time)\n    time_friend_walks_total = time_walking + time_simon_runs\n    # Calculate the total distance Simon's friend is from school\n    total_distance_friend = friend_speed_walking * time_friend_walks_total\n\n    # The distance between Simon and his friend when Simon reaches the school\n    distance_between = total_distance_friend + distance_simon_walked\n\n    return distance_between\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    # Initial amount of water in the dispenser\n    initial_water_l = 5  # in litres\n\n    # Amount of water used to fill another container\n    container_ratio = 0.25\n    container_water_l = initial_water_l * container_ratio # in litres\n\n    # Amount of water used to fill the cups\n    cup_ml = 150\n    num_cups = 14\n    cups_total_ml = cup_ml * num_cups\n    cups_total_l = cups_total_ml / 1000  # converting ml to litres\n\n    # Calculate water left in the dispenser\n    water_left_l = initial_water_l - (container_water_l + cups_total_l)\n\n    return water_left_l\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # Derangement of n objects, also called subfactorial or !n, which is the number of permutations of n objects\n    # with no object in its original position.\n    # The formula to find the derangement of n objects is !n = (n-1)(!(n-1)+!(n-2))\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"2{i}{j}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 7 * (100 // 7 - 1)\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    original_rate = symbols('original_rate')\n\n    # equation1 represents the total work done at the original rate over 8 days\n    equation1 = Eq(original_rate * 8, (original_rate + 2) * (8 - 2))\n\n    # Solve the equation for the original rate\n    rate_solution = solve(equation1, original_rate)\n\n    # Once we have the rate, calculate the total number of pages (total work) by multiplying with the original time\n    total_pages = rate_solution[0] * 8\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the rate at which Pip bakes bread (loaves per minute)\n    pip_rate = 5 / 20\n    # Calculate the rate at which Bud bakes bread (loaves per minute)\n    bud_rate = 3 / 15\n    \n    # Calculate the total time both are baking\n    total_time = 40\n    \n    # Calculate the number of loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_time\n    # Calculate the number of loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_time\n    \n    # Calculate the total number of loaves baked by both in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n    \n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    increase_rate = 0.10\n    decrease_rate = -0.10\n\n    # Let x be the original price of the house\n    # After the first year, the value increased by 10%, making it 110% of the original\n    # Which means, 110% of the original price (x) is £11,000\n    # So the original price x = £11,000 / 1.1\n    original_price = 11000 / (1 + increase_rate)\n    \n    # After the second year, the house loses 10% of its value\n    # The value at the beginning of the second year is the original_price + 10%\n    value_after_increase = original_price * (1 + increase_rate)\n    # Now we find the value after losing 10% in the second year\n    value_after_decrease = value_after_increase * (1 + decrease_rate)\n    \n    # Finally, we calculate the amount of loss compared to the original price\n    loss = original_price - value_after_decrease\n    return loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # At most, Yohan can pick all 10 red and all 10 black socks and not get a pair of white socks\n    # After that, picking any 2 socks will guarantee a pair of white socks\n    max_picks = 10 + 10 + 2\n    return max_picks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    return (12 * 'a' / 4) + (2 * 'a' * 5)\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # We can substitute any value for d since we're simplifying the expression\n    simplified_expr = (6 * d) + (5 * d) - d\n    return simplified_expr\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    # equation representing the cookie situation\n    equation = Eq(cookies * (1 - 3/8 - 1/6), 33)\n\n    # solve the equation for the number of cookies\n    cookies_amount = solve(equation, cookies)\n\n    return cookies_amount[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence_length = sum(i for i in range(3, 12))  # 3 ones, 4 twos, .., 11 nines\n    median_position = (sequence_length + 1) // 2\n    current_position = 0\n    for number in range(1, 10):\n        next_position = current_position + number + 2\n        if median_position <= next_position:\n            return number\n        current_position = next_position\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Jemma's number\n    jemma_number = symbols('jemma_number')\n    \n    # Write the equation based on the problem statement\n    equation = Eq((jemma_number + 3) * 5, 35)\n    \n    # Solve the equation\n    solution = solve(equation, jemma_number)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 5)  # Assuming the year is 2023. Update the year if necessary.\n    end_date = datetime(2023, 6, 7)    # Assuming the year is 2023. Update the year if necessary.\n\n    count_sundays = 0\n\n    # Loop through the dates from start_date to end_date\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Check if it's a Sunday (weekday() returns 0 for Monday, so 6 is Sunday)\n            count_sundays += 1\n        start_date += timedelta(days=1)  # Move to the next day\n\n    return count_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Red and white marble symbols\n    red, white = symbols('red white', integer=True)\n\n    # Pip and Bud put symbols\n    pip, bud = symbols('pip bud', integer=True)\n\n    # Equation for the initial ratio of red to white marbles\n    eq1 = Eq(red / white, 3/2)\n\n    # Equation for the ratio after Pip adds red marbles\n    eq2 = Eq((red + pip) / white, 5/3)\n\n    # Equation for the ratio after Bud adds white marbles\n    eq3 = Eq((red + pip) / (white + bud), 5/4)\n\n    # Equation for the difference in marbles added by Bud and Pip\n    eq4 = Eq(bud - pip, 100)\n\n    # Solve for red, white, pip and bud\n    solutions = solve((eq1, eq2, eq3, eq4), (red, white, pip, bud))\n\n    # Return the number of white balls in the box at first\n    return solutions[white]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    num_buckets = barrel_capacity // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        # Check for divisibility by both 3 and 4\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n\n    # Original ratio\n    equation1 = Eq(cookies / brownies, 4/3)\n    # After giving away 6 brownies, the change in ratio\n    equation2 = Eq(cookies / (brownies - 6), 12/7)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Ratio of the number of construction companies: 4/6 = 2/3\n    # Therefore, 6 companies would take 3/2 times as long to build the same expressway as 4 companies.\n    # But they need to build a 5400m expressway, which is 5400/900 = 6 times longer than the original.\n    \n    original_days = 5\n    ratio_companies = 4/6\n    ratio_expressway_length = 5400/900\n    \n    # Calculate the total number of days by adjusting for both the changed number of companies and the length of the expressway\n    days = original_days * (1/ratio_companies) * ratio_expressway_length\n    \n    return days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # initial cost\n    buy_1 = 10\n    # first sell\n    sell_1 = 20\n    # buy back at higher price\n    buy_2 = 30\n    # final sell\n    sell_2 = 40\n    \n    # earnings calculated as the sum of profits from the two transactions\n    earnings = (sell_1 - buy_1) + (sell_2 - buy_2)\n    \n    return earnings\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam's cost per ticket\n    cost_per_ticket = 93 / 6\n    # Claire's tickets\n    claire_tickets = 124 // cost_per_ticket\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    difference = 28 - 25  # Common difference between terms\n    nth_term = 10\n    nth_term_value = 31\n    \n    # Since an = a1 + (n - 1)d, we can rearrange to find a1:\n    first_term = nth_term_value - (nth_term - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    highest_card_player_two = 0\n\n    # Since the numbers are 1 through 8, we can calculate the total sum of all numbers\n    total_sum = sum(range(1, 9))  # This is 1+2+3+...+8\n\n    # The sum of Player One's cards is given as 23\n    sum_player_one = 23\n\n    # The sum of Player Two's cards would be the remaining sum\n    sum_player_two = total_sum - sum_player_one\n\n    # Player Two could have any of the cards not in Player One's hand. \n    # To maximize Player Two's highest single card, we should minimize the other cards.\n    # We give Player Two the highest card (8) and minimize the rest.\n    player_two_cards = [8]\n\n    for card in range(1, 8):\n        if sum(player_two_cards) + card <= sum_player_two:\n            player_two_cards.append(card)\n        if len(player_two_cards) == 4:\n            break\n\n    # The highest card Player Two can have is the first element we put in the list (8)\n    highest_card_player_two = player_two_cards[0]  # This should always be 8 given our logic\n    \n    return highest_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # each pair has 2 shoes\n    time_per_shoe = 2  # minutes\n    cobblers = 2\n\n    total_time = (total_shoes * time_per_shoe) / cobblers\n\n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, n+1)) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    \n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    \n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    correct_marks = 4\n    wrong_marks = -1\n    total_score = 168\n    \n    # Let x be the number of correct answers\n    # Then (47 - x) is the number of wrong answers\n    # 4x + (-1)(47 - x) = 168\n\n    # Solving for x gives us the number of correct answers\n    x = (total_score + (total_questions - unattempted_questions)) / (correct_marks - wrong_marks)\n\n    return int(x)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n    total_players = 6\n    handshakes = comb(total_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum([i for i in range(1, 20, 2)])\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:  # A 4-digit number can't start with 0\n            continue\n        CBCD = C*1000 + B*100 + C*10 + D\n        CDBC = C*1000 + D*100 + B*10 + C\n        BDEC = B*1000 + D*100 + E*10 + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the packs\n    min_markers_per_pack = lcm(6, 8, 9, 15)\n\n    # Find the smallest number of markers that is more than 1000\n    # Since we're buying equal number of packs, it should be a multiple of min_markers_per_pack\n    num_packs = (1000 // min_markers_per_pack) + (1000 % min_markers_per_pack > 0)\n    min_markers = num_packs * min_markers_per_pack\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_tailor_per_day = 2\n    number_of_tailors = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_tailor_per_day * number_of_tailors * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    total_letters = 9  # CHALLENGE has 9 letters\n    vowels = 3         # 3 vowels A, E, E\n\n    # We can treat the three vowels A, E, and E as one letter because they must be together.\n    # There are 7! ways to arrange the 7 items (6 consonants and 1 'vowel group').\n\n    consonants_arrangement = factorial(7)\n\n    # But within the 'vowel group', we can arrange the vowels in 3!/2! ways\n    # because we have to divide by 2! for the repeated 'E'.\n\n    vowels_arrangement = factorial(vowels) // factorial(2)\n\n    return consonants_arrangement * vowels_arrangement\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Average spending from January to March\n    jan_to_mar = 450 * 3\n    # Average spending from April to July\n    apr_to_jul = 350 * 4\n    # Total spending from August to October\n    aug_to_oct = 1250\n    # Average spending from November to December\n    nov_to_dec = 400 * 2\n\n    # Total spending for the year\n    total_spending = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Average spending per month from January to December\n    average_per_month = total_spending / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 0\n    while True:\n        n += 1\n        if n % 13 == 0 and n > 50:\n            break\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_selling_price = total_revenue / total_cakes\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n\n    cost_per_person = total_cost / people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Since the divisor is equal to the quotient, let's denote them as x.\n    # The least dividend would be when x is as small as possible, but more than the remainder.\n    # The smallest x we can have where x > remainder is x = remainder + 1.\n    divisor_and_quotient = remainder + 1\n    # The formula for the dividend in a division operation is:\n    # dividend = (divisor * quotient) + remainder\n    dividend = (divisor_and_quotient * divisor_and_quotient) + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    \n    # Equation 1: cars = (4/3) * bikes\n    eq1 = Eq(cars, (4/3) * bikes)\n    # Equation 2: bikes = lorries + (1/4) * lorries = (5/4) * lorries\n    eq2 = Eq(bikes, lorries + (1/4) * lorries)\n    # Total number is less than 100 and is even: cars + bikes + lorries < 100 and is even\n    # We interate over the range of 0 to 100 with step 2 (for even sums)\n    \n    for total in range(0, 100, 2):\n        # Equation 3: cars + bikes + lorries = total\n        eq3 = Eq(cars + bikes + lorries, total)\n        solutions = solve((eq1, eq2, eq3), (cars, bikes, lorries))\n        # Check if the solution is valid (all values are positive integers)\n        if all(value.is_integer and value > 0 for value in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    common_difference = 2\n    n = 12\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    first_entrance_rate = 25\n    second_entrance_rate = 25\n    \n    total_entrance_rate = first_entrance_rate + second_entrance_rate\n    \n    total_visitors_for_one_entrance = first_entrance_rate * 16 - visitors_per_minute * 16\n    \n    time_for_two_entrances = total_visitors_for_one_entrance / total_entrance_rate\n    \n    return time_for_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    import sympy as sp\n\n    # Find all prime factors of 245 and their occurrences\n    factors = sp.factorint(245)\n    \n    # The prime factors of 245 with their counts are needed to make a perfect cube.\n    # To form a cube, we need the count of each prime factor to be multiple of 3.\n    # So, we find the smallest exponent that needs to be multiplied to each factor\n    # to make it a multiple of 3.\n    # Since 245 is already given, we only add the missing factors to make it a cube.\n\n    p = 1\n    for factor, count in factors.items():\n        # If count is not multiple of 3, we need to add some powers\n        if count % 3 != 0:\n            # The smallest multiple of 3 greater than or equal to count\n            needed_count = ((count // 3) + 1) * 3\n            # Multiply p by factor raised to the power of (needed_count - count)\n            p *= factor ** (needed_count - count)\n\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    \n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return (6**2) - (4**2)\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n    total_rulers = shermaine + elvis + claudia\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = 0.10 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = 0.20 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # 1/3 as a recurring decimal is 0.3333... (repeating 3)\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_progress = 5\n    night_regress = 3\n    net_progress = day_progress - night_regress\n    total_distance = 16\n    \n    # The snail reaches or surpasses the total distance during the day,\n    # so we count full days until it's within one day's progress of the top.\n    full_days = (total_distance - day_progress) // net_progress\n    \n    # After the full days, the snail will climb out on the next day\n    climbing_out_day = full_days + 1\n    \n    return climbing_out_day\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_number_after_double = final_number - added_number\n    original_number = original_number_after_double / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    oranges, lemons = symbols('oranges lemons')\n\n    # Initial ratio condition\n    initial_ratio = Eq(3*lemons, 5*oranges)\n\n    # After selling condition\n    after_selling_ratio = Eq(lemons, 2*(oranges - 48))\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, after_selling_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits and each student can choose 1, 2 or all 3 of them.\n    # So, the possible choices are:\n    # 1 type of fruit: 3 ways (3 C 1)\n    # 2 types of fruits: 3 ways (3 C 2)\n    # 3 types of fruits: 1 way (3 C 3)\n    # Total unique choices is the sum of all possibilities: 3 + 3 + 1 = 7\n\n    # According to the Pigeonhole Principle, if 'n' pigeons are put into 'm' pigeonholes\n    # and if n > m, then there will be at least one pigeonhole with more than one pigeon.\n\n    # Here, the unique fruit combinations are the pigeonholes and the students are the pigeons.\n    # For the Pigeonhole Principle to apply, we need at least one more student than the number of combinations.\n    # This means we need at least 8 students to ensure that at least two students choose the same combination of fruits.\n\n    ans = 7 + 1\n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    return discounted_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p\n    fraction_spent = 1/4  # one-quarter\n\n    initial_amount = spent / fraction_spent\n\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Define number of legs each animal has\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n    cat_legs = 4\n    \n    # Define number of each animal\n    num_ducks = 3\n    num_parrots = 2\n    num_rabbits = 1\n\n    # Calculate number of legs without cats\n    total_legs_without_cats = (num_ducks * duck_legs) + (num_parrots * parrot_legs) + (num_rabbits * rabbit_legs)\n\n    # Calculate number of legs that the cats have\n    legs_cats_have = 32 - total_legs_without_cats\n\n    # Calculate number of cats\n    num_cats = legs_cats_have / cat_legs\n\n    return num_cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    a_students = 45\n    b_students = 75\n    c_students = 210\n\n    gcf_ab = gcd(a_students, b_students)\n    gcf_abc = gcd(gcf_ab, c_students)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    num_matches = comb(num_teams, 2)  # Combination of 11 teams taken 2 at a time\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def phi(a, b):\n    if a < 7:\n        return a + b * b\n    else:\n        return a - b\n\ndef solution():\n    inner = phi(8, 3)\n    ans = phi(4, inner)\n    return ans\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Judy's age and her father's age\n    judy, father = symbols('judy father')\n    \n    # Equation representing the age difference\n    equation_age_difference = Eq(father, judy + 33)\n    \n    # Equation representing the sum of their current ages\n    equation_age_sum = Eq(judy + father, 63)\n    \n    # Solve the system of equations for Judy and her father's ages\n    ages = solve((equation_age_difference, equation_age_sum), (judy, father))\n    \n    # Use the ages found to calculate the number of years ago when father's age was four times Judy's age\n    judy_then, father_then = symbols('judy_then father_then')\n    \n    # Equation for years ago when father's age was four times Judy's age\n    equation_four_times = Eq(father - judy_then, 4 * (judy - judy_then))\n    \n    # Equation representing the age difference remains the same over time\n    equation_age_difference_then = Eq(father - judy_then, ages[father] - ages[judy])\n    \n    # Solve for the number of years ago (judy_then)\n    years_ago = solve((equation_four_times, equation_age_difference_then), (judy_then, father_then))\n    \n    return years_ago[judy_then]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    # Let y be the younger brother's current age, and o be the older brother's current age.\n    from sympy import symbols, Eq, solve\n\n    y, o = symbols('y o')\n    # When the older brother was y years old, the younger brother was 12.\n    equation1 = Eq(o - y, y - 12)\n    # When the younger brother will be o years old, the older brother will be 27.\n    equation2 = Eq(y + (o - y), 27)\n\n    # Solve for y and o\n    solutions = solve((equation1, equation2), (y, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 6 * 8 * 9 * 15 // (2 * 2 * 3 * 3 * 5)  # Least common multiple of 6, 8, 9, 15\n    markers = lcm\n    while markers < 1000:\n        markers += lcm\n    return markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms = symbols('rooms')\n\n    # If there are 4 people in each room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms + 40, 6 * rooms - 24)\n\n    # Solve the equation to find the number of rooms\n    solutions = solve(equation1, rooms)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values from the question\n    n10 = 23  # The 10th number is 23\n    n15 = 38  # The 15th number is 38\n\n    # Calculate the common difference\n    common_difference = (n15 - n10) / (15 - 10)\n\n    # To find the 102nd number:\n    # a + (n-1)*d = nth term\n    # where a is the first term, d is the common difference, n is the term number\n    # First we find the first term using the 10th term (since n10 = a + (10-1)*d).\n    a = n10 - (10 - 1) * common_difference\n\n    # Now we can find the 102nd term using the formula with a, d, and n=102\n    n102 = a + (102 - 1) * common_difference\n\n    return int(n102)\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n    years_until_jane_is_15 = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for number in range(10, 21):\n        if (number % 4 == 0) and (36 % number == 0):\n            return number\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for i in range(1, 100):  # Since we're looking for a whole number coefficient, the range can be reasonable\n        if (13 - i)**2 == 25:\n            return i\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for cost price\n    cost_price = symbols('cost_price')\n    \n    # Marked price is 20% above cost price\n    marked_price = cost_price * 1.2\n    \n    # Product is sold at 80% of the selling (marked) price\n    selling_price = marked_price * 0.8\n    \n    # Loss is $40, therefore selling price - cost price = -$40\n    loss_equation = Eq(selling_price - cost_price, -40)\n    \n    # Solve for cost price\n    cost_price_value = solve(loss_equation, cost_price)\n    \n    return cost_price_value[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = (7 + 3) * 11\n    part2 = 7 + (3 * 11)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate of filling tank for both taps together\n    rate_xy = 1 / 6\n\n    # Rate of filling tank for tap X alone\n    rate_x = 1 / 10\n\n    # Using the inclusion-exclusion principle to find the rate for tap Y alone\n    rate_y = rate_xy - rate_x\n\n    # Time taken for tap Y to fill the tank is the reciprocal of rate_y\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n\n    discount_amount = (discount_percentage / 100) * usual_price\n    final_price = usual_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    wrong_points = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * wrong_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(i) for i in range(1, 9))\n    return factorial_sum % 100\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for both Xuanrui and Yaokuan\n    Xuanrui, Yaokuan = symbols('Xuanrui Yaokuan')\n    \n    # Create equations based on the problem statement\n    # Equation 1: Xuanrui and Yaokuan had 708 markers altogether\n    eq1 = Eq(Xuanrui + Yaokuan, 708)\n    \n    # Equation 2: After transactions, both had an equal number of markers\n    eq2 = Eq(Xuanrui - 532, Yaokuan - (3/7) * Yaokuan)\n    \n    # Solve the equations \n    solutions = solve((eq1, eq2), (Xuanrui, Yaokuan))\n    \n    # Return the solution for Xuanrui\n    return solutions[Xuanrui]\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # The volume of sugar water from Cup A is 300mL, and its concentration is 20%\n    sugar_a = 300 * 0.20\n\n    # The volume of sugar water from Cup B is 300mL, and its concentration is 30%\n    sugar_b = 300 * 0.30\n\n    # The total volume of the mixed sugar water is the sum of the volumes from Cup A and B\n    total_volume = 300 + 300\n\n    # The total volume of sugar in the mixed sugar water is the sum of the sugar volumes from Cup A and B\n    total_sugar = sugar_a + sugar_b\n\n    # The concentration of the mixed sugar water is the total sugar volume divided by the total water volume\n    concentration = (total_sugar / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_value = 1\n    dollars_value = 2.50\n    dollars_to_convert = 1000\n\n    pounds_worth = dollars_to_convert / dollars_value * pounds_value\n\n    return pounds_worth\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles Ryan has as 'r' and Ahmad's as 'a'\n    r, a = symbols('r a')\n\n    # We have two equations based on the problem statement\n    # Equation 1: a + r = 1442 (together they have 1442 marbles)\n    # Equation 2: a = 6r (Ahmad has 6 times as many marbles as Ryan)\n\n    equation1 = Eq(a + r, 1442)\n    equation2 = Eq(a, 6 * r)\n\n    # Solve the equations to find the number of marbles Ryan and Ahmad have\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The number of marbles Ahmad must give to Ryan is the difference between\n    # what Ahmad has and what they would each have if they were equal\n    marbles_to_give = solutions[a] - (1442 / 2)  # Dividing by 2 to get the equal number\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let the number of $2-notes be x and the number of $10-notes be y.\n    # We have the system of equations:\n    # x + y = 95 (total notes)\n    # 2x + (5*10)y = 2*175 (exchanging $10-notes for $2-notes)\n    # Simplifying the second equation: 2x + 50y = 350\n    # Dividing the second equation by 2: x + 25y = 175\n\n    # Subtracting the first equation from the modified second equation:\n    # (x + 25y) - (x + y) = 175 - 95\n    # 24y = 80\n\n    # Solving for number of $10-notes (y):\n    y = 80 // 24\n\n    # Finding the number of $2-notes (x) from the first equation:\n    x = 95 - y\n\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n\n    # Total length used by the carriages (each carriage length + space between)\n    carriage_total_length = total_length - head_length\n\n    # Length used by each individual carriage including the space after it\n    each_carriage_total = carriage_length + space_between\n\n    # Number of carriages is the total length used by the carriages divided by the length used by each carriage\n    num_carriages = carriage_total_length // each_carriage_total\n\n    # Including the head of the train\n    num_carriages_including_head = num_carriages + 1\n\n    return num_carriages_including_head\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Count ones place\n    ones = 0\n    for i in range(1, 289):  # Include page 288\n        if i % 10 == 8:\n            ones += 1\n\n    # Count tens place\n    tens = 0\n    for i in range(10, 289, 10):  # Start from 10, end at 280, counting by tens\n        tens += 10 if i // 10 != 8 else 9  # ten entries for each tens, except for 80s\n\n    # Count hundreds place\n    hundreds = 0\n    for i in range(100, 289):  # Starts from 100, ends at 288\n        if i // 100 == 8:\n            hundreds += 1\n\n    # Bobby's mistake was not counting the 80s in tens place correctly. He should have counted 29 for 80s instead of 30.\n    # The correct count for tens place should exclude one count for the page 280 itself which is already counted in hundreds place.\n    # total appearances\n    total = ones + tens + hundreds\n\n    return total\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct in range(51):\n        incorrect = 50 - correct\n        score = correct * 2 - incorrect\n        if score == 82:\n            return correct\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the pen and pencil\n    pen, pencil = symbols('pen pencil')\n    \n    # Define the equations based on the problem statement\n    # The total cost of a pen and pencil is $2.90\n    equation1 = Eq(pen + pencil, 2.90)\n    # The pen costs 60¢ more than the pencil\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    # Return the cost of the pen\n    return solutions[pen]\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    # Given: 24x - 25y = 8\n    # We search for the smallest positive integer value of x.\n\n    y = 0\n    while True:\n        # Substitute y into the equation and solve for x\n        x = (25 * y + 8) / 24\n\n        # Check if x is a whole number\n        if x == int(x):\n            return int(x)\n        y += 1\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols (shapes) as variables\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(triangle + triangle, square)  # ▲ + ▲ = ■\n    equation2 = Eq(square + triangle, circle)    # ■ + ▲ = ●\n    equation3 = Eq(diamond, circle + square + triangle)  # ♦ = ● + ■ + ▲\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Calculate how many ▲s are equal to ♦\n    num_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = x * 10 + y\n            B = (2 * x) * 100 + (2 * y)\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for both bags\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.7 / 4\n\n    # Compare the prices to find out which one offers a better value\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        ans = \"2.5kg bag\"\n    else:\n        ans = \"4kg bag\"\n\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    \n    total_cost = price_per_book * number_of_books\n    \n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_value = solve_congruence(*congruences)\n    return least_value[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Trees on one side = total length / interval + 1 (for the tree at the beginning)\n    trees_per_side = road_length // interval + 1 \n    \n    # Total trees = trees on one side * 2 (since there are trees on both sides)\n    total_trees = trees_per_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses * bus_length) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 4 - 25, 2021)\n\n    x_value = solve(equation, x)[0]\n\n    correct_answer = 4 * x_value + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    # Let x be the mass of the empty jar.\n    # If a jar 1/4 full is 250g, then each quarter has a mass of 1000g/4 = 250g.\n    # The mass of the content of the jar is 250g - x.\n    # If a jar 3/4 full is 350g, then the mass of 3 quarters of the content is 350g - x.\n    # However, since the weight of a quarter of Marmite is 250g, the weight of 3 quarters is 3 * 250g = 750g.\n    # So we have the equation 750g + x = 350g\n    # Solving for x, we get x = 350g - 750g\n\n    x = 350 - 750\n    return x\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n    \n    num_terms = int((last_term - first_term) // difference + 1)\n    \n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    x, y = symbols('x y')\n    equation = Eq(x/5, y/3)\n    y_when_x_is_5 = equation.subs(x, 5)\n    solutions = solve(y_when_x_is_5, y)\n\n    return (solutions[0], 'directly')\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inv\n    return int(S)\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discount = selling_price * 0.10  # 10% discount\n    final_selling_price = selling_price - discount\n    profit = final_selling_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m, n = 1, 1\n    while True:\n        original_students = m*m + 5\n        new_students = original_students + 18\n        if int(new_students**0.5) == new_students**0.5:\n            n = int(new_students**0.5)\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    return sum([9, 11, 8, 12, 7, 13, 6, 14, 5, 14])\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 15\n    C_students = 18\n\n    gcf_AB = gcd(A_students, B_students)\n    gcf_ABC = gcd(gcf_AB, C_students)\n\n    return gcf_ABC\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 17 * 60  # Convert 5 p.m. to minutes past midnight (17 hours * 60 minutes)\n    badminton_duration = 45  # Badminton playing time in minutes\n    jogging_duration = 30    # Jogging time in minutes\n\n    # Calculate end time in minutes past midnight\n    end_time_minutes = start_time + badminton_duration + jogging_duration\n    # Convert minutes back to hours and minutes\n    end_hour = end_time_minutes // 60\n    end_minute = end_time_minutes % 60\n\n    # Formatting the time into a 12-hour format with am/pm\n    end_am_pm = \"p.m.\" if end_hour >= 12 else \"a.m.\"\n    if end_hour > 12:\n        end_hour -= 12\n\n    return f\"{end_hour}:{end_minute:02d} {end_am_pm}\"\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average and total sum of the 3 numbers\n    initial_average = 25\n    total_sum_initial = initial_average * 3\n    \n    # New average and new total sum after changing one number to 16\n    new_average = 22\n    total_sum_new = new_average * 3\n    \n    # The difference in sum is due to the alteration of one number\n    difference = total_sum_initial - total_sum_new\n    \n    # The original number is this difference plus the new value 16\n    original_number = difference + 16\n    \n    return original_number\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls') # The number of girls in the class\n    boys = 36 - girls # The number of boys in the class\n\n    # Total score for girls and boys\n    total_girls_score = girls * 88\n    total_boys_score = boys * 91\n\n    # The average score for the class is the total score divided by the number of students\n    average_score_equation = Eq((total_girls_score + total_boys_score) / 36, 89)\n\n    # Solve the equation\n    girls_number = solve(average_score_equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3) ** 2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # According to Graph Theory, for a 3D shape to be considered a valid simple polyhedron,\n    # it must follow Euler's formula, which is: vertices (V) - edges (E) + faces (F) = 2.\n    # For a cube, which is a simple 3D polyhedron,\n    # the number of vertices V = 8 (since a cube has 8 corners),\n    # the number of edges E = 12 (since a cube has 12 edges),\n    # and the number of faces F = 6 (since a cube has 6 faces).\n    \n    V = 8\n    E = 12\n    F = 6\n    \n    # Now we apply Euler's formula to confirm our shape is a simple polyhedron.\n    return V - E + F\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Calculate the total mass of sugar from each person's solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Calculate the total mass of the solutions\n    total_mass = 800 + 200 + 300\n\n    # Calculate the total mass of sugar in the mixed solution\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Calculate the concentration of the resulting sugar solution\n    concentration = (total_sugar / total_mass) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    score_for_correct = 4\n    score_for_incorrect = -2\n    total_score = 66\n    questions_attempted = total_questions - 1\n\n    # Hypothesis: Assume all attempted questions are correct\n    max_correct_score = questions_attempted * score_for_correct\n\n    # The difference must be made up by incorrect answers (negative points)\n    difference = max_correct_score - total_score\n\n    # Each incorrect answer reduces the score by:\n    # score_for_correct (for the lost correct answer) + score_for_incorrect (for the actual incorrect answer)\n    score_reduction_per_incorrect = score_for_correct - score_for_incorrect\n\n    # Calculate the number of incorrect answers needed to get the difference\n    incorrect_answers = difference // score_reduction_per_incorrect\n\n    # The remaining are the correct answers\n    correct_answers = questions_attempted - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n\n    equation1 = Eq(gill - andrew, 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    juice_in_first = 20 * 0.35\n    juice_in_second = 30 * 0.60\n    total_juice = juice_in_first + juice_in_second\n    concentration = (total_juice / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Initialize a list with None to represent the unknown sequence, we know the length is at least 7\n    sequence = [None] * 7\n\n    # We know the 4th and 6th number\n    sequence[3] = 6\n    sequence[5] = 15\n    \n    # Working backwards to find the first two numbers\n    sequence[4] = sequence[5] - sequence[3]  # 5th number in sequence, since seq[5] = seq[3] + seq[4]\n    sequence[2] = sequence[3] - sequence[4]  # 3rd number in sequence\n    sequence[1] = sequence[4] - sequence[2]  # 2nd number in sequence\n    sequence[0] = sequence[2] - sequence[1]  # 1st number in sequence\n    \n    # Calculate the 7th number in the sequence\n    sequence[6] = sequence[4] + sequence[5]\n    \n    # Return the 7th number\n    return sequence[6]\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    return 3.8 + 59.6 - 12\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = -(-cookies // box_capacity) # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_badges = symbols('original_badges')\n\n    badges_sold_first_day = 5/7 * original_badges\n    badges_left_after_first_day = original_badges - badges_sold_first_day\n    badges_sold_second_day = 1/3 * badges_left_after_first_day\n    badges_left_after_second_day = badges_left_after_first_day - badges_sold_second_day\n    total_badges_after_adding = badges_left_after_second_day + 354\n    final_badges = 3 * original_badges\n\n    equation = Eq(total_badges_after_adding, final_badges)\n    solution = solve(equation, original_badges)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # There are 4 players in a knockout tournament\n    # In each round, half of the players get knocked out\n    # So we calculate how many rounds are needed for one player to remain\n    \n    import math\n    \n    num_players = 4\n    # Number of rounds is log base 2 of number of players\n    num_rounds = math.ceil(math.log2(num_players))\n    \n    return num_rounds\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    digits = set(range(10))\n    seven_plus = {7 + i for i in range(5) if 7 + i in digits}\n    seven_minus = {7 - i for i in range(5) if 7 - i in digits}\n    possible_digits = seven_plus.union(seven_minus)\n\n    min_number = float('inf')\n    for i in possible_digits:\n        for j in possible_digits:\n            for k in possible_digits:\n                if i != j and i != k and j != k:\n                    number = 100 * i + 10 * j + k\n                    if '7' in str(number):\n                        min_number = min(min_number, number)\n\n    return min_number\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_password = \"0141705021\"\n    new_password = \"4005220912\"\n    # The password \"Angel\" could suggest a pattern where each letter stands for a digit.\n    # Assuming \"Angel\" as an anagram pattern for digits, then \"Devil\" should rearrange the same digits.\n\n    # Count the occurrences of each digit in \"Angel\" and \"Devil\" passwords\n    angel_count = {digit: angel_password.count(digit) for digit in set(angel_password)}\n    devil_count = {digit: new_password.count(digit) for digit in set(new_password)}\n\n    # Check if the counts of each digit match in both passwords\n    can_unlock = angel_count == devil_count\n\n    if can_unlock:\n        ans = \"Yes, Andy can unlock the treasure chest because the numbers have the same frequency of digits.\"\n    else:\n        correct_password = ''.join(sorted(angel_password))  # Arrange digits in ascending order for a correct password\n        ans = \"No, Andy cannot unlock the treasure chest. The correct password is \" + correct_password + \".\"\n\n    return ans\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    produced_by_A = total_exhibits - not_produced_by_A\n    produced_by_B = total_exhibits - not_produced_by_B\n    both_produced = produced_by_A + produced_by_B - total_exhibits\n    \n    return both_produced\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee that the magician picks at least one ball of each color, \n    # he needs to pick balls in the worst case scenario where he picks all balls \n    # of one color, then all balls of another color before finally picking a different color.\n\n    # Number of balls for each color\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Adding one to each color to account for the worst case (excluding 1 ball of each other color)\n    must_pick = (blue_balls + 1) + (red_balls + 1) + 1\n\n    return must_pick\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Count of different rose and jasmine colors\n    roses, jasmines, daisy = 3, 4, 1\n    \n    # Since flowers of the same kind need to be put together,\n    # Treat each kind as a single unit first, so we have 3 units (roses, jasmines, daisy)\n    total_units = roses + jasmines + daisy\n    \n    # Now we have to arrange these 3 kinds (3 units) which is a permutation of 3 units\n    kind_arrangement = factorial(total_units)\n    \n    # Permutations for roses and jasmines because within the same kind they can be arranged in different ways\n    rose_permutations = factorial(roses)\n    jasmine_permutations = factorial(jasmines)\n\n    # Multiply the permutations to get the total arrangements\n    total_arrangements = kind_arrangement * rose_permutations * jasmine_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    # 1*2*3*4*5*6 = 720\n    # 1*2*3*4*5*6*7*8 = 40320\n    # We want to find the divisors of 40320 that are also multiples of 720.\n\n    from math import gcd\n\n    # We calculate the least common multiple of the two numbers to find the lowest possible multiple that is also a factor.\n    lcm_of_both = (720 * 40320) // gcd(720, 40320)\n\n    # Now we find all the multiples of 720 up to the lcm_of_both, which will also be divisors of 40320.\n    count = 0\n    current_multiple = 720\n    while current_multiple <= lcm_of_both:\n        if lcm_of_both % current_multiple == 0:\n            count += 1\n        current_multiple += 720\n\n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # The maximum number of different positive integers that can add up to 60\n    # is found when we use consecutive numbers starting from 1.\n    # We want to keep adding the next number until we reach or exceed 60.\n    s = 0\n    n = 0\n    while s < 60:\n        n += 1\n        s += n\n    # When the sum exceeds 60 for the first time, the last added number (n)\n    # may have caused the sum to surpass 60, so we subtract 1 to find\n    # the maximum number of different positive integers.\n    return n - 1\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 1000): # assuming a realistic upper limit for the number of pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Initialize variable ans\n    ans = 0\n\n    # Prime numbers greater than 2 are odd, hence A cannot be 2 because\n    # 8*2 - 3B will never be a multiple of three as it is even.\n    # We need to check for odd primes starting from 3.\n    from sympy import primerange\n\n    # Generate a list of primes from 3 to an arbitrary limit where A could possibly lie\n    primes = list(primerange(3, 100))\n\n    # Iterate through the list of primes to find the solution\n    for A in primes:\n        # Check for each A whether there exists a B (also a prime) such that 8A - 3B is a multiple of 3\n        for B in primes:\n            if (8 * A - 3 * B) % 3 == 0:\n                ans = A\n                return ans\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discounted_amount = original_price * discount_rate\n    sale_price = original_price - discounted_amount\n    return sale_price\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Given the value of the house after 1 year increase by 10% is £110,000\n    # Calculate the original price before the increase\n    original_price = 110000 / 1.10\n\n    # Calculate the value of the house after the second year with a 10% decrease\n    second_year_price = original_price * 0.90\n\n    # Calculate the amount of profit or loss comparing with the original price\n    profit_or_loss = second_year_price - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml per min\n    minutes_in_one_hour = 60  # minutes\n    water_leaked_ml = leak_rate_per_minute * minutes_in_one_hour\n    water_leaked_litres = water_leaked_ml / 1000  # converting ml to litres\n    return water_leaked_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all the possible permutations of 0-9 for the different letters in the alphametic\n    all_permutations = list(permutations(range(10), 3))\n\n    # Check each permutation to find the solution to the alphametic\n    for perm in all_permutations:\n        S, E, _ = perm\n        # Ensure that we don't have a leading zero in our three-digit number\n        if S == 0:\n            continue\n        SEE = S * 100 + E * 10 + E\n        # Check if the alphametic equation is valid\n        if SEE == 2 * (S * 10 + E):\n            return SEE\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    for age in range(1, 100):  # Assuming a reasonable maximum age\n        if all(age % divisor == 1 for divisor in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # James's height in cm\n    difference = 30     # The difference in height between James and Mark in cm\n    \n    mark_height = james_height + difference  # Mark's height is James's height plus the difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Cindy needs to take 1 sock of each color to ensure she has one pair of the same color\n    # After taking 3 socks (one of each), she might have one of each color.\n    # Therefore, she must take one more sock, which will be the same color as one already taken.\n    ans = 3 + 1  # One more than the number of different colors\n    return ans\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    cut_into_three = (final_pieces - original_pieces) // 2\n    return cut_into_three\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    marks = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    total_marks = sum(marks)\n    return total_marks / len(marks)\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario to guarantee 2 apples of the same colour:\n    # Take 1 red apple and 1 green apple. This does not satisfy the condition.\n    # Thus, the next apple you take will either be red or green, causing you to have\n    # 2 apples of the same colour. So in the worst case, you must take 3 apples.\n    return 3\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    water_left = 7\n    \n    original_volume = (pails_filled * liters_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return int(total_age)\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation = Eq(x**20 * y**15 * z**5, 243)\n\n    # Since all the bases are the same, and 243 is 3^5,\n    # We can express x, y, and z in terms of 3\n    solutions = solve(equation, (x, y, z))\n\n    # Selecting the positive solution for the base\n    x_value = solutions[0][0]\n    y_value = solutions[0][1]\n    z_value = solutions[0][2]\n\n    # Now we can calculate the value of x**8 * y**6 * z**2\n    result = x_value**8 * y_value**6 * z_value**2\n\n    return result\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_box_price = symbols('book_price pencil_box_price')\n\n    equation1 = Eq(2 * book_price + 3 * pencil_box_price, 42)\n    equation2 = Eq(2 * book_price + 6 * pencil_box_price, 60)\n\n    solutions = solve((equation1, equation2), (book_price, pencil_box_price))\n\n    return solutions[pencil_box_price]\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Generate the sequence by the described pattern\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    # Find the median\n    n = len(sequence)\n    sequence.sort()\n    if n % 2 == 0:\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n    else:\n        median = sequence[n // 2]\n    \n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_of_two = total_height_for_two / 2\n    \n    return average_height_of_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    # Initialize answer as 1 because we will multiply\n    A = 1\n    \n    # Iterate over each number up to 2010\n    for i in range(1, 2011):\n        A *= i\n        # Remove the zeros from current A by taking modulo of A until it is not divisible by 10\n        while A % 10 == 0:\n            A //= 10\n        # Keep the number of digits low to avoid overflow\n        A = A % 1000000  # Arbitrarily chosen to keep the number of digits manageable\n\n    # Convert to string to find the first non-zero digit from right to left\n    return int(str(A)[-1])\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    daily_paved = 50\n\n    days_needed = total_length / daily_paved\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle_per_day_fodder = 10\n    number_of_cattles = 8\n    days_to_eat_all_fodder = 4\n\n    total_fodder = cattle_per_day_fodder * number_of_cattles * days_to_eat_all_fodder\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "from sympy import factorint\n\ndef solution():\n    # For x\n    # 42 * x = 42^2\n    x = 42 ** 2 // 42  # Simplify the equation to find x\n\n    # For y, we need to find a product that factors into primes where all exponents are 1\n    # We know that 42 = 2 * 3 * 7, so to make each exponent 1 in factorization \n    # we should multiply 42 by 2 * 3 * 7 so that we have each prime factor appearing only once in the product\n    factors_of_42 = factorint(42)  # It will give a dict of prime factors and their exponents for 42\n    y = 1\n    for prime_factor in factors_of_42:\n        y *= prime_factor\n\n    return x + y\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the number of sweets Jess originally has\n    # Let k represent the number of sweets Jill originally has\n    j, k = symbols('j k')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(k, 6/5 * j)\n\n    # After Jill gives eight sweets to Jess\n    # Jill would have k - 8 sweets\n    # Jess would have j + 8 sweets\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(k - 8, 4/7 * (j + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, k))\n\n    # Calculate total number of sweets\n    total_sweets = solutions[j] + solutions[k]\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.22\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the number of marbles Larry had at first.\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    # Larry gave 5/12 of his marbles to Mark, so he has 7/12 left.\n    # Then he gave 30 marbles to Nate and 26 marbles to Ollie, so he has (7/12)x - 30 - 26 left.\n    # Finally, he has 35 marbles left.\n    # Equation: (7/12)x - 30 - 26 = 35\n    equation = Eq((7/12)*x - 30 - 26, 35)\n    # Solve for x\n    result = solve(equation, x)\n    return result[0]\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 100):\n        digits = list(str(number))\n        total_sum += sum(int(digit) for digit in digits)\n    return total_sum\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = total_money / 4\n    return part_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) * 3 == int(str(i) + '1'):\n            return i\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    birth_date = current_date - timedelta(days=(38 * 365.25 + 6 * 30.4375))\n    return birth_date.year\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the price of one pie\n    p, c = symbols('p c')\n    \n    # Define the equations based on the information provided\n    equation1 = Eq(15*p, 7*c)          # Ratio of money collected from pies to cakes\n    equation2 = Eq(c, p + 13)          # A cake costs $13 more than a pie\n    \n    # Solve equations to get the price of pie and cake\n    prices = solve((equation1, equation2), (p, c))\n    price_of_pie = prices[p]\n    price_of_cake = prices[c]\n\n    # total money 1848, ratio of pie to cake is 4:1, price of cake is known\n    # Let x be the number of cakes\n    x = symbols('x')\n    \n    # Equation for the total money collected\n    equation3 = Eq(4 * price_of_pie * x + price_of_cake * x, 1848)\n    \n    # Solve to get number of cakes\n    number_of_cakes = solve(equation3, x)\n\n    return number_of_cakes[0]\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum([i**4 for i in range(1, 20)])\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads_count = []\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            beads_count.append(beads)\n    return beads_count[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Hanson had\n    orig_money = symbols('orig_money')\n\n    # After spending 1/4 of his money and an additional $3, the remaining is (3/4) * orig_money - 3\n    remaining_after_CDs = orig_money * (3/4) - 3\n\n    # Then he spends 3/5 of the remaining money and an additional $6, so he is left with 24\n    # remaining_after_CDs * (2/5) - 6 = 24\n    equation = Eq(remaining_after_CDs * (2/5) - 6, 24)\n\n    # Solve the equation to find the original amount of money\n    solutions = solve(equation, orig_money)\n\n    # Return the value of Hanson's original amount of money\n    return solutions[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    # Digits available: 0, 1, 3, 6, 8, 9\n    # Even numbers can only end with 0, 6 or 8\n    # The first digit can't be 0 (for it to be a four-digit number)\n\n    # Fixing the last digit to an even number and counting possibilities for other places\n    count = 0\n    \n    # When last digit is 0\n    count += 4 * 3 * 2  # The remaining places can be filled by any of the other 4 digits in 4P3 ways.\n    \n    # When last digit is 6 or 8 (counted separately because the first place cannot be 0)\n    count += 2 * 4 * 3 * 2  # We have 5 choices left for the first place (not 0), and 3P2 for the other two places.\n\n    return count\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Given data\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    weiling_late_start = 2  # min\n    weiling_early_arrival = 4  # min\n\n    # Since Weiling catches up with Qiqi, the distance they travel is the same.\n    # Let 't' be the time that Weiling takes to travel from the library to the school.\n    # Qiqi has travelled for 't + weiling_late_start - weiling_early_arrival' minutes.\n    \n    # Therefore, we can create the equation:\n    # (qiqi_speed * (t + weiling_late_start - weiling_early_arrival)) = (weiling_speed * t)\n\n    # Let d be the distance from the library to the school.\n    # d = qiqi_speed * (t + weiling_late_start - weiling_early_arrival)\n    # d = weiling_speed * t\n\n    # Solving for t:\n    t = (qiqi_speed * (weiling_late_start - weiling_early_arrival)) / (weiling_speed - qiqi_speed)\n\n    # Now plug the value of t into either of the distance equations:\n    distance = qiqi_speed * (t + weiling_late_start - weiling_early_arrival)\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we only need the units digit of the sum, it is sufficient\n    # to consider the units digit of each term individually.\n\n    # The units digit of powers of 9 repeats every 2: 9^1 = 9, 9^2 = 81, 9^3 = 729, ...\n    # Thus, the units digit for 9 raised to any odd power is 9,\n    # and the units digit for 9 raised to any even power is 1.\n\n    # 2015 is odd, so 9^2015 has a units digit of 9.\n    units_digit_2015 = 9\n\n    # 2016 is even, so 9^2016 has a units digit of 1.\n    units_digit_2016 = 1\n\n    # The units digit of the sum will be the sum of the units digits of the terms.\n    units_digit_sum = (units_digit_2015 + units_digit_2016) % 10\n\n    return units_digit_sum\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Arrange the 5 men in a row: M M M M M\n    men_ways = factorial(5)\n    \n    # We have 6 potential places to insert the 3 women (_ M _ M _ M _ M _ M _)\n    available_spots_for_women = 6\n\n    # Choose 3 spots for the women out of the 6 possibilities\n    spots_ways = factorial(available_spots_for_women) // (factorial(3) * factorial(available_spots_for_women - 3))\n\n    # Total arrangements\n    total_ways = men_ways * spots_ways\n    \n    return total_ways\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    # Calculate the greatest common divisor of the two lengths\n    longest_piece = gcd(45, 30)\n    \n    # Check Candy's answer\n    if longest_piece == 180:\n        is_correct = True\n    else:\n        is_correct = False\n    \n    # Return the correct longest piece length and if Candy's answer was correct\n    return (longest_piece, is_correct)\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    marc_time = datetime.strptime(\"11:50\", \"%H:%M\")\n    marc_time_adjusted = marc_time - timedelta(minutes=15)  # Marc's watch is 15 minutes slow\n    george_time_adjusted = marc_time_adjusted + timedelta(minutes=7)  # George's watch is 7 minutes fast\n    george_time_half_hour_later = george_time_adjusted + timedelta(minutes=30)  # Half an hour later for George's watch\n    ans = george_time_half_hour_later.strftime(\"%H:%M\")\n    \n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax = T / 100 * 30000 + (T + 3) / 100 * (income - 30000)\n    equation = Eq(tax, (T + 1) / 100 * income)\n\n    sol = solve((equation, Eq(income - 30000, 0)), (T, income))\n\n    return sol[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = (3 * jump_up) - fall_down\n    \n    jumps_needed = (total_height - fall_down) // effective_jump * 3\n    remainder = (total_height - fall_down) % effective_jump\n    \n    if remainder > 0:\n        if remainder <= jump_up:\n            jumps_needed += 1\n        else:\n            jumps_needed += (remainder + jump_up - 1) // jump_up\n\n    return jumps_needed\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n    combined_rate = A_rate + B_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing all marbles of one color first which has the maximum number of marbles (12 red)\n    # Then drawing all of another color which has the second maximum number of marbles (9 blue)\n    # At this point, we still have 2 colors remaining (yellow and red)\n    # So, we need to draw one marble of each remaining color\n    # Therefore, we draw 1 yellow and 1 red to ensure 4 marbles of different colors\n    ans = 12 + 9 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of incorrect answers.\n    # We have two equations based on the problem statement:\n    # x + y = 30 (since he answered all 30 questions)\n    # 5x - y = 90 (5 marks for each correct and -1 for each incorrect)\n    \n    # We can solve these two equations to find the value of x.\n    # Adding the second equation to the first one to eliminate y, we get:\n    # (x + y) + (5x - y) = 30 + 90\n    # 6x = 120\n    # x = 120 / 6\n    \n    x = 120 // 6\n    return x\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_birth_year = 2002 - 45\n    jenny_birth_year = 1995 - 22\n    gigi_age_when_jenny_born = jenny_birth_year - gigi_birth_year\n    jenny_age_when_gigi_22 = 22 - gigi_age_when_jenny_born\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Common difference from the sequence\n\n    # The terms will stop being positive when they are less than or equal to 0\n    # first_term + (n - 1) * difference <= 0\n    # n <= (0 - first_term) / difference + 1\n\n    n = (0 - first_term) / difference + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    number_str = '20190406'\n    digits_sum = sum(int(digit) for digit in number_str)\n    remainder = digits_sum % 9\n    A = (9 - remainder) % 9\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    x = 1\n    while True:\n        num = 24 * x  # Multiple of 3 and 8 is a multiple of their LCM, which is 24\n        if str(num).endswith('2'):  # Check if the number ends with '2'\n            return num\n        x += 1\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    ways = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount = 0.15\n    sale_price = original_price * (1 - discount)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of questions answered correctly by Olivia\n    # Then (20 - x) is the number of questions she answered incorrectly\n    # According to the problem we have the equation:\n    # 5x - 2(20 - x) = 51\n\n    # Solving the equation for x\n    x = (51 + 2*20) / (5 + 2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for easier calculations\n    lights_on_time = 9 * 60  # 9 minutes in seconds\n    \n    # The time each traffic light changes in seconds\n    first_light_change = 0.5 * 60  # half a minute in seconds\n    second_light_change = 0.75 * 60  # 0.75 minutes in seconds\n    \n    # Calculate the least common multiple of the first two lights\n    lcm_first_second = lcm(int(first_light_change), int(second_light_change))\n    \n    # The third light must divide the time the two lights are on\n    # Starting from 30 seconds, find the smallest time greater than 30 seconds \n    # that is a factor of the lcm between the first two light changes\n    third_light_change = 30\n    while third_light_change <= lcm_first_second:\n        if lights_on_time % third_light_change == 0:\n            return third_light_change\n        third_light_change += 1\n    \n    return -1  # If it is not possible\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    A, B = symbols('A B', integer=True)\n    bus_capacity = 36\n\n    # Equation representing the remaining members in group A and B filling a bus\n    equation = Eq(A + B - 1, bus_capacity)\n    # Occupying the seats in some buses, so there are A%B members left over from group A (modulus)\n    A_mod = 11\n\n    # Find solutions for A and B\n    while True:\n        remainder = (A + B - 1) % bus_capacity\n        if remainder == A_mod:\n            solutions = solve((equation, Eq(A % bus_capacity, A_mod)), (A, B))\n            if solutions:\n                A_val, B_val = solutions[0]\n                break\n        A += 1\n\n    # Total number of photographs each group takes with the other\n    total_photos = A_val * B_val\n    # Number of full rolls of film\n    full_rolls = total_photos // bus_capacity\n    # Photo count on the last roll of film\n    last_roll_photos = total_photos % bus_capacity\n    # How many more pictures can the last roll of film take\n    remaining_photos = bus_capacity - last_roll_photos\n\n    return remaining_photos\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_paid = 12.15\n    cost_per_cupcake = 3.25\n    total_cupcake_cost = 3 * cost_per_cupcake\n    total_drink_cost = total_paid - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n\n    return cost_per_can\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20-8, 31-20, 41-31, 50-41]  # Calculate the differences\n    # Calculate the differences of the differences (second differences)\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    # Since it's a double arithmetic sequence, second differences should be constant.\n    # Add the constant second difference to the last first difference to get the new difference.\n    next_difference = differences[-1] + second_differences[-1]\n    # Add this new difference to the last term to get the next term.\n    next_term = 50 + next_difference\n\n    return next_term\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_sum = 5 * 8\n    sum_of_numbers = sum(numbers)\n    missing_number = total_sum - sum_of_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # The first pass is from A to any of the three remaining individuals (3 choices)\n    # The second pass cannot be back to A and must exclude the person who just had the ball, leaving 2 choices.\n    # The third pass must be back to A, so only one choice remains.\n    total_methods = 3 * 2 * 1\n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, ming = symbols('daniel ming')\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper = 25  # weight of each paper in grams\n    number_of_students = 250  # number of students\n    total_weight_grams = weight_per_paper * number_of_students  # total weight in grams\n    \n    # Convert grams to kilograms\n    grams_in_kilogram = 1000\n    total_weight_kilograms = total_weight_grams / grams_in_kilogram\n\n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    cards = [1, 2, 8, 9]\n    max_product = 0\n\n    for permut in permutations(cards):\n        num1 = permut[0] * 10 + permut[1]\n        num2 = permut[2] * 10 + permut[3]\n        max_product = max(max_product, num1 * num2)\n\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let L be the length of the second bridge\n    # The people cover (L + 3) meters in 10 seconds and (9 + 3) meters in 8 seconds\n    # Speed = Distance / Time, Since the speed is constant,\n    # we get (9 + 3) / 8 = (L + 3) / 10\n    # Solving for L gives us L = ((12 / 8) * 10) - 3\n    L = ((12 / 8) * 10) - 3\n    return L\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - i) ** 2 - (998 - i) ** 2 for i in range(0, 996, 4))\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11, 55)  # 11:55 AM in hours, minutes\n    end_time = (13, 40)  # 1:40 PM in 24-hour format\n\n    # Calculate the difference in time\n    hours_diff = end_time[0] - start_time[0]\n    minutes_diff = end_time[1] - start_time[1]\n\n    # Convert everything to minutes\n    total_minutes = hours_diff * 60 + minutes_diff\n\n    return total_minutes\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Crystal has 11 people on her left and 7 on her right\n    people_on_left = 11\n    people_on_right = 7\n\n    # There are two rows, and Crystal is counted once in the total\n    total_people = (people_on_left + people_on_right + 1) * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000): # Check all three-digit numbers\n        if num % 3 == 0 and num % 11 == 0: # divisible by both 3 and 11\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0: # subtract one, divisible by both 2 and 7\n                return num\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(2, int(product ** (1/3)) + 1, 2):  # Start from 2, check up to the cubed root of the product, step by 2 for even numbers\n        if product % i == 0:  # Check if i is a factor of the product\n            second_even = i\n            if product % (second_even + 2) == 0:  # Check if the next even number is a factor\n                third_even = second_even + 2\n                if product % (third_even + 2) == 0:  # Check if the third consecutive even number is a factor\n                    first_even = second_even - 2\n                    if first_even * second_even * third_even == product:  # Check if these are the three numbers\n                        return third_even  # Return the largest number\n    return None  # If no suitable numbers are found\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    count = 0\n    # The maximum number for the first group is 9 (since the second group must have at least 1)\n    # The minimum number for the first group is 1 (since each group has to have at least one cupcake)\n    for x1 in range(1, 10):\n        # The second group takes the remainder of the cupcakes\n        x2 = 10 - x1\n        # Ensure the groups have different amounts\n        if x1 != x2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    if n == 0:\n        return float('inf')  # There are infinite factors for 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 2  # i and n/i\n            if i * i == n:\n                count -= 1  # Correct the extra count for a perfect square\n    return count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('08:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period_duration = timedelta(minutes=5)\n    number_of_lessons = 3\n    number_of_breaks = number_of_lessons - 1  # one less moving period than lessons\n\n    total_duration = (lesson_duration * number_of_lessons) + \\\n                     (moving_period_duration * number_of_breaks)\n    break_start_time = start_time + total_duration\n    \n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit, cannot be 0\n        for b in range(10):  # tens digit\n            for c in range(10):  # ones digit\n                if (b == a + 5) and (c == b - 2) and (a + b + c) / 2 == b:\n                    abc = 100 * a + 10 * b + c\n                    return abc\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    a = 28\n    b = 84\n    c = 126\n\n    # Find GCD of the two numbers and then GCD of the result with the third number\n    greatest_divisor = gcd(gcd(a, b), c)\n\n    return greatest_divisor\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_notes = 57\n    spent_notes_10 = 0.6\n    spent_notes_5 = 0.25\n    remaining_ratio = 2  # 2 times as many $10 notes as $5 notes left\n    \n    # Let x be the number of $10 notes & y be the number of $5 notes originally.\n    x, y = symbols('x y')\n    \n    # Equation 1: Total number of notes\n    eq1 = Eq(x + y, total_notes)\n    \n    # Equation 2: Relation between remaining $10 and $5 notes after spending \n    eq2 = Eq((1 - spent_notes_10) * x, remaining_ratio * (1 - spent_notes_5) * y)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    # Calculate the number of notes spent and the total cost of the bag\n    notes_5_spent = solutions[y] * spent_notes_5\n    notes_10_spent = solutions[x] * spent_notes_10\n    \n    cost_of_bag = notes_5_spent * 5 + notes_10_spent * 10\n    \n    return cost_of_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins_initially = solutions[troy] + solutions[adam]\n\n    return total_coins_initially\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    # Let x be the total amount of money Hanson had at first\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, he had:\n    # x - (x/4 + 3) left\n    remaining_after_CDs = x - (x/4 + 3)\n\n    # After spending 3/5 of the remaining money and an additional $6, he had $24 left\n    # (remaining_after_CDs - 3/5 * remaining_after_CDs - 6) == 24\n    equation = Eq(remaining_after_CDs - 3/5 * remaining_after_CDs - 6, 24)\n\n    # Solve the equation to find the value of x (initial amount of money Hanson had)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        digits = [int(d) for d in str(number)]\n        product = 1\n        for d in digits:\n            product *= d\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for d1 in range(1, 8):  # The first digit can't be 0 and sum is 8, so it must be less than 8.\n        for d2 in range(0, 9):  # The second digit can be from 0 to 9.\n            for d3 in [0, 2, 4, 6, 8]:  # The third digit needs to be even.\n                if d1 != d2 and d1 != d3 and d2 != d3 and d1 + d2 + d3 == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # In the worst case, Darrell could draw all the blue and white beads first before getting the green beads\n    # So to ensure getting 5 green beads, he needs to draw all blue and white beads plus 5 green beads\n    \n    blue_beads = 5\n    white_beads = 6\n    green_needed = 5\n\n    worst_case_draws = blue_beads + white_beads + green_needed\n    return worst_case_draws\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for n in range(7, 54, 5):  # Start from 7 as it's the first multiple of 7, end at 54, step by 5 as we're looking for multiples of 5\n        if (n + 1) % 7 == 0:   # If one more than this number is a multiple of 7\n            return n            # Return the number found\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    missing_number = (1 / 4 * 16) / (1 / 2)\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the total number of games in the group stage\n    # A single round-robin tournament in a group of 4 means each team plays every other team once\n    games_per_group = 4 * (4 - 1) // 2  # C(4, 2)\n    total_group_games = games_per_group * 4  # since there are 4 groups\n\n    # Calculate the total number of games in the knockout rounds\n    # Start with the top 8, then top 4, top 2, and last game for the top positions\n    total_knockout_games = 8 - 1 + 4 - 1 + 2 - 1 + 1  # since every round halves the number of teams\n\n    # Sum of all games from both stages\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # A completes the job in x days\n    # B completes the job in x + 12 days\n    # 1/x is the rate of work done by A\n    # 1/(x + 12) is the rate of work done by B\n    # Combined rate of work by A and B is 1/x + 1/(x + 12)\n    # The job is only one job (1), so the combined rate * number of days to complete together should be 1\n\n    x = symbols('x')  # Number of days taken by A to complete the work alone\n    combined_rate = 1 / x + 1 / (x + 12)\n    \n    # Equation representing completion of the job\n    equation = Eq(combined_rate * (x * (x + 12) / (2 * x + 12)), 1)\n    \n    # Solve for x\n    days_A = solve(equation, x)[0]\n    days_together = (days_A * (days_A + 12)) / (2 * days_A + 12)  # Total number of days to complete the job together\n    \n    return days_together\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(9, 4)\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has, and a be the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    initial_stickers = final_stickers - stickers_bought + stickers_given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Since 15 and 21 are factors of the number, the number must be a multiple of their least common multiple (LCM)\n    # The LCM of 15 and 21 can be found by multiplying them together and dividing by their greatest common divisor (GCD)\n    from math import gcd\n    lcm_15_21 = (15 * 21) // gcd(15, 21)\n    \n    # Now, since the number has exactly 8 factors, it must have the form p^3 * q where p and q are prime numbers\n    # or the form p^7, where p is a prime, or p^1 * q^1 * r^1 where p, q, r are prime numbers.\n    # (since 1 and the number itself are also counted as factors)\n    # We will check which form matches and find the prime factorization. \n\n    from sympy import factorint, divisors\n    \n    # Check different powers of primes that match lcm_15_21\n    for x in (1, 3, 7):\n        # Get prime factors of the LCM raised to the power, factorint returns a dictionary\n        prime_factors = factorint(lcm_15_21 ** x)\n        \n        # If the number of factors matches 8, we use it to find all divisors\n        num_factors = 1\n        for k, v in prime_factors.items():\n            num_factors *= v+1\n        if num_factors == 8:\n            # Get all divisors of the number that has exactly 8 factors\n            all_factors = divisors(lcm_15_21 ** x)\n            return sum(all_factors)\n            \nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    nums = '0123456789'\n    for perm in permutations(nums):\n        if perm[0] != '8':  # The leftmost digit must be 8\n            continue\n        if '0' in perm[1:]:  # Ensuring '0' is not leading any number\n            if int(''.join(perm[0:2])) % 2 == 0 and \\\n               int(''.join(perm[0:3])) % 3 == 0 and \\\n               int(''.join(perm[0:4])) % 4 == 0 and \\\n               int(''.join(perm[0:5])) % 5 == 0 and \\\n               int(''.join(perm[0:6])) % 6 == 0 and \\\n               int(''.join(perm[0:7])) % 7 == 0 and \\\n               int(''.join(perm[0:8])) % 8 == 0 and \\\n               int(''.join(perm[0:9])) % 9 == 0 and \\\n               int(''.join(perm[0:10])) % 10 == 0:\n                return ''.join(perm)\n    return None\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda = 36\n    belinda_after_giving = belinda - 7\n    matthew = belinda_after_giving\n\n    return matthew\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_rate = 10\n    efficiency_increase = 0.50\n    new_rate = base_rate * (1 + efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # Given numbers\n    a = 2012\n    b = 1274\n    \n    # Compute the greatest common divisor of the difference\n    D = gcd(a - b, a)\n\n    # Given the numbers give the same remainder R when divided by D,\n    # R is the remainder when either number is divided by D, e.g., 2012 % D\n    R = a % D\n\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Assuming all animals are ducks, they have 2 legs each\n    total_ducks = 7\n    total_legs_when_all_ducks = total_ducks * 2  # Total legs when all are ducks\n    \n    # The excess legs, when compared to ducks, must belong to rabbits (since rabbits have 2 more legs than ducks)\n    excess_legs = 20 - total_legs_when_all_ducks\n    \n    # Since each rabbit has 2 legs more than ducks, the number of rabbits can be found by dividing the excess legs by 2\n    num_rabbits = excess_legs // 2\n    \n    return num_rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Each turn, a player can reduce the total count by 1, 3, 4, or 6.\n    # Let's find out the best strategy by going backwards.\n    # We initialize a list where each index represents the number of numbers remaining on the blackboard\n    # and the value will show if the current player is in a winning position (True) or not (False).\n    wins = [False] * 53\n    \n    # Define the possible moves a player can make.\n    possible_moves = [1, 3, 4, 6]\n\n    # Fill in the list based on whether there's a winning move available.\n    for i in range(1, 53):\n        wins[i] = not all(wins[i - move] for move in possible_moves if i - move >= 0)\n\n    # The first player wins if there's a winning move from the start (52 remaining).\n    first_player_wins = wins[52]\n\n    # If the first player can win, we need to find the winning strategy.\n    strategy = []\n    if first_player_wins:\n        current_numbers = 52\n        while current_numbers > 0:\n            # Find a move that leaves the opponent in a losing position.\n            for move in possible_moves:\n                if current_numbers - move >= 0 and not wins[current_numbers - move]:\n                    strategy.append(move)\n                    current_numbers -= move\n                    break\n\n    # Betty should go first if the first player is in a winning position, otherwise she should go second.\n    go_first = first_player_wins\n    return go_first, strategy\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5/7) * initial_amount\n    remaining = initial_amount - given_to_grace\n    given_to_evelyn = (1/9) * remaining\n    left_over = remaining - given_to_evelyn\n\n    return left_over\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculating the last digit of 4^2009 \n    last_digit_4 = (4 ** (2009 % 2)) % 10  # As 4^x has a cycle of 2 for last digits\n\n    # Calculating the last digit of 6^2010\n    last_digit_6 = (6 ** (2010 % 1)) % 10  # As 6^x always ends with 6\n\n    # Adding the last digits and getting the last digit of the sum\n    ans = (last_digit_4 + last_digit_6) % 10\n\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 64, 2):\n        for five_gram_weights in range(0, 64, 5):\n            if two_gram_weights + five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_six_players = 6 * 150\n    average_height_four_players = 150 - 2\n    total_height_four_players = 4 * average_height_four_players\n    total_height_two_players = total_height_six_players - total_height_four_players\n    average_height_two_players = total_height_two_players / 2\n    return average_height_two_players\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the flow rate of pipe A\n    x = symbols('x')\n\n    # Since B's flow rate is twice A's, let y be the flow rate of B where y = 2x\n    y = 2 * x\n\n    # Let z be the flow rate of pipe C\n    z = symbols('z')\n\n    # Two equations based on the given conditions in tons\n    equation1 = Eq(18 * x + 18 * z, 18 * (x + y + z))  # When A and C are on, 18 tons of water are from A\n    equation2 = Eq(27 * y + 27 * z, 27 * (x + y + z))  # When B and C are on, 27 tons of water are from B\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, z))\n\n    # Calculate the capacity of the pool based on the flow rate of A (solutions[x]) and B (twice the flow rate of A)\n    capacity = 18 * (solutions[x] + 2 * solutions[x] + solutions[z])\n\n    return capacity\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    rex_questions_answered = total_questions - 1  # Rex answered all but one\n    rex_score = 66\n\n    # Let's define correct answers as 'c', incorrect answers as 'i'\n    # Then we have the following equations based on the prompt:\n    # 4c - 2i = 66\n    # c + i = 24\n    # From the above, we can solve for 'c' (the number of correct answers)\n\n    # Simplify the first equation: 2c - i = 33\n    # Substitute i from the second equation into the first:\n    # 2c - (24 - c) = 33 => c = (33 + 24) / 3\n\n    correct_answers = (rex_score + rex_questions_answered) // 3\n\n    return correct_answers\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let a be the first term\n    # Let d be the common difference\n    # Sn (sum of first n terms) = n/2 * (2a + (n-1)d)\n    \n    # Equations based on given sum of terms\n    # S8 = 32 => 8/2 * (2a + (8-1)d) = 32 => 4 * (2a + 7d) = 32 => 2a + 7d = 8 (1)\n    # S22 = 44 => 22/2 * (2a + (22-1)d) = 44 => 11 * (2a + 21d) = 44 => 2a + 21d = 4 (2)\n\n    # Subtract equation (1) from (2)\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 14d = -4\n    # d = -4 / 14\n    d = -4 / 14\n\n    # Use d to solve for a from equation (1)\n    # 2a + 7 * (-4/14) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 5\n    a = (8 - 7 * d) / 2\n\n    # Find the sum of the first 15 terms using a and d\n    # S15 = 15/2 * (2a + (15-1)d)\n    S15 = 15/2 * (2 * a + (15 - 1) * d)\n    \n    return S15\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum from 1 to 20\n    sum_1_to_20 = sum(range(1, 21))\n    # Multiply by 2 for the mirrored part and subtract the 20 at the mirror edge\n    total_sum = 2 * sum_1_to_20 - 20\n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n    # There are 5 choices for the first letter, 4 for the second, 3 for the third, and 2 for the last\n    # This is a permutation of 5 items taken 4 at a time\n    num_ways = factorial(5) // factorial(5-4)\n    \n    return num_ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n            \nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    balls_left_first = 20\n    balls_left_second = 10\n    difference = balls_left_first - balls_left_second\n    \n    # we start with the difference because every student, including the late one, got meatballs.\n    meatballs_per_student = difference\n    \n    while True:\n        # check if the total minus the meatballs for the last student (plus the remainder) is divisible\n        if (meatballs_per_student - difference + balls_left_first) % meatballs_per_student == 0:\n            return meatballs_per_student\n        meatballs_per_student += difference\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    first_day = total_questions / 2 + 7\n    second_day = (total_questions - first_day) / 2 - 5\n    third_day = 23\n\n    equation = Eq(first_day + second_day + third_day, total_questions)\n    answer = solve(equation, total_questions)\n\n    return answer[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    ans = '4/25' if fraction_value > decimal_value else '0.17'\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # 1 litre is 1000 ml\n    poured_volume = 200 * 3  # 200 ml into each of 3 cups\n\n    remaining_volume = initial_volume - poured_volume\n\n    return remaining_volume\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, planted_each_month = symbols('original_roses original_daisies planted_each_month')\n\n    total_flowers_initial = Eq(original_roses + original_daisies, 300)\n    future_roses = Eq(original_roses + planted_each_month, 280)\n    future_daisies = Eq(original_daisies + planted_each_month, 180)\n\n    solutions = solve((total_flowers_initial, future_roses, future_daisies), (original_roses, original_daisies, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n    \n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    twelfth_number = tenth_number + 2 * common_difference\n\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = sum(1 for i in range(1, 251) if i**0.5 % 1 == 0)\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = 0.20 * 10 + 0.80 * 20 + 0.90 * 30\n    overall_percentage = (total_correct / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Convert 6 decimeters to centimeters\n    side_length_cm = 6 * 10  # 1 decimeter = 10 centimeters\n    # Calculate the area of one brick in square centimeters\n    area_one_brick_cm2 = side_length_cm ** 2\n    \n    # Calculate the total area covered by 80 bricks\n    total_area_cm2 = area_one_brick_cm2 * 80\n    \n    # Given area of smaller brick\n    smaller_brick_area_cm2 = 64\n    \n    # Calculate the number of smaller bricks needed to cover the same area\n    number_of_smaller_bricks = total_area_cm2 / smaller_brick_area_cm2\n    \n    return int(number_of_smaller_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fruit, water = symbols('fruit water')\n\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (fruit, water))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n            \n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    increase_fraction = 1/10\n    increase_amount = initial_amount * increase_fraction\n    final_amount = initial_amount + increase_amount\n    return final_amount\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_students = 500\n    # Let the number of boys be x\n    # Then the number of girls is x + 30\n    # The total number of students is the number of boys plus the number of girls\n    # which is x + (x + 30) = 500 \n    # Solving for x we get x + x + 30 = 500 \n    # 2x + 30 = 500 \n    # 2x = 500 - 30 \n    # 2x = 470 \n    # x = 470 / 2 \n    # x = 235 (the number of boys)\n  \n    # The number of girls is therefore 235 + 30\n    girls = 235 + 30\n    return girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            ans = (i, n // i)\n            return ans\n    return None\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boys = 0\n    girls = 0\n    layer = 0\n    while (boys - girls) != 31:\n        layer += 1\n        boys += layer * 4\n        if layer != 1:\n            girls += (layer - 1) * 4\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    import math\n    # Calculate the number of digits of A\n    A_log = (2018 * math.log10(4)) + (2018 * math.log10(25))\n    num_digits = int(math.floor(A_log)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_a = 10\n    length_b = 5 * length_a\n    total_length = length_a + length_b\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    players = 5\n    team_size = 3\n    number_of_teams = comb(players, team_size)\n    return number_of_teams\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of apples Mr. Aziz had in the beginning as 'x'.\n    x = symbols('x')\n    \n    # According to the given problem, he sold 1/5 of the apples on Monday.\n    # So, the number of apples left is x - x/5 = (4/5)*x\n    # He then sold 80 apples on Tuesday.\n    # So, the number of apples left now is (4/5)*x - 80\n    # Finally, he was left with 30% of the apples he had at first.\n    # So, at the end he has 0.3*x apples.\n    # We can set up an equation (4/5)*x - 80 = 0.3*x\n\n    equation = Eq((4/5)*x - 80, 0.3*x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The value of x is the initial number of apples Mr. Aziz had\n    # He was left with 30% of these apples in the end\n    apples_in_the_end = 0.3 * solution[0]\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x1 < x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # Ensure x2 is greater than x1\n            for x3 in range(x2+1, 14):  # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n    \n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a variable for the first number in the sequence\n    x = symbols('x')\n    \n    # Create the equation as per the question\n    equation = Eq((x + 6) + 6, (x + (x + 12)) / 3 + 6)\n    \n    # Solve the equation\n    first_number = solve(equation, x)[0]\n    \n    # Calculate the sum of the seven consecutive even numbers\n    sum_seven_numbers = sum([first_number + 2*i for i in range(7)])\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n\n    length_per_piece = total_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * 3 / 4\n    return afternoon_cookies\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    # Total sum of 9 numbers\n    total_sum_9 = 9 * 140\n    # Subtract the one number (180) from the total sum to find the sum of the other 8 numbers\n    sum_of_8 = total_sum_9 - 180\n    # Calculate the average of the 8 numbers\n    average_of_8 = sum_of_8 / 8\n    return average_of_8\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    purple, yellow, white, red = symbols('purple yellow white red')\n    # Ben has twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    # Ben has 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n    # If 28 orchids are red\n    equation4 = Eq(red, 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculate total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n\n    cost_price = selling_price / (1 + (profit_percentage / 100))\n    new_profit = 5000\n    \n    new_profit_percentage = (new_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    difference_of_odds = 2\n    n = 20\n\n    # The nth term of an arithmetic sequence can be found with the formula:\n    # nth_term = first_term + (n - 1) * difference\n    nth_odd_number = first_odd_number + (n - 1) * difference_of_odds\n    \n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    return 5 + 2  # The Ferrari driver overtook 5 cars and finished in second place\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Since trees are planted on both sides, we multiply the number of trees by 2\n    # Plus 1 because there's also a tree at the start of the highway\n    num_trees_one_side = (length_of_highway // distance_between_trees) + 1 \n    total_trees = num_trees_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    price_difference = 8.01\n    amy_book_price = lily_book_price + price_difference\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometres = 1.5\n    metres = kilometres * 1000\n    return metres\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    # Formula for the sum of interior angles of a polygon: (n - 2) * 180\n    total_interior_angles = (sides - 2) * 180\n    # Since it's a regular polygon, all interior angles are equal.\n    interior_angle = total_interior_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total_sum = sum(int('5' * i) for i in range(1, 21))\n    ans = total_sum % 10000\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(y, x):\n    # Time taken by 1 man to build 1 wall\n    time_for_1_man_1_wall = 2 * 3\n\n    # Total time for y men to build x walls\n    total_time_for_x_walls = (time_for_1_man_1_wall * x) / y\n\n    return total_time_for_x_walls\n\n# Example: Calculate time taken by 6 men to build 5 walls\nans = solution(6, 5)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 25 / 100 * total_people\n    fraction_women = 1 / 5 * total_people\n    children = total_people - percent_men - fraction_women\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let x be the number of checked shirts\n    # Then 7x is the number of white shirts\n    # Total shirts sold is 72\n    # x + 7x = 72\n    # 8x = 72\n    # x = 72 / 8\n    # x = 9 (checked shirts)\n    # Therefore, white shirts = 7 * 9\n    \n    checked_shirts = 72 // 8\n    white_shirts = 7 * checked_shirts\n\n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congs = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congs)\n    return ans[0]\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for num in range(999, 99, -1):  # Start from the largest 3-digit number and go down\n        if num % 9 == 0 and num % 2 != 0:  # Check if number is divisible by 9 and is odd\n            tens_digit = (num // 10) % 10  # Extract the tens digit\n            if tens_digit % 4 == 0:  # Check if the tens digit is divisible by 4\n                return num\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Since there is no actual pattern provided, we cannot implement the solution.\n    # Typically, this code would analyze the input pattern and perform computations\n    # to find the value, which might involve counting shapes, analyzing geometric\n    # progressions, or other pattern recognition techniques.\n    \n    # But as no pattern is given, the function will return a placeholder value.\n    \n    return \"Pattern not provided\"\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # According to the worst-case scenario of the Pigeonhole principle,\n    # to ensure drawing 2 balls of the same colour, you need to draw\n    # 1 more than the number of colours you have.\n\n    # Number of colours:\n    num_colours = 3  # white, red, green\n\n    # Worst case, picking one of each colour:\n    worst_case_without_pair = num_colours\n\n    # Drawing one more to ensure at least one pair:\n    draws_to_ensure_pair = worst_case_without_pair + 1\n\n    return draws_to_ensure_pair\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    num_years = 8\n    depreciation_factor = 0.88\n\n    final_value = initial_value * (depreciation_factor ** num_years)\n    \n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # One-third of the number of girls is equal to one-half of the number of boys\n    equation1 = Eq(1/3 * girls, 1/2 * boys)\n\n    # The total number of children is the sum of boys and girls\n    equation2 = Eq(girls + boys, 390)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number, _ = solve_congruence(*congruences)\n    return number if number < 60 else None\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Average spending from January to April\n    jan_to_apr = 300 * 4\n    \n    # Average spending from May to July\n    may_to_jul = 250 * 3\n    \n    # Total spending from August to September\n    aug_to_sep = 750\n    \n    # Average spending from October to December\n    oct_to_dec = 300 * 3\n    \n    # Total spending from January to December\n    total_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Total months from January to December\n    total_months = 12\n    \n    # Average spending per month\n    average_spending = total_spending / total_months\n    \n    return average_spending\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    # Calculate the unit rate per day\n    unit_rate_per_day = 24 / 5\n    # Calculate the total amount picked over 8.5 days\n    total_kg = unit_rate_per_day * 8.5\n    return total_kg\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n\n    # Father's age now\n    father_age_now = father_age_future - (father_age_future - tom_age_now)\n\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of votes for each candidate\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Equation 1: The total number of votes is 400\n    equation1 = Eq(jordan + evie + emily, 400)\n\n    # Equation 2: Jordan got 3 times as many votes as Emily\n    equation2 = Eq(jordan, 3 * emily)\n\n    # Equation 3: Evie got 20 fewer votes than Jordan\n    equation3 = Eq(evie, jordan - 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    # Returning the number of votes Evie got\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Jeff catches the train\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    \n    # Duration of train journey\n    train_duration = timedelta(hours=1, minutes=35)\n    \n    # Arrival time in London\n    arrival_time_london = departure_time + train_duration\n    \n    # Duration of walk to work\n    walk_duration = timedelta(minutes=40)\n    \n    # Arrival time at work\n    arrival_time_work = arrival_time_london + walk_duration\n    \n    # Format the time to HHMM\n    ans = arrival_time_work.strftime(\"%H%M\")\n    \n    return ans\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        if sum(int(d) for d in format(N, 'b4')) == 5 and sum(int(d) for d in format(N, 'b6')) == 8 and sum(int(d) for d in format(N, 'b8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 options for the hundreds place (2 or 3),\n    # since it cannot be 0 (as it's a three-digit number)\n    hundreds_place = 2\n\n    # There are 3 options for the tens place (0, 2, or 3),\n    # as it can be 0 for a valid three-digit number\n    tens_place = 3\n\n    # Similarly, there are 3 options for the units place (0, 2, or 3)\n    units_place = 3\n\n    # The total number of different three-digit numbers\n    # can be calculated by multiplying the possibilities\n    # for each place value\n    total_numbers = hundreds_place * tens_place * units_place \n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_hotdog = 1.10 / 6\n    cost_for_12_hotdogs = cost_per_hotdog * 12\n    return cost_for_12_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag = 16  # cost in pence\n    total_amount = 200  # total amount in pence (1 pound = 100 pence)\n    \n    num_bags = total_amount // cost_per_bag  # floor division to get whole number of bags\n    \n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    acorns_difference = 14\n    acorns_chip = (total_acorns + acorns_difference) / 2\n\n    return acorns_chip\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "def solution():\n    from math import factorial\n\n    # Calculate the factorial of the total number of books\n    total_books = factorial(6 + 2)\n\n    # Calculate the factorial of the number of fiction books (identical)\n    fiction_books = factorial(6)\n\n    # Calculate the factorial of the number of comic books (identical)\n    comic_books = factorial(2)\n\n    # Apply the formula for permutations of identical items: \n    # Total permutations / (permutations of identical items A * permutations of identical items B)\n    count = total_books // (fiction_books * comic_books)\n\n    return count\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    # Since we are looking to use the least number of primes summing to 51,\n    # we'd try to use the largest prime number less than or equal to 51 as much as possible.\n    # The largest prime less than 51 is 47, but using 47 only once will leave us with 4,\n    # which is not a prime number. So we use the second-largest prime number, 43.\n    # 51 - 43 leaves us with 8, which is the sum of the prime number 3 and prime number 5.\n    \n    # Therefore, the minimum primes we can use are 43, 5, and 3.\n    # Also, we could use 17 three times to achieve the sum (17+17+17=51).\n    # However, there is no other way with fewer prime numbers.\n    # So the smallest count is 3.\n\n    return 3\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100): # Loop over all 2-digit numbers\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    cost_per_cd = 'x'\n    total_cost_expression = f'8 * {cost_per_cd}'\n    return total_cost_expression\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    novels, science_books = symbols('novels science_books')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n    \n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n    total_eggs = eggs_per_tray * num_trays\n    return total_eggs\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2% interest rate\n    \n    interest = initial_amount * interest_rate\n    \n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for four_page_recipients in range(total_penpals + 1):\n        three_page_recipients = total_penpals - four_page_recipients\n        if 4 * four_page_recipients + 3 * three_page_recipients == total_pages:\n            return three_page_recipients\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apple_pie_kg = 750 / 1000\n    apple_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (apple_pie_kg + apple_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n    total_people = people_in_front + position_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    time_in_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / time_in_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # To ensure we have all 3 different colored balls,\n    # consider the worst case scenarios using the Pigeonhole principle\n    # If we take 5 red, and then 5 white, we still do not have 3 different colors.\n    # So we must draw at least 1 more (a yellow) to ensure 3 different colors.\n\n    # Calculate the least number of balls must be drawn\n    balls_drawn = 5 + 5 + 1  # Red + White + 1 Yellow\n\n    return balls_drawn\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Represent the length of the shorter piece as a symbol\n    shorter_piece = symbols('shorter_piece')\n    \n    # Equation representing the relationship between the two pieces\n    equation = Eq(shorter_piece + 2 * shorter_piece, 12.75)\n    \n    # Solve the equation to find the length of the shorter piece\n    length_shorter_piece = solve(equation, shorter_piece)[0]\n    \n    # Calculate the length of the longer piece\n    length_longer_piece = 2 * length_shorter_piece\n    \n    return length_longer_piece\n    \nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum(range(2, 41, 2)) - sum(range(1, 40, 2))\n    return ans\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Linda's favorite book is the 14th from the left\n    position_from_left = 14\n    # There are 6 books to the right of her favorite book\n    books_to_right = 6\n\n    # Total number of books on the shelf is the position from the left plus the books to the right\n    total_books = position_from_left + books_to_right\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of coins they get in the class\n    x = symbols('x')\n    \n    # Gigi had 120 coins before and Lily had 24 coins before\n    gigi_original = 120\n    lily_original = 24\n    \n    # Set up the equations based on the problem statement\n    equation = Eq((gigi_original + x), 3 * (lily_original + x))\n    \n    # Solve the equation for x\n    coins_gotten = solve(equation, x)\n\n    return coins_gotten[0]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    ans = sum(not isprime(card) for card in range(1, 21))\n\n    return ans\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    \n    # Age difference between Brian and his father\n    age_difference = father_age - brian_age\n    \n    # Iterate over the years to find when their ages are reversed\n    while True:\n        brian_age += 1\n        father_age += 1\n        if int(str(father_age)[::-1]) == brian_age and father_age - brian_age == age_difference:\n            return brian_age\n            break\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 != 0:\n            if sum(map(int, str(i))) == 11:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Assuming you have a pot that can only boil one egg at a time\n    time_per_egg = 5\n    num_eggs = 3\n\n    # Total time is simply time taken for one egg times the number of eggs\n    total_time = time_per_egg * num_eggs\n\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    capacity_per_cabin = 6\n    \n    min_cabins = (students + capacity_per_cabin - 1) // capacity_per_cabin\n    \n    return min_cabins\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be 'a' and common difference be 'd'.\n    a, d = symbols('a d')\n    \n    # First 4 terms of the sequence: a, a+d, a+2d, a+3d\n    # The sum of the first 4 terms is 124 (equation 1)\n    equation1 = Eq(a + (a + d) + (a + 2*d) + (a + 3*d), 124)\n    \n    # Last 4 terms of the sequence: a+(n-4)d, a+(n-3)d, a+(n-2)d, a+(n-1)d\n    # Let's assume n is the total number of terms in the sequence.\n    n = symbols('n')\n    \n    # We don't know the sum of the last 4 terms yet, but we know their structure.\n    \n    # Since the sum of all terms is 210, the average term is 210/n\n    # The average term is also the middle term, a+(n-1)/2 * d\n    # So we need to multiply the middle term by n to get the total sum which is 210\n    # 210 = n(a + (n-1)/2 * d), which simplifies to 2*210 = n(2a + (n-1)d) (equation 3)\n    equation3 = Eq(n*(2*a + (n - 1)*d), 420)\n    \n    # The sum of the last 4 terms is 156 (equation 2)\n    # This uses n to represent the position of the last term\n    equation2 = Eq((a + (n - 4)*d) + (a + (n - 3)*d) + (a + (n - 2)*d) + (a + (n - 1)*d), 156)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n\n    # Going through the solutions, only the positive integer value for n makes sense\n    for sol in solutions:\n        if sol[n].is_integer and sol[n] > 0:\n            return sol[n]\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11160  # Convert 11.16 kg to grams\n    cookie_dough = 45 * 240\n    brownie_dough = 150 * 2\n    used_dough = cookie_dough + brownie_dough\n    remaining_dough = total_dough - used_dough\n\n    return remaining_dough / 1000  # Convert back to kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    dan_yesterday = 1000\n    dan_today = symbols('dan_today')\n    inequality = dan_today < dan_yesterday\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Perform the inverse of the second day's consumption\n    remaining_biscuits = 2 * (remaining_biscuits + 2)\n    # Perform the inverse of the first day's consumption\n    total_biscuits = 2 * (remaining_biscuits + 4)\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposit days (odd days)\n            money += 5\n        else:  # Spending days (even days)\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71]\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_gums = 20\n    children = 5\n    gums_per_child = total_gums // children\n    return gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    \n    # Calculate number of terms in the arithmetic sequence\n    # n = (last_term - first_term) / difference + 1\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence\n    # S_n = n / 2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (436 + 721) - (682 + 446)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    def is_perfect_square(num):\n        root = int(num**0.5)\n        return num == root * root\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    correct_statements = 0\n    for num in range(100, 1000):\n        statements = [\n            num % 27 == 0,\n            num % 7 == 0,\n            digit_sum(num) == 17,\n            is_perfect_square(num),\n            89100 % num == 0\n        ]\n        \n        if statements.count(True) == 3:\n            return num  # This is the desired block number\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be number of friends and y be the chocolates Natalia has.\n    x, y = symbols('x y')\n    \n    # Create equations based on the given information.\n    equation1 = Eq(y - 18*x, 41)    # If she gave each friend 18 pieces, she has 41 in excess.\n    equation2 = Eq(23*x - y, 34)    # If she gave each friend 23 pieces, she would be short of 34 pieces.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the number of chocolates left when giving 20 pieces each.\n    chocolates_left = solutions[y] - 20 * solutions[x]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    book_cost_percentage = 0.15\n    dvd_cost_percentage = 0.30\n\n    money_after_book = total_money * (1 - book_cost_percentage)\n    money_after_dvd = money_after_book * (1 - dvd_cost_percentage)\n\n    return money_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 // 7\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    mulan_push_ups = 'x'  # Represent Mulan's push-up count with x\n    best_boy_push_ups = 50\n    inequality = f'{mulan_push_ups} > {best_boy_push_ups}'\n    return inequality\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_needed = 40\n    blown_up = 22\n    burst = 3\n    still_needed = total_needed - (blown_up - burst)\n    return still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    return \"The question regarding the tournament and the number of games to be played is incomplete. There are no details provided about the tournament structure, the total number of teams or players, or the current state of the tournament. Please provide the necessary details to answer the question.\"\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # We should give out the candies in an increasing manner, i.e. 1, 2, 3, ...\n    # The sum of the first n-1 natural numbers is given by the formula: n*(n-1)/2.\n    # Let's the find the least amount for the child with the most pieces by using the sum formula \n    # and subtracting from the total number of candies.\n\n    total_candies = 88\n    num_children = 8\n    \n    # The sum of first (num_children - 1) natural numbers (since one child must get the most)\n    sum_of_candies_for_minimal_distribution = (num_children-1) * (num_children-2) // 2 \n    \n    # The least possible number of pieces for the child with the most pieces\n    least_pieces_for_most = total_candies - sum_of_candies_for_minimal_distribution\n\n    return least_pieces_for_most\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Ratio of girls to boys is 7:9\n    ratio_girls_to_boys = 7 / 9\n    \n    # There are 16 more boys than girls\n    more_boys = 16\n    \n    # Let the number of girls be 7x and number of boys be 9x. Then 9x = 7x + 16\n    # Simplify to get x, the multiplier for the ratio parts\n    x = more_boys / (9 - 7)\n    \n    # Calculate the number of boys and girls\n    boys = 9 * x\n    girls = 7 * x\n    \n    # Total number of pupils in class 1A is the sum of boys and girls\n    total_pupils = boys + girls\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = 0\n    # Calculate the correct sum if no mistake was made\n    for i in range(37):\n        correct_sum += (1 + 3 * i)\n    \n    # The difference between the correct sum and the actual sum\n    # would be twice the amount of the error (because adding instead of subtracting)\n    mistake = (correct_sum - 2011) // 2\n\n    # Find out who made the mistake\n    who_made_mistake = (mistake - 1) // 3 + 1\n\n    return who_made_mistake\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    number_of_shortcakes = 25 / milk_per_shortcake\n    return int(number_of_shortcakes)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Assume the middle number of the consecutive numbers is x\n    # Then the sequence is (x-2), (x-1), x, (x+1), (x+2)\n    # So the sum of these numbers is 5x as there are 5 numbers\n    # The sum of 5x is given as 160\n    # Therefore x = 160 / 5\n    \n    x = 160 // 5\n    \n    # The number of balls the student with the most balls has is (x+2)\n    # So we calculate (x+2)\n    \n    return x + 2\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    length_in_cm = 200  # converting 2 meters to centimeters\n    piece_length = 6\n    number_of_pieces = length_in_cm // piece_length\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B first\n    a = 20  # Stack A has 20 stones\n    b = 20 - 4 # Stack B has 16 stones after Tom's turn\n\n    # To ensure Jerry wins, he needs to make the number of stones in both stacks equal\n    # Because the player who evens out the stacks usually has a winning strategy\n    stones_to_take = a - b  # Jerry should take this many stones to make stacks even\n    stack_to_take_from = 'A'  # Jerry should take stones from Stack A to even out\n\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.\"\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(10, 7)\n    return total_ways\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Define symbols for a, b, c\n    a = Symbol('a', integer=True)\n    b = Symbol('b', integer=True)\n    c = Symbol('c', integer=True)\n    \n    # Define the equation based on the nested fraction and solve for a, b, and c\n    equation = 1 + 1 / (a + 1 / (b + 1 / c)) - 13 / 10\n    \n    # Solve the equation\n    solutions = solve(equation)\n\n    # Explore the solutions to find the one which gives us whole numbers for a, b, and c\n    for sol in solutions:\n        if sol[a].is_integer and sol[b].is_integer and sol[c].is_integer:\n            # Calculate the final result\n            return sol[a] + 2 * sol[b] + 3 * sol[c]\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    # Compute the ones digit of 8 raised to the power of 30\n    ones_digit = (base ** exponent) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == 52:\n            return correct\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    common_difference = 5\n    \n    num_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (num_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls = symbols('boys girls')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Return the number of trees planted by boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Initialize the maximum number of days to 0\n    max_days = 0\n    # The peach eating must start from at least 1 peach per day\n    # We use a recursive approach to try all possible numbers of peaches  \n    # eaten on the first day and then call the recursive function to continue\n    # the process until we reach 100 peaches\n    def find_days(peaches_eaten, days, peaches_left):\n        nonlocal max_days\n        # Increment the day count\n        days += 1\n        # If we have eaten all the peaches, set max_days to the current days count if it is greater\n        if peaches_left <= 0:\n            if days > max_days:\n                max_days = days\n            return\n        # Otherwise, let's try all possible quantities for the next day that are\n        # not greater than the remaining peaches and not equal to the previously eaten quantity\n        for next_peaches in range(1, peaches_left + 1):\n            if next_peaches != peaches_eaten:\n                find_days(next_peaches, days, peaches_left - next_peaches)\n\n    # Start the recursive process with 1 peach eaten on the first day\n    find_days(0, 0, 100)\n    return max_days - 1  # Subtract 1 to correct for the initial calling day which is not counted\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 21):\n        if num % 6 == 1:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    result = sum([9 for i in range(5)])\n    return result\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight_solution = 600  # in grams\n    concentration_sugar = 0.48  # 48%\n    \n    weight_sugar = total_weight_solution * concentration_sugar  # weight of sugar in grams\n    weight_water = total_weight_solution - weight_sugar  # weight of water in grams\n    \n    return weight_water\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the youngest dwarf's age be x. Then the ages of the consecutive dwarfs are:\n    # x, x+1, x+2, ..., x+6 (since there are seven dwarfs with consecutive ages)\n    \n    # The sum of the youngest three dwarfs' ages is\n    # x + (x+1) + (x+2) = 3x + 3\n    # We are told this sum is 42, so\n    # 3x + 3 = 42\n    # Solving for x gives us the age of the youngest dwarf\n    x = (42 - 3) // 3  # Subtract 3 and divide by 3\n    \n    # Now we calculate the sum of the ages of the oldest three dwarfs:\n    # (x+4) + (x+5) + (x+6)\n    # = 3x + 15\n    # We substitute x with the value we found\n    sum_oldest_three = 3 * x + 15\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    # Solve for a, b, c, d using the principle of place value\n    for a in range(1, 10):    # a cannot be zero because it’s the thousand's place in abcd\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if 1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a == 1370:\n                        return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Since each fraction is 4/5, their sum will be (4/5) * number of terms\n    fractional_sum = (4/5) * 5\n    \n    # The whole number sum will be the sum of 19, 199, 1999, 19999, and 199999 \n    whole_number_sum = 19 + 199 + 1999 + 19999 + 199999\n    \n    # Adding the whole number sum and the fractional sum\n    total_sum = whole_number_sum + fractional_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5/8\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_current_age = janice_age + sister_age\n\n    years = (35 - total_current_age)\n\n    return years\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    total_marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - total_marks_in_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    decimal_multiplication = 0.3 * 100\n    box_value = 150 / decimal_multiplication\n    return box_value\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Equation representing the dad's age 6 years ago as 5 times his son's age at that time\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n\n    # Equation representing the sum of the dad's and son's current ages\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solve the system of equations for the current age of the dad and the son\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 1  # Initial value for the sequence\n    for i in range(2, 9):  # Start from 2 to 8 since we have 1 already\n        # Add fractions from 1/i to i/i then back down to 1/i\n        ans += sum([j/i for j in range(1, i+1)]) + sum([(i-j)/i for j in range(1, i)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    equation1 = Eq(6, (2/7) * milk_chocolates)\n    equation2 = Eq(milk_chocolates, (3/4) * total_sweets)\n\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let's denote the price of one football as 'f' and the price of one volleyball as 'v'.\n    # From the problem, we have two equations:\n    # 1 football + 2 volleyballs = 60 dollars => f + 2v = 60  (Equation 1)\n    # 2 footballs - 16 dollars = 60 dollars => 2f - 16 = 60  (Equation 2)\n\n    # Now we solve these two equations to find the values of 'f' and 'v'.\n    from sympy import symbols, Eq, solve\n     \n    # Define the symbols for football and volleyball\n    f, v = symbols('f v')\n     \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(f + 2 * v, 60)\n    equation2 = Eq(2 * f - 16, 60)\n     \n    # Solving the equations\n    solution = solve((equation1, equation2), (f, v))\n     \n    # Returning the price of one volleyball\n    return solution[v]\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Analyze the three attempts and hints given by John.\n    # From the first hint: two digits are correct and in their correct positions.\n    attempts = [\n        (1703, (2, 'correct')),\n        (2745, (2, 'wrong')),\n        (3541, (0, 'correct')),\n    ]\n\n    # Step through each possible 4-digit number\n    for number in range(1000, 10000):\n        num_str = str(number)\n        if len(set(num_str)) != 4:  # all digits must be different\n            continue\n        \n        # Check against the first attempt\n        if sum(1 for a, b in zip(num_str, str(attempts[0][0])) if a == b) != attempts[0][1][0]:\n            continue\n\n        # Check against the second attempt (although it cannot be used to determine a match, we use it to exclude impossibilities)\n        if any(a == b for a, b in zip(num_str, str(attempts[1][0]))):\n            continue\n\n        # Check if all digits match the third attempt, but not in the same position\n        if not all(num_str.count(str(attempts[2][0])[i]) == 1 and num_str[i] != str(attempts[2][0])[i] for i in range(4)):\n            continue\n\n        # Correct number found, return it\n        return int(num_str)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    # Number of books she has, one of each subject.\n    num_books = 3\n\n    # The different arrangements possible is factorial of number of books.\n    arrangements = factorial(num_books)\n\n    return arrangements\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    # Creating symbols for the ages of the students\n    a, b, c, d, e = symbols('a b c d e', integer=True)\n    \n    # Since the mode is the most frequent value and we have 5 students,\n    # at least two of them must have the same age, which is 7 (the mode).\n    eq_mode = Eq(a, 7)\n    \n    # The mean of the ages is 9, which gives us the equation for the average.\n    eq_mean = Eq((a + b + c + d + e) / 5, 9)\n    \n    # The median must be the middle value when the ages are ordered, which is 8.\n    # We set 'c' to be the median (middle value), as we will arrange the numbers a to e in increasing order.\n    eq_median = Eq(c, 8)\n    \n    # The range of their ages is 6, which gives us an equation for the difference between\n    # the oldest and youngest. If 'e' is the oldest and 'a' is the mode (and one of the youngest),\n    # then 'b' is the youngest since it needs to be less than or equal to 7, because 'a' cannot be the\n    # youngest (there needs to be at least one student younger than the mode to ensure the range of 6)\n    eq_range = Eq(e - b, 6)\n    \n    # Writing additional constraints to maintain the required order\n    eq_order1 = Eq(b <= 7)\n    eq_order2 = Eq(c >= b)\n    eq_order3 = Eq(d >= c)\n    eq_order4 = Eq(e >= d)\n\n    # Since e - b is 6, one of b and e must be 7 and the other must be 1 or 13 to give the largest range\n    eq_b = Eq(b, 1)\n    eq_e = Eq(e, 13)\n\n    # Solving the system of equations for a, b, c, d, e\n    solutions = solve((eq_mode, eq_mean, eq_median, eq_range, eq_order1, eq_order2, eq_order3, eq_order4, eq_b, eq_e), (a, b, c, d, e), dict=True)\n\n    # Sorting the ages to find the second oldest\n    ages = sorted([sol[a] for sol in solutions][0], key=lambda x: x.evalf())\n    \n    return ages[-2]  # Second oldest\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A can be in any of the middle three positions\n    positions_for_a = 3\n    # The remaining four people can be in any order\n    permutations_for_others = 4 * 3 * 2 * 1\n    \n    # Total number of ways\n    total_ways = positions_for_a * permutations_for_others\n    return total_ways\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Since there were 3 pink flowers and pink is 7 fewer than yellow,\n    # there must be 3 + 7 yellow flowers.\n    yellow_flowers = 3 + 7\n    \n    # The number of red flowers is 3 times that of yellow flowers.\n    red_flowers = 3 * yellow_flowers\n    \n    # Return the total number of red and yellow flowers.\n    return red_flowers + yellow_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # scheduled time of arrival\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    # delay duration\n    delay = timedelta(minutes=30)\n    # actual time of arrival\n    actual_arrival_time = scheduled_time + delay\n\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial ratio of boys to girls before the addition of 12 boys and 12 girls\n    B, G = symbols('B G')\n    \n    # The number of boys was 50% (or 1.5 times) more than the number of girls\n    initial_ratio = Eq(B, 1.5 * G)\n\n    # Later, 12 boys and 12 girls join\n    # The ratio of the number of boys to girls became 19 : 14\n    updated_ratio = Eq((B + 12)/(G + 12), 19/14)\n\n    # Solving the equations for B and G\n    solutions = solve((initial_ratio, updated_ratio), (B, G))\n  \n    # Initial number of children\n    children_morning = int(solutions[B] + solutions[G])\n\n    # Total number of children in the afternoon, after the addition of the 12 boys and 12 girls\n    children_afternoon = children_morning + 12 + 12\n\n    return children_afternoon\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a represent the number of apples and o represent the number of oranges\n    a, o = symbols('a o')\n    \n    # Equation based on the initial ratio\n    equation1 = Eq(a/o, 3/8)\n    \n    # Equation based on the ratio after removing one apple\n    equation2 = Eq((a - 1)/o, 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, o))\n    \n    # Get the number of oranges\n    return solutions[o]\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    # Iterate over possible hundreds and ones digits\n    for hundreds in range(1, 10):  # Hundreds digit can be from 1 to 9\n        for ones in range(1, 10):  # Ones digit can be from 1 to 9\n            if ones != hundreds:  # Hundreds and ones digits should not be the same\n                for tens in range(1, min(ones, hundreds)):  # Tens digit should be less than both\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    notebooks_price = 3\n    colour_pencils_price = 9\n    total_classmates = 10\n\n    # Jessie can only buy a whole number of colour pencils and notebooks\n    max_colour_pencils = min(total_money // colour_pencils_price, total_classmates)\n    max_notebooks = total_money // notebooks_price\n\n    for colour_pencils in range(max_colour_pencils + 1):\n        for notebooks in range(max_notebooks + 1):\n            if (notebooks + colour_pencils == total_classmates and\n                    notebooks * notebooks_price + colour_pencils * colour_pencils_price == total_money):\n                ans = colour_pencils\n                return ans\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_seats_per_row = 36\n    first_floor_rows = 9\n    total_students = 500\n\n    first_floor_capacity = first_floor_seats_per_row * first_floor_rows\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    # Previous term in the sequence\n    last_term = 56\n    # Common ratio in the series (each term is twice the previous term)\n    common_ratio = 2\n\n    # Next term in the sequence\n    next_term = last_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log2(num_people))\n    return num_rounds\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(k+1)*k for k in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first even number be x. The numbers then are x, x+2, x+4, x+6, x+8, x+10.\n    # Their sum is 6x + (2+4+6+8+10) = 6x + 30 = 510\n    total_sum = 510\n    total_sum_without_addends = total_sum - 30  # Subtracting the sum of the consecutive differences\n\n    # Find the first term of the sequence\n    x = total_sum_without_addends / 6  # Dividing by the number of terms to find the first term\n\n    # The mean is the sum divided by the number of elements\n    mean = total_sum / 6\n\n    # The median of 6 consecutive even numbers is the average of the 3rd and 4th number\n    # In this case, the median is (x+4 + (x+6))/2 = (2x+10)/2 = x + 5\n    median = x + 5\n\n    # Calculate the difference between mean and median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "from math import factorial\n\ndef solution():\n    n = factorial(50)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_ratio = 0.65\n\n    sugar_weight = total_weight * sugar_ratio\n\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n\n    final_height = start_height + climb_up_1 - climb_down + climb_up_2\n\n    return final_height\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let h represent the number of cards Helen has after several rounds\n    # Let o represent the number of cards Oliver has after several rounds\n    # Given that Helen originally had 18 cards and Oliver had 22 cards\n    # Initially, the total number of cards is 18 + 22\n\n    # After several rounds, Helen has 10 more cards than Oliver\n    # Hence, h = o + 10\n\n    # The total number of cards does not change after each game since one card is simply transferred from one player to another\n    # Therefore, the total number of cards after several rounds is still h + o = 18 + 22\n\n    # By substitution, we get o + (o + 10) = 40\n    # Simplifying the equation, we get 2o + 10 = 40\n\n    # Now, solve for o\n    o = (40 - 10) / 2\n\n    # Now find h from the relation h = o + 10\n    h = o + 10\n\n    return h\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n\n    N = 5 ** 100\n    num_digits = math.floor(math.log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the mass of strawberries and m be the mass of mangoes.\n    s, m = symbols('s m')\n\n    # Set up the equations according to the problem statement\n    equation1 = Eq(m, s + 448)  # m is 448g more than s\n    equation2 = Eq(s, 2 * (m - 900))  # After giving away 900g of mangoes, s is twice of m\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, m))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Since the sum of 5 consecutive numbers is 40,\n    # we can express these numbers as x, x+1, x+2, x+3, x+4\n    # The equation will be: x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 40\n    # Simplify the equation: 5x + 10 = 40\n    # Solve for x: 5x = 30\n    # Therefore, x = 6\n    # The smallest number is x which is 6\n\n    return 6\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    total_prime_numbers = 25\n    composite_numbers = total_numbers - total_prime_numbers - 1  # Subtracting 1 for the number 1, which is neither prime nor composite\n    \n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    all_nums = [''.join(map(str, p)) for p in permutations(digits, 5) if p[0] != 0]\n    multiples_of_9 = [int(num) for num in all_nums if int(num) % 9 == 0]\n    \n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n    \n    ans = (M - N) // 9\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    remaining_sweets = total_sweets - given_away\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Given values\n    fourth_term = 39\n    twelfth_term = 57\n    # Finding the common difference\n    common_difference = (twelfth_term - fourth_term) / (12 - 4)\n    # Calculating the first term\n    first_term = fourth_term - common_difference * (4 - 1)\n    \n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    largest_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.3 + 20 * 0.2\n    target_concentration = 0.1\n    initial_mixture_weight = 30 + 20\n\n    total_weight_for_target = total_salt / target_concentration\n    water_to_add = total_weight_for_target - initial_mixture_weight\n\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    perceived_sum = 987\n    actual_addend = 450\n    correct_sum = perceived_sum - incorrect_addend + actual_addend\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the square box\n    box = symbols('box')\n\n    # Setting up the equation as per the given number puzzle\n    equation = Eq(box * box + box, 380)\n\n    # Solving the equation for the box value\n    solutions = solve(equation, box)\n\n    # Filtering only the integer solutions since the box contains integer\n    integer_solution = [s for s in solutions if s.is_integer]\n\n    # Since the problem has specified it's a single integer, we expect a single solution\n    return integer_solution[0]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # in meters per minute\n    vicky_speed = 250     # in meters per minute\n    race_distance = 3000  # in meters\n\n    time_for_johnson = race_distance / johnson_speed\n    time_for_vicky = race_distance / vicky_speed\n\n    time_difference = time_for_vicky - time_for_johnson\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To ensure 29 balls of one color, pick all balls of the other two colors\n    pick_blue_red = 80 + 40  # All blue and red\n    pick_blue_white = 80 + 30  # All blue and white\n    pick_red_white = 40 + 30  # All red and white\n\n    # Now add one more ball to guarantee the 29th ball of one specific color\n    pick_one_more = 1\n\n    # We take the maximum of these to ensure we have 29 of one color\n    max_picks = max(pick_blue_red, pick_blue_white, pick_red_white) + pick_one_more\n\n    return max_picks\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # According to the pigeonhole principle\n    # Drawing one card from each of the four suits guarantees 4 unique cards by their suit.\n    # To ensure at least 3 cards of the same number, draw two more after the guaranteed different ones.\n    max_unique_cards = 4 * 2 # Each number can appear at most twice without having three of the same number.\n    \n    # We must draw one more card to ensure three of the same number, as in the worst case scenario\n    # we have drawn 2 cards of each number up to this point.\n    cards_to_draw = max_unique_cards + 1 \n\n    return cards_to_draw\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "from sympy import primerange\n\ndef solution():\n    # Create a list of prime numbers from 1 to 20 using primerange\n    primes = list(primerange(1, 21))\n    # Count the number of prime numbers\n    prime_count = len(primes)\n    # Count the total numbers from 1 to 20\n    total_numbers = 20\n    # Calculate the proportion of prime number cards\n    proportion = prime_count / total_numbers\n    # Return the proportion as a decimal\n    return round(proportion, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume transferred from each bottle in litres\n    x = symbols('x')\n\n    # Initial volume of lime in bottle A = 5 litres * 10% = 0.5 litres\n    # Initial volume of lime in bottle B = 3 litres * 20% = 0.6 litres\n\n    # After transferring x litres:\n    # Bottle A: (0.5 - 0.1x + 0.2x) lime in (5 - x + x) litres solution\n    # Bottle B: (0.6 + 0.1x - 0.2x) lime in (3 - x + x) litres solution\n\n    # The final concentration of lime in both bottles is the same\n    # So, (0.5 + 0.1x) / 5 = (0.6 - 0.1x) / 3\n\n    equation = Eq((0.5 + 0.1 * x) / 5, (0.6 - 0.1 * x) / 3)\n\n    # Solve for x\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    total_sum_1_to_50 = 1275\n    sum_1_to_51 = total_sum_1_to_50 + 51\n    sum_2_to_51 = sum_1_to_51 - 1\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = 'ABCDEFGH'\n    for p in permutations(students):\n        A_index = p.index('A')\n        B_index = p.index('B')\n        C_index = p.index('C')\n        D_index = p.index('D')\n        E_index = p.index('E')\n        F_index = p.index('F')\n        G_index = p.index('G')\n        # Check if C is in the middle of A and B\n        if abs(A_index - C_index) == abs(C_index - B_index) and A_index != B_index:\n            # Check if D and E are next to each other\n            if abs(D_index - E_index) == 1:\n                # Check if F and G are next to each other\n                if abs(F_index - G_index) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n\n    return len(prices)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "import math\n\ndef solution():\n    students = 31\n    per_row = 5\n    rows_needed = math.ceil(students / per_row)\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    number_str = '123'\n    total_sum = 0\n    for i in range(1, 124):\n        total_sum += int(number_str * i)\n    hundreds_digit = (total_sum // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given ratio of the length to breadth of the painting\n    ratio_length_to_breadth = 5 / 2\n\n    # Given length of the painting\n    length_painting = 90\n\n    # The length of the lego is 70.5 cm smaller than the length of the painting\n    length_lego = length_painting - 70.5\n\n    # Use the ratio to find the breadth of the lego\n    breadth_lego = length_lego / ratio_length_to_breadth\n\n    # Lego bricks are discrete units, so the breadth needs to be an integer\n    # We need to find the maximum size of the breadth that does not exceed the calculated breadth_lego\n    max_breadth_lego = int(breadth_lego)  # This will always round down\n\n    return max_breadth_lego\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount / 3  # Zoey had twice as much left, so brother has 1/3 of the combined total.\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n    \n    # By the inclusion-exclusion principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan's race distance in meters\n    jaan_speed = 8  # Jaan's speed in m/s\n\n    jaan_time = jaan_distance / jaan_speed  # Time taken by Jaan to finish the race in seconds\n    \n    kane_distance = jaan_distance - 12.5  # Kane's distance covered when Jaan finished\n    kane_speed = kane_distance / jaan_time  # Kane's speed in m/s\n    \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # Convert pence to pounds\n\n    total_price = cake_price + milk_price\n    final_price = total_price - voucher\n\n    return final_price\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n from sympy import symbols, Eq, solve\n\n john, raj, pete = symbols('john raj pete')\n\n equation1 = Eq(1/john + 1/raj + 1/pete, 1)\n equation2 = Eq(1/john + 1/raj, 1/(1 + 12/60))\n equation3 = Eq(1/raj + 1/pete, 1/(1 + 30/60))\n\n solutions = solve((equation1, equation2, equation3), (john, raj, pete))\n\n return int(solutions[raj] * 60)  # Convert hours to minutes\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1 + (1 / 4)\n    overtime_rate = normal_rate * overtime_multiplier\n    normal_hours = 8\n    total_hours_worked = 10\n    overtime_hours = total_hours_worked - normal_hours\n\n    total_earnings = normal_hours * normal_rate + overtime_hours * overtime_rate\n    \n    return total_earnings\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    return 111 - 87\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35 / 100\n    total = 60\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be the current age of the younger brother and e be the current age of the elder brother.\n    y, e = symbols('y e')\n\n    # Equation 1: The sum of their current ages is 42.\n    equation1 = Eq(y + e, 42)\n\n    # Equation 2: A few years ago, e - y years ago to be specific, the younger brother was half the elder brother's current age.\n    # At that time, the younger brother was (y - (e - y)) years old.\n    equation2 = Eq(y - (e - y), e / 2)\n\n    # Solve the system of equations for y and e.\n    solutions = solve((equation1, equation2), (y, e))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):  # loop through all two-digit numbers\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Each 3-digit repeat of '928' forms a complete sequence within the number.\n    # A 99-digit number would have this sequence repeated 99/3 = 33 times.\n\n    # Since 928 is a multiple of 9 plus 1 (i.e., 928 = 103 * 9 + 1),\n    # and we have 33 such sequences, then the whole number is a multiple of 9 plus 33.\n\n    # The remainder when dividing a number that is a multiple of 9 plus another number\n    # by 9 is simply the remainder of the additional number when divided by 9.\n    # Hence, the remainder when dividing the 99-digit number by 9 is the same as\n    # the remainder when dividing 33 by 9.\n\n    remainder = 33 % 9\n\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Draw 2 of each color (white, blue, green) to ensure we haven't got 3 of the same color yet.\n    max_balls_of_each_color_without_3_same = 2\n\n    # Now, if we draw one more ball (any color), we will definitely have 3 of the same color.\n    balls_to_draw = (max_balls_of_each_color_without_3_same * 3) + 1\n\n    return balls_to_draw\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Each congruence relation is represented as (remainder, modulo)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for digit1 in range(1, 10):  # Loop for tens place (cannot be zero in a two-digit number)\n        for digit2 in range(10):  # Loop for ones place\n            original_number = 10 * digit1 + digit2\n            swapped_number = 10 * digit2 + digit1\n            if swapped_number == (original_number / 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # total_matches = n_choose_2 * 2, because each team plays every other team twice, home and away.\n    # Solve for n: n * (n - 1) = total_matches * 2\n    # n^2 - n - total_matches * 2 = 0\n\n    total_matches = 30\n    matches_per_team_combination = 2  # Each team plays the other team twice\n    \n    # Calculate number of teams (n)\n    # Using quadratic formula: n = (1 + sqrt(1 + 4 * 1 * total_matches * 2)) / 2\n    from math import sqrt\n\n    n = (1 + sqrt(1 + 4 * matches_per_team_combination * total_matches)) // 2\n\n    return int(n)\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    kg_per_box = 14 / boxes_for_14kg\n    total_kg = 66.5\n    required_boxes = total_kg / kg_per_box\n\n    return int(required_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let the number of years later be y\n    # Sum of their current ages is 34, so after y years, sum of their ages will be 34 + y + y\n    # Therefore, we get the equation: 34 + 2y = 40\n    # Solve for y\n    y = (40 - 34) / 2\n\n    return y\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the rope and y be the circumference of the tree.\n    x, y = symbols('x y')\n    \n    # 10 turns of the rope around the tree leaves an excess of 3 meters.\n    equation1 = Eq(10 * y, x - 3)\n    # 12 turns of the rope around the tree is short by 3 meters.\n    equation2 = Eq(12 * y, x + 3)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate how many meters around 8 turns left.\n    # We use the solved circumference of the tree, y, to calculate this.\n    turns = 8\n    left_8_turns = solutions[x] - turns * solutions[y]\n\n    return left_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    people_per_country = 4  # To avoid the guarantee of 5 participants from the same country\n\n    # Use Pigeonhole Principle\n    participants = countries * people_per_country + 1  # +1 to ensure at least 5 participants from one country\n\n    return participants\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = -(-students // tables_per_row)\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        # Unpack the tuple.\n        A, B, C, D = p\n        # Construct the numbers from the digits.\n        number1 = 10 * A + B\n        number2 = 10 * C + D\n        number3 = 10 * B + C\n        # The given condition.\n        if number1 + number2 == number3:\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Let b be the number of Ben's cards\n    # According to the problem, Catherine has 54 cards, which is 5 more than Ben's number of cards\n    # So, Ben has 54 - 5 cards\n    b = 54 - 5\n    \n    # Ash has three times as many cards as Ben\n    # So, Ash has 3*b cards\n    ash = 3 * b\n    \n    return ash\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n\n    spent = (3/7) * total\n    not_used = total - spent\n    equation = Eq(spent - not_used, 12)\n\n    solutions = solve(equation, total)\n\n    amount_spent = (3/7) * solutions[0]\n    return amount_spent\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    original_number = (final_number - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # The sequence of their ages is an arithmetic sequence with a common difference of 1 year.\n    # Let the youngest dwarf's age be y. Then the ages are: y, y+1, y+2, ..., y+6.\n    # The sum of the ages of the youngest three dwarfs is 3y + 3, which equals 42.\n    # Solving for y gives us the age of the youngest dwarf.\n    y = (42 - 3) // 3\n    \n    # Now, calculate the sum of the ages of the oldest three dwarfs.\n    # Their ages are: y+4, y+5, y+6.\n    sum_oldest_three = (y + 4) + (y + 5) + (y + 6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    odot_value = 7\n    ans = number - sum(range(1, odot_value))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # since we're using increments of 5, n is 100/5\n    sum_of_squares = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    eq1 = Eq(A + B + C, 659)\n    eq2 = Eq(A + B, 447)\n    eq3 = Eq(B + C, 335)\n    \n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoin = 5.04\n    months_needed = debt_in_bitcoin / salary_per_month\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_price, storybook_price = symbols('file_price storybook_price')\n\n    equation1 = Eq(7 * file_price + 4 * storybook_price, 108)\n    equation2 = Eq(5 * file_price + 3 * storybook_price, 80)\n\n    solutions = solve((equation1, equation2), (file_price, storybook_price))\n\n    return solutions[file_price] + solutions[storybook_price]\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    original_trays = 7\n    original_mean = 13\n    new_tray_sausages = 21\n    new_tray_count = original_trays + 1\n    \n    total_sausages = (original_trays * original_mean) + new_tray_sausages\n    new_mean = total_sausages / new_tray_count\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(1, 10):\n                if hundreds > tens and ones > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Convert mixed number to improper fraction: 3 1/2 = 3*2 + 1 / 2 = 7/2\n    numerator = 3 * 2 + 1\n    denominator = 2\n    \n    # Division of fractions equates to multiplying by the reciprocal of the divisor\n    # 7/2 ÷ 1/4 = 7/2 * 4/1\n    result_numerator = numerator * 4\n    result_denominator = denominator * 1\n    \n    # Simplify the resulting fraction (though here it's unnecessary as it's already simplified)\n    ans = result_numerator // result_denominator\n    \n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (263 + 137) / 20  # Calculate the speed of the train\n    length_second_bridge = speed * 27 - 137  # Calculate the length of the second bridge\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    target = (rani + brenda) / 2\n    \n    amount_to_give = brenda - target\n    \n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from itertools import permutations\n\ndef solution():\n  total_ways = 0\n  for books in permutations(range(7), 3):\n    total_ways += 6  # For each permutation, there are 6 ways to distribute to 3 students\n  return total_ways\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    # Let's define b as the number of blue balls and r as the number of red balls\n    # According to the problem we have two equations:\n    # b + r = 125 (total number of balls)\n    # (2/5)*b = (3/5)*r (relation between the number of blue and red balls)\n    \n    # From the second equation we can express b in terms of r or vice-versa\n    # Let's find r in terms of b\n    # (2/5)*b = (3/5)*r\n    # To isolate r, we multiply both sides by (5/3)\n    # r = (5/3)*(2/5)*b\n    # r = (2/3)*b\n    \n    # Now we substitute r in the first equation with the terms of b:\n    # b + (2/3)*b = 125\n    # To combine like terms, we find a common denominator, which is 3:\n    # (3/3)*b + (2/3)*b = 125\n    # (5/3)*b = 125\n    # Now we solve for b by multiplying both sides by (3/5)\n    # b = 125 * (3/5)\n    \n    b = 125 * (3/5)\n    \n    # Now we can find r using the first equation:\n    # r = 125 - b\n    r = 125 - b\n    \n    # The difference between the number of blue balls and red balls\n    difference = b - r\n    \n    return int(difference) \n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'w' represent the cost of one watch and 'h' represent the cost of one handbag.\n    w, h = symbols('w h')\n\n    # Equation for the first scenario: 3 watches and 5 handbags cost $915.\n    eq1 = Eq(3 * w + 5 * h, 915)\n    # Equation for the second scenario: 4 watches and 2 handbags cost $632.\n    eq2 = Eq(4 * w + 2 * h, 632)\n\n    # Solve the equations for 'w' and 'h'.\n    solutions = solve((eq1, eq2), (w, h))\n\n    # Total cost of 2 watches and 2 handbags.\n    total_cost = 2 * solutions[w] + 2 * solutions[h]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Given that 88 pieces of candy are shared\n    # and each of 8 children gets at least one piece\n    total_candy = 88\n    children = 8\n    # The minimum candies for children are 1, 2, 3, ..., children-1\n    min_candies = sum(range(children))\n    # Calculate the least possible number for the child with most pieces\n    most_pieces = total_candy - min_candies\n    return most_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n\n    # Difference in years between 1996 and 2008\n    year_difference = 2008 - 1996\n\n    # Daughter's age in 2008\n    daughter_age_2008 = daughter_age_1996 + year_difference\n\n    # Grandmother's age when daughter was born\n    grandmothers_age_at_birth = grandmother_age_2008 - daughter_age_2008\n\n    return grandmothers_age_at_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 individuals other than A to whom the ball can be passed initially.\n    first_pass_options = 3\n    \n    # For the second pass, the ball cannot be passed back to A, so there are 2 options.\n    second_pass_options = 2\n    \n    # For the third pass, the ball has to be passed back to A, so there is only 1 option.\n    third_pass_options = 1\n    \n    # The total number of passing methods is the product of the options at each step.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    initial_tokens_eq = Eq(nicole, 3 * eddy)\n    used_tokens_eq = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((initial_tokens_eq, used_tokens_eq), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5)\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200 * 0.35\n    lenny_solution = 300 * 0.50\n    total_salt = leroy_solution + lenny_solution\n    total_solution = 200 + 300\n    concentration = (total_salt / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n\n    total_candy = Eq(mike_candy + valeria_candy, 36)\n    difference_candy = Eq(valeria_candy - mike_candy, (22 - 6))\n\n    solutions = solve((total_candy, difference_candy), (mike_candy, valeria_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    total_permutations = math.factorial(8)\n    \n    # Treat A and B as one person, so we have 7 entities to arrange\n    together_permutations = math.factorial(7)\n    \n    # Since A and B can switch places, multiply by 2\n    together_permutations *= 2\n    \n    # Now calculate arrangements where C and D are together\n    # We have 6 entities plus one entity that is C and D together\n    together_c_d_permutations = math.factorial(6)\n    \n    # C and D can switch places, multiply by 2\n    together_c_d_permutations *= 2\n    \n    # Subtract from the total where A and B are next to each other\n    # the scenarios where C and D are also next to each other\n    unwanted_permutations = together_permutations * together_c_d_permutations\n    \n    # The final answer is the total permutations of A and B together \n    # minus the unwanted permutations.\n    ans = together_permutations * total_permutations / math.factorial(8) - unwanted_permutations\n\n    return int(ans)\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    concentration = 0.35\n    sugar_weight = total_weight * concentration\n    water_weight = total_weight - sugar_weight\n    \n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    k = symbols('k', real=True, positive=True)\n    equation = Eq(12**50, k**75)\n    solutions = solve(equation, k)\n\n    ans = int(solutions[0])\n    return ans-1\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    initial_oranges = 133 + 34 - 25\n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def Psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    return Psi(Psi(14, 13), 12)\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be g\n    # Therefore, the number of boys will be total_students - g\n    # We can set up the equation:\n    # girls_average * g + boys_average * (total_students - g) = total_students * total_average\n\n    from sympy import symbols, Eq, solve\n    \n    g = symbols('g')\n    equation = Eq(girls_average * g + boys_average * (total_students - g), total_students * total_average)\n    \n    number_of_girls = solve(equation, g)[0]\n    \n    return number_of_girls\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each animal type\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Number of each animal\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n    \n    # Total number of legs, excluding the birds\n    total_legs_without_birds = (num_cats * cat_legs) + (num_dogs * dog_legs) + (num_rabbits * rabbit_legs)\n\n    # Subtract the known number of legs from the total to find the number of bird legs\n    bird_legs_total = 28 - total_legs_without_birds\n\n    # The number of birds is equal to the number of bird legs divided by the number of legs per bird\n    num_birds = bird_legs_total / bird_legs\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    initial_team = 5\n    initial_time = 6\n    new_length_multiplier = 2\n    new_time = 5\n\n    work_done_by_initial_team = initial_team * initial_time\n    work_needed_for_new_fence = work_done_by_initial_team * new_length_multiplier\n\n    # Since the work needed is double, and she wants it done in less time, \n    # we need to divide the needed work by the new time to find out the minimum team size.\n    minimum_people = work_needed_for_new_fence / new_time\n\n    # We shall round up since we cannot have a fraction of a person.\n    from math import ceil\n    minimum_people = ceil(minimum_people)\n\n    return minimum_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_interval = 12 / 4  # Time to walk up one flight, since there are 4 flights from the first to the fifth floor\n    flights_in_30_mins = 30 / time_for_one_interval\n    return flights_in_30_mins\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_new_amount = cookies_per_gram * 21.6\n    return int(cookies_with_new_amount)\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    base_8_number = \"12345654321\"\n    N_base_10 = int(base_8_number, 8)\n    \n    remainder_7 = N_base_10 % 7\n    remainder_9 = N_base_10 % 9\n    \n    sum_of_remainders = remainder_7 + remainder_9\n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    return 96 // 3\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    # Each cat ages three years over the three-year period\n    combined_age_now = combined_age_three_years_ago + 3 + 3\n    # Each cat will age four more years\n    combined_age_in_four_years = combined_age_now + 4 + 4\n\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # Write the equations based on the given information\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    # Get the cost of one magazine\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = n * (n + 1) * (n + 2) / 3\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2016 to get its prime factors and their powers\n    factors = factorint(2016)\n    \n    # Calculate how many divisors are perfect squares\n    count = 1\n    for power in factors.values():\n        count *= (power // 2) + 1\n\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the first number be n, then the consecutive numbers are n, n+1, n+2\n    # The sum of these three numbers is 3n + 3\n    # According to the problem, 3n + 3 = 60, solve for n\n    n = (60 - 3) // 3\n    # The largest number is then n + 2\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    # 3 big pails and 4 small pails hold 68 litres\n    equation1 = Eq(3 * big + 4 * small, 68)\n\n    # 4 big pails and 2 small pails hold 64 litres\n    equation2 = Eq(4 * big + 2 * small, 64)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[big]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n    \n    # Set the range for the digits\n    digits_range = range(10)\n    \n    # Define the equations based on the given puzzle\n    equation = Eq(100*A + 10*B + A + 100*C + 10*D + C, 726)\n    \n    # Solve the equations within the digits range\n    for a in digits_range:\n        for b in digits_range:\n            for c in digits_range:\n                for d in digits_range:\n                    if a != b and a != c and a != d and b != c and b != d and c != d:  # All digits are different\n                        res = solve([equation.subs({A: a, B: b, C: c, D: d})])\n                        if res != []:\n                            return a + b + c + d\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # maximum shirts she can take without getting any yellow one\n    max_non_yellow = 6 + 4 + 12  # orange + pink + brown\n    # to get at least 1 yellow, she needs to take one more after the maximum non-yellow\n    ans = max_non_yellow + 1\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division to ensure enough packs are bought\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    fractions = [(9*5 + 4)/5, (99*5 + 4)/5, (199*5 + 4)/5, (2999*5 + 4)/5, (39999*5 + 4)/5]\n    \n    # Sum the fractions\n    total_sum = sum(fractions) + 1\n    \n    return total_sum\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # The sequence appears to be decreasing, let's find the difference\n    # between the given numbers to detect the pattern.\n    \n    diff1 = 94 - 80  # Difference between first and third numbers\n    diff2 = 80 - 73  # Difference between third and fourth numbers\n    diff3 = 73 - 66  # Difference between fourth and fifth numbers\n    \n    # Let's analyze the differences to find the pattern\n    pattern_diff = diff1 - diff2  # Difference between diff1 and diff2\n    # Based on this pattern the next difference would be one less than the last difference\n    next_diff = diff2 - pattern_diff\n    \n    # Apply the found pattern to get the next number in the sequence\n    next_number = 94 - next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be described as follows:\n    # age ≡ 1 (mod 2)\n    # age ≡ 1 (mod 3)\n    # age ≡ 1 (mod 4)\n    # age ≡ 1 (mod 6)\n    # age ≡ 0 (mod 7)\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_volume_ml = 100\n    tumbler_volume_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n\n    total_volume_sold_ml = (wine_glass_volume_ml * wine_glasses_sold) + (tumbler_volume_ml * tumblers_sold)\n    carton_volume_ml = 1000\n\n    cartons_needed = total_volume_sold_ml / carton_volume_ml\n\n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    \n    position_from_end = total_people - position_from_front + 1\n    \n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of a power of 2 repeats every 4 cycles: 2, 4, 8, 6\n    cycle_length = 4\n    # Find the remainder when dividing the exponent by 4\n    remainder = 859433 % cycle_length\n    # The last digit follows the cycle: 2 (remainder 1), 4 (remainder 2), 8 (remainder 3), 6 (remainder 0)\n    last_digit_cycle = [2, 4, 8, 6]\n    # If remainder is 0, it means it's the end of the cycle which is the last element in the cycle\n    ans = last_digit_cycle[remainder-1] if remainder else last_digit_cycle[-1]\n    return ans\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Initial variables for avocados (a), peaches (p), and lemons (l)\n    a, p, l = symbols('a p l')\n    \n    # Initial ratios\n    initial_ratio_avocado = 2\n    initial_ratio_peaches = 9\n    initial_ratio_lemons = 8\n    \n    # Ratio after selling\n    after_sell_ratio_peaches = 6\n    after_sell_ratio_lemons = 5\n    \n    # Sold fruits\n    sold_avocados = 52\n    sold_peaches = 12\n    sold_lemons = 60\n    \n    # Set up the equations based on the problem\n    equation1 = Eq(a/p, initial_ratio_avocado / initial_ratio_peaches)\n    equation2 = Eq(p/l, initial_ratio_peaches / initial_ratio_lemons)\n    equation3 = Eq((p - sold_peaches) / (l - sold_lemons), after_sell_ratio_peaches / after_sell_ratio_lemons)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, p, l))\n    \n    # Extracting the solution and calculating the number of remaining fruits\n    avocados_left = solutions[a] - sold_avocados\n    peaches_left = solutions[p] - sold_peaches\n    lemons_left = solutions[l] - sold_lemons\n    \n    # Getting the total number of fruits left\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n    \n    return total_fruits_left\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students_facing_teacher = 0\n    for i in range(1, 61):\n        # If the student number is a multiple of 3 or 5, they turn around\n        # If it's a multiple of both, they end up facing the same direction as they started\n        if (i % 3 == 0) ^ (i % 5 == 0):\n            students_facing_teacher += 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    lcm_246 = 2*4*6  # LCM of 2, 4, 6 assumed to be the product since they are multiples of each other\n    for age in range(lcm_246, lcm_246*7, lcm_246):  # range(start, stop, step)\n        if (age + 1) % 7 == 5:\n            return age + 1  # age + 1 to get actual age with remainder when divided by 7 is 5\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let jess_sweets be x and jill_sweets be y before sharing\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Jill has six sweets for every five Jess has\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n\n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill_sweets - 8, 4/7 * (jess_sweets + 8))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Calculating the total number of sweets \n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    ans = 0\n    for i in range(7, 0, -1):\n        for p in permutations(range(1, 8), i):\n            num = int(''.join(map(str, p)))\n            if all(num % x == 0 for x in p):\n                ans = max(ans, num)\n                break\n        if ans != 0:\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    count = 0\n    max_length = 0\n     \n    for i in range(1, 901, 2):\n        sum = 0\n        length = 0\n        for j in range(i, 901, 2):\n            sum += j\n            length += 1\n            if sum == 900:\n                max_length = max(max_length, length)\n            elif sum > 900:\n                break\n    return max_length\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    two_times_total = adam_ben + ben_carl + adam_carl\n    total_weight = two_times_total / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100): # the first two-digit number is 10\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    smallest_number = ((120 // divisor) + 1) * divisor + remainder\n\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    min_value = min(numbers)\n    return min_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    total_metres = metres + (centimetres / 100)\n    \n    return total_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * (1 + 25/100)\n    third_test = second_test * (1 - 20/100)\n    total_marks = first_test + second_test + third_test\n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000  # Initial amount deposited\n    rate = 0.03  # Interest rate (3% per annum)\n    time = 2  # Time period in years\n\n    # Simple interest formula: A = P(1 + rt)\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    total_savings = 13 + 18 + 5\n    num_months = 3\n    mean_savings = total_savings / num_months\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(233)\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum(i**2 for i in range(7, 106, 7))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return round(sum, 2)\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # First, we calculate how many multiples of 4 there are up to 56 (inclusive).\n    # This is done by dividing 56 by 4.\n    multiples_up_to_56 = 56 // 4\n    \n    # Next, we calculate how many multiples of 4 there are up to 92 (inclusive).\n    # This is done by dividing 92 by 4.\n    multiples_up_to_92 = 92 // 4\n    \n    # The number of multiples of 4 from 56 to 92 is then found by subtracting\n    # multiples_up_to_56 from multiples_up_to_92.\n    # Sam's assertion that there are 4 multiples from 1 to 56 is incorrect,\n    # it should be 14; this does not change the calculation method though.\n    num_multiples = multiples_up_to_92 - multiples_up_to_56\n    \n    # However, we must remember to include the start point (56) if it's a multiple of 4.\n    # Since 56 is a multiple of 4, we must add 1 to our result.\n    if 56 % 4 == 0:\n        num_multiples += 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number = solve_congruence(*congruences)\n\n    return number[0]\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Given data\n    distance = 144  # The distance between Magic Town and Super Town in km\n    speed_in_still_water = 15  # The speed of the ship in still water in km/h\n    downstream_time = 8  # The time it takes to travel downstream in hours\n\n    # Calculate the speed of the current\n    current_speed = (distance / downstream_time) - speed_in_still_water\n\n    # Calculate the speed of the ship going upstream\n    upstream_speed = speed_in_still_water - current_speed\n\n    # Calculate the time it will take to come back from Super Town to Magic Town upstream\n    upstream_time = distance / upstream_speed\n    \n    return upstream_time\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    students_to_select = 2\n    ways_to_select = comb(num_students, students_to_select)\n    \n    return ways_to_select\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k represent the amount of food the kangaroo eats per day\n    # Let h represent the amount of food the hippo eats per day\n    h, k = symbols('h k')\n\n    # The hippo eats 45 kilograms more food than the kangaroo per day\n    equation1 = Eq(h, k + 45)\n\n    # 20 days later, the hippo has consumed 10 times as much food as the kangaroo in total\n    equation2 = Eq(20 * h, 10 * 20 * k)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, k))\n\n    # Return the total amount of food the hippo has consumed in 20 days\n    return solutions[h] * 20\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    # John waits at 3:15 pm\n    # Convert waiting time to minutes (3 hours * 60 minutes/hour + 15 minutes)\n    wait_time_minutes = 3 * 60 + 15\n    \n    # Tom arrives 1 hour and 25 minutes later\n    # Convert Tom's travel time to minutes (1 hour * 60 minutes/hour + 25 minutes)\n    tom_travel_minutes = 1 * 60 + 25\n    \n    # Calculate the total minutes when they meet\n    meet_time_minutes = wait_time_minutes + tom_travel_minutes\n    \n    # Convert minutes back into hours and minutes\n    meet_hour = meet_time_minutes // 60\n    meet_minute = meet_time_minutes % 60\n    \n    # Since the time will be in 24-hour format, check if we need to wrap around\n    if meet_hour >= 24:\n        meet_hour -= 24\n        \n    # Format the time they meet as a string \"HH:MM\"\n    ans = f'{meet_hour:02d}:{meet_minute:02d}'\n    \n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum([sum([j / i for i in range(j+1, 21)]) for j in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's rate per day\n    A_rate = 1 / 15\n    # Worker B's rate per day\n    B_rate = 1 / 20\n\n    # Total work done by A and B in 2 days\n    work_done = (A_rate + B_rate) * 2\n\n    # Remaining work\n    remaining_work = 1 - work_done\n\n    # Days A needs to finish the remaining job\n    days_for_A = remaining_work / A_rate\n\n    return days_for_A\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure that we have at least two balls of the same colour, we may encounter the worst-case scenario first:\n    # taking one green and then one blue. The next ball we take out, no matter the color, will give us two balls of the same color.\n    # Therefore, we need to take out 3 balls to ensure we have at least two of the same colour.\n    \n    return 3\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    num_students_needed = (num_zodiac_signs - 1) * 10 + 1\n\n    return num_students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or \\\n           perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                if abs(perm.index('F') - perm.index('G')) != 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # To be sure of taking out 10 balls with the same color,\n    # Ada must take out the maximum possible number of balls without having 10 of the same color.\n    # In the worst-case scenario, she takes out:\n    # - All 5 yellow balls\n    # - 9 white balls\n    # - 9 black balls\n    # In total: 5 (yellow) + 9 (white) + 9 (black) = 23 balls\n    # The next ball she takes out must be either white or black,\n    # ensuring that she has 10 of at least one color.\n    balls_needed = 5 + 9 + 9 + 1  # +1 is for the next ball, making 10 of one color\n\n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n    if last_child == 0:\n        last_child = total_children\n\n    return last_child\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import gcd\n\n    # Least Common Multiple (LCM) calculation using GCD\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    # Days between each spaghetti and apple pie consumption\n    spaghetti_days = 7\n    apple_pie_days = 3\n\n    # Calculate the days until the next simultaneous consumption\n    days_until_next = lcm(spaghetti_days, apple_pie_days)\n\n    # Return the result\n    return days_until_next\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    max_without_both = total_children - (children_with_dogs + children_with_cats - total_children)\n    return children_with_dogs + children_with_cats - total_children - max_without_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # If it is an arithmetic sequence, the sum of the sequence\n    # can be calculated using the formula: Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms, first_term is the first term of the sequence\n    # and last_term is the last term of the sequence.\n    # However, no specific sequence was provided in the question.\n    # Therefore, we assume it's a generic arithmetic sequence.\n\n    # Since no details of the sequence are provided,\n    # Let's assume that the sequence is 'a, a+d, a+2d, ..., a+(n-1)d'\n    # where 'a' is the first term, 'd' is the common difference, and 'n' is the number of terms.\n\n    # To calculate the sum, we'll need the first term (a), the last term (which is a+(n-1)d), and the number of terms (n).\n\n    # Since we don't have actual values for an arithmetic sequence as needed for a calculation,\n    # we cannot provide a numerical answer.\n\n    # Hence, returning None as the answer cannot be determined with the given information.\n    return None\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data_set = [12, 145, 32, 77, 62]\n    range_of_data_set = max(data_set) - min(data_set)\n    return range_of_data_set\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3)*shirts + (5/6)*skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance traveled to the place is 120 miles\n    distance_to_place = 120\n    \n    # Speed while going to the place is 20 miles per hour\n    speed_to_place = 20\n    \n    # Time taken to travel to the place is distance/speed\n    time_to_place = distance_to_place / speed_to_place\n    \n    # Expected average speed for the whole trip is 30 miles per hour\n    expected_average_speed = 30\n    \n    # Total distance for the round trip is twice the distance to the place\n    total_distance = 2 * distance_to_place\n    \n    # Total time for the trip expected by the driver is total distance / expected average speed\n    total_expected_time = total_distance / expected_average_speed\n    \n    # Time remaining for the return trip is total expected time minus time already spent to go to the place\n    time_remaining_for_return = total_expected_time - time_to_place\n    \n    # Speed required for the return trip is the distance to the place divided by the remaining time\n    speed_for_return = distance_to_place / time_remaining_for_return\n    \n    return speed_for_return\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The packet has one more than a multiple of 5\n    # The packet has two more than a multiple of 6\n    # The packet has seven more than a multiple of 11\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Calculate number of biscuits using Chinese Remainder Theorem\n    biscuit_count, _ = solve_congruence(*congruences)\n\n    # The biscuits should be between 400 and 800\n    while biscuit_count < 400:\n        biscuit_count += 5 * 6 * 11\n\n    return biscuit_count\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    ones = 34  # Every number has at least one digit in the ones place\n    tens = 3 * 10  # The tens place range from 10 to 34, which is 3 possibilities (1, 2, 3) for each of the 10 ones place\n    total_digits = ones + tens\n    \n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to cut a rod into 2 pieces which is 1 cut.\n    # To cut a rod into 5 pieces, we need 4 cuts.\n    # If 1 cut takes 2 minutes, 4 cuts take 2 * 4 minutes.\n    total_minutes = 2 * 4\n    return total_minutes\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    num_numbers = 3\n\n    original_total = original_average * num_numbers\n    new_total = new_average * (num_numbers + 1)\n\n    number_to_add = new_total - original_total\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of marbles each person has\n    jovan, sean, heman = symbols('jovan sean heman')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, heman))\n    \n    # Calculate the total number of marbles\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[heman]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Total hay needed for 12 horses for 1 day = total hay / days_initial\n    hay_per_horse_per_day = 1 / horses_initial\n\n    # Total hay for 1 horse for 15 days = 15 * hay_per_horse_per_day\n    total_hay_for_one_horse = days_initial * hay_per_horse_per_day\n\n    # Days for 20 horses with the total hay for one horse\n    days_for_twenty_horses = total_hay_for_one_horse / 20\n\n    return days_for_twenty_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    number_of_terms = (65 - 5) // common_difference + 1\n\n    sum_of_series = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 9\n    num3 = 12\n\n    greatest_common_factor = gcd(gcd(num1, num2), num3)\n\n    return greatest_common_factor\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900  # total length of the expressway in meters\n    total_companies = 4     # total number of construction companies\n    total_days = 5          # total number of days to build the expressway\n\n    # Calculate the work done by 1 company in 1 day\n    work_per_company_per_day = (total_expressway / total_companies) / total_days\n\n    return work_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoes_per_set = 5\n    price_per_set_of_shoes = 78\n    price_per_pair_of_socks = 12\n    alien_legs = 6 * 5  # 5 brothers + alien himself, each with 5 legs\n\n    # Each leg needs a pair of shoes and a pair of socks\n    total_shoe_sets = alien_legs // shoes_per_set\n    total_socks_pairs = alien_legs // 2\n\n    # Since each set contains 5 shoes, every alien will need a set\n    cost_shoes = total_shoe_sets * price_per_set_of_shoes\n    cost_socks = total_socks_pairs * price_per_pair_of_socks\n\n    total_cost = cost_shoes + cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # Since someone might not get any orange, we can think of this problem\n    # as placing two dividers among thirteen oranges, where each section\n    # between dividers represents the number of oranges a kid gets.\n    # This is an example of the \"stars and bars\" combinatorial method.\n    \n    from math import comb\n    \n    # We have 13 oranges (stars) and we need 2 dividers (bars)\n    # The total number of objects is then 13 + 2 = 15\n    # We choose places for 2 dividers out of 15 possible places\n    \n    total_objects = 13 + 2  # oranges + dividers\n    dividers = 2\n    \n    # Number of ways to arrange the objects is C(total_objects - 1, dividers)\n    ways = comb(total_objects - 1, dividers)\n    \n    return ways\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product not in products:\n                products[product] = set()\n            products[product].add((numbers[i], numbers[j]))\n    \n    for product, pairs in products.items():\n        if len(pairs) == 2:\n            taken_numbers = set()\n            for pair in pairs:\n                taken_numbers.update(pair)\n            for number in numbers:\n                if number not in taken_numbers:\n                    return number\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # we'll represent the number as ABCD (where A, B, C, and D are its digits)\n    # after changing the digit in the ones place to the first digit we get DBCA\n    # according to the problem, DBCA = ABCD + 5877\n    # let's define a function to convert individual digits to a number\n    def digits_to_num(a, b, c, d):\n        return a*1000 + b*100 + c*10 + d\n    \n    # since DBCA is greater than ABCD by 5877 and D is now the first digit,\n    # A must be at least 5 less than D for the number to increase when rearranged\n    # let's loop from 5 to 9 for A and 0 to 9 for B and C and find the suitable D\n    for a in range(5, 10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    original = digits_to_num(a, b, c, d)\n                    new = digits_to_num(d, b, c, a)\n                    if new == original + 5877:\n                        return original\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [total for total in possible_totals if total % 7 == 4]\n    return ans[0]\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    d_cookies, j_cookies, ten_cent_cookies = symbols('d_cookies j_cookies ten_cent_cookies')\n\n    # David's cookies are thrice as much as Jeremy's.\n    equation1 = Eq(d_cookies, 3 * j_cookies)\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies.\n    equation2 = Eq(j_cookies, ten_cent_cookies * (3/5))\n    # There were 60 fewer $0.10 cookies than $0.50 cookies.\n    equation3 = Eq(ten_cent_cookies + 60, d_cookies)\n    # David had only $0.50 cookies\n    # Since the cost for David's cookies is for $0.50 each, we already know that d_cookies = 1 (1 * $0.50).\n    d_cookies_value = Eq(d_cookies, 1)\n\n    solutions = solve((equation1, equation2, equation3, d_cookies_value), (d_cookies, j_cookies, ten_cent_cookies))\n\n    # Calculate Jeremy's cookies worth, remember to multiply by the price of each cookie ($0.50).\n    jeremy_cookies_worth = solutions[j_cookies] * 0.50\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between first and fifth tree is the distance of 4 intervals\n    interval_distance = 20 / 4\n\n    # Total intervals in 200 m\n    total_intervals = 200 / interval_distance\n\n    # Total trees is total intervals + 1\n    # Since if there's 1 interval, there are 2 trees\n    total_trees = total_intervals + 1\n    \n    return int(total_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # Rate at which tap A fills the tank in per minute\n    rate_B = 1 / 8   # Rate at which tap B fills the tank in per minute\n    combined_rate = rate_A + rate_B  # Combined rate of both taps filling together per minute\n\n    half_tank_time = 0.5 / combined_rate  # Time to fill half of the tank\n\n    return half_tank_time\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    boys_side = 1\n    while True:\n        if boys_side * boys_side + boys_side * 2 + 1 == girls + boys_side * boys_side:\n            return boys_side * boys_side\n        boys_side += 1\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # The initial expression (36 * 21) / (6 * 7)\n    initial_expression_result = (36 * 21) / (6 * 7)\n\n    # The associated work 36 * 21 / 6 * 7\n    associated_work_result = 36 * 21 / 6 * 7\n\n    # The final given answer\n    final_answer = 6 * 7 * 21\n\n    # Check if his answer is correct\n    is_correct = initial_expression_result == associated_work_result == final_answer\n\n    # Find the correct result if the answer is incorrect\n    if not is_correct:\n        # Jason's mistake: treating divided as grouped multiplication, correct it\n        correct_result = initial_expression_result\n    else:\n        # If Jason is correct, return his answer\n        correct_result = final_answer\n        \n    return correct_result\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_last = 2\n\n    # David's position from the start is Ann's position + people between + 1 (for David himself)\n    david_position_from_start = ann_position + people_between + 1\n\n    # Total number of people in the queue is David's position + 1 (for the last person)\n    total_people = david_position_from_start + david_position_from_last - 1\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_eights = 0\n    page = 1\n    while count_eights < 22:\n        if '8' in str(page):\n            count_eights += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n\n    # Calculate the distance climbed excluding the last day\n    distance_before_last_day = total_distance - climb_distance\n    \n    # Calculate the number of days taken to climb this distance\n    days_before_last_day = distance_before_last_day // net_distance\n    \n    # Check if there's any remaining distance\n    if distance_before_last_day % net_distance > 0:\n        days_before_last_day += 1\n    \n    # Add the last day when the snail climbs out\n    total_days = days_before_last_day + 1\n    \n    return total_days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6 * 1.5 + 4 * x - 19\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800  # Principal amount\n    rate = 8 / 100  # Interest rate of 8%\n    time = 3  # Time period in years\n\n    interest = principal * rate * time  # Simple interest formula\n\n    return interest\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england = 978\n    height_world = 8848\n    difference = height_world - height_england\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(10, 50):\n        if (number + 2) % 3 == 0 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Based on the worst case scenario using the Pigeonhole Principle,\n    # we have to consider that we might pick balls in such a way that\n    # we reach the maximum number of balls picked without fulfilling the condition.\n\n    # If we want to make sure we get 29 balls of one color, we might pick\n    # all 30 white balls first. But we still don't have 29 balls of the same color\n    # since the white balls are now out.\n\n    # Then we can pick 28 red balls, adding up to a total of 30 + 28 = 58 balls.\n    # Now we have to ensure we get 29 balls of one color, so we pick one more red ball.\n    # This gives us 30 white, 29 red (one color reached).\n\n    # Up to this point, we've picked 30 + 29 = 59 balls, and we have 29 red balls.\n\n    # To ensure we also get 28 balls of another color (which would be blue in the worst case),\n    # we now pick all the remaining 11 red balls. 59 (previous count) + 11 = 70 balls in total now.\n\n    # We still need to ensure we get 28 blue balls (as we have 0 blue balls right now).\n\n    # By picking 27 more balls, we will either complete 28 balls of blue or reach 10 balls of white.\n    # So, 70 + 27 = 97 balls are needed in the worst case.\n\n    # But once we have 27 blue balls, the next ball guarantees that we have either 28 blue balls or\n    # 10 white balls, hence the worst scenario requires us to pick the 98th ball to meet the condition.\n  \n    ans = 30 + 29 + 28 + 1 + 10 # 30 white, 29 red, 28 blue, one more red and one more blue to guarantee 28 of another color\n    return ans\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the factorial of a number greater than 9 always ends in zero\n    # (as it includes the product of 10 = 2 x 5), the last digit of 2014!\n    # will be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money each person had initially\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Equations based on the problem statement\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)  # Total amount equation\n    equation2 = Eq(alicia - alicia / 2, beth - 60)                          # Amount left for Alicia and Beth\n    equation3 = Eq(alicia - alicia / 2, casey - 3 * (alicia / 2))           # Amount left for Alicia and Casey\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    # Return the amount of money Alicia had at first\n    return solutions[alicia]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2 * 2 * 3 * 8 * 5 * 5 * 5\n    zeros = 0\n\n    while product % 10 == 0:\n        zeros += 1\n        product //= 10\n\n    return zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    target_numerator = 30\n\n    # since we are looking for the denominator corresponding to target_numerator\n    # we can use the rule of proportion (cross-multiplication)\n    ans = (denominator * target_numerator) / numerator\n    \n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Let's reverse the operations\n    ans = 1  # starting with the answer\n    ans += 8  # reverse of subtracting 8\n    ans *= 8  # reverse of dividing by 8\n    ans /= 3  # reverse of multiplying by 3\n    ans -= 6  # reverse of adding 6\n    return ans\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n    \n    # Since each day he ate 6 more cookies than the day before,\n    # the total number of cookies eaten over five days is the sum\n    # of an arithmetic sequence starting with x and a common difference of 6\n    # The sum of this arithmetic sequence over 5 terms can be calculated as:\n    # Sum = n/2 * (2*a + (n-1)*d), where:\n    # n = number of terms (5 days), a = first term (x), and d = common difference (6)\n    # Sum for 5 days = 5/2 * (2*x + (5-1)*6)\n    \n    # The equation for the total cookies eaten is:\n    total_cookies = 100\n    equation = Eq(5/2 * (2*x + 4*6), total_cookies)\n\n    # Solve the equation for x (the number of cookies eaten on the first day)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    gave_to_sister = 35\n    gave_to_friend = 23\n    picked_seashells = 70\n    total_boxes = 8\n\n    remaining_seashells = (initial_seashells - gave_to_sister - gave_to_friend + picked_seashells)\n    seashells_per_box = remaining_seashells // total_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    # Initialize variables\n    agnes_number = -1\n    \n    # Iterate through the possible numbers\n    for num in range(90):\n        # Check if num is one more than a multiple of 5\n        if (num - 1) % 5 == 0:\n            # Check if num is one less than a prime number\n            if num + 1 in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]:\n                # Check if num is a multiple of 9\n                if num % 9 == 0:\n                    # Assign the value to agnes_number and break the loop\n                    agnes_number = num\n                    break\n\n    return agnes_number\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    P_count = \"HAPPY\".count(\"P\")\n\n    # Calculate the total permutations and then divide by the permutations of the repeated letters\n    total_permutations = factorial(total_letters) // factorial(P_count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    men_factorial = factorial(4)\n    women_factorial = factorial(4)\n    arrangements_men_women = 2  # men can start or women can start\n    total_ways = men_factorial * women_factorial * arrangements_men_women\n    return total_ways\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    \n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    proportion_boys = 2/5\n    proportion_girls = 1 - proportion_boys\n    total_children = girls / proportion_girls\n    boys = total_children * proportion_boys\n    return int(boys)\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n    \n    equation1 = Eq(justin, ashley * 10)\n    equation2 = Eq(crystal, ashley * 2)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Including Peter and John\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n    return total_people\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    # We first find the prime factorization of 96\n    # 96 = 2^5 * 3^1\n    # The number of factors can be calculated by multiplying \n    # (exponent of prime factor + 1) for all prime factors\n    factors_count = (5 + 1) * (1 + 1)\n    return factors_count\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    total_amount = 900\n    first_percentage = 10 / 100\n    second_percentage = 60 / 100\n\n    ans = total_amount * first_percentage * second_percentage\n    return ans\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if len(set([N, O])) == 2:\n                NO = int(f\"{N}{O}\")\n                ON = int(f\"{O}{N}\")\n                if 2 * NO == ON + NO // 10:\n                    return NO\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # Noon in 24-hour format\n    flight_duration = 4  # Flight duration in hours\n    time_difference = 3  # St Petersburg is +3 hours ahead of England time\n    \n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = sum(solutions.values())\n    \n    return total_questions\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    terms = [50, -48, 46, -44, 42, -40, 38, -36, 34, -32]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors\n    different_colors = 3\n    # To guarantee a pair we need to consider the worst case\n    # where Cindy picks different color socks each time\n    # After picking one of each color, the next one will definitely form a pair\n    socks_needed = different_colors + 1\n    \n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 2.5 * 1000 # There are 1000 grams in a kilogram\n    return kg_to_grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_to_km = 5\n    ground_distance_km = (map_distance_cm / scale_cm_to_km) * 1  # 1 km for every 5 cm on the map\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    prod = 1\n    for i in range(2, 51):\n        prod *= (1/i - 1/(51-i))\n    return prod\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    # Let's assume that the total number of children is c.\n    # Then the number of boys is 3/8 * c and the number of girls is 5/8 * c,\n    # because 1 - 3/8 = 5/8.\n    # Each boy took 4 sweets, and each girl took 12 sweets.\n    # The total number of sweets taken by boys is then 4 * (3/8 * c),\n    # and the total number of sweets taken by girls is 12 * (5/8 * c).\n    # According to the problem, the sum of these two numbers is 360:\n    # 4 * (3/8 * c) + 12 * (5/8 * c) = 360.\n    # We can solve for c and find the number of girls (5/8 * c).\n\n    # The equation simplifies to:\n    # (3/2 * c) + (15/2 * c) = 360,\n    # which is equivalent to:\n    # 18/2 * c = 360,\n    # so c = 360 / (18/2) = 360 / 9 = 40.\n\n    # Now, the number of girls is 5/8 of the total children, so:\n    # Number of girls = 5/8 * 40 = 25\n\n    return 25\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    num = 0\n    for i in range(1, 10001):\n        if (i % 7 == 5) and (i % 8 == 6) and (i % 10 == 6):\n            num = i\n            break\n    \n    quotient6 = num // 6\n    quotient7 = num // 7\n    quotient8 = num // 8\n    sum_quotients = quotient6 + quotient7 + quotient8\n    \n    if sum_quotients == 265:\n        return num\n    else:\n        return \"No such number exists.\"\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    speed_mps = speed_kmh * (1000/3600)  # Convert km/h to m/s\n    time_seconds = 24\n\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = math_students + language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i, i+1)\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    # 25% is equal to 0.25 in decimal\n    # The equation becomes (1/3 - 0.25)x = 36\n    # Simplify the equation to a single fraction\n    # Use the common denominator 3 to combine the fractions:\n    # (1 - 0.75)/3 * x = 36\n    # (0.25/3) * x = 36\n    \n    # Now solve for x:\n    x = 36 / (0.25 / 3)\n    \n    return x\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # In number theory, a composite number is a positive integer that has at least one positive divisor other than one and itself.\n    # In other words, a composite number is any positive integer greater than one that is not a prime number.\n    # So, if we take into account the definition of composite numbers, we must consider 1 not as a composite, but as a special case.\n    # To validate Pip's statement, we need to check if there is any positive integer that is neither prime nor composite, excluding 1 as it's a special case:\n    \n    # Check if 1 is considered a composite number according to our definition\n    is_composite = lambda n: any(n % i == 0 for i in range(2, int(n ** 0.5) + 1))\n    \n    # Check numbers from 2 to some upper limit (10 in this case) to see if there's any non prime, non composite number\n    exceptions = [n for n in range(2, 11) if not is_composite(n) and n != 1 and n > 1] # check for prime numbers\n    \n    # Check if we have any exceptions other than prime numbers\n    ans = len(exceptions) == 0  # This should be True if Pip is correct. Otherwise, Pip is mistaken.\n\n    # Now, returning the verdict about Pip's statement:\n    # If ans is True, Pip's statement is correct. Otherwise, it is incorrect.\n    return ans\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for a in range(1, 12):\n        for b in range(1, 12):\n            for c in range(1, 12):\n                for d in range(1, 12):\n                    if a + b + c + d == 12 and len({a, b, c, d}) == 4:\n                        count += 1\n    return count // 24  # Dividing by the number of permutations of the 4 groups\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Kasia keeps 13 sweets for herself\n    kasia_keeps = 13\n\n    # Total sweets Kasia has\n    total_sweets = 42\n\n    # Sweets left to share between Maya and Lucie\n    sweets_to_share = total_sweets - kasia_keeps\n\n    # Each friend gets half of the remaining sweets\n    sweets_each_friend = sweets_to_share / 2\n\n    # Lucie gives 2/7 of her sweets to Joan\n    lucie_gives_to_joan = (2/7) * sweets_each_friend\n\n    # Sweets Lucie keeps\n    lucie_keeps = sweets_each_friend - lucie_gives_to_joan\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    b_more_than_g = 52\n    total_students = 0\n\n    for boys in range(0, 10000, 2):  # outer boys layer and so on every alternate layer\n        girls = boys - 2  # alternate layers of girls\n        total_boys = (boys + 1) ** 2\n        if girls == 0:  # no girls layer in the center\n            total_girls = (boys - 1) ** 2\n        else:\n            total_girls = girls ** 2  # total count of girls\n        difference = total_boys - total_girls\n        if difference == b_more_than_g:\n            total_students = total_boys + total_girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's assume granddad's weekly pension is represented by a fraction 1 (whole pension)\n    # On Friday, he spends 1/4 of his pension\n    friday_spending = 1/4\n    \n    # Remaining after Friday\n    remaining_after_friday = 1 - friday_spending # 3/4 of the pension remains\n    \n    # On Saturday, he spends 1/3 of what remains\n    saturday_spending = remaining_after_friday / 3\n    \n    # Remaining after Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spending\n    \n    # Resulting fraction of pension left for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the capacity of the tank in litres.\n    # When using the 5-litre pail, 4 litres overflow, so the tank holds (5 - 4) litres less than its capacity.\n    # When using the 3-litre pail, 4 more pails of water are needed, so the tank holds (4 * 3) more than its full capacity.\n    # we have:\n    # x - 1 = x + 12\n    # The above equation is incorrect since it implies negative capacity,\n    # and it doesn't result from the given problem statements.\n    # We should set up the correct equation from the problem statements:\n    # If he uses a 5-litre pail, 4 litres overflow, which means the capacity is 5 - 4 = 1 litre less.\n    # If he uses a 3-litre pail, he needs 4 more pails, which means the tank can hold 4 * 3 = 12 litres more.\n    # Thus the correct equation is:\n    # x = 5 - 4 (1)\n    # x = 3 * (4 + 1) (2)\n    # Equating (1) and (2) we get:\n    # 5 - 4 = 3 * (4 + 1)\n    # 1 = 3 * 5 - 3 * 4\n    # Solving for x gives:\n    x = 3 * (4 + 1)\n\n    return x\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4  # sum of the ratio parts (adults:children = 1:4)\n\n    adults = total_people * (1 / ratio_sum)  # calculate adults based on the ratio\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    num_combinations = num_school_bags * num_pencil_boxes\n    return num_combinations\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for i in range(1, 31):\n        if (i * i) + i + (i + 1) == 31 + i * i:\n            return (i + 1) * (i + 1)\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the original number of apples and pears\n    apples, pears = symbols('apples pears')\n\n    # Equation 1: The ratio of the number of apples to the number of pears is 3:4\n    equation1 = Eq(apples / pears, 3 / 4)\n\n    # Equation 2: When 36 pears are replaced by 36 apples, the number of apples becomes 1.5 of the number of pears\n    equation2 = Eq((apples + 36) / (pears - 36), 3 / 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    for i in range(40309, 40309*2):  # start from 40309, since it's the smallest number we have to add something to it\n        if str(i) == str(i)[::-1]:   # if the string representation of the number is the same as its reverse, it's a palindrome\n            ans = i - 40309          # find the difference between the palindrome and the original number\n            return ans\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # Define the recurring decimal part and the non-recurring starting part\n    recurring_part = \"6129043\"\n    non_recurring_start = \"6\"\n\n    # Number of digits to be summed\n    num_digits = 212\n\n    # Calculate the total length of the recurring pattern including the starting part\n    total_pattern_length = len(non_recurring_start) + len(recurring_part)\n\n    # Calculate how many complete sets of the recurring pattern fit into the 212 digits, except the starting digit\n    num_complete_sets = (num_digits - 1) // total_pattern_length\n\n    # Calculate the number of remaining digits after taking into account the complete sets\n    remaining_digits = (num_digits - 1) % total_pattern_length\n\n    # Sum of digits for complete sets\n    sum_of_complete_sets = sum(map(int, recurring_part)) * num_complete_sets\n\n    # Sum of remaining digits\n    all_digits = non_recurring_start + recurring_part\n    sum_of_remaining_digits = sum(map(int, all_digits[1:remaining_digits + 1]))\n\n    # The starting digit is always '6', so we add it to the total sum\n    total_sum = sum_of_complete_sets + sum_of_remaining_digits + int(non_recurring_start)\n\n    return total_sum\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # A willow tree is planted between every 2 ginkgo trees, so we need one less than ginkgo trees.\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # Initialize values needed for the calculation.\n    n = 1\n    zeros = 0\n    power_of_five = 0\n    \n    # Find the power of 5 contributing to the number of zeros since\n    # zeros are created by the pairs of 2 and 5 and there will be more 2s than 5s.\n    while zeros < 28:\n        n += 1\n        current = n\n        \n        # Count the number of times 5 is a factor of the current number.\n        while current % 5 == 0:\n            power_of_five += 1\n            current //= 5\n    \n        # Update the count of zeros with the power of five.\n        zeros = power_of_five\n\n    # n-1 will be the largest number before an additional zero is added.\n    return n - 1\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    number_of_lemonades = 5\n    number_of_chocolate_bars = 6\n    ten_pound_note = 10\n\n    total_cost = (lemonade_price * number_of_lemonades) + (chocolate_bar_price * number_of_chocolate_bars)\n    change = ten_pound_note - total_cost\n\n    return change\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')\n    equation = Eq(sam + 4, 2 * (sam - 4))\n    sam_age = solve(equation, sam)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # To ensure two pairs of matching socks with the same colour, Daniel needs to pick at least:\n    # 1 yellow + 1 green + 1 white + 2 red (1 pair) + 1 more sock to ensure at least one pair of \n    # yellow, green, or white socks. However, this might not guarantee the same colour. \n    # Therefore, we need to pick one more of each: yellow, green, and white, which will guarantee \n    # at least two pairs of one of these colours.\n    draws_needed = 1 + 1 + 1 + 2 + 1 + (1 + 1 + 1)\n    return draws_needed\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    # RAINBOW has 4 consonants (R, N, B, W) and 3 vowels (A, I, O)\n    consonants = 4\n    vowels = 3\n    \n    # Calculate the total permutations of all letters\n    total_permutations = factorial(total_letters)\n    \n    # Calculate permutations of vowels together\n    # Treat the vowels as a single unit plus the consonants\n    vowels_together = factorial(vowels) * factorial(consonants + 1)\n\n    # Subtract permutations where vowels are together from total permutations\n    ans = total_permutations - vowels_together\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '3728'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    for perm in all_permutations:\n        num = int(perm)\n        if num % 2 != 0:\n            return num\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Using the formula for the sum of an arithmetic series: S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is the sum of the first n terms, a is the first term, and d is the common difference.\n    # We have two equations:\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n    \n    # From the first equation we get: 5 * (2a + 9d) = 20\n    # From the second equation we get: 15 * (2a + 29d) = 90\n    \n    # Simplifying both equations:\n    # (2a + 9d) = 4 (Equation 1)\n    # (2a + 29d) = 6 (Equation 2)\n    \n    # Substracting Equation 1 from Equation 2 we get:\n    # 20d = 2\n    # Therefore, the common difference d is:\n    d = 2 / 20\n    return d\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    num, _ = solve_congruence(*congruences)\n    return num\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let x be the number of stickers Penny has.\n    # The number of stickers Amy has would then be (117 - x).\n    # The ratio 5:4 dictates the number of stickers Amy has is 5/4 times Penny's stickers.\n    # Form the equation based on the above information: 5/4 * x = 117 - x\n    # Solve for x to find the number of stickers Penny has.\n    \n    # The proportion of the total that Penny has is 4 / (5 + 4)\n    penny_proportion = 4 / (5 + 4)\n    # Calculate the number of stickers Penny has\n    penny_stickers = penny_proportion * 117\n    \n    return int(penny_stickers)\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words = words_in_9_minutes * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    speed_mps = speed_kmh * 1000 / 3600  # Convert speed to meters per second\n    time_s = 300  # Time in seconds\n    distance_m = speed_mps * time_s  # Distance in meters\n    return distance_m\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let the total number of apples Jack has be x.\n    # According to the question, the fraction of apples brought yesterday is 1/2 of all apples. \n    # Therefore, apples brought yesterday = x / 2\n    # And, apples sold yesterday = 40 = 4/7 * apples brought\n    # So, 40 = 4/7 * (x/2)\n    # We can solve for x.\n    \n    x = symbols('x')\n    equation = Eq(40, (4/7) * (x/2))\n    total_apples = solve(equation, x)\n\n    return total_apples[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    parts = 1 + lines + lines * (lines - 1) // 2 + lines * (lines - 1) * (lines - 2) // 6\n\n    return parts\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, and d.\n    # a, b are the first 2 numbers and c, d are the last 2 numbers.\n    # According to the problem:\n    # (a + b) / 2 = 10 -> a + b = 20 (Equation 1)\n    # (c + d) / 2 = 22 -> c + d = 44 (Equation 2)\n    # (a + d) / 2 = 14 -> a + d = 28 (Equation 3)\n    \n    # To find the average of the two middle numbers b and c, we need to calculate (b + c) / 2.\n    # From Equations 1 and 2 we can find the sum of all four numbers: (a + b) + (c + d) = 20 + 44 = 64 (Equation 4)\n    \n    # Now we subtract Equation 3 from Equation 4 to solve for (b + c)\n    # (a + b + c + d) - (a + d) = 64 - 28 -> b + c = 36\n    \n    # The average of b and c is:\n    # (b + c) / 2 = 36 / 2\n    average_middle_numbers = 36 / 2\n\n    return average_middle_numbers\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48  # Front row\n    last_term = 80   # Last row\n    difference = 4   # Difference between rows\n\n    # Using formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # And rearranging for n: n = ((a_n - a_1) / d) + 1\n    total_rows = ((last_term - first_term) / difference) + 1\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    num_seats = total_rows / 2 * (first_term + last_term)\n\n    return int(num_seats)\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors_7007 = []\n    \n    for i in range(14, 100, 7):  # Search for 2-digit multiples of 7\n        if 7007 % i == 0:\n            j = 7007 // i\n            if 10 <= j <= 99:  # The second factor is also a 2-digit number\n                factors_7007.append((i, j))\n    \n    # In this specific case, we know there should be only one pair of factors meeting the criteria.\n    if len(factors_7007) == 1:\n        result = sum(factors_7007[0])\n    else:\n        result = None  # In case there is no such pair or there are more than one pair\n        \n    return result\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    # Let the number Freya thinks of be x.\n    # According to the problem, 2 * x - 10 = 50\n    # Now we find x using inverse operations.\n    \n    # Add 10 to both sides of the equation.\n    result = 50 + 10\n    # Divide both sides by 2 to get x.\n    x = result / 2\n    \n    return x\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    # Average of A and B is 22, so sum of A and B is 2 * 22\n    sum_A_B = 22 * 2\n    # C is 19\n    C = 19\n    # Sum of A, B, and C is sum of A and B plus C\n    sum_A_B_C = sum_A_B + C\n    # Average of A, B, and C is the sum of A, B, and C divided by 3\n    average_A_B_C = sum_A_B_C / 3\n\n    return average_A_B_C\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    birth_year = 1533\n    death_year = 1603\n    birth_month = 9\n    death_month = 3\n    birth_day = 7\n    death_day = 24\n\n    # Calculate age in years\n    age_years = death_year - birth_year\n    \n    # If the death month has not reached the birth month, subtract one year\n    if death_month < birth_month or (death_month == birth_month and death_day < birth_day):\n        age_years -= 1\n\n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Apply the Pigeonhole Principle:\n    # To find the minimum number of cakes in the layer with the most cakes, divide the total cakes by the layers and round up.\n    cakes_in_most_layer = -(-total_cakes // total_layers)\n\n    return cakes_in_most_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = int(23**0.5)\n    length_to_cut = 23 - max_side**2\n    return length_to_cut\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let c represent the total age of Chinese teachers,\n    # e represent the total age of English teachers,\n    # and m represent the total age of Mathematics teachers.\n    # n represents the number of each subject's teachers (assuming it's the same for all subjects)\n    \n    # From the problem statement, we have 3 equations:\n    # (c + e) / (2n) = 34  =>  c + e = 34 * 2n\n    # (e + m) / (2n) = 36  =>  e + m = 36 * 2n\n    # (c + m) / (2n) = 44  =>  c + m = 44 * 2n\n    \n    # We need to find the average age of one teacher of each of the three subjects\n    # We can calculate the total age of the three teachers combined and then divide by 3\n    # To find the total combined age, we use the Inclusion-Exclusion Principle\n    # Total combined age of one of each subject teacher = (c + e + m) / (3n)\n    # (c + e + m) = (c + e) + (e + m) + (c + m) - 2e (since e has been counted thrice)\n    # (c + e + m) = 34*2n + 36*2n + 44*2n - 2e\n\n    # We can substitute e from one of the first equations, let's use the first one:\n    # e = 34*2n - c\n    # So, (c + e + m) = 34*2n + 36*2n + 44*2n - 2(34*2n - c)\n    # Simplifying:\n    # (c + e + m) = 114 * 2n - 68 * 2n + 2c\n    # (c + e + m) = 46 * 2n + 2c\n    # Since we counted c's total age twice, we need to adjust it\n    # (c + e + m) = 46 * 2n + 2c - c\n    # (c + e + m) = 46 * 2n + c\n    # Now we can substitute for c using the third equation:\n    # c = 44*2n - m\n    # (c + e + m) = 46 * 2n + 44*2n - m\n    # We need to count m once, not subtract it, so we add it back:\n    # (c + e + m) = (46 * 2n + 44*2n - m) + m\n    # (c + e + m) = 90 * 2n\n    # Finally, divide this by the total number of subjects (3) to get the average age:\n    # Average = (c + e + m) / (3n) = (90 * 2n) / (3n) = (90 * 2) / 3 = 60\n\n    return 60\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    return ((21 + 1) * 7) - (20 + (1 * 7))\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = ((2018 + i) / 5) % 1\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the common difference\n    d = symbols('d')\n    \n    # Number of cookies in the last box will be 11 + 9*d (since we start from box 1)\n    last_box_cookies = 11 + 9 * d\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + laast_term)\n    total_cookies = 10 / 2 * (11 + last_box_cookies)\n\n    # Equation for the total number of cookies\n    equation = Eq(total_cookies, 425)\n\n    # Solve for the common difference\n    common_difference = solve(equation, d)\n\n    return common_difference[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    # Find the total sum of money for Chelsia and Benson\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repetitions = factorial(2) # Since 1 is repeated twice\n\n    permutations = factorial(total_digits) // repetitions\n\n    return permutations\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Sum of an arithmetic sequence is given by the formula: S = n/2 * (a1 + an)\n    # where S is the sum, n is the number of terms, a1 is the first term, and an is the last term\n    # The sum S is given as 357, and n is 7 because there are 7 consecutive odd numbers\n    # Because the numbers are consecutive and odd, the common difference (d) is 2\n    # We can now write two equations using the fact that the sequence is arithmetic:\n    # 1. S = 7/2 * (a1 + a7)\n    # 2. a7 = a1 + 6d\n    # From equation 1 and the given sum, we get 357 = 7/2 * (a1 + a7)\n    # Simplifying that, we get 2 * 357 = 7 * (a1 + a7), hence, a1 + a7 = 102\n    # Plugging in equation 2 into this, we get a1 + a1 + 6*2 = 102, since d is 2\n    # Therefore, 2a1 + 12 = 102\n    # Simplifying that we get 2a1 = 90, and finally a1 = 45\n    # So, the first term, a1, is 45, which is the smallest of the seven numbers\n    first_term = (2 * 357 / 7 - 12) / 2\n    return int(first_term)\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    sum_inverse = sum(1/n for n in range(1995, 2009))\n    A = 1 / sum_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    # Let x be the speed of Carter (in metres per minute)\n    # Then, (x + 20) is the speed of Martin\n    # Given the ratio of time taken by Martin and Carter is 9:13,\n    # We have the hypothesis: speed of Carter * time of Carter = speed of Martin * time of Martin\n    # Considering the length of the race is the same for both,\n    # And using the ratio of times, we can set up an equation:\n    # x * 13 = (x + 20) * 9\n    # Then, we solve for x\n\n    # Rearrange the equation:\n    # 13x = 9x + 180\n    x = symbols('x')\n    equation = Eq(13 * x, 9 * x + 180)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The speed of Carter is the solution of the equation\n    return solution[0]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    # Iterate through possible numbers for the first and second number\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            # Calculate the third number to complete the sum to 13\n            x3 = 13 - (x1 + x2)\n            # If the third number is valid (not zero and not exceeding 13) and all numbers are distinct\n            if x3 > 0 and x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    # The total combinations counted will be thrice the actual answer since \n    # each combination is counted three times (once for each number as the starting number)\n    return count // 3\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the time George takes to paint the room on his own\n    g = symbols('g')\n\n    # Fred and George’s combined work per hour\n    combined_work_per_hour = 1/6\n\n    # Fred's work per hour is 1/9 as he takes 9 hours alone\n    fred_work_per_hour = 1/9\n\n    # George's work per hour would be the combined work minus Fred's work\n    george_work_per_hour = combined_work_per_hour - fred_work_per_hour\n\n    # Solve for George's time to paint the room alone\n    equation = Eq(1/g, george_work_per_hour)\n    george_time = solve(equation, g)\n\n    return george_time[0]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\nans = solution(x)  # Replace 'x' with the actual amount of cloth used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    num_red_apples = 14\n    num_yellow_apples = 20\n    # To ensure we have two apples of the same color, we need to consider the worst-case scenario.\n    # This is when we take out all apples of one color plus one more.\n    # Since we have fewer red apples than yellow, we use the red apples for the worst case.\n    worst_case = num_red_apples + 1  # Taking all red apples + 1 (which would have to be a yellow apple)\n    return worst_case\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    red_left = 20\n    red_black_ratio_initial = 3 / 7\n    red_black_ratio_final = 5 / 13\n\n    black_left = (red_left * 13) / 5\n    red_initial = red_black_ratio_initial * black_left\n    \n    red_sold = red_initial - red_left\n    \n    return int(red_sold)\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132 + 68) * (520 - 506)\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of animal\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    \n    # Total number of legs without birds\n    legs_without_birds = cats_legs + dogs_legs + rabbit_legs\n    \n    # Since birds have 2 legs, we find the number of birds\n    # by subtracting the legs of other animals from the total number\n    # and dividing the result by 2 (as each bird has 2 legs)\n    number_of_birds = (28 - legs_without_birds) // 2\n    \n    return number_of_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n\n    # Each person can choose any of the 5 entrances, so the number of ways\n    # is the number of entrances raised to the power of the number of people\n    num_ways = entrances ** people\n    \n    return num_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    last_year_value = 10500\n    loss_percentage = 0.05\n\n    # Find the original price before increase\n    original_price = last_year_value / 1.05\n\n    # Calculate the value after decrease in this year\n    this_year_value = original_price * (1 - loss_percentage)\n\n    # Calculate the profit or loss comparing with the original price\n    profit_loss = this_year_value - original_price\n\n    return profit_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    # Calculate the number of multiples of 5 between 1 and 200\n    multiples_of_5 = 200 // 5\n\n    # Calculate the number of multiples of 7 between 1 and 200\n    multiples_of_7 = 200 // 7\n\n    # Calculate the number of multiples of both 5 and 7 between 1 and 200 (which is multiples of 35)\n    multiples_of_5_and_7 = 200 // 35\n\n    # Apply the inclusion-exclusion principle to avoid double counting\n    ans = multiples_of_5 + multiples_of_7 - multiples_of_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for number in factors_of_42:\n        if number > 10 and number < 20:\n            return number\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    total_numbers = 4\n    average = 6\n    known_sum = 8 + 3 + 9\n\n    total_sum = average * total_numbers\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' represent the cost of a ruler and 'p' represent the cost of a pen\n    r, p = symbols('r p')\n\n    # Given that Chuck bought 2 rulers and 9 pens for $21.60\n    equation1 = Eq(2 * r + 9 * p, 21.60)\n\n    # A ruler costs $0.90 more than a pen\n    equation2 = Eq(r, p + 0.90)\n\n    # Solving the system of equations for the cost of a ruler 'r' and a pen 'p'\n    solution = solve((equation1, equation2), (r, p))\n\n    return solution[r]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    per_bag = 12\n\n    num_bags = total_gravel // per_bag\n    if total_gravel % per_bag != 0:\n        num_bags += 1\n\n    return num_bags\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(10, 50):\n        if i % 3 == 2 and i % 5 == 2 and isprime(i):\n            return i\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_cost = 5\n    refill_cost = 1\n    total_money = 10\n    \n    initial_cups = total_money // initial_cup_cost\n    remaining_money = total_money % initial_cup_cost\n    refills_with_remaining_money = remaining_money // refill_cost\n    \n    total_cups = initial_cups + refills_with_remaining_money\n    return total_cups\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    arithmetic_sum = lambda n, a1, an: (n * (a1 + an)) // 2\n\n    # Calculate the number of terms from 4 to 400, with a step of 4\n    n1 = (400 - 4) // 4 + 1\n    \n    # Sum from 4 to 400\n    sum1 = arithmetic_sum(n1, 4, 400)\n\n    # Since the sequence is symmetric, the sum from 4 to 396 is the same as from 396 to 4\n    sum2 = sum1 - 400\n\n    # The total sum is then the sum of both parts\n    total_sum = sum1 + sum2\n    \n    return total_sum\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Calculate the number of peaches one monkey eats in one day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # Calculate the total number of peaches 5 monkeys eat in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n    \n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    \n    story_perms = factorial(story_books)\n    comic_perms = factorial(comic_books)\n    science_perms = factorial(science_books)\n    \n    # Multiply the permutations of each type of book together\n    all_perms = story_perms * comic_perms * science_perms\n    \n    # Since there are 3 different types of books, they can be arranged in 3! ways\n    type_arrangements = factorial(3)\n\n    # Total number of arrangements is the product of the two calculations\n    total_arrangements = all_perms * type_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_50k_tax = 0.06 * 50000\n    remaining_income = income - 50000\n    remaining_income_tax = (0.06 + T/100) * remaining_income\n\n    equation = Eq(first_50k_tax + remaining_income_tax, 10000)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the total spent from January to March\n    jan_to_mar = 450 * 3\n    \n    # Calculate the total spent from April to July\n    apr_to_jul = 350 * 4\n    \n    # Total spent from August to October is given directly\n    aug_to_oct = 1250\n    \n    # Calculate the total spent from November to December\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total spent for the whole year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average spent per month from January to December\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import factorial as fact\n    \n    # Calculate the number of distributions using stars and bars method:\n    # C(n+k-1, k-1) where n is number of ice-creams, k is number of friends\n    n = 5  # Number of identical ice-creams\n    k = 3  # Number of friends\n    \n    # Since each friend should get at least one ice-cream, we distribute one to each first,\n    # and then distribute the rest (n - k)\n    ways = fact((n - 1)) // (fact(k - 1) * fact((n - 1) - (k - 1)))\n    \n    return ways\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Let's assume the distance to the library is d meters.\n    # Then time taken to walk to the library is d/40 minutes,\n    # and time taken to cycle back is d/60 minutes.\n\n    # Total distance travelled is 2d meters,\n    # and total time taken is (d/40 + d/60) minutes.\n\n    # Average speed is total distance divided by total time.\n    # Average speed = 2d / (d/40 + d/60)\n    # Avoid division by zero by checking for non-zero distance\n    d = 1  # We set the distance to 1 for simplicity; the value doesn't matter since it will cancel out\n    average_speed = 2 * d / (d / walking_speed + d / cycling_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # reverse operation (8)\n    result += 50\n    # reverse operation (7)\n    # We cannot directly reverse this step without knowing the day of birth,\n    # so we'll leave the result as-is for now.\n    # reverse operation (6)\n    result //= 5\n    # reverse operation (5)\n    result += 20\n    # reverse operation (4)\n    result //= 5\n    # reverse operation (3)\n    result -= 6\n    # reverse operation (2)\n    result //= 4\n    # At this point, result should be the month of birth, but since we didn't\n    # reverse step 7, we have the month of birth plus (day of birth / 25)\n    \n    # Find month and day by iterating through possible months and checking\n    # if the month leads to a valid day when subtracted from the current result\n    for month in range(1, 13):\n        day = result - month\n        # Check if day is a valid birthday in the month\n        if day > 0 and day <= 31:\n            birthday = (month, day)\n            break\n\n    return birthday\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let the price of one ice cream serving be 'p'.\n    # Sophie bought 3 servings and had $0.30 left.\n    # So the money she had = 3 * p + 0.30\n    # Sophie needed $2.30 more to buy 5 servings.\n    # So the total cost of 5 servings = 5 * p = (3 * p + 0.30) + 2.30\n    # On simplifying the equation: 5 * p = 3 * p + 2.60\n    # Solving for 'p' we get: 2 * p = 2.60\n    # Therefore, price of one serving 'p' = 2.60 / 2\n\n    price_per_serving = 2.60 / 2\n    money_given = (3 * price_per_serving) + 0.30\n    \n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    eq = Eq(3.5 / (3 * x + 2) + 2 / (1.5 * x + 1), 4.5 / (5 - 6 * x) - 3 / (2.5 - 3 * x))\n    ans = solve(eq, x)\n    return ans[0]  # Assuming we need just one solution, if real.\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(1, 10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for x and y\n    x, y = symbols('x y')\n\n    # Construct the equation based on the given proportion\n    equation = Eq(9 / x, y / 2)\n\n    # Substitute x with 3 to find the corresponding y\n    y_value_when_x_is_3 = solve(equation.subs(x, 3), y)[0]\n\n    # As 9/x = y/2 is a constant proportion, the relationship between x and y is directly proportional\n    relationship = \"directly\"\n\n    return relationship, y_value_when_x_is_3\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits\n    perms = permutations('2356')\n\n    # Initialize the minimum value to a large number\n    min_val = float('inf')\n\n    # Check all permutations to find the smallest odd number\n    for p in perms:\n        num = int(''.join(p))\n        if num % 2 == 1 and num < min_val:  # num must be odd\n            min_val = num\n\n    ans = min_val\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To guarantee at least two balls of the same color,\n    # we consider the worst-case scenario where we alternate between colors.\n    \n    # We take out 1 green ball, then 1 blue ball.\n    # Then, no matter the next ball we take out, we will have two of the same color.\n    # Therefore, we need a total of 3 balls.\n\n    return 3\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Initially, let's represent the number we thought of as 'x'\n    x = symbols('x')\n\n    # Then we perform the operations on 'x' as described by the question.\n    # Think of a number (x)\n    # Add 3 (x + 3)\n    # Multiply by 2 (2 * (x + 3))\n    # Take away 2 (2 * (x + 3) - 2)\n    # Add 10 (2 * (x + 3) - 2 + 10)\n    # Divide by 2 ((2 * (x + 3) - 2 + 10) / 2)\n    # Take away the number you started with ((2 * (x + 3) - 2 + 10) / 2 - x)\n\n    expression = ((2 * (x + 3) - 2 + 10) / 2 - x)\n\n    # Now we simplify the expression to find the number that is left\n    ans = simplify(expression)\n\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    F, J = symbols('F J')\n\n    # Janice had 96 bracelets initially\n    Janice_initial = 96\n\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 3/5 * F\n    Janice_bought = (2/5) * (3/5) * F\n    \n    # After selling and buying, Felicia has 2/5*F bracelets left, and Janice has 96 + Janice_bought\n    new_ratio = Eq((2/5)*F / (Janice_initial + Janice_bought), 5/7)\n\n    # Solve for F\n    solutions = solve((new_ratio,), (F,))\n\n    # Calculate the number of bracelets Janice bought\n    Janice_bought_value = (2/5) * (3/5) * solutions[F]\n\n    return Janice_bought_value\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from sympy import root, sqrt\n\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, 2 / 7 * (jack - 72))\n    \n    solutions = solve((equation1, equation2), (jack, kyle))\n    \n    return solutions[kyle]\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Number of books for each genre\n    num_sf = 20  # science fictions\n    num_cb = 10  # comic books\n    num_novel = 20  # novels\n\n    # Cost of each book\n    cost_sf = 4  # science fictions\n    cost_cb = 5  # comic books\n    cost_novel = 6  # novels\n\n    # Total cost of all books\n    total_cost = num_sf * cost_sf + num_cb * cost_cb + num_novel * cost_novel\n\n    # Total number of books\n    total_books = num_sf + num_cb + num_novel\n\n    # Average cost per book\n    avg_cost = total_cost / total_books\n\n    return avg_cost\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    num_students = lcm(9, 10, 15)\n    return num_students\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n    \n    interest = principal * rate * time\n    total_amount = principal + interest\n    \n    return total_amount\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Annabella could remove all orange, pink, and brown shirts \n    # and still not be sure to have a yellow shirt.\n    # So she must take out all shirts of these colors plus one more,\n    # which will for sure be a yellow shirt.\n    \n    # Number of non-yellow shirts\n    non_yellow_shirts = 6 + 4 + 12\n    \n    # To make sure to get at least one yellow shirt,\n    # she needs to take out one more shirt.\n    shirts_to_take_out = non_yellow_shirts + 1\n    \n    return shirts_to_take_out\n\n# Call the function and store the answer to `ans`.\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20  # number of terms\n    d = 2  # common difference\n    S = 560  # sum of the sequence\n\n    # Sum of an arithmetic progression: S = n/2 * (2a + (n - 1) * d),\n    # where a is the first term. We need to solve for a.\n\n    a = (S * 2 / n - (n - 1) * d) / 2\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    climb_up = 3\n    slide_down = 2\n    days = 0\n    current_distance = 0\n\n    while True:\n        days += 1\n        current_distance += climb_up\n\n        if current_distance >= total_distance:\n            break\n        \n        current_distance -= slide_down\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_period_days = 4\n    second_period_days = 6\n    third_period_days = 5\n\n    first_period_pages = 25 * first_period_days\n    second_period_pages = 40 * second_period_days\n    third_period_pages = 80  # total pages for the last five days\n\n    total_days = first_period_days + second_period_days + third_period_days\n    total_pages = first_period_pages + second_period_pages + third_period_pages\n\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # After giving away the toys, Penny has 14 toys and her brother has 12.\n    # Let the number of toys Penny's brother originally had be x.\n    # According to the problem, Penny had x + 10 toys originally.\n    # After giving away some toys, Penny has 14 toys left, and her brother has 12 toys.\n    # Thus, the number of toys given by Penny to her brother is: (x + 10) - 14\n    # And the number of toys received by her brother is: 12 - x\n    # Then we can set up the equation: (x + 10) - 14 = 12 - x\n    # Simplify the equation to find the value of x.\n\n    x = symbols('x')\n    equation = Eq((x + 10) - 14, 12 - x)\n    solution = solve(equation, x)\n\n    # The original amount of toys Penny's brother had is the solution to the equation.\n    return solution[0]\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for number in product('0123456789', repeat=3):\n        if number[0] != '0' and number.count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35 * 15\n\n    cost_difference = individual_cost - multipack_cost\n\n    return cost_difference\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):\n        reversed_age = int(str(age)[::-1])\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum = (n * (n + 1)) // 2\n    return sum\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To ensure he has 4 cards of the same suit, Tom must draw enough cards\n    # so that even in the worst-case scenario, where the cards are drawn as\n    # evenly as possible among the suits, he still ends up with 4 cards of at least\n    # one suit.\n\n    # There are 4 suits, so if he draws one card from each suit, he has 4 cards.\n    # He can continue doing this without having 4 cards of the same suit until he\n    # has 3 cards of each suit. Once he draws the next card, he will have 4 of the\n    # same suit because it will have to be from one of the suits he already has 3 of.\n\n    # 3 cards from each suit is 3 * 4 = 12 cards\n    # Draw one more card to ensure the 4th card of a suit, so 12 + 1 = 13\n\n    return 13\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    # Let the total number of tickets be x.\n    # According to the problem, 60% have been sold and there are 28 tickets left.\n    # So, 40% of the total tickets are unsold and equal to 28 tickets.\n    # 40% of x = 28\n    # (40/100)*x = 28\n    # x = 28 / (40/100)\n    x = 28 / (40/100)\n    return int(x)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    spent = symbols('spent')\n\n    # Set up the equation based on the problem statement\n    equation = Eq(1420 - spent, 4 * (505 - spent))\n\n    # Solve the equation\n    solution = solve(equation, spent)\n\n    # Return the amount spent\n    return float(solution[0])\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2/3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let's denote the total number of people at the party as P.\n    # Since 3/7 of the people were adults, 4/7 were children.\n    # The number of children is then (4/7) * P.\n    # We know 3/8 of the children are boys, so 5/8 of the children are girls.\n    # The number of girls is therefore (5/8) * (4/7) * P = 20/56 * P = 45 (given in the problem)\n    # Simplifying the equation: (5/8) * (4/7) * P = 45 -> P = (45 * 8 * 7) / (5 * 4)\n    P = 45 * 8 * 7 // (5 * 4)\n    return P\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    two_dollar_total = two_dollar_notes * 2\n    fifty_cent_total = fifty_cent_coins * 0.5\n    total_money = two_dollar_total + fifty_cent_total\n\n    money_left = total_money - file_cost\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_to_n = n * (n + 1) // 2\n    return sum_to_n\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_rate = 3\n    slide_rate = 1\n    net_distance_per_day = climb_rate - slide_rate\n    day = 0\n\n    current_distance = 0\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_rate\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_rate\n\n    return day\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "from math import factorial\n\ndef solution():\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to seat in a row\n\n    # Use the permutation formula P(n,r) = n! / (n-r)!\n    ans = factorial(n) / factorial(n - r)\n\n    return int(ans)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    # Number of intervals between ginko trees will be one less than the number of ginko trees\n    num_intervals = 30 - 1\n\n    # Number of willow trees in each interval\n    willow_trees_per_interval = 2\n\n    # Total number of willow trees\n    total_willow_trees = num_intervals * willow_trees_per_interval\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    upstream_speed = speed_in_still_water - speed_of_current\n    time = distance / upstream_speed\n\n    return time\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Equations based on the problem statement:\n    # Adam_weight + Ben_weight = 102\n    # Ben_weight + Carl_weight = 97\n    # Adam_weight + Carl_weight = 93\n    \n    # Summing all equations gives us:\n    # 2 * (Adam_weight + Ben_weight + Carl_weight) = 102 + 97 + 93\n    # Therefore, the total weight is half of that sum.\n    total_twice_weight = 102 + 97 + 93\n    total_weight = total_twice_weight / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500 # in grams\n    cheese_price_per_kg = 7.48 # in pounds\n    apple_price_each = 0.12 # in pounds\n    yoghurt_price_each = 0.46 # in pounds\n    total_money = 10 # in pounds\n    \n    # Total cost calculations\n    cheese_cost = (cheese_weight / 1000) * cheese_price_per_kg\n    apple_cost = 8 * apple_price_each\n    yoghurt_cost = 2 * yoghurt_price_each\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    \n    # Change calculation\n    change = total_money - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    combined_time = 6\n\n    # Combined rate is the total aircrafts divided by the total time\n    combined_rate = total_aircrafts / combined_time\n\n    # Andy's rate is the combined rate minus Zack's rate\n    andy_rate = combined_rate - zack_rate\n\n    # Time for Andy to sell all the aircrafts is total aircrafts divided by Andy's rate\n    time_for_andy = total_aircrafts / andy_rate\n\n    return time_for_andy\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    n = 1  # Starting from one-layer square\n    while True:\n        students = (2*n + 1) ** 2  # Outermost layer and all the even layers are students\n        teachers = (2*n) ** 2 if n > 0 else 0  # Inner layers are teachers\n\n        if students - teachers == 80:\n            total_people = students + teachers\n            return total_people\n        n += 1\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n    \n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the smaller number, y is the bigger number\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(y, 3 * x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    money_saved = 1 * 7\n    lent_to_brother = 5\n    snacks_spent = 3\n\n    current_amount = original_amount + money_saved - lent_to_brother - snacks_spent\n\n    return current_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let s, m, r represent the original amounts of money Steve, Mark, and Ryan have, respectively.\n    s, m, r = symbols('s m r')\n\n    # The cost of the meal is represented by x.\n    x = symbols('x')\n\n    # The following equations are derived from the problem statement:\n    equation1 = Eq(s, m + 40)\n    equation2 = Eq((s - x)/3, (m - x)/8)  # If Steve paid for the meal\n    equation3 = Eq((s - x)/5, (r - x)/1)  # If Ryan paid for the meal\n    equation4 = Eq((m - x)/1, (r - x)/9)  # If Mark paid for the meal\n\n    # Solve the system of equations to find the values of the symbols\n    solutions = solve((equation1, equation2, equation3, equation4), (s, m, r, x))\n\n    # Extract the cost of the meal from the solutions\n    meal_cost = solutions[x]\n\n    return meal_cost\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid = 10.50\n    remaining_money = total_money - money_repaid\n    money_spent = remaining_money / 2\n    money_left = remaining_money - money_spent\n\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 1\n    value = 44000\n    \n    for i in range(2, value + 1):\n        if value % (i**3) == 0:\n            q *= i\n            value //= (i**3)\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the width and l be the length\n    w = symbols('w')\n    l = symbols('l')\n\n    # The length is twice the width\n    equation1 = Eq(l, 2 * w)\n\n    # The perimeter is 72 meters\n    # Perimeter of a rectangle = 2 * (length + width)\n    equation2 = Eq(2 * (l + w), 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, w))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            factors += 1\n    return factors\n    \nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kilograms\n    gravity = 9.81  # acceleration due to gravity in m/s^2\n    coefficient_of_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied in Newtons\n\n    # Calculate the normal force, which is mass times gravity\n    normal_force = mass * gravity\n\n    # Calculate the maximum possible static friction force\n    max_static_friction = coefficient_of_friction * normal_force\n\n    # The static friction force will match the applied force until it reaches its maximum value\n    static_friction = min(applied_force, max_static_friction)\n\n    return static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n    n = 15 - 3\n    common_difference = (term_15 - term_3) / n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Start checking from 1, until we find the required square and cube\n    i = 1\n    while True:\n        cube = i ** 3\n        square = (cube + 1) ** 0.5\n        if square.is_integer():\n            return int(square ** 2)\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    j, n = symbols('j n')\n\n    # Nina has more buttons than James, total number is 24\n    equation1 = Eq(n + j, 24)\n\n    # When Nina gave 6 of her buttons to James, they have the same number\n    equation2 = Eq(n - 6, j + 6)\n    \n    solutions = solve((equation1, equation2), (j, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_workers * total_hours)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    net_climb_per_day = climb_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given in the problem statement, the relationship between the number of bags (x)\n    # and the tax charged (y) is linear. Therefore, the equation is of the form:\n    # y = mx + c, where m is the slope (rate of change of y with respect to x)\n    # and c is the y-intercept (the tax charged when x is 0).\n\n    # However, since the problem statement does not provide specific values for the slope\n    # or the y-intercept, we can only represent the equation in its general form.\n    m = symbols('m')  # slope of the line\n    c = symbols('c')  # y-intercept of the line\n    x = symbols('x')  # number of bags used\n    y = symbols('y')  # tax charged\n    \n    # General form of the equation relating the number of bags used (x) to the tax charged (y)\n    equation = Eq(y, m * x + c)\n\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Conditions are:\n    # x % 4 = 3\n    # x % 5 = 3\n    # x % 7 = 3\n    # x % 9 = 0\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    answer, _ = solve_congruence(*congruences)\n    \n    return answer\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n    ans = max(fraction_value, decimal_value)\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    result = 3 * (4/5) * (1 + (1/9)) * (5 + (1/2)) * (3/11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_5_days_or_less = 25\n    additional_daily_fee_after_5_days = 20\n\n    # Calculate maximum days Steven could keep the car if he paid $25 for each day\n    max_days_at_higher_rate = (total_paid - flat_fee) // daily_fee_5_days_or_less\n\n    if max_days_at_higher_rate <= 5:\n        # Steven kept the car 5 days or less\n        return max_days_at_higher_rate\n    else:\n        # Calculate extra days keeping the car beyond the 5 days at the lower additional daily fee\n        extra_days = (total_paid - flat_fee - 5 * daily_fee_5_days_or_less) // additional_daily_fee_after_5_days\n        return 5 + extra_days  # 5 days at the higher rate plus the extra days at the lower rate\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    prod = 1\n    for i in range(2, 51):\n        prod *= (1/i - 1/(100-i+1))\n    return prod\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height\n    current_height = initial_height\n\n    while current_height > 0:\n        current_height *= rebound_ratio\n        total_distance += 2 * current_height\n    \n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # After folding the booklet, two facing pages will have one sheet between them.\n    # Let the smaller number on the left-hand page be 'n'.\n    # Then the numbers on the pages of the sheet are n, n+1, n+2, n+3.\n    # The sum of the four pages is 58, so we can write the equation:\n    # n + (n + 1) + (n + 2) + (n + 3) = 58\n    # Simplify the equation to find 'n':\n    # 4n + 6 = 58\n    # 4n = 52\n    # n = 13\n    # The smallest number 'n' corresponds to the last page number of the first sheet.\n    # Since there is no sheet with a 0 at the end (because the first sheet starts with page 1),\n    # we can find out the total number of sheets by dividing 'n' by 4 and adding 1.\n    n = (58 - 6) // 4\n    total_sheets = n // 4 + 1\n    return total_sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Sam had an equal number of green and yellow toy cars: green = yellow\n    equation1 = Eq(green, yellow)\n\n    # After giving away 60 green and 14 yellow, he had thrice as many yellow as green: yellow - 14 = 3 * (green - 60)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Green toy cars in the end = green - 60\n    green_in_the_end = solutions[green] - 60\n\n    return green_in_the_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600\n    elephant_speed = 250\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    common_difference = 4\n\n    # Calculate the number of terms in the sequence 4 to 400\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Since the sequence is arithmetic, we can use the sum formula:\n    # Sum = n/2 * (first_term + last_term)\n    sum_one_direction = (num_terms / 2) * (first_term + last_term)\n\n    # The sequence is palindromic (repeats in reverse), so the total sum is double that of one direction\n    total_sum = sum_one_direction * 2\n\n    # Subtract the last_term because it is counted twice in a palindrome\n    ans = total_sum - last_term\n\n    return ans\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n\n    bad_apples = (percentage_bad / 100) * total_apples\n\n    return bad_apples\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol t for time after 6:10 pm\n    t = symbols('t')\n    \n    # Simon's distance is the time multiplied by his speed plus the initial 15 km distance\n    simon_distance = 80 * t + 15\n    # Wife's distance is just the time multiplied by her speed\n    wife_distance = 60 * t\n    \n    # Set up the equation where both distances are equal (when Simon overtakes his wife)\n    equation = Eq(simon_distance, wife_distance)\n    \n    # Solve the equation\n    time_to_overtake = solve(equation, t)[0]\n    \n    # Convert t to hours and minutes\n    hours = int(time_to_overtake)\n    minutes = int(60 * (time_to_overtake - hours))\n    \n    # Calculate the time when Simon overtakes his wife by adding t to 6:10 pm\n    overtaking_hour = 6 + hours\n    overtaking_minute = 10 + minutes\n    \n    # Account for the cases where minutes exceed 60\n    if overtaking_minute >= 60:\n        overtaking_hour += overtaking_minute // 60\n        overtaking_minute = overtaking_minute % 60\n    \n    # Return the time as a formatted string\n    return f'{overtaking_hour}:{overtaking_minute:02d} pm'\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # Cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7:3\n    ratio_pen_to_pencil = 7 / 3\n    # Therefore, cost of 1 pen\n    cost_of_1_pen = cost_of_1_pencil * ratio_pen_to_pencil\n    # Work out the cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_1_pen\n    \n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Define the number of choices for each category\n    num_drinks = 2  # coffee, milk\n    num_food = 3    # hamburgers, burritos, bagels\n\n    # Apply the Principle of Multiplication\n    num_combinations = num_drinks * num_food\n\n    return num_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # We only need to count the number of lockers that end up being unlocked.\n    # A locker changes its state only when the locker number is divisible by the called number (3 or 5 in this case).\n    # Ultimately, a locker will be unlocked if it is visited an odd number of times.\n    # A locker is visited once for each of its divisors, so if it has an odd number of divisors, it will end up unlocked.\n    # Only perfect squares have an odd number of divisors, because every divisor (less than the square root) has a unique pair (greater than the square root), except for the square root itself.\n\n    # We find all perfect squares less than or equal to 100\n    # because they are the only lockers that will be unlocked at the end.\n    count = 0\n    for i in range(1, 101):  # 1^2 to 10^2 are the perfect squares within 1 to 100\n        if i ** 0.5 == int(i ** 0.5):  # Checking if 'i' is a perfect square\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # First calculate ways to reach step 5\n    ways_to_reach_5 = combinations(4, 2)\n    \n    # Then calculate ways to reach step 10 from step 5\n    # Total steps needed = 10 - 5 = 5 steps, which can be done by:\n    # 1. Taking five 1-steps (this is 1 way)\n    # 2. Taking one 1-step and two 2-steps in any order (this is C(3,1) ways)\n    # 3. Taking three 2-steps and one 1-step (this is 1 way)\n    # So there are 4 positions and we choose 1 position for the single 1-step\n    ways_to_reach_10_from_5 = 1 + combinations(3, 1) + 1\n\n    # Multiplying the two possibilities gives the total different ways to reach the top.\n    return ways_to_reach_5 * ways_to_reach_10_from_5\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    # Time taken to cook 2 pancakes\n    time_for_2_pancakes = 3\n    # Total time available to cook\n    total_time = 12\n    # Calculate number of pancakes cooked in total time\n    pancakes_in_total_time = (total_time / time_for_2_pancakes) * 2\n    return pancakes_in_total_time\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The strategy involves always having the fastest person (either Jason or Chi Yew) return with the boat. \n    # This minimizes the time spent on each round trip.\n    \n    # Step 1: Jason and Chi Yew cross together (5 minutes). \n    # Jason returns (5 minutes).\n    total_time = 5 + 5\n    \n    # Step 2: Michael and Wei Jie cross together (9 minutes, because Wei Jie is slower).\n    # Chi Yew returns (5 minutes).\n    total_time += 9 + 5\n    \n    # Step 3: Jason and Chi Yew cross together again (5 minutes).\n    total_time += 5\n    \n    # Now, all four have crossed in the shortest time.\n    return total_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of the road\n    total_days = 5  # total days to pave the road\n    meters_per_day = total_length / total_days  # meters paved per day\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    min_people_per_country = 9\n\n    # Pigeonhole Principle: (Number of Pigeons / Number of Holes) rounded up.\n    ans = (min_people_per_country - 1) * countries + 1\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Given the sum of the consecutive numbers is 2014 and there are 53 terms\n    sum_of_terms = 2014\n    number_of_terms = 53\n    \n    # The formula for the sum of an arithmetic sequence is n/2 * (first_term + last_term)\n    # Here, n = number_of_terms, sum_of_terms is known, and we need to find last_term\n    # We also know that the term in the middle of the sequence is the average value of the sum\n    middle_term = sum_of_terms / number_of_terms\n    \n    # Since there are an odd number of terms, the middle term is a term in the sequence\n    # The largest number will be 26 terms away from the middle on the right\n    last_term_offset = (number_of_terms - 1) // 2\n    \n    # Find the largest number\n    largest_number = middle_term + last_term_offset\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    \n    # Equation for incorrect calculation\n    equation = Eq(88 / A, 22)\n    \n    # Solve for A\n    A_value = solve(equation, A)[0]\n    \n    # Calculate correct answer with correct value 98\n    correct_answer = 98 / A_value\n    \n    return (A_value, correct_answer)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    cost_for_twelve = cost_per_calculator * 12\n    return cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas' speed (laps per minute)\n    lucas_speed = 5 / 6\n    # Miller's speed (laps per minute)\n    miller_speed = 5 / 10\n\n    # Relative speed (laps per minute)\n    relative_speed = lucas_speed - miller_speed\n\n    # Lucas will overtake Miller every time he completes 1 lap more than Miller\n    # Therefore, to find out how long it takes for that to happen we divide 1 lap by their relative speed\n    time_to_overtake = 1 / relative_speed\n\n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    return 1670 + 4\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    remainder = 5217 % 13\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    total_hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = total_hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/4 * remaining\n\n    equation = Eq(children - men, 120)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    # Fixed charge for up to 15 minutes\n    base_charge = 80 # cents\n    base_minutes = 15 # minutes\n\n    # Total cost of the call in cents\n    total_cost = 140 # 1.4 dollars in cents\n\n    # Cost per additional minute\n    additional_cost = 5 # cents\n\n    # Calculate the charge for additional minutes\n    additional_charge = total_cost - base_charge\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_charge / additional_cost\n\n    # Calculate the total duration of the call\n    total_minutes = base_minutes + additional_minutes\n    \n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Tim's age as T and his mother's age as M.\n    T, M = symbols('T M')\n\n    # According to the problem, when Tim is as old as his mother's current age (M), his mother will be 54.\n    # At that time, the difference in their ages will be the same as it is now.\n    # So we can set up the equation: M + (M - T) = 54\n\n    equation = Eq(M + (M - T), 54)\n    \n    # Since we already know that Tim is 8 years old, we can substitute T by 8\n    solutions = solve(equation.subs(T, 8), M)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # Orange string length in meters\n    orange_length_cm = orange_length_m * 100  # Convert orange string length to centimeters\n\n    purple_length_cm = orange_length_cm / 9.2  # Purple string length in centimeters\n    green_length_cm = purple_length_cm + 24.9  # Green string length in centimeters\n\n    green_length_m = green_length_cm / 100  # Convert green string length to meters\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    for A in range(10):\n        if (10 * A + 3) * 4 == 13 * A + 12:\n            return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Total work units can be assumed as the LCM of Ivy's and Kevin's individual days to complete the job.\n    # To keep it simple, consider 120 units of work representing the LCM of 24 and 20.\n\n    total_work = 120\n    ivy_rate = total_work / 24  # Ivy's work rate per day\n    kevin_rate = total_work / 20  # Kevin's work rate per day\n\n    # Let x be the number of days Kevin takes off.\n    # For the first (18 - x)/2 days both work together.\n    # For the next (18 - x)/2 days only Ivy works.\n    # The amount of work done must add up to total work units (120).\n\n    # Equation based on the description\n    # (Ivy_rate + Kevin_rate) * (18 - x)/2 + Ivy_rate * (18 - x)/2 = Total_work\n\n    # Simplifying the equation\n    # (Ivy_rate + Kevin_rate + Ivy_rate) * (18 - x) = 2*Total_work\n    # (Ivy_rate * 2 + Kevin_rate) * (18 - x) = 2*Total_work\n\n    # Solving for x\n    x = ((2 * ivy_rate + kevin_rate) * 18 - 2 * total_work) / (2 * ivy_rate + kevin_rate)\n\n    return x\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49.5)\n    equation2 = Eq(x, 5*y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    longer_piece = solutions[x]\n    \n    # Rounding off the answer to 1 decimal place\n    return round(float(longer_piece), 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    monday_money = 60 + 40\n    total_money = monday_money * 3  # For Monday, Tuesday, and Wednesday\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_ratio = 4\n\n    apple_juice = (apple_ratio / ratio_sum) * total_litres\n\n    return apple_juice\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = -1\n    effective_distance = day_distance + night_distance\n    current_distance = 0\n    day = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy's rate of work per day\n    nancy_rate = 1 / 6\n\n    # Combined rate of work per day (Nancy and Tim)\n    combined_rate = 1 / 4\n\n    # Tim's rate of work per day\n    tim_rate = combined_rate - nancy_rate\n\n    # Time required for Tim to complete the work alone\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # deposit days (odd)\n            total_money += 5\n        else:  # spending days (even)\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    year_7_normal = 0.2  # 20%\n    year_7_left = 0.1  # 10%\n    total_left = 400  # total number of pupils left at school\n\n    # The total number of Year 7 pupils normally at school\n    # year_7_normal * x - girls_missing = year_7_left * total_left\n\n    # Since total_left = x - girls_missing\n    # We can rewrite the equation as:\n    # year_7_normal * x - (x - total_left) = year_7_left * total_left\n    # 0.2x - x + 400 = 0.1 * 400\n    # -0.8x + 400 = 40\n    # 0.8x = 400 - 40\n    # 0.8x = 360\n    # x = 360 / 0.8\n    x = 360 / 0.8\n\n    return int(x)\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = \"3\" * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    distance_per_cycle = 3 * 3 - 2  # 3 jumps up and 1 jump falling down\n    tree_height = 31\n    cycles = (tree_height - 3) // distance_per_cycle  # -3 because the last cycle may not need the fall\n    jumps = cycles * 3\n\n    # The height reached after full cycles\n    height_after_full_cycles = cycles * distance_per_cycle\n\n    # Final jump, without falling\n    while height_after_full_cycles < tree_height:\n        height_after_full_cycles += 3\n        jumps += 1\n\n    return jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    result = 32.4 * 20\n    return result\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    result = 1 / 22\n    numerator_sequence = [1, 2, 3, 4, 5, 6]\n    denominator_start_sequence = [1, 2, 4, 7, 11, 16]\n    differences_sequence = [1, 2, 3, 4, 5, 6]\n\n    for i in range(6):\n        numerator = numerator_sequence[i]\n        denominator_start = denominator_start_sequence[i]\n        denominator_end = denominator_start + differences_sequence[i]\n        result += numerator / (denominator_start * denominator_end)\n\n    return result\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_shoes = 40\n    remaining_after_dress_fraction = 3/5\n    remaining_after_dress = remaining_after_shoes / (1 - remaining_after_dress_fraction)\n    initial_money_fraction = 1/3\n    initial_money = remaining_after_dress / (1 - initial_money_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def find_zeroes(n):\n        zeroes = 0\n        d = 5\n        while n // d > 0:\n            zeroes += n // d\n            d *= 5\n        return zeroes\n\n    num_zeroes_999_fact = find_zeroes(999)\n    num_zeroes_300_fact = find_zeroes(300)\n\n    ans = num_zeroes_999_fact - num_zeroes_300_fact\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The number of students on the outer layer is equal to the perimeter of the square \n    # divided by 4 (since a square has 4 equal sides), so to find the side length:\n    side_length = 60 // 4\n    \n    # The total number of students will equal the square of the side length\n    total_students = side_length ** 2\n    \n    return total_students\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define variables\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(cars, (4/3) * bikes)\n    equation2 = Eq(bikes, (5/4) * lorries)\n    \n    # List to hold possible solutions within the constraints\n    possible_solutions = []\n    \n    # Search for solutions where the total number is even and less than 100\n    for lorries_count in range(2, 100, 2): # lorries must be even for bikes to be integer\n        solution = solve((equation1, equation2), (cars, bikes))\n        total_vehicles = solution[cars] + solution[bikes] + lorries_count\n        if total_vehicles % 2 == 0 and total_vehicles < 100:\n            possible_solutions.append((solution[cars], solution[bikes], lorries_count))\n\n    # There should be a unique solution that fits the problem constraints\n    return possible_solutions[0] if possible_solutions else None\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    # Define symbols for the unknowns\n    from sympy import symbols, Eq, solve\n    A_initial, B_initial, added_buttons = symbols('A_initial B_initial added_buttons', integer=True)\n\n    # Form the equations based on the problem statement\n    equation1 = Eq(A_initial, B_initial + 64)                 # A has 64 more buttons than B initially\n    equation2 = Eq(B_initial - 2*added_buttons, B_initial - 28)  # B has 28 fewer buttons after removing 2 for every 1 added to A\n    equation3 = Eq((A_initial + added_buttons + (B_initial - 2*added_buttons)) / (B_initial - 2*added_buttons), 4)  # Final ratio of the total buttons to buttons in B is 4:1\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A_initial, B_initial, added_buttons))\n\n    # Return the number of buttons in box A initially\n    return solutions[A_initial]\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1  # Start with the first layer\n    tiles_used = 0\n\n    while tiles_used + (layer * 2 + (layer - 1) * 2) ** 2 - (layer - 1) ** 4 <= total_tiles:\n        tiles_used += (layer * 2 + (layer - 1) * 2) ** 2 - (layer - 1) ** 4\n        layer += 1\n\n    # At this point, `layer - 1` is the last complete layer we have\n    red_tiles = sum(((2 * i + 1) ** 2 - (2 * i - 1) ** 2) for i in range(1, layer, 2))\n    green_tiles = sum(((2 * i) ** 2 - (2 * i - 2) ** 2) for i in range(2, layer, 2))\n    \n    # Check if the last incomplete layer (if any) is red or green\n    if layer % 2 == 0:  # Even layer, green tiles\n        green_tiles += total_tiles - tiles_used\n    else:  # Odd layer, red tiles\n        red_tiles += total_tiles - tiles_used\n\n    if red_tiles > green_tiles:\n        more_used_color = \"red\"\n    else:\n        more_used_color = \"green\"\n\n    difference = abs(red_tiles - green_tiles)\n    return more_used_color, difference\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    total_rounds = 12\n    win_cards = 4\n    lose_cards = -2\n    \n    for wins in range(total_rounds + 1):\n        loses = total_rounds - wins\n        if wins * win_cards + loses * lose_cards == total_cards:\n            return loses\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval = 10  \n    number_of_bins = (length_of_boulevard // interval) + 1  \n\n    return number_of_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # Initialize the original number as a string\n    num_str = '262011'\n    # Initialize counter for the number of 2011s\n    n = 0\n    # Loop to find the minimum n such that the number is divisible by 33\n    while True:\n        # Construct the number with n repetitions of '2011' and convert it to integer\n        num = int(num_str + '2011' * n + '7')\n        # Check divisibility by 33\n        if num % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    total_flour_needed = flour_per_cake * number_of_cakes\n    return total_flour_needed\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    \n    while min(x, y, z) > 0:\n        if x > y and x > z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > x and y > z:\n            y -= 3\n            x += 1\n            z += 1\n        elif z > x and z > y:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n        \n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Implement a function to calculate the number of partitions of an integer into a certain number of parts\n    # This is a classic problem of finding the number of ways to partition an integer into a sum of integers,\n    # which can be seen as calculating the number of non-negative integer solutions (including 0) to the equation\n    # x1 + x2 + x3 = 7, where the order of xi does not matter because the plates are identical.\n\n    # Using the formula for partitioning an integer with indistinguishable parts (stars and bars method),\n    # The number of ways to partition n into k parts is C(n+k-1, k-1), where C is the binomial coefficient.\n\n    from math import comb\n    \n    # n is the number of lollipops, k is the number of plates\n    n = 7\n    k = 3\n    \n    # using stars and bars method\n    ways = comb(n + k - 1, k - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob can make 3 cuts in 3 minutes, each cut producing an additional piece\n    cuts_for_4_pieces = 3\n    # Every additional piece needs one more cut\n    cuts_for_8_pieces = 7\n    # Time taken for each cut is the same\n    time_per_cut = 3 / cuts_for_4_pieces\n    # Total time needed for 8 pieces\n    time_for_8_pieces = time_per_cut * cuts_for_8_pieces\n    return time_for_8_pieces\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah * (1 - 3/5), 2 * (chai_seng * (1 - 6/7)))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    remaining_cards = initial_cards - duplicates + new_cards\n\n    return remaining_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as a single person, so there are 7 \"people\" to arrange\n    arrangements_of_7 = factorial(7)\n    \n    # Amy and Judy can sit in 2 different orders next to each other\n    arrangements_of_amy_and_judy = 2\n    \n    # The 7 \"people\" arrangement on a circular table is considered the same \n    # if it is rotated, so we divide by 7 for each unique order\n    unique_orders = arrangements_of_7 * arrangements_of_amy_and_judy // 7\n    \n    return unique_orders\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    andy, ben = symbols('andy ben')\n\n    # Initial condition: Andy had 84 fewer cookies than Ben\n    equation1 = Eq(andy, ben - 84)\n\n    # After purchases: Andy bought 1/3 more cookies and Ben bought 1/5 more cookies\n    equation2 = Eq(andy * (1 + 1/3), ben * (1 + 1/5))\n\n    # Final condition: Andy had 1/3 as many cookies as Ben in the end\n    equation3 = Eq(andy * (1 + 1/3), ben * (1 + 1/5) / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andy, ben))\n\n    # Get the number of cookies Andy had in the end\n    andy_end = solutions[andy] * (1 + 1/3)\n\n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total = sum(1 / i for i in range(1, 8))\n    return int(total)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n\n    years = 0\n    amount = principal\n    \n    while amount < final_amount:\n        amount += amount * rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    return sum(numbers)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Odd-indexed terms (1, 3, 5, ...) are increasing by 1 starting from 18.\n    # Even-indexed terms (2, 4, 6, ...) are increasing by 1 starting from -16.\n    \n    # Determine the term number of n\n    term_number = (5 + 1)  # the next term's index after the sequence provided\n\n    if term_number % 2 == 1:\n        # If the term number is odd, it follows the pattern of the first term, 18.\n        base_value = 18\n        increment = (term_number - 1) // 2  # integer division\n        n = base_value + increment\n    else:\n        # If the term number is even, it follows the pattern of the second term, -16.\n        base_value = -16\n        increment = (term_number // 2) - 1\n        n = base_value + increment\n\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Find the ratio of the new numerator to the original numerator\n    ratio = new_numerator / original_numerator\n    \n    # The denominator is multiplied by this same ratio\n    new_denominator = original_denominator * ratio\n    \n    return int(new_denominator)\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let's denote the numbers as a > b > c > d.\n    # According to the question, we have:\n    #     d + (a + b + c) / 3 = 39  =>  3d + a + b + c = 117\n    #     a + (b + c + d) / 3 = 51  =>  3a + b + c + d = 153\n\n    # Subtracting the first equation from the second equation, we get:\n    #     3a - 3d = 153 - 117\n    #     3a - 3d = 36\n    #     a - d = 12\n    # Since a > b > c > d, the minimum value of a - d is when b = a - 1, c = b - 1, d = c - 1\n    # Therefore, d = a - 3, and we can find the maximum value of a from the above equation:\n    #     a - (a - 3) = 12\n    #     a = 12 + a - 3\n    #     a = 15\n\n    # Thus, the largest possible value of the largest number is 15.\n    return 15\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Let the distance between home and school be x meters.\n    # When Ahmad meets his brother, Ahmad has walked x + 210 meters and his brother has walked x - 210 meters.\n    # Ahmad's walking time is equal to his brother's because they started at the same time.\n    # Therefore, the ratio of their speeds, 80/50, would also be the ratio of the distances they covered.\n    # (x + 210) / 80 = (x - 210) / 50\n    # Cross-multiply to find the proportion equation\n    # 50 * (x + 210) = 80 * (x - 210)\n    ratio = 80 / 50\n    # Solving the equation for x\n    x = (ratio * 210 + 210) / (ratio - 1)\n    # Return the distance between the home and school which is x\n    return x\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of pupils who passed at least one test.\n    total_passed_at_least_one = 43\n    \n    # Number of pupils who passed each individual test.\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Maximum number of pupils who passed all three tests\n    # would occur when all other categories (only Math, only Science, only English,\n    # Math + Science, Math + English, Science + English) have the least possible value,\n    # which is 0. So the maximum number for all three would be when these are all 0.\n    max_all_three = total_passed_at_least_one - ((passed_math - 0) + (passed_science - 0) + (passed_english - 0))\n    \n    # If the calculation goes below 0, it means there is an overlap and pupils are counted more than once.\n    # In such case, the minimum would be 0.\n    max_all_three = max(0, max_all_three)\n\n    return max_all_three\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    # Since the pens are identical and the cases cannot be empty,\n    # we start with 1 pen in each to satisfy the non-empty condition.\n    for x1 in range(1, 6 - 2 + 1):\n        for x2 in range(1, 6 - x1 - 1 + 1):\n            x3 = 6 - x1 - x2\n            # We do not need to check if x3 >= 1 since it's guaranteed by the for loop range.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Evaluate the fraction using standard arithmetic operations\n    fraction1 = (1/30 + 1/6) / (2/25)\n    fraction2 = (2 - 2/3) / (8/3)\n    \n    # The final result is the sum of fraction1 and fraction2\n    ans = fraction1 + fraction2\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Initialize the possible two-digit numbers\n    possible_numbers = set(range(10, 100))\n\n    # Exclude numbers that are neither divisible nor not divisible by 24 (should not exist)\n    numbers_divisible_by_24 = {x for x in possible_numbers if x % 24 == 0}\n    not_divisible_by_24 = possible_numbers - numbers_divisible_by_24\n\n    # After the first round, 4 students raised their hands.\n    # This implies that the common divisor shown to them is not visible in 5 students' numbers.\n\n    # Let's initialize the set of numbers that 5 students can't have\n    cannot_have_set_first_round = set()\n\n    # We can guess the mystery divisor by elimination, focusing on the fact that 5 students did not raise their hands.\n    # Let's test divisors from 2 to 23 (since 24 is handled in the second round)\n    for divisor in range(2, 24):\n        # Possible numbers that when seen would let a student know they can/can't be divided by the divisor\n        divisible_by_divisor = {x for x in possible_numbers if x % divisor == 0}\n        not_divisible_by_divisor = possible_numbers - divisible_by_divisor\n\n        # If exactly 5 numbers don't allow the student to know divisibility by the divisor, we found a candidate divisor\n        if len(divisible_by_divisor) == 4:\n            cannot_have_set_first_round = divisible_by_divisor\n        \n        # We stop as soon as we find a divisor that fits the first round condition\n        if cannot_have_set_first_round:\n            break\n\n    # After the second round, 6 students raised their hands\n    # This implies that at least 3 of Tom's friend's numbers are in the `numbers_divisible_by_24` set\n    # and at most 2 are in the `not_divisible_by_24` set.\n\n    # Now, we know Tom raised his hand. So Tom's number is either in \n    # `numbers_divisible_by_24` or `not_divisible_by_24` but not in `cannot_have_set_first_round`\n    \n    # All numbers that Tom cannot have\n    cannot_have_set_second_round = cannot_have_set_first_round | not_divisible_by_24\n\n    # Therefore, the possible numbers Tom's friends can have is \n    possible_numbers_tom_friends = possible_numbers - cannot_have_set_second_round\n\n    # Since all 9 numbers are different and Tom saw 8 numbers on his friends' hats, we sum these 8 numbers to get the result.\n    sum_of_friend_numbers = sum(possible_numbers_tom_friends) - min(possible_numbers_tom_friends)\n\n    return sum_of_friend_numbers\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    digit1_place_value = 8 * 1000\n    digit2_place_value = 8 * 10\n    difference = digit1_place_value - digit2_place_value\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Five-digit palindromic numbers are of the form abcba.\n    # The first a must be non-zero and since they are multiples of 45,\n    # they are also multiples of 9, which means the digits must sum to a multiple of 9.\n    # Since they are multiples of 45, they must also end in 5 or 0 (but a five-digit number can't end in 0).\n    \n    # Starting from the largest possible five-digit palindromic number\n    for a in range(9, 0, -1):\n        for b in range(9, -1, -1):\n            for c in range(9, -1, -1):\n                if (a + b + c + b + a) % 9 == 0:  # The sum of the digits must be a multiple of 9\n                    largest_palindrome = int(f\"{a}{b}{c}{b}{a}\")\n                    if largest_palindrome % 45 == 0:\n                        break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n\n    # Starting from the smallest possible five-digit palindromic number\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if (a + b + c + b + a) % 9 == 0:\n                    smallest_palindrome = int(f\"{a}{b}{c}{b}{a}\")\n                    if smallest_palindrome % 45 == 0:\n                        break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n\n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # To be divisible by 4, the last two digits of the number must be divisible by 4.\n    # To be divisible by 5, the last digit of the number must be 0 or 5.\n    # Since the number is 572A, A can either be 0 or 5 to be divisible by 5.\n    # We need to check which of these makes the number divisible by 4 as well.\n    for A in [0, 5]:\n        number = 5720 + A\n        if number % 4 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    # This problem doesn't explicitly require a common supplement,\n    # it is implicit in the use of the Chinese Remainder Theorem.\n\n    # Step 2: Find the LCM of all the divisors (Least Common Multiple)\n    LCM = 5 * 6 * 11  # Since 5, 6, and 11 are pairwise coprime, their LCM is their product\n\n    # Step 3: Solve the congruences to find the unknown\n    congruences = [(1, 5), (2, 6), (7, 11)]  # (remainder, modulus)\n    unknown, _ = solve_congruence(*congruences)\n\n    # Check if the solution is less than 500\n    while unknown < 500:\n        ans = unknown\n        unknown += LCM\n\n    return ans\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    i = 0\n    while True:\n        i += 1\n        if str(40309 + i) == str(40309 + i)[::-1]:\n            return i\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length1 = 16\n    length2 = 24\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind_luna = 4\n    total_sheep = luna_position + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    \n    hours_needed = desired_earnings / hourly_rate\n    \n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all = symbols('mean_all')\n\n    # Equation for the mean of the top 3 students\n    equation1 = Eq(3 * 92, 3 * mean_all)\n\n    # Equation for the mean of the last 7 students being 6 less than the mean of all 10\n    equation2 = Eq(7 * (mean_all - 6), 7 * mean_all - 3 * 92)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mean_all))\n\n    return solutions[mean_all]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    def is_consecutive(digit_str):\n        digits = [int(d) for d in digit_str]\n        sorted_digits = sorted(digits)\n        for i in range(len(sorted_digits) - 1):\n            if sorted_digits[i] + 1 != sorted_digits[i + 1]:\n                return False\n        return True\n\n    count = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        for p in permutations(year_str):\n            if is_consecutive(p):\n                count += 1\n                break\n\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        remaining_bags = [x for x in bags if x != red_marbles]\n        for jaslin_bags in combinations(remaining_bags, 3):\n            george_bags = [x for x in remaining_bags if x not in jaslin_bags]\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let x be the number of sweets Beth has now\n    # Then Andre has x + 6 sweets now\n    # Before receiving the additional sweets,\n    # Beth had x - 4 sweets and Andre had (x + 6) - 4 sweets\n    # The total number of sweets before the teacher gave them more was 24\n    \n    for x in range(1, 24):\n        if (x - 4) + ((x + 6) - 4) == 24:\n            return x\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # The five consecutive even numbers can be represented as:\n    # x, x+2, x+4, x+6, x+8\n    # Sum of these numbers should equal 100:\n    # x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # 5x + 20 = 100\n    # 5x = 100 - 20\n    # x = 80 / 5\n    # x = 16\n    # The smallest of these five numbers is x, which is 16.\n    return 16\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_covered_in_5_hours = 550\n    time_elapsed = 5\n    speed = distance_covered_in_5_hours / time_elapsed\n\n    travel_time_in_3_hours = 3\n    distance_covered_in_3_hours = speed * travel_time_in_3_hours\n\n    return distance_covered_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    apples_left = 150\n    fraction_sold = 2/5\n    fraction_left = 1 - fraction_sold\n\n    total_apples = apples_left / fraction_left\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    total_jumps = 15 - 1  # The number of jumps is one less than the number of posts\n    total_distance = distance_per_jump * total_jumps\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef count_even_permutations(blocks):\n    count = 0\n    for perm in permutations(blocks):\n        is_even = True\n        for color in set(blocks):\n            indices = [i for i, block in enumerate(perm) if block == color]\n            if (indices[1] - indices[0]) % 2 != 1:  # Check if they are evenly spaced\n                is_even = False\n                break\n        if is_even:\n            count += 1\n    return count\n\ndef solution():\n    blocks = ['R', 'R', 'B', 'B', 'Y', 'Y', 'G', 'G', 'O', 'O', 'P', 'P']\n    total_permutations = len(set(permutations(blocks)))\n    even_permutations = count_even_permutations(blocks)\n    \n    divisor = gcd(even_permutations, total_permutations)\n    m = even_permutations // divisor\n    n = total_permutations // divisor\n    \n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_a = 1 / 36  # Pool filled per minute by inlet A\n    rate_b = 1 / 48  # Pool filled per minute by inlet B\n\n    # Defining cycle and rate during the cycle\n    cycle_time = 1 + 2 + 2 + 1  # minutes\n    cycle_fill_rate = rate_a * (1 + 2) + rate_b * (2 + 1)  # Pool filled per cycle\n    \n    # Find full cycles\n    full_cycles = int(1 / (cycle_fill_rate * cycle_time))\n    pool_filled = full_cycles * cycle_fill_rate * cycle_time\n    \n    # Remaining pool to fill\n    remaining_pool = 1 - pool_filled\n    \n    # Time pattern to follow\n    time_pattern = [1 * rate_a, 2 * rate_b, 2 * rate_a, 1 * rate_b]\n    \n    # Filling the remaining pool with pattern\n    time = 0\n    for rate in time_pattern:\n        if remaining_pool <= 0:\n            break\n        pool_filled += rate\n        time += rate / rate_a if rate == time_pattern[0] or rate == time_pattern[2] else rate / rate_b\n        remaining_pool -= rate\n        \n        if remaining_pool <= 0:\n            break\n    \n    total_time = full_cycles * cycle_time + time\n\n    return round(total_time)\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Alan's work rate as a and Bob's work rate as b.\n    # The unit of work is \"painting one room\".\n    a, b = symbols('a b')\n\n    # Alan and Bob can paint a room in 4 hours, so their combined work rate is 1 room per 4 hours.\n    equation1 = Eq(a + b, 1 / 4)\n\n    # Bob would take 6 hours on his own, so his work rate is 1 room per 6 hours.\n    equation2 = Eq(b, 1 / 6)\n\n    # Solving the system of equations to find Alan's work rate (a)\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Alan's time to paint the room on his own is the reciprocal of his work rate.\n    alan_time = 1 / solutions[a]\n\n    return alan_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability it will rain on Saturday\n    p_sat = 0.7\n    # Probability it will rain on Sunday\n    p_sun = 0.5\n    # Probability it won't rain on Saturday\n    p_not_sat = 1 - p_sat\n    # Probability it won't rain on Sunday\n    p_not_sun = 1 - p_sun\n    \n    # Probability it won't rain on both days\n    p_neither = p_not_sat * p_not_sun\n    \n    # Probability it will rain on at least one day\n    p_at_least_one = 1 - p_neither\n    \n    return p_at_least_one\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n    \n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        points = (correct * points_per_correct) + (incorrect * points_per_incorrect)\n        if points == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros = 28\n    n = 1\n    count_5 = 0\n\n    while count_5 < zeros:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    empty_bottles = 10  # Lucas starts with 10 empty bottles (after drinking)\n    total_drunk = 10  # He bought 10 bottles\n    borrowed = 1  # He borrowed 1 bottle\n\n    # He can keep exchanging bottles until he does not\n    # have enough bottles to exchange for a new one.\n    while empty_bottles + borrowed >= 2:\n        # Exchange empty bottles\n        new_bottles = (empty_bottles + borrowed) // 2\n        total_drunk += new_bottles\n        # Calculate remaining empty bottles\n        empty_bottles = (empty_bottles + borrowed) % 2 + new_bottles\n        borrowed = 0  # He will return the borrowed bottle when possible\n\n    return total_drunk\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let's denote the rate at which the pools drain water as A_rate and B_rate.\n    A_rate = 1/10  # Pool A drains its water in 10 minutes\n    B_rate = 1/6   # Pool B drains its water in 6 minutes\n\n    # The initial heights of the pools are the same, let's denote this height as h.\n    # Thus, A's waterline after t minutes will be h - A_rate * t * h.\n    # Similarly, B's waterline after t minutes will be h - B_rate * t * h.\n    # We need to find t such that A's height is 3 times B's height:\n    # h - A_rate * t * h = 3 * (h - B_rate * t * h)\n    # Dividing both sides by h to eliminate the initial height and simplifying:\n    # 1 - A_rate * t = 3 * (1 - B_rate * t)\n    # 1 - 1/10 * t = 3 - 3/6 * t\n    # 1 - t/10 = 3 - t/2\n    # Multiplying through by 10 to clear denominators:\n    # 10 - t = 30 - 5t\n    # 4t = 20\n    # t = 5\n\n    # Hence, after 5 minutes, the height of A's waterline will be 3 times that of B.\n    return 5\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2*x - 2), 21)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_initial = 320\n    sweets_final = 348\n    sweets_bought_per_week = 30\n    weeks = 7\n\n    total_sweets_bought = sweets_bought_per_week * weeks\n    sweets_eaten_total = (sweets_initial + total_sweets_bought) - sweets_final\n    sweets_eaten_per_week = sweets_eaten_total // weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        if (2810 + digit) % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_path_length = 2/3\n    \n    unfenced_path_length = total_path_length - fenced_path_length\n    \n    return unfenced_path_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chenxi, yue_ying = symbols('chenxi yue_ying')\n\n    equation1 = Eq(chenxi, yue_ying + 5)  # Chenxi has 5 more sweets than Yue Ying\n    equation2 = Eq(chenxi - 10, yue_ying + 10)  # After Chenxi gives Yue Ying 10 sweets\n\n    solutions = solve((equation1, equation2), (chenxi, yue_ying))\n\n    chenxi_sweets = solutions[chenxi]\n    yue_ying_sweets = solutions[yue_ying]\n    \n    difference_after_giving = abs((chenxi_sweets - 10) - (yue_ying_sweets + 10))\n    \n    return difference_after_giving\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # The \"Time Problem\" implies arranging numbers in a way that can form a valid time.\n    # For simplicity, there are 24 hours in a day and 60 minutes in an hour.\n    # The range for hour is from 00 to 23 and for minutes from 00 to 59.\n    # Let's consider a fixed digit \"1\" for the problem since no further information is provided.\n\n    count = 0\n    # Check every possible hour and minute combination with \"1\" as one of the digits.\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hour and minute to strings to check for the digit\n            time_str = \"{:02d}{:02d}\".format(hour, minute)\n            if '1' in time_str:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    speed_slow = 3  # km/h\n    speed_fast = 7  # km/h\n    time_diff = (12 + 8) / 60  # time difference in hours (20 minutes)\n\n    # Let the distance be 'd' km. Then, d/speed_slow - d/speed_fast = time_diff\n    # Solve the equation for d\n    d = speed_slow * speed_fast * time_diff / (speed_fast - speed_slow)\n\n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 69))\n    for prime in primes:\n        if (69 - prime) in primes:\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = (4 * goats) - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of students in school A and B\n    students_A, students_B = symbols('students_A students_B')\n\n    # Equation 1: total number of students in both schools\n    equation1 = Eq(students_A + students_B, 1050)\n\n    # Equation 2: after transferring 20 students, school A has 10 more than school B\n    equation2 = Eq((students_A - 20) - (students_B + 20), 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (students_A, students_B))\n\n    return solutions[students_A]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Original expression components to be considered for bracket placement\n    a, b, c, d, e, f, g = 15, 5, 5, 15, 6, 7\n    # List of possible bracket insertions resulting in different expressions\n    expressions = [\n        (a + b) * (c + (d - e) + f),\n        ((a + b * c + d) - e + f),\n        (a + (b * (c + d) - e) + f),\n        (a + (b * c) + (d - e + f)),\n        ((a + b) * c + d - (e + f)),\n    ]\n    # Evaluate expressions and find the maximum result\n    max_result = max([eval(str(expr)) for expr in expressions])\n    return max_result\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 10 - incorrect * 5\n        if score == 70:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n\n    # using Inclusion-Exclusion Principle\n    only_writing_class = total_students - (maths_students - both_classes_students) - neither_class_students\n\n    return only_writing_class\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = [2, 0, 0, 3, 8, 7]\n    max_prime_number = 0\n\n    # Form possibilities and check if prime\n    for i in range(1, 50):\n        if isprime(i) and set(str(i)).issubset(set(map(str, digits))):\n            max_prime_number = i\n\n    return max_prime_number\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n\n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy, father = symbols('teddy father')\n\n    equation1 = Eq(father, 7 * teddy)\n    equation2 = Eq(teddy + (40 - father), 5)\n\n    solutions = solve((equation1, equation2), (teddy, father))\n\n    return solutions[teddy]\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    # Calculate the sum of the given odd series\n    ans = sum(range(1, 18, 2))  # Start at 1, end before 18, increment by 2\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Initial ratios given in the problem\n    adults_ratio = 2 / 7\n    boys_ratio = 4 / 5\n    girls_ratio = 1 / 5\n\n    # Adriana's mistake: Calculating the ratio of girls to the whole audience\n    # instead of the remaining audience after the adults\n    # Correct calculation for girls_ratio to the whole audience\n    # It's 1/5 of the remaining 5/7 audience\n    correct_girls_ratio = (1 - adults_ratio) * girls_ratio\n\n    # Calculate the correct difference ratio between adults and girls\n    difference_ratio = adults_ratio - correct_girls_ratio\n\n    # Set up equation based on the ratio and the difference of 80 people\n    total_people = 80 / difference_ratio\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    cuts = 4\n    max_slices = (cuts * (cuts + 1)) // 2 + 1\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between_rabbit_and_elephant - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = sum(sum_of_digits(page) for page in range(1, 110))\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = symbols('pink')\n    equation = Eq(11 * pink + pink, 48)\n    solution = solve(equation, (pink))\n    return solution[pink]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # Using the formula for the area of a triangle: Area = 1/2 * base * height\n    height = (area * 2) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    # we have the expression (2^2019) / (2^1964 - 2^1963)\n    # Simplify the expression using properties of exponents:\n    # (2^2019) / (2^1963 * (2 - 1)) = (2^2019) / (2^1963)\n\n    numerator = 2**2019\n    denominator = 2**1963\n\n    # Computing the division as the difference in exponents\n    remainder = numerator // denominator\n\n    # Find the remainder of the result divided by 5\n    ans = remainder % 5\n\n    return ans\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # After selling 42 tables\n    tables_after = tables - 42\n    # After bringing in 24 chairs\n    chairs_after = chairs + 24\n\n    # Equation where number of chairs is 4 times the number of tables\n    equation = Eq(chairs_after, 4 * tables_after)\n\n    # Initially, the number of tables and chairs was equal\n    initial_condition = Eq(tables, chairs)\n\n    solutions = solve((equation, initial_condition), (tables, chairs))\n    \n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 0.35 * 700\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_to_left = 4\n    cabinets_to_right = 7\n    candy_cabinet = 1  # Including Candy's own cabinet\n\n    total_cabinets = cabinets_to_left + candy_cabinet + cabinets_to_right\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n\n    total_books = books_first_day + books_second_day\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(1, 5):  # hundreds place (1-4 because the sum is 7 and we need to leave at least 3 for the rest)\n        for j in range(0, 10):  # tens place (0-9)\n            for k in range(0, 10, 2):  # ones place (0-8 even)\n                if i + j + k == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        number = int(f\"106{y}\")\n        if number % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):  # Start from 99 and go downwards to 0\n        number = int(f\"49{i:02d}\")  # Creates a number like 4901, 4902, ... , 4999\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number  # This is the largest number that meets the criteria\n    \nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    motor, car, lorry = symbols('motor car lorry')\n    equation1 = Eq(motor + car + lorry, 27)  # Total number of vehicles\n    equation2 = Eq(2*motor + 4*car + 6*lorry, 96)  # Total number of wheels\n    equation3 = Eq(car, lorry)  # Number of cars equals number of lorries\n    \n    solutions = solve((equation1, equation2, equation3), (motor, car, lorry))\n    \n    return solutions[car]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of one chocolate, and y be the mass of the empty jar.\n    # We have two equations based on the problem statement:\n    # 5x + y = 185\n    # 17x + y = 317\n    # To find x and y, we can solve these two linear equations.\n\n    # Subtract the first equation from the second to find x.\n    x = (317 - 185) / (17 - 5)  # (17x + y) - (5x + y) = 317 - 185\n\n    # Now use the value of x to find y using the first equation.\n    y = 185 - 5 * x  # 5x + y = 185\n\n    # Finally, calculate the total mass of the jar with 10 chocolates.\n    total_mass = 10 * x + y  # mass of 10 chocolates + mass of empty jar\n\n    return total_mass\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    olaf_height = ana_height - 116\n    kristoff_height = 5.5 * olaf_height\n    height_difference = kristoff_height - ana_height\n    return height_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    sugar_weight = 700 * 0.32\n    water_weight = 700 - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for i in range(100, 1000):\n        number = int(f\"1992{i}\")\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    # Given ratios and cost per apple, we can set up equations for the total cost\n    # Let a be the number of apples, p be the number of pears, m be the number of mangoes\n\n    # John bought 4/5 as many pears as apples: p = (4/5)a\n    # and 2/5 as many mangoes as apples: m = (2/5)a\n\n    # Cost of apples is 0.60 per apple:\n    cost_per_apple = 0.60\n\n    # Ratio of money spent on apples to pears is 3:2 and pears to mangoes is 1:5\n    # If we assume that the cost per fruit is the same for pears and mangoes,\n    # we can represent this in terms of money spent (m_s)\n    # Let m_s[a] be money spent on apples, m_s[p] on pears, m_s[m] on mangoes\n    \n    # From the ratio 3:2 (apples:pears), we have 3x = m_s[a], 2x = m_s[p]\n    # and from 1:5 (pears:mangoes), we have y = m_s[p], 5y = m_s[m]\n    \n    # Since the cost per apple is known, we can express money spent on apples as:\n    # m_s[a] = a * 0.60\n    \n    # With the given total cost of fruits:\n    total_cost = 150\n    \n    # We can use the cost and ratios to set up equations:\n    # 3x + 2x + 5(2x) = 150 (since pears cost 2/3 of apples, and mangoes cost 5 times pears)\n    \n    # Simplifying, we get:\n    # 3x + 2x + 10x = 150\n    # 15x = 150\n\n    # Solving for x gives us:\n    x = 150 / 15\n    \n    # Therefore, m_s[a] = 3 * x\n    m_s_a = 3 * x\n\n    # Now, we can find the number of apples:\n    a = m_s_a / cost_per_apple\n    \n    # And using the given proportions, we find pears and mangoes:\n    p = (4/5) * a\n    m = (2/5) * a\n    \n    # The total number of fruits is:\n    total_fruits = a + p + m\n\n    return int(total_fruits)\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    # Subtract 1 from the number of trees because we want the number of intervals between the trees\n    intervals = num_trees - 1 \n    distance_between_trees = total_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    saved_first_half = 366\n    avg_second_half = 65\n    months_in_half_year = 6\n\n    total_saved_second_half = avg_second_half * months_in_half_year\n\n    total_saved = saved_first_half + total_saved_second_half\n    avg_per_month = total_saved / 12\n\n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {char: word.count(char) for char in set(word)}\n\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_for_six_assignments = 6 * 92\n    total_score_for_five_assignments = 5 * 94\n    score_sixth_assignment = total_score_for_six_assignments - total_score_for_five_assignments\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    profit_earned = 440\n    remaining_pairs = 5\n\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    sold_pairs = profit_earned // profit_per_pair\n\n    initial_pairs_purchased = sold_pairs + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Parsing the given time strings to datetime objects\n    halfway_time = datetime.strptime('5:30 PM', '%I:%M %p')\n    end_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    \n    # Calculate the duration of the second half\n    duration_second_half = end_time - halfway_time\n    \n    # Since he is halfway through, the first half duration is same as second half\n    start_time = halfway_time - duration_second_half\n    \n    # Formatting the result back to the required output format\n    return start_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    initial_cars = 30 + 10 - 8\n    return initial_cars\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x * 2 / 4) ** 2 - 4) / 10, 6)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters_needed = 59\n    fill_per_day = 10\n    leak_per_night = 3\n    effective_fill = fill_per_day - leak_per_night\n    days_passed = 0\n    current_liters = 3  # Starting from the first day when 3 liters were filled.\n\n    while current_liters < total_liters_needed:\n        days_passed += 1\n        current_liters += effective_fill\n        if current_liters >= total_liters_needed:\n            break\n        current_liters -= leak_per_night  # Account for leaking during the night.\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    ans = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return ans\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # Half an hour\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        # Calculate the number of digits in the current number\n        digits_in_current_number = len(str(current_number))\n\n        # Check if writing this number will exceed the total seconds\n        if digits_written + digits_in_current_number > total_seconds:\n            break  # If it does exceed, the current number is not written\n\n        # Otherwise, write the number and continue\n        digits_written += digits_in_current_number\n        current_number += 1\n\n    # The last number successfully written\n    last_number_written = current_number - 1\n\n    return last_number_written\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%p')\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # To ensure getting a green marble, Darrell must pick all marbles of other colors first\n    # which is the worst-case scenario according to the pigeonhole principle\n    blue = 5\n    white = 9\n    black = 2\n    # Darrell must pick all non-green marbles first\n    non_green = blue + white + black\n    # To get at least one green marble, he must draw one more after all non-green marbles\n    return non_green + 1\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)  # Combination of 20 teams taken 2 at a time\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    \n    return toys_in_1_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # Total distance snail needs to climb is 20 metres\n    total_distance = 20\n\n    # Snail climbs 6 metres every day except the 7th\n    daily_climb = 6\n\n    # On the 7th day, the snail climbs only 2 metres\n    seventh_day_climb = 2\n\n    # Calculate the height reached by the end of the 6th day\n    height_sixth_day = daily_climb * 6\n\n    # Since it reaches the top on the 7th day, we calculate the remaining distance\n    remaining_distance = total_distance - height_sixth_day\n\n    # On the 7th day, the snail reaches the top before sliding down, so subtract the 7th day's climb\n    remaining_distance -= seventh_day_climb\n\n    # Remaining distance is the distance the snail slides down during the night\n    return remaining_distance\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        initial_rabbits = (initial_rabbits * 3) // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    ivy_speed, candy_speed = symbols('ivy_speed candy_speed')\n\n    # They met after 12 minutes, so Ivy walked for 18 minutes and Candy for 12 minutes\n    time_ivy = 18  # Ivy's total walking time in minutes\n    time_candy = 12  # Candy's total walking time in minutes\n\n    # The equation for the total distance they walked which is equal to the distance between their houses\n    distance_eq = Eq(ivy_speed * time_ivy + candy_speed * time_candy, 1200)\n\n    # The speed relation between Ivy and Candy\n    speed_eq = Eq(ivy_speed, candy_speed + 20)\n\n    # Solve the equations\n    solutions = solve((distance_eq, speed_eq), (ivy_speed, candy_speed))\n\n    # Return the walking speed of Candy\n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # To find out how many wins the champion has, reasoning can be applied.\n    # In a single round-robin tournament with 8 players, every player plays\n    # against every other player exactly once. Therefore, each player plays\n    # 7 games. Since there can't be any ties, for 8 players, the total number\n    # of wins is 8 * 7 / 2 (each game produces only one winner).\n    \n    # The total number of wins is 28, which must be split among the players.\n    # And since each has a different number of wins, the possible distribution\n    # of wins from the champion downwards is 7, 6, 5, 4, 3, 2, 1, 0. This is\n    # because it maximizes the number of wins for the champion while still having\n    # a unique number of wins for each player.\n    \n    # Therefore, the champion has 7 wins.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Initial amount of nickel in metals\n    nickel_1 = 6 * 0.45  # mg in the first metal\n    nickel_2 = 14 * 0.60  # mg in the second metal\n\n    # Total weight of new metal\n    total_weight = 6 + 14  # mg\n    \n    # Total amount of nickel in the new metal\n    total_nickel = nickel_1 + nickel_2\n    \n    # Percent concentration of nickel\n    percent_concentration = (total_nickel / total_weight) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                current_product = x1 * x2 * x3 * x4\n                if current_product > max_product:\n                    max_product = current_product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (edward_age + years):\n            break\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm represents 6 m\n    playground_length_on_plan = 5  # length on the plan in cm\n\n    real_playground_length = playground_length_on_plan * scale_ratio\n\n    return real_playground_length\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    fraction = 3/5\n    number = 35\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let the side of the original square array be n, so the original number of students is n^2.\n    # With 11 extra students, the total becomes n^2 + 11.\n    # After adding one row and one column, the new square array has a side of n+1,\n    # requiring (n+1)^2 students. According to the problem, (n+1)^2 = n^2 + 11 + 12,\n    # hence we need 23 more students than the original n^2.\n    # So we are solving the equation (n+1)^2 = n^2 + 23.\n\n    n = 0\n    while True:\n        if (n + 1) ** 2 == n ** 2 + 23:\n            break\n        n += 1\n\n    total_students = n ** 2 + 11\n    return total_students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    price_per_box = 6\n    total_money = 250\n    number_of_boxes = total_money // price_per_box\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    return 4060800 - 4000000 - 800\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    avg_apples = 26\n\n    # Let the number of girls be 'girls'\n    girls = symbols('girls')\n    \n    # The total number of apples picked by girls is 20*girls\n    # The total number of apples picked by the group is 30*boys + 20*girls\n    # The average number of apples picked is (30*boys + 20*girls) / (boys + girls)\n    # This average = 26, so we set up the equation and solve for 'girls'\n\n    equation = Eq((boys_apples*boys + 20*girls) / (boys + girls), avg_apples)\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen - pencil, 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_A = 673\n    oil_in_B = oil_in_A + 56\n    return oil_in_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_items + 1):\n        volleyballs = total_items - basketballs\n        if basketballs * cost_basketball + volleyballs * cost_volleyball == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # Mr Rich's wealth\n\n    richie_share = total_wealth * 1/3\n\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * 1/2\n\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2/5\n\n    remaining_after_bounty = remaining_after_thrifty - bounty_share\n    archie_share = remaining_after_bounty  # Archie got the rest\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of mint candies, which is a constant\n    # Let y be the multiplier that will scale for chocolate and strawberry\n    x = symbols('x')\n    y = symbols('y')\n\n    # Setting up the equations based on the total mass\n    # strawberry candies + chocolate candies + mint candies = total mass of each container\n    # For the first container\n    container1_eq = Eq((2/5)*y + ((5-2)/5)*y + x, y+x)\n    # For the second container\n    container2_eq = Eq((2/7)*y + ((7-2)/7)*y + x, y+x)\n    # For the third container\n    container3_eq = Eq((2/9)*y + ((9-2)/9)*y + x, y+x)\n\n    # Mass of all strawberry candies in one container\n    strawberry_mass_eq = Eq((2/5)*y + (2/7)*y + (2/9)*y, (2/5+2/7+2/9)*y)\n\n    # Sum of the masses of all containers\n    total_mass_eq = Eq(y + y + y + 3*x, 1371)\n\n    # Solve the system of equations\n    solved_values = solve((container1_eq, container2_eq, container3_eq, total_mass_eq, strawberry_mass_eq), (x, y))\n\n    # Calculate the mass of all strawberry candies\n    all_strawberry_mass = (2/5+2/7+2/9)*solved_values[y]\n\n    return all_strawberry_mass\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    lily_candy = total_candy * 3/4\n    remaining_candy = total_candy - lily_candy\n    brother_candy = remaining_candy * 1/3\n    judy_candy = remaining_candy - brother_candy\n    return judy_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / i for i in range(2, n+1)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roy, dennis = symbols('roy dennis')\n\n    equation1 = Eq(roy + dennis, 340)  # Total money shared between Roy and Dennis\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2 * roy / 3))  # Dennis has twice as much after spending\n\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    dennis_final = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_final\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the number of curry puffs sold on Friday as 'f'\n    f = symbols('f')\n\n    # Creating equations based on the given information\n    equation = Eq(f + (f + 27) + (f - 14), 475)\n\n    # Solving the equation\n    sold_on_friday = solve(equation, f)[0]\n\n    return sold_on_friday\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    total_digits = 0\n    last_page = 0\n\n    for i in range(1, 1000):  # Assuming the book has less than 1000 pages.\n        digits_in_page_number = len(str(i))\n        if total_digits + digits_in_page_number > 300:\n            break\n        total_digits += digits_in_page_number\n        last_page = i\n\n    return last_page\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    cost_per_ball = 20.45\n    num_hoops = 6\n\n    total_ball_cost = num_balls * cost_per_ball\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / num_hoops\n\n    return cost_per_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import divisors, sqrt\n\ndef solution():\n    n = 693\n    # Get all divisors of n^2\n    d = divisors(n**2)\n    # Iterate over the divisors to find the minimum divisor \n    # greater than n such that n^2 is divisible by the divisor\n    for divisor in d:\n        if divisor > n and sqrt(n**2 / divisor).is_integer():\n            return divisor // n\n    return None\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # The unit digit of a power cycle for any integer repeats every 4 cycles\n    # Find the unit digit for 13^242 by finding the remainder when dividing the exponent by 4 and then raising 13 to that power\n    unit_digit_13 = 13 ** (242 % 4) % 10\n\n    # Find the unit digit for 17^379 same as above\n    unit_digit_17 = 17 ** (379 % 4) % 10\n\n    # The unit digit for 4^2012 is simply 6, because 4 raised to any power more than 2 has 6 as a unit digit\n    unit_digit_4 = 6\n\n    # Calculate the unit digit of the entire expression\n    unit_digit = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_litres = 8 * 3\n    remaining_litres = total_litres - 9\n    container_size = 5\n\n    num_containers = -(-remaining_litres // container_size)\n\n    return num_containers\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n\n    # Mary had 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n\n    # Mary and Alexis gave 20% of their stickers to Charlotte\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.20 * mary + 0.20 * alexis)\n\n    # Charlotte's stickers increased by 80%\n    equation3 = Eq(charlotte_final, 1.80 * charlotte_initial)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(mary, charlotte_final + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    # Given values\n    steak_weight_kg = 3 + 1/2   # 3 1/2 kg in decimal\n    price_per_kg = 7.50         # price per kilogram\n    vani_has = 20               # currency note she has\n\n    # Calculate the total price of the steak\n    total_price = steak_weight_kg * price_per_kg\n    \n    # Calculate how much more money Vani needs\n    if total_price > vani_has:\n        money_needed = total_price - vani_has\n    else:\n        money_needed = 0\n\n    return money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n\n    position_from_end = total_people - eddie_position + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    light = symbols('light')\n    \n    # Equation: 6 light + 6 heavy (twice the mass of light) = total mass\n    equation = Eq(6 * light + 6 * (2 * light), 65.7)\n    \n    # Solve for x\n    mass_light = solve(equation, light)\n    \n    # Return the mass of a light bowling ball to the nearest kg\n    return round(mass_light[0])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Initial sum of money for Benson and Clive\n    initial_sum = Eq(benson + clive, 705)\n    # They both spend some money and are left with the same amount\n    equality_after_spending = Eq(benson - 34, clive - 63)\n\n    # Solve the system of equations\n    solutions = solve((initial_sum, equality_after_spending), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be non-zero\n        for j in range(0, 10):  # Second digit can be any digit including zero\n            palindromic_number = int(f\"{i}{j}{j}{i}\")\n            if 1000 <= palindromic_number <= 9999:  # Ensure it is a four-digit number\n                count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # equations based on the problem statement:\n    # (A + B)/2 = 50 => A + B = 100\n    # (B + C)/2 = 43 => B + C = 86\n    # (A + C)/2 = 45 => A + C = 90\n\n    # summing all three equations gives:\n    # (A + B) + (B + C) + (A + C) = 100 + 86 + 90\n    total_sum_double = 100 + 86 + 90  # This is double the sum of A, B, and C\n\n    # Therefore, the sum of A, B, and C is:\n    total_sum = total_sum_double / 2\n\n    # The average of A, B, and C is sum divided by 3\n    average_abc = total_sum / 3\n    return average_abc\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    total_pens = 126\n    factor = 7  # Since Jay has 6 times as many pens, together they have 6 + 1 = 7 parts\n    denise_pens = total_pens // factor  # Denise's share\n    \n    return denise_pens\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the price of each cookie based on the total cost of 5 chocolate bars\n    chocolate_bar_cost = 1.26\n    total_cost_chocolate_bars = chocolate_bar_cost * 5\n    price_per_cookie = total_cost_chocolate_bars / 6\n\n    # Calculate the cost of 4 cookies\n    cost_of_cookies = price_per_cookie * 4\n\n    # Calculate the money left after buying 4 cookies\n    initial_money = 9.05\n    money_left = initial_money - cost_of_cookies\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let b be the number of boys, and g be the number of girls\n    b, g = symbols('b g')\n\n    # Given that every 3 boys share one ball and every 2 girls share one ball\n    equation1 = Eq(b / 3 + g / 2, 250)\n    # Given that the total number of children is 650\n    equation2 = Eq(b + g, 650)\n\n    # Solve the equations to find the number of boys and girls\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the initial number of girls, and b represent the initial number of boys\n    g, b = symbols('g b')\n\n    # After 25 girls went to play, girls became 2/3 of the boys\n    equation1 = Eq(g - 25, 2/3 * b)\n\n    # After that, 15 boys went to play, the number of girls and boys became equal\n    equation2 = Eq(g - 25, b - 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total number of students is the sum of girls and boys\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1            \n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let the number of 10-cent coins be 8x and 50-cent coins be 3x.\n    value_10_cent = 10  # cents\n    value_50_cent = 50  # cents\n    total_value = 7590  # cents\n    \n    # The value of coins in cents is 8x * value_10_cent + 3x * value_50_cent\n    # Set up the equation 8x*10 + 3x*50 = 7590 and solve for x\n    x = total_value / (8 * value_10_cent + 3 * value_50_cent)\n    \n    # Calculate the total value of the 50-cent coins\n    total_value_50_cent_coins = 3 * x * value_50_cent / 100  # Convert to dollars\n    \n    return total_value_50_cent_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1, 100):  # Let's assume the answer is less than 100 for practicality.\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_decrease = 12\n    \n    midnight_temperature = midday_temperature - temperature_decrease\n\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    # Total amount spent\n    total_spent = 6400\n    \n    # Discount is 80%, so she paid 20% of the original price\n    original_price = total_spent / 0.20\n    \n    # Calculate how much money she saved, which is the original price minus what she spent\n    money_saved = original_price - total_spent\n\n    return money_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    # Dimensions of the base of the prism\n    base_side_length = 7  # cm\n    hole_side_length = 3  # cm\n\n    # Volume of the prism\n    volume_prism = 320  # cm^3\n\n    # Calculate the area of the base\n    base_area = base_side_length**2  # cm^2\n\n    # Calculate the area of the hole\n    hole_area = hole_side_length**2  # cm^2\n\n    # Calculate the area of the base with the hole\n    effective_base_area = base_area - hole_area  # cm^2\n\n    # Calculate the height of the prism\n    height = volume_prism / effective_base_area  # cm\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # There are 8 people, but Amy and Judy must sit together.\n    # Let's treat Amy and Judy as one person. Now we have 7 \"people\" to arrange in a circle.\n    # The number of ways to arrange n people around a circular table is (n-1)!, because rotations are considered the same.\n    arrangements_7 = factorial(6)  \n\n    # However, within the \"person\" that Amy and Judy form, there are 2! ways of arranging them.\n    arrangements_amy_judy = factorial(2)\n\n    # The total arrangements are the product of both.\n    total_arrangements = arrangements_7 * arrangements_amy_judy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    def find_triangular_number(n):\n        return (n * (n + 1)) // 2\n\n    number = 2008\n    current_sum = 0\n    i = 0\n\n    # Find the largest triangular number less than or equal to 2008\n    while current_sum < number:\n        i += 1\n        current_sum = find_triangular_number(i)\n\n    # Get the position in the current block\n    position_in_block = number - find_triangular_number(i - 1)\n\n    # If the position is zero, it's the last number of the previous block\n    if position_in_block == 0:\n        ans = i - 1\n    else:\n        ans = position_in_block\n\n    return ans\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    balance_equation = 3 * x_weight / 10\n\n    y_weight = balance_equation\n\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    series = range(6, 27, 4)  # Generate the arithmetic sequence from 6 to 26 with a common difference of 4\n    return sum(series)        # Return the sum of the sequence\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cucumbers = symbols('cucumbers')\n    tomatoes_eq = Eq(27, 3 * cucumbers + 3)\n    \n    sold_cucumbers = solve(tomatoes_eq, cucumbers)\n    \n    return sold_cucumbers[0]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    nums = [3, 5, 9]\n    count = 0\n    for first_digit in nums:\n        for second_digit in nums:\n            for third_digit in nums:\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # iterate over the range for hundreds, tens and ones digits\n    for h in range(1, 10):  # the hundreds digit must be in range 1-9 for three-digit numbers\n        for t in range(0, 10):  # the tens and ones can be 0-9\n            for o in range(0, 10):\n                if h + t + o == 5:  # if the sum of the digits equals 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_numbers = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            sum_numbers += number\n    return sum_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31 # number of nights\n    d = 6 # common difference\n    # Let's find the first term (a1) using the information given for the 16th night which is the middle term (am).\n    # am = a1 + (m - 1) * d where m is the number of terms from the first to the middle which is also 16 in this case.\n    m = 16\n    am = 100 # mosquitoes eaten on the 16th night\n    a1 = am - (m - 1) * d\n\n    # The sum of an arithmetic sequence is given by: S = n/2 * (a1 + an), where S is the sum, n is number of terms,\n    # a1 is the first term and an is the last term.\n    # But we don't have an yet. However, we can use another formula: an = a1 + (n - 1) * d\n    an = a1 + (n - 1) * d\n\n    # Now we can find the sum of mosquitoes eaten in 31 nights\n    S = n/2 * (a1 + an)\n    \n    return int(S)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris needs to take away matches such that the remaining\n    # number of matches is a multiple of 3 (since Dylan can only draw 1 or 2 matches).\n    # By doing so, Chris can always adjust his draw to maintain a multiple of 3 after\n    # Dylan's turn, thereby ensuring that he can take the last match.\n\n    total_matches = 7\n    ans = 0\n    \n    # Chris should take away either 1 or 2 matches to leave 6 matches (which is multiple of 3).\n    # Chris tries taking away 1 match first.\n    if (total_matches - 1) % 3 == 0:\n        ans = 1\n    # If taking 1 match doesn't work, Chris takes 2 matches.\n    else:\n        ans = 2\n    \n    return ans\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # the first digit cannot be zero\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations('1234567890', 5):\n        A, B, C, D, E = p\n        ABAC = int(A + B + A + C)\n        DBEC = int(D + B + E + C)\n        ACEDC = int(A + C + E + D + C)\n        \n        if ABAC + DBEC == ACEDC and A != '0' and D != '0':\n            return int(DBEC)\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to minutes (13:06 in 24-hour format)\n\n    return afternoon_time - morning_time  # Calculate the difference in minutes\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    square_difference = (64 + 36) * (64 - 36)\n    return square_difference\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    choices = 5 + 10 + 2 + 4  # Sum of all the different restaurant choices\n    return choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Sum from 1 to 9\n    sum_to_nine = sum(range(1, 10))\n    # Sum from 1 to 8 (excluding 9)\n    sum_to_eight = sum(range(1, 9))\n    # Total sum (adding both sums and subtracting one since it's counted twice)\n    total_sum = sum_to_nine + sum_to_eight\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Define the equations based on the problem\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    # Solution for the cost of a pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = 53 - 50 + 47 - 44 + 41 - 38 + 35 - 32 + 29 - 26 + 23\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    result = 6.6 * 30\n    return result\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n    return correct_time\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate over all permutations of the digits from 1 to 9 for AE\n    for p in permutations('123456789', 2):\n        A, E = p\n        # Construct the number from digits\n        number = int(A + E + E + A)\n        # Divide the number by various options to check for the condition\n        for B in '123456789':\n            if B != A and B != E:  # Making sure all letters stand for different digits\n                B = int(B)\n                if number % B == 0:\n                    C = number // B\n                    C_str = str(C)\n                    if len(C_str) == 4 and len(set(C_str)) == 2 and A in C_str and E in C_str:\n                        # Check if the non-recurring digit in C is neither A nor E\n                        non_recurring = C_str[0] if C_str[0] != A else C_str[1]\n                        if non_recurring != A and non_recurring != E:\n                            return number\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    total_age = total_family_members * average_age\n    \n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Conversion of each measurement to centimeters\n    measurements_cm = {\n        '83 m': 83 * 100,\n        '200 cm': 200,\n        '8 cm': 8,\n        '1/2 m': 0.5 * 100\n    }\n    \n    # Approximate height of a classroom door in centimeters\n    door_height_cm = 200  # A typical door height is around 200 cm or 2 meters\n\n    # Find the measurement closest to the height of a classroom door\n    closest_measurement = min(measurements_cm, key=lambda m: abs(measurements_cm[m] - door_height_cm))\n\n    # Return the identified closest measurement\n    ans = measurements_cm[closest_measurement]\n    return ans\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12\n    remaining_after_dinner = 1 - 2/7\n    final_remaining = remaining_after_lunch * remaining_after_dinner\n\n    original_amount = 45 / final_remaining\n\n    return original_amount\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    digits_per_page = 1\n    current_page = 1\n    pages_counted = 0\n\n    while total_digits > 0:\n        pages_in_this_digit_length = 9 * current_page * digits_per_page\n        if total_digits >= pages_in_this_digit_length:\n            total_digits -= pages_in_this_digit_length\n            pages_counted += current_page * 9\n            current_page *= 10\n            digits_per_page += 1\n        else:\n            pages_counted += total_digits // digits_per_page\n            break\n\n    return pages_counted\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages_with_1_digit = 9\n    pages_with_2_digits = 90 * 2\n    pages_with_3_digits = 900 * 3\n\n    if total_digits <= pages_with_1_digit:\n        # all numbers are 1-digit\n        return total_digits\n    elif total_digits <= pages_with_1_digit + pages_with_2_digits:\n        # substract 1-digit pages and divide by 2 to get number of 2-digit pages\n        total_digits -= pages_with_1_digit\n        return 9 + total_digits // 2\n    else:\n        # substract 1-digit and 2-digit pages and divide by 3 to get number of 3-digit pages\n        total_digits -= (pages_with_1_digit + pages_with_2_digits)\n        return 99 + total_digits // 3\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * (5 - 1) // 2  # Total number of games in a round-robin tournament\n    games_won_by_others = 2 + 1 + 4 + 3\n    gina_wins = total_games - games_won_by_others\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):  # As Avril can answer from 0 to 10 questions correctly\n        eddie_correct = avril_correct + 3  # Eddie has 3 more correct answers than Avril, because 15 points is 3 correct answers\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = eddie_correct * 10 - (10 - eddie_correct) * 5\n        if (avril_points + eddie_points) == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    cost_per_group = 4 * shirt_price + bag_price\n    \n    number_of_groups = total_spent // cost_per_group\n    shirts_bought = number_of_groups * 4\n    \n    return shirts_bought\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n    \n    # Constants given\n    angle = 20\n    distance = 400\n    coefficient_friction = 0.2\n    g = 9.81  # acceleration due to gravity\n    \n    # Convert the angle to radians for calculation\n    angle_radians = math.radians(angle)\n    \n    # Calculating the force components along the slope\n    # Force of gravity along the slope = m * g * sin(angle)\n    # Friction force opposing the motion = m * g * cos(angle) * coefficient of friction\n    # Net force = m * g * sin(angle) - m * g * cos(angle) * coefficient of friction\n    \n    # Using the net force to calculate the final velocity using the work-energy principle\n    # Change in kinetic energy = Net work done on the skier\n    # Since the skier starts from rest, initial kinetic energy = 0\n    # Final kinetic energy = 0.5 * m * v^2, where m is the mass of the skier and v is the final velocity\n    # Net work done = net force * distance = (m * g * sin(angle) - m * g * cos(angle) * coefficient_friction) * distance\n    # Therefore, 0.5 * m * v^2 = (m * g * sin(angle) - m * g * cos(angle) * coefficient_friction) * distance\n    # We can cancel out the mass m from both sides\n    # v^2 = 2 * g * sin(angle) * distance - 2 * g * cos(angle) * coefficient_friction * distance\n    # v = sqrt(2 * g * sin(angle) * distance - 2 * g * cos(angle) * coefficient_friction * distance)\n    \n    v_squared = 2 * g * math.sin(angle_radians) * distance - 2 * g * math.cos(angle_radians) * coefficient_friction * distance\n    final_velocity = math.sqrt(v_squared)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # equation representing thrice as many boys as girls originally\n    equation1 = Eq(boys, 3 * girls)\n    # equation representing the new count after 12 boys left and 20 girls joined\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the three types of coffee beans\n    type_a_weight = 56\n    type_b_weight = 96\n    type_c_weight = 120\n\n    # Calculate the greatest common divisor (GCD)\n    gcd_ab = gcd(type_a_weight, type_b_weight)\n    gcd_abc = gcd(gcd_ab, type_c_weight)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Let the total work be represented by the value of the entire job\n    # We assume that the total work is the least common multiple of 6 and 5, which is 30 (for simplicity)\n    total_work = 30\n\n    # Now we calculate work done by one man in one day\n    work_per_man_per_day = total_work / (6 * 5)  # Total work divided by (number of men times number of days)\n\n    # Similarly, we calculate work done by one woman in one day\n    work_per_woman_per_day = total_work / (5 * 6)  # Total work divided by (number of women times number of days)\n\n    # Now, calculate the combined work per day for 10 men and 5 women\n    combined_work_per_day = (10 * work_per_man_per_day) + (5 * work_per_woman_per_day)\n\n    # Finally, calculate the number of days required to complete the job by 10 men and 5 women\n    days_required = total_work / combined_work_per_day\n\n    return days_required\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # The minimum number apples one child can get is 1.\n    # To minimize the number of apples for the one who gets the most,\n    # we should try to distribute the apples as evenly as possible among the other children.\n    \n    # Total number of apples\n    total_apples = 30\n    \n    # Number of children\n    num_children = 6\n    \n    # Start by giving each child one apple\n    apples_distributed = num_children \n    \n    # Remaining apples after each child has at least one\n    remaining_apples = total_apples - apples_distributed\n    \n    # Distribute remaining apples evenly\n    min_most_apples = (remaining_apples // (num_children - 1)) + 1\n    \n    # To find the smallest possible number for the one who gets the most,\n    # we need to check the remaining apples after equal distribution\n    remaining_after_even_distribution = remaining_apples % (num_children - 1)\n    \n    # If there's no remainder, we subtract one from the result as everyone gets equal apples\n    if remaining_after_even_distribution == 0:\n        min_most_apples -= 1\n    \n    return min_most_apples\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, bananas, oranges = symbols('apples bananas oranges')\n    \n    # define the ratio equations based on the problem statement\n    equation1 = Eq(bananas, 2 * apples)    # 2 bananas for every 1 apple\n    equation2 = Eq(oranges, 3 * apples)    # 3 oranges for every 1 apple\n    equation3 = Eq(apples + bananas + oranges, 24)    # total of 24 fruits\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, bananas, oranges))\n\n    return solutions[bananas]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n\n    while True:\n        anna_age += 1\n        mother_age += 1\n        years += 1\n        if mother_age == 3 * anna_age:\n            break\n    \n    return years\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for rabbits in range(13):\n        chickens = 12 - rabbits\n        if 2 * chickens + 4 * rabbits == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    return 2.4 * 0.52 + 7.6 * 0.52\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Let x be the number of long ribbons May has\n    may_short_ribbons = 7\n    nancy_long_ribbons = 18\n    # Since May and Nancy have equal number of pieces of ribbon\n    # May should have 18 pieces in total including 7 short ribbons\n    may_total_ribbons = 18\n    may_long_ribbons = may_total_ribbons - may_short_ribbons\n\n    # The total length of May's ribbons and Nancy's ribbons\n    may_total_length = may_short_ribbons * 40 + may_long_ribbons * 70\n    nancy_total_length = nancy_long_ribbons * 70\n\n    # According to the problem, May's total length is 2.4m longer than Nancy's\n    # 2.4m equals 240cm\n    difference_in_length = 240\n\n    # Creating the equation based on the condition and solving for the number of long ribbons May has\n    # may_total_length - nancy_total_length = difference_in_length\n    may_long_ribbons = (difference_in_length + nancy_total_length - may_short_ribbons * 40) / 70\n    \n    # return the total number of ribbons May has\n    return may_total_ribbons\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    # First, we need to find the largest two-digit number that can be divided by 4 and 5.\n    # Since the remainder is 3 in both cases, we should look for the largest two-digit number \n    # that when 3 is subtracted from it, the result is divisible by both 4 and 5.\n    \n    # The least common multiple (LCM) of 4 and 5 is their product, since they are coprime.\n    lcm_4_5 = 4 * 5\n    \n    # The largest two-digit number is 99.\n    # We start from 99, subtract 3, and check divisibility by the LCM.\n    # If it's not divisible, we decrease the number by the LCM until we reach a number that is divisible.\n    \n    number = 99\n    \n    # Substracting 3 to fit the condition of having a remainder of 3\n    number -= 3\n    \n    # We ensure that the number is a two-digit number and is divisible by 20 (LCM of 4 and 5)\n    while number >= 10:\n        if number % lcm_4_5 == 0:\n            # Add back the 3 to get the actual number with the remainder of 3\n            return number + 3\n        number -= lcm_4_5\n        \n    # If the loop finishes without finding a solution, something went wrong.\n    raise Exception(\"No solution found.\")\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n\n    red_paint = (red_ratio / total_ratio) * 1\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of books in bookshelf A as a,\n    # and the initial number of books in bookshelf B as b\n    a, b = symbols('a b')\n\n    # If A gives B 40 books, they will have the same number of books\n    equation1 = Eq(a - 40, b + 40)\n\n    # If B gives A 40 books, then A will have 3 times as many books as B\n    equation2 = Eq(a + 40, 3 * (b - 40))\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (a, b))\n\n    # Return the original number of books in bookshelf A\n    return solution[a]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    # Calculate sum of given numbers and expected sum based on mean.\n    given_numbers_sum = sum([9, 7, 5, 8, 4, 1, 8])\n    expected_total_sum = 6 * 8  # mean * total numbers\n    \n    # The missing number will be the difference.\n    missing_number = expected_total_sum - given_numbers_sum\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    amount_given_to_sister = total_amount / 4\n    amount_left = total_amount - amount_given_to_sister\n\n    return amount_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Assuming all cows eat grass at the same rate:\n    # if 8 cows --> 10 days\n    # Then for 4 cows (half the number of cows),\n    # it can last for twice as long --> 20 days\n    # But the actual for 4 cows is 15 days\n    # Therefore each day, a fixed amount of grass becomes desert\n    # Let's calculate how much grass is becoming desert each day using the information given\n\n    # Total amount of grass is the same in both scenarios\n    # Total grass = cows * days = 8 * 10 = 4 * 15\n    # Let G be the total amount of grass at the beginning (when there's no desert)\n    # and let D be the amount that becomes desert each day\n    # We have the following two equations:\n    # G - 10D = 8 * 10\n    # G - 15D = 4 * 15\n    \n    # Let's use linear algebra to solve this system of equations\n    from sympy import symbols, Eq, solve\n    \n    G, D = symbols('G D')\n    equation1 = Eq(G - 10 * D, 8 * 10)\n    equation2 = Eq(G - 15 * D, 4 * 15)\n    \n    solutions = solve((equation1, equation2), (G, D))\n    \n    # Now that we have G and D, let's figure out how many cows can be fed for 5 days\n    # G - 5D = cows * 5\n    # cows = (G - 5D) / 5\n    cows = (solutions[G] - 5 * solutions[D]) / 5\n    \n    return cows\n\n# Execute the function and store the result in `ans`\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Since each child gets at least 1 apple, and there are 8 children, we start by giving each one apple.\n    apples_given = 8\n    # Now we have 50 - 8 = 42 apples left to distribute.\n    \n    # Assume the kid who gets the most has x apples. Then the next kid can get at most (x-1) apples.\n    # We will find the smallest x for which it is possible to distribute the remaining apples without any two kids having the same number of apples.\n\n    # We start by giving the second kid (x-1) apples, the next (x-2) and so on down to 1 apple.\n    # To minimize the number of apples for the kid with the most, we iterate over the possible values of x from 1 upwards until we find a solution.\n    x = 1\n    while True:\n        # Calculate the sum of an arithmetic series from 1 to x: sum = (n/2 * (first_term + last_term))\n        total_apples = (x / 2) * (1 + x)\n        # We add the 8 apples already given, one to each child.\n        total_apples += apples_given\n\n        if total_apples >= 50:\n            # We have enough apples to reach or exceed the target, but we need to check for distinct values.\n            # We already have distinct values for one less than the number of children (from 1 to x).\n            # So, we only need to check if we can distribute the remaining to get a distinct number for the last child.\n            remaining_apples = 50 - total_apples + x\n            if remaining_apples < x:\n                break\n        x += 1\n    \n    # The least number of apples the kid with the most can get is x.\n    return x\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    cost_of_tapes = 3 * 9  # Cost of the 3 tapes\n    cost_of_cds = 83 - cost_of_tapes  # Total cost minus the cost of tapes\n    cost_per_cd = cost_of_cds / 4  # Cost of CDs divided by number of CDs\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_result = 99.396\n    divisor_with_decimal = 1.22\n    divisor_without_decimal = 122\n\n    # True result equals incorrect result plus the difference caused by the missing decimal\n    true_result = incorrect_result + incorrect_result / divisor_without_decimal * divisor_with_decimal\n\n    return true_result\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_of_12_packets = 1.02  # kg\n    mass_of_1_packet = mass_of_12_packets / 12  # mass of one packet\n    mass_of_4_packets = mass_of_1_packet * 4  # total mass of 4 packets\n    return mass_of_4_packets\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of cards Hisham has as h\n    # and the number of cards Melissa has as m\n    h, m = symbols('h m')\n\n    # Melissa has twice as many cards as Hisham\n    equation1 = Eq(m, 2 * h)\n    \n    # Together they have 876 cards\n    equation2 = Eq(h + m, 876)\n\n    # Solving the two equations for h and m\n    solutions = solve((equation1, equation2), (h, m))\n    h_value = solutions[h]\n    m_value = solutions[m]\n\n    # Number of cards Melissa should give to Hisham\n    # so that both will have the same number of cards:\n    # (Melissa's cards - Hisham's cards) / 2\n    cards_to_give = (m_value - h_value) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Let's denote the first number of the sequence as a and the second as b.\n    # The sequence would then be a, b, a+b, 2a+3b, 3a+5b, 5a+8b, ...\n    # We know that the 4th term is 6 and the 6th term is 15:\n    # 2a+3b = 6 and 5a+8b = 15.\n    \n    # We can solve this system of equations to find a and b.\n    # We will use basic algebraic manipulation to find the solutions for a and b.\n    \n    b = (15 - 5 * 6) / (8 - 3 * 5)  # Solve for b by substituting 2a + 3b = 6 into the second equation.\n    a = (6 - 3 * b) / 2             # Now that we have b, solve for a with the first equation.\n    \n    # Now we will calculate the 7th term which is the sum of the 5th and 6th terms:\n    # The 5th term is 3a+5b and the 6th term is 5a+8b.\n    seventh_term = (3 * a + 5 * b) + (5 * a + 8 * b)\n    \n    return seventh_term\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 8, 35)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_num_of_groups = gcd(boys, girls)\n\n    return greatest_num_of_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # There are 1000 millilitres in 1 litre.\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    terms = []\n    for i in range(1, 37, 5):\n        term = 36 / (i * (i + 5))\n        terms.append(term)\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    all_permutations = permutations(digits)\n    valid_numbers = [int(\"\".join(map(str, perm))) for perm in all_permutations if perm[0] != 0]\n    valid_odd_numbers = [num for num in valid_numbers if num % 2 != 0]\n\n    return min(valid_odd_numbers)\n    \nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Total work units can be considered as 1 job\n    total_work = 1\n\n    # 24 men can complete the job in 16 days\n    men_work_per_day = total_work / (24 * 16)\n    # 16 women can complete the job in 24 days\n    women_work_per_day = total_work / (16 * 24)\n\n    # Combine the work of 10 men and 6 women per day\n    combined_work_per_day = (10 * men_work_per_day) + (6 * women_work_per_day)\n\n    # Calculate the number of days 10 men and 6 women will take to complete the job\n    total_days = total_work / combined_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # The formula for the maximum number of regions R that n lines can divide the plane into is:\n    # R = n * (n + 1) / 2 + 1\n    # Each rectangle can be considered as formed by 2 lines (they are parallel and don't intersect)\n    # so 4 rectangles consist of 8 lines.\n    n = 8\n    \n    # Applying the formula:\n    R = n * (n + 1) // 2 + 1\n    \n    return R\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    marion, ethan, julie = symbols('marion ethan julie')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n    \n    solutions = solve((equation1, equation2, equation3), (marion, ethan, julie))\n\n    total_earnings = solutions[marion] + solutions[ethan] + solutions[julie]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    total_ways_all = factorial(total_people)\n    middle_position_ways = factorial(total_people - 1)\n    ways_with_eddie_in_middle = middle_position_ways\n\n    ans = total_ways_all - ways_with_eddie_in_middle\n    return ans\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    # Let the initial sum of money be represented by 'money'\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    # After spending 1/3 of his money on a watch, he has 2/3 left\n    # After spending $56 on a tie, he has 3/8 of the original amount left\n    # We set up the equation based on these conditions\n    eq = Eq((2/3) * money - 56, (3/8) * money)\n\n    # Solve the equation for the initial sum of money\n    initial_money = solve(eq, money)[0]\n\n    # Calculate how much Hamid spent altogether:\n    # 1/3 of the initial money on the watch plus the $56 on the tie\n    spent_total = (1/3) * initial_money + 56\n\n    return spent_total\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3\n    train_speed = 57\n    relative_speed = train_speed + eddie_speed\n    time_to_pass = 10\n\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Geometric Sequence formula: a_n = a_1 * r^(n-1)\n    # 96, n, 24, 12, 6  => a_1 = 96, a_3 = 24, r = (a_3/a_1)^(1/2)\n    a_1 = 96\n    a_3 = 24\n\n    r = (a_3 / a_1) ** (1/2)  # Calculate the common ratio r\n\n    n = a_1 * r  # Calculate the missing term n (a_2)\n\n    return int(n)\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Equations derived from the problem:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 7)\n    # x ≡ 3 (mod 9)\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n\n    # Define all possible signs to replace squares\n    signs = ['+', '*']\n    \n    # Generate all possible combinations of signs\n    sign_combinations = list(product(signs, repeat=3))\n    \n    # Maximum value obtained by evaluating all expressions\n    max_value = 0\n    for comb in sign_combinations:\n        # Generate the expression by replacing squares with signs\n        expr = f\"1{comb[0]}2{comb[1]}3{comb[2]}4\"\n        # Calculate the value of the expression\n        value = eval(expr)\n        # Update the maximum value if the current value is greater\n        if value > max_value:\n            max_value = value\n    \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_score = 8\n    incorrect_deduction = -3\n    total_score = 63\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_score + incorrect_answers * incorrect_deduction\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900\n    speed = 400\n    time = total_distance / speed\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Calculate the average of the first 5 numbers and the last 5 numbers\n    avg_first_5 = 10 / 5\n    avg_last_5 = 120 / 5\n\n    # The first term 'a' and the last term 'l' are the averages of the first and last 5 numbers respectively\n    a = avg_first_5\n    l = avg_last_5\n\n    # There are a total of 60 terms, so we can use the formula for the sum of an arithmetic series: n/2 * (a + l)\n    sum_of_all_numbers = 60 / 2 * (a + l)\n    return sum_of_all_numbers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        a %= 3  # Reduce each step by modulo 3 to get the remainder for each term\n        b %= 3  # This is possible due to the property of mod (a+b) mod n = (a mod n + b mod n) mod n\n\n    return b\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel, mom = symbols('hazel mom')\n\n    equation1 = Eq(hazel + 12, 3 * hazel)  # Hazel in 12 years will be three times her current age\n    equation2 = Eq(mom, 3 * (hazel + 18))  # On Hazel's 18th birthday, her mom will be three times Hazel's age then\n\n    solutions = solve((equation1, equation2), (hazel, mom))\n\n    hazel_age = solutions[hazel]\n    mom_age_now = solutions[mom] - hazel_age  # Subtract Hazel's current age from her mom's age when Hazel is 18\n\n    return mom_age_now\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p = number of stickers Peter initially had\n    peter = symbols('peter')\n    \n    # Sam had 40 stickers more than Peter initially\n    sam = peter + 40\n    \n    # After Sam gives 20% of his stickers to Peter\n    peter_after_sam_gives = peter + 0.20 * sam\n    sam_after_giving = sam - 0.20 * sam\n    \n    # After Peter gives 25% of his stickers to Sam\n    peter_after_all_exchanges = peter_after_sam_gives - 0.25 * peter_after_sam_gives\n    sam_after_all_exchanges = sam_after_giving + 0.25 * peter_after_sam_gives\n    \n    # Sam now had 96 stickers more than Peter\n    final_equation = Eq(sam_after_all_exchanges - peter_after_all_exchanges, 96)\n    \n    # Solve for Peter's initial number of stickers\n    solution = solve(final_equation, peter)\n    \n    # Since the result can include negative numbers, filter them out as they do not make sense in this context\n    initial_stickers_peter = [sol.evalf() for sol in solution if sol.evalf() > 0]\n    \n    # Return the first (and ideally only) positive solution\n    return initial_stickers_peter[0]\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_squares = sum([i for i in range(1, n+1)]) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible pairs of consecutive numbers in a suit (1-2, 2-3, ..., 12-13).\n    # There are 4 suits, and we need to make sure to draw at least one card from each\n    # possible consecutive pair, except for the last pair which will be guaranteed.\n\n    # We need at least 1 card extra to ensure a pair of consecutive cards.\n    ans = 13 * 4 - (4 - 1)\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    total_pages = 36\n    sheet_number = 5\n    \n    # Each sheet contains 4 page numbers, 2 on the front and 2 on the back\n    # The last sheet (back cover) is page 36, thus the other side is 1\n    # Even pages are on the right (front) and odd are on the left (back)\n    \n    # Calculate first page number on the fifth sheet\n    # Each sheet has a lower page number (left side) and a higher page number (right side)\n    first_page_number = (sheet_number - 1) * 4 + 1\n    \n    # The page numbers on a sheet are (in the order): front low, front high, back low, back high\n    front_low = first_page_number\n    front_high = total_pages - first_page_number + 1\n    back_low = front_low + 1\n    back_high = front_high - 1\n    \n    # The sum of all the page numbers on that sheet\n    sum_of_pages = front_low + front_high + back_low + back_high\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    laptops, original_cost, reduced_cost, profit = symbols('laptops original_cost reduced_cost profit')\n    \n    # Original profit equation\n    original_profit_eq = Eq(2000 * laptops - original_cost * laptops, 60000)\n    \n    # Cost reduced by 1/5th\n    reduced_cost_eq = Eq(reduced_cost, original_cost - original_cost / 5)\n    \n    # Profit increased by 30%\n    new_profit_eq = Eq(profit, 60000 * 1.3)\n    \n    # New profit equation with reduced cost\n    new_profit_with_reduced_cost_eq = Eq(2000 * laptops - reduced_cost * laptops, profit)\n    \n    # Solve the system of equations\n    solutions = solve((original_profit_eq, reduced_cost_eq, new_profit_eq, new_profit_with_reduced_cost_eq), \n                      (laptops, original_cost, reduced_cost, profit))\n    \n    return solutions[laptops]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    half_number = 10\n    original_number = half_number * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term_front = 48\n    last_term_back = 80\n    difference = 4\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence\n    # last_term = first_term + (n-1) * difference\n    # n = ((last_term - first_term) / difference) + 1\n    num_rows = ((last_term_back - first_term_front) // difference) + 1\n\n    # Calculate the sum of the seats using the formula for the sum of an arithmetic sequence\n    # Sum = n/2 * (first_term + last_term)\n    total_seats = num_rows * (first_term_front + last_term_back) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 130):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Start with the smallest possible common difference, i.e., 1\n    # As the sequence is strictly increasing, we'll start with 1 for modulo 7\n    common_diff = 1\n    while True:\n        # Calculate the remainders for each modulo\n        remainder_7 = 1\n        remainder_9 = remainder_7 + common_diff\n        remainder_a = remainder_9 + common_diff\n        remainder_28 = remainder_a + common_diff\n        \n        # Check if these remainders are less than their respective modulo values\n        # and if a valid 'a' can be found for which the remainder_a is less than 'a'\n        if remainder_7 < 7 and remainder_9 < 9 and remainder_28 < 28 and remainder_a < remainder_28:\n            # The smallest candidate for 'a' would be remainder_a + 1\n            a = remainder_a + 1\n            \n            # Calculate M by going through multiples of LCM of 7, 9, and 28 until we find a valid 'M'\n            lcm = 252  # Pre-calculated LCM of 7, 9, and 28\n            for M in range(lcm, lcm*7, lcm):  # Iterate through multiples of LCM\n                if M % 7 == remainder_7 and M % 9 == remainder_9 and M % a == remainder_a and M % 28 == remainder_28:\n                    return M  # Found the smallest possible M\n                    \n        # If a valid 'a' was not found, increase the common difference and check again\n        common_diff += 1\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    boys_more = 36\n    # Start with a minimum square size that can have more boys than girls\n    side_length = 3  # This will have 8 boys and 1 girl\n    while True:\n        # Outer layer has 4 sides of boys, minus 4 corners counted twice\n        boys = 4 * (side_length - 1)\n        # Second layer (if exists) is all girls, same calculation as boys\n        girls = 4 * (side_length - 3) if side_length > 3 else 0\n        # Difference between boys and girls\n        difference = boys - girls\n        if difference == boys_more:\n            # The total students is the square of side length\n            total_students = side_length**2\n            break\n        # Go to the next possible square size with one more layer of each\n        side_length += 2\n    return total_students\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    combined_rate = total_people / combined_time\n    gloria_rate = combined_rate - ellie_rate\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000  # Since 1 kilogram equals 1000 grams\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    num = (2 / 5) * 15\n    return num\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = 285 + 6/7 + 181 + 10/11 + 153 + 12/13\n    denominator = 1/7 + 1/11 + 1/13\n    \n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let the total number of pupils in the class be x\n    # 5 pupils are in the band\n    # (3/4) * (x - 5) pupils are in the choir\n    # (2/9) * x pupils are neither in the band nor the choir\n    # According to the problem, the total number of pupils is the sum of those in the band, choir, and neither\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Equation for the scenario\n    equation = Eq(5 + (3/4) * (x - 5) + (2/9) * x, x)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Return the number of pupils in the class as an integer\n    return solution[0]\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first shelf to the second shelf.\n    # After moving x books, the first shelf will have 18 - x books.\n    # The second shelf will have 24 + x books.\n    # We want the second shelf to have twice as many books as the first shelf.\n    # Hence, we get the equation: 24 + x = 2 * (18 - x)\n\n    # Solving the equation for x\n    x = (24 - 2 * 18) / (1 - 2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    # Convert speed to km/h by multiplying with 3.6 (1 m/s is equal to 3.6 km/h)\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Calculate the work done by one man in one day\n    work_per_man_per_day = 120 / (3 * 2)\n    \n    # Calculate the total work required for the new trench\n    total_work_for_new_trench = 880\n    \n    # Calculate the number of man-days required for the new trench\n    man_days_required = total_work_for_new_trench / work_per_man_per_day\n    \n    # Calculate the number of days required for four men\n    days_required_for_four_men = man_days_required / 4\n    \n    return days_required_for_four_men\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Starting from 32 since it's the first case when 4 lollipops per box leaves 32 lollipops\n    # We increase the total lollipops by multiples of 4 and check if it satisfies the second condition\n    total_lollipops = 32\n    while True:\n        if (total_lollipops - 3) % 7 == 0:  # Check if there are 3 lollipops in the last box when divided by 7\n            return total_lollipops\n        total_lollipops += 4\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # Let's denote the number of long tubes as 'x' and the number of short tubes as 'y'.\n    # We have 47 = 8x + 5y\n    # We will loop through possible values of x and check if corresponding y is an integer\n    for x in range(total_balls // long_tube_capacity + 1):\n        remaining_balls = total_balls - (long_tube_capacity * x)\n        if remaining_balls % short_tube_capacity == 0:\n            return x\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    term_difference = (ninth_term - third_term) // (9 - 3)\n\n    eleventh_term = ninth_term + 2 * term_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Function to calculate sum of cubes from 1 to n\n    def sum_of_cubes(n):\n        sum_to_n = n * (n + 1) // 2\n        return sum_to_n ** 2\n    \n    # Calculate the sum of cubes for numbers without missing terms\n    full_sum = sum_of_cubes(14)\n    \n    # Subtract the cubes of the missing terms (3, 6, 9, 12)\n    for missing_term in (3, 6, 9, 12):\n        full_sum -= missing_term ** 3\n    \n    return full_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100.0)\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the number that 4.32 is multiplied by.\n    # When Will forgets the decimal point, the number becomes 432 instead of 4.32.\n    # So the incorrect multiplication result is 432 * x.\n    # The correct result should be 4.32 * x.\n    # According to the problem, the incorrect result is 2138.4 greater than the true result.\n    # Therefore, we have the equation: 432 * x - 4.32 * x = 2138.4\n    # Simplifying the equation, we get: 427.68 * x = 2138.4\n\n    # Now we solve for x:\n    x = 2138.4 / 427.68\n\n    # Now, we can find the true result using the correct decimal value:\n    true_result = 4.32 * x\n\n    return true_result\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let x be the number of bracelets Felicia originally had.\n    # According to the problem:\n    # Felicia sold 3/5 of her bracelets and Janice bought 2/5 of those.\n    # After that, the ratio of Felicia's to Janice's bracelets becomes 5:7.\n    # We also know that Janice originally had 96 bracelets.\n    janice_original = 96\n    \n    # Felicia's bracelets after selling 3/5 of them is (1-3/5)x = 2/5x.\n    # Janice's bracelets after buying the 2/5 of the 3/5 Felicia sold is 96 + 3/5 * 2/5 * x.\n    \n    # We can set up the ratio equation as follows:\n    # (2/5 * x) / (96 + (3/5) * (2/5) * x) = 5 / 7\n    # After simplifying and solving for x, we can determine how many bracelets Janice bought from Felicia.\n\n    # Cross-multiply to solve for x:\n    # 7 * (2/5) * x = 5 * (96 + (3/5) * (2/5) * x)\n    # 14/5 * x = 480 + 6/25 * x\n    # (14/5 - 6/25) * x = 480\n    # (70/25 - 6/25) * x = 480\n    # 64/25 * x = 480\n    \n    # Now, solve for x:\n    x = (480 * 25) / 64\n    \n    # Number of bracelets Janice buys from Felicia is 2/5 of the 3/5 Felicia sold.\n    bracelets_bought = (3/5) * (2/5) * x\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The remainder is the same, which means the differences between the numbers\n    # are divisible by A.\n    differences = [2758 - 2017, 3670 - 2758]\n\n    # The greatest common divisor (GCD) will give us the highest possible A.\n    from math import gcd\n    A = gcd(differences[0], differences[1])\n\n    # Since the numbers are all distinct and greater than 1,\n    # We need to find all factors of A.\n    factors = set()\n    for i in range(1, int(A ** 0.5) + 1):\n        if A % i == 0:\n            factors.add(i)\n            factors.add(A // i)\n\n    # The sum of all possible values of A\n    return sum(factors)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    total = 9 + 99 + 999 + 9999\n    return total\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # each boy gets 5 candies and each girl gets 3 candies\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    # there are 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the milk candies and f be the fruit candies initially\n    m, f = symbols('m f', integer=True)\n\n    # Original and new ratios\n    original_ratio = Eq(m/f, 7/9)\n    new_ratio = Eq((m - 8)/f, 2/3)\n\n    # Solve the equations\n    solutions = solve((original_ratio, new_ratio), (m, f))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 0\n    while True:\n        B += 1\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n\n    # Number of years between 1996 and 2008\n    years_between = 2008 - 1996\n\n    # Mum's age when grandmother was 80\n    mum_age_when_grandma_80 = mum_age_1996 + years_between\n\n    # Grandmother's age when mum was born\n    grandmother_age_when_mum_born = grandmother_age_2008 - mum_age_when_grandma_80\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i) and i >= 23:\n            # Once we reach or pass the number 23, we break as we found the position of '3' in 23.\n            break\n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    lemonade, plus1000 = symbols('lemonade plus1000')\n    \n    # Constraint equations\n    equation1 = Eq(4 * lemonade + 7 * plus1000, 2012)  # Income constraint\n    equation2 = Eq(lemonade + plus1000, 350)  # Total bottles constraint\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (lemonade, plus1000))\n    \n    # Find the minimum number of bottles of \"1000 Plus\"\n    ans = solutions[plus1000]\n    \n    return ans\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initial = 60\n    apples_per_friend = 4\n    friends = apples_initial // apples_per_friend\n    apples_needed_after_increase = friends * (apples_per_friend + 1)\n    return apples_needed_after_increase\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # maximum socks Yohan could take without getting a white pair\n    # is if he takes all the red and black socks first\n    max_red_and_black = 10 + 10\n    # he then will have to take one more sock to be guaranteed a white pair\n    max_worst_case = max_red_and_black + 1\n    \n    return max_worst_case\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n    \n    # Assume x groups of 4 students and y groups of 6 students\n    for x in range(total_groups + 1):\n        y = total_groups - x\n        if 4 * x + 6 * y == total_students:\n            return y\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    numbers_count = 3\n    total_initial = average_initial * numbers_count\n    \n    final_average = 90\n    final_numbers_count = 4\n    total_final = final_average * final_numbers_count\n    \n    fourth_number = total_final - total_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    conversion_factor = 100\n    centimeters = meters * conversion_factor\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 as it's a 3-digit number\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and A != C and B != C:\n                    ABC = 100 * A + 10 * B + C\n                    ACB = 100 * A + 10 * C + B\n                    BAC = 100 * B + 10 * A + C\n                    BCA = 100 * B + 10 * C + A\n                    CAB = 100 * C + 10 * A + B\n                    CBA = 100 * C + 10 * B + A\n                    if ABC + ACB + BAC + BCA + CAB + CBA == 3194:\n                        return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    wheat_required = 8\n\n    # Calculate the combined ratio\n    combined_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Find out how many fish per pack of wheat\n    fish_per_wheat = 1 / combined_ratio\n    \n    # Calculate the total number of fish for the required packs of wheat\n    total_fish = fish_per_wheat * wheat_required\n\n    return int(total_fish)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    discount_handbag = 0.20\n    price_after_discount_handbag = 428\n    total_discount = 121\n\n    original_price_handbag = price_after_discount_handbag / (1 - discount_handbag)\n    discount_purse = total_discount - (original_price_handbag * discount_handbag)\n    discount_percentage_purse = 0.28\n    original_price_purse = discount_purse / discount_percentage_purse\n\n    return original_price_purse\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        while i % 5 == 0:\n            count += 1\n            i //= 5\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    sum_of_digits = 80\n    num_recurring_blocks = 20 // 2  # Each block has 2 digits (A2), so we divide by 2\n    sum_per_block = sum_of_digits / num_recurring_blocks  # Average sum per block of recurring digits\n\n    # Let A2 be the recurring block, then A + 2 = sum_per_block\n    # A = sum_per_block - 2\n    A = sum_per_block - 2\n    return int(A)\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    climbed_distance = 0\n    day = 0\n\n    while climbed_distance < 25:\n        day += 1\n        climbed_distance += 4\n        if climbed_distance >= 25:\n            break\n        climbed_distance -= 1\n    \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate the time spent jogging at 6 miles per hour\n    jogging_time = 0.5  # From 6:30 a.m. to 7:00 a.m. is half an hour\n    jogging_speed = 6  # 6 miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the time spent walking at 5 miles per hour\n    walking_time = 1  # From 7:00 a.m. to 8:00 a.m. is one hour\n    walking_speed = 5  # 5 miles per hour\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Elvin had\n    original_amount = symbols('original_amount')\n\n    # Elvin spent $120 on a chair\n    after_chair = original_amount - 120\n\n    # He spent 40% of the remainder on a jacket\n    after_jacket = after_chair - 0.4 * after_chair\n\n    # He had 30% of his original amount of money left after shopping\n    equation = Eq(after_jacket, 0.3 * original_amount)\n\n    # Solve for the original amount of money\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    max_books_in_layer = (total_books + layers - 1) // layers\n\n    return max_books_in_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    initial_books = symbols('initial_books')\n\n    # Initial total cost for some books at an average price of $3.50 each\n    initial_total_cost = initial_books * 3.50\n    \n    # Total cost after buying 2 more books at $6 each\n    new_total_cost = initial_total_cost + 2 * 6\n\n    # The new average price is $4 after buying 2 more books\n    new_average_price = 4\n\n    # Equation for the new average price calculation\n    equation = Eq(new_total_cost / (initial_books + 2), new_average_price)\n\n    # Solve the equation for the number of initial books\n    solutions = solve(equation, initial_books)\n\n    # Calculate the total number of books bought altogether\n    total_books = solutions[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1230'\n    count = 0\n    for perm in permutations(digits, 3):\n        if perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    n = 1  # term counter\n\n    while first_term > 0:\n        first_term += common_difference\n        n += 1\n    \n    return n - 1  # subtract 1 because we've included the first negative term in the count\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_kg = 1.2\n    piece_weight_g = 30\n\n    total_pieces = (weight_kg * 1000) / piece_weight_g\n\n    return int(total_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # Convert 2.5 liters to quarts (1 liter = 1.05669 quarts)\n    cups_per_quart = 1 / 0.5  # Calculate how many 0.5 quart cups are in a quart\n    total_cups = liters_to_quarts * cups_per_quart  # Calculate total number of cups\n    return round(total_cups)  # Round to nearest integer\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if A != C and A != E and A != F and C != E and C != F and E != F and A != 2 and A != 0 and C != 2 and C != 0 and E != 2 and E != 0 and F != 2 and F != 0:\n                        ABCDEF = A*100000 + 2*10000 + 0*1000 + C*100 + E*10 + F\n                        EFABCD = E*100000 + F*10000 + A*1000 + 2*100 + 0*10 + C\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return A*1000 + C*100 + E*10 + F\n                        \nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    for i in range(1, 10):\n        if 3 * i == 18:\n            return i\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Calculate jogging distance from 6:30 am to 7:30 am\n    jogging_time = 1  # 1 hour of jogging\n    jogging_speed = 6  # 6 miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate walking distance from 7:30 am to 9:30 am\n    walking_time = 2  # 2 hours of walking\n    walking_speed = 5  # 5 miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let angel_wrappers be the number of sweet wrappers Angel originally had\n    # Let belle_wrappers be the number of sweet wrappers Belle had\n    angel_wrappers, belle_wrappers = symbols('angel_wrappers belle_wrappers')\n\n    # Create the equations based on the given information\n    equation1 = Eq(angel_wrappers, 5/6 * belle_wrappers)  # Angel had 5/6 as many sweet wrappers as Belle\n    equation2 = Eq(angel_wrappers - 58, 3/4 * belle_wrappers)  # After throwing away 58 wrappers, Angel had 75% of Belle's wrappers\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (angel_wrappers, belle_wrappers))\n\n    # Return the number of sweet wrappers that Belle had\n    return solutions[belle_wrappers]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current age of dad and son\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Equation 1: Six years ago, the age of a dad was 5 times that of his son\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    \n    # Equation 2: The sum of the ages of the dad and his son is 78 this year\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n    \n    # We are interested in the dad's current age\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4 / 9) * 36\n    return result\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # x is the amount of money, y is the number of children\n    eq1 = Eq(x + 20, 70 * y)  # If there was 20p more, each child gets 70p\n    eq2 = Eq(x - 60 * y, 210)  # If each child gets 60p, 2.10 GBP is left\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n\n    amount_remitted = salary * remit_percentage\n    bank_charge = amount_remitted * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    # Since each vase must have at least 1 carnation, we can start from there.\n    for vase1 in range(1, 10-2):  # Vase1 can have 1 to 7 carnations.\n        for vase2 in range(1, 10-vase1-1):  # Vase2 can have 1 to what's left.\n            # Vase3 will get the remaining carnations.\n            vase3 = 10 - (vase1 + vase2)\n            # Now, we make sure each vase has a different number of carnations.\n            if len(set([vase1, vase2, vase3])) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n    new_balance = account_balance + payment\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"2nd March\", \"%d%B\")\n    end_date = datetime.strptime(\"15th April\", \"%d%B\")\n    ans = (end_date - start_date).days + 1\n    return ans\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10**6):  # Assuming the special number has less than a million digits\n        if str(4 * i) == '9' + str(i)[:-1]:\n            return i\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Since Eddie is always on the left end and Avril is next to him, we can consider them as one unit.\n    # Therefore, we have 6 units to arrange (Eddie+Avril and the other 5 students).\n    arrangements_of_units = factorial(6)\n\n    # Next, Avril can be on either side of Eddie. So there are 2 ways to arrange Eddie and Avril within their unit.\n    arrangements_within_unit = 2\n\n    # The total number of arrangements is the product of the two possibilities.\n    total_arrangements = arrangements_of_units * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # There are 1+3 = 4 blue gloves and 2+4 = 6 green gloves.\n    # To ensure getting a matching pair, one has to consider the worst-case scenario:\n    # Picking all gloves of the color with fewer gloves first without getting a matching pair.\n    # After that, the next glove picked must complete a pair regardless of its color.\n    \n    # Worst-case scenario for blue gloves (since there are fewer blue gloves):\n    num_blue_gloves = 1 + 3  # 1 left-hand + 3 right-hand\n    \n    # Next glove will either be a blue to form a pair or the 5th green glove to form a green pair,\n    # hence 1 more than the total blue gloves:\n    num_gloves_for_pair = num_blue_gloves + 1\n    \n    return num_gloves_for_pair\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45\n    new_price = original_price * (1 + percentage_increase / 100)\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    # The mean of eight numbers is 6\n    mean = 6\n    # Sum of all eight numbers\n    total_sum = mean * 8\n    # Sum of the known seven numbers\n    known_sum = 9 + 7 + 5 + 4 + 1 + 8 + 8\n    # Missing number is the difference between total sum and known sum\n    missing_number = total_sum - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    first_interval = 3\n    second_interval = 5\n\n    # Calculate the distance covered by the first 30 holes\n    distance_first_30_holes = first_interval * 30\n\n    # Remaining distance to cover\n    remaining_distance = circumference - distance_first_30_holes\n\n    # Calculate how many holes need to be dug at the new interval of 5m\n    if remaining_distance % second_interval == 0:\n        num_additional_holes = remaining_distance // second_interval\n    else:\n        num_additional_holes = (remaining_distance // second_interval) + 1\n\n    return num_additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # The problem can be split into two sections: climbing to the 5th step and climbing from the 5th to the 10th step.\n    # We use dynamic programming to calculate the number of ways to get to a particular step.\n\n    def ways_to_step(n):\n        # If there are 0 or 1 step, there's only one way to climb\n        if n == 0 or n == 1:\n            return 1\n        # If there are 2 steps, there are two ways to climb (1+1 or 2)\n        elif n == 2:\n            return 2\n        \n        # Initialize base conditions\n        one_step_before = 2  # Number of ways to get to the step before the current\n        two_steps_before = 1 # Number of ways to get two steps before the current\n        all_ways = 0\n        \n        # We start from the 3rd step up to Nth step\n        for i in range(2, n):\n            # The number of ways to get to the current step is the sum of the ways to get to the two previous steps\n            all_ways = one_step_before + two_steps_before\n            # Update the steps for the next iteration\n            two_steps_before = one_step_before\n            one_step_before = all_ways\n        \n        return all_ways\n\n    # Calculate ways to get to the 5th step\n    ways_to_5 = ways_to_step(5)\n    # Calculate ways to get from the 5th to the 10th step, which is effectively like calculating the ways to get to the 5th step\n    # since there are 5 steps between 5 and 10.\n    ways_from_5_to_10 = ways_to_step(5)\n\n    # Total ways is the product of ways to get to the 5th step and from the 5th to the 10th step\n    total_ways = ways_to_5 * ways_from_5_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 sweets, they have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 sweets, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq((rachel - 8) - 3 * (alice - 8), 0)\n\n    # Solve the system of equations to find the number of sweets Rachel and Alice have originally\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # The total number of sweets they originally have\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n    combinations = pastas * sauces * toppings\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16-i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while not (cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4):\n        cookies += 1\n    return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum(num for num in range(1, 51) if '3' in str(num))\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef evaluate_with_brackets(expression, positions):\n    new_expr = list(expression)\n    for i, pos in enumerate(positions):\n        # Inserting brackets, considering the shift caused by previous insertions\n        new_expr.insert(pos + i * 2, '(')\n        new_expr.insert(pos + 1 + i * 2, ')')\n    return eval(''.join(new_expr))\n\ndef solution():\n    expression = \"15+5*5+15-6+7\"\n    expr_length = len(expression)\n    max_value = None\n\n    # Generate positions to place the first pair of brackets\n    for i in range(0, expr_length - 1):\n        for j in range(i + 2, expr_length):\n            # Generate positions for the second pair of brackets\n            for k in range(j + 1, expr_length - 1):\n                for l in range(k + 2, expr_length):\n                    value = evaluate_with_brackets(expression, (i, j, k, l))\n                    if max_value is None or value > max_value:\n                        max_value = value\n                        max_positions = (i, j, k, l)\n\n    return max_value\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 0\n    page = 0\n    \n    while total_digits < 792:\n        page += 1\n        total_digits += len(str(page))\n    \n    return page - 1\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Ivan's total score for 5 assignments\n    ivan_total = 80 * 5\n\n    # Billy's total score for 4 assignments\n    billy_total = 89 * 4\n\n    # Billy wants his average to be 10 more than Ivan's\n    billy_goal_avg = 80 + 10\n\n    # Billy's total score goal for 5 assignments\n    billy_goal_total = billy_goal_avg * 5\n\n    # Score needed for Billy in the 5th assignment\n    billy_5th_score = billy_goal_total - billy_total\n\n    return billy_5th_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    for x1 in range(1, 1000):\n        x2 = 1000 - x1\n        if x2 >= x1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given the 7th, 8th and 9th terms of the sequence\n    term_7 = 39\n    term_8 = 44\n    term_9 = 49\n\n    # Calculate the common difference\n    difference = term_8 - term_7\n\n    # The nth term of an arithmetic sequence can be calculated by:\n    # nth_term = first_term + (n - 1) * difference\n    # We need to find the first term to use the above formula for the 100th term\n    \n    # Calculate the first term by subtracting 6 times the difference from the 7th term\n    first_term = term_7 - (7 - 1) * difference\n\n    # Calculate the 100th term\n    term_100 = first_term + (100 - 1) * difference\n\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(1260)\n    m = 1\n    for prime, exp in factors.items():\n        if exp % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for num_cards in range(1, 28*4*7):\n        if num_cards % 4 == 3 and num_cards % 7 == 3:\n            return num_cards % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    # Start by finding the least common multiple (LCM) of 8 and 11\n    from math import gcd\n    lcm = (8 * 11) // gcd(8, 11)\n    \n    # The number we are looking for can be written as k * LCM + 6\n    # where k is some positive integer, and the number is a two-digit number (10 <= number <= 99)\n    # So we loop over possible values of k such that (k * LCM + 6) is a two-digit number\n    for k in range(1, 100):\n        number = k * lcm + 6\n        if 10 <= number <= 99:\n            return number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # 9 to any power will end with 9, so 99 powers of 9 will still end with 9\n    return 9\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    total_cost = 151.25 + 24.15\n    return total_cost\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    total_ponies = 6\n    prize_pony_value = 250000\n    average_increase = 10000\n    \n    # Before Rein Beau moves, the total value of ponies in both stables\n    # (excluding Rein Beau) is (average of small stable) * 2 + (average of large stable) * 3\n    \n    # After Rein Beau moves, the value of ponies in each stable increases by 10000\n    # (average of small stable + 10000) * 1 + (average of large stable + 10000) * 4\n    \n    # Since the difference in total value is due to Rein Beau moving,\n    # we can set up the equality:\n    # (average of small stable + 10000) * 1 + (average of large stable + 10000) * 4 = \n    # (average of small stable) * 2 + (average of large stable) * 3 + 250000\n    \n    # Solve for the combined average value of the stables\n    combined_avg = prize_pony_value / (1 + 4 - 2 - 3)\n\n    # Calculate the total value of all six ponies\n    total_value = combined_avg * total_ponies + prize_pony_value\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    for month in range(1, 13):\n        for day in range(1, 32):\n            calculation = (((month * 4 + 1) * 50) + (day * 2)) - 50\n            if calculation == result:\n                return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_stickers = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_stickers\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = (2 ** 2015) % 3\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Four who insist on standing together can be treated as one unit\n    # We then have 5 units to arrange (the unit of 4 pupils + the other 4 individual pupils)\n    unit_arrangements = factorial(5) \n\n    # The four pupils who insist on standing together can be arranged among themselves in 4! ways\n    four_pupils_arrangements = factorial(4) \n\n    # Multiplying the number of ways to arrange the units and the number of ways \n    # to arrange the pupils within the unit gives the total arrangements\n    total_arrangements = unit_arrangements * four_pupils_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar_weight = 7\n    water_weight = 21\n    total_weight = sugar_weight + water_weight\n\n    percent_concentration = (sugar_weight / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the three consecutive whole numbers be x, x+1, x+2\n    # Their sum is given as x + (x+1) + (x+2) = 60\n    # 3x + 3 = 60\n    # 3x = 57\n    # x = 19\n    # The largest number is (x+2)\n    largest_number = 19 + 2\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g represent the number of gold medals and s represent the number of silver medals.\n    # We are given the following equations:\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n    # We solve for g and s.\n    \n    # We have two equations and two unknown variables. We can solve them by substitution or elimination.\n    # We'll use substitution in this case.\n    \n    # From the second equation, we get s = 80 - g.\n    # Substituting s in the first equation, we get 5g + 4(80 - g) = 331.\n    # Simplifying the above, we get 5g + 320 - 4g = 331.\n    # Therefore, g = 331 - 320 = 11 (gold medals).\n    \n    g = (331 - 4*80)/1\n    return int(g)\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    lamb_weight = 7\n    beef_weight = 30\n\n    total_cost = (lamb_price_per_kg * lamb_weight) + (beef_price_per_kg * beef_weight)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work rate of one master per day\n    # Let a be the work rate of one apprentice per day\n    m, a = symbols('m a')\n\n    # Equation for 1 master and 3 apprentices completing the task in 4 days\n    equation1 = Eq(1*m + 3*a, 1/4)\n\n    # Equation for 2 masters and 1 apprentice completing the task in 3 days\n    equation2 = Eq(2*m + 1*a, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Work rate of one apprentice\n    apprentice_rate = solutions[a]\n\n    # Time taken for 1 apprentice to complete the task alone (work = rate * time)\n    time_for_apprentice = 1 / apprentice_rate\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    fraction_men = 5/8\n    fraction_children = 1/3\n    # If 5/8 of the remainder were men, then 3/8 of the remainder were women.\n    # Remainder is after taking out children, which is 2/3 of total\n    remainder = women / (3/8)\n    total_spectators = remainder / (2/3)\n    return total_spectators\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Based on the given information, we can infer that the operation ★ could be defined as follows:\n    # a★b = a + (a - b) if a > b\n    # a★b = a if b >= a\n    # Now, with this definition, let's calculate 11★10.\n\n    a = 11\n    b = 10\n\n    ans = a if b >= a else a + (a - b)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant = 10\n    position_rabbit_from_right = 9\n    dolls_between = 5\n\n    total_dolls = (position_elephant + dolls_between + position_rabbit_from_right)\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    ans = 0.4 * ((11/52) / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Let's denote the size of the square array by n (total layers)\n    # Each layer consists of one gender and contributes to the number of boys or girls\n    # The problem can be expressed algebraically as (n^2)-(n-2)^2 = 32, where n is odd for boys on the outside\n\n    n = 1  # smallest odd number to start with for the outer layer of boys\n    while True:\n        boys = n * n  # total boys when considering the outermost layer as a full square\n        girls = (n - 2) * (n - 2) if n > 1 else 0  # total girls is the area of the inner square\n        if boys - girls == 32:  # if the difference matches the given condition, we found our n\n            total_students = boys + girls\n            return total_students\n        n += 2  # incrementing by 2 to only consider odd values for n\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses and d be the original number of daisies.\n    r, d, m = symbols('r d m')  # we are also introducing m for months\n\n    # Equation 1: Sum of roses and daisies is 300.\n    equation1 = Eq(r + d, 300)\n\n    # Equation 2: After m months, the planter will have planted m roses and m daisies.\n    # Therefore, the new number of roses is r + m and the new number of daisies is d + m.\n    # Given: There will be 280 roses and 180 daisies in the park.\n    equation2 = Eq(r + m, 280)\n    equation3 = Eq(d + m, 180)\n\n    # We can solve this system of equations for r (original number of roses), d, and m.\n    solutions = solve((equation1, equation2, equation3), (r, d, m))\n\n    # We want to find the original number of roses.\n    return solutions[r]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))\n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    terms_apart = 15 - 10\n    common_difference = term_difference / terms_apart\n    nth_term = 102\n\n    first_term = tenth_term - common_difference * (10 - 1)\n    nth_number = first_term + common_difference * (nth_term - 1)\n\n    return int(nth_number)\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n    comics = non_english_books / 3\n\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_litres = 6\n\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n    \n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_shots = accurate_shots + missed_shots\n    \n    total_score = accurate_shots * score_per_accurate_shot\n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start with 1 apple for each child\n    min_apples = [1 for _ in range(8)]\n    # Distribute the remaining apples (50 - 8) starting from the child who gets the least\n    remaining_apples = 50 - sum(min_apples)\n    index = 0\n    while remaining_apples > 0:\n        # Ensure the distribution is unique by adding a different number of apples\n        min_apples[index] += index + 1\n        remaining_apples -= (index + 1)\n        index = (index + 1) % 7  # ignore the last child (max)\n\n    max_apples = max(min_apples)\n    return max_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = 2/25\n    # Calculate the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n    \n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = 8/3\n    # Calculate the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n    \n    # Calculate the final answer\n    ans = complex_fraction1 + complex_fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # total number to split\n    total = 8\n    # since we need at least two non-zero numbers, \n    # we start from 1 (since 0 is not allowed) and go up to total - 1\n    # each count represents the number of ways you can write the number \n    # as a sum of two non-zero natural numbers.\n    count = 0\n    for i in range(1, total):\n        count += 1  # each i can pair with total - i to make the total\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    beef_weight = 0.6\n    cost_per_kilogram = total_cost / beef_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    num_boxes = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    distance_to_cover = train_length + tunnel_length\n    time_to_cover = distance_to_cover / speed\n\n    return time_to_cover\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    max_no_bowties_no_spectacles = total_men - max(bow_ties, spectacles)\n\n    return max_no_bowties_no_spectacles\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return (50 / 100) * (20 / 100) * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red, green = symbols('blue red green')\n    \n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n    \n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    max_apples = 19\n    while True:\n        for a in range(1, max_apples):\n            for b in range(1, max_apples):\n                for c in range(1, max_apples):\n                    for d in range(1, max_apples):\n                        for e in range(1, max_apples):\n                            if a != b and a != c and a != d and a != e and b != c and b != d and b != e and c != d and c != e and d != e:\n                                if a + b + c + d + e == 19:\n                                    return max(a, b, c, d, e)\n        max_apples -= 1\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Count Ali and Bala as one unit because they must stand together,\n    # so there are now 4 units: {Ali_Bala, Charles, Ella, Dan}\n\n    # Dan must stand at the furthest left, so we fix Dan's position.\n    # There are now 3! ways to arrange the remaining 3 units.\n\n    arrangements_for_units = factorial(3)\n\n    # Ali and Bala can switch places within their unit, so there are 2! ways.\n    arrangements_within_unit = factorial(2)\n\n    # Multiply the ways to arrange the units by the ways to arrange within the unit\n    total_arrangements = arrangements_for_units * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # 3 fishes for 2 rabbits => Owen to Oscar\n    # 3 rabbits for 4 packs of wheat => Oscar to Dennis\n    # Find the direct exchange rate between fishes and packs of wheat.\n    \n    # For 4 packs of wheat, Owen needs to give fishes that are enough for 3 rabbits.\n    # Since 3 fishes = 2 rabbits, then for 3 rabbits, Owen needs (3/2) * 3 fishes.\n    fish_for_4_wheat = (3/2) * 3\n\n    # Now find out how many fishes Owen needs to give for 8 packs of wheat.\n    # It's double the number of fishes needed for 4 packs since 8 is double of 4.\n    fish_for_8_wheat = fish_for_4_wheat * 2\n    \n    return fish_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 141):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Iterate over all possible two-digit numbers for the minuend\n    for tens_place_minuend in range(1, 10):\n        for ones_place_minuend in range(0, 10):\n            # Calculate the actual two-digit minuend\n            minuend = tens_place_minuend * 10 + ones_place_minuend\n            \n            # Incorrectly identified subtrahend per Serene's mistake\n            subtrahend_incorrect = 50 + 3\n            \n            # Calculate the supposed difference based on Serene's mistake\n            difference_incorrect = minuend - subtrahend_incorrect\n            \n            # Check if Serene's incorrect calculation would result in a difference of 36\n            if difference_incorrect == 36:\n                # Correct subtrahend based on the problem statement\n                subtrahend_correct = 30 + 2\n                \n                # Calculate the correct difference\n                difference_correct = minuend - subtrahend_correct\n                \n                # Return the correct difference\n                return difference_correct\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Worst case: we draw all balls of one color, then all balls of another color.\n    # After that, the next ball we draw must be of the third color.\n\n    # Draw all white and all yellow first (worst case)\n    num_draws = 9 + 6\n\n    # Next draw will ensure we have a red ball as well\n    num_draws += 1\n\n    return num_draws\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fences = 3.2\n    used_woods = 6.5\n\n    left_rope = total_length - (used_fences + used_woods)\n\n    return left_rope\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    three_digit_numbers = list(permutations(digits, 3))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution(): \n    smallest = \"01234\"\n    largest = \"98765\"\n    return int(largest) - int(smallest)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of sweets Ellen and Lenny have\n    ellen, lenny = symbols('ellen lenny')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solve the equations for ellen and lenny\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Calculate the total number of sweets they have altogether\n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\n# Call the function and get the answer\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    income = 120000\n    initial_tax_rate = 0.06\n    initial_taxed_income = 50000\n    fixed_tax = initial_tax_rate * initial_taxed_income\n    remaining_income = income - initial_taxed_income\n    total_tax_paid = 10000\n\n    additional_tax_paid = total_tax_paid - fixed_tax\n    additional_tax_rate = additional_tax_paid / remaining_income\n\n    T = (additional_tax_rate - initial_tax_rate) * 100  # converting to percentage\n\n    return T\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n    \n    # Total distance the train needs to cover to completely pass the tunnel\n    total_distance = train_length + tunnel_length\n    \n    # Time = Distance / Speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_present_combinations = list(permutations(range(7), 5))\n    count = 0\n    \n    for combination in total_present_combinations:\n        # Richard's choices are at index 0 and 1 (toy car or puzzle)\n        # Kevin's choices are at index 0 and 2 (toy car or calculator)\n        if 0 in combination[:2] or 1 in combination[:2]:\n            if 0 in combination[:3] or 2 in combination[:3]:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n    money_given = 100  # £1 is 100 pence\n\n    change = money_given - total_cost  # change in pence\n    \n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 2\n    while True:\n        # Check if all numbers n, n+4, n+6, n+132, n+250 are prime\n        if all(isprime(n + i) for i in [0, 4, 6, 132, 250]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution in grams\n    concentration = 0.15  # concentration of sugar in the solution\n    sugar_amount = total_weight * concentration  # weight of sugar in grams\n    return sugar_amount\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    # Jack's speed is 15 km/h and Rose's speed is 10 km/h.\n    # They meet in 10 hours, so they are 10 * 15 = 150 km apart when Jack meets Rose,\n    # and Rose has covered 10 * 10 = 100 km in the same time.\n    # The distance between Town A and Town B is the difference of these distances.\n    \n    jack_distance = 15 * 10\n    rose_distance = 10 * 10\n    distance_between_towns = jack_distance - rose_distance\n    \n    return distance_between_towns\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*i)**2 - (2*i-2)**2 for i in range(1, 1016))\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of each rabbit\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    # Equation 1: The first rabbit's cost is x\n    # Equation 2: The second rabbit costs £2 more than the first rabbit\n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    \n    # Equation 3: The third rabbit costs 80p less than the second rabbit\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)\n    \n    # Equation 4: The total cost of the three rabbits is £19.70\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.7)\n    \n    # Solve the system of equations for the cost of each rabbit\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    # Get the cost of the first rabbit\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_and_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "def solution():\n    from math import factorial\n\n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n\n    def nCr(n, r):\n        return nPr(n, r) // factorial(r)\n\n    total_ways = nPr(7, 3) * nCr(7, 3)  # Total ways to arrange 'SUCCESS' without restrictions\n    ways_with_adjacent_s = 6 * nPr(6, 2) * nCr(6, 2)  # Ways to arrange 'SSUCCESS' with an extra S\n\n    return total_ways - ways_with_adjacent_s\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # David's work rate per day\n    david_rate = 1 / 10\n    # Emma's work rate per day\n    emma_rate = 1 / 18\n    # Total time taken\n    total_time = 14\n\n    # let 'd' be the number of days David worked\n    # David worked for 'd' days, Emma worked for 'total_time - d' days\n    # Their combined work should equal 1 (the whole job done)\n    # david_rate * d + emma_rate * (total_time - d) = 1\n\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    equation = Eq(david_rate * d + emma_rate * (total_time - d), 1)\n    d_days = solve(equation, d)\n\n    # Emma worked for the remaining days\n    emma_days = total_time - d_days[0]\n\n    return emma_days\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    money_left = 56\n    t_shirts_total = 145\n\n    cost_per_tshirt = money_left / (t_shirts_total - t_shirts_bought)\n    total_money = cost_per_tshirt * t_shirts_total\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    sum_n_cubed = sum_n ** 2\n    ans = sum_n_cubed / sum_n\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Difference between tallest and shortest student\n    height_range = 132 - 124\n    \n    # Maximum distinct heights possible is height range + 1 (inclusive of both shortest and tallest student heights)\n    distinct_height_range = height_range + 1\n    \n    # If at least 4 students are of the same height,\n    # then applying the Pigeonhole Principle, we need to multiply the distinct possible heights\n    # by 3 and add 1 to guarantee a class size that ensures at least one height has 4 students\n    class_size = (distinct_height_range * 3) + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.5\n    increase_percentage = 12 / 100\n    new_pay_per_hour = old_pay_per_hour + old_pay_per_hour * increase_percentage\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The formula for the average of an even number arithmetic sequence\n    # when the number of terms (n) is even is given by the average of\n    # the middle two numbers. Since the sequence has 14 terms (even),\n    # the average given (119) is the average of the 7th and 8th terms.\n    \n    # We obtain the 7th number (middle first) in the sequence by subtracting\n    # 1 from the average and then finding the even number closest to it, which\n    # is obtained by rounding down to the nearest even number.\n    \n    middle_first = (119 * 2) - 2  # Twice the average minus 2 to reach the 7th term\n\n    # Then, to find the smallest number, we subtract 6 times the difference (2)\n    # since difference between consecutive even numbers is 2.\n    smallest_number = middle_first - 6 * 2\n\n    return smallest_number\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    time_for_one_cut = 12 / 4  # Time to cut one section\n    time_for_five_cuts = time_for_one_cut * 5  # Time for five cuts\n\n    return time_for_five_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126  # in pence\n    # Let's denote the number of each kind of coins as x.\n    # 2p coin contributes 2x pence and 5p coin contributes 5x pence.\n    # Hence, the total amount in pence is given by 2x + 5x = 1.26 pounds which is 126 pence\n    \n    # The total amount contributed by each type is 7x (as we have 2x + 5x)\n    # Therefore, to find the number of each kind of coins, we can divide the total amount by 7\n    \n    x = total_amount // 7  # Using integer division since we cannot have a fraction of a coin\n    \n    # As there are equal number of 2p and 5p coins, the total number of coins is 2x (x coins of each type)\n    total_coins = 2 * x\n    \n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    ones_digit = pow(3, 2009, 10)  # Calculate 3 to the power of 2009 modulo 10 to get the ones digit\n    return ones_digit\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5  # Initialize with the smallest even number that's a multiple of 5\n    while True:\n        if (number ** 0.5).is_integer():  # Check if it's a square number\n            return number\n        # Increment by 10 since every subsequent number must be a multiple of 5 and even\n        number += 10\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n\n    child_price = 30\n    adult_price = child_price / (1 - child_discount)\n\n    senior_price = adult_price * (1 - senior_discount)\n\n    return senior_price\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    books = 20\n    kids = 4\n\n    # We use stars and bars concept here to distribute n identical items to r distinct groups,\n    # which is C(n + r - 1, r - 1)\n    return len(list(combinations_with_replacement(range(books + 1), kids - 1)))\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be x.\n    # The number of adults is (2/5)x.\n    # The remaining number of people is x - (2/5)x = (3/5)x.\n    # The number of boys is (5/9) * (3/5)x = (1/3)x.\n    # The number of girls is the remaining people which is (3/5)x - (1/3)x.\n    # We know the number of girls is 36, so we have the equation:\n    # (3/5)x - (1/3)x = 36\n    # We can solve for x, the total number of people at the party.\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3/5)*x - (1/3)*x, 36)\n    \n    total_people = solve(equation, x)[0]\n    \n    return total_people\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_original = 3\n    days_original = 30\n    men_new = 2\n\n    # The amount of work done by one man in one day is the reciprocal of the total days to build the house\n    work_per_man_per_day = 1 / (men_original * days_original)\n\n    # The total work required to build the house is constant\n    total_work = 1\n\n    # Calculate how many days it takes for 2 people to complete the same work\n    days_new = total_work / (men_new * work_per_man_per_day)\n\n    return days_new\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_age = symbols('will_age')\n\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    solutions = solve(equation, will_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    number_of_terms = (last_term - first_term) // 2 + 1\n    sum_of_series = (first_term + last_term) * number_of_terms // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 0.4 * mike)\n    equation3 = Eq(mike - mason, 550)\n    \n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    \n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n    \n    return total_soup / 1000  # convert ml to litres\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # We need to ensure that each child gets at least two books. \n    # This means we first give out 2 books to each child (5 children * 2 books = 10 books).\n    # Now we're left with 30 - 10 = 20 books to distribute.\n    remaining_books = 30 - 5 * 2\n\n    # We're distributing the remaining 20 books to 5 kids, which is equivalent to\n    # partitioning 20 indistinguishable items into 5 distinguishable bins.\n    # This can be done using the \"stars and bars\" combinatorial method,\n    # which requires calculating combinations of (20 + 5 - 1) choose (5 - 1).\n    ans = comb(remaining_books + 5 - 1, 5 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * (1 + rate) ** time\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    one_direction = 20\n    the_vamps = 17\n    both = 15\n\n    neither = total_girls - (one_direction + the_vamps - both)\n\n    return neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one jug (j) and one cup (c)\n    j, c = symbols('j c')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    max_sum = -float('inf')\n    second_largest_fraction = None\n\n    # Generate all possible permutations of the operations\n    for ops in permutations(operations):\n        # Calculate the sum of the four terms with the given operations\n        term1 = eval(f\"Fraction(1, 2) {ops[0]} Fraction(1, 9)\")\n        term2 = eval(f\"Fraction(1, 3) {ops[1]} Fraction(1, 8)\")\n        term3 = eval(f\"Fraction(1, 4) {ops[2]} Fraction(1, 7)\")\n        term4 = eval(f\"Fraction(1, 5) {ops[3]} Fraction(1, 6)\")\n        current_sum = term1 + term2 + term3 + term4\n\n        # Check if the current sum is the largest we have seen\n        if current_sum > max_sum:\n            max_sum = current_sum\n            # Find the second largest term from the current expression\n            sorted_terms = sorted([term1, term2, term3, term4], reverse=True)\n            second_largest_fraction = sorted_terms[1]\n\n    # Convert the second largest term to its simplest form\n    second_largest_fraction = second_largest_fraction.limit_denominator()\n    A = second_largest_fraction.numerator\n    B = second_largest_fraction.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > 0.505\n\n    sol = solve(inequality, x)\n    # Since x must be an integer and we are looking for the\n    # largest number he could've won, we take the floor of 47.5\n    ans = int(sol[0].evalf()) - 1\n\n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # We assume Susan pays with the least number of the largest possible coins.\n    # In the UK, the available coins are 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).\n\n    bus_fare = 44\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Start from largest to smallest\n\n    # We will keep track of the total coins exchanged, including Susan's payment and driver's change.\n    total_coins_exchanged = 0\n\n    # We pay the fare using the largest coin smaller than the fare, if Susan had it.\n    for coin in coins:\n        if bus_fare >= coin:\n            susan_pays = coin\n            total_coins_exchanged += 1  # Susan pays one coin.\n            change = susan_pays - bus_fare\n            break\n\n    # Now, calculate the change using the smallest number of coins\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            total_coins_exchanged += 1  # One coin is added to the change given back.\n    \n    return total_coins_exchanged\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n    initial_amount = spent + remaining\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_triangles = 0\n\n    for i in range(total_points):\n        for j in range(i + 1, total_points):\n            # Since the points are equally spaced, right angle can only occur when\n            # point i and j are 3 points apart in either direction on the circle.\n            if (j - i) % total_points == 3 or (i - j) % total_points == 3:\n                # For each pair (i, j), there are two possible triangles,\n                # with the third point either between i and j or outside of i and j.\n                right_angle_triangles += 2\n\n    return right_angle_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given values\n    tenth_value = 23\n    fifteenth_value = 38\n    \n    # Positions of the given terms\n    position_tenth = 10\n    position_fifteenth = 15\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_value - tenth_value) / (position_fifteenth - position_tenth)\n    \n    # Calculate the value of the 12th term\n    twelfth_value = tenth_value + (12 - position_tenth) * common_difference\n    \n    return int(twelfth_value)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [1/((n**2 - n + 1) * (n**2 + n)) for n in range(1, 8)]\n    terms.append(1/29)\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_A = 24\n    class_B = 36\n    class_C = 42\n\n    # Calculate the Greatest Common Divisor (GCD) of the three class sizes\n    gcd_ab = gcd(class_A, class_B)\n    gcd_abc = gcd(gcd_ab, class_C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    cost_per_day = 4.36\n    days = 5\n    \n    total_pay = children * cost_per_day * days\n    return total_pay\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    # Let x be the number of correct answers\n    # Each correct answer gives 5 points and each wrong answer reduces 3 points\n    # The total number of questions is 20, so the number of incorrect answers is 20 - x\n    # The total score achieved by Justin is 76 points\n\n    # The equation can be written as:\n    # 5x - 3(20 - x) = 76\n    # Solve for x:\n    \n    total_questions = 20\n    total_points = 76\n    points_correct = 5\n    points_incorrect = -3\n    \n    for x in range(total_questions + 1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n            \nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    result = (3 / 8) * 16\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = Eq(selling_price - cost_price, 120)\n\n    ans = solve(profit, cost_price)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep_fraction = 5/8\n    white_sheep_fraction = 1/4\n\n    black_sheep = total_sheep * black_sheep_fraction\n    white_sheep = total_sheep * white_sheep_fraction\n    brown_sheep = total_sheep - (black_sheep + white_sheep)\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    balls_in_6_boxes = balls_per_box * 6\n    return balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solveset, Abs\n    \n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    \n    solutions = solveset(equation, x)\n    \n    ans = [sol.evalf() for sol in solutions if sol.is_real]\n    return ans\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # Four different colored socks can be arranged in 4! ways\n    arrangements_with_different_colors = factorial(4)\n\n    # Two different colored pairs can be arranged in 2! ways,\n    # and each pair can be arranged in 2! ways themselves\n    arrangements_with_pairs = factorial(2) * factorial(2) * factorial(2)\n\n    # Return the final answers\n    return (arrangements_with_different_colors, arrangements_with_pairs)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 because it's the first digit of a two-digit number\n        for b in range(10):  # 'b' can be any digit from 0 to 9\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "def solution():\n    from math import comb\n    ans = comb(10, 3)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    # Let's denote the number of sweets Beth has before the teacher gave them sweets as 'b'.\n    # According to the problem:\n    # Andre has 'b + 6' sweets initially.\n    # After both received 4 sweets each from the teacher, they now have:\n    # b + 4 sweets for Beth, and (b + 6) + 4 sweets for Andre.\n    # The total number of sweets they have now is 24 + 8 = 32 (since they both received 4 more sweets).\n    # We set up the equation as follows:\n    # b + (b + 6) + 8 = 32\n    # 2b + 14 = 32\n    # 2b = 18\n    # b = 9\n    # Now we find out how many sweets Beth has after receiving additional 4 sweets from the teacher.\n    beth_now = 9 + 4\n    return beth_now\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c')  # t represents the mass of a table, c represents the mass of a chair\n\n    equation1 = Eq(3*t, 4*c)          # The total mass of 3 tables is the same as the total mass of 4 chairs\n    equation2 = Eq(t, c + 2)          # The mass of a table is 2kg heavier than a chair\n\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_men = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = total_men - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial as fact\n\n    ends = 2  # Judy can stand on either end\n    friends = 5  # Number of friends\n    \n    # Ways to arrange friends in the remaining places\n    ways_to_arrange_friends = fact(friends)\n    \n    # Total ways is product of ends and ways to arrange friends\n    total_ways = ends * ways_to_arrange_friends\n    \n    return total_ways\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The solution is strategic; Anthea should aim to leave multiples of 4 apples after her turn\n    # so that no matter what Ben takes (1, 2, or 3), she can always take a number that brings down\n    # the count to the next multiple of 4. She wants to be the one to get to 4 apples,\n    # so she can take all 3 and win.\n\n    # Start with total apples\n    total_apples = 18\n\n    # Anthea's move should be such that the remaining apples are a multiple of 4\n    for anthea_move in range(1, 4):\n        remaining_apples = total_apples - anthea_move\n        # If what's left is not a multiple of 4, Anthea should take that number of apples in her first turn\n        if remaining_apples % 4 != 0:\n            ans = anthea_move\n            return ans\n\n    # If for some reason the loop does not return, it means taking any of 1,2,3 will result in a multiple of 4\n    # which cannot happen in our range so we default to 0 (since no valid move found)\n    return 0\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Andre and Beth \n    # initially have (a and b respectively)\n    a, b = symbols('a b')\n\n    # The equation representing the total sweets they had initially\n    equation1 = Eq(a + b, 24)\n\n    # The equation representing the difference in sweets after \n    # receiving 4 more sweets each\n    equation2 = Eq(a + 4 - (b + 4), 6)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Beth now has b sweets, initially plus 4 more given by the teacher\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    number_when_divided = 2 * 12\n    original_number = number_when_divided + 6\n    return original_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # ES = Elder Sister\n    # YS = Younger Sister\n    # M = Math\n    # E = English\n\n    ES_M, YS_M, YS_E = symbols('ES_M YS_M YS_E')\n\n    # The elder sister spent 10 minutes more on math than the younger sister\n    equation1 = Eq(ES_M, YS_M + 10)\n\n    # The younger sister spent 4 minutes more on English than math\n    equation2 = Eq(YS_E, YS_M + 4)\n\n    # The elder sister spent a total of 88 minutes\n    equation3 = Eq(ES_M + YS_E, 88)\n\n    # The younger sister spent 12 minutes less on her math homework than on her English homework\n    equation4 = Eq(YS_M, YS_E - 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (ES_M, YS_M, YS_E))\n\n    return solutions[YS_E]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The total of the four numbers before removing one\n    total_initial = 4 * 130\n    \n    # The total of the remaining three numbers after removing one\n    total_after_removal = 3 * 110\n    \n    # The number that was removed is the difference between the initial total and the remaining total\n    removed_number = total_initial - total_after_removal\n    \n    return removed_number\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Leo can win if the number of apples left after his turn is a multiple of 3,\n    # since he can always take 1 or 2 apples to force Mia to face another multiple of 3\n    # until they reach to 3 apples, ensuring his victory by taking the last one.\n    # Check whether taking 1 or 2 apples results in a multiple of 3 remaining.\n    for leo_takes in [1, 2]:\n        if (14 - leo_takes) % 3 == 0:\n            return leo_takes\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be x and one gold ring be y.\n    # According to the problem, 12 silver spoons have three quarters the value of 6 gold rings.\n    # We can set up the equation: 12x = (3/4) * 6y\n    # Simplifying the equation: 12x = 4.5y\n    # We want to find out how many silver spoons have the same value as 3 gold rings.\n    # Therefore, we need the equation: nx = 3y, where n is the number of silver spoons.\n    # Dividing the second equation by the first to eliminate y, we get:\n    # (nx) / (12x) = (3y) / (4.5y) which simplifies to n/12 = 3/4.5\n    # Solving for n, we have: n = (3/4.5) * 12 = (2/3) * 12\n    \n    n = (2/3) * 12\n    return int(n)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_students = 0\n    for boys in range(1, 100, 2):  # Starting from 1, increasing by 2 for each layer of boys\n        girls = boys - 1  # Girls form the layer inside the boys, so one less on each side\n        if girls > 0:  # There must be a positive number of girls\n            total_boys = boys**2  # Total boys in the boys layer\n            total_girls = girls**2 if girls > 1 else 0  # Total girls in the girls layer\n            difference = total_boys - total_girls  # Difference between boys and girls\n            if difference == 55:\n                total_students = total_boys + total_girls  # Sum of boys and girls\n                break  # Found the correct layer configuration\n    return total_students\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    first_traffic_light = 1  # Traffic light changes every 1 minute\n    second_traffic_light = 1.5  # Traffic light changes every 1.5 minutes\n    \n    # Convert minutes to seconds\n    first_traffic_light_sec = first_traffic_light * 60\n    second_traffic_light_sec = second_traffic_light * 60\n    \n    # Minimum time for third traffic light in seconds\n    min_third_light_sec = 30\n    \n    # Finding the least common multiple of the first two traffic lights (in seconds)\n    lcm_first_second = lcm(int(first_traffic_light_sec), int(second_traffic_light_sec))\n    \n    # Since the lights should turn green every 9 minutes (540 seconds)\n    # Find the multiples of lcm_first_second starting from 540 seconds\n    lcm_limit = 540  # 9 minutes in seconds\n    \n    # Start with the minimum possible time for the third traffic light\n    third_light = max(min_third_light_sec, lcm_first_second)\n    \n    # Increment the time for the third traffic light until it's a divisor of lcm_limit\n    while lcm_limit % third_light != 0:\n        third_light += 1\n    \n    # Convert seconds back to minutes for the third traffic light\n    third_light_min = third_light / 60.0\n    \n    return third_light_min\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    num_items = 12\n    cost_marker = 3\n    cost_brush = 1\n\n    for num_markers in range(num_items + 1):\n        num_brushes = num_items - num_markers\n        if (num_markers * cost_marker) + (num_brushes * cost_brush) == total_cost:\n            return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    # Let x be the total number of female teachers in Star School\n    # Let f be the total weight of all female teachers\n\n    # Average weight of all teachers = 65\n    # Average weight of male teachers = 75\n    # Average weight of female teachers = 60\n\n    # Total number of male teachers = 3\n    # Total weight of male teachers = 3 * 75\n\n    # Weight of all teachers = (Number of male teachers * Average weight of male teachers) + (Number of female teachers * Average weight of female teachers)\n    # 65 * (3 + x) = 3 * 75 + 60 * x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(65 * (3 + x), 3 * 75 + 60 * x)\n\n    num_female_teachers = solve(equation, x)\n\n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # From Cora's position, we can deduce the total rows and columns\n    total_rows = 5 + 7 - 1  # Cora's position from the front and back, subtract 1 to account for double counting Cora\n    total_columns = 2 + 4 - 1  # Cora's position from the left and right, subtract 1 to account for double counting Cora\n\n    # Total students in the rectangular formation\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt, prod\n\n    # Prime factorization of both numbers\n    factors_33 = [3, 11]\n    factors_55 = [5, 11]\n\n    # Combine the factors\n    combined_factors = factors_33 + factors_55\n\n    # Count each factor's occurrence to determine what's needed for a square\n    factor_counts = {factor:combined_factors.count(factor) for factor in set(combined_factors)}\n\n    # For a number to be a square, all prime factors must occur an even number of times\n    # If a prime factor occurs an odd number of times, we multiply by this prime factor to make it even\n    m_factors = [factor if count % 2 else 1 for factor, count in factor_counts.items()]\n    m = prod(m_factors)\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate has at least 2 pieces of candy, we start with those 2 pieces on each plate.\n    # We then have 8 - 2*3 = 2 candies left to be distributed among the 3 plates.\n    # Now we need to calculate the number of ways to distribute 2 identical items to 3 distinct groups.\n    \n    # This is a problem of distributing 'n' identical items into 'r' distinct groups, which\n    # can be solved using the formula for combinations with repetitions: C(n + r - 1, r - 1).\n    # Here, 'n' will be 2 (remaining candies) and 'r' will be 3 (plates).\n    \n    # Import the required function\n    from math import comb\n    \n    remaining_candies = 2\n    plates = 3\n    # Calculate the number of ways to distribute the remaining candies\n    ways = comb(remaining_candies + plates - 1, plates - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    # Star has fixed position, so we arrange the other four.\n    num_ways = factorial(4)\n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for a in range(10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                for d in range(c+1, 10):\n                    increasing = 1000*a + 100*b + 10*c + d\n                    decreasing = 1000*d + 100*c + 10*b + a\n                    third = 26352 - (increasing + decreasing)\n                    third_digits = sorted([int(x) for x in str(third)])\n                    if third_digits == [a, b, c, d]:\n                        return min(increasing, decreasing, third)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (a ** 2) + (b ** 2) + (2 * a * b)\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # The time to cut one segment\n    time_to_cut_one_segment = 60 / 30\n    \n    # The total time to cut into 50 segments\n    time_to_cut_50_segments = time_to_cut_one_segment * 49\n    \n    return time_to_cut_50_segments\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = symbols('original_number')\n\n    equation = Eq(original_number - 0.3 * original_number, 210)\n\n    solutions = solve(equation, original_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The equations x ≡ 1 (mod 3), x ≡ 3 (mod 5), and x ≡ 5 (mod 7)\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Solve the system of congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the number within the given range (100 to 200)\n    while number < 100:\n        number += 3 * 5 * 7\n\n    return number if 100 <= number <= 200 else None\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy = symbols('candy nancy')\n    # Original count of flowers\n    orig_candy = 11\n    orig_nancy = 9\n    \n    # After giving some flowers to Nancy\n    # Nancy has 8 more flowers than Candy\n    equation = Eq(nancy - candy, 8)\n\n    # Total flowers have not changed\n    total_equation = Eq(candy + nancy, orig_candy + orig_nancy)\n\n    # Solve for how many Candy has now\n    solutions = solve((equation, total_equation), (candy, nancy))\n    \n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")  # Total number of letters in 'ARRANGE'\n    letter_counts = {'A': 2, 'R': 2, 'N': 1, 'G': 1, 'E': 1}  # Each letter count\n\n    # Calculate denominator of permutations formula for repeated letters\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    # Calculate total permutations\n    ans = factorial(total_letters) / denominator\n\n    return int(ans)\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 0.45  # 45% increase\n    \n    new_price = original_price + (original_price * increase_percentage)\n    \n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number // 24 == 36:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_friday = -5\n    midday_saturday = 17\n\n    overall_change = midday_saturday - midnight_friday\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_term = 1\n    difference = 1\n    while current_term <= 50:\n        difference += 1\n        current_term += difference\n    return current_term\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    # People in front of Sibel\n    people_in_front = 10\n    \n    # Sibel's place from the back\n    sibel_place_from_back = 14\n    \n    # Total people = people in front of Sibel + Sibel's place from the back - 1 (Sibel herself is counted in both)\n    total_people = people_in_front + sibel_place_from_back - 1\n    \n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # According to the latest available data prior to my knowledge cutoff in March 2023,\n    # the population of St Petersburg is approximately 5.3 million people.\n    # However, this should be ideally obtained from an updated and reliable data source.\n    # As of my knowledge cutoff, I'm hardcoding the population figure.\n\n    # St Petersburg's population in figures\n    ans = 5300000\n    return ans\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43  # cost of one pen in pence\n    booklet_cost_p = 185  # cost of one booklet in pence, converted from pounds to pence\n    total_pens = 3\n    total_booklets = 4\n    budget_p = 1000  # budget in pence, converted from pounds to pence\n    \n    total_cost = (total_pens * pen_cost_p) + (total_booklets * booklet_cost_p)\n    \n    change_p = budget_p - total_cost\n    change_£ = change_p / 100  # converting the change from pence to pounds\n\n    return change_£\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit numbers\n    for i in range(100, 1000):\n        str_num = str(i)\n        # Check if adjacent digits differ by at least 7\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))  # 10 is arbitrary chosen limit to capture at least first 3 primes\n    third_prime = primes[2]  # Get the third prime in the list\n    return third_prime\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    tilde = symbols('tilde')\n    \n    # Define the equation based on the given mathematical expression\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve the equation\n    solution = solve(equation, tilde)\n\n    # Return the solution (the value of the tilde)\n    return solution[0]\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousands in range(5, 10):\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(1, 10): # 0 cannot be considered as divisor\n                    if hundreds == 0 and tens == 0 and ones == 1: # cannot divide by zero\n                        count += 1\n                    elif hundreds == 0 and tens == 0 and thousands % ones == 0:\n                        count += 1\n                    elif hundreds == 0 and ones == 1 and thousands % tens == 0:\n                        count += 1\n                    elif tens == 0 and ones == 1 and thousands % hundreds == 0:\n                        count += 1\n                    elif (hundreds == 0 and thousands % tens == 0 and thousands % ones == 0) or \\\n                         (tens == 0 and thousands % hundreds == 0 and thousands % ones == 0) or \\\n                         (ones == 1 and thousands % hundreds == 0 and thousands % tens == 0) or \\\n                         (thousands % hundreds == 0 and thousands % tens == 0 and thousands % ones == 0):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    position_difference = abs(4 - 22)\n    half_children = position_difference // 2\n    total_children = half_children * 2\n    return total_children\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Since all digits are wrong in 1258, the correct combination does not contain 1,2,5,8\n    possibilities = [str(i) for i in range(10) if i not in [1, 2, 5, 8]]\n    \n    # We create a dictionary to store the number of times a digit appears in the given attempts\n    # except for the digits in 1258\n    digit_count = {str(i): 0 for i in possibilities}\n    \n    for attempt in ['5648', '3628', '3147', '5629']:\n        for digit in attempt:\n            if digit in digit_count:\n                digit_count[digit] += 1\n    \n    # Since two digits are wrong in each of the attempts, the two digits that appear\n    # three times must be the correct ones, as they appear once in each of the correct spots\n    correct_digits = [k for k, v in digit_count.items() if v == 3]\n\n    # The correct combination must consist of these correct digits plus two digits that are wrong\n    for d1 in correct_digits:\n        for d2 in correct_digits:\n            for d3 in possibilities:\n                for d4 in possibilities:\n                    if d1 != d2 and d1 != d3 and d1 != d4 and d2 != d3 and d2 != d4 and d3 != d4:\n                        combination = d1 + d2 + d3 + d4\n                        if combination[0] == '5' and combination[3] == '8':\n                            if '6' in combination and '4' in combination:\n                                return combination\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n\n    last_term = first_term + (num_weeks - 1) * difference\n    total_coins = (first_term + last_term) * num_weeks // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2  # Gina had twice less dresses than Lily\n    fiona_dresses = gina_dresses // 4  # Gina had 4 times more dresses than Fiona\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = 0\n    amount = principal\n    while amount < final_amount:\n        amount += amount * rate\n        years += 1\n\n    ans = years if amount == final_amount else \"wrong\"\n    return ans\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers in Star School \n    # total weight of male teachers\n    total_weight_male = 3 * 75  \n    # average weight of all teachers\n    avg_weight_all = 65         \n    # average weight of female teachers \n    avg_weight_female = 60      \n\n    # total weight of all teachers is the average weight times the total number of teachers\n    # total_weight_all = avg_weight_all * (3 + x)\n\n    # total weight of female teachers is the average weight times the number of female teachers\n    # total_weight_female = avg_weight_female * x\n\n    # The total weight of all teachers is the sum of the total weight of male and female teachers\n    # total_weight_all = total_weight_male + total_weight_female\n\n    # avg_weight_all * (3 + x) = total_weight_male + avg_weight_female * x\n    # 65 * (3 + x) = 3 * 75 + 60 * x\n    # 195 + 65x = 225 + 60x\n    # 5x = 30\n    # x = 6\n\n    # There are 6 female teachers\n    return 6\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_one_fourth_full = 250\n    mass_three_fourth_full = 350\n    \n    # Mass of Marmite when the jar is half full (which is the difference between three fourths and one fourth)\n    mass_half_full = mass_three_fourth_full - mass_one_fourth_full\n    \n    # Mass of the empty jar (subtract the mass of half of the Marmite from the mass when one fourth full)\n    mass_empty_jar = mass_one_fourth_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marks of A, B, C, D, and E\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Equations based on the problem statement\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, C is 95\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, D is 94\n    equation3 = Eq(E, 96)  # E's mark is 96 and is the second highest\n    equation4 = Eq(B, D)  # B and D have the same score\n    equations = (equation1, equation2, equation3, equation4)\n\n    # All marks are above 91, and A is the highest\n    # Since E got 96 and is the second highest, A must be at least 97\n    solutions = solve(equations, (A, B, C, D))\n    # There will be multiple solutions, but we need to check that\n    # A is the highest and all scores are above 91\n    for solution in solutions:\n        if solution[A] > solution[B] and solution[A] > solution[E] and \\\n           solution[B] > 91 and solution[C] > 91 and solution[D] > 91:\n            return solution[D]\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    # Convert everything to milliliters for easier calculations\n    bucket_soda = 13.15 * 1000  # initial amount of soda in the bucket in milliliters\n    bottle_capacity = 9.1 * 1000  # capacity of the empty bottle in milliliters\n    cup_volume = 350  # volume of each cup in milliliters\n\n    # Calculate the soda used to fill 1/7 of the bottle\n    soda_for_bottle = bottle_capacity / 7\n\n    # Calculate the soda used to fill 4 cups\n    soda_for_cups = 4 * cup_volume\n\n    # Subtract the used soda from the bucket\n    remaining_soda = bucket_soda - soda_for_bottle - soda_for_cups\n\n    # Convert remaining soda back to litres\n    remaining_soda_litres = remaining_soda / 1000\n    \n    return remaining_soda_litres\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father, son = symbols('father son')\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    solutions = solve((equation1, equation2), (father, son))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Since Rose wants to ensure victory, she should aim to leave a multiple of 3 marbles after her first turn.\n    # This forces Kylie to leave a non-multiple of 3 after her turn, allowing Rose to keep the advantage.\n    for marbles_taken in range(1, 3):  # Rose can take either 1 or 2 marbles.\n        marbles_left = 14 - marbles_taken\n        if marbles_left % 3 != 0:\n            return marbles_taken\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -2023**0.5\n    ans = a + b - a*b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    m = 2.0    # mass in kg\n    k = 500.0  # spring constant in N/m\n    A = 8.0 / 100    # amplitude in meters (converted from cm to m)\n    x = 4.0 / 100    # distance from equilibrium in meters (converted from cm to m)\n\n    # Total energy E of the oscillator (mechanical energy in a spring system) is given by (1/2) * k * A^2\n    E = 0.5 * k * A**2\n\n    # The kinetic energy at position x is then the total energy minus the potential energy at x, i.e., KE = E - PE\n    PE_at_x = 0.5 * k * x**2  # Potential energy at position x\n    KE_at_x = E - PE_at_x      # Kinetic energy at position x\n\n    # The speed v of the block can be found by equating the kinetic energy to (1/2) * m * v^2\n    v = sqrt((2 * KE_at_x) / m)\n\n    return (E, v)\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_in_pence = 45 * 100  # converting pounds to pence\n    value_of_each_coin = 5\n    num_coins = total_money_in_pence // value_of_each_coin\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let pip's distance per minute be x and bud's distance be y\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    total_distance = 540  # total distance run by both in 3 minutes\n    time_minutes = 3\n\n    # pip runs 20m more than bud each minute\n    equation1 = Eq(pip_per_minute, bud_per_minute + 20)\n\n    # total distance covered by pip and bud in 3 minutes\n    equation2 = Eq(pip_per_minute * time_minutes + bud_per_minute * time_minutes, total_distance)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip_per_minute, bud_per_minute))\n\n    # Total distance run by pip in 3 minutes\n    pip_distance = solutions[pip_per_minute] * time_minutes\n\n    return pip_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of coins in Box A as 'a' and Box B as 'b'\n    a, b, c = symbols('a b c')\n\n    # From the problem text, we have the following three equations:\n    equation1 = Eq(a, 4 * b)  # Box A contains 4 times coins as Box B\n    equation2 = Eq(c + (0.06 * a) + (0.20 * b), 1220)  # Coins in Box C after the transfer\n    equation3 = Eq(c, (1220 / 1.22))  # Box C is now 22% more than the original\n    \n    # Solving for a, b, c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    ans = int('2A3', 16) + int('17B', 16)\n    return hex(ans)\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2*x + 1), 75)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 300 * 0.40 * 0.30 * 0.25\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n    \n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n    \n    average_price = total_price / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    wheels_tricycle = 3\n    wheels_car = 4\n\n    # Assume all vehicles are tricycles first\n    tricycles = total_vehicles\n    cars = 0\n\n    # Calculate the difference in the number of wheels with the assumption\n    wheel_diff = total_wheels - tricycles * wheels_tricycle\n    \n    # Since each car has one more wheel than a tricycle, count how many cars there should be\n    cars = wheel_diff // (wheels_car - wheels_tricycle)\n    \n    # Adjust the number of tricycles accordingly\n    tricycles -= cars\n\n    return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    min_washing_watermelons = 1\n    min_washing_glasses = 3\n    min_juicer_working = 4\n    min_pouring_juice = 1\n\n    min_total_time = (min_washing_watermelons +\n                      min_washing_glasses +\n                      min_juicer_working +\n                      min_pouring_juice)\n\n    return min_total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    # Lewis' money in pounds\n    lewis_money = 60 / 100  # converting pence to pounds\n    # James' money in pounds\n    james_money = 1.10\n    \n    # Total money they have altogether in pounds\n    total_money = lewis_money + james_money\n    \n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # The initial percentage of coffee is 60%, making tea 40%.\n    # If we assume the total initial number of bottled drinks to be 100 units.\n    initial_total = 100\n    initial_coffee = 0.6 * initial_total  # 60% of the initial total are coffee.\n    initial_tea = 0.4 * initial_total     # 40% of the initial total are tea.\n    \n    # After purchasing more bottles of tea, 40% of the bottled drinks are coffee.\n    # Let's say 'x' is the number of additional bottles of tea.\n    # The new total number of bottled drinks is (initial_total + x).\n    # Since 40% of this new total are coffee, it means the coffee amount hasn't changed.\n    # Coffee is initially 60% of 100 units, so the coffee remains at 60 units.\n    final_coffee = initial_coffee\n    \n    # It's given that the final percentage of coffee is 40%; coffee hasn't changed, it's still 60 units.\n    # Therefore, we can calculate new total amount of drinks:\n    #     60 units = 40% of new total amount\n    # Multiply both sides by 100 and divide by 40 to find the new total:\n    final_total = (final_coffee * 100) / 40\n\n    # Calculate the new number of tea bottles:\n    final_tea = final_total - final_coffee\n\n    # The percentage increase in the number of bottles of tea is:\n    increase_teas = final_tea - initial_tea\n    percentage_increase = (increase_teas / initial_tea) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Considering each stack must have at least 3 books,\n    # we start from 3 and iterate until there are not enough\n    # books left to satisfy the conditions for the remaining stacks.\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - (x1 + x2)\n            # x3 must also satisfy the condition of having at least 3 books.\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Let x be the number of lemonade bottles sold and y be the number of \"1000 Plus\" bottles sold\n    # We know that 4x + 7y = 2012 (income equation)\n    # We are also given that x + y <= 350 (since not all bottles were sold), but to find the minimum y we will assume x + y = 350\n    # We need to find the minimum y, which maximize x while still satisfying both equations\n    # Let's setup the system of equations\n\n    max_x = None # This will store the maximum number of x\n    min_y = None # This will store the minimum number of y\n\n    # We iterate through possible values of y and calculate the corresponding x\n    for y in range(1, 351):\n        x = (2012 - 7*y) / 4\n        if x.is_integer() and x >= 0:\n            if max_x is None or x > max_x:\n                max_x = x\n                min_y = y\n    \n    return min_y\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variable for the number of blue pens to be added\n    blue_pens_added = symbols('blue_pens_added')\n    \n    # Initial number of pens is 96, and the ratio of blue to red is 3:5\n    # Therefore, let blue pens be 3x and red pens be 5x\n    # We have 3x + 5x = 96\n    # Solve for x first\n    x = solve(Eq(3 + 5, 96))[0]\n    \n    # Number of initial blue pens\n    initial_blue = 3 * x\n    \n    # After adding 60 red pens and some blue pens, 40% are blue\n    # Equation: (initial blue pens + blue pens added) / (total pens after adding) = 40%\n    # Solve the equation 0.4 = (initial_blue + blue_pens_added) / (96 + 60 + blue_pens_added)\n    blue_pens_added = solve(Eq((initial_blue + blue_pens_added) / (96 + 60 + blue_pens_added), 0.4))[0]\n\n    return int(blue_pens_added)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n\n    # Possible numbers from 2 to 13 inclusive\n    numbers = list(range(1, 14))\n\n    # All possible combinations of 9 unique numbers from the set\n    possible_combinations = list(combinations(numbers, 9))\n\n    # Factors counting function\n    def count_factors(n):\n        return sum(1 for i in range(1, n+1) if n % i == 0)\n\n    # Iterate over all combinations to find valid ones based on given conditions\n    valid_combinations = []\n    for combo in possible_combinations:\n        factors_counts = [count_factors(num) for num in combo]\n        unique_factors_counts = list(set(factors_counts))\n        \n        # Two students know the number of different factors their number has\n        if len(unique_factors_counts) == 7: # 9 numbers but 2 know their factor counts so 7 unique factor counts\n            two_students_nums = [num for num in combo if factors_counts.count(count_factors(num)) == 1]\n            \n            # Condition check for Alice and May\n            if all(num % 2 == 1 for num in two_students_nums): # Both Alice and May have odd numbers\n                for alice_num in two_students_nums:\n                    may_num = alice_num - 2\n\n                    # Check if May's number is in the list and 1 greater than Mark's\n                    if may_num in combo and (may_num - 1) in combo:\n                        # If all conditions are met, add to the valid combinations\n                        valid_combinations.append(combo)\n\n    # Compute products of numbers not picked\n    products = []\n    for valid_combo in valid_combinations:\n        remaining_numbers = [num for num in numbers if num not in valid_combo]\n        product = 1\n        for num in remaining_numbers:\n            product *= num\n        products.append(product)\n    \n    # Since the result should be unique, we check if all products are the same\n    if len(set(products)) == 1:\n        ans = products[0]\n    else:\n        ans = None  # In case there is no unique solution\n\n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n\n    acceleration = final_velocity / time  # final_velocity = initial_velocity + acceleration*time\n    force = mass * acceleration  # Force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Find the largest number that cannot be represented\n    # as the sum of 3 and 7, which is the Frobenius number\n    # for two numbers a, b where the greatest common divisor gcd(a, b) = 1, it is (a*b) - a - b\n    \n    a = 3\n    b = 7\n    ans = (a * b) - a - b\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    \n    # Equation based on the points scored for correct and incorrect answers\n    equation1 = Eq(5 * correct - 2 * incorrect, 151)\n    # Equation based on the relationship between the correct and incorrect answers\n    equation2 = Eq(correct, 3 * incorrect + 12)\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, sum them, then convert back to base 7\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    total_sum = num1 + num2\n\n    # Convert back to base 7\n    if total_sum == 0:\n        return '0'\n    ans = ''\n    while total_sum > 0:\n        ans = str(total_sum % 7) + ans\n        total_sum //= 7\n\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Total matches = sum of matches played by each student / 2\n    # This is because each match involves 2 students.\n    total_matches_by_students = 4 + 6 + 2 + 1 + 3 + 5\n    total_students = 7\n    # Subtract 1 student (F) matches from total_students\n    matches_involving_F = (total_matches_by_students // (total_students - 1)) * 2\n    # Total matches involving F\n    ans = matches_involving_F - (total_matches_by_students - matches_involving_F)\n    return ans\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for i in range(21, 20*19):  # Since 20 and 19 are the largest consecutive numbers\n        divisors = [j for j in range(1, 21) if i % j == 0]\n        if len(divisors) == 18:\n            missing = set(range(1, 21)) - set(divisors)\n            if max(missing) - min(missing) == 1:\n                return sum(missing)\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    # For numbers that give the same quotient and remainder when divided by 15,\n    # the number must be of the form 15n + n, where n is the shared quotient and remainder.\n    # The smallest such number is when n = 1, which is 15*1 + 1 = 16.\n    # Continue finding such numbers until they are greater than 160.\n    n = 1\n    number = 15 * n + n\n    while number <= 160:\n        n += 1\n        number = 15 * n + n\n    \n    # Now that `number` is greater than 160, keep adding all such numbers to `ans`\n    while number < 15**2:  # Cap at 15 squared, since 15n + n will be divisible by 15^2\n        ans += number\n        n += 1\n        number = 15 * n + n\n\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    linda_current_age, cici_current_age = symbols('linda_current_age cici_current_age')\n    \n    equation1 = Eq(cici_current_age, linda_current_age - 11)\n    equation2 = Eq(linda_current_age + 4 + cici_current_age + 4, 37)\n    \n    solutions = solve((equation1, equation2), (linda_current_age, cici_current_age))\n    \n    linda_age_3_years_later = solutions[linda_current_age] + 3\n    \n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Set up the variables for the ratio\n    ratio_Jamie = 5\n    ratio_Natasha = 3\n    difference = 18\n\n    # The difference of 18 stamps corresponds to the difference in their ratios, which is 2 parts (5 - 3 = 2 parts)\n    # So, 1 part corresponds to 18 / 2 = 9 stamps\n    one_part = difference // (ratio_Jamie - ratio_Natasha)\n\n    # Now calculate the total stamps for each\n    stamps_Jamie = one_part * ratio_Jamie\n    stamps_Natasha = one_part * ratio_Natasha\n\n    # The total number of stamps is the sum of Jamie-Anne's and Natasha's stamps\n    total_stamps = stamps_Jamie + stamps_Natasha\n\n    return total_stamps\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n\n    least_sum = first_number_min + second_number_min\n\n    return least_sum\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    total_entrances = 5\n    people = 4  # Tina, Joe, Mike, and Black\n\n    # Each person can choose from any of the 5 entrances, so for each person\n    # there are 5 possibilities.\n    total_ways = total_entrances ** people\n\n    return total_ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples = 226\n    pears = 352\n    oranges = 157\n\n    apples_distributed = (apples - 10)\n    pears_distributed = (pears - 28)\n    oranges_distributed = (oranges - 13)\n    \n    g = gcd(apples_distributed, gcd(pears_distributed, oranges_distributed))\n\n    return g\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand either at the first place or the last, so there are 2 choices for Judy.\n    judy_positions = 2\n\n    # The remaining friends can stand in any order, which is a permutation of 5 people.\n    friends_permutations = factorial(5)\n\n    # Total number of ways is the product of the two.\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    given_number = 6\n    lcm = 12\n    other_number = lcm // given_number * 2  # Multiply by 2 because the common factors include 2.\n    return other_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    number_string = ''\n    number = 1\n    while len(number_string) < 200:\n        number_string += str(number)\n        number += 1\n    ans = int(number_string[199])  # Indexing starts from 0, so 200th digit is at index 199\n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    \n    # Equation for the final profit after 20% discount\n    equation = Eq(cost + 40 - 0.20 * (cost + 40), cost + 12)\n    \n    # Solve the equation for cost\n    solved_cost = solve(equation, cost)\n\n    return solved_cost[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let x be the number of qualified products\n    # Let y be the number of unqualified products\n    # The total number of products over four days is 4 * 500\n\n    # Points from qualified products: 5 * x\n    # Points lost from unqualified products: 18 * y (points lost, hence negative)\n    # The total points is the sum of points from qualified and unqualified:\n    # 5 * x - 18 * y = 9931\n    # The total number of products is x + y = 4 * 500\n\n    # We have two equations:\n    # x + y = 2000    (1)\n    # 5x - 18y = 9931 (2)\n\n    # Solve equation (1) for y: y = 2000 - x\n\n    # Substitute y in equation (2):\n    # 5x - 18(2000 - x) = 9931\n    # 5x - 36000 + 18x = 9931\n    # 23x = 9931 + 36000\n    # x = (9931 + 36000) / 23\n\n    x = (9931 + 36000) // 23\n    return x\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300\n    speed_uphill = 10\n    time_uphill = distance_uphill / speed_uphill\n    \n    distance_downhill = 300\n    speed_downhill = 30\n    time_downhill = distance_downhill / speed_downhill\n    \n    total_time = time_uphill + time_downhill\n    total_distance = distance_uphill + distance_downhill\n    \n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of roosters as 'r' and the number of hens as 'h'.\n    r, h = symbols('r h')\n\n    # According to the first condition, we have the equation h = 6r.\n    # According to the second condition, after increasing the number by 60 each, we have h + 60 = 4 * (r + 60).\n\n    # Setting up the equations based on the conditions given\n    equation1 = Eq(h, 6 * r)\n    equation2 = Eq(h + 60, 4 * (r + 60))\n\n    # We solve the simultaneous equations to find the values of 'r' and 'h'\n    solutions = solve((equation1, equation2), (r, h))\n\n    # The total number of chickens before the increase is the sum of the number of roosters and hens.\n    total_chickens_before = solutions[r] + solutions[h]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    initial_mean = 12\n    final_mean = 11\n    num_values_initial = 7\n    \n    total_initial = initial_mean * num_values_initial\n    num_values_final = num_values_initial + 1\n    total_final = final_mean * num_values_final\n    \n    eighth_number = total_final - total_initial\n    \n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of numbers from 1 to 8\n    sum_1_to_8 = sum(range(1, 9))\n    \n    # Calculate the sum of numbers from 7 down to 1\n    sum_7_to_1 = sum(range(7, 0, -1))\n \n    # Calculate the sum of the last two numbers (1 and 2)\n    sum_last_two = 1 + 2\n\n    # The total sum is the sum of the three parts calculated\n    total_sum = sum_1_to_8 + sum_7_to_1 + sum_last_two\n    \n    return total_sum\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let the speed of April be 'a' meters per minute and Baye be 'b' meters per minute.\n    # Let 't' be the time it takes for April to reach Q the first time.\n    # Then the distance covered by April at speed 'a' in time 't' is a*t = 1800.\n    # Therefore, t = 1800/a.\n    # In the same time 't', Baye covers a distance of b*t meters.\n    # After reaching Q, April turns back running at 4*a meters per minute.\n    # Let 't2' be the time it takes April to meet Baye after turning back.\n    # In time 't2', April covers a distance of 4*a*t2 meters, and Baye covers b*t2 meters.\n    # They met 800 meters from Q, which means Baye is 1800 - 800 = 1000 meters from P.\n    # So, b*t + b*t2 = 1000.\n    # Also, since April runs 4 times faster, the distance April covers to meet Baye is four times the distance Baye covers,\n    # which means 4*a*t2 = b*t2.\n    # By simplifying, we get a:t = 1:4, or b = 4*a.\n    # Now we can use the equation b*t + b*t2 = 1000, substitute b = 4*a to find t2.\n    # 4*a*t + 4*a*t2 = 1000.\n    # Since a*t = 1800, we have 4*1800 + 4*a*t2 = 1000.\n    # Solving for t2, we get a*t2 = (1000 - 4*1800)/4.\n    # a*t2 represents the distance Baye covers after April turns back, which we will deduct from 1800 to find how far Baye is from Q.\n\n    # Total distance covered by Baye before meeting April and after she turns back is 1000 meters.\n    # Since April meets Baye while running 4 times her initial speed, Baye covers another 1/4 of that distance while April covers the full distance to meet her.\n    distance_baye_covers_after_meeting = (1000 - 4 * 800) / 4\n\n    # Now, to find how far Baye is from Q when April arrives back at P,\n    # we subtract the distance Baye covers after meeting from the remaining distance to Q (800m):\n    baye_distance_from_q = 800 - distance_baye_covers_after_meeting\n\n    return baye_distance_from_q\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    digit_sequence = \"538462\"\n    digit_position = 2021\n    repeating_cycle = len(digit_sequence)\n\n    index_in_sequence = (digit_position - 1) % repeating_cycle\n\n    return int(digit_sequence[index_in_sequence])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for number in range(1, 101):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    book_cost = (1/3) * initial_money\n    bag_cost = (2/5) * initial_money\n    total_cost = book_cost + bag_cost\n\n    equation = Eq(total_cost, 132)\n\n    solved = solve(equation, initial_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = ((1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)) - ((1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34))\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')  # Representing the mass of parcels A, B, and C\n\n    equation1 = Eq(a, 5 * b)  # Parcel A is 5 times the mass of parcel B\n    equation2 = Eq(c, b - 75)  # Parcel C is 75g less than the mass of parcel B\n    equation3 = Eq(a + b + c, 835)  # The total mass of the parcels is 835g\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    max_other_beads = 5 + 6  # Maximum number of blue and white beads\n    must_pick_to_get_5_green = max_other_beads + 5  # Must pick all other beads plus 5 green\n    return must_pick_to_get_5_green\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_both = 105 // (5*7)\n\n    divisible_by_5_or_7 = divisible_by_5 + divisible_by_7 - divisible_by_both\n    \n    return divisible_by_5_or_7\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    pages = 215\n    digits = 0\n\n    # Count the number of digits from 1 to 9\n    digits += 9\n    \n    # Count the number of digits from 10 to 99\n    digits += (99 - 10 + 1) * 2\n    \n    # Count the number of digits from 100 to 215\n    digits += (pages - 100 + 1) * 3\n    \n    return digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(f'1{num}') * 3 == int(f'{num}1'):\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    digits = 0\n    for page_number in range(1, 82):\n        digits += len(str(page_number))\n    return digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # First floor to fourth floor is 3 intervals.\n    intervals_first_to_fourth = 3\n    \n    # Eighth floor involves 7 intervals (1 to 2, 2 to 3, ..., 7 to 8).\n    intervals_first_to_eighth = 7\n    \n    # Calculate the time it takes to walk one interval.\n    time_per_interval = 12 / intervals_first_to_fourth\n    \n    # Calculate the time it takes to walk from the first to the eighth floor.\n    time_first_to_eighth = time_per_interval * intervals_first_to_eighth\n    \n    return time_first_to_eighth\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    # Since the baskets are identical, we only need to consider the number\n    # of apples in each basket and make sure that they are sorted to avoid\n    # counting the same distribution more than once.\n    for i in range(7):\n        for j in range(i, 7):\n            k = 6 - i - j\n            if k >= j:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initially, the ratio of birds to squirrels is 8:5\n    ratio_birds = 8\n    ratio_squirrels = 5\n    \n    # Let the total initial count be k. So, initially, there are 8k birds and 5k squirrels.\n    # Let total number of birds and squirrels is constant and equal to total_count\n    total_count = ratio_birds + ratio_squirrels  # k is a common multiplier\n    \n    # After one year, the number of squirrels increases by 20%\n    squirrels_after = ratio_squirrels * 1.2  # 20 percent increase\n    \n    # The total number still equals the total_count (8k + 5k)\n    # So birds_now = total_count - squirrels_after\n    birds_now = total_count - squirrels_after\n    \n    # Birds fled percentage = [(initial_birds - birds_now) / initial_birds] * 100\n    birds_fled_percentage = ((ratio_birds - birds_now) / ratio_birds) * 100\n    \n    return birds_fled_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    months = 5  # March to July, inclusive\n    total_pizzas = average_pizzas_per_month * months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's strawberry count\n    fiona, gary, harold = symbols('fiona gary harold')\n    \n    # Given equations\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n    \n    # Return the number of strawberries Fiona picked\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # This is an arithmetic sequence where a_n = a_1 + (n-1)d\n    # Here, a_n = 70 (pages on the last day), a_1 = 30 (pages on the first day), d = 4 (difference in pages)\n    # We need to find n (the number of days)\n\n    days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return a * (b % 10) - (a // 10)\n\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3\n    volume_consumed = 9\n    container_volume = 5\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - volume_consumed\n\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2  # Sum of the first n natural numbers formula\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # A has to be less than 10 to make 9/A less than 1\n        if (5/9) < (9/A):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols\n    D, A, R, T, C = symbols('D A R T C', integer=True)\n    \n    # Define the equations according to the problem statement\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n    \n    # Define the distinct values constraint and None of the letters can be 0\n    constraints = (A > 0, R > 0, T > 0, C > 0, D > 0,\n                   Ne(A, R), Ne(A, T), Ne(A, C), Ne(A, D),\n                   Ne(R, T), Ne(R, C), Ne(R, D),\n                   Ne(T, C), Ne(T, D),\n                   Ne(C, D))\n    \n    # Solve the equations with the constraints\n    solutions = solve((equation1, equation2, equation3) + constraints)\n\n    # Calculate the largest possible value of A + R + T\n    max_value = max(solution[A] + solution[R] + solution[T] for solution in solutions)\n\n    return max_value\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    total_students = 39\n    \n    equation1 = Eq(boys + girls, total_students)\n    equation2 = Eq(boys / 4, 2 * girls / 5)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    more_boys = solutions[boys] - solutions[girls]\n    \n    return more_boys\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    tanya_position = 3 + 1  # Adding Tanya herself to the members on the left\n    total_members = tanya_position + 5  # Adding members on the right of Tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primefactors\n    \n    num = 87878\n    factors = primefactors(num)\n    largest_prime_factor = max(f for f in factors if f < 10000)\n    \n    return largest_prime_factor\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # calculate the time for each segment\n    time1 = 280 / 7\n    time2 = 400 / 5\n    time3 = (800 - 280 - 400) / 8\n    \n    # total time is the sum of times for all segments\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    max_load = 12\n    total_crates = 24\n\n    crates_per_van = max_load // crate_weight\n    vans_needed = total_crates // crates_per_van\n    if total_crates % crates_per_van != 0:\n        vans_needed += 1\n    \n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Daniel and Patrick have initially\n    daniel_initial, patrick_initial = symbols('daniel_initial patrick_initial')\n\n    # Since Daniel and Patrick had an equal number of stickers initially\n    equation1 = Eq(daniel_initial, patrick_initial)\n\n    # Daniel gives away 24 stickers\n    daniel_final = daniel_initial - 24\n\n    # Patrick buys another 10 stickers\n    patrick_final = patrick_initial + 10\n\n    # In the end, Patrick has twice as many stickers as Daniel\n    equation2 = Eq(patrick_final, 2 * daniel_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel_initial, patrick_initial))\n\n    # Return the number of stickers Daniel had at first\n    return solutions[daniel_initial]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    # Recursive function to count partitions\n    def count_partitions(n, m):\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if m == 0:\n            return 0\n        return count_partitions(n-m, m) + count_partitions(n, m-1)\n\n    # For number 5, the largest number it can be split into is 5 itself\n    ans = count_partitions(5, 5)\n    return ans\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to each of the other friends\n    cards_sent_by_each = friends - 1\n    # Total cards sent is then the number of friends multiplied by the cards each friend sends\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth_below_sea_level = -82\n    plane_height_above_sea_level = 569\n\n    vertical_distance = plane_height_above_sea_level - whale_depth_below_sea_level\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    left_handed = total_pupils - right_handed\n    minimum_right_handed_girls = max(0, total_girls - left_handed)\n    \n    return minimum_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    return abs(123456789 - 987654321)\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruit = symbols('total_fruit')\n\n    apples = (2/3) * total_fruit\n    bananas = (1/9) * total_fruit\n    lemons = total_fruit - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n    solutions = solve(equation, total_fruit)\n\n    lemons_number = lemons.subs(total_fruit, solutions[0])\n\n    return int(lemons_number)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    # Number of skirts a worker makes each day\n    skirts_per_worker_per_day = 6\n    \n    # Number of workers increases by 1 each day starting with 1 worker on day 1\n    total_skirts = 0\n    for day in range(1, 10): # From day 1 to day 9\n        workers = day  # Number of workers on that day\n        total_skirts += workers * skirts_per_worker_per_day\n    \n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    multiplication_result = 2340\n    scaling_factor = 1000 / 10\n    ans = multiplication_result * scaling_factor\n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Total taps\n    total_taps = 5\n    # Total time to fill 1 liter jug by all taps\n    total_time = 2 # minutes\n    # Volume of the jug\n    jug_volume = 1 # liter\n\n    # Calculate the rate per tap\n    rate_per_tap = jug_volume / (total_taps * total_time) # liter per minute\n\n    # Convert 500 ml to liters\n    desired_volume = 500 / 1000 # 0.5 liter\n\n    # Calculate the time for one tap to fill 500 ml jug\n    time_for_one_tap = desired_volume / rate_per_tap\n\n    return time_for_one_tap\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    brothers_erasers = (total_erasers - difference) // 2\n\n    return brothers_erasers\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a = symbols('a')\n    equation = Eq(a*a + a + a, 399)\n    solutions = solve(equation, a)\n    \n    for solution in solutions:\n        if solution > 0 and solution.is_integer:\n            return solution\n            \nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20  # The difference in height between Ben and Sally in cm\n    sally_height = ben_height + difference  # Calculate Sally's height\n    return sally_height\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    digits.sort(reverse=True)\n    \n    # The greatest sum is formed when the largest digits are in the hundreds and tens place\n    first_number = digits[0]*100 + digits[2]*10 + digits[4]\n    second_number = digits[1]*100 + digits[3]*10 + digits[5]\n    \n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # 2 litres is 2000 millilitres\n    volume_drank_ml = 350\n    volume_left_ml = total_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    total_amount = 3280\n    percentage = 40\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    sequence = [1, 8, 16, 23, 46, 53]\n    # Considering alternate sequence rule, looking at the sequence, the pattern seems to be:\n    # Add 7 to the first number to get the second, double the second to get the third, \n    # and repeat (add 7, then double).\n    \n    # The next step in the sequence should be to add 7 to the last element (53).\n    next_element = sequence[-1] + 7\n    \n    return next_element\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of water A can fill be a tons,\n    # the amount of water B can fill be b tons,\n    # the amount of water C can fill be c tons,\n    # and the total capacity of the pool be t tons.\n    a, b, c, t = symbols('a b c t')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(a + c, t)  # A and C fill the pool, 18 tons from A\n    equation2 = a, 18\n\n    equation3 = Eq(b + c, t)  # B and C fill the pool, 27 tons from B\n    equation4 = b, 27\n    \n    # Given that B's flow rate is twice that of A, which means b = 2a.\n    equation5 = Eq(b, 2*a)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation3, equation5), (a, b, c, t))\n\n    # return the total capacity t of the pool\n    return solutions[t]\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's denote the daily grass growth as G.\n    # H is the amount of grass a horse eats per day.\n    # S is the amount of grass a sheep eats per day.\n\n    # From the problem, we know that:\n    # 20H * 12 = G (The total amount of grass growing)\n    # 60S * 24 = G (The same amount of grass growing)\n    # H = 4S (The amount of grass a horse eats is equal to that 4 sheep eat)\n\n    # Firstly, we find the relation between G and H.\n    # 20H * 12 = 60S * 24\n    # Dividing both sides by H we get:\n    # 20 * 12 = 60 * 24 * (S/H)\n    # Replacing S/H by 1/4 (from H = 4S):\n    # 20 * 12 = 60 * 24 * (1/4)\n    # Simplifying we find that G = 20H * 12\n\n    # Now, we have 12 horses and 88 sheep eating the grass.\n    # 12H + 88S = G / X where X is the number of days to eat all grass.\n\n    # Replace H by 4S and also G by 20H * 12 we get:\n    # 12 * 4S + 88S = (20 * 4S * 12) / X\n    # Simplify this equation to find X:\n    # (12 * 4 + 88)S = (20 * 4 * 12)S / X\n    # X = (20 * 4 * 12) / (12 * 4 + 88)\n    # Calculate X:\n\n    X = (20 * 4 * 12) / (12 * 4 + 88)\n    return X\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    payment_per_match = 500\n    payment_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_match = 2\n\n    total_earnings = (payment_per_match * number_of_matches) + (payment_per_goal * average_goals_per_match * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    # Let the total number of visitors be x\n    children = (3/5) * x\n    remaining = x - children\n    men = (1/2) * remaining\n    # We are given that there were 140 more children than men\n    equation = children - men - 140\n    # Solve for x\n    x = symbols('x')\n    total_visitors = solve(equation, x)\n    return total_visitors[0]\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # leading zeros are not allowed in numbers\n            continue\n        MATH = M * 1000 + A * 100 + T * 10 + H\n        HTAM = H * 1000 + T * 100 + A * 10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start_value = 1\n    end_count = 10\n\n    current_value = start_value\n    sum_result = 0\n    \n    for i in range(end_count):\n        sum_result += current_value\n        current_value += 2\n    \n    return sum_result\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for number in product('0123456789', repeat=3):\n        if number[0] != '0' and number.count('7') >= 2:\n            count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # 3 seats can be chosen in 4C1 ways because Mr. Spencer needs to sit between his 2 children.\n    seats_for_family = 4\n\n    # Mr. Spencer and his 2 children can be arranged in 2! ways because Mr. Spencer has to sit in the middle.\n    family_arrangements = factorial(2)\n\n    # The remaining 3 people can be arranged in the remaining 3 seats in 3! ways.\n    other_arrangements = factorial(3)\n\n    # Total arrangements = ways to choose seats for family * arrangements of family * arrangements of other people\n    total_arrangements = seats_for_family * family_arrangements * other_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    # Bill eats half of the sweets\n    sweets_after_eating = total_sweets / 2\n    # Bill gives away a third of the remaining sweets\n    sweets_after_giving_away = sweets_after_eating - (sweets_after_eating / 3)\n\n    return int(sweets_after_giving_away)\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    from math import gcd\n    smallest_sum = float('inf')\n    for B in range(1, 25):\n        if 24 % B == 0 and 52 % B == 0:\n            A = 24 // B\n            C = 52 // B\n            smallest_sum = min(smallest_sum, A + C)\n    return smallest_sum\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    marks_for_correct = 5\n    marks_deducted_for_wrong = -2\n    total_questions = 6\n    correct_answers = symbols('correct_answers')\n\n    # Total marks = (number of correctly answered questions * marks per correct answer) +\n    #               (number of wrongly answered questions * marks deducted per wrong answer)\n    # Since the total number of questions is 6, the number of wrongly answered questions\n    # will be (total_questions - correct_answers). We set up the equation as below:\n    equation = Eq(correct_answers * marks_for_correct + \n                  (total_questions - correct_answers) * marks_deducted_for_wrong,\n                  total_marks)\n\n    # We solve for the number of correct answers\n    solutions = solve(equation, correct_answers)\n\n    # We need to filter out the negative and non-integer solutions,\n    # because you can't answer a negative or fractional number of questions.\n    for sol in solutions:\n        if sol.is_integer and sol >= 0 and sol <= total_questions:\n            return sol\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n\n    time_taken = distance / speed  # time = distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(number / 3 + 7, 18)\n    \n    original_number = solve(equation, number)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes, and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 pieces of $2 and $5 notes at first.\n    equation1 = Eq(x + y, 55)\n\n    # She spent 1/3 of the number of $2 notes and received another 8 pieces of $5 notes from her father.\n    equation2 = Eq(y + 8, (3 / 7) * (x - x / 3 + y + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate total money Cindy had at first\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n\n    original_days = 6\n    increased_production = 24\n    reduced_days = original_days - 2\n\n    original_plan = Eq(scarfs_per_day * original_days, total_scarfs)\n    increased_plan = Eq((scarfs_per_day + increased_production) * reduced_days, total_scarfs)\n\n    solutions = solve((original_plan, increased_plan), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the total number of sweets, 'n' be the number of students\n    s, n = symbols('s n')\n    \n    # If Mr. Lim gives 6 sweets to each student, he is short of 26 sweets, so we have the equation:\n    # 6n = s + 26\n    # If he gives 5 sweets to each, he is short of 5 sweets, so we have another equation:\n    # 5n = s + 5\n    \n    equation1 = Eq(6*n, s + 26)\n    equation2 = Eq(5*n, s + 5)\n    \n    # Solve the system of equations for 's' and 'n'\n    solutions = solve((equation1, equation2), (s, n))\n    \n    # Return the total number of sweets 's'\n    return solutions[s]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    initial_ratio = Eq(boys/girls, 5/3)\n    final_ratio_after_boys_leave = Eq((boys - 15)/girls, 5/6)\n    \n    solutions = solve((initial_ratio, final_ratio_after_boys_leave), (boys, girls))\n    \n    total_pupils_initially = solutions[boys] + solutions[girls]\n\n    return total_pupils_initially\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(1, 15):\n            for x3 in range(1, 15):\n                if x1 + x2 + x3 == 15 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Dividing by the number of permutations for each set\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15+1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675\n    factors = factorint(675)\n\n    # To make the product a perfect square, each prime factor must have an even power.\n    # We multiply B by the factors raised to the power to make them even if they are not.\n    B = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n    \n    # Treat A, B, C as a single person (ABC) and E, F as another single person (EF).\n    # We have now 6 \"people\" to arrange: D, G, H, ABC, EF and the remaining one.\n\n    # Calculate the permutations for these 6 \"people\".\n    permutations_6_people = factorial(6)\n\n    # A, B, and C can be arranged in 3! different ways because they want to stand all together.\n    permutations_ABC = factorial(3)\n\n    # E and F can be arranged in 2! ways since they want to stand next to each other.\n    permutations_EF = factorial(2)\n\n    # Multiply them all together to get the total number of different ways.\n    total_permutations = permutations_6_people * permutations_ABC * permutations_EF\n\n    return total_permutations\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    # Calculate the original price before the sale\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    shelby_age_5_years_ago = shelby_current_age - 5\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    josh_current_age = josh_age_5_years_ago + 5\n    \n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695\n    single_can_cost_pence = 65\n    individual_cans_cost = single_can_cost_pence * 12\n    savings = individual_cans_cost - multipack_cost_pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n\n    # Count the numbers in the range 3267-3999:\n    for thousand_digit in [3]:\n        for hundred_digit in [2, 4, 5, 6]:\n            for ten_digit in [1, 2, 3, 4, 5, 6]:\n                for unit_digit in [1, 2, 3, 4, 5, 6]:\n                    if len({thousand_digit, hundred_digit, ten_digit, unit_digit}) == 4:\n                        number = (thousand_digit * 1000 +\n                                  hundred_digit * 100 +\n                                  ten_digit * 10 +\n                                  unit_digit)\n                        if 3267 <= number <= 3999:\n                            total_count += 1\n\n    # Count the numbers in the range 4000-4999:\n    for thousand_digit in [4]:\n        for hundred_digit in [1, 2, 3, 5, 6]:\n            for ten_digit in [1, 2, 3, 4, 5, 6]:\n                for unit_digit in [1, 2, 3, 4, 5, 6]:\n                    if len({thousand_digit, hundred_digit, ten_digit, unit_digit}) == 4:\n                        number = (thousand_digit * 1000 +\n                                  hundred_digit * 100 +\n                                  ten_digit * 10 +\n                                  unit_digit)\n                        if 4000 <= number <= 4999:\n                            total_count += 1\n\n    # Count the numbers in the range 5000-5120:\n    for thousand_digit in [5]:\n        for hundred_digit in [1, 2, 3, 4, 6]:\n            for ten_digit in [1, 2, 3, 4, 5, 6]:\n                for unit_digit in [1, 2, 3, 4, 5, 6]:\n                    if len({thousand_digit, hundred_digit, ten_digit, unit_digit}) == 4:\n                        number = (thousand_digit * 1000 +\n                                  hundred_digit * 100 +\n                                  ten_digit * 10 +\n                                  unit_digit)\n                        if 5000 <= number <= 5120:\n                            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    amount = 21.40\n    quarter_amount = amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the problem description\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # 1/alan_rate + 1/bob_rate = 1/combined_rate\n    combined_rate = 1/4\n    bob_rate = 1/6\n    \n    alan_rate = 1/combined_rate - bob_rate\n    alan_time = 1/alan_rate\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    # Compound Interest formula: A = P(1 + r/n)^(nt) where n is the number of times interest is compounded per year\n    # Here, interest is compounded yearly, so n=1\n    account_balance = principal * (1 + rate)**time\n\n    return account_balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    # Adding all of them up, we get:\n    # 2(A + B + C) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    total_weight = total_double / 2  # Since we counted twice the sum of their weights.\n    \n    return total_weight\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10000 + 24\n    number2 = 3000 + 968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    num_weeks = 26\n    total_food = weekly_food * num_weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Pinkie's original score\n    original_score = symbols('original_score')\n\n    # Write the equation based on the problem statement\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    # Solve the equation\n    solution = solve(equation, original_score)\n\n    # Get the original score\n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    votes_for_others = 22 + 27\n\n    # To win without fail, Peter must get one more vote than half of the total votes\n    # after discounting the votes already for the others\n    required_votes = (total_votes - votes_for_others) // 2 + 1\n\n    # How many more votes Peter needs\n    additional_votes_needed = required_votes - votes_for_peter\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n\n    # Alex and Nicholas have the same amount of money at first\n    equation1 = Eq(alex, nicholas)\n    # Nicholas spent $13 on a book; Alex spent $58 on a toy\n    # The amount of money Nicholas had left was 6 times that of Alex's\n    equation2 = Eq(nicholas - 13, 6 * (alex - 58))\n\n    # Using sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    # The total amount they had at first is twice what one had since they had the same amount\n    total_amount = 2 * solutions[alex]\n\n    return total_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    initial_value = 250\n    subtraction_sequence = [6]*6 + [8]*6\n    ans = initial_value - sum(subtraction_sequence)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_passed = 28\n    day_of_week_today = 1  # Monday is represented as 1\n    days_in_week = 7\n\n    day_of_week_future = (day_of_week_today + days_passed % days_in_week) % days_in_week\n    if day_of_week_future == 0:\n        day_of_week_future = 7\n\n    # Mapping days of the week to the format provided (Sunday -> 0007)\n    day_code = '{:04d}'.format(day_of_week_future)\n\n    return day_code\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    \n    return used_flour\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    return 6 * 0.001\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length - interval) // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let the number of rulers be x. Then the number of pencils is x + difference.\n    # The sum of pencils and rulers is total_items:\n    # x + (x + difference) = total_items\n    # Solving for x gives us the number of rulers.\n    x = (total_items - difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]  # Given numbers without x\n    total_sum = 11 * 5  # Sum of all numbers (mean * number of terms)\n    sum_without_x = sum(numbers)  # Sum of given numbers without x\n    x = total_sum - sum_without_x  # x is the remaining number to reach the total sum\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    high_seven_value = 7 * 1000  # Value of the 7 in the thousands place\n    low_seven_value = 7 * 10     # Value of the 7 in the tens place\n    difference = high_seven_value - low_seven_value\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Taking out 3 marbles of each color ensures that none of the colors have 4 marbles.\n    # Red: 3, Yellow: 3, Blue: 3\n    # Next marble taken out must be the 4th one of any color.\n    marbles_taken = 3 * 3 + 1\n    return marbles_taken\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_boys = 200\n    total_ratio = boys_ratio + girls_ratio\n    girls = (total_boys * girls_ratio) // boys_ratio\n    return girls\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = str(1/3)[2:]  # Get the decimal part of 1/3 as a string, excluding '0.'\n    multiplied = decimal_part * (1000 // len(decimal_part) + 1)  # Repeat the string to exceed 1000 characters\n    digits = [int(digit) for digit in multiplied[:1000]]  # Take the first 1000 digits\n    ans = sum(digits)  # Sum the digits\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    total_amount = 29\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    count = 0\n    for num in range(2, 101, 2): # Start counting from 2 up to 100 by increments of 2\n        count += 1 # Count each number as it is crossed out\n    return count\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_for_8_books = 32\n    cost_per_book = cost_for_8_books / 8\n    cost_for_12_books = cost_per_book * 12\n    return cost_for_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # let x be the value to find\n    # according to the equation 4 * x - 13 = 55\n    # we can rearrange it to find x: 4 * x = 55 + 13 which gives us x = (55 + 13) / 4\n    ans = (55 + 13) / 4\n    return ans\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2/5\n    percentage = 35/100\n    decimal = 0.604\n    \n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the concentration of the solution added to container A\n    x = symbols('x')\n\n    # A--10g--->B--10g--->C\n    # Final concentration in C is 0.5%, so after adding 10g to C, the new mass of C is 60g\n    # So we have 60 * 0.5% = 0.3g of solute in C\n    # This 0.3g came from the 10g added from B, hence concentration in B was 0.3g / 10g = 3%\n\n    # Now looking at B, it had 40g of water initially, we added 10g from A making it 50g\n    # The concentration in B was 3%, so the mass of solute in B was 50g * 3% = 1.5g\n    # This 1.5g includes the x% from the 10g added from A\n    # Therefore, the solute from A to B is 10g * x = amount of solute in the 10g added from A\n\n    # The remaining 1.5g - 10g * x of solute was from the original 40g in B (pure water has no solute)\n    # We can express the solute mass in B in terms of x from the fact that it came from A,\n    # which was mixed with 30g water in A to make 40g of solution in A\n\n    # Set up the equation: Solute in B = Solute from A + original solute in B\n    eq = Eq(10 * x + (40 * 0), 50 * 0.03)\n\n    # Solve the equation for x, which is the concentration in A\n    concentration_in_A = solve(eq, x)[0]\n\n    return concentration_in_A.evalf()\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2016 to get the factors\n    factors_2016 = factorint(2016)\n    # Factorize 1377 to get the factors\n    factors_1377 = factorint(1377)\n\n    # The product of ages last year\n    product_last_year = 1\n    for base, exp in factors_1377.items():\n        product_last_year *= base**(exp+1)\n\n    # Subtract the difference between the products of this and last year\n    product_2_years_ago = product_last_year - (2016 - 1377)\n\n    return product_2_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n    \n    # Treat the two people who want to stand next to each other as one unit.\n    # Now we have 4 units to arrange (3 individuals + 1 pair).\n    unit_arrangements = factorial(4)\n    \n    # The pair can be arranged among themselves in 2 ways (AB or BA).\n    pair_arrangements = factorial(2)\n    \n    # The total number of ways is the product of unit arrangements\n    # and pair arrangements.\n    total_arrangements = unit_arrangements * pair_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal_1 = 12  # in mg\n    weight_metal_2 = 13  # in mg\n    nickel_percent_1 = 40 / 100\n    nickel_percent_2 = 60 / 100\n\n    total_nickel = (weight_metal_1 * nickel_percent_1) + (weight_metal_2 * nickel_percent_2)\n    total_weight = weight_metal_1 + weight_metal_2\n    percent_nickel_in_new_metal = (total_nickel / total_weight) * 100\n\n    return percent_nickel_in_new_metal\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    first_three_days_total = 33\n    last_four_days_average = 18\n    last_four_days_total = last_four_days_average * 4\n    total_for_week = first_three_days_total + last_four_days_total\n    average_per_day = total_for_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    number1 = -3\n    number2 = 8\n    half_way = (number1 + number2) / 2\n    return half_way\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Since everyone scores different number of wins and it's a round-robin tournament,\n    # the champion must have defeated all the other players.\n    # There are 8 players, so the champion plays 7 games...\n    champion_wins = 7\n\n    return champion_wins\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while ((n * (n + 1)) // 2) < 3405:\n        n += 1\n    n -= 1\n    total = (n * (n + 1)) // 2\n    duplicate_number = 3405 - total\n    return duplicate_number\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history_club = total_math_club * ratio_history_to_math\n    return int(total_history_club)\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let c be the total number of chickens and p be the original number of chickens per pen.\n    # We have the following system of equations:\n    # c = p * 24 (1) - The total number of chickens before the change.\n    # c = (p - 6) * (24 + 6) (2) - The total number of chickens after adding 6 pens and reducing the number in each pen by 6.\n    \n    # From equation (1) and (2), we can write:\n    # p * 24 = (p - 6) * 30\n    # Solving for p:\n    p = (24 * 6) / (30 - 24)  # Moved terms around and simplified.\n    c = p * 24  # Use the value of p to find total number of chickens c.\n    return c\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the given numbers first\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n    \n    # Subtract the reversed numbers\n    result = num1 - num2\n    \n    # Reverse the result to get the answer Pluto would write down\n    ans = int(str(result)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    a = 45\n    b = 60\n    ans = gcd(a, b)\n\n    return ans\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    n1, n2 = 6, 12\n    S1, S2 = 64, 156\n    # S_n = n/2 * (2*a1 + (n-1)*d) where S_n is the sum of the first n terms\n    # S1 = n1/2 * (2*a1 + (n1-1)*d)\n    # S2 = n2/2 * (2*a1 + (n2-1)*d)\n    # From S1 and S2 we can create a linear system to solve for a1 (the first term) and d (the common difference)\n    \n    # From S1: S1 = n1/2 * (2*a1 + (n1-1)*d)\n    # => 2*S1 = n1 * (2*a1 + (n1-1)*d)\n    # => 2*S1/n1 = 2*a1 + (n1-1)*d\n    \n    # From S2: S2 = n2/2 * (2*a1 + (n2-1)*d)\n    # => 2*S2 = n2 * (2*a1 + (n2-1)*d)\n    # => 2*S2/n2 = 2*a1 + (n2-1)*d\n    \n    # Now we have two equations:\n    # (1) 2*a1 + (n1-1)*d = 2*S1/n1\n    # (2) 2*a1 + (n2-1)*d = 2*S2/n2\n    \n    # Subtract (1) from (2) to find d:\n    # => [(n2-1)*d - (n1-1)*d = 2*S2/n2 - 2*S1/n1\n    # => (n2-n1)*d = 2*S2/n2 - 2*S1/n1\n    # => d = (2*S2/n2 - 2*S1/n1) / (n2 - n1)\n    \n    # Now we find a1:\n    # => 2*a1 = 2*S1/n1 - (n1-1)*d\n    # => a1 = (2*S1/n1 - (n1-1)*d) / 2\n    \n    # Once we have a1 and d, we can find the sum of the first 18 terms using the same formula:\n    # S3 = 18/2 * (2*a1 + (18-1)*d)\n    \n    d = (2*S2/n2 - 2*S1/n1) / (n2 - n1)\n    a1 = (2*S1/n1 - (n1-1)*d) / 2\n    \n    n3 = 18\n    S3 = n3/2 * (2*a1 + (n3-1)*d)\n    \n    return int(S3)\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    current_brother_age = brother_age_three_years_ago + 3\n    return current_brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time_to_pass = 30\n    train_speed = 20  # meters per second\n\n    # Since the train takes 30 seconds to pass the bridge and it's moving at a speed of 20 meters per second,\n    # the total distance covered by the train during this time is the length of the train plus the length of the bridge.\n    total_distance_covered = train_speed * time_to_pass\n    # To find the length of the bridge, we subtract the length of the train from the total distance.\n    bridge_length = total_distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    # Converting Hebe's percentage to marks\n    hebe_score = (hebe_percentage / 100) * total_marks\n\n    # Calculating the difference\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Speeds in km/h\n    jogging_speed = 9\n    walking_speed = 7.5\n\n    # Time spent jogging: from 6:30 a.m. to 7:00 a.m. is half an hour\n    jogging_time = 0.5  # in hours\n\n    # Time spent walking: from 7:00 a.m. to 8:00 a.m. is one hour\n    walking_time = 1  # in hours\n\n    # Distance = Speed * Time\n    distance_jogging = jogging_speed * jogging_time\n    distance_walking = walking_speed * walking_time\n\n    # Total distance\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    won, lost = symbols('won lost')\n    total_games = 63\n    equation = Eq(won, 2 * lost)\n    equation_total = Eq(won + lost, total_games)\n    \n    solutions = solve((equation, equation_total), (won, lost))\n    \n    return solutions[lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    ans = (55 * 13) - (44 * 13)\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, goats = symbols('total_animals goats')\n\n    # 65% of the animals were cows, so the number of cows is 0.65 * total_animals\n    cows = 0.65 * total_animals\n\n    # Rest of the animals were goats, so total_animals - cows = goats\n    equation1 = Eq(goats, total_animals - cows)\n\n    # 240 more cows and goats were added, new total is total_animals + 240\n    new_total_animals = total_animals + 240\n\n    # After addition, percentage of cows increased by 20%, making it 85%\n    # So, number of cows now is 0.85 * new_total_animals\n    new_cows = 0.85 * new_total_animals\n\n    # Number of goats doubled, making it 2 * goats\n    new_goats = 2 * goats\n\n    # New total animals is sum of new cows and new goats\n    equation2 = Eq(new_total_animals, new_cows + new_goats)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are two cases to consider: \n    # One where the first digit (hundreds place) is 3 or 4, and\n    # one where the first digit is 0 (which is not a valid three-digit number).\n\n    # Case 1: First digit is 3 or 4\n    # If the first digit is 3 or 4, we have 2 choices for the first digit,\n    # and since the other digits can be 0, 3, or 4, we have 3 choices for \n    # both the second and third digit.\n    count_first_digit_3_or_4 = 2 * 3 * 3\n\n    # Case 2: First digit is 0 (invalid)\n    # If the first digit is 0, we do not have a valid three-digit number, so\n    # we do not count these. Thus, there are 0 valid numbers in this case.\n\n    # Sum the counts for each case\n    total_count = count_first_digit_3_or_4  # Case 2 contributes 0\n\n    return total_count\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # There are factorial(3) ways to arrange the girls among themselves\n    girl_arrangements = factorial(3)\n    \n    # There are factorial(4) ways to arrange the 3 girls as a group and 3 teachers\n    group_arrangements = factorial(4)\n    \n    # For the boys, we need to place them in the spaces between teachers and/or the girl group\n    # Since there are no two boys adjacent, we have 5 spaces to place 3 boys: (_G_G_G_T_T_T_)\n    # Where G represents the girl group and T represents a teacher\n    # This gives us combination of 5 places taken 3 at a time\n    boy_arrangements = factorial(5) / (factorial(3) * factorial(5 - 3))\n    \n    total_arrangements = girl_arrangements * group_arrangements * boy_arrangements\n    return int(total_arrangements)\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    from math import sqrt\n\n    # Calculate the area of Triangle X (an equilateral triangle with side 3 cm)\n    area_x = (sqrt(3) / 4) * (3 ** 2)\n    \n    # Calculate the area of Triangle Y (an equilateral triangle with side 9 cm)\n    area_y = (sqrt(3) / 4) * (9 ** 2)\n    \n    # Calculate how many times Triangle X fits into Triangle Y\n    ans = area_y / area_x\n    \n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for i in range(100, 1000):\n        if (i % 7 == 4) and (i % 8 == 4) and (i % 9 == 4):\n            return i\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    # Define the total amount spent on pens and pencils in terms of x\n    total_spent = 5 * 12 + 3 * 5\n    # Set up the total spent in terms of x equal to $120\n    x = 120 / total_spent\n\n    return x\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    return comb(total_students, students_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    first_product = 8 * 9 * 10\n    second_product = 1 * 2 * 3\n    ans = first_product - second_product\n    return ans\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 1 + 1  # +1 for the option of not having a soup\n    desserts = 2 + 1  # +1 for the option of not having a dessert\n\n    combinations = appetisers * main_courses * soups * desserts\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for n in range(100, 201):\n        if n % 8 == 3 and n % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let the number of blue balls be denoted by 'b'\n    b = symbols('b', integer=True)\n\n    # Total number of balls in the bag (red + blue)\n    total_balls = 4 + b\n\n    # Probability of picking the first red ball\n    prob_first_red = 4 / total_balls\n    \n    # Probability of picking the second red ball after the first\n    # This is now out of 3 red balls and (Total balls - 1)\n    prob_second_red = 3 / (total_balls - 1)\n\n    # The product of both probabilities should equal 2/7\n    equation = Eq(prob_first_red * prob_second_red, 2 / 7)\n\n    # Solve for 'b'\n    solution_set = solve(equation, b)\n\n    # There may be multiple solutions, only positive integer solutions make sense \n    blue_balls = next(s for s in solution_set if s.is_integer and s > 0)\n    \n    return blue_balls\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence where a = 6 (first term), d = 5 (common difference)\n    a = 6\n    d = 5\n    # Calculating the number of terms n in the sequence by (last_term - first_term)/common_difference + 1\n    # last term is 41, so n = (41 - 6)/5 + 1 = 8\n    n = (41 - a) / d + 1\n    n = int(n)\n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n    ans = n / 2 * (2 * a + (n - 1) * d)\n    return ans\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial as f\n    \n    # Since 2^27 = 2^3 * 9 is the prime factorization,\n    # we can only use 2, 4, or 8 in the ten digits.\n    # Let's count the numbers of 2's, 4's, and 8's.\n    # Define function to calculate number of ways to partition\n    def partition_count(n_2, n_4, n_8):\n        total = n_2 + n_4 + n_8\n        return f(total) // (f(n_2) * f(n_4) * f(n_8))\n    \n    # 2^27 can be divided into (3*9) twos, (1*9) fours, (0*9) eights\n    # or combinations of these such that the total power of 2 adds up to 27 and we have ten digits\n    # permutations with repetition - since order matters in the final number\n    count = 0\n    for eights in range(10):  # Number of 8's\n        for fours in range(10):  # Number of 4's\n            # Calculate remaining power for 2's and check if it fits in the number of digits left\n            twos = 10 - eights - fours\n            if twos < 0:\n                continue\n            \n            power_sum = 3 * eights + 2 * fours + twos\n            if power_sum == 27:\n                # Calculate permutations, considering leading zeros are not allowed\n                if eights > 0:\n                    count += partition_count(twos, fours, eights)\n                else:\n                    count += (partition_count(twos-1, fours, eights) * (10-fours))\n                    \n    return count\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let's denote the total slices of cake as 'total_slices'.\n    # According to the problem, 3/5 of the cake was eaten.\n    # Then 2 slices were given to friends.\n    # Finally, 4 slices were left.\n    # Therefore, 2/5 of the cake plus the 2 slices given to friends and the 4 slices left is the total cake.\n    \n    # Let's express the above as an equation and solve for 'total_slices':\n    # (3/5)*total_slices + 2 (given to friends) + 4 (left) = total_slices\n    # After rearranging the equation:\n    # 2/5*total_slices = 2 + 4\n    # total_slices = (2 + 4) * (5/2)\n    total_slices = (2 + 4) * (5/2)\n\n    return int(total_slices)  # Finally, we cast the result to an integer since the slices of cake must be a whole number.\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, danny = symbols('mike danny')\n\n    # 1/mike + 1/danny = 1/10 hours for the job to be completed together\n    equation1 = Eq(1/mike + 1/danny, 1/10)\n\n    # Mike types for 8 hours and Danny for 13 hours to complete the job\n    equation2 = Eq(8/mike + 13/danny, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    # Return the time it takes for Danny to finish the job alone\n    return solutions[danny]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = (51 + 50) - (45 - 40) - (35 - 30) - (25 - 20) - 15\n    return ans\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    min_pencils = (7 // 2) + (7 % 2 > 0)\n    return min_pencils\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n    \n    # Since the corners are counted only once, we subtract the corners (4) once\n    # from the total per side (side_length // spacing + 1) and then multiply by 4\n    # for the four sides of the square\n    chess_count = (side_length // spacing + 1) * 4 - 4\n    \n    return chess_count\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        term += difference\n        num_terms += 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Since a digit must appear at least 5 times to be painted red,\n    # to minimize the number of red squares, we would want to distribute the\n    # appearances of each digit as evenly as possible among the 100 squares.\n\n    # There are 10 digits (0-9), so dividing 100 squares by 10 gives us 10 squares per digit,\n    # which is greater than 5, meaning all squares will be painted red if we distribute evenly.\n\n    # The optimal strategy involves having just below 5 appearances of as many digits as possible,\n    # while the remaining digits appear 5 times or more.\n\n    # Since 100 is not divisible by 4, we'll have to have 4 appearances of some digits and 5 of the others.\n    # 96 squares can be evenly divided by 4 (4 appearances for 24 digits), leaving 4 squares, \n    # which means four digits will appear 5 times and get painted.\n    \n    # The smallest possible number of red squares is thus 4 digits * 5 appearances = 20\n    return 4 * 5 \n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent = 2.89\n    received = 4 / 5\n\n    remaining_money = initial_money - spent + received\n\n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # 32^2=1024 and 99^2=9801, thus boundaries are [32,99]\n        square = i ** 2\n        first_two = square // 100\n        last_two = square % 100\n\n        # Check if the first two and last two digits are equal\n        if first_two // 10 == first_two % 10 and last_two // 10 == last_two % 10:\n            return square\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n\n    while factorial_zeros < 28:\n        n += 1\n        temp_n = n\n        temp_zeros = 0\n\n        while temp_n % 5 == 0:\n            temp_zeros += 1\n            temp_n /= 5\n\n        factorial_zeros += temp_zeros\n\n    return n - 1  # Subtracting one because we add one at the start of the loop\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # The place value of the first 3 in the ten's place\n    place_value_2 = 3 * 10**5  # The place value of the second 3 in the hundred thousand's place\n\n    # The difference between the two place values\n    ans = abs(place_value_2 - place_value_1)\n    return ans\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3*m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(1, 66):\n        if custom_oplus(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    distance_left = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    distance_covered = initial_distance - distance_left\n    total_speed = tim_speed + bob_speed\n\n    time_taken = distance_covered / total_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_slide = 1\n    distance_after_sliding = day_distance - night_slide\n\n    # The snail has to reach or exceed the total distance before the slide on the last day\n    days = (total_distance - day_distance) // distance_after_sliding\n    remaining_distance = total_distance - days * distance_after_sliding\n    \n    # If there's any remaining distance, it will be covered on the last day (without sliding back)\n    if remaining_distance > 0:\n        days += 1\n\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    numbers = [3, 4, 6, 10]\n    total_sum = mean_value * 5\n    sum_of_known_numbers = sum(numbers)\n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_interval = 4\n    ben_interval = 7\n    cris_interval = 8\n\n    ans = lcm(akon_interval, ben_interval, cris_interval)\n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Check if all the digits are unique.\n            for perm in permutations(digits):\n                num_list = [int(digit) for digit in perm]\n                if num_list == sorted(num_list) and max(num_list) - min(num_list) == 3:\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = '8354'\n    sum_of_digits = sum(int(digit) for digit in recurring_sequence)\n    full_repeats = 84 // len(recurring_sequence)\n    partial_repeats_digits = 84 % len(recurring_sequence)\n    total_sum = sum_of_digits * full_repeats + \\\n                sum(int(recurring_sequence[i]) for i in range(partial_repeats_digits))\n    return total_sum\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_left = 5\n    students_join = 18\n    \n    # Let 's' be the original number of students\n    # Based on the conditions: s + 5 is a perfect square (m^2)\n    # And s + 5 + 18 is also a perfect square (n^2)\n    \n    s = 0\n    while True:\n        # Check if s + 5 is a perfect square\n        if ((s + students_left)**0.5).is_integer():\n            # Check if s + 5 + 18 is also a perfect square\n            if ((s + students_left + students_join)**0.5).is_integer():\n                break\n        s += 1\n    \n    return s\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "def solution():\n    from math import factorial as fact\n    \n    def nCr(n, r):\n        return fact(n) // (fact(r) * fact(n - r))\n    \n    # This is a problem of distributing n identical items to r distinct groups where each group gets at least one item.\n    # This problem can be approached with the concept of \"stars and bars\".\n    # We have to distribute 20 pens to 6 kids, where each kid gets at least one pen.\n    # After giving each kid one pen, we are left with 20 - 6 = 14 pens to distribute.\n    # Now, this is equivalent to finding the number of solutions to the equation x1 + x2 + x3 + x4 + x5 + x6 = 14,\n    # where x1, ... , x6 are non-negative integers.\n    # This can be done with \"nCr(n + k - 1, k - 1)\" where n is the number of items left to distribute\n    # and k is the number of groups/kids.\n    pens_left = 20 - 6\n    kids = 6\n    \n    ans = nCr(pens_left + kids - 1, kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work_rate_per_person = 1 / (initial_people * initial_hours)\n    target_people = 1 / (work_rate_per_person * target_hours)\n\n    return int(target_people)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # convert minutes to hours\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    # Total number of three-digit numbers starting from 100 to 999\n    total_three_digit_numbers = 999 - 100 + 1\n    \n    # Counting three-digit numbers with no zeros\n    numbers_with_no_zeros = 9 * 9 * 8  # Choices for each digit without zero\n    \n    # Subtracting numbers with no zeros from the total gives numbers with at least one zero\n    numbers_with_at_least_one_zero = total_three_digit_numbers - numbers_with_no_zeros\n    \n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass in kilograms\n    speed = 30   # speed in meters per second\n    kinetic_energy = (1/2) * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if number % 3 == 1 and number % 4 == 1 and number % 5 == 1 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    interval_duration = 43 - 6 * 3  # Total duration minus the sound duration for 6 strikes\n    interval_count = 6 - 1          # Number of intervals between 6 strikes is one less than the number of strikes\n    single_interval = interval_duration / interval_count  # Duration of a single interval\n\n    # Now calculate the duration for 12 strikes\n    total_duration = 12 * 3 + single_interval * (12 - 1)\n    return int(total_duration)\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(1, 300):\n        if all(num % div == 2 for div in [5, 6, 7]):\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    for hundreds in range(9, -1, -1):\n        for tens in range(9, -1, -1):\n            if hundreds + tens == 13:\n                smallest_thousands_digit = 1  # since we're looking for the smallest 4-digit number\n                greatest_ones = 9  # greatest odd number for ones place\n                if len(set([smallest_thousands_digit, hundreds, tens, greatest_ones])) == 4:\n                    return int(f\"{smallest_thousands_digit}{hundreds}{tens}{greatest_ones}\")\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    kevin_speed_multiplier = 1.5\n\n    # speed ratio of Jerry to Kevin is 1:1.5, the total is 1 + 1.5 = 2.5 parts\n    jerry_distance = total_distance / (1 + kevin_speed_multiplier)\n\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # Each cut creates one additional piece\n    \n    length_of_each_piece = total_length / pieces\n    \n    return length_of_each_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    num_pictures = 10\n\n    # The total spacing distance is the wall width minus the width of two pictures\n    spacing_distance = wall_width - (2 * picture_width)\n    \n    # The number of spaces between pictures is one less than the number of pictures\n    num_spaces = num_pictures - 1\n    \n    # Each space between pictures is thus:\n    space_width = spacing_distance / num_spaces\n\n    # The distance from the left of the wall to the centre of the third picture:\n    # from the left picture to the centre of the second picture + one space + half the picture width\n    distance_to_third_picture_centre = picture_width + space_width + (space_width / 2)\n\n    # The distance from the centre of the wall to the centre of any picture is half the wall width\n    centre_wall = wall_width / 2\n\n    # So the distance from the centre of the wall to the centre of the third picture is:\n    distance_from_wall_centre = distance_to_third_picture_centre - centre_wall\n\n    return distance_from_wall_centre\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 1  # Let's assume the initial height to be 100%\n    bounce_height = initial_height\n    bounce_count = 0\n    while bounce_height >= 0.25:\n        bounce_height *= 0.75  # Bounces to 75% of the previous height\n        if bounce_height < 0.25:\n            break\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = range(5, 21, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variable\n    x = symbols('x')\n    \n    # Formulate the equation\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Get the result\n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    \n    # When Doris reaches her uncle's current age, the age difference will remain constant.\n    age_difference = uncle_future_age - doris_age\n\n    # Uncle's current age is his future age minus the age difference.\n    uncle_current_age = uncle_future_age - age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of 1 banana and y be the cost of 1 apple.\n    x, y = symbols('x y')\n    \n    # Ellie pays £1.50 for 2 bananas and 3 apples.\n    equation1 = Eq(2*x + 3*y, 1.50)\n    \n    # Beth pays £1.45 for 3 bananas and 2 apples.\n    equation2 = Eq(3*x + 2*y, 1.45)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Extracting the price of 1 banana and 1 apple.\n    price_banana = solutions[x]\n    price_apple = solutions[y]\n    \n    # Annabella pays for 1 banana and 1 apple\n    annabella_pays = price_banana + price_apple\n    \n    return annabella_pays\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n    principal = interest / interest_rate\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's assumption says that the missing number combined with 8 should equal 15,\n    # i.e., missing number = 15 - 8\n    missing_number = 15 - 8\n    \n    # Timothy thinks missing number is 7 but he forgets to check if 5 is indeed smaller than 8\n    # which should be the case if the number 5 regrouped due to its position having a smaller value than the comparing position\n    if missing_number == 7 and 5 < 8:\n        # Timothy's answer is correct since 5 is smaller than 8, a regrouping would have happened\n        is_correct = True\n    else:\n        # Timothy's answer is incorrect\n        is_correct = False\n        # We need to find the correct value such that when 8 is added to it and regrouping is considered, the result is 15\n        for i in range(1, 15):\n            # Since 5 is not smaller than 8, regrouping might have taken place making 5 + 10\n            # Let's find the number that makes the sum 15, considering 5 is effectively 15\n            if i + 8 == 15:\n                correct_answer = i\n                break\n    \n    return is_correct if is_correct else correct_answer\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the original amount of money Jerry had\n    x = symbols('x')\n\n    # After buying the watch, he spent 2/7 of his remaining money on a shirt\n    remaining_after_watch = x - 200\n    spent_on_shirt = (2/7) * remaining_after_watch\n    remaining_after_shirt = remaining_after_watch - spent_on_shirt\n\n    # He had 1/3 of the original amount of money left\n    equation = remaining_after_shirt - (1/3) * x\n\n    # Solve for x\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n    \n    # Treat Tom and Harry as one unit plus the five other students, so we have 6 \"units\"\n    total_units = 6\n    \n    # Ronda must be at the furthest right, so we really only need to arrange 5 \"units\"\n    # And then separately arrange Tom and Harry within their unit\n    arrangements_without_ronda = factorial(total_units - 1)\n    tom_and_harry = factorial(2)\n    \n    # The total arrangements are the product of these possibilities\n    total_arrangements = arrangements_without_ronda * tom_and_harry\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    amount_after_three_years = initial_investment * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    round_off_to_nearest = 100\n\n    # The lowest possible price with rounding to nearest $100\n    lowest_possible_price = rounded_price - round_off_to_nearest // 2\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create variables for the symbolics calculations\n    v, d, t = symbols('v d t', real=True, positive=True)\n    \n    # Form equations based on the given problem statement\n    original_time_eq = Eq(d / v, t)\n    increased_speed_time_eq = Eq(d / (v * 1.2), t - 1)\n    partial_increased_speed_time_eq = Eq(200 / v + (d - 200) / (v * 1.25), t - 12 / 60)\n    \n    # Solve the system of equations\n    solutions = solve((original_time_eq, increased_speed_time_eq, partial_increased_speed_time_eq), (v, d, t))\n    \n    # Since we know that the distances are real and positive, filter for the correct solution\n    for sol in solutions:\n        if sol[d] > 0:\n            ans = sol[d]\n            break\n\n    return ans\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_total_score = current_average * 4\n    additional_tests = 0\n\n    while True:\n        additional_tests += 1\n        required_score = (desired_average * (4 + additional_tests)) - current_total_score\n        if required_score <= 100 * additional_tests:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Given distances and corresponding speeds\n    distance1 = 540  # in metres\n    speed1 = 9       # in metres per second\n\n    distance2 = 300  # in metres\n    speed2 = 6       # in metres per second\n\n    # The final distance covered will be the remaining distance after the first two stages\n    # Total race distance = 1000 metres\n    total_race_distance = 1000\n    distance3 = total_race_distance - (distance1 + distance2)\n\n    speed3 = 10      # in metres per second for the final sprint stage\n\n    # Time taken = Distance / Speed\n    # Time taken for each stage\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time taken for the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_current_age = symbols('uncle_current_age')\n    equation = Eq(uncle_current_age - doris_age, 40)\n    uncle_age_solution = solve(equation, uncle_current_age)\n    return uncle_age_solution[0]\n\nfrom sympy import symbols, Eq, solve\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    number_of_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = number_of_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    train_speed = 30  # m/s\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / train_speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sheep, cows = symbols('sheep cows')\n    equation1 = Eq(sheep, (5/7) * cows)\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n    \n    result = solve((equation1, equation2), (sheep, cows))\n    \n    return result[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    n = (9 * 60 + 25) - (8 * 60 + 30)\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency is twice B's\n    A_efficiency = 2\n    B_efficiency = 1\n\n    # A can complete the job in 6 days\n    A_days = 6\n    # A's work per day = 1 job / A_days\n    A_work_per_day = 1 / A_days\n\n    # B's work per day = B_efficiency * A's work per day / A_efficiency\n    B_work_per_day = B_efficiency * A_work_per_day / A_efficiency\n\n    # Together, A and B's work per day = A's work per day + B's work per day\n    together_work_per_day = A_work_per_day + B_work_per_day\n\n    # Number of days to complete the job together = 1 job / together work per day\n    days_together = 1 / together_work_per_day\n\n    return days_together\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    geoff_age, sister_age = symbols('geoff_age sister_age')\n\n    equation1 = Eq(geoff_age + sister_age, 22)\n    equation2 = Eq(geoff_age + sister_age + 2 * x, 30)\n\n    solutions = solve((equation1, equation2), (geoff_age, sister_age, x))\n\n    return solutions[x]\n\nx = symbols('x')\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mamee, haribo, big_jelly = symbols('mamee haribo big_jelly')\n\n    equation1 = Eq(mamee, haribo - 30 / 100)  # Mamee cost 30¢ less than Haribo\n    equation2 = Eq(big_jelly, 6 * mamee)      # Big jelly cost 6 times as Mamee\n    equation3 = Eq(haribo, 50 / 100)          # Haribo cost 50¢\n\n    solutions = solve((equation1, equation2, equation3), (mamee, haribo, big_jelly))\n\n    return solutions[big_jelly]  # Answer in dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    anna = (3/8) * total_candies\n    belle = (1/4) * total_candies\n    cathy_dawn = total_candies - (anna + belle)\n    \n    equation = Eq(anna + belle, cathy_dawn + 90)\n\n    solution = solve(equation, total_candies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    # Given fraction equation: 18/36 = □/32\n    \n    # Simplify the left side of the equation: 18/36 = 1/2\n    left_fraction = 18 / 36\n\n    # Find the numerator that fits the right side: □/32 \n    right_numerator = left_fraction * 32\n\n    return right_numerator\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    joel_removed = remaining_plants * 2 + 2\n    after_valerie = remaining_plants + joel_removed\n    valerie_removed = after_valerie * 2 + 3\n    total_plants = after_valerie + valerie_removed\n    return total_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variable\n    initial_fish_balls = symbols('initial_fish_balls')\n    \n    # Create equations based on the problem\n    morning_sold = initial_fish_balls * 3/4\n    remaining_after_morning = initial_fish_balls - morning_sold\n    afternoon_sold = remaining_after_morning * 1/3\n    remaining_after_afternoon = remaining_after_morning - afternoon_sold\n    \n    # Mr. Tan made another 506 fish balls, so...\n    total_remaining = remaining_after_afternoon + 506\n    \n    # Now he has twice the number of fish balls he made at first\n    equation = Eq(total_remaining, 2 * initial_fish_balls)\n    \n    # Solve the equation\n    solution = solve(equation, initial_fish_balls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + 2*vanilla / 3 + 7*blueberry / 9, 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Find the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    beck_give_chris = (beck_books - chris_books) / 2\n\n    return beck_give_chris\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8)*92 + 7*0.625 + 62.5/100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    # Ratio of boys to girls is 2:7\n    # This means for every 2 boys, there are 7 girls\n    # If there are 14 boys, then the number of boys is 14 / 2 = 7 times the ratio\n    ratio_times = 14 // 2  # Use integer division\n\n    # Now, calculate the number of girls\n    girls = 7 * ratio_times\n    # Total students is the sum of boys and girls\n    total_students = 14 + girls\n    return total_students\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_of_two_cheese_cakes = 2 * cheese_cake_price\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 400:\n        ans += 3 * 5 * 7  # Since LCM of 3, 5, 7 is 3*5*7\n    return ans\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors = set()\n    \n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_green_apples = pigs * green_apples_per_pig\n    total_red_apples = pigs * red_apples_per_two_pigs\n\n    ans = total_green_apples + total_red_apples\n    return int(ans)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died = total_seeds * 1/4\n    sunflowers_grown = total_seeds - died\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one shirt and one pair of pants\n    shirt, pants = symbols('shirt pants')\n\n    # Set up the equations given the problem\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    # Solve the equations for the price of one shirt and one pair of pants\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    # The total price for one shirt and one pair of pants\n    total_price = solutions[shirt] + solutions[pants]\n    \n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    deposit_days = (total_days + 1) // 2\n    spend_days = total_days // 2\n    amount_after_days = initial_amount + (deposit_days * deposit_amount) - (spend_days * spend_amount)\n    return amount_after_days\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_answer = 54\n    original_number = (final_answer * 4 - 178) / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n\n    average = total_apples / num_students\n\n    return average\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the initial number of stickers Charlotte has\n    # Marry had 7 parts and Alexis had 5 parts initially, suppose each part is y stickers\n    # Thus Marry had 7y stickers and Alexis had 5y stickers initially\n    \n    # Marry gave 20% = 0.2 * 7y stickers to Charlotte\n    # Alexis gave 20% = 0.2 * 5y stickers to Charlotte\n    # Charlotte's stickers increased by 80%: 0.8 * x = 0.2 * 7y + 0.2 * 5y\n    \n    # Solving the equation for x we get:\n    # x = (0.2 * 7y + 0.2 * 5y) / 0.8\n    # x = 0.2 * (7y + 5y) / 0.8\n    # 4x = 7y + 5y\n    # 4x = 12y\n    # x = 3y\n    \n    # Marry ended up with 7y - 0.2 * 7y stickers, and Charlotte ended up with x + 0.2 * (7y + 5y)\n    # According to the problem, Marry had 20 stickers more than Charlotte after giving away:\n    # (7y - 0.2 * 7y) - (x + 0.2 * (7y + 5y)) = 20\n    # 7y - 1.4y - x - 0.2 * 7y - 0.2 * 5y = 20\n    # 5.6y - 3y - 1.4y - y = 20 because x = 3y\n    # 5.6y - 5.4y = 20\n    # 0.2y = 20\n    # y = 100\n    \n    # Hence, Alexis had 5y stickers at first:\n    Alexis_initial_stickers = 5 * 100\n    return Alexis_initial_stickers\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let d be the distance between Nini's home and the countryside.\n    # original speed = d / 8 (since she will arrive in 8 hours)\n    # if she wants to arrive one hour earlier, her speed must be d / 7\n    # and that speed is 5 km/h faster than the original speed, so:\n    # d / 7 = d / 8 + 5\n\n    # Solving the equation for d:\n    d = symbols('d')\n    equation = Eq(d / 7, d / 8 + 5)\n    solution = solve(equation, d)\n    return solution[0]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # Total possible ways without restrictions\n    opposite_ways = 2 * 1      # Ways in which Claire and Tony can sit opposite to each other\n    restricted_ways = opposite_ways * 2 * 1  # Times the number of ways the other two can sit\n    ans = total_ways - restricted_ways\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase equations\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily's purchase equations\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_nums = sorted([''.join(p) for p in permutations(digits)])\n    fifth_num = all_nums[4]  # index 4 for 5th position in a zero-indexed list\n    return int(fifth_num)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 0\n    poison_bottle_total = 1000\n\n    while 2 ** test_tubes < poison_bottle_total:\n        test_tubes += 1\n    \n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36  # total distance covered by the chairs\n    num_chairs_initial = 10  # initial number of chairs\n    num_chairs_final = num_chairs_initial - 3  # final number of chairs after removing 3\n\n    # Calculate the distance between each chair initially\n    distance_between_chairs_initial = total_distance / (num_chairs_initial - 1)\n\n    # Calculate the new total distance after removing 3 chairs\n    total_distance_final = total_distance + distance_between_chairs_initial * 3\n    \n    # Calculate the distance between each chair finally\n    distance_between_chairs_final = total_distance_final / (num_chairs_final - 1)\n\n    return distance_between_chairs_final\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Since each brother has at least two books, we subtract 2 books for each beforehand.\n    books_left = 10 - 2 * 3\n\n    # Iterate through possible book counts for the first brother\n    # books for first brother can range from 0 to books_left since he already has 2 books\n    for books_for_first_brother in range(0, books_left + 1):\n        # books for second brother can range from 0 to books_left - books_for_first_brother\n        for books_for_second_brother in range(0, books_left - books_for_first_brother + 1):\n            # no iteration for third brother since his books count will be the remainder\n            books_for_third_brother = books_left - books_for_first_brother - books_for_second_brother\n            # Each brother already has 2 books, so we add these back to the distribution\n            if books_for_third_brother >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    # Let the smallest angle be x\n    # Then the second angle which is 5 times larger would be 5x\n    # Sum of angles in a quadrilateral is 360 degrees\n    # 90 (1st right angle) + 90 (2nd right angle) + x + 5x = 360\n    # Solve for x\n    x = (360 - 180) / 6\n    \n    # Calculate the largest angle which is 5 times x\n    largest_angle = 5 * x\n    \n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Initialize the list with the number of ways to get to each step\n    # We can reach the first, second, and third steps in 1, 2, and 4 ways respectively.\n    # The fourth step can also be reached in 7 ways: from step 1, 2 or 3.\n    # Step 5 is muddy, so we cannot step on it, hence 0 ways.\n    # As we cannot use step 5, the sixth step can only be reached from step 4.\n    ways = [1, 2, 4, 7, 0, 7]\n\n    # Calculate the number of ways to reach the rest of the steps\n    # Every step can be reached from one of the three previous steps, except the muddy one\n    for i in range(6, 10):\n        ways.append(ways[i-1] + ways[i-2] + ways[i-3])\n\n    # The last element in the list is the number of ways to reach the 10th step\n    return ways[-1]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')  # initially set to infinity, as we are looking for the smallest number\n\n    for small_boxes in range(54 // 5 + 1):  # the maximum number of small boxes needed\n        for medium_boxes in range(54 // 7 + 1):  # the maximum number of medium boxes needed\n            for large_boxes in range(54 // 10 + 1):  # the maximum number of large boxes needed\n                if 5 * small_boxes + 7 * medium_boxes + 10 * large_boxes == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors.append(i)\n    \n    pair = [x for x in factors if 7007 // x in factors]\n    ans = pair[0] + pair[1]\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    \n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    return (6 / 7) * 42\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    rate_of_arrival = 10  # visitors per minute\n    rate_per_entrance = 25  # visitors per minute per entrance\n    time_with_one_entrance = 16  # minutes\n\n    # Calculate the total number of visitors after 16 min\n    total_visitors = rate_of_arrival * time_with_one_entrance\n\n    # With 2 entrances, the rate at which visitors will be checked in\n    rate_with_two_entrances = rate_per_entrance * 2  # visitors per minute with 2 entrances\n\n    # Calculate the time it will take for all visitors to check in with 2 entrances\n    time_with_two_entrances = total_visitors / rate_with_two_entrances  # minutes\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934\n    return kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n\n    equation1 = Eq(frogs_begin, dragonflies_begin + 9)\n    equation2 = Eq(frogs_begin - dragonflies_begin, 1)  # Translate the magic show result into an equation (frogs - dragonflies = 11 - 10)\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_up = 5\n    slide_down = 3\n    current_distance = 0\n    day = 0\n\n    while True:\n        day += 1\n        current_distance += climb_up\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    num_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    # Equation for initial cookies and muffins\n    eq1 = Eq(cookies, muffins + 24)\n    \n    # Equation after selling some of the muffins and cookies\n    eq2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # The smallest 3-digit number is 100 and the largest is 999\n    # We need to find the greatest multiple of 25 within this range\n    # Start by finding the greatest multiple of 25 less than or equal to 999\n    greatest_multiple = 999 - (999 % 25)\n\n    return greatest_multiple\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Define known variables\n    metro_ticket_price = 2 \n    coffee_price = 3\n    game_entry_fee = 7\n    total_money = 40\n\n    # Calculate the total cost per person (including Richard)\n    total_cost_per_person = metro_ticket_price * 2 + coffee_price + game_entry_fee  # both ways for metro\n\n    # Including Richard, so we need to subtract his expenses first to see how much money is left for friends\n    money_left_for_friends = total_money - total_cost_per_person \n\n    # Number of friends Richard can treat is the money left divided by the cost per friend\n    number_of_friends = money_left_for_friends // total_cost_per_person\n\n    return int(number_of_friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        num = int(f\"123{A}456{A}789{A}0\")  # last digit is 0 to ensure it is even and not divisible by 5\n        if num % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    speed_ratio_driver_to_cyclist = 13 / 2\n    extra_time_cyclist = 143  # in minutes\n\n    # Let t be the time in minutes it takes for the driver to reach the destination\n    # The driver covers the distance in time t\n    # The cyclist covers the same distance in time t + 143\n\n    # The ratio of their speeds is the inverse ratio of the time taken to cover the same distance\n    # Therefore, t / (t + 143) = 13 / 2\n    # Solving for t, we get:\n\n    t = (extra_time_cyclist * 2) / (speed_ratio_driver_to_cyclist - 2)\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    sum_of_cubes = sum(i**3 for i in range(2, 13))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Let's analyze the statements based on the given information:\n    # If statement 1 is correct, then all statements including statement 2 would be correct, \n    # which contradicts the fact that only one statement can be correct.\n    # Therefore, statement 1 is not correct.\n\n    # If statement 2 is correct, then it would imply that none of the statements are correct,\n    # including statement 2 itself, which is a contradiction.\n    # Therefore, statement 2 is not correct.\n\n    # If statement 3 is correct, then only one statement above it should be correct.\n    # However, we've already established that both statement 1 and statement 2 are incorrect.\n    # Therefore, statement 3 is not correct.\n\n    # If statement 4 is correct, then all statements above (1, 2, and 3) would be correct,\n    # which cannot be true as we're looking for only one correct statement.\n    # Therefore, statement 4 is not correct.\n\n    # If statement 5 is correct, then none of the statements above are correct.\n    # Given the analysis above, this is true.\n    # Therefore, statement 5 is the one correct statement.\n\n    ans = 5  # \"None of the statement above is correct.\"\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_coins = symbols('total_coins')\n    heads_before_flip = total_coins / 4\n    heads_after_flip = heads_before_flip + 2\n    equation = Eq(heads_after_flip, total_coins / 3)\n\n    total_coins_solution = solve(equation, total_coins)\n\n    return total_coins_solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since the 3 comedy shows cannot be consecutive, consider the 5 singing shows S and the 3 comedy shows C\n    # Place the 5 singing shows first: S S S S S\n    # There are 6 positions (denoted by '|') where the comedy shows can go, but in groups to avoid consecutiveness: |S|S|S|S|S|\n    # We need to select 3 positions out of 6 for the comedy shows.\n    positions_to_choose = 6\n    comedy_shows = 3\n    ways_to_place_comedy = nCr(positions_to_choose, comedy_shows)\n\n    # Since we have not considered the order within the S and C,\n    # we need to multiply the above result with the permutations of the 5 singing shows and 3 comedy shows\n    total_ways = ways_to_place_comedy * factorial(5) * factorial(3)\n\n    return total_ways\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways_to_choose = trains + cars + flights\n    return ways_to_choose\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "import math\n\ndef solution():\n    return math.gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    meters_per_day = total_road / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    pattern = '23456'  # The pattern of recurring digits\n    digits_sum = 0\n    for i in range(2100):\n        digit = int(pattern[i % len(pattern)])\n        digits_sum += digit\n    return digits_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_index = len(values) // 2\n    return values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original number\n    number = symbols('number')\n    \n    # Set up the equation according to the problem description\n    equation = Eq((number / 2) - 9, 12)\n    \n    # Solve the equation\n    solution = solve(equation, number)\n    \n    # Get the solution\n    original_number = solution[0]\n    \n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for i in range(41, 60):\n        if i % 4 == 2 and i % 6 == 2:\n            return i\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people and 8 seats, so 2 seats will always be unoccupied.\n    # We fix one person and arrange the other 5 people around the table.\n    # For circular permutations, the formula is (n-1)! for n people.\n    num_orders = factorial(5)\n\n    return num_orders\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even_number = float('inf')\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < min_even_number:\n            min_even_number = number\n    \n    return min_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the number of steps in the escalator\n    s = symbols('s')\n    \n    # Walks at 1 step/second and takes 10 steps\n    # time = steps/speed => time = 10 / 1 = 10 seconds\n    # As escalator is also moving, total steps covered = s = steps taken + escalator_steps\n    # Escalator speed = escalator_steps / time => escalator_steps = escalator_speed * time\n    # We do not know the escalator speed, but we can express it in terms of s\n    equation1 = Eq(s, 10 + 10 * (s - 10) / 10)\n    \n    # Walks at 2 steps/second and takes 16 steps\n    # time = steps/speed => time = 16 / 2 = 8 seconds\n    # Escalator steps covered in this time = escalator_speed * time\n    equation2 = Eq(s, 16 + 8 * (s - 16) / 8)\n    \n    solutions = solve((equation1, equation2), s)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_one_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar = 72  # cost of chocolate bar in pence\n    balloon_price = 20  # cost of a balloon in pence\n    total_paid = 1000   # amount paid in pence (£10 note)\n    total_change = 388  # change received in pence\n\n    money_spent = total_paid - total_change\n    money_spent_on_balloons = money_spent - chocolate_bar\n    num_balloons = money_spent_on_balloons // balloon_price\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n    part_length = (percentage / 100) * total_length\n    return part_length\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = -(-students // kayak_capacity)  # Ceiling division\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    money_spent_fraction = 2 / 9\n    total_money = 243\n    cupcakes = symbols('cupcakes')\n    \n    # Calculate money spent on cupcakes and pizza\n    money_spent = total_money * money_spent_fraction\n    money_left = total_money - money_spent\n    \n    # Define the equation based on the cost relationship\n    pizza_slices = 6\n    pizza_to_cupcake_ratio = 3 / 2\n    cost_cupcakes = cupcakes / 5\n    cost_pizza = cost_cupcakes * pizza_to_cupcake_ratio\n    \n    # Equation for the money spent\n    equation = Eq(money_spent, cost_cupcakes * 5 + cost_pizza * pizza_slices)\n    \n    # Solve the equation for the cost of one cupcake\n    solutions = solve(equation, cupcakes)\n    cost_per_cupcake = solutions[0]\n    \n    # Calculate the maximum number of cupcakes that can be bought with the money left\n    max_cupcakes = money_left // cost_per_cupcake\n    \n    return max_cupcakes\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    a = 4*sqrt(3)\n    equation = Eq(3*a, sqrt(3*x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    expression1 = (4 + 2) * 13\n    expression2 = 4 + (2 * 13)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let's denote the youngest dwarf's age as x.\n    # Then the ages of the youngest three would be x, x + 1, and x + 2.\n    # The sum of their ages is x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # Solving for x gives us the age of the youngest dwarf\n    x = (42 - 3) // 3\n\n    # Now we calculate the ages of the oldest three dwarfs\n    # The oldest dwarfs' ages would be x + 4, x + 5, and x + 6.\n    # The sum of the oldest three ages is (x + 4) + (x + 5) + (x + 6)\n    sum_oldest = (x + 4) + (x + 5) + (x + 6)\n\n    return sum_oldest\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        digits = str(number)\n        if len(set(digits)) == len(digits):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) / difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    all_possible_numbers = permutations(digits, 3)\n    count = sum(1 for _ in all_possible_numbers)\n\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "import math\n\ndef solution():\n    count = 0\n    for i in range(1, 6):\n        number_str = '2' + '5' * i\n        number = int(number_str)\n        if math.isqrt(number) ** 2 == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    original_pieces = 10\n    current_pieces = 16\n    cut_into_three = current_pieces - original_pieces\n    return cut_into_three // 2\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # 6 workers produce 120 parts in 4 minutes\n    # so 1 worker produces 120 parts in 4 * 6 minutes\n    one_worker_time = 4 * 6\n    \n    # 3 workers producing the parts in 10 minutes means\n    # 1 worker would produce the parts in 3 times as long\n    one_worker_parts = (one_worker_time * 120) / (3 * 10)\n    \n    return one_worker_parts\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n    \n    # For each divisor, check if 2240 divided by divisor is a square number\n    for divisor in divs:\n        if (2240 // divisor)**0.5 % 1 == 0:\n            n = divisor\n            break\n    \n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.7\n    swimming_girls = 200\n    \n    # Let the number of girls be 'g' and boys be 'b'\n    # We know that g + b = total_pupils\n    # and that 0.6b (60% of boys) can swim, thus swimming_pupils = swimming_girls + 0.6b\n    # Therefore, 0.6b = swimming_pupils - swimming_girls\n    boys_swimming = swimming_pupils - swimming_girls\n    # As 40% of the boys cannot swim implying that 60% of the boys can swim.\n    boys_total = boys_swimming / 0.6\n    girls_total = total_pupils - boys_total\n    \n    return int(girls_total)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    return non_rotten_apples\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original = 160\n    new = 168\n    increase = new - original\n    percentage_increase = (increase / original) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # The equation representing the sugar content before and after mixing\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return round(total_percentage_discount, 2)\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    mass_with_5_chocolates = 185\n    mass_with_17_chocolates = 317\n\n    chocolate_mass_diff = mass_with_17_chocolates - mass_with_5_chocolates\n    chocolates_diff = 17 - 5\n\n    mass_per_chocolate = chocolate_mass_diff / chocolates_diff\n\n    jar_mass = mass_with_5_chocolates - (5 * mass_per_chocolate)\n    mass_with_10_chocolates = jar_mass + (10 * mass_per_chocolate)\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def number_of_divisors(n):\n        divisors = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n\n    ans = number_of_divisors(200) - 1  # subtract 1 for the number itself, as it's not a sum of equal parts\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n    \n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    perimeter = (144 + 204) * 2 - 4  # subtract 4 because corners are planted already\n    wheat_count = 116 - 4  # subtract 4 because corners are planted already\n    distance_between_wheat = perimeter / wheat_count\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lana, mark = symbols('lana mark')\n    total_sweets = 674\n    \n    equation1 = Eq(lana + mark, total_sweets)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n    \n    solutions = solve((equation1, equation2), (lana, mark))\n    \n    difference = solutions[lana] - solutions[mark]\n    \n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    total_stickers_dorothy = 96\n    timmy_sticker_ratio = 8\n    kevin_extra_stickers = 45\n\n    timmy_stickers = total_stickers_dorothy // timmy_sticker_ratio\n    kevin_stickers = timmy_stickers + kevin_extra_stickers\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let x be the total number of days in Robert's summer holiday.\n    # He spent half of it working, leaving half the days.\n    # Then he spent half of the remaining time, leaving a quarter of the days.\n    # After spending 4 days at a friend's house, he had 2 weeks left (14 days).\n    # So, the equation representing the situation is:\n    # x/4 - 4 = 14\n    # Solving this yields the length of the holiday.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x / 4 - 4, 14)\n    total_days = solve(equation, x)[0]\n    \n    # The solve function returns the solution in a list, so we take the first element.\n    return total_days\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_for_one_cat_to_catch_one_fish = 10\n    # Number of fish to catch\n    number_of_fish = 5\n    # Total time remains same because 5 cats will catch 5 fish parallely\n    total_time_to_catch_five_fish = time_for_one_cat_to_catch_one_fish\n    \n    return total_time_to_catch_five_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # The total perimeter of the rectangular field\n    perimeter = (144 + 204) * 2\n\n    # Since there is a wheat plant at every corner, we effectively have 116 - 4 plants\n    # to distribute evenly along the side minus the 4 corners\n    num_wheat_along_side = 116 - 4\n\n    # The distance between every 2 wheat plants is equal to the perimeter\n    # divided by the number of intervals, which is the number of plants minus 1\n    distance = perimeter / num_wheat_along_side\n\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    multiplied_by_9 = result / 9\n    divided_by_4 = multiplied_by_9 * 4\n    added_with_3 = divided_by_4 - 3\n    \n    return added_with_3\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remaining_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40  # Ellie's rate per week\n    combined_weeks = 4\n\n    # Calculate the combined rate per week\n    combined_rate = total_people / combined_weeks\n\n    # Calculate Gloria's rate per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Calculate the weeks Gloria needs to finish the work by herself\n    gloria_weeks = total_people / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 4):\n        A, C, E, F = perm\n        if int(f'2{A}0{C}{E}{F}') * 5 == int(f'{E}{F}2{A}0{C}') * 6:\n            return int(f'{F}{A}{C}{E}')\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Let x be the percent of rice in dogfood B, which is what we need to find out.\n    # The amount of rice in dogfood A is 15 * 0.40 (40% of 15 pounds)\n    # The amount of rice in dogfood B will then be 0.60 * x (x% of 60 pounds)\n    # Together, the total weight of the mixture is 15 + 60 = 75 pounds.\n    # The amount of rice in the mixture is 28% of 75 = 0.28 * 75.\n    # We can create the equation: \n    # 15 * 0.40 + 60 * x = 75 * 0.28\n\n    # Solving for x:\n    x = (75 * 0.28 - 15 * 0.40) / 60\n\n    return x * 100  # Convert to percent\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let the four numbers be a, b, c, d in descending order (a > b > c > d)\n    # According to the problem:\n    # d + (a + b + c) / 3 = 39\n    # a + (d + b + c) / 3 = 51\n    # Simplifying both equations we get:\n    # 3d + a + b + c = 117\n    # and\n    # 3a + d + b + c = 153\n    # Subtracting the two equations, we get:\n    # 2a - 2d = 36, hence a - d = 18\n    # The largest possible value for a means we need to minimize the value of d.\n    # Since they are distinct positive whole numbers, the minimum value for d is 1.\n    # Therefore, the largest possible value for a is d + 18 = 1 + 18 = 19.\n    return 19\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # in milliliters\n    hours = 2\n    minutes_in_hour = 60\n    total_minutes = hours * minutes_in_hour\n    total_milliliters = rate_per_minute * total_minutes\n    liters_per_1000_milliliters = 1\n    total_liters = total_milliliters / (1000 * liters_per_1000_milliliters)  # converting milliliters to liters\n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n    number_of_trees = (road_length // tree_interval) + 1\n    return number_of_trees\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pens, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    return 100 - ((2 * 10) + (5 * 5) + (4 * 0.20))\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A / B, 4 / 3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, 200)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Relative speed between Barbara and Catherine\n    relative_speed = 60 - 45  # (in metres per minute)\n\n    # At the time Barbara reaches the mall, the relative distance she's covered more than Catherine\n    relative_distance = 60  # (in metres)\n    \n    # We use the formula distance = speed * time, rearranged to time = distance / speed, to find how long Barbara walked\n    time_taken = relative_distance / relative_speed\n    \n    # Now we can find the absolute distance Barbara walked which is the same as the distance to the mall\n    barbara_speed = 60\n    distance_to_mall = barbara_speed * time_taken\n    \n    return distance_to_mall\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes per plate\n    total_time = 18  # total minutes available\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 50\n    for student in range(1, 51):\n        # If the student number is multiple of 4 or 6, they will turn\n        if student % 4 == 0 or student % 6 == 0:\n            students_facing_teacher -= 1\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n\n    ans = numerator // denominator\n\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    \n    first_day_sold = total_pears * (2 / 5)\n    \n    second_day_sold = (total_pears - first_day_sold) * (7 / 9)\n\n    return second_day_sold\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nini, dad = symbols('nini dad')\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    ans = (3/4) * (30/100) * 120\n    return ans\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n\n    ways_to_pick_boy = num_boys \n    ways_to_pick_girl = num_girls \n\n    total_ways = ways_to_pick_boy * ways_to_pick_girl\n\n    return total_ways\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n    \n    count = 0\n    for num in range(10, 100):\n        if isprime(num) and num != int(str(num)[::-1]) and isprime(int(str(num)[::-1])):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # If at least one student gets at least 3 apples\n    # then the minimum number of students is when one student gets 3 apples,\n    # and the rest get 1 apple each, since we are looking for the class size.\n    # Subtract the 3 apples from the total and divide by 1 (since each of the other students\n    # gets exactly 1 apple) to find out how many other students there are.\n    # Finally, add 1 for the student who got the 3 apples.\n\n    total_apples = 29\n    min_apples_to_one_student = 3\n\n    # Calculate the number of students except the one who got 3 apples\n    num_students_except_one = (total_apples - min_apples_to_one_student)\n\n    # Calculate the total class size by adding the one student who got 3 apples\n    class_size = num_students_except_one + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # If the alcoholic is not at two of the bars, they must be at the third bar.\n    # Therefore, the probability is 100% or 1.\n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)  # Eliot is now twice his cousin's age\n    equation2 = Eq(eliot + 4, 16)  # In 4 years' time Eliot will be 16\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_age_in_4_years = solutions[cousin] + 4\n\n    return cousin_age_in_4_years\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    # let x be the number of blue balls\n    # and y be the number of green balls\n    # from the problem we know that:\n    # x + y = 140 (total number of balls)\n    # after removing 2/5 of the blue balls and 28 green balls\n    # we have (3/5)x blue balls and (y - 28) green balls\n    # and they are equal\n    # so we have the following equation:\n    # (3/5)x = y - 28\n    \n    # We can solve these two equations:\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 140)\n    equation2 = Eq((3/5)*x, y - 28)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # The ratio of marked fish to total fish in the second catch should approximate the ratio\n    # of marked fish to the total number of fish in the pond.\n    # So, if 16 out of 100 caught fish are marked, the estimated total N can be calculated as follows:\n    # 16/100 = 100/N -> N = (100 * 100) / 16\n\n    marked_in_second_catch = 16\n    times_caught = 100\n\n    estimated_total_fish = (times_caught * times_caught) / marked_in_second_catch\n\n    return int(estimated_total_fish)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d_nancy be the distance Nancy walks and d_randy be the distance Randy walks\n    d_nancy, d_randy = symbols('d_nancy d_randy')\n\n    # We know that Randy walks 10 meters more than Nancy\n    equation1 = Eq(d_randy, d_nancy + 10)\n\n    # For every 2 meters that Nancy walks, Randy walks 3 meters\n    # We can express that as a ratio d_randy/d_nancy = 3/2\n    equation2 = Eq(d_randy / d_nancy, 3 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d_nancy, d_randy))\n\n    # Calculate the total distance when they set off by adding the distances they each walk\n    total_distance = solutions[d_nancy] + solutions[d_randy]\n\n    return total_distance.evalf()\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Convert mixed numbers to improper fractions and sum in the numerator\n    numerator = ((1*99 + 3) / 99) + ((3*33 + 3) / 33) + ((9*11 + 3) / 11)\n    # Convert mixed numbers to improper fractions and sum in the denominator\n    denominator = ((1*99 + 1) / 99) + ((3*33 + 1) / 33) + ((9*11 + 1) / 11)\n    # Calculate division of the sums\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let N = 0.2014141414...\n    # Then 100N = 20.14141414...\n    # Subtracting these two equations, we get:\n    # 99N = 20.14141414... - 0.2014141414... = 19.94\n    # Hence N = 19.94 / 99\n    # x/9900 = N -> x = N * 9900\n    N = 19.94 / 99\n    x = N * 9900\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    # Bronson has twice as many marbles as Ali\n    equation2 = Eq(bronson, 2 * ali)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))  # sum of 20, 18, 16, 14, 12, 10\n    sum2 = sum(range(9, 20, 2))   # sum of 19, 17, 15, 13, 11, 9\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if num % 10 == 2:\n            new_num = int(str(num // 10 + 2000000))\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    passed_only_first = passed_first - (total_students - failed_second - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # Iterate over the range of possible hundreds place digit\n    for hundreds in range(1, 10):  # Hundreds place cannot be zero\n        for tens in range(10):  # Tens place can be from 0 to 9\n            # Ones place must be even and the sum of digits should be 8\n            ones = 8 - (hundreds + tens)\n            # Check if ones is a valid digit, even, and all digits are different\n            if 0 <= ones < 10 and ones % 2 == 0 and len({hundreds, tens, ones}) == 3:\n                count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n\n    bars_left = total_cereal_bars % people\n\n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    total = (a+b+c)*111*6\n    return total\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences as per the Chinese Remainder Theorem\n    congruences = [(3, 5), (6, 8), (7, 9)]\n\n    # Use CRT to find a solution that satisfies all the congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the smallest number that is greater than 500\n    while number < 500:\n        number += 5 * 8 * 9\n\n    # The number must also be less than 1000\n    ans = number if number < 1000 else None\n\n    return ans\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 since 'ab' is a two-digit number\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            # Check if ones and tens digits are both 0\n            if product % 100 == 0:\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_for_300 = 300 / rate_per_hour\n    return hours_for_300\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of potatoes in small sack (s) and large sack (l)\n    s, l = symbols('s l')\n\n    # Set up the equation based on the problem statement\n    eq1 = Eq(l, s * 1.2)   # Large sack holds 20% more potatoes than the small sack\n    eq2 = Eq(l + s, 77)    # Together they contain 77 potatoes\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (l, s))\n\n    # We are interested in the number of potatoes in the large sack\n    return solutions[l]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of oranges and y be the number of apples Mrs Lee originally had.\n    x, y = symbols('x y')\n\n    # She sold half the apples.\n    equation1 = Eq(y / 2, y - y / 2)\n\n    # She sold 35 oranges.\n    equation2 = Eq(x - 35, x / 2)\n\n    # In total, she had initially 125 oranges and apples.\n    equation3 = Eq(x + y, 125)\n\n    # After selling, she had equal number of oranges and apples.\n    equation4 = Eq((x - 35), (y / 2))\n\n    # Solve the system of equations\n    solutions = solve((equation2, equation3, equation4), (x, y))\n\n    # The number of oranges Mrs Lee had at first.\n    return solutions[x]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    frac = 5 / 9\n    return round(frac, 2)\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number (10001)\n    least_5_digit_palindrome = int(\"10001\")\n    \n    # The greatest 6-digit palindrome number (999999)\n    greatest_6_digit_palindrome = int(\"999999\")\n    \n    # Difference between the greatest 6-digit palindrome and least 5-digit palindrome\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n\n    if students % cabin_capacity == 0:\n        ans = students // cabin_capacity\n    else:\n        ans = (students // cabin_capacity) + 1\n\n    return ans\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    # Calculate the number of digits in each range\n    single_digit_numbers = 9  # from 1 to 9\n    two_digit_numbers = (58 - 9) * 2  # from 10 to 58, each has 2 digits\n\n    # Sum up the digits from all ranges\n    total_digits = single_digit_numbers + two_digit_numbers\n\n    return total_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Start counting digits from the right\n    current_number = 1200\n    digits_counted = 0\n    while digits_counted < 2011:\n        current_number_str = str(current_number)\n        number_length = len(current_number_str)\n        if digits_counted + number_length >= 2011:\n            # The 2011th digit is within the current number\n            diff = 2011 - digits_counted\n            # Get the digit from the right by subtracting diff from the length\n            ans = int(current_number_str[-diff])\n            return ans\n        # If not found, add the digits of the current number to the count and decrease the number\n        digits_counted += number_length\n        current_number -= 1\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of coins\n    coins = symbols('coins')\n\n    # Set up the equation based on the problem statement\n    equation = Eq(1/4 * coins + 2, 1/3 * coins)\n\n    # Solve the equation\n    solution = solve(equation, coins)\n\n    # Get the number of coins\n    return solution[0]\n    \nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # calculate the number of terms in the sequence\n    last_term = 50 // 5 * 5\n    num_terms = last_term // 5\n\n    # sum of an arithmetic sequence formula: n/2 * (first term + last term)\n    sum_multiples = num_terms / 2 * (5 + last_term)\n\n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    total_speed = speed_planet1 + speed_planet2  # The relative speed when moving towards each other\n    time = 5  # minutes ago\n\n    distance_apart = total_speed * time  # Distance formula: speed * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c and the number of motorbikes be m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # 1) c + m = 140 (The total number of vehicles is 140)\n    # 2) 4c + 2m = 490 (The total number of tyres is 490)\n\n    # We can solve these equations to find the number of cars (c).\n    # From the first equation: m = 140 - c\n    # Substitute m into the second equation:\n    # 4c + 2(140 - c) = 490\n    # 4c + 280 - 2c = 490\n    # 2c = 490 - 280\n    # 2c = 210\n    # c = 210 / 2\n    # c = 105\n\n    c = (490 - 2 * 140) // 2  # Use integer division for an integer result\n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    digits = [0, 1, 2, 3, 4, 5]\n    count = 0\n\n    for tens in digits:\n        if tens == 0:  # Skip if the tens digit is 0 as we need a two-digit number\n            continue\n        for ones in digits:\n            if tens != ones:  # The two digits must be different\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    common_difference = 34 - 26  # It's an arithmetic sequence, so the difference is constant.\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n\n    return number_of_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, n = symbols('a n')\n    eq1 = 190 % n - a\n    eq2 = 137 % n - (a + 4)\n    eq3 = 101 % n - (a + 6)\n    \n    solutions = solve((eq1, eq2, eq3), (a, n))\n    \n    # The provided clues indicate that n should be the same in all three mod equations\n    # So we can pick any of the (a, n) pairs to find the common n.\n    for a_val, n_val in solutions:\n        if 190 % n_val == a_val and 137 % n_val == a_val + 4 and 101 % n_val == a_val + 6:\n            divisor = n_val\n            break\n    \n    remainder = 299 % divisor\n    \n    return remainder\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    rounded_number = round(number, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    accumulated_distance = 0\n    day = 0\n\n    while accumulated_distance < total_distance:\n        day += 1\n        accumulated_distance += climb_per_day\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kilograms = 960\n    per_box_kilograms = 8\n\n    num_boxes = total_kilograms // per_box_kilograms\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n    original_number = (result - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9 / 5) * (25 / 100) + (1 / 4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    largest_sum = 0\n    for x in range(2, 200):\n        if all(x % i != 0 for i in range(2, int(x ** 0.5) + 1)):\n            y = (200 - x) // (x - 1)\n            if x != y and all(y % i != 0 for i in range(2, int(y ** 0.5) + 1)) and x * (2 + y) == 200 + y:\n                largest_sum = max(largest_sum, x + y)\n    return largest_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    count_4 = 1\n    count_5 = 1\n    # Calculate the number of all possible permutations of these numbers\n    permutations = factorial(total_digits) \n    # Divide by the repetitions for each number to get the number of unique permutations\n    permutations //= (factorial(count_2) * factorial(count_3) * factorial(count_4) * factorial(count_5)) \n    return permutations\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    money_spent = 2  # 2p spent, which is one-quarter of the total amount\n    total_money = money_spent * 4  # To find the total amount, multiply by 4\n\n    return total_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    # In round-robin, each team plays every other team once, so we have 7 games per team.\n    # However, this counts each game twice (once for each team), so we divide by 2.\n    total_rounds = (teams * (teams - 1)) // 2\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n\n    denom = Fraction(1, 6) + Fraction(1, 5)\n\n    ans = (num1 + num2) / denom\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    all_permutations.sort()\n    return int(all_permutations[4])\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    total_classes = 5\n    donation_per_student = 5.78\n    total_donation = students_per_class * total_classes * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Find the first number (12) and last number (90) in the series\n    first_number = 12\n    last_number = 90\n\n    # Calculate the total number of terms in the series\n    total_terms = (last_number - first_number) // 2 + 1  # This gives the number of even numbers\n\n    # If the number of terms is even, the sum is even because the sum of two even numbers is even.\n    # If the number of terms is odd, the sum is odd because the sum of even numbers and one odd number is odd.\n    # Since the first number in the series is even, we only need to check if the total number of terms is odd or even\n    if total_terms % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let x, y, and z represent the numbers on Qiang, Rory, and Sophia's hats respectively.\n    # We have the following system of equations from the problem statement:\n    # x + y = 11\n    # x + z = 17\n    # y + z = 22\n\n    # From these equations, we can express z as (17 - x), and y as (11 - x).\n    # We can then plug these into the third equation: (11 - x) + (17 - x) = 22.\n\n    # Subtract 11 from both sides: 6 - x + (17 - x) = 11\n    # Combine like terms: (6 + 17) - 2x = 11\n    # Solve for x: 23 - 2x = 11\n    # 23 - 11 = 2x\n    # 12 = 2x\n    # x = 6\n\n    # Using x to find y and z\n    # y = 11 - x = 11 - 6 = 5\n    # z = 17 - x = 17 - 6 = 11\n\n    # Now we have the numbers on the hats: x = 6, y = 5, z = 11\n    # The largest number is z = 11\n\n    return 11\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate_per_day = 1000 / 5\n    days_needed = 2600 / rate_per_day\n    return days_needed\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_apart = 5 # meters\n    \n    # The total length is the distance between trees multiplied by the number of gaps between trees\n    # The number of gaps is one less than the number of trees\n    length_of_road = (number_of_trees - 1) * distance_apart\n    \n    return length_of_road\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed_per_hour = 250 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    \n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    product = Fraction(1, 1)  # Initialize to the value of 1 represented as a fraction\n    for i in range(2, 10):  # Loop from 2 to 9\n        product *= Fraction(1, 1) + Fraction(1, i)  # Multiply by mixed numbers converted to improper fractions\n\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 21))\n    count = 0\n    for prime in primes:\n        if (prime - 6) in primes or (prime + 6) in primes:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    digits = 0\n    for page in range(1, 346):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division to get enough buses\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    total_prize = symbols('total_prize')\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    sol = solve(equation, total_prize)\n    return sol[0]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for x\n    x = symbols('x')\n    \n    # Since the distances covered are in the same time intervals of 30 minutes:\n    # Distance traveled in the first 30 minutes is (1/2)*x\n    # Distance traveled in the second 30 minutes is (1/2)*(x-20)\n    # Distance traveled in the last 30 minutes is (1/2)*(x+10)\n    \n    # Convert 30 minutes to hours which is 1/2\n    time_in_hours = 0.5\n    \n    # Create an equation based on the total distance\n    distance_equation = Eq((x * time_in_hours) + ((x - 20) * time_in_hours) + ((x + 10) * time_in_hours), 70)\n    \n    # Solve the equation for x\n    solution = solve(distance_equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to choose the captain's position next to the coach (2 ways, coach's left or right)\n    captain_positions = 2\n\n    # Number of ways to arrange the remaining 5 players\n    other_players_arrangements = factorial(5)\n\n    # Total number of ways to line up the team\n    total_ways = captain_positions * other_players_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0\n    boys_excess = 20\n    side_length = 1  # starting with the smallest possible square\n\n    while True:\n        # Calculate boys for current layer\n        boys_current_layer = (side_length * 4) - 4 if side_length > 1 else 1\n        girls_current_layer = ((side_length - 2) * 4) - 4 if side_length > 2 else 0\n        \n        total_boys = (boys_current_layer + girls_current_layer) + total_students\n        total_girls = total_students\n\n        if total_boys - total_girls == boys_excess:\n            total_students = total_boys + total_girls\n            break\n        else:\n            total_students += boys_current_layer + girls_current_layer\n            side_length += 2  # Increase the side length for the next square layer\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    penguin = 1\n    while True:\n        total_fish_3 = 3 * penguin + 25\n        total_fish_6 = 6 * (penguin - 1) + 1\n        if total_fish_3 == total_fish_6:\n            break\n        penguin += 1\n    return penguin\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    total_sum = 0\n    num_terms = 30\n    current_number = 1\n\n    while num_terms > 0:\n        repeat_times = current_number\n        for _ in range(repeat_times):\n            if num_terms == 0:\n                break\n            total_sum += current_number\n            num_terms -= 1\n        current_number += 1\n\n    return total_sum\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    # For a number to be divisible by 11, the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions should be 0 or divisible by 11.\n    for a in range(10):  # Loop through all possible values for 'a' (0-9)\n        number = int(f\"1{a}7731\")\n        odd_sum = 1 + 7 + 3 + 1  # Sum of digits in odd positions (1-indexed)\n        even_sum = a + 7 + 7  # Sum of digits in even positions (1-indexed)\n        if (odd_sum - even_sum) % 11 == 0:\n            return a  # Return the value of 'a' if the number is divisible by 11\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    cindy_votes = 47\n    highest_other = max(31, 41)\n    \n    minimum_votes_cindy_needs = highest_other + 1\n    additional_votes_cindy_needs = minimum_votes_cindy_needs - cindy_votes\n    \n    return additional_votes_cindy_needs\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n    from sympy import Rational\n\n    # Calculation 1: 7 / -3.333... / (-0.027)^(1/3)\n    term1_numerator = Rational(7) / Rational(-10, 3)\n    term1_denominator = Rational(-27, 1000) ** Rational(1, 3)\n    term1 = term1_numerator / term1_denominator\n\n    # Calculation 2: (2^3) / (4^2) / (0.125 * [1.8 - (0.2 * 7)])\n    term2_numerator = Rational(2 ** 3) / Rational(4 ** 2)\n    term2_denominator = Rational(125, 1000) * (Rational(18, 10) - (Rational(2, 10) * 7))\n    term2 = term2_numerator / term2_denominator\n\n    # Calculation 3: 0.1 / 0.142857... + (2 * 0.3)\n    term3_first = Rational(1, 10) / Rational(1, 7)\n    term3_second = 2 * Rational(3, 10)\n    term3 = term3_first + term3_second\n\n    # The final answer is term1 + term2 - term3\n    ans = term1 + term2 - term3\n    return ans.evalf()\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_age_2005 = 50\n    james_age_1997 = 20\n\n    # Calculate years between 2005 and 1997\n    years_diff = 2005 - 1997\n\n    # Calculate James's birth year\n    james_birth_year = 1997 - james_age_1997\n\n    # Calculate Gina's birth year\n    gina_birth_year = 2005 - gina_age_2005\n\n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    salary = 3300\n    commission_2percent = 0.02\n    commission_5percent = 0.05\n    breakpoint = 25000\n\n    # Calculate commission earned beyond base salary\n    extra_commission = salary - base_salary\n\n    # Check if all commission was from the 2% bracket\n    if extra_commission <= breakpoint * commission_2percent:\n        total_sales = extra_commission / commission_2percent\n    else:\n        # Commission for the first 25000\n        commission_first_bracket = breakpoint * commission_2percent\n        # Remaining commission from the 5% bracket\n        extra_commission -= commission_first_bracket\n        # Sales for which 5% commission was received\n        sales_extra_5percent = extra_commission / commission_5percent\n        # Total sales\n        total_sales = breakpoint + sales_extra_5percent\n\n    return total_sales\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    ryan_new = ryan + 20\n    audrey_new = audrey - 80\n\n    equation1 = Eq(ryan / audrey, 2/7)\n    equation2 = Eq(ryan_new / audrey_new, 1/3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_two = total_height_for_six - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n\n    return average_height_of_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n    # Probability of failing the first attempt but passing on the second attempt\n    # 0.6 is the probability of failing the first attempt\n    p_second = 0.6 * 0.5\n    # Probability of failing the first two attempts but passing on the third attempt\n    # (0.6 * 0.5) is the probability of failing the second attempt\n    p_third = 0.6 * 0.5 * 0.3\n\n    # The probability that the driver passes before their fourth attempt\n    # is the sum of the probabilities of passing on the first, second, or third attempts.\n    p_pass_before_fourth = p_first + p_second + p_third\n\n    return p_pass_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages_with_one_digit = 9\n    pages_with_two_digits = 90 * 2\n    pages_with_three_digits = 900 * 3\n    \n    if total_digits <= pages_with_one_digit:\n        return total_digits\n    elif total_digits <= pages_with_one_digit + pages_with_two_digits:\n        return 9 + (total_digits - pages_with_one_digit) // 2\n    else:\n        total_digits -= (pages_with_one_digit + pages_with_two_digits)\n        return 9 + 90 + total_digits // 3\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    # Number of ways to travel from City A to City B\n    routes_AB = 2\n    # Number of ways to travel from City B to City C\n    routes_BC = 3\n    # Total number of different routes from City A to City C\n    total_routes = routes_AB * routes_BC\n\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    last_term = 50 - 29  # Since we need the first 30 numbers\n    num_terms = 30\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # 5 days 7m each and 6th day 3m\n    total_days = 6  # Total days including the 6th day\n    remaining_distance = 18 - total_climbed  # Remaining distance after 6th day\n    nightly_slide = 7 - (remaining_distance / (total_days - 1))  # Average nightly slide over 5 nights\n\n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second = 0\n    for a in range(1, 48):  # Student 1\n        for b in range(a + 1, 48):  # Student 2\n            for c in range(b + 1, 48):  # Student 3\n                d = 48 - (a + b + c)  # Student 4\n                if d > c and d < 48:\n                    max_apples_for_second = max(max_apples_for_second, b)\n\n    return max_apples_for_second\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # The strategy is to minimize the time by always having the quickest row back the boat.\n    # 1. Eddie(1) and Jack(2) go across, Eddie(1) comes back - Total time = 3 mins\n    # 2. Mary(10) and Rose(5) go across, Jack(2) comes back - Total time = 15 mins\n    # 3. Eddie(1) and Jack(2) go across again - Total time = 17 mins\n\n    # Calculate total time using the described strategy\n    total_time = (1 + 2) + 1 + (10 + 5) + 2\n    return total_time\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum([(2 * i + 1) ** 2 - (2 * (i + 1)) ** 2 for i in range(0, 89, 2)])\n    return ans\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Start with the assumption that the difference between the number of boys and girls is 44.\n    difference = 44\n\n    # Since the number of boys is more than the number of girls and they are arranged in alternate layers\n    # in a square, we check for square numbers starting from 1 (1x1), 2(2x2), ... and so on until we \n    # find a case where the difference between the boys and girls layers is 44.\n    # We will iterate over possible side lengths of the square until we find the correct arrangement.\n\n    side_length = 1\n    while True:\n        # The number of students in each layer is the perimeter of the square minus 4\n        # (since the four corners are counted twice when adding the lengths of the sides).\n        students_per_layer = 4 * side_length - 4 if side_length > 1 else 1\n\n        # The number of girls will be the total number of students in odd layers starting from the second layer.\n        # The number of boys will be the total number of students in even layers plus the first layer.\n        # Calculate layers separately for boys and girls.\n        boys_layers = (side_length + 1) // 2  # Integer division\n        girls_layers = side_length // 2\n\n        # Calculate the number of boys and girls based on their layers.\n        boys = boys_layers * students_per_layer + (1 if side_length % 2 != 0 else 0)  # Add center boy if needed\n        girls = girls_layers * students_per_layer\n\n        # Check if the difference matches the given condition.\n        if boys - girls == difference:\n            # If the condition is met, calculate the total number of students.\n            # Total students are the sum of students of each from layer 1 to the current layer.\n            total_students = side_length**2  # Since students are arranged in a square.\n            return total_students\n\n        # Increment side length to check the next possible square size.\n        side_length += 1\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let original length be L and width be W\n    L, W = symbols('L W')\n    \n    # Increased length\n    L_inc = L + 12\n    \n    # Perimeter of a rectangle P = 2*(length + width)\n    # Given that the perimeter of the rectangle after increasing length by 12 is 38\n    equation = Eq(2 * (L_inc + W), 38)\n    \n    # Express L in terms of W from the perimeter equation\n    L_expr = solve(equation, L)[0]\n    \n    # Substitute L in terms of W into the equation to find the perimeter of the original rectangle\n    # Original perimeter P_orig = 2*(L + W)\n    P_orig = 2 * (L_expr + W)\n    \n    # Since L_expr is L in terms of W and it also includes the 12 cm increment,\n    # to find the original perimeter, we substitute L back again from L_expr\n    P_orig = P_orig.subs(L, L_expr - 12)\n    \n    # Lastly, since the perimeter is a fixed value after the increment, we solve for W\n    W_value = solve(equation, W)[0]\n    \n    # We now have the value for W, we can find the original perimeter by plugging W_value back\n    orig_perimeter = P_orig.subs(W, W_value)\n\n    return orig_perimeter\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    num_students = 4\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ans = (8 - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from fractions import Fraction\n\n    remaining_after_tv = 1 - Fraction(5, 9)\n    remaining_after_table = remaining_after_tv * (1 - Fraction(3, 4))\n    total_salary = 160 / remaining_after_table\n    cost_of_tv = total_salary * Fraction(5, 9)\n\n    return float(cost_of_tv)\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    import math\n    # For a circular permutation with n different objects and n-1 fixed positions, the number of arrangements is (n-1)!\n    num_people = 7\n    num_seats = 8\n\n    # One seat is always empty, so we can fix one person and arrange the rest\n    # This eliminates the rotation cases that count as the same order\n    ans = math.factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # The first day Jenny eats chocolate.\n    # There are two options for Jenny on the second day, either peaches or strawberries\n    # Then, for each of those options, there are again two options for the third day,\n    # because she cannot eat what she ate on the second day.\n    # Hence, for each of the two choices on the second day, there are two choices on the third day.\n\n    # So the total number of different ways Jenny can eat over the three days is:\n    ways_first_day = 1  # chocolate\n    ways_second_day = 2  # peaches or strawberries\n    ways_third_day = 2  # the one not eaten on the second day\n\n    # Multiply the ways for each day\n    total_ways = ways_first_day * ways_second_day * ways_third_day\n    return total_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5/3)\n    return result\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for John's and Emma's current ages\n    john, emma = symbols('john emma')\n\n    # We know that in 3 years, the sum of their ages will be 27\n    # Therefore, (john + 3) + (emma + 3) = 27\n    future_ages_sum_eq = Eq(john + 3 + emma + 3, 27)\n  \n    # We also know that Emma's age is the difference between her own and John's ages\n    # Therefore, emma = john - emma\n    emma_age_diff_eq = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((future_ages_sum_eq, emma_age_diff_eq), (john, emma))\n\n    # Return Emma's age\n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    ans = comb(15, 3)\n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    tom_speed = 48          # Tom travels 48 km per hour\n    jack_speed = 50         # Jack travels 50 km per hour\n    jack_delay = 3          # Jack left 3 hours later than Tom\n    time_to_meet = 5        # After 5 hours, they are 15 km apart\n    \n    # Tom has been driving for 3 (delay) + 5 (until they are 15 km apart) hours\n    tom_travel_time = jack_delay + time_to_meet\n    \n    # Calculate distance traveled by Tom and Jack\n    tom_distance = tom_speed * tom_travel_time\n    jack_distance = jack_speed * time_to_meet\n    \n    # Total distance is the sum of the distance traveled by both, plus the 15 km they are apart\n    total_distance = tom_distance + jack_distance + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    # 1/4 chose tea. Therefore, tea_degree = 1/4 * 360 = 90 degrees\n    tea_degree = 90\n    # 30% chose cola. Therefore, cola_degree = 30% * 360 = 108 degrees\n    cola_degree = 108\n    # 7 people chose coffee, which leaves us with the degree for coffee unknown\n    coffee_degree = symbols('coffee_degree')\n    # Rest chose water which is given as 36 degrees\n    water_degree = 36\n\n    # Sum of degrees in a pie chart is always 360 degrees\n    equation = Eq(tea_degree + cola_degree + coffee_degree + water_degree, 360)\n    \n    # Solve for coffee_degree\n    degrees_solution = solve(equation, coffee_degree)\n    coffee_degree_val = degrees_solution[coffee_degree]\n    \n    # Now, we know that 7 people correspond to coffee_degree_val degrees\n    # Since each person represents coffee_degree_val/7 degrees,\n    # the total number of people is 360 divided by the degree per person\n    total_people = 360 / (coffee_degree_val/7)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    # Each child has 2 legs, and each dog has 4 legs.\n    # There are 3 times as many dogs as children, so the number of dogs is '3 * children'.\n    legs_children = 2 * children\n    legs_dogs = 4 * (3 * children)\n    total_legs = legs_children + legs_dogs\n\n    # Set up the equation based on total number of legs.\n    equation = Eq(total_legs, 56)\n\n    # Solve the equation for the number of children.\n    solutions = solve(equation, children)\n\n    return solutions[0]  # Return only the number of children, not a tuple.\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    return (26 + 4) // 5\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    present_fraction = 3/5  # If two fifths are absent, three fifths are present\n\n    total_pupils = present_pupils / present_fraction\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    z = (4 + 5)\n    return z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Calculate the number of trees in each side\n    num_trees_length = (length // distance)\n    num_trees_width = (width // distance)\n\n    # Calculate the total number of trees, considering overlap in the starting corner\n    total_trees = (num_trees_length + num_trees_length + num_trees_width + num_trees_width) \n\n    # Subtract the 4 corner trees as they are being counted twice (once for each side)\n    total_trees -= 4\n\n    return total_trees\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_paid = income * tax_rate\n    money_after_tax = income - tax_paid\n    return money_after_tax\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Let a represent the number of adults\n    # and c represent the number of children\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n    min_adults = 2  # at least two adults\n\n    # Since there were at least two adults, we start with 2 adults and increase\n    for a in range(min_adults, total_charge // adult_price + 1):\n        c = (total_charge - (adult_price * a)) / child_price\n        if c.is_integer() and c >= 0:  # Check if c is a non-negative integer\n            return int(c)  # Return the number of children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_each = total_sweets // people\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10000):  # Assuming the special number has less than 5 digits\n        new_number = int(str(9) + str(i)[:-1])  # Generate the new number with the 9 at the start\n        if new_number == 4 * (i):  # Check if the new number is four times the special number\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750  # in millilitres\n    ratio_squash_to_water = 1/9\n    total_mixture = total_squash / ratio_squash_to_water  # total mixture in millilitres\n    bottle_size_ml = 1000  # bottle size in millilitres\n\n    num_full_bottles = total_mixture // bottle_size_ml\n\n    return int(num_full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    return 180 / (0.6 * 100)\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas's calculation is incorrect.\n    # Correcting Thomas's solution:\n    # Li Yan spent 1/3 on a book, leaving her with 2/3 of the money.\n    # Then she spent 1/2 of the remainder (which is 1/2 * 2/3 = 1/3 of the original amount) on a bag.\n    # So the book and bag together cost her 1/3 + 1/3 = 2/3 of the original amount.\n    total_cost = 132\n    # 2/3 of the original amount is equal to the total cost\n    original_amount = total_cost / (2/3)\n    return original_amount\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # To find the last 2 digits of each term, we can compute them modulo 100\n    last_two_digits_6_2015 = pow(6, 2015, 100)  # Last two digits of 6^2015\n    last_two_digits_2015_6 = (2015 * 6) % 100   # Last two digits of 2015 * 6\n    last_two_digits_2015_6_2 = pow(2015, 6, 100)  # Last two digits of 2015^6\n\n    # Adding the last two digits of each term to find the final last two digits\n    result = (last_two_digits_6_2015 + last_two_digits_2015_6 + last_two_digits_2015_6_2) % 100\n\n    return result\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    ans = None\n    for A in range(10):\n        for C in range(10):\n            for E in range(1, 10):  # E cannot be 0 because we are looking for a 4-digit number \"FACE\"\n                for F in range(1, 10):  # F cannot be 0 due to multiplication rules\n                    if len(set([A, 2, 0, C, E, F])) == 6:  # all digits must be distinct\n                        ABCDEF = A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F\n                        EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            ans = A * 1000 + 2 * 100 + 0 * 10 + E * 1\n                            return ans\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for i in range(90):\n        if i % 6 == 4 and (i + 5) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since we know the first 5 factors, we can determine that the 6th, 7th, and 8th factors\n    # must be multiples of the highest known factor under the square root of the number.\n    # Given factors are 1, 2, 4, 7, and 8.\n    # The 6th and 7th factors must be 7*2 and 7*4 respectively (since the factors are ordered).\n    # Then the last factor, which is the number itself, must be 7*8 since 8 is the largest factor less than sqrt(number).\n    # Therefore, the number must be:\n    number = 7 * 8\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of animals originally\n    x = symbols('x')\n    # Since 65% were cows initially, the number of goats is (100% - 65%) * x -> 35% * x\n    # After adding 240 more animals, cows become 85% and goats' number doubled.\n    # New number of cows -> 85% * (x + 240), new number of goats -> 2 * (35% * x)\n    \n    # 85% * (x + 240) = 65% * x + 240 (since 240 more cows and goats were added)\n    equation1 = Eq(0.85*(x + 240), 0.65*x + 240)\n    # Solve the equation to find the value of x (original total number of animals)\n    total_animals = solve(equation1, x)[0]\n    # Calculate the original number of goats (35% of total animals)\n    goats = 0.35 * total_animals\n\n    return int(goats)\n    \nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the total number of cookies in a box\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # The amount of cookies sold in the second month is 7/20 more than the first month\n    # The amount of cookies kept in the second month is 3/20 less than the first month\n    equation = Eq(1680 + 1680 * (7/20) + 1680 * (3/20), x)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6  # 6th from the front\n    amy_position = 8     # 8th from the back\n\n    # Since Amy is directly behind Jolene, combine their positions\n    total_children = jolene_position + amy_position - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = (2 * jump_up) - slide_down\n\n    jumps_needed = 0\n    current_height = 0\n\n    while current_height < total_height:\n        jumps_needed += 1\n        current_height += jump_up\n        if current_height >= total_height:\n            break\n        # After every even number of jumps, the monkey slides down\n        if jumps_needed % 2 == 0:\n            current_height -= slide_down\n    \n    return jumps_needed\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Number of sunflowers on each side is the side length divided by the distance apart\n    # minus 1 because we are not counting the corner sunflower (it is shared with the next side)\n    sunflowers_per_side = side_length // distance_apart - 1\n\n    # As it's a pentagon, there are 5 sides\n    total_sunflowers = sunflowers_per_side * 5\n\n    # Adding the corner sunflowers, one on each of the 5 corners\n    total_sunflowers += 5\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    return 1.36 * 100\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    total_pence = 3 * 100  # Convert pounds to pence\n    stamp_price = 46  # Price of one stamp in pence\n    num_stamps = total_pence // stamp_price  # Calculate how many stamps can be bought\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2\n\n    # The number of full trips needed is the number of adventurers divided by the boat capacity\n    full_trips = adventurers // capacity\n\n    # Each full trip consists of a trip to the other side and a return trip, except the last one\n    total_trip_time = (full_trips * 2 - 1) * trip_time\n\n    # Check if there are adventurers left for a final trip that does not require a return\n    remaining_adventurers = adventurers % capacity\n    if remaining_adventurers > 0:\n        total_trip_time += trip_time\n\n    return total_trip_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the time Ryan would normally take at his usual speed.\n    # Let d be the distance to London.\n    \n    # At usual speed: d = 45 * t\n    # At reduced speed due to traffic: d = 30 * (t + 2)\n    \n    # Since the distance d is the same for both equations, we can equate them:\n    # 45 * t = 30 * (t + 2)\n    # Solving for t we get:\n    t = (30 * 2) / (45 - 30)\n    \n    return t\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # The given sequence is a pyramid sequence, which can be seen as two arithmetic sequences combined:\n    # One from 3 to 10, and another from 10 back to 3.\n    # The formula to calculate the sum of an arithmetic sequence is: n/2 * (first_term + last_term)\n    \n    # For the first sequence: 3 to 10\n    n_ascending = 10 - 3 + 1\n    sum_ascending = n_ascending/2 * (3 + 10)\n    \n    # For the second sequence: 10 to 3\n    n_descending = 10 - 3\n    sum_descending = n_descending/2 * (10 + 3)\n    \n    # The sum of the starting and ending 3 should be added only once, so we subtract one 3 from the descending sum\n    sum_descending -= 3\n    \n    # The total sum is the sum of both sequences\n    total_sum = sum_ascending + sum_descending\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def split_number(n, max_part):\n        if n == 0:\n            return 1\n        elif n < 0 or max_part == 0:\n            return 0\n        else:\n            return split_number(n, max_part - 1) + split_number(n - max_part, max_part)\n    \n    return split_number(5, 5) - 1 # Subtracting 1 to remove the count of the number itself being counted as one way.\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    # Iterate through the sequence until the 1997th term\n    for _ in range(1997 - 2):\n        a, b = b, a + b\n        # Only need the remainder of each term when divided by 3\n        a %= 3\n        b %= 3\n    # The 1997th term's remainder when divided by 3\n    return b % 3\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2\n    denominator = (4 + 2/3) + (38/59)\n    fraction = numerator / denominator\n    result = fraction / 2.501**3\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students\n    sweets_per_student1 = 6\n    sweets_per_student2 = 5\n    shortage1 = 26\n    shortage2 = 5\n\n    x = symbols('x')\n    # Equation 1: sweets_per_student1 * x + shortage1 = sweets_per_student2 * x + shortage2\n    equation = Eq(sweets_per_student1 * x + shortage1, sweets_per_student2 * x + shortage2)\n    # Solving the equation\n    num_students = solve(equation, x)[0]\n\n    # The total number of sweets\n    total_sweets = sweets_per_student2 * num_students + shortage2\n\n    return total_sweets\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, blue = symbols('white blue')\n    equation1 = Eq(white, 6 * blue)\n    equation2 = Eq(white + blue, 63)\n\n    solutions = solve((equation1, equation2), (white, blue))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')\n\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(leo + (leo - son), 70)\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Explanation:\n    # If the difference between fruits of neighboring trees is always 1,\n    # and there are 8 trees, then the sequence of fruits is an arithmetic\n    # sequence with a common difference of 1 or -1.\n    #\n    # We can start by assuming the smallest number of fruits on a tree is x.\n    # Then the total number of fruits, following the arithmetic sequence, would be:\n    # x + (x+1) + (x+2) + (x+3) + (x+4) + (x+5) + (x+6) + (x+7)\n    # This simplifies to 8x + 28.\n    #\n    # We know the sum must be 225, so we can form the equation:\n    # 8x + 28 = 225.\n    # \n    # Let's solve for x.\n\n    # Calculate the total sum minus the static part of the sequence sum\n    target_sum = 225 - 28  # Subtracting the static sum 1+2+3+4+5+6+7\n\n    # Since we have 8 trees, we will divide the target sum by 8\n    x = target_sum // 8  # floor division to get an integer result\n\n    # Now, we check if x is a whole number and whether it fits in the constraints\n    if target_sum % 8 == 0 and x >= 0:\n        # The sum of the sequence exists\n        # Return the sequence in the form of an equation\n        # The first tree has x fruits, and each subsequent tree has one more\n        return f\"x + (x+1) + (x+2) + (x+3) + (x+4) + (x+5) + (x+6) + (x+7) = {225}\"\n    else:\n        # It is not possible for the sum to be 225 due to the constraints\n        return \"Not possible since the sum cannot be divided evenly by 8.\"\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial as f\n\ndef solution():\n    # There are 4 singing (S) performances and 3 dancing (D) performances.\n\n    # To ensure there is at least 1 singing performance between dancing, we need to\n    # arrange the S's in such a way that they create slots for the D's:\n    # Example: S _ S _ S _ S, where the underscores represent possible places for the D's.\n\n    # The number of slots created by the S's is equal to the number of S's plus 1 (since we can\n    # also place D before the first S and after the last S).\n    # In this case, we have 5 slots where we can put our 3 D's.\n\n    # The number of ways to choose 3 slots out of 5 for the D's is given by the combination:\n    s_slots = 5  # Number of slots created by the S's\n    d_performances = 3  # Number of D's\n\n    # Number of ways to choose 3 slots out of 5\n    ways_to_place_d = f(s_slots) // (f(d_performances) * f(s_slots - d_performances))\n\n    # After placing the D's, we will have a fixed pattern where the S's and D's alternate.\n    # As there aren't any restrictions left, we can rearrange the individual S's and D's among themselves.\n\n    # Therefore, we multiply the number of ways to place the D's with the number of ways to arrange\n    # the S's and D's among themselves.\n    ways_to_arrange_s = f(4)  # 4 singing performances\n    ways_to_arrange_d = f(3)  # 3 dancing performances\n\n    # The total number of different ways is the combination of placing D's multiplied by\n    # the permutations of S's and D's\n    ans = ways_to_place_d * ways_to_arrange_s * ways_to_arrange_d\n    return ans\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n\n    heidi_age_now = 8\n    dad_age_now = 50\n\n    heidi_future_age = heidi_age_now + years\n    dad_future_age = dad_age_now + years\n\n    equation = Eq(dad_future_age, 4 * heidi_future_age)\n\n    years_later = solve(equation, years)\n\n    return years_later[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    zeros = 0\n    while n >= 5:\n        n //= 5\n        zeros += n\n    return zeros\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers is 120\n    average_three = 120\n    total_three = average_three * 3\n\n    # Average of four numbers is 150\n    average_four = 150\n    total_four = average_four * 4\n\n    # Fourth number is the difference between total of four and total of three\n    fourth_number = total_four - total_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    ans = (11 * 14 + 26) / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    # We are given that 216r is a square number\n    # Therefore, r must be such that 216r is a perfect square\n    # We know that 216 = 2^3 * 3^3, so to make it a square number, we must multiply it by 2^1 * 3^1 to make the powers even\n    # Thus, r must be 2^1 * 3^1 = 2 * 3 = 6 for 216r to be a perfect square\n    r = 2 * 3\n    return r\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    return 10.5 * 4\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3/13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # Calculate net distance climbed in the first 8 days\n    net_distance_per_day = 8 - 3\n    net_distance_8_days = net_distance_per_day * 8\n    \n    # On the 9th day, the snail climbs 8m and gets out\n    final_day_climb = 8\n    \n    # The total depth of the well\n    depth_of_well = net_distance_8_days + final_day_climb\n    \n    return depth_of_well\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # The formula to calculate the dividend is: dividend = divisor * quotient + remainder\n    # The smallest possible dividend occurs with the smallest possible divisor, which is 1 more than the remainder.\n    # This is because the divisor must be greater than the remainder for a valid division in this context.\n    smallest_divisor = remainder + 1\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Rachel buys 3 bags of sweets and 5 cans of drink for £4.90\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n\n    # Rosie buys 1 bag of sweets and 3 cans of drink for £2.70\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)  # Total ways to arrange 6 people in a line\n    teddy_ways = factorial(5)  # Ways to arrange the remaining 5 people if Teddy is fixed on the furthest left\n\n    # Subtract the invalid arrangements from the total arrangements\n    ans = total_ways - teddy_ways\n    return ans\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n    n = 1  # Starting with the first term\n\n    while first_term + (n - 1) * common_difference >= 0:\n        n += 1\n\n    return n - 1  # Subtract 1 because we included the term that went negative\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    result = total_pence * fraction\n    return int(result)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for num in range(10, 100):\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Let the first term of the sequence be \"a\".\n    # Since the numbers are consecutive, the sequence is an arithmetic sequence with a common difference of 1\n    # Based on the formula for the sum of an arithmetic sequence, we have:\n    # Sum = n/2 * (2*a + (n - 1)*d)\n    # where n is the number of terms, a is the first term, and d is the common difference (which is 1).\n    # We know the sum is 280 and the number of terms n is 7.\n    \n    # Using the formula: 280 = 7/2 * (2*a + (7 - 1)*1)\n    # Simplify the equation: 280 = 7/2 * (2*a + 6)\n    # 280 = 7*a + 21\n    # 259 = 7*a\n    a = (280 - 21) / 7\n    \n    # The largest number in the sequence is the last term which would be: a + 6 (since there are 7 numbers in total)\n    largest_number = a + 6\n    return int(largest_number)\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    # Applying the difference of squares formula: a^2 - b^2 = (a + b)(a - b)\n    term1 = (1000 + 990) * (1000 - 990)\n    term2 = (980 + 970) * (980 - 970)\n    term3 = (20 + 10) * (20 - 10)\n    \n    # Summing up the calculated terms with appropriate signs\n    ans = term1 - term2 + term3\n    \n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    # The numbers must be multiples of 75, the highest common factor.\n    for i in range(75, 1000, 75):\n        # Convert to string to check for two equal digits.\n        num_str = str(i)\n        if len(set(num_str)) != len(num_str):\n            for j in range(i + 75, 1000, 75):\n                num_str_j = str(j)\n                if len(set(num_str_j)) != len(num_str_j):\n                    # Check if the sum is greater than the current maximum.\n                    if i + j > max_sum:\n                        max_sum = i + j\n    return max_sum\n\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    sum = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The given sequence is: 8, 32, 72, 128, 200, 288, 392, 512, 648\n    # This can be broken down into: 8(1^2), 8(2^2), 8(3^2), ..., 8(9^2)\n\n    # Based on the knowledge point route, we know the formula for the sum of squares:\n    # 1^2 + 2^2 + 3^2 + ... + n^2 = (1/6)n(n+1)(2n+1)\n    # for n=9, we have:\n    n = 9\n    sum_of_squares = (1/6) * n * (n + 1) * (2 * n + 1)\n\n    # Our sequence has an 8 factor in it, so we multiply by 8\n    result = 8 * sum_of_squares\n    return result\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # There are 5 storybooks, so there must be 4 magazines between them at least\n    # which leaves 1 magazine that can be placed in any of 6 slots (before, between, and after the storybooks)\n    # So we have to choose 1 out of 6 slots for the last magazine\n    slots_for_last_magazine = 6\n\n    # The ways to arrange 5 storybooks is just 5!\n    storybook_arrangements = factorial(5)\n\n    # The ways to arrange 5 magazines, but with one already fixed in a slot, is 4!\n    magazine_arrangements = factorial(4)\n\n    # Multiply the possible arrangements of storybooks, magazines, and the choice for last magazine\n    count = storybook_arrangements * magazine_arrangements * slots_for_last_magazine\n\n    return count\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    back = False\n    \n    for throw in throws:\n        if back:\n            position -= throw\n            back = False\n        elif throw == 6:\n            back = True\n        else:\n            position += throw\n            \n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    # Alex and Brayden had $756 altogether.\n    equation1 = Eq(alex + brayden, 756)\n    \n    # After Alex gave $65 to Brayden, Alex had 3 times as much money as Brayden.\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # We are going to use brute force method by trying each possible number\n    # of fruit gums starting from the smallest possible number until we find\n    # one that satisfies the conditions of the problem\n    gums = 3  # Starting with 3 because we at least ate 2 and shared something\n\n    while True:\n        remaining_after_eating_2 = gums - 2  # Ate 2 in Music lesson\n        shared_at_break = remaining_after_eating_2 // 3  # Shared a third at break\n        \n        # Check if the division by 3 was without remainder to ensure one third was shared\n        if remaining_after_eating_2 % 3 == 0:\n            remaining_after_sharing_at_break = remaining_after_eating_2 - shared_at_break\n\n            # Check if the remaining can be equally distributed across the four lessons\n            if remaining_after_sharing_at_break % 4 == 0:\n                return gums  # Found the smallest number that satisfies the conditions\n\n        gums += 1  # Try the next number of gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n\n    money_transfer = (james_money - kate_money) / 2\n\n    return money_transfer\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = 420000 + A * 1000 + 280 + B\n            if number % 99 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_with_all_numbers = 10 * 10  # The original sum of all numbers\n    total_sum_with_one_number_removed = 9 * 9  # The sum after one number is removed\n    \n    number_removed = total_sum_with_all_numbers - total_sum_with_one_number_removed\n    return number_removed\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n    speed_ms = (speed_kmh * 1000) / 3600\n    distance_meters = speed_ms * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n    # Each brother and sister receives total_money / 4 if shared equally.\n    # Each brother receives total_money / 3 if shared among brothers only.\n    equation = Eq(total_money / 4 + 20, total_money / 3)\n\n    solution = solve(equation, total_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n_terms = (21 + 1) // 2  # since we need only odd numbers, the count is half of 21 rounded up\n    sum_of_terms = (n_terms * (n_terms + 1) // 2) ** 2  # using the given formula\n    return sum_of_terms\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n\n    # red = 2 * green\n    equation1 = Eq(red, 2 * green)\n    # blue = red - 50\n    equation2 = Eq(blue, red - 50)\n    # red + green + blue = 350\n    equation3 = Eq(red + green + blue, 350)\n    # initial blue = blue left + 112\n    equation4 = Eq(blue + 112, blue)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (red, green, blue))\n\n    initial_blue_beads = solutions[blue] + 112\n\n    return initial_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # The sum of any four numbers will be their average multiplied by 4, so:\n    sums_of_four = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]  # Sums of groups of four numbers\n\n    # The sum of all five numbers is the sum of sums_of_four minus the sum of one of the averages (since each number is counted four times total)\n    sum_of_five = sum(sums_of_four) - min(sums_of_four)  # Removes the smallest sum to count each number once\n\n    # The largest number is the sum of the five numbers minus the sum of the four smallest numbers (given by the smallest average)\n    largest_number = sum_of_five - (min(sums_of_four) / 4 * 3)  # Divide by 4 to get one number, multiply by 3 to get the sum of three smallest numbers\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols representing the number of stickers each child has\n    katelyn, jared = symbols('katelyn jared')\n\n    # Set up the equations based on the given ratio and difference in stickers\n    ratio_equation = Eq(katelyn / jared, 2/5)\n    difference_equation = Eq(jared - katelyn, 60)\n\n    # Solve the system of equations\n    solutions = solve((ratio_equation, difference_equation), (katelyn, jared))\n\n    # Calculate the total number of stickers\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_rate_first_period = 1.15763\n    interest_rate_second_period = 1.21  # 1.1^2\n    \n    final_amount = initial_investment * interest_rate_first_period * interest_rate_second_period\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    ans = sum(rounded_numbers)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # The least number of cuts required to divide 16 sausages equally among 24 people\n    # is to cut each sausage into 1.5 pieces (since 16 * 1.5 = 24).\n    # However, since we cannot cut a sausage into half without first cutting it into two,\n    # it follows that we need at least 16 cuts to have 32 half-pieces,\n    # and then 8 of these half-pieces need to be cut again to get a total of 24 pieces.\n    # Therefore, we need 16 (first round of cuts) + 8 (second round of cuts) to achieve this.\n    \n    # Since we are looking for the least number of cuts, we will not make unnecessary cuts.\n    # This requires a total of 16 + 8 = 24 cuts.\n    \n    return 16 + 8\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    chinese_books = 42\n    math_books = 63\n    nature_books = 28\n    \n    gcd_books = gcd(gcd(chinese_books, math_books), nature_books)\n    \n    return gcd_books\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Define the speed of Qiqi and Weiling\n    speed_qiqi = 60  # in meters per minute\n    speed_weiling = 72  # in meters per minute\n    \n    # Define the time delay for Weiling and the time difference upon arrival\n    time_delay_weiling = 2  # Weiling starts 2 minutes later\n    time_advance_weiling = 4  # Weiling arrives 4 minutes earlier\n    \n    # Let t be the time that Qiqi spends to walk from the library to school\n    # The time that Weiling spends walking is then t - time_delay_weiling - time_advance_weiling\n    # Set up the equation based on the fact that both travel the same distance:\n    # distance = speed_qiqi * t = speed_weiling * (t - time_delay_weiling - time_advance_weiling)\n\n    # Rearrange the equation to solve for t:\n    # speed_qiqi * t = speed_weiling * t - speed_weiling * (time_delay_weiling + time_advance_weiling)\n    # t = speed_weiling * (time_delay_weiling + time_advance_weiling) / (speed_weiling - speed_qiqi)\n\n    t = speed_weiling * (time_delay_weiling + time_advance_weiling) / (speed_weiling - speed_qiqi)\n\n    # Calculate the distance: distance = speed_qiqi * t\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the amount of the job Star can finish in one hour\n    # Let n be the amount of the job Nini can finish in one hour\n    s, n = symbols('s n')\n\n    # first scenario equations (Star 5 hours, Nini 20 hours to finish the job)\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # second scenario equations (Star 20 hours, Nini 8 hours to finish the job)\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # solve the equations to find the rate of work for Star (s) and Nini (n)\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Calculate the hours it takes Nini to finish the job by herself\n    nini_rate = solutions[n]\n    # since Nini_rate is the portion of work done per hour, to do the entire job\n    # it will take 1 / Nini_rate hours\n    hours_for_nini_alone = 1 / nini_rate\n\n    return hours_for_nini_alone\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    expressway_length_per_company = 900  # m\n    days_for_four_companies = 5\n    total_work = expressway_length_per_company * 4 * days_for_four_companies  # Work = companies * days\n    length_to_build = 2700  # m\n\n    days_for_one_company = total_work / (1 * length_to_build)\n    \n    return days_for_one_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # St Petersburg is 3 hours ahead of Manchester\n    time_difference = timedelta(hours=3)\n    \n    # Plane arrival time in St Petersburg\n    arrival_time_spb = datetime.strptime(\"12:00\", \"%H:%M\")\n\n    # Calculate the departure time from Manchester\n    departure_time_manchester = arrival_time_spb - time_difference\n\n    # The departure time in HH:MM format\n    departure_time_formatted = departure_time_manchester.strftime(\"%H:%M\")\n\n    return departure_time_formatted\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n\n    ben_height = jane_height - difference\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front\n    ben_front = 6\n    # Frank's position from the back\n    frank_back = 9\n    # People between Ben and Frank\n    people_between = 10\n\n    # Ben's position from the back is Frank's position minus people in between and minus 1 (Frank himself)\n    ben_back = frank_back - people_between - 1\n    # Calculate the total number of people in the queue\n    total_people = ben_front + ben_back - 1  # subtract 1 because Ben is counted twice\n\n    # Check Ben's answer and return the correct total number of people\n    return total_people if ben_front < frank_back else -1  # return -1 if Ben's claim is incorrect\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    num = 100\n    while not (num % 8 == 2 and num % 11 == 2):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    ans = sum((-1)**(i + 1) * (34 - 2 * i) for i in range(1, 17))\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let's denote the total number of marbles as 'total'.\n    # According to the problem: (2/5) * total are red, (1/3) * total are green, and there are 96 yellow marbles.\n    # So, (2/5) * total + (1/3) * total + 96 = total.\n    # This leads to the equation: (2/5 + 1/3) * total = total - 96\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    equation = Eq((2/5 + 1/3) * total, total - 96)\n    solutions = solve(equation, total)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    number_of_years = 5\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    number = 42663\n    divisor = 9\n    remainder = (number ** 2) % divisor\n    return remainder\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_last_four_digits = 0\n    for i in range(1, 2016):\n        number = int('1' * i)\n        sum_last_four_digits = (sum_last_four_digits + number) % 10000\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for digits in product(range(10), repeat=3):\n        if sum(digits) == 8 and 100 <= (100 * digits[0] + 10 * digits[1] + digits[2]) <= 999 and (100 * digits[0] + 10 * digits[1] + digits[2]) % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1/20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of 13 to any power alternates between 3, 9, 7, and 1 in a cyclic pattern every 4 powers.\n    # So we can find the remainder of 242 divided by 4 to determine the unit digit of 13^242.\n    unit_digit_13 = [3, 9, 7, 1]\n    rem_13 = 242 % 4\n    \n    # For 17 to any power, the unit digit also follows a cyclic pattern: 7, 9, 3, and 1.\n    # We can find the remainder of 379 divided by 4 to determine the unit digit of 17^379.\n    unit_digit_17 = [7, 9, 3, 1]\n    rem_17 = 379 % 4\n\n    # The unit digit of 4 to any power is always 6 (since 4^2 is 16) and remains 6 for all even powers.\n    unit_digit_4 = 6\n\n    # Calculate unit digits based on remainder positions\n    unit_13_pow = unit_digit_13[rem_13 - 1]\n    unit_17_pow = unit_digit_17[rem_17 - 1]\n\n    # Computing the unit digit of the sum of the two terms\n    unit_digit_sum = (unit_13_pow + unit_17_pow * unit_digit_4) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # As there are 2 blue and 2 yellow marbles, we want to find the worst-case scenario\n    # where we get 2 marbles of the same color.\n    \n    # Let's use the Pigeonhole Principle, which states that if n items are put into m containers, \n    # with n > m, then at least one container must contain more than one item.\n    \n    # In our case if we take 3 marbles out, there must be at least 2 marbles of the same color\n    # because even in the worst case we would pick 1 blue and 1 yellow,\n    # the third one must be either blue or yellow making a pair of at least 2 of the same color.\n    \n    # Therefore, we must take at least 3 marbles to be sure we have 2 marbles of the same color.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize maximum product to ensure it is less than 2019 this year\n    max_product = 2019\n    \n    # The product of John and Mary's age will be greater than 2020 next year\n    min_product_next_year = 2020\n    \n    # Initialize a list to store the sums of all five ages\n    sum_of_ages = []\n    \n    # Brute force search for possible ages of John (J), Mary (M), and their children (C1, C2, C3)\n    for J in range(1, max_product):\n        for M in range(1, max_product):\n            # John is one year older than Mary\n            if J == M + 1:\n                # The product of John and Mary's age this year and next year\n                product_JM_this_year = J * M\n                product_JM_next_year = (J + 1) * (M + 1)\n                \n                # Check if the product conditions for John and Mary's ages are satisfied\n                if product_JM_this_year < max_product and product_JM_next_year > min_product_next_year:\n                    \n                    # Check possible ages for children such that the age gaps are 2 years\n                    for C1 in range(1, max_product):\n                        # Children's ages are two years apart\n                        C2 = C1 + 2\n                        C3 = C1 + 4\n                        \n                        # The product of children's ages this year and next year\n                        product_children_this_year = C1 * C2 * C3\n                        product_children_next_year = (C1 + 1) * (C2 + 1) * (C3 + 1)\n                        \n                        # Check if the product conditions for children's ages are satisfied\n                        if product_children_this_year < max_product and product_children_next_year > min_product_next_year:\n                            # Add total sum of the ages to the list if all conditions are met\n                            sum_of_ages.append(J + M + C1 + C2 + C3)\n    \n    # Return the unique sum of ages if found, else None\n    return sum_of_ages[0] if sum_of_ages else None\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    difference = -3\n    term_number = 7\n\n    seventh_term = first_term + (term_number - 1) * difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the original sum of money Mrs Chen had\n    x = symbols('x')\n    \n    # Mrs Chen spent $36 on plates\n    # Then she spent 3/4 of the remaining money (x - 36) on cups\n    # After that, she had 1/6 of the original sum left\n    # The equation representing the situation is:\n    # x - 36 - 3/4 * (x - 36) = 1/6 * x\n    \n    equation = Eq(x - 36 - (3/4) * (x - 36), (1/6) * x)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since the solution returns a list, we extract the value\n    return solution[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    max_A = 0\n    \n    for perm in permutations(digits):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (100*a + 10*b + c) + \\\n            (100*b + 10*c + d) + \\\n            (100*c + 10*d + e) + \\\n            (100*d + 10*e + f) + \\\n            (100*e + 10*f + g) + \\\n            (100*f + 10*g + h) + \\\n            (100*g + 10*h + i)\n        \n        max_A = max(max_A, A)\n    \n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    minutes_per_mile = 2 + 30 / 60  # Conversion of 2 minutes and 30 seconds to minutes\n    miles_per_minute = 1 / minutes_per_mile  # Miles per minute\n    miles_per_hour = miles_per_minute * 60  # Miles in 1 hour\n\n    return miles_per_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    counter = 0\n    number = 8\n    while counter < 2012:\n        if str(number)[0] == '8':\n            counter += 1\n        number += 1\n    return number - 1\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Total number of balls\n    total_balls = 160\n    # Since the students have consecutive natural numbers of balls\n    # Let the smallest number of balls be x. Then the other numbers are (x+1), (x+2), (x+3), (x+4)\n    # Then, we have x + (x+1) + (x+2) + (x+3) + (x+4) = total_balls\n    # Simplifying this, we have 5x + 10 = total_balls\n    # So, we solve for x and we know that the student with the most balls has x+4 balls\n    x = (total_balls - 10) // 5\n    return x + 4\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    # Given restrictions for each mailbox\n    min_a = 2\n    min_b = 4\n    min_c = 3\n    \n    # Remaining envelopes after placing the minimum required\n    remaining_envelopes = 15 - (min_a + min_b + min_c)\n    \n    # Calculate the number of ways to distribute the remaining envelopes in 4 mailboxes\n    # This is essentially the same problem as distributing n identical items into r distinct groups\n    # which is given by the combination formula (n+r-1) choose (r-1)\n    # Here, n = remaining_envelopes and r = 4 (for A, B, C, D)\n    \n    from math import comb\n    ways = comb(remaining_envelopes + 4 - 1, 4 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    income = symbols('income')\n    tax = symbols('tax')\n\n    # Split the income into the two tax segments\n    tax_below_20000 = 0.15 * 20000  # Tax for the first 20000\n    tax_above_20000 = 0.20 * (income - 20000)  # Tax for the income above 20000\n\n    # Total tax is 7000\n    tax_equation = Eq(tax_below_20000 + tax_above_20000, 7000)\n\n    # Find the income needed to get 7000 dollars in tax\n    income_solution = solve(tax_equation, income)\n\n    return income_solution[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Get the decimal part as a string\n    pattern_length = len(decimal)  # The length of the repeating pattern\n    position = 2022 % pattern_length - 1  # Find the position taking into account the pattern repeats\n    ans = int(decimal[position])  # Get the digit in the desired position\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor (GCD)\n    gcd12 = gcd(rope1, rope2)\n    gcd123 = gcd(gcd12, rope3)\n\n    # The GCD is the longest possible length of each piece\n    return gcd123\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if 2 * chickens + 4 * rabbits == 100:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    # Let x be the initial number of packs of potato chips in each store\n    # After A sold 290 packs, A has x - 290 packs\n    # At this point, B has 3 times as many packs as A, so B has 3 * (x - 290) packs\n    # Since both stores had the same initial number, the equation is:\n    # x = 3 * (x - 290)\n    # Solving for x gives us:\n    # x = 3x - 870\n    # 2x = 870\n    # x = 435\n    # The total packs of potato chips at first is 2 * x, so it is:\n    ans = 2 * 435\n    return ans\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_went_home = 5\n    boys_went_home = 3\n\n    girls = total_students - total_boys\n    girls_packed_lunch = (girls - girls_school_lunch) - (students_went_home - boys_went_home)\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n\n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n\n    total_dark_chocolate_cost = 20 * dark_chocolate_price\n    total_milk_chocolate_cost = 20 * milk_chocolate_price\n    total_strawberry_chocolate_cost = 20 * strawberry_chocolate_price\n    \n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_strawberry_chocolate_cost\n    total_chocolates = 20 + 20 + 20\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    # Uniforms made in the first 5 days\n    uniforms_made = 720\n    # Total uniforms to be made\n    total_uniforms = 3600\n    # Number of days to make 720 uniforms\n    days_for_720_uniforms = 5\n    # Calculate rate of making uniforms per day\n    rate_per_day = uniforms_made / days_for_720_uniforms\n    # Calculate total number of days to complete the order at the same rate\n    total_days = total_uniforms / rate_per_day\n    return int(total_days)\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    num = 36\n    factors = []\n    \n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    \n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    max_number = 100\n    divisor = 12\n    # Subtract 1 because we want numbers less than 100\n    ans = (max_number - 1) // divisor\n    return ans\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time in seconds to pass the tree\n\n    length_of_train = speed * time  # length = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_rate = 1 / 15\n    couple_rate = 1 / 12\n    wife_rate = couple_rate - man_rate\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n\n    num_friends = 6\n\n    fruits_per_friend = (total_pear + total_strawberry + total_chocolate) // num_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    paid_books = 3\n    free_books = 1\n    required_books = 5\n\n    # With an \"x\" for each set of books where \"paid_books + free_books\" equals the required amount \n    sets_of_books = required_books // (paid_books + free_books)\n    remaining_books = required_books % (paid_books + free_books)\n\n    total_cost = (sets_of_books * paid_books + remaining_books) * book_price\n\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    women = 2 / 5 * total_people\n    children = symbols('children')\n    men = 3 * children\n\n    equation1 = Eq(women, children + 190)\n    equation2 = Eq(women + men + children, total_people)\n\n    # Substitute the expression for women into equation2\n    equation2_subs = equation2.subs(women, children + 190)\n    # We now have two equations in terms of children and total_people\n    solutions = solve((equation1, equation2_subs), (children, total_people))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 6, 3*x - 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation1 = Eq((boys * 20 + girls * 60) / 40, 35)\n\n    solutions = solve((equation1,), (boys,))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        return 0\n    else:\n        return 4 - remainder\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        num = int('1' * i)\n        total_sum += num\n    return total_sum % 100\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the cost of one apple as 'a' and one banana as 'b'.\n    a, b = symbols('a b')\n\n    # We have two equations according to the problem:\n    # 6 apples + 7 bananas = 8 apples + 4 bananas\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n\n    # We can subtract these equations to simplify:\n    # 2 apples = 3 bananas => 2a = 3b\n    equation2 = Eq(2*a, 3*b)\n\n    # Solve the systems of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # The cost of a banana is the value of 'b'.\n    cost_of_banana = solutions[b]\n\n    # Assuming Einstein spends all his money on bananas, and since both options\n    # leave him with no change, we take the cost of the first option (6 apples and 7 bananas).\n    total_cost = 6*solutions[a] + 7*solutions[b]\n\n    # Number of bananas he can buy is total cost divided by the cost of one banana.\n    num_bananas = total_cost / cost_of_banana\n\n    return num_bananas\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    # Initialize count\n    count = 0\n\n    # The minimum required envelopes for each box are pre-determined\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    # Since we already know the minimum for A, B, and C, we subtract these from the total\n    # to find out how many are left for distribution among the four boxes.\n    remaining_envelopes = 15 - (min_A + min_B + min_C)\n\n    # Iterate through all possible distributions of the remaining envelopes\n    for A in range(0, remaining_envelopes + 1):\n        for B in range(0, remaining_envelopes - A + 1):\n            for C in range(0, remaining_envelopes - A - B + 1):\n                # The number of envelopes in D is whatever is left.\n                D = remaining_envelopes - A - B - C\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    incorrect_divisor = 2.11\n    correct_divisor = 211\n    difference_in_result = 98.01\n\n    incorrect_result = difference_in_result * correct_divisor\n    true_result = incorrect_result / incorrect_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    ans = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return ans\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n\n    # John and Choon Mui had the same amount of money\n    equation1 = Eq(john, choon_mui)\n    # John spent $30\n    # Choon Mui spent $150\n    # John has four times as much as Choon Mui\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    # Calculate the amount John had left\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60\n    distance_miles = speed_mph * time_hours\n    miles_to_km = 1.60934\n    distance_km = distance_miles * miles_to_km\n    return distance_km\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let f represent the number of female visitors on the first day\n    # Let m represent the number of male visitors on the first day\n    f, m = symbols('f m')\n    \n    # Equation representing the initial relationship between male and female visitors\n    eq1 = Eq(m, f + 450)\n    \n    # Equation representing the number of visitors on the second day\n    # Female visitors increased by 15%, male visitors decreased by 18%\n    eq2 = Eq(1.15 * f + 0.82 * m, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (m, f))\n    \n    # Return the number of male visitors on the first day\n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    # Let the original number of eggs be x\n    remaining_eggs_after_first_sale = (x / 2) - 5\n    # After second sale\n    remaining_eggs_after_second_sale = (remaining_eggs_after_first_sale / 2) - 4\n\n    # Now we form an equation using remaining eggs after second sale\n    equation = remaining_eggs_after_second_sale == 15\n    # Solving the equation for x\n    x = symbols('x')\n    sold_first = x/2 + 5\n    sold_second = (x - sold_first)/2 + 4\n    final_remaining = x - sold_first - sold_second\n    solution = solve(final_remaining - 15, x)\n    return solution[0]\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_value = 200\n    percentage_increase = 10\n\n    increase_amount = initial_value * (percentage_increase / 100)\n    final_value = initial_value + increase_amount\n    \n    return final_value\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    full_size_yacht_length_m = 8\n    scale_ratio = 1/20\n    model_yacht_length_m = full_size_yacht_length_m * scale_ratio\n    model_yacht_length_cm = model_yacht_length_m * 100\n    return model_yacht_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n    \n    # Total number of permutations for 4 distinct people\n    total_perm = factorial(4)\n    \n    # Subtract the permutations where one person remains in the same position.\n    # Subtract the permutations where two people remain in the same position (fixed points).\n    # Subtract one fixed point case, add two fixed points case as they were subtracted twice.\n    no_change_perm = total_perm - 4*factorial(3) + 6*factorial(2) - factorial(1)\n    \n    return no_change_perm\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n\n    balloons_per_pupil = total_balloons // pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n\n    return count, ways\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n        \n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95 / 100 * x - 2 / 5 * x, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate hourly rate\n    hourly_rate = 78 / 6.5\n\n    # Calculate total earnings for a week, assuming he works 8 hours per day, for 7 days\n    total_earnings = hourly_rate * 8 * 7\n\n    # Check if he can pay off his debt\n    can_pay_debt = total_earnings >= 700\n\n    # Return a Boolean value: False means he cannot pay his debt, True means he can\n    return not can_pay_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    \n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(0, 10):\n        if str(A)[0] == str(10 * A)[-1]:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    from math import lcm\n\n    period_arjun = 2 * 7  # 2 weeks in days\n    period_yahya = 10     # 10 days\n\n    ans = lcm(period_arjun, period_yahya)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # First part of the race\n    distance_first_part = 280\n    speed_first_part = 7\n    time_first_part = distance_first_part / speed_first_part\n    \n    # Middle part of the race\n    distance_middle_part = 400\n    speed_middle_part = 5\n    time_middle_part = distance_middle_part / speed_middle_part\n    \n    # Last part of the race\n    distance_last_part = 800 - (distance_first_part + distance_middle_part)\n    speed_last_part = 8\n    time_last_part = distance_last_part / speed_last_part\n    \n    # Total time\n    total_time = time_first_part + time_middle_part + time_last_part\n    \n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    for d1 in range(10):\n        for d4 in range(10):\n            number = int(f\"2{d1}9{d4}\")\n            if number % 5 == 0 and number % 3 == 0:\n                sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n\n    num_trees = (highway_length - distance_apart) // distance_apart\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    final_stamps = 34\n    stamps_after_sending = final_stamps + 2\n    stamps_after_buying = stamps_after_sending - 11\n    initial_stamps = stamps_after_buying + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note = 50\n    cost_of_shoes = 30\n    money_lost = fake_note + cost_of_shoes\n\n    return money_lost\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1 # (last_term - first_term) / common_difference + 1\n    sum_seq = (first_term + last_term) * num_terms // 2 # n/2 * (first_term + last_term)\n    return sum_seq\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Considering A, B, C as a single unit, we have 7 units to arrange.\n    units_to_arrange = factorial(7)\n\n    # There are 3! ways to arrange A, B, C within their unit.\n    abc_arrangements = factorial(3)\n\n    # Total arrangements are the product of the two.\n    total_arrangements = units_to_arrange * abc_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    original_number = ''.join(str(i) for i in range(1, 31))\n    smallest_number = original_number.replace('0', '', 46)\n    ans = int(smallest_number)\n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # Taking all blue balls out ensures that the next one is white\n    num_blue_balls = 6\n\n    # If we take one more after all blue balls, we're guaranteed to have a white ball\n    ans = num_blue_balls + 1\n\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_choose = 4\n    ways = comb(total_students, students_to_choose)\n    return ways\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total = james + linda + ben\n    return total\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    return (1+2+3+4)*1 - (2020+2019+2018)*0\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    length_of_bundle = number_of_rulers * short_ruler_length - (number_of_rulers - 1) * overlap_length\n\n    return length_of_bundle\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Jog time from 6:30 AM to 7:30 AM is 1 hour\n    jog_speed = 6 # miles per hour\n    jog_distance = jog_speed * 1 # distance = speed * time\n\n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walk_speed = 5 # miles per hour\n    walk_distance = walk_speed * 2 # distance = speed * time\n\n    # Total distance traveled\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups_from_used = total_used_cups // 7\n    remaining_used_cups = total_used_cups % 7\n    total_new_cups = new_cups_from_used\n\n    while new_cups_from_used >= 7:\n        new_cups_from_used, remaining_used_cups = divmod(new_cups_from_used + remaining_used_cups, 7)\n        total_new_cups += new_cups_from_used\n    \n    return total_new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    total_number = 2000\n    subtracted_number = 222\n\n    ans = total_number - subtracted_number\n\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    total_length_cm = 23 * 100  # convert meters to cm\n    distance_apart_cm = 15  # distance between cauliflowers in cm\n    start_offset_cm = 20    # distance from start to first cauliflower in cm\n    cauliflower_width_cm = 45  # width of one cauliflower in cm\n\n    # Total available space for planting cauliflowers\n    planting_length_cm = total_length_cm - start_offset_cm - cauliflower_width_cm\n    \n    # Number of gaps between cauliflowers\n    num_gaps = planting_length_cm // (distance_apart_cm + cauliflower_width_cm)\n    \n    return num_gaps\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    num_students_class_A = 8\n    num_students_class_B = 12\n    num_students_class_C = 20\n\n    gcd_AB = gcd(num_students_class_A, num_students_class_B)\n    gcd_ABC = gcd(gcd_AB, num_students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton_before, bowling_before = symbols('badminton_before bowling_before')\n\n    # Equations based on the problem statement\n    equation1 = Eq(badminton_before, 3 * bowling_before)\n    equation2 = Eq(badminton_before - 36, bowling_before - 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (badminton_before, bowling_before))\n    \n    # Number of members each club had in the end\n    badminton_end = solutions[badminton_before] - 36\n    bowling_end = solutions[bowling_before] - 4\n\n    return badminton_end, bowling_end\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # meters\n\n    time = distance / speed_of_sound\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    factors_count = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors_count += 1\n\n    return factors_count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n    ans = num1 - num2\n    return ans\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    num_zeros = min(count_factors(999, 2), count_factors(999, 5))\n    return num_zeros\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Given the total sum of the numbers on the cards\n    total_sum = 504\n    # Given the average value of all numbers\n    average = 126\n    # Number of cards\n    num_cards = total_sum // average  # Since the total sum is evenly divisible by the average\n    # The difference between the greatest and smallest number\n    difference = 6\n\n    # Since the numbers are consecutive and the difference between each is even (because they are odd numbers),\n    # the numbers on the cards must be: smallest, smallest + 2, smallest + 4, smallest + 6\n    # The smallest number is then average - 3, because they have to balance out to get the average\n    smallest_number = average - (difference // 2) * (num_cards // 2)\n\n    return smallest_number\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) // (3 - 2)  # Simplifying the equation step by step\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and (num - 1) % 13 == 0:\n            return num\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Total number of pupils\n    total_pupils_eq = Eq(girls + boys, 1690)\n    \n    # There are 90 more boys than girls\n    boys_girls_diff_eq = Eq(boys - girls, 90)\n    \n    # Ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49\n    girls_ratio_eq = Eq(girls_swim/girls_not_swim, 31/49)\n    \n    # Total number of girls is the sum of girls who can swim and girls who cannot\n    total_girls_eq = Eq(girls, girls_swim + girls_not_swim)\n    \n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    boys_swim_diff_eq = Eq(boys_not_swim - boys_swim, 120)\n    \n    # Total number of boys is the sum of boys who can swim and boys who cannot\n    total_boys_eq = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solve the system of equations\n    solutions = solve((total_pupils_eq, boys_girls_diff_eq, girls_ratio_eq, total_girls_eq, boys_swim_diff_eq, total_boys_eq),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Number of pupils who cannot swim is the sum of girls and boys who cannot swim\n    num_pupils_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return num_pupils_cannot_swim\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    # Bolt has run 1656 m more than Boris\n    equation1 = Eq(bolt, boris + 1656)\n    # Distance Bolt finished is 280 m more than 5 times that of Boris\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    # Sum of distances run by both Bolt and Boris\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english = 20\n    math = 35\n    both = 15\n\n    total_students = english + math - both\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    rate = 1.10\n    base_year_amount = final_amount / (rate * rate)\n    return base_year_amount\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds of the rabbit and the turtle\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    \n    # The distance of the race\n    race_distance = 6990 # m\n    \n    # Rabbit runs for 10 minutes before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * 10  # Distance covered in 10 minutes\n    \n    # Time for the turtle to cover the same distance\n    time_for_turtle_to_reach_rabbit = rabbit_distance_before_sleep / turtle_speed\n    \n    # Time the rabbit sleeps\n    sleep_time = 215  # min\n    \n    # Total time the turtle has been running when the rabbit wakes up (10 min at start + sleep time)\n    total_time_turtle = time_for_turtle_to_reach_rabbit + sleep_time\n    \n    # Total distance covered by turtle when rabbit wakes up\n    turtle_distance_during_rabbit_sleep = total_time_turtle * turtle_speed\n    \n    # Distance rabbit needs to cover after waking up\n    rabbit_distance_after_sleep = race_distance - rabbit_distance_before_sleep\n    \n    # Time the rabbit needs to finish the race after waking up\n    time_rabbit_to_finish = rabbit_distance_after_sleep / rabbit_speed\n    \n    # Total time for the rabbit to finish the race (10 min at start + sleep time + time after sleep)\n    total_time_rabbit = 10 + sleep_time + time_rabbit_to_finish\n    \n    # Total time for the turtle to finish the race\n    total_time_turtle_to_finish = race_distance / turtle_speed\n    \n    # Determine the winner and the distance difference when the first one finished\n    if total_time_rabbit < total_time_turtle_to_finish:\n        # Rabbit wins\n        winner = \"rabbit\"\n        # Turtle's distance when rabbit finishes\n        turtle_distance_when_rabbit_finishes = total_time_rabbit * turtle_speed\n        distance_difference = race_distance - turtle_distance_when_rabbit_finishes\n    else:\n        # Turtle wins\n        winner = \"turtle\"\n        # Rabbit's distance when turtle finishes\n        rabbit_distance_when_turtle_finishes = (total_time_turtle_to_finish - 10 - sleep_time) * rabbit_speed + rabbit_distance_before_sleep\n        distance_difference = race_distance - rabbit_distance_when_turtle_finishes\n    \n    return winner, int(distance_difference)\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4*(2+7) - 2*(5+3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    total_ways_all = factorial(7)  # All possible permutations of 7 people\n    total_ways_3together = factorial(5) * factorial(3)  # Treat the 3 who don't want to be together as one\n\n    ans = total_ways_all - total_ways_3together\n    return ans\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys * ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1/i for i in range(10, 20))\n    integer_part = int(sum_of_fractions)\n    return integer_part\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n    \n    # common difference calculation\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # sum of arithmetic series formula: n/2 * (2*a1 + (n-1)*d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_prime_factors(n, prime):\n        count = 0\n        while n > 0:\n            n //= prime\n            count += n\n        return count\n\n    # Count the number of 2s and 5s in the prime factorization of n!\n    # The number of zeros at the end of n! will be the minimum of these two counts.\n    n = 789\n    count_of_2s = count_prime_factors(n, 2)\n    count_of_5s = count_prime_factors(n, 5)\n    \n    ans = min(count_of_2s, count_of_5s)\n    return ans\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    total_participants = 100\n    min_participants_per_school = 4\n\n    max_schools = total_participants // min_participants_per_school\n    \n    # Considering the pigeonhole principle, there could be one additional school\n    # with the remaining participants (if any)\n    if total_participants % min_participants_per_school != 0:\n        max_schools += 1\n\n    return max_schools\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    team_a_students = 20\n    team_a_average = 76\n    combined_average = 70\n\n    # Let's denote team_b_students as x\n    # The sum of Team A scores is team_a_students * team_a_average\n    # The sum of Team B scores is x * 67\n    # The combined sum is (team_a_students + x) * combined_average\n    \n    # We can set up the equation:\n    # team_a_students * team_a_average + x * 67 = (team_a_students + x) * combined_average\n    # Now we solve for x\n    \n    team_a_total_score = team_a_students * team_a_average\n    team_b_average = 67\n\n    # 76*20 + 67*x = 70*(20 + x)\n    x = symbols('x')\n    equation = Eq(team_a_total_score + team_b_average * x, combined_average * (team_a_students + x))\n    \n    team_b_students = solve(equation, x)[0]\n\n    return team_b_students\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    # Loop over all hours and minutes in a day\n    for hour in range(24):\n        for minute in range(60):\n            # Check if either the hour or the minute contains a '4'\n            if '4' in str(hour) or '4' in str(minute):\n                # Check if hour and minute both have a '4'\n                if '4' in str(hour) and '4' in str(minute):\n                    count += 1\n                # Check if either hour or minute contains at least two '4'\n                elif str(hour).count('4') == 2 or str(minute).count('4') == 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    min_product = float('inf')\n    for perm in permutations(digits, 6):\n        num1 = perm[0]*100 + perm[1]*10 + perm[2]\n        num2 = perm[3]*100 + perm[4]*10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    largest_product = 0\n    smallest_product = float('inf')\n\n    # Generate all permutations of 1-9, taking the first 4 digits for ABCD and the next 3 for EFG\n    for p in permutations(range(1, 10), 7):\n        ABCD = p[0]*1000 + p[1]*100 + p[2]*10 + p[3]\n        EFG = p[4]*100 + p[5]*10 + p[6]\n        \n        # Check if the sum of the two numbers is 1993\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            largest_product = max(largest_product, product)\n            smallest_product = min(smallest_product, product)\n\n    return largest_product - smallest_product\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    difference = -50\n    last_term = 19\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    ans = (num_terms * (first_term + last_term)) // 2\n\n    return ans\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    # The smallest 2-digit number that adds to 15 is 69 (6+9=15)\n    # It consists of the smallest tens digit that can combine with another digit to sum up to 15.\n    \n    for tens in range(1, 10):  # Tens digit must be in [1-9] to be a valid 2-digit number\n        ones = 15 - tens  # Calculate ones digit\n        if ones <= 9:  # Validate that ones digit is a single digit\n            smallest_number = tens*10 + ones  # Construct the 2-digit number\n            return smallest_number  # Return the smallest valid such 2-digit number\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_per_hour = 40\n    slip_back = 10\n    progress_per_hour = climb_per_hour - slip_back\n\n    hours = 0\n    total_climbed = 0\n    while total_climbed < depth:\n        hours += 1\n        total_climbed += climb_per_hour\n        if total_climbed >= depth:\n            break\n        total_climbed -= slip_back\n\n    return hours\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # Maximum value that can be obtained in a single throw is 6 (with a regular die)\n    max_steps_per_roll = 6\n    # Total steps needed\n    total_steps = 24  # From 1 to 25, there are 24 steps to be moved\n    \n    # Minimum rolls needed = Total steps divided by the maximum steps per roll\n    min_rolls = -(-total_steps // max_steps_per_roll)\n    \n    return min_rolls\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(29, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price_each = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_spent = cabbage_price_each * cabbages_bought\n    lettuce_price_each = total_spent / lettuces_bought\n\n    return lettuce_price_each\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    money_spent = 97\n    money_saved = total_money - money_spent\n    return money_saved\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Initial number of typists\n    initial_typists = 5\n    # Number of words typed by initial group in set time\n    words_in_20_min = 6000\n    # Time taken for initial work in minutes\n    time_for_initial_work = 20\n    # Words needed to be typed\n    words_needed = 9000\n    # Number of typists fallen sick\n    sick_typists = 2\n\n    # Calculate the number of words one typist can type in 20 minutes\n    words_per_typist_20_min = words_in_20_min / initial_typists\n\n    # Calculate the number of words remaining typists can type in 20 minutes\n    remaining_typists = initial_typists - sick_typists\n    words_remaining_typists_20_min = words_per_typist_20_min * remaining_typists\n\n    # Calculate how many minutes the remaining typists need for 9000 words\n    time_needed = (words_needed / words_remaining_typists_20_min) * time_for_initial_work\n\n    return time_needed\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert start time to total minutes since 00:00\n    end_time = 14 * 60 + 5     # Convert end time to total minutes since 00:00\n    \n    duration = end_time - start_time  # Duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    \n    total_cost = duration * cost_per_minute  # Total cost of the call in pence\n    \n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors, sum\n\n    ans = sum(divisors(20))\n    return ans\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    original_count = 11\n    new_count = original_count - 8\n    total_distance = 30\n    original_interval = total_distance / (original_count - 1)\n    new_interval = original_interval * (original_count / new_count)\n    return new_interval\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.4 * 320\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 10, 17)  # Assuming the year 2023 for example\n    end_date = datetime(2023, 12, 20)\n    sunday_count = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Sunday is 6th day of the week starting from Monday (0)\n            sunday_count += 1\n        start_date += timedelta(days=1)  # Increment the day by 1\n\n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # For a three-digit number with at least one 2 and one 3, there are three cases to consider:\n    # Case 1: Numbers with two 2's and one 3: 223, 232, 322\n    # Case 2: Numbers with two 3's and one 2: 332, 323, 233\n    # Case 3: Numbers with one 2 and one 3: 23x, 32x, 2x3, 3x2, x23, x32 (where x can be 2 or 3)\n    # For Case 3, since x can be two different digits, there are 6*2 = 12 possibilities.\n    # For Cases 1 and 2, there are 3 possibilities each.\n    # Total = Case 1 + Case 2 + Case 3\n    total = 3 + 3 + 12\n    return total\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_tart, strawberry_tart, price_difference = symbols('apple_tart strawberry_tart price_difference')\n\n    equation1 = Eq(2 * strawberry_tart, apple_tart)\n    equation2 = Eq(strawberry_tart * (price_difference + 0.40), apple_tart * price_difference)\n    equation3 = Eq(apple_tart * price_difference + strawberry_tart * (price_difference + 0.40), 40)\n\n    solutions = solve((equation1, equation2, equation3), (apple_tart, strawberry_tart, price_difference))\n\n    total_tarts = solutions[apple_tart] + solutions[strawberry_tart]\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n    # Convert minutes to seconds for uniformity\n    first_light_cycle = 30  # 0.5 minute is 30 seconds\n    second_light_cycle = 45  # 0.75 minute is 45 seconds\n    third_light_minimum = 30  # Minimum for third light in seconds\n\n    # The LCM of the first two lights cycles, since they turn green together\n    lcm_first_second = lcm(first_light_cycle, second_light_cycle)\n\n    # Now we need to find a multiple of the LCM that is greater than or equal to 30 seconds\n    i = 1\n    while True:\n        third_light_cycle = i * lcm_first_second\n        if third_light_cycle >= third_light_minimum:\n            return third_light_cycle\n        i += 1\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # 5 persons to pick from 5 unique skiboards\n    ways = factorial(5)\n\n    return ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n\n    # Let's denote the number of fitted pieces after the first day as F1\n    # On the first day he fits 20% of the total pieces, so F1 = 0.2 * total_pieces\n    # On the second day, he fits another 60 pieces, the number of fitted pieces becomes F1 + 60\n    # After two days, the ratio of the number of fitted pieces to the number of unfitted pieces is 2:5\n    # So we have the following equation: (F1 + 60) / (total_pieces - (F1 + 60)) = 2/5\n    # We can substitute F1 with 0.2 * total_pieces into the equation and solve for total_pieces\n\n    equation = Eq((0.2 * total_pieces + 60) / (total_pieces - (0.2 * total_pieces + 60)), 2/5)\n    \n    total_pieces = solve(equation, total_pieces)[0]\n\n    return total_pieces\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position_from_right = 17\n    tony_position_from_left = total_children - tony_position_from_right + 1\n\n    if henry_position <= tony_position_from_left:\n        children_between = tony_position_from_left - henry_position + 1\n    else:\n        children_between = henry_position - tony_position_from_left + 1\n\n    return children_between\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_per_metre = 1000\n    metres = 2\n    millimetres = metres * millimetres_per_metre\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_ten = total_numbers // 10\n    not_multiples_of_ten = total_numbers - multiples_of_ten\n    percentage_not_multiples_of_ten = (not_multiples_of_ten / total_numbers) * 100\n    return percentage_not_multiples_of_ten\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_loan = 4\n    repayment = 0.3 * original_loan\n    remaining_debt = original_loan - repayment\n    return remaining_debt\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time_meeting = 10  # Time they meet in hours\n\n    # The total distance is the sum of the distances covered by Jack and Rose\n    total_distance = (jack_speed + rose_speed) * time_meeting\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each type of animal\n    legs_cats = 4\n    legs_dogs = 4\n    legs_rabbit = 4\n    legs_birds = 2  # Assuming birds are not flightless like ostriches\n\n    # Total number of legs from the cats, dogs and the rabbit\n    total_legs_others = 2 * legs_cats + 2 * legs_dogs + 1 * legs_rabbit\n\n    # Remaining legs have to be for the birds\n    legs_for_birds = 28 - total_legs_others\n\n    # Calculating the number of birds\n    num_birds = legs_for_birds // legs_birds\n\n    return num_birds\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(filter(lambda x: 24 % x == 0 and x % 2 != 0, range(1, 25)))\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Nelson's original number of cards\n    # Let y be Oliver's original number of cards\n    # Melvin's original number of cards is given as 40.\n\n    x, y = symbols('x y')\n    melvin_original = 40\n\n    # Melvin gained 5/8 of his original number of cards from Nelson\n    melvin_after_gain = melvin_original + (5/8) * melvin_original\n    nelson_after_losing_to_melvin = x - (5/8) * melvin_original\n\n    # Melvin and Nelson each lost 1/4 of Melvin's original number of cards to Oliver\n    melvin_after_losing = melvin_after_gain - (1/4) * melvin_original\n    nelson_after_losing = nelson_after_losing_to_melvin - (1/4) * melvin_original\n    oliver_after_gaining = y + (1/4) * melvin_original + (1/4) * melvin_original\n\n    # Melvin gained 1/8 of his original number of cards from Nelson in the final round\n    melvin_final = melvin_after_losing + (1/8) * melvin_original\n    nelson_final = nelson_after_losing - (1/8) * melvin_original\n\n    # After the final round, they all have the same number of cards\n    equation1 = Eq(melvin_final, nelson_final)\n    equation2 = Eq(melvin_final, oliver_after_gaining)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    total_cards = melvin_original + solutions[x] + solutions[y]\n\n    return total_cards\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let x be the age at which Polly's age equals the sum of her children's ages.\n    # Let's denote Polly's age at that time by x as well, since her age will be the sum of her children's ages.\n\n    # Children's ages will be (x - 20), (x - 22), and (x - 24) because each child was born two years apart.\n\n    # Now, we set up the equation where Polly's age x equals the sum of her children's ages:\n    # x = (x - 20) + (x - 22) + (x - 24)\n\n    # Solving for x:\n    # Combine like terms: x = 3x - 66\n    # Rearrange terms: 3x - x = 66\n    # Simplify: 2x = 66\n    # Solution: x = 33\n    \n    # Polly will be 33 years old when her age is equal to the sum of her three children's ages\n    return 33\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy import primefactors\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    prime_factors_list = [set(primefactors(card)) for card in cards]\n\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            product1 = cards[i] * cards[j]\n            factors_product1 = set(primefactors(product1))\n\n            for k in range(len(cards)):\n                for l in range(k + 1, len(cards)):\n                    for m in range(l + 1, len(cards)):\n                        if k == i or k == j or l == i or l == j or m == i or m == j:\n                            continue\n                        product2 = cards[k] * cards[l] * cards[m]\n                        factors_product2 = set(primefactors(product2))\n\n                        if factors_product1 == factors_product2:\n                            all_cards = set(cards)\n                            picked_cards = {cards[i], cards[j], cards[k], cards[l], cards[m]}\n                            not_picked = all_cards.difference(picked_cards).pop()\n                            return not_picked\n    return None\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    ans = (2 * 5 + 1 * 5) == (2 + 1) * 5\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiple = 5\n    empty_suitcase_weight = total_weight / multiple\n    \n    return empty_suitcase_weight\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes < 10 and big_boxes + small_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years\n    combined_age_four_years_ago = 10\n    \n    # In four years, each dog ages four years, so combined they age 8 years\n    combined_age_now = combined_age_four_years_ago + 8\n    \n    # In two more years, each dog ages two years, so combined they age 4 years\n    combined_age_in_two_years = combined_age_now + 4\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5*4 + 6*8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n\n    equation = Eq(14*10 + m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y.\n    # From the problem statement, we have two equations:\n    # y - x = 39 (1)\n    # y + x = 59 (2)\n    \n    # By adding the two equations, we can find the value of y.\n    # (y - x) + (y + x) = 39 + 59\n    # 2y = 98\n    # y = 98 / 2\n    # y = 49\n    \n    # Substitute the value of y in equation (1) to find x.\n    # 49 - x = 39\n    # x = 49 - 39\n    # x = 10\n    \n    # The value of the smaller number x is 10.\n    return 10\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Computing the product of all three numbers based on the given relations\n    product_abc = 30 * 35 * 42\n    \n    # Since A*B*C is the cube of the product of A, B, and C (because each number appears twice in the multiplication),\n    # We can get the cube root of the product to get the product of A, B, and C.\n    abc = product_abc ** (1/3)\n    \n    # Calculate A, B, C using their respective product relations\n    A = 30 / (abc / 42)\n    B = 35 / (abc / 30)\n    C = 42 / (abc / 35)\n    \n    # Calculate the sum of A, B, and C\n    sum_abc = A + B + C\n    \n    return int(sum_abc)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\nans = solution(x, y)"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent = 15\n    total_amount = 340\n    percent_as_decimal = percent / 100\n    result = total_amount * percent_as_decimal\n    return result\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of years in future\n    years = symbols('years')\n\n    # Justin's age in years from now\n    justin_future_age = 8 + years\n    # His mother's age in years from now\n    mother_future_age = 32 + years\n\n    # Equation representing the fact that mother's age will be three times Justin's age\n    equation = Eq(mother_future_age, 3 * justin_future_age)\n\n    # Solving the equation\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    \n    solutions = solve((equation1), (cora, qingle))\n\n    cora_sweets = solutions[cora]\n    qingle_sweets = solutions[qingle]\n\n    difference = cora_sweets - qingle_sweets\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, we know b = 0.\n    b = 0\n    \n    # We are given that the line passes through the point (4, 8).\n    # So we can substitute x = 4 and y = 8 in the equation y = mx + b.\n    \n    # y = mx + b\n    # 8 = m * 4 + 0\n    # m = 8 / 4\n    m = 8 / 4\n    \n    # Now we have the values of m and b, we can write the equation.\n    # equation: y = mx + b\n    equation = f\"y = {m}x + {b}\"\n    \n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n\n    initial_ratio = Eq(jane, 5 / 7 * eric)\n    after_giving_ratio = Eq((jane + 6) / (eric - 6), 11 / 13)\n\n    solutions = solve((initial_ratio, after_giving_ratio), (jane, eric))\n\n    return solutions[jane] + solutions[eric]\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    for warren_add in range(20, 0, -1):\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        current_number -= (21 - warren_add)\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucets_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucets_rate\n    time_to_fill = 1 / total_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    from sympy import factorint\n\n    product = 48 * 925 * 38 * 435\n    factors = factorint(product)\n\n    # Zeros at the end of a number depend on the pairs of 2s and 5s in its prime factors\n    # The number of zeros is equal to the minimum number of 2s and 5s\n    num_zeros = min(factors.get(2, 0), factors.get(5, 0))\n\n    return num_zeros\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(''.join(map(str, p))) for p in permutations(digits) if p[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    both = piano_pupils // 4  # 1/4 of the pianists also play the violin\n    \n    neither = total_pupils - (piano_pupils + violin_pupils - both)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n    interest = principal * rate * time\n    total_amount = principal + interest\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7  # There are 7 days in a week\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    # Let the original number of passengers be x.\n    # After the first stop, two fifths got off, so three fifths remain: (3/5) * x.\n    # After the second stop, one third of the remaining passengers got off, leaving 22 people.\n    # So, two thirds of the passengers after the first stop would be left: (2/3) * (3/5) * x = 22.\n    # Now we can calculate x, the original number of passengers.\n\n    remaining_after_first_stop = 3/5\n    remaining_after_second_stop = 2/3\n    people_left = 22\n\n    # Solve for x\n    x = people_left / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return int(x)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n\n    # The area of the isosceles right triangle is (1/2)*2*2 = 2.\n    total_area = 2\n    \n    # The area of a quadrant circle with radius 1 is (1/4)*pi*(1^2) = pi/4.\n    circle_area = sp.pi / 4\n    \n    # The probability is the ratio of the circle area to the total area.\n    probability = circle_area / total_area\n    \n    # Return the evaluated probability.\n    return float(probability)\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n    \n    either_A = math_A + english_A - both_A\n    \n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    # Time Hannah left school\n    left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    \n    # Time Hannah caught the bus\n    caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    \n    # Time taken from when she left school to catching the bus\n    walk_to_bus_stop = (caught_bus - left_school).seconds // 60\n    \n    # Time bus trip took\n    bus_trip = 18\n    \n    # Time Hannah got home\n    got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Time from getting off the bus to getting home\n    walk_from_bus = (got_home - (caught_bus + timedelta(minutes=bus_trip))).seconds // 60\n    \n    # Total walking time\n    total_walking_time = walk_to_bus_stop + walk_from_bus\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # First digit can't be zero and must be at most 2 since it's 1/4 of last digit\n        for D in range(1, 10, 4):  # Last digit must be a multiple of 4\n            if A == D / 4:\n                for B in range(0, 10):\n                    if B == A - 1:\n                        for C in range(0, 10):\n                            if D == A * 4 and len(set((A, B, C, D))) == 4:\n                                ABCD = A * 1000 + B * 100 + C * 10 + D\n                                DCBA = D * 1000 + C * 100 + B * 10 + A\n                                if ABCD * 4 == DCBA:\n                                    return ABCD\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    subtracted_value = 10\n    divisor = 3\n\n    original_number = (result - subtracted_value) * divisor\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    # Given numbers are 2, 3, 8, 4, a, 7, 6 and their mean is 5\n    mean = 5\n    # Calculate the sum of the other numbers\n    other_numbers_sum = 2 + 3 + 8 + 4 + 7 + 6\n    # The total sum of the numbers is mean * number of entries\n    total_sum = mean * (6 + 1)  # There are 6 known entries plus one unknown 'a'\n    # Calculate the value of 'a'\n    a = total_sum - other_numbers_sum\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    part_2_and_3 = 30000 + 452\n    missing_number = (total - part_2_and_3) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 20 / 100 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    ribbon_length_m = ribbon_length_cm / 100\n    piece_length_m = ribbon_length_m / 2\n    return piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Worst case scenario in picking socks of different colors.\n    # As there are 3 colors, picking 3 socks could still result in 3 socks of different colors.\n    # To guarantee at least one pair, Lina needs to pick one more sock.\n    # This is the Pigeonhole Principle where if you have n pigeonholes and n+1 pigeons,\n    # at least one pigeonhole must contain more than one pigeon.\n    \n    max_different_socks = 3  # One of each color\n    socks_to_ensure_pair = max_different_socks + 1  # One more to guarantee a pair\n    \n    return socks_to_ensure_pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7  # pupils to the left, Victoria, pupils to the right\n    total_rows = 1 + 1 + 8  # rows in front of her, Victoria's row, rows behind her\n    total_pupils = pupils_per_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    remaining_marks = total_marks_for_3_tests - 172\n    return remaining_marks\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal_amount = 400000\n    interest_rate = 1.2 / 100  # Converting percentage to decimal\n    time_period = 1  # 1 year\n\n    interest_received = principal_amount * interest_rate * time_period\n\n    return interest_received\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number\n    x = symbols('x')\n\n    # Construct the equation based on the problem description\n    equation = Eq(((x + 3) / 4) * 9, 81)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / ((20 + 11 - i) * (i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # Distance covered from 8.00 to 8.30 am\n    distance_covered = 6300 - 1800\n    # Time taken to cover that distance\n    time_taken = 30 # minutes, since it is from 8.00 to 8.30 am\n    # Speed of jogging\n    speed = distance_covered / time_taken # in meters per minute\n\n    # Remaining distance to cover\n    remaining_distance = 1800\n    # Time to cover remaining distance\n    time_to_cover_remaining = remaining_distance / speed # in minutes\n\n    # Time he will reach his friend's house in terms of minutes past 8 am\n    arrival_time_minutes_past_8 = time_taken + time_to_cover_remaining\n    # Convert minutes past 8 into hours and minutes\n    arrival_hour = 8 + int(arrival_time_minutes_past_8 // 60)\n    arrival_minute = int(arrival_time_minutes_past_8 % 60)\n\n    # Format arrival minute with padding if necessary\n    formatted_minute = str(arrival_minute).zfill(2)\n    \n    return f'{arrival_hour}:{formatted_minute}'\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = remaining_candy * (1/3)\n    candy_left = remaining_candy - candy_given_to_brother\n    return int(candy_left)\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Mrs. Smith's unknown sugar percentage\n    x = symbols('x')\n\n    # Calculate the total volume of both Mr. and Mrs. Smith's drinks\n    volume_mr_smith = 300 + 600\n    volume_mrs_smith = 700 + 300\n\n    # Calculate the total amount of sugar for Mr. Smith's drinks\n    sugar_mr_smith = 300 * 0.50 + 600 * 0.20\n\n    # Set up the equation for Mrs. Smith's drinks\n    sugar_mrs_smith = 700 * 0.10 + 300 * (x / 100)\n    \n    # Create an equation where both sugar percentages are equal\n    equation = Eq(sugar_mr_smith / volume_mr_smith, sugar_mrs_smith / volume_mrs_smith)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    # Extract the solution and round it to 2 decimal places\n    x_value = round(solution[0], 2)\n\n    return x_value\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money Amy had originally.\n    x = symbols('x')\n\n    # The price per donut and per muffin\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n\n    # She spent half of her money on donuts and half on muffins\n    money_spent_on_donuts = x / 2\n    money_spent_on_muffins = x / 2\n\n    # The number of donuts and muffins she bought\n    donuts = money_spent_on_donuts / price_per_donut\n    muffins = money_spent_on_muffins / price_per_muffin\n\n    # Equation based on the problem statement\n    equation = Eq(donuts - muffins, 54)\n\n    # Solve the equation\n    solutions = solve((equation), (x))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_10 = 10\n    kenny_age_diff = 2\n\n    # Symbols for Kenny and his brother's age when May is 10\n    kenny, brother = symbols('kenny brother')\n\n    # Equations based on the problem statement\n    equation1 = Eq(kenny - brother, kenny_age_diff)\n    equation2 = Eq(kenny + brother, 3 * may_age_10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    # Kenny's age when May is 10\n    kenny_age_when_may_is_10 = solutions[kenny]\n\n    # The difference in age between Kenny and May this year\n    kenny_current_age = kenny_age_when_may_is_10 - (10 - 7)\n    may_current_age = 7\n    age_difference = kenny_current_age - may_current_age\n\n    return age_difference\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Given values\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    weight_per_bag_g = 250\n    sell_price_per_bag_pence = 65\n    \n    # Convert total weight to grams for consistency with weight_per_bag\n    total_weight_g = total_weight_kg * 1000\n    \n    # Calculate the number of bags\n    number_of_bags = total_weight_g / weight_per_bag_g\n    \n    # Calculate the total sell price\n    total_sell_price_pence = number_of_bags * sell_price_per_bag_pence\n    \n    # Convert cost price to pence for consistency with sell price\n    cost_price_pence = cost_price_pounds * 100\n    \n    # Calculate the profit \n    profit_pence = total_sell_price_pence - cost_price_pence\n    \n    # Calculate the percentage profit\n    percentage_profit = (profit_pence / cost_price_pence) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    \n    # Subtract 1 apple for each of the other children to ensure each has at least one\n    other_children_apples = children - 1\n    \n    # Calculate the maximum apples for the child with the most\n    max_apples = total_apples - other_children_apples\n    \n    return max_apples\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # Distance between 4th and 9th tooth is 30mm, which means there are 5 intervals (since 9 - 4 = 5).\n    # The distance between each tooth is 30mm / 5 intervals\n    distance_per_interval = 30 / 5\n    \n    # Since there are 100 teeth, there are 99 intervals.\n    # The total length of the comb is the distance per interval times the number of intervals.\n    total_length_mm = distance_per_interval * 99\n    \n    # Convert mm to cm by dividing by 10.\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n\n    # Mum's age in 1996\n    mum_age_1996 = 40\n\n    # Calculating the year when mum was 25\n    year_when_mum_was_25 = 1996 - (40 - 25)\n\n    # Calculating the year difference between 2008 and the year mum was 25\n    year_diff = 2008 - year_when_mum_was_25\n\n    # Calculating grandmother's age when mum was 25\n    grandmother_age_when_mum_was_25 = grandmother_age_2008 - year_diff\n\n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    # Total number of ways to arrange 5 people without restrictions.\n    total_arrangements = math.factorial(5)\n    # Number of ways to arrange 5 people with two specific people standing next to each other.\n    # Treat the pair as one unit.\n    # Now we have 4 units to arrange (3 single people + 1 unit with 2 people).\n    pair_arrangements = math.factorial(4)\n    # Within this pair, the two people can switch places in 2 ways.\n    ways_for_pair_to_switch = 2\n    # Multiply the above two to find arrangements where 2 specific people are next to each other\n    arrangements_with_pair_together = pair_arrangements * ways_for_pair_to_switch\n    # Subtract the number of arrangements where the pair is together from the total arrangements.\n    arrangements_without_pair_together = total_arrangements - arrangements_with_pair_together\n    \n    return arrangements_without_pair_together\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from math import comb\n    # Since each friend must get at least 1 ice-cream cone, we distribute one to each first.\n    remaining_ice_creams = 5 - 3\n    # Now, we need to find the number of ways to distribute the remaining ice-cream cones to 3 friends.\n    # This is a problem of distributing identical items into distinguishable bins, which is a combination problem.\n    # Adding 2 dummy variables to seperate the remaining ice-cream cones which effectively turns the problem\n    # into one of placing the remaining ice-creams + 2 dividers in a row (combination with repetition).\n    # The formula for this is comb(n + k - 1, k), where n is the groups (3 friends) and k is the remaining items.\n    num_ways = comb(remaining_ice_creams + 3 - 1, remaining_ice_creams)\n    return num_ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = 2 / 3 * total_vegetables\n    remaining_after_monday = total_vegetables - monday_sales\n    tuesday_sales = 2 / 5 * remaining_after_monday\n    total_sales = monday_sales + tuesday_sales\n    return total_sales\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    ans = sum(5 * i if i % 2 == 1 else -5 * i for i in range(1, (855 // 5) + 1))\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p - q, 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # If we pick 15 balls of each color, we still don't meet the condition\n    # to have 16 balls of one color and 13 balls of another color.\n    # This is the worst case without meeting the condition.\n    worst_case_without_condition = (15 * 5) \n    \n    # We are asked for the least number needed to ensure that we have\n    # 16 balls of one color and 13 balls of another color. So we add one more ball\n    # to the worst case, which will guarantee that we have at least 16 of one color.\n    # We add 12 more balls to ensure we have at least 13 of another color.\n    \n    # 1 ball to ensure at least 16 of one color and 12 more to ensure at least 13 of another color\n    balls_needed = worst_case_without_condition + 1 + 12  \n\n    return balls_needed\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_biscuits = total_biscuits / 4\n    remaining_biscuits = total_biscuits - given_biscuits\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the cost of one table and c be the cost of one chair\n    t, c = symbols('t c')\n    \n    # Setting up the equations\n    # 2 tables + 5 chairs = £220\n    equation1 = Eq(2 * t + 5 * c, 220)\n    \n    # 1 table = 3 chairs\n    equation2 = Eq(t, 3 * c)\n    \n    # Solving the simultaneous equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent_money = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent_money / (1 - remaining_fraction)\n\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 75 * 0.4\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    original_distance = 20\n    remaining_distance = 4\n    ratio_lucas = 3\n    ratio_mother = 5\n    total_ratio = ratio_lucas + ratio_mother\n    \n    distance_walked_by_lucas = (ratio_lucas / total_ratio) * (original_distance - remaining_distance)\n    \n    return distance_walked_by_lucas\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1  # Since the sequence is decreasing\n    number_of_terms = 30\n\n    # Sum of n terms of an arithmetic sequence: n/2 * (2a + (n-1)*d)\n    sum_of_terms = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    # Unit rate calculation\n    unit_rate = pizzas_initial / people_initial\n\n    # Total pizzas needed for 35 people\n    pizzas_final = unit_rate * people_final\n\n    return int(pizzas_final) if pizzas_final.is_integer() else round(pizzas_final)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "import math\n\ndef solution():\n    num_teams = 16\n    return math.ceil(math.log(num_teams, 2))\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_earnings = solve(equation, julie)[0]\n    marion_earnings = 2 * julie_earnings\n    ethan_earnings = 5 * julie_earnings\n\n    total_earnings = julie_earnings + marion_earnings + ethan_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students in the big class, y be the number of students in the small class\n    x, y = symbols('x y')\n\n    # Each student in big class received 2 apples, small class 2 apples\n    # Each student in big class received 3 oranges, small class 2 oranges\n    # Total apples = 2x + 2y = 48\n    # Total oranges = 3x + 2y = 55\n    \n    equation1 = Eq(2*x + 2*y, 48)\n    equation2 = Eq(3*x + 2*y, 55)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n\n    # Find the maximum number considere that when multiplied by 72 gives a perfect square\n    max_number = floor(sqrt(2016 * 72))\n\n    # Calculate the square root, divide by sqrt(72), and count the number of integers in the range\n    count = 0\n    for i in range(1, max_number + 1):\n        root = sqrt(i**2 / 72)\n        if root == floor(root) and root <= 2016:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    single_lollipop_cost = 5\n    total_lollipops = 10\n    total_cost = single_lollipop_cost * total_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent Danny's current age and e represent Efron's current age\n    d, e, n = symbols('d e n')\n\n    # Danny is 30 years older than Efron\n    equation1 = Eq(d, e + 30)\n    \n    # The current ratio of Danny's age to Efron's age is 8:3\n    equation2 = Eq(d/e, 8/3)\n\n    # Find out Danny's and Efron's current ages\n    current_ages = solve((equation1, equation2), (d, e))\n    d_age = current_ages[d]\n    e_age = current_ages[e]\n\n    # In n years, the ratio of Danny's age to Efron's age will be 5:3\n    equation3 = Eq((d + n) / (e + n), 5/3)\n\n    # Solving for n\n    n_years = solve(equation3.subs([(d, d_age), (e, e_age)]), n)\n\n    return n_years[0]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We use the Chinese Remainder Theorem which states that for the system of congruences\n    # x ≡ a (mod m)\n    # x ≡ b (mod n)\n    # ...\n    # where m, n, ... are pairwise coprime, there exists a unique solution modulo the product of m, n, ...\n\n    # In this case, the system of congruences is:\n    # x ≡ 0 (mod 5) because children are divided into groups of 5 with no one left out\n    # x ≡ -1 (mod 7) because when divided into groups of 7, one child is left out\n    # x ≡ -1 (mod 8) because when divided into groups of 8, one child is left out\n\n    congruences = [(0, 5), (-1, 7), (-1, 8)]\n\n    # Since the Chinese Remainder Theorem requires coprime moduli, and our moduli are not all coprime,\n    # solve_congruence function will handle this.\n\n    # We solve the system of congruences to find the minimum positive integer solution\n    num_children, _ = solve_congruence(*congruences)\n\n    return num_children\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made_per_gram = 100 / 40  # Calculates how many cookies can be made per gram of butter\n    butter_needed_for_150_cookies = 150 / cookies_made_per_gram  # Calculates butter needed for 150 cookies\n    return butter_needed_for_150_cookies\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    ways_pencils_rulers = 15 * 20\n    ways_pencils_pens = 15 * 10\n    ways_rulers_pens = 20 * 10\n\n    total_ways = ways_pencils_rulers + ways_pencils_pens + ways_rulers_pens\n\n    return total_ways\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    teams_in_group = 4\n    matches_in_group = teams_in_group * (teams_in_group - 1) // 2\n    groups = 8\n    group_stage_matches = groups * matches_in_group\n\n    knockout_matches = 16 - 1  # Round of 16, Quarter-finals, Semi-finals, Final and Third place match\n    total_matches = group_stage_matches + knockout_matches\n    return total_matches\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ball, racket = symbols('ball racket')\n    equation1 = Eq(ball + racket, 30)\n    equation2 = Eq(racket, ball + 28)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = (-6 / 6) == 6\n    return ans\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):  # The second digit cannot be 0 as we need a 3-digit number\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:\n            break  # The first digit cannot be two digits\n        for third_digit in range(1, 10):  # The third digit cannot be 0\n            if 9 < first_digit + second_digit + third_digit < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    while (n * (n - 1)) // 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    factors_count = 1\n    i = 2\n    while n > 1:\n        exp = 0\n        while n % i == 0:\n            n //= i\n            exp += 1\n        factors_count *= exp + 1\n        i += 1\n    return factors_count\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    # First equation: 3 apples + 2 bananas = 1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    \n    # Second equation: 1 apple + 1 banana = 0.48\n    equation2 = Eq(apple + banana, 0.48)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana]\n    \n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(x - 0.3 * x, 210)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    ways = pencils * rulers * pens\n    \n    return ways\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if correct * 6 - incorrect * 2 == 44:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    # create equations based on the given information\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    # solve the system of equations for the prices of shorts and T-shirts\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of triangles be 't', then quadrilaterals 't + 82', and pentagons are 2\n    t = symbols('t')\n    \n    # Triangles have 3 sides each, quadrilaterals have 4 sides each, pentagons have 5 sides each\n    # Total sides = number of triangles * 3 + number of quadrilaterals * 4 + number of pentagons * 5\n    eq = Eq(3 * t + 4 * (t + 82) + 5 * 2, 394)\n\n    # Solve the equation\n    t_value = solve(eq, t)[0]\n\n    # Find the number of quadrilaterals by plugging in the value of 't'\n    quadrilaterals = t_value + 82\n\n    return quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    return sum(numbers)\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # Loop for tens place (cannot be 0 for two-digits)\n        ones = tens - 3\n        if ones >= 0:  # Check ones place is non-negative\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n\n    third_term = second_term + difference\n\n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # since there are 4 posts, there are 3 gaps between them\n    \n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    all_boy_teams = 27 - 15  # from (i) and (ii)\n    all_girl_teams = all_boy_teams // 2  # from (iii)\n\n    boys_in_mixed_teams = 15 * 1  # one boy per team with only 1 boy\n    boys_in_all_boy_teams = all_boy_teams * 3  # three boys per all-boy team\n    \n    total_boys = boys_in_mixed_teams + boys_in_all_boy_teams\n    total_students = 150\n    girls = total_students - total_boys\n\n    return girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm_of_3_5_7 = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for last_two_digits in range(10, 100):  # Since it is a 3-digit number\n        number = int(f\"6{last_two_digits:02d}\")\n        if number % lcm_of_3_5_7 == 0:\n            return number\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of sweets Rachel has\n    # Let a represent the number of sweets Alice has\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 pieces of sweet, they have the same number of sweets\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 pieces of sweet, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq((r - 8) / 3, a - 8)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    digit_sum = sum(int(digit) for digit in str(product))\n    return digit_sum\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    num1 = '61'  # Base 7\n    num2 = '34'  # Base 7\n\n    # Convert base 7 numbers to base 10 to perform the subtraction\n    num1_base10 = int(num1, 7)\n    num2_base10 = int(num2, 7)\n\n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n\n    return ans or '0'\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and Town B be d km\n    # We have two equations formed by the different speeds and arrival times\n    # At 10 km/h, arrival time is 10 am\n    # At 15 km/h, arrival time is 8 am\n    \n    # Let t_10 be the time taken if Ben cycles at 10 km/h\n    # Ben leaves two hours earlier at 15 km/h, so the time taken is t_10 - 2\n    \n    # 1st equation: t_10 * 10 = d\n    # 2nd equation: (t_10 - 2) * 15 = d\n    \n    # Since the distance d is constant, we can equate the two equations:\n    # t_10 * 10 = (t_10 - 2) * 15\n    # Solving for t_10,\n    t_10 = (2 * 15) / (15 - 10)\n    \n    # The distance d is therefore,\n    d = t_10 * 10\n    \n    # Let t_9 be the time taken if Ben cycles to arrive at 9 am\n    # Since he arrives an hour earlier than when cycling at 10 km/h,\n    # t_9 = t_10 - 1\n    \n    t_9 = t_10 - 1\n    \n    # Now we calculate the speed required to cover distance d in time t_9\n    # Speed = Distance / Time\n    required_speed = d / t_9\n    \n    return required_speed\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 rabbits = 8 * (2 chickens) = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # There are 3 blue gloves and 6 green gloves\n    # Dilly needs to make sure to have at least one pair\n    # If Dilly picks one of each color (2 gloves), no guaranteed pair is found\n    # If Dilly continues by picking more gloves of different colors, still no guaranteed pair:\n    # 3rd glove - either color, still no guaranteed matching pair\n    # 4th glove - must pick a color already picked, but could be a different hand\n    # 5th glove - must pick a color already picked, but could be a different hand\n    # After the 5th glove, a pair of either color is guaranteed based on the pigeonhole principle\n    # Thus, with at most 5 gloves, a pair is guaranteed\n    return 5\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1\n    candies_per_student = total_candies // total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    # Let the number of baseball cards be x.\n    # Based on the given information, we need to find the smallest x that satisfies\n    # the following three conditions:\n    # x % 4 == 3\n    # x % 5 == 4\n    # x % 7 == 6\n\n    # Iterate through the natural numbers until we find the solution.\n    x = 1 \n    while True:\n        if x % 4 == 3 and x % 5 == 4 and x % 7 == 6:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * approximate_depreciation\n\n    return final_value\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_diff = 52\n    for n in range(1, 100):  # Trying for different sizes of square array\n        if n % 2 == 0:  # If n is even, boys will be on the outer and inner layer.\n            boys = n * n - (n - 2) * (n - 2)\n            girls = (n - 2) * (n - 2)\n        else:  # If n is odd, boys will be only on the outer layer.\n            boys = n * n - (n - 1) * (n - 1)\n            girls = (n - 1) * (n - 1)\n\n        if boys - girls == total_diff:\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, yuna = symbols('eugene yuna')\n    # Before Yuna buys 76 pins, Yuna has some amount yuna, and Eugene has 3 * yuna\n    # After Yuna buys 76 pins, Yuna has yuna + 76, and has 7/9 of what Eugene has\n    equation1 = Eq(eugene, 3 * yuna)\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, yuna))\n    \n    # Return the number of pins Eugene had\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_ways = factorial(len(word))\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n\n    return total_ways\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To find A such that the number is divisible by 9, sum digits and find A such that the sum is a multiple of 9\n    # Sum of the first 5 digits: 1+2+3+4+5 = 15\n    # Smallest A such that 15+A is a multiple of 9 is A=3 (since 15+3=18 and 18 is divisible by 9)\n    A = 3\n\n    # To find the remainder when divided by 4, we only need to consider the last two digits of the number\n    # This is because the remainder of a number when divided by 4 is determined by its last two digits\n    # The last two digits of the number will then be \"5A\" which is \"53\".\n    # Now we need to find the remainder when 53 is divided by 4.\n    remainder = 53 % 4\n\n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    # Construct the number based on the given information\n    ones = 5\n    tens = 8\n    hundreds = 2\n    \n    # Combine the digits to form the number\n    number = hundreds * 100 + tens * 10 + ones\n    \n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Kelly wants to leave a number of matches that is a multiple of 3 for Dan\n    # to ensure her victory. Since 11 is not a multiple of 3, she should make\n    # it become a multiple of 3 by removing matches.\n    # The highest multiple of 3 that is less than 11 is 9 (3 * 3).\n    # So, Kelly should remove 11 - 9 = 2 matches to leave 9 matches for Dan.\n    # This way, no matter if Dan picks 1 or 2 matches, Kelly can always\n    # pick in such a way that the total number of matches picked remains\n    # a multiple of 3, leading to her victory.\n\n    kelly_pick_to_leave_multiple_of_3 = 11 % 3\n    if kelly_pick_to_leave_multiple_of_3 == 0:\n        kelly_first_turn = 2  # Can pick either 1 or 2, but 2 is a strategic move\n    elif kelly_pick_to_leave_multiple_of_3 == 1:\n        kelly_first_turn = 1\n    else:  # kelly_pick_to_leave_multiple_of_3 == 2\n        kelly_first_turn = 2\n\n    return kelly_first_turn\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    total = solve(equation, total_flowers)\n    \n    return total[0]\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    # There are 3 kids to arrange in a row\n    num_kids = 3\n    \n    # Calculate the number of arrangements (permutations) of kids\n    # Since all kids are distinct, the number of ways to arrange them\n    # is simply the factorial of the number of kids\n    from math import factorial\n    num_arrangements = factorial(num_kids)\n    \n    return num_arrangements\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator_1 = (5 * 7 + 1) / 7\n    numerator_2 = (3 * 11 + 3) / 11\n    numerator_3 = (1 * 23 + 13) / 23\n    denominator_1 = (3 * 7 + 3) / 7\n    denominator_2 = (2 * 11 + 2) / 11\n    denominator_3 = (1 * 23 + 1) / 23\n\n    # Calculate the sum of numerators and denominators\n    total_numerator = numerator_1 + numerator_2 + numerator_3\n    total_denominator = denominator_1 + denominator_2 + denominator_3\n\n    # Calculate the final result of the division\n    ans = total_numerator / total_denominator\n    return ans\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    car_wheels = 4\n    motorcycle_wheels = 2\n\n    # Let's say all vehicles are motorcycles, then calculate how many more wheels are needed to make up the total.\n    wheels_if_all_motorcycles = total_vehicles * motorcycle_wheels\n    additional_wheels_needed = total_wheels - wheels_if_all_motorcycles\n\n    # Each car has 2 more wheels than each motorcycle. The number of additional wheels needed,\n    # divided by the difference in the number of wheels between cars and motorcycles,\n    # will give us the number of cars.\n    cars = additional_wheels_needed / (car_wheels - motorcycle_wheels)\n\n    return int(cars)\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_initial = 20\n    nicole_gives = 18\n    difference_after = 5\n\n    # After Nicole gives Jason 18 stickers, Jason has (20 + 18) stickers\n    jason_after = jason_initial + nicole_gives\n\n    # After giving away the stickers, Nicole has 5 less than what Jason has now\n    nicole_after = jason_after - difference_after\n\n    # Nicole had to give away 18 stickers to reach nicole_after amount\n    nicole_initial = nicole_after + nicole_gives\n\n    return nicole_initial\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original proportions of the Cuboid: length (l), breadth (b), and height (h)\n    # New proportions: 1.1 * l (length increased by 10%),\n    #                   4/5 * b (breadth reduced to 4/5),\n    #                   11/10 * h (height ratio of new to original is 11:10)\n\n    # Original volume\n    original_volume = 1 * 1 * 1  # Consider l, b and h to be 1 for simplicity since we want percentage\n    \n    # New volume\n    new_volume = 1.1 * (4/5) * (11/10)\n    \n    # New volume as a percentage of original volume\n    new_volume_percentage = (new_volume / original_volume) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(39):\n        for three_gram_weights in range(26):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # convert km to m\n    number_of_intervals = 9 - 1  # marshals create one less interval than their number\n\n    distance_between_marshals = total_distance_m / number_of_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    first_speed = 180  # meters per minute\n    first_time = 6  # minutes\n    second_speed = 120  # meters per minute\n    second_time = 8  # minutes\n\n    distance = (first_speed * first_time) + (second_speed * second_time)\n    return distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the count for red and green tiles\n    red_count = 0\n    green_count = 0\n    \n    # Calculate the size of the wall\n    wall_size = int(400 ** 0.5)\n    \n    # Iterate over the layers, considering that the wall is built from the outside in\n    for layer in range(1, wall_size + 1, 2):\n        red_count += (wall_size - (layer - 1)) ** 2\n        \n    for layer in range(2, wall_size + 1, 2):\n        green_count += (wall_size - (layer - 1)) ** 2\n    \n    # Find out which color has more tiles and calculate the difference\n    if red_count > green_count:\n        dominant_color = 'red'\n        more_tiles = red_count - green_count\n    else:\n        dominant_color = 'green'\n        more_tiles = green_count - red_count\n    \n    # Return the color which has more tiles and the difference\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    \n    # Calculate interest for the first year\n    first_year_interest = principal * rate\n    # Add the first year's interest to the principal for the second year\n    second_year_principal = principal + first_year_interest\n    # Calculate interest for the second year\n    second_year_interest = second_year_principal * rate\n\n    # Total interest after the second year\n    total_interest = first_year_interest + second_year_interest\n\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # Convert one hour and twenty minutes to minutes\n    \n    number_of_pictures = total_minutes // minutes_per_picture\n    \n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    fraction = 1 + 4/7\n    ans = round(fraction, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # The recurring sequence of digits in the decimal form of 3/7\n    sequence_length = len(recurring_sequence)\n    # Since there is a repeating sequence of six digits, we want to find the 69th digit in this sequence\n    index = (69 - 1) % sequence_length  # Adjusting for zero-based indexing and repeating pattern\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let x be the planned profit\n    # So on the first day he sold 70% of his goods and made 50% profit on those.\n    # That is 0.7 * 0.5 * x = 0.35x\n    # The total profit made was 82% of the planned profit\n    # That is 0.82x\n    # The profit made on the second day would be 0.82x - 0.35x = 0.47x\n    # Since he sold 30% of the goods on the second day, the discount rate on \n    # the second day can be found by\n    # Let d be the discount rate on the second day\n    # 0.3 * (1 + d) * x - 0.3 * x = 0.47x\n    # 0.3 * d * x = 0.47x\n    # d = 0.47 / 0.3\n    discount_rate = 0.47 / 0.3\n    return round(discount_rate, 2) * 100  # converting to percentage\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    # Amount of salt in Dylan's solution\n    dylan_salt = 300 * 0.35\n    \n    # Amount of salt in Daisy's solution\n    daisy_salt = 200 * 0.50\n    \n    # Total amount of salt in the mixed solution\n    total_salt = dylan_salt + daisy_salt\n    \n    # Total weight of the mixed solution\n    total_solution = 300 + 200\n    \n    # Concentration of the resulting solution\n    concentration = total_salt / total_solution\n    \n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Then Vastco sold 1.68x widgets in 2014\n    # In 2015, Vastco sold 32% more so that's 1.32 * 1.68x widgets\n    # In 2015, this is 44% more than what Megacorp sold, so (1 + 0.44)y = 1.32 * 1.68x\n    # Where y is the number of widgets Megacorp sold in 2015. Thus, y = (1.32 * 1.68x) / (1 + 0.44)\n    # We want the percentage increase for Megacorp from 2014 to 2015: ((y - x) / x) * 100\n    # Substitute y from above to find the percentage increase in terms of x\n    \n    # Utilizing the relationship between Vastco's and Megacorp's sales:\n    megacorp_2015_sales = (1.32 * 1.68) / (1 + 0.44)  # this represents the factor by which Megacorp's sales have increased, in terms of their 2014 sales\n\n    # Calculating the percentage increase\n    percentage_increase_megacorp = ((megacorp_2015_sales - 1) * 100)\n\n    return percentage_increase_megacorp\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n    \n    equation1 = Eq(younger_son, older_son + 3)\n    equation2 = Eq(younger_daughter, older_daughter + 2)\n    equation3 = Eq(younger_son, 2 * older_daughter)\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    youngest = min(solutions.values())\n    \n    return youngest\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits from 1 to 9\n    digits_1_9 = 9 * 1\n    \n    # Calculate the number of digits from 10 to 99\n    digits_10_99 = (99 - 10 + 1) * 2\n    \n    # Calculate the number of digits from 100 to 113\n    digits_100_113 = (113 - 100 + 1) * 3\n    \n    # Sum all calculated digits\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let x be the original number of pearls\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n    original_pearls = solve(equation, x)\n\n    return original_pearls[0]\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n\n    # Borrowing 1 bottle\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work = workers * days_for_3_workers  # total work done is the product of workers and days\n    days_for_1_worker = work / 1  # divide total work by 1 worker to find days needed for 1 worker\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial as fact\n\ndef solution():\n    total_ways = 3**4  # Each person has 3 choices, and there are 4 people\n    exclude_ways = 3 * (2**4 - 2)  # Ways where one entrance is not used (2 choices for each person, exclude the case where none choose)\n    include_ways = total_ways - exclude_ways\n    return include_ways\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    brother_erasers = (total_erasers - difference) // 2\n    return brother_erasers\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin tournament, every team plays against every other team exactly once.\n    # The total number of matches that can be played between n teams is given by n * (n-1) / 2\n    # Since 45 matches were played, we have n * (n-1) / 2 = 45\n    # This gives us the quadratic equation n^2 - n - 90 = 0\n    # We can solve this equation to find the value of n\n\n    from sympy import symbols, solve\n\n    n = symbols('n')\n    equation = n * (n - 1) / 2 - 45\n    teams = solve(equation, n)\n\n    # Filter the solution for positive integer value (the number of teams must be positive and whole)\n    num_teams = [int(team) for team in teams if team.is_integer and team > 0][0]\n\n    return num_teams\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Mayank doubles the number (2x), adds 4, and gets 40.\n    # So, the equation to solve is: 2x + 4 = 40\n    # To find x (Mayank's number), we do inverse operations to isolate x.\n    # Subtract 4 from both sides: 2x = 40 - 4\n    # Divide both sides by 2: x = (40 - 4) / 2\n    x = (40 - 4) / 2\n    return x\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit_per_glass = 1\n    loss_per_broken_glass = 1\n    total_profit = 92\n\n    # Hypothesis: if none were broken\n    if_all_safe = total_glasses * profit_per_glass\n    \n    # Calculate difference which is due to broken glasses\n    difference = if_all_safe - total_profit\n\n    # The difference is twice the number of broken glasses because for each glass broken\n    # Peter loses 2 dollars both the earning and the penalty\n    broken_glasses = difference // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7  # Cost per one banana\n    total_cost = 15 * cost_per_banana  # Total cost for 15 bananas\n    change = (12 * 100) - total_cost  # Change from £12 in pence\n\n    return change / 100  # Convert pence back to pounds\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let the original number of boats be x and the number of people be y.\n    # From the first condition, (x - 1) boats taking 9 people each\n    # y = 9 * (x - 1)\n    # From the second condition, (x + 1) boats taking 6 people each\n    # y = 6 * (x + 1)\n    # Equate both expressions to solve for x and y\n    \n    for x in range(1, 100): # We limit the range for practicality, assuming a class won't have 100 boats\n        if 9 * (x - 1) == 6 * (x + 1):\n            y = 9 * (x - 1)\n            return y\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Since we know that the division of some number by 3 gives us 2,\n    # it is clear that this number must be 6, as 6 is the only number\n    # in the list that, when divided by 3, results in a whole number, and is 2 times 3.\n    required_number = 6\n\n    # Return the required number\n    return required_number\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest integer be x, the next consecutive odd integer would be x+2 and the next one x+4.\n    # Then their sum is x + (x + 2) + (x + 4) = 57.\n    # Solving for x gives us the smallest integer.\n\n    x = symbols('x')\n    equation = Eq(x + (x + 2) + (x + 4), 57)\n    smallest_integer = solve(equation, x)[0]\n\n    return smallest_integer\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n    common_numbers = set(multiples_of_4).intersection(factors_of_36)\n    ans = list(common_numbers)[0] if common_numbers else None\n    return ans\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    \n    pencils = 32\n    pens = 40\n    \n    greatest_common_divisor = gcd(pencils, pens)\n    \n    max_students = greatest_common_divisor\n    \n    return max_students\n\nans = solution() "
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    perms = permutations(digits, 4)\n    min_sum = float('inf')\n    for perm in perms:\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        min_sum = min(min_sum, num1 + num2)\n    return min_sum\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    john, peter = symbols('john peter')\n    \n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq(john * 4/5, (peter - peter * 3/10) / 2)\n    \n    solutions = solve((equation1, equation2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    # Multiplying the number of each animal by the respective amount of apples they ate\n    horses_apples = 6 * 20\n    pigs_apples = 12 * 15\n    rabbits_apples = 12 * 5\n\n    # Calculating the total weight of apples eaten by all animals\n    total_apples = horses_apples + pigs_apples + rabbits_apples\n    \n    # Calculating the total number of animals\n    total_animals = 6 + 12 + 12\n\n    # Finding the average amount of apples eaten per animal\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # the first digit can't be 0\n        for j in range(10): # the second digit can be from 0 to 9\n            if i + j < 10:  # the sum of first two digits must be less than 10 to be a single digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_previous_tests = 4\n    previous_average = 60\n    new_test_score = 70\n\n    total_score = (total_previous_tests * previous_average) + new_test_score\n    new_average = total_score / (total_previous_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    # Sale plans:\n    # Plan A: Buy two cups get one free\n    # Plan B: 20% off each cup\n\n    # Applying Plan A (for every 2 cups bought, 1 is free)\n    cups_paid_for_plan_a = total_cups - (total_cups // 3)  # One free cup for every two bought\n    cost_with_plan_a = cups_paid_for_plan_a * full_price_per_cup\n\n    # Applying Plan B (20% off each cup)\n    discount_per_cup_plan_b = full_price_per_cup * 0.20\n    cost_per_cup_with_plan_b = full_price_per_cup - discount_per_cup_plan_b\n    cost_with_plan_b = total_cups * cost_per_cup_with_plan_b\n\n    # Finding the minimum cost\n    ans = min(cost_with_plan_a, cost_with_plan_b)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of peaches Eddie gets (p), and the number of students in class B (b)\n    p, b = symbols('p b')\n    \n    # Use the information given in the question to create equations\n    equation1 = Eq(p, 5 * (b + 3) + 10)  # If all peaches are given to Class A\n    equation2 = Eq(p, 8 * b - 2)  # If all peaches are given to Class B\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (p, b))\n    \n    # The number of peaches Eddie gets\n    return solutions[p]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    least_number, _ = solve_congruence(*congruences)\n\n    return least_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson_spent = 74\n    jayden_spent = 120\n    total_money = 590\n\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n    \n    equation1 = Eq(benson_left, 3 * jayden_left)\n    equation2 = Eq(benson_left + benson_spent + jayden_left + jayden_spent, total_money)\n\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    water_fraction = 3 / 4\n    water_litres = total_orange_drink * water_fraction\n    return water_litres\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    last_five_digits = str(total_sum)[-5:]\n    return int(last_five_digits)\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    units_digit_of_547 = 7\n    units_digit_of_479 = 9\n\n    result_units_digit = (units_digit_of_547 * units_digit_of_479) % 10\n\n    return result_units_digit\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 380):\n        if number * number + number == 380:\n            return number\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_ml = 300\n    raspberry_ratio = 1\n    \n    raspberry_ml = (raspberry_ratio / total_parts) * total_ml\n    \n    return raspberry_ml\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let v_b be the walking speed of Betty in meters per minute\n    # Let v_k be the walking speed of Kevin in meters per minute\n    # Let t be the time in minutes Kevin walked until Betty reached the grocery store\n    \n    # From the problem statement, we have the following relationships:\n    # (v_b * 6) = (v_k * t) + (v_k * 3)             ... eq1\n    # (v_b * 6) + 900 = (v_b * (6 + t))             ... eq2\n    \n    # We also know Kevin walked 150 meters in t minutes:\n    # (v_k * t) = 150                              ... eq3\n    \n    # Substitute eq3 into eq1 to get v_b in terms of v_k:\n    # (v_b * 6) = 150 + (v_k * 3)                   ... eq1.1\n    \n    # Now we express v_k from eq1.1:\n    # v_b = (150 + (v_k * 3)) / 6                   ... eq1.2\n    \n    # We also express v_b from eq2:\n    # (v_b * 6) + 900 = v_b * (6 + t)               ... eq2.1\n    # v_b = 900 / t                                 ... eq2.2\n    \n    # Now we equal eq1.2 and eq2.2:\n    # (150 + (v_k * 3)) / 6 = 900 / t               ... eq4\n    \n    # Substitute eq3 into eq4 to get t:\n    # (150 + (150 / t * 3)) / 6 = 900 / t           ... eq4.1\n    # 150 / 6 + (150 / t / 2) = 900 / t             ... eq4.2\n    # 25 + (150 / 2t) = 900 / t                     ... eq4.3\n    # 25t + 75 = 900                                ... eq4.4\n    # 25t = 825                                     ... eq4.5\n    # t = 33\n    \n    # Time (in minutes) Kevin walked until Betty reached the grocery store\n    t = 825 / 25\n    \n    # Since Betty takes 6 minutes to reach the store, Kevin takes 6 + t minutes.\n    # Therefore, the time earlier Betty leaves than Kevin is:\n    time_difference = (6 + t) - 6\n\n    return time_difference\n\nans = solution()"
    ]
}