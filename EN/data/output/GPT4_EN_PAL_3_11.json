{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    return sum(i**2 for i in range(first_term, n + 1))\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9*60  # Convert 9:00 AM to minutes\n    end_time = 10*60   # Convert 10:00 AM to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration  # Return the result in minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_money_after_bag = 90 / 0.6\n    initial_money = remaining_money_after_bag / (1 - 0.2)\n    return initial_money\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students // 6\n    biology_students = (total_students * 2) // 9\n    chemistry_students = total_students - physics_students - biology_students\n\n    return chemistry_students\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    # After giving x apples, Amy will have (37 - x) apples\n    # John will have (15 + x) apples\n    # Amy will have 4 more than John: (37 - x) = (15 + x) + 4\n    # Solve for x\n    x = (amy_apples - john_apples - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Let the number of students in one row (or one column) of the initial square be x\n    # Then the total number of students is x^2 + 5\n    # If we add one row and one column, the new square will have (x + 1) rows and columns\n    # The total number of students needed for this new square is (x + 1)^2\n    # According to the condition, (x + 1)^2 = x^2 + 5 + 26\n    # This simplifies to x^2 + 2x + 1 = x^2 + 31\n    # Subtracting x^2 from both sides, we get 2x + 1 = 31\n    # Subtracting 1 from both sides and then dividing by 2, we get x = 15\n    # Now, the total number of students in Year 4 is x^2 + 5 = 15^2 + 5\n\n    x = (31 - 1) // 2  # this gives x = 15\n    num_students = x ** 2 + 5  # this gives the total number of students\n\n    return num_students\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percentage = 0.10\n    loss_percentage = 0.10\n    \n    # Calculate cost price of the houses\n    cost_price_profit_house = sale_price / (1 + profit_percentage)\n    cost_price_loss_house = sale_price / (1 - loss_percentage)\n    \n    # Calculate the total cost price and the total sale price\n    total_cost_price = cost_price_profit_house + cost_price_loss_house\n    total_sale_price = 2 * sale_price\n    \n    # Calculate the profit or loss, if the number is negative then it's a loss, if positive it's a profit\n    profit_or_loss = total_sale_price - total_cost_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of potted plants to arrange in a row\n\n    # Using permutations formula P(n, r) = n! / (n - r)!\n    ways_to_arrange = factorial(n) // factorial(n - r)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + (3 * jane_saved)\n    return ali_saved\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure a guaranteed win, Fred needs to control the game to ensure that\n    # George is always faced with a multiple of 4 at his turn.\n    # If Fred removes a certain number (x) of oranges on his first turn,\n    # he can always adjust his next move to make the total number of oranges\n    # George is faced with a multiple of 4.\n    # This can be achieved by having a total of 4n (n being a whole number)\n    # oranges after Fred's turn, so that no matter if George removes 1, 2, or 3,\n    # oranges, Fred can always bring the count back down to a multiple of 4.\n\n    oranges = 15\n\n    # Fred should remove a number of oranges so that the remaining count is\n    # a multiple of 4. Since 15 is not a multiple of 4, and the closest multiple\n    # below 15 is 12, Fred should remove 15 - 12 = 3 oranges.\n\n    # Fred takes in his first turn:\n    fred_first_turn = oranges % 4\n    return fred_first_turn if fred_first_turn != 0 else 3\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Tom's age and his dad's age\n    toms_age = symbols('toms_age')\n\n    # Equation based on the problem statement\n    equation = Eq(4 * toms_age - 5, 43)\n\n    # Solve for Tom's age\n    solution = solve(equation, toms_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Shoes can be combined with both shirts and dresses, but\n    # heels can only be combined with dresses.\n    shirt_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n\n    # The total number of combinations Cherry can wear\n    total_combinations = shirt_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    \n    if fraction > decimal:\n        ans = \"3/20 is larger\"\n    else:\n        ans = \"0.16 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    from math import factorial\n    \n    # Function to calculate permutations\n    def perm(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # A has to be between B and C, which can occur in 2 ways, BAC or CAB.\n    # The remaining 2 students can be arranged in the remaining 2 positions in 2! ways.\n    # So, the number of ways to arrange A, B, and C is 2 * 2! = 4.\n    # Now, we have to arrange A, B, C as a single unit with D and E, which is a permutation of 3 distinct items, which gives 3! arrangements.\n    # Multiplying the combinations gives us the total arrangements.\n    number_of_ways = perm(3, 3) * 4\n   \n    return number_of_ways\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the number of each note\n    num_notes = symbols('num_notes')\n\n    # Create equations based on the problem statement\n    equation = Eq(5 * num_notes + 10 * num_notes + 20 * num_notes, 280)\n\n    # Solve the equation\n    solved = solve(equation, num_notes)\n\n    # Return the total number of notes in the purse\n    return solved[0]\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    # Since the first and last digits of a three-digit palindrome must be the same,\n    # We can choose any number from 1 to 9 for the first digit (0 is not allowed because it won't be a three-digit number).\n    # The second digit can be any number from 0 to 9.\n    # The third digit must be the same as the first digit, so it has no choice after the first digit is chosen.\n    \n    # Number of choices for the first digit:\n    first_digit_choices = 9  # (from 1 to 9)\n    # Number of choices for the second digit:\n    second_digit_choices = 10  # (from 0 to 9)\n    # No choice for the third digit, so it is just 1.\n    \n    # The total number of three-digit palindromic numbers can be calculated by multiplying the choices for each digit:\n    total_palindromic_numbers = first_digit_choices * second_digit_choices\n    \n    return total_palindromic_numbers\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number is determined by the last digit of its multiples.\n\n    # Last digit of any multiple of 2 repeated is always the last digit of 2^4 i.e., 6\n    # because powers of 2 cycle through the pattern 2, 4, 8, 6 and then repeat.\n    \n    # Similarly, the last digit of any multiple of 7 repeated is always the last digit of 7^4 i.e., 1\n    # since powers of 7 cycle as 7, 9, 3, 1 and then repeat.\n    \n    # For 9, the cycle is just 9, 1, so for any even power of 9, the last digit is 1.\n\n    # Since we have 100 of each, which is a multiple of 4, we only need to take the \n    # last digit of the given powers to determine the last digit of the product.\n\n    last_digit_of_2 = 6  # 2**4 ends with 6\n    last_digit_of_7 = 1  # 7**4 ends with 1\n    last_digit_of_9 = 1  # 9**2 ends with 1\n\n    # The last digit of the expression is the product of last digits of individual numbers\n    last_digit_of_expression = (last_digit_of_2 * last_digit_of_7 * last_digit_of_9) % 10\n\n    return last_digit_of_expression\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # If we want to minimize the biggest pile while still ensuring each pile is different,\n    # we should start distributing the marbles such that the other piles have the smallest\n    # number of marbles, which is 1, 2, and 3 for the three smaller piles.\n    pile1 = 1\n    pile2 = 2\n    pile3 = 3\n    \n    # Now we find the remaining number of marbles to put in the biggest pile.\n    remaining_marbles = 16 - (pile1 + pile2 + pile3)\n    \n    # The remaining number of marbles is the smallest possible number for the biggest pile.\n    return remaining_marbles\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Starting point for checking primes, the smallest prime number.\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    num_minibusses = (students + capacity - 1) // capacity\n    return num_minibusses\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Sara jogs from 6:30 a.m. to 8:30 a.m.\n    jogging_hours = 2\n    jogging_speed = 8 # km per hour\n    jogging_distance = jogging_hours * jogging_speed\n\n    # Sara walks from 8:30 a.m. to 9:30 a.m.\n    walking_hours = 1\n    walking_speed = jogging_speed / 2 # half her jogging speed\n    walking_distance = walking_hours * walking_speed\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The formula for the sum of the squares of the first n odd numbers is not given directly\n    # in the knowledge point routes. However, we know that the square of the nth odd\n    # number is (2n-1)^2. So we can use the given formula for the sum of squares from 1 to n\n    # and subtract the sum of squares of even numbers which is (2n)^2/4.\n    \n    n = (19 + 1) // 2  # There are 10 odd numbers from 1 to 19\n    sum_squares_odd = (n * (n + 1) * (2 * n + 1)) // 6 - (n * (n + 1) * (2 * n + 1)) // 24\n    \n    return sum_squares_odd\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Assuming that each floor is at an equal distance from each other\n    total_floors_to_cover = 4 - 1  # from first to fourth floor\n    single_floor_time = 12 / total_floors_to_cover\n    return single_floor_time\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_operation(M, N):\n        return M * N + N + 1\n\n    def square_operation(M, N):\n        return 8 * M - N * N\n\n    diamond_result = diamond_operation(7, 6)\n    square_result = square_operation(diamond_result, 9)\n\n    return square_result\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    # Starting value\n    result = 0\n\n    # For each fraction from 1 to 2007\n    for i in range(1, 2008):\n        # Calculate each term and add it to the result\n        result += (i ** 2 + (i + 1) ** 2) / (i * (i + 1))\n\n    # Rounding the result to the nearest whole number\n    ans = round(result)\n\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Correct average height of the girls\n    correct_avg_height = 163\n\n    # Correct height of the girl whose height was recorded incorrectly\n    correct_height = 162\n\n    # Incorrectly recorded height\n    incorrect_height = 126\n\n    # Incorrect average height of the girls due to the wrong recording\n    incorrect_avg_height = 159\n    \n    # Difference caused by the incorrect recording\n    height_diff = correct_height - incorrect_height\n    \n    # The difference in the average caused by the incorrect recording\n    avg_diff = correct_avg_height - incorrect_avg_height\n    \n    # The number of girls\n    num_girls = height_diff / avg_diff\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    # Assuming the calculation is asking for the product of 123456789 and 987654321\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def hash_operation(a, b):\n    return a * b - 2 * a + 4\n\ndef solution():\n    result = 200\n    for i in range(199, 0, -1):\n        result = hash_operation(result, i)\n    return result\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n    \n    for i in range(2, 10):\n        fraction_part = Fraction(1, i)\n        result *= (1 + fraction_part)\n    \n    return float(result)\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    ken, beth = symbols('ken beth')\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # We will use the formula: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    # However, since we want the sum of the cubes of odd numbers only\n    # we need to adjust our approach.\n    # The sum of the first n odd numbers is n^2\n    # So, for 1^3 + 3^3 + 5^3 + ... + (2n-1)^3, we can take (1+2+...+n)^2 and \n    # subtract the sum of cubes of even numbers from 2^3 + 4^3 + ... + (2n)^3\n    \n    # Calculate the sum of cubes of numbers from 1 to n\n    n = 7  # Because 13 is the 7th odd number\n    total_sum = (n * (n + 1) // 2) ** 2\n    \n    # Subtract the sum of cubes of even numbers from 2 to n*2\n    even_sum = sum((2 * i) ** 3 for i in range(1, n + 1))\n\n    # The result is the sum of cubes of odd numbers from 1 to 13\n    ans = total_sum - even_sum\n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    capacity_per_container = 4\n    \n    num_containers = (total_apples + capacity_per_container - 1) // capacity_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # Lengths of ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Calculate the greatest common divisor of the three ribbon lengths\n    gcd_12 = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_12, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # After giving each of the 3 kids 2 oranges, we have 13 - 3*2 = 7 oranges left.\n    # We now need to find the number of ways to distribute these 7 oranges among 3 kids.\n    # This is a problem of distributing N indistinguishable objects into R distinguishable boxes,\n    # which can be represented by the formula: comb(N + R - 1, R - 1), where\n    # N is the number of objects and R is the number of boxes.\n\n    remaining_oranges = 7\n    kids = 3\n    # Apply the formula to find the number of combinations\n    number_of_ways = comb(remaining_oranges + kids - 1, kids - 1)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube in range(1, 50):\n        for square in range(1, 50):\n            if cube**3 == square**2 + 2:\n                return square**2\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two numbers\n    x, y = symbols('x y')\n    \n    # The sum of two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Oliver accidentally shifted the decimal point in one of the numbers\n    # This can either create x/10 + y = 5.87 or x + y/10 = 5.87.\n    # We need to try both equations since we do not know which number was shifted\n    \n    # Let's solve for the first scenario where the first number was shifted\n    equation2a = Eq(x/10 + y, 5.87)\n    solution1 = solve((equation1, equation2a), (x, y))\n    \n    # Check if the numeric solution makes sense i.e., no negative numbers or numbers that would violate the other equation\n    if all(val >= 0 for val in solution1.values()):\n        diff1 = abs(solution1[x] - solution1[y])\n        return int(100 * diff1)\n\n    # Let's solve for the second scenario where the second number was shifted\n    equation2b = Eq(x + y/10, 5.87)\n    solution2 = solve((equation1, equation2b), (x, y))\n    \n    # Check if the numeric solution makes sense i.e., no negative numbers or numbers that would violate the other equation\n    if all(val >= 0 for val in solution2.values()):\n        diff2 = abs(solution2[x] - solution2[y])\n        return int(100 * diff2)\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    result = (7/8) * 32\n    return int(result)\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sally and John's current ages\n    sally, john = symbols('sally john')\n    \n    # Equation 1: In 3 years, Sally will be 6 times as old as John\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    \n    # Equation 2: Their total age now is 50 years\n    equation2 = Eq(sally + john, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, john))\n    \n    # Return Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # 'P' cannot be zero as it is the first digit of a 4-digit number\n            continue\n        paso = 1000*p + 100*a + 10*s + o\n        soap = 1000*s + 100*o + 10*a + p\n        if paso + 2009 == soap + 1:\n            return paso\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of $10 notes be T and the number of $2 notes be Tw\n    T, Tw = symbols('T Tw')\n    \n    # Total notes equation\n    total_notes_eq = Eq(T + Tw, 40)\n    \n    # Spent notes equations\n    spent_10_notes_eq = Eq(T - 0.4 * T, (4/5) * (Tw - 0.25 * Tw))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_10_notes_eq), (T, Tw))\n    \n    # Determine the number of each note before spending\n    T_num = solutions[T]\n    Tw_num = solutions[Tw]\n    \n    # Calculate the money spent\n    cost = (0.4 * T_num * 10) + (0.25 * Tw_num * 2)\n    \n    return cost\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    # Start testing from the smallest possible three-digit number with remainder 1 when divided by 7\n    num = 101  \n    \n    # Check for the number until the condition is met\n    while True:\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n        num += 1  # Check the next number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    harry, liam = symbols('harry liam')\n    \n    equation1 = Eq(harry + liam, 640)\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n    \n    solutions = solve((equation1, equation2), (harry, liam))\n    \n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Monday he did 3 questions, which is the first term of the arithmetic sequence\n    first_term = 3\n    # The common difference between each day is 3 more questions than the previous day\n    common_difference = 3\n    # There are 7 days from Monday to Sunday\n    number_of_days = 7\n    # The last term can be calculated as follows:\n    last_term = first_term + (number_of_days - 1) * common_difference\n\n    # Sum of n terms of an arithmetic sequence is (n/2)*(first_term + last_term)\n    total_questions = (number_of_days / 2) * (first_term + last_term)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for white_left in range(3, 9):     # White balls left in the bag\n        for red_left in range(2, 6):   # Red balls left in the bag\n            for black_left in range(6, 7): # Black balls can be between 3 to 6 initially, here only 6 left is eligible\n                white_picked = 9 - white_left\n                red_picked = 5 - red_left\n                black_picked = 6 - black_left\n                if white_picked + red_picked + black_picked == 10:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'm' be the rate at which the man drinks the orange juice (barrels per day)\n    # Let 'w' be the rate at which his wife drinks the orange juice (barrels per day)\n    m, w = symbols('m w')\n\n    # The man can finish the barrel in 15 days on his own\n    # So, his rate times 15 days equals 1 barrel\n    equation1 = Eq(m * 15, 1)\n\n    # Together they can finish the barrel in 12 days\n    # So, their combined rate (m + w) times 12 days equals 1 barrel\n    equation2 = Eq((m + w) * 12, 1)\n\n    # Solve the system of equations for m and w\n    solutions = solve((equation1, equation2), (m, w))\n\n    # His wife's rate is 'w', find how many days it takes her to finish 1 barrel on her own\n    # Days = 1 barrel / w rate\n    wife_days = 1 / solutions[w]\n\n    return wife_days\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Iterate over all three-digit numbers\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if sum_of_digits == 6:   # Check if the sum of its digits equals 6\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    result = (2 ** 10) % 3\n    return result\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Difference between terms in beans count is constant \n    diff_9_to_10_10_to_11 = 28 - 20\n    diff_10_to_11_11_to_12 = 36 - 28\n    \n    # verify increments were the same\n    assert diff_9_to_10_10_to_11 == diff_10_to_11_11_to_12\n    \n    # Calculate how many beans were peeled in the first hour\n    beans_at_8_to_9 = 20 - diff_9_to_10_10_to_11\n    \n    return beans_at_8_to_9\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls on the strand\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n\n    total_pearls = solve(equation, x)[0]\n\n    return total_pearls\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    increment = 2\n    while term < 100:\n        prev_term = term\n        term += increment\n        increment += 2\n    return prev_term\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    remaining_mass = initial_mass - mass_given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_three_numbers = 120\n    mean_four_numbers = 150\n\n    total_three_numbers = mean_three_numbers * 3\n    total_four_numbers = mean_four_numbers * 4\n\n    fourth_number = total_four_numbers - total_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # Let x be the weight of the empty basket and y be the weight of the mangoes when the basket is half full.\n    # We know that x + 2y = full_weight and x + y = half_full_weight.\n    # By subtraction, we get y (the weight of the mangoes when the basket is half full).\n\n    y = full_weight - half_full_weight\n    # Now we can find the weight of the empty basket by subtracting the weight of the mangoes from the half full weight.\n    x = half_full_weight - y\n\n    return x\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip was the 6th from the front\n    # Bud was the 6th from the end\n    # Counting from Pip to Bud including both, there were 5 children\n    \n    # Pip_position from front + Bud_position from end + children in between - 1 (since Pip is counted twice) \n    # is equal to the total number of children in the queue.\n    total_children = 6 + 6 + 5 - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define congruences based on the problem statement\n    # x congruent to 0 (mod 7)\n    # x+2 congruent to 0 (mod 8)\n    # x+4 congruent to 0 (mod 9)\n    \n    # For the first congruence, any even number multiple of 7 will suffice, so the congruence could be written as (0, 14).\n    con1 = (0, 14)\n    # The second number needs to be 2 more than an even number and a multiple of 8, i.e., is congruent to (6, 8).\n    # This is because the second number is of the form 8k = x + 2 where x is even, so 8k = 2 (mod 14). Hence, k = 1 (mod 7) or k = 6 (mod 8)\n    con2 = (6, 8)\n    # The third number needs to be 4 more than an even number and a multiple of 9, i.e., is congruent to (4, 18).\n    # This is because the third number is of the form 9k = x + 4 where x is even, so 9k = 4 (mod 14). Hence, k = 2 (mod 7) or k = 4 (mod 9)\n    con3 = (4, 18)\n    \n    # Solve the congruence equations using Chinese Remainder Theorem\n    congruences = [con1, con2, con3]\n    solution = solve_congruence(*congruences)\n\n    # The smallest possible sum of these three numbers is the first number (solution[0]) plus the increment for the next two (2 and 4)\n    sum_of_numbers = solution[0] + 2 + 4\n    return sum_of_numbers\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    nth_term = 25\n    n = 4\n    total_rows = 25\n    \n    common_difference = (nth_term - first_term) // (n - 1)\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    total_athletes = (first_term + last_term) * total_rows // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    average_family_age = 29\n    total_family_members = 6\n    total_age_family = average_family_age * total_family_members\n    \n    total_age_children = 64\n    total_age_parents = total_age_family - total_age_children\n    \n    parents = total_family_members - 4\n    average_age_parents = total_age_parents / parents\n    \n    average_age_parents_3_years_ago = average_age_parents - 3\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_spent = 5\n    total_paintings_goal = 56\n\n    paintings_per_day = total_paintings_done / total_days_spent\n    remaining_paintings = total_paintings_goal - total_paintings_done\n    additional_days_needed = remaining_paintings / paintings_per_day\n\n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    ans = (3+3+3+3+3+3+3+3) // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    number_of_leaves = (pieces_of_paper - 1) // interval\n\n    return number_of_leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    a5 = 8         # 5th term\n    a12 = 50       # 12th term\n    common_difference = (a12 - a5) / (12 - 5)  # Common difference formula\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    value = 95 * (37 + 42 + 21)\n    return value\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    import itertools\n    \n    # Define the time each person takes to row across the river\n    times = [7, 9, 4, 10]\n\n    # We will calculate all possible scenarios and take the minimum time\n    shortest_time = float('inf')\n\n    # There are six possible pairs that can row together based on four people\n    pairs = list(itertools.combinations(times, 2))\n\n    # Now we will try every combination where the fastest person always returns with the boat\n    for pair in pairs:\n        forward_time = max(pair)  # Time taken to row forward is the slower person's time in the pair\n        back_time = min(times)   # Fastest person always returns, hence the minimum time from times list\n        # Calculate the time for the remaining two people\n        # The fastest of the remaining people will return with the boat\n        remaining = sorted(set(times) - set(pair))\n        total_time = forward_time + back_time + max(remaining) + min(pair)\n        # Compare and store the shortest total time\n        shortest_time = min(shortest_time, total_time)\n\n    return shortest_time\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Original arithmetic sequence parameters\n    first_term = 2\n    difference = 3\n    \n    # Find the number of terms in the original sequence\n    last_term = 242  # given end term of the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # The process will be repeated (num_terms - 3) times\n    times = num_terms - 3\n\n    # Calculate the new first term after (num_terms - 3) iterations\n    new_first_term = first_term + difference * times * 3\n\n    # Calculate the second term, which will be the answer\n    second_term = new_first_term + difference\n\n    return second_term\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n\n    closest_value = min(numbers, key=lambda x: abs(x - target))\n\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let the weights of Pip, Bud, and Bob be p, b, and B respectively.\n    # According to the given information, we have the following equations:\n    # (p + b) / 2 = 30        --> Equation 1 (average weight of Pip and Bud)\n    # (p + B) / 2 = 33        --> Equation 2 (average weight of Pip and Bob)\n    # (b + B) / 2 = 36        --> Equation 3 (average weight of Bud and Bob)\n    \n    # From Equation 1: p + b = 30 * 2\n    # From Equation 2: p + B = 33 * 2\n    # From Equation 3: b + B = 36 * 2\n    \n    # We can calculate that:\n    p_b = 30 * 2\n    p_B = 33 * 2\n    b_B = 36 * 2\n    \n    # Now we can calculate the total weight of Pip, Bud, and Bob:\n    total_weight = p_b + p_B - b_B  # This removes b and B and leaves 2p\n    \n    # Now we can calculate Pip's weight:\n    pip_weight = total_weight / 2  # Divide by 2 to get Pip's weight\n    \n    return pip_weight\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    eldest_boy = 1\n    younger_sisters = 4\n    younger_brothers = 3\n\n    num_children = eldest_boy + younger_sisters + younger_brothers\n\n    return num_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    # Number of people initially\n    initial_people = 5\n    \n    # Days taken by initial people\n    initial_days = 15\n    \n    # Desired days for completion\n    target_days = 7\n    \n    # Work done is the same in both cases, so people*days should be constant\n    # initial_people * initial_days = (initial_people + x) * target_days\n    # Solving for x gives us the additional people required\n    x = (initial_people * initial_days) / target_days - initial_people\n    \n    return int(x)  # Return the ceiling value as we can have only whole people\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of students in school A and B\n    A, B = symbols('A B')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(A + B, 1050)  # Total number of students in both schools\n    equation2 = Eq(A - 20, B + 10)  # School A has 10 more students than School B after transferring 20 students\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Return the original number of students in school A\n    return solutions[A]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3\n    time_passed_hours = 5.5  # Time from 5:00 am to 10:30 am\n    temperature_increase_per_hour = 2\n    \n    temperature_at_1030_am = initial_temperature + (temperature_increase_per_hour * time_passed_hours)\n    \n    return temperature_at_1030_am\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial_money be the amount Mrs Chan had at first\n    initial_money = symbols('initial_money')\n\n    # Money spent in shop C equation: (remaining after shop B)/3 + 3\n    shop_c_spend = (initial_money / 4 - 2) / 3 + 3\n\n    # Remaining money after shop C\n    remaining_after_c = initial_money / 4 - 2 - shop_c_spend\n\n    # Equation based on the remaining money after shop C is 49\n    equation = Eq(remaining_after_c, 49)\n\n    # Solving for the initial amount of money\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Distance ran before the rain\n    distance_before_rain = symbols('distance_before_rain')\n    \n    # Speed reduction factor after it starts raining\n    speed_reduction_factor = 0.8\n    \n    # Time she ran before it started raining, in minutes\n    time_before_rain = 30 - (2400 / (distance_before_rain / 25) / speed_reduction_factor)\n    \n    # Equating the distance she covered before the rain at normal speed\n    # plus the distance she covered after it began to rain to the total distance\n    equation = Eq((distance_before_rain / 25) * time_before_rain + 2400, distance_before_rain + (distance_before_rain / 25) * 5)\n    \n    # Solving for the distance before rain\n    distance_before_rain_solution = solve(equation, distance_before_rain)\n    \n    # Length of the journey is the distance covered before rain plus 2400 meters\n    return distance_before_rain_solution[0] + 2400\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books on the top shelf\n    x = symbols('x')\n    \n    # The subsequent shelves will have x+3, x+6, ... books\n    # Since there are 7 shelves, we have x + (x+3) + ... up to 7 terms equal to 280\n    # This can be formulated as the sum of an arithmetic sequence\n    shelves = 7\n    total_books = 280\n    book_difference = 3  # Difference in book count between shelves\n    \n    # The equation representing the total sum of books on all shelves\n    total_sum_equation = Eq((shelves * (2 * x + (shelves - 1) * book_difference)) / 2, total_books)\n\n    # Solve the equation for x\n    solutions = solve(total_sum_equation, x)\n\n    # We return the first solution since we expect a positive number of books \n    return solutions[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Worst case scenario to not get a single green pencil is to draw all blue and white pencils.\n    # So we calculate the number of blue and white pencils first.\n    blue_and_white_pencils = 3 + 3\n    \n    # To then guarantee a green pencil, we need to draw one more after all blue and white pencils.\n    required_pencils = blue_and_white_pencils + 1\n    \n    return required_pencils\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import isqrt, divisors\n\n    divs = divisors(2240)\n    for d in divs:\n        if isqrt(2240 // d)**2 == 2240 // d:\n            n = d\n            break\n\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n\n    return lcm(3, 5, 9, 3 * 7)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Applying the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    equation1 = Eq(kids * 18, candies - 12)\n    equation2 = Eq((kids + 2) * 15, candies)\n    \n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum_of_digits(i)\n    \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt\n\n    expression = 16.7 - pow((pow(-4.56, 2) - pow(8.1, 3)) / pow(7.2, 3) / (-sqrt(6 + 3/4) + 30.15), 1/3)\n    return round(expression, 3)\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Mr. and Mrs. Lim's ages\n    age_mr, age_mrs = symbols('age_mr age_mrs')\n    \n    # Create the equations based on the problem statement\n    eq1 = Eq((age_mr - 7) / (age_mrs - 7), 6/5)\n    eq2 = Eq(age_mr + age_mrs, 69)\n    \n    # Solve the system of equations\n    ages = solve((eq1, eq2), (age_mr, age_mrs))\n    \n    # Return Mr. Lim's current age\n    return ages[age_mr]\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let's denote the number of years later as \"years\"\n    # We can set up an equation based on the information given:\n    # (Oliver's current age + years) + (Lin's current age + years) = sum of their ages in the future\n    # 20 + years + 26 + years = 48\n\n    # Simplify the equation\n    # 46 + 2 * years = 48\n\n    # Solve for years\n    # 2 * years = 48 - 46\n    years = (48 - 46) / 2\n\n    return int(years)\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_for_9_items = 6.30\n    cost_per_item = cost_for_9_items / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    average_five = 87\n    total_five = average_five * 5\n    average_six = 88\n    total_six = average_six * 6\n    jim_score = total_six - total_five\n\n    return jim_score\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Total distance\n    distance_AB = 440\n    \n    # Speed ratio (Jayden : Carter)\n    speed_ratio_Jayden = 7\n    speed_ratio_Carter = 4\n\n    # Total parts of speed\n    total_speed_parts = speed_ratio_Jayden + speed_ratio_Carter\n\n    # Jayden's speed part proportion\n    jayden_part = speed_ratio_Jayden / total_speed_parts\n\n    # Jayden travels a distance equal to his speed part proportion until he meets Carter\n    distance_Jayden_meets_Carter = jayden_part * distance_AB\n\n    # Since Jayden will continue to walk until he meets Carter after reaching place A\n    # The meeting point will be the same distance past point A as it was to point A\n    distance_meeting_place_from_A = distance_Jayden_meets_Carter\n\n    return distance_meeting_place_from_A\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    return 58 + 63 + 59 + 62 + 63 + 56 + 61\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    # Let x be the original number of John's stickers.\n    # Let 7y be the original number of Sam's stickers.\n    # Let 5y be the original number of Peter's stickers.\n    # John gains 20% of Sam's stickers and 20% of Peter's stickers, a total increase of 80%.\n    # Sam ends up with 20 more stickers than John.\n    # The equations are as follows:\n    # 0.8x = 0.2 * 7y + 0.2 * 5y\n    # 7y - 0.2 * 7y + 20 = x + 0.8x\n    # Solving for x and y.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Equation 1: John's increase\n    equation1 = Eq(0.8 * x, 0.2 * 7 * y + 0.2 * 5 * y)\n    \n    # Equation 2: Sam's final count\n    equation2 = Eq(7 * y - 0.2 * 7 * y + 20, x + 0.8 * x)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return Peter's original sticker count\n    return 5 * solutions[y]\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of baseball bats the shop purchased at first\n    x = symbols('x')\n\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n\n    # The total cost price is the number of bats times the cost price per bat\n    total_cost_price = x * cost_price_per_bat\n\n    # The proceeds when only 3 bats are left is the number of bats sold times\n    # the selling price per bat\n    # We subtract the cost of the 3 bats left (3 * cost_price_per_bat)\n    proceeds = (x - 3) * selling_price_per_bat\n\n    # The profit made is the proceeds minus the initial total cost price\n    profit = proceeds - total_cost_price\n\n    # Set up the equation according to the problem statement.\n    equation = Eq(profit, 2945)\n\n    # Solve the equation for x\n    number_of_bats = solve(equation, x)[0]\n\n    return number_of_bats\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the initial amount Raja had and 'k' be the initial amount Kumar had.\n    r, k = symbols('r k')\n    \n    # Since they both had the same amount of money at first, k = r.\n    equation1 = Eq(k, r)\n    \n    # After spending, Raja has r - 286 and Kumar has k - 109.\n    # Kumar then has 4 times as much money as Raja.\n    equation2 = Eq(k - 109, 4 * (r - 286))\n    \n    # Solving the two equations.\n    solutions = solve((equation1, equation2), (r, k))\n    \n    # Since both had the same amount, we can return the value of r or k.\n    return solutions[r]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    minibus_capacity = 6\n\n    minibusses_needed = (total_boys + minibus_capacity - 1) // minibus_capacity\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    chair = symbols('chair')\n    \n    table = chair + 160\n    total_cost = table + 5 * chair\n    \n    equation = Eq(total_cost, 328)\n    solution = solve(equation, chair)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of the hot tap be x baths per minute.\n    # Then, the rate of the cold tap would be 2x baths per minute.\n    # Both taps together fill the bath at a rate of (x + 2x) baths per minute.\n    # It takes 10 minutes to fill the bath using both taps, so the rate is 1/10 baths per minute.\n    # Therefore, 3x = 1/10, so x = 1/30. This means the hot tap takes 30 minutes alone.\n    # The cold tap has twice the rate of the hot tap, so it takes half the time: 30/2 = 15 minutes.\n    return 15\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_mean = (total_sum - 4 * (1111 - 240)) / 6\n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's pounds to pence\n    bud_pence = 110  # Since £1.10 equals 110p\n    \n    # Pip's money in pence\n    pip_pence = 60\n    \n    # Calculate the total money in pence\n    total_pence = bud_pence + pip_pence\n    \n    # Convert total pence back to pounds and pence\n    pounds = total_pence // 100\n    pence = total_pence % 100\n    \n    # Result in pounds and pence\n    ans = pounds + pence / 100\n    \n    return ans\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount of candy Rachel and Alice originally have as r and a respectively\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they will have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times Alice's candy\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations for r and a\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total amount of candy they originally had (r + a)\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if len(set([P, I, S])) == 3:  # Ensure all digits are different\n                    IS = I * 10 + S\n                    PI = P * 10 + I\n                    if IS * 4 == PI:\n                        return PI\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n\n    final_value = initial_value * (depreciation_rate ** years)\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    p_living_over_20 = 0.6\n    p_living_over_25_given_over_20 = 0.3 / p_living_over_20\n\n    return p_living_over_25_given_over_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Don walks at 60 m/min and they meet 360 m from the house\n    # Therefore, Don has walked 360 m\n    # It means Don has walked for 360 m / 60 m/min = 6 minutes\n\n    # The library is 780 m away from home\n    # they met at 360m, Danny has walked 780 - 360 = 420 m\n    # because they meet at the same time, Danny also spent 6 minutes getting to the meeting point\n    # Danny's speed is given by distance / time\n\n    distance_danny_walked = 780 - 360\n    time = 6  # in minutes\n    speed_danny = distance_danny_walked / time  # speed = distance / time\n\n    return speed_danny\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate time for each part of the race\n    time1 = 280 / 7\n    time2 = 400 / 5\n    time3 = (800 - (280 + 400)) / 8\n\n    # Sum the times for the total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # Ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori  # Jocye's speed in meters per second\n    time = 10  # Time in seconds\n    distance_jocye_runs = jocye_speed * time  # Distance Jocye runs in 10 seconds\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    # There are 5 teams, we need to select 2 teams for each match\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used = 792\n    pages = 0\n    digits_count = 0\n    \n    while digits_count < digits_used:\n        pages += 1\n        digits_count += len(str(pages))\n    \n    return pages - 1  # We subtract 1 because we add an extra page in the last loop\n    \nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all weights to grams\n    flour = 1 * 1000 + 500       # 1 kg 500 g of flour\n    brown_sugar = 1 * 1000 + 200 # 1 kg 200 g of brown sugar\n    butter = 900                 # 900 g of butter\n\n    # Calculate the total weight\n    total_weight = flour + brown_sugar + butter\n    \n    # Divide the mixture equally into 8 cake tins\n    weight_per_tin = total_weight / 8\n\n    return weight_per_tin\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # Since A and B can only stand on the far right or left,\n    # there are 2 options for the first position (A or B),\n    # and 1 option for the last position (the one out of A or B that was not chosen first).\n    # There are 2 options left for the second position (C or D),\n    # and 1 option left for the third position (the one out of C or D that was not chosen second).\n    # So the total number of ways they can line up is the product of these options.\n    \n    # 2 options for the first position (A or B)\n    # 1 option for the last position (whichever is left of A or B)\n    # 2 options for the second position (C or D)\n    # 1 option for the third position (whichever is left of C or D)\n    num_ways = 2 * 1 * 2 * 1\n    \n    return num_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2 * x), 11 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # According to the pigeonhole principle, we consider the worst-case scenario:\n    # Janice might pick 3 red, 3 blue, and 3 green marbles without getting 4 of the same color.\n    # If she picks one more marble, it guarantees to be the fourth marble of one of the colors.\n    \n    # Total number of marbles picked without assurance = 3 red + 3 blue + 3 green.\n    total_picked = 3 + 3 + 3\n    \n    # The next marble she picks will ensure 4 marbles of the same color.\n    min_marbles_to_ensure_fourth = total_picked + 1\n    \n    return min_marbles_to_ensure_fourth\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            if i != j:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    work = workers * days\n    ans = work // 1  # Work done by 1 worker\n    \n    return ans\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Initial values for x and y\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n    # If no solution is found, return None\n    return None\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    \n    # The smallest digit must be at the thousand's place. We ignore 4 because we want an even number,\n    # and it must be placed at the unit's place to get the smallest even number.\n    # So the smallest digit for the thousand's place is 5.\n    thousand = 5\n    \n    # The smallest even number must end with an even digit, we have only one even digit, which is 4.\n    unit = 4\n    \n    # Now we need to find the smallest digits for the hundred's and ten's places,\n    # by sorting the two remaining digits and placing them in ascending order.\n    remaining_digits = sorted([7, 9])  # Sort the remaining digits\n    hundred, ten = remaining_digits  # Assign them in ascending order for smallest number\n    \n    # Combine the digits to form the smallest 4-digit number\n    smallest_number = (thousand * 1000) + (hundred * 100) + (ten * 10) + unit\n    \n    return smallest_number\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n\n    pupils_per_row = total_pupils // num_rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b = symbols('a b')\n\n    # Define the system of equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Extract solution for b\n    return solutions[b]\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the initial expression components\n    a = 285\n    b = 15\n    c = 5\n    d = 2\n\n    # Store unique results in a set to avoid duplicates\n    results = set()\n\n    # Insert brackets and compute all possible expressions\n    # (a + (b / c)) - d\n    results.add((a + (b / c)) - d)\n    # a + ((b / c) - d)\n    results.add(a + ((b / c) - d))\n    # ((a + b) / c) - d\n    results.add(((a + b) / c) - d)\n    # a + (b / (c - d))\n    results.add(a + (b / (c - d)))\n    # (a + b / c) - d\n    results.add((a + b / c) - d)\n    # a + (b / c - d)\n    results.add(a + (b / c - d))\n    # a + b / (c - d)\n    results.add(a + b / (c - d))\n    # (a + (b / c - d))\n    results.add((a + (b / c - d)))\n    # ((a + b) / (c - d))\n    results.add(((a + b) / (c - d)))\n\n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n\n    for locker in range(1, 101):\n        # A locker ends up unlocked if an odd number of actions are performed on it.\n        # The only situation in which an odd number of actions are performed is if the locker\n        # number is a perfect square, since perfect square numbers have an odd number of factors.\n        if (locker ** 0.5).is_integer():\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_per_cake = symbols('cost_per_cake')\n    \n    equation1 = Eq(10 * cost_per_cake - 11, 0)\n    equation2 = Eq(13 * cost_per_cake - 26, 0)\n\n    solutions = solve((equation1, equation2), (cost_per_cake))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') in range(perm.index('B') + 1, perm.index('C')) or \\\n           perm.index('A') in range(perm.index('C') + 1, perm.index('B')):\n            if abs(perm.index('D') - perm.index('E')) != 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n\n    total_mass_all = total_mass_boys + total_mass_girls\n    num_children = 4 + 6\n\n    average_mass = total_mass_all / num_children\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = (quotient * divisor) + remainder\n    \n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Nicolas : Yiding = 4 : 3 (their speeds)\n    # When Nicolas is at level 16, let's find out the level of Yiding.\n\n    # The ratio of their speeds is 4:3, so we have:\n    # Nicolas_speed / Yiding_speed = 4 / 3\n    # When Nicolas reaches level 16, we can use the ratio to find Yiding's level:\n    # (Nicolas_level / Yiding_level) should be equal to (Nicolas_speed / Yiding_speed)\n\n    Nicolas_level_when_Yiding_on_3 = 4\n    Yiding_level_when_Nicolas_on_4 = 3\n\n    Nicolas_level_goal = 16\n    # We need to find Yiding_level_goal\n\n    # Using the proportion (since their speed is constant)\n    # (Nicolas_level_goal / Nicolas_level_when_Yiding_on_3) = (Yiding_level_goal / Yiding_level_when_Nicolas_on_4)\n    # We can cross multiply to find Yiding_level_goal:\n    # (Yiding_level_goal * Nicolas_level_when_Yiding_on_3) = (Yiding_level_when_Nicolas_on_4 * Nicolas_level_goal)\n    Yiding_level_goal = (Yiding_level_when_Nicolas_on_4 * Nicolas_level_goal) / Nicolas_level_when_Yiding_on_3\n\n    return int(Yiding_level_goal)\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    \n    known_scores = [37, 53, 29, 41]\n    known_sum = sum(known_scores)\n    \n    x = total_score - known_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000): \n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    word = 'CHEESE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    num_arrangements = factorial(len(word))\n    for count in letter_counts.values():\n        num_arrangements //= factorial(count)\n    return num_arrangements\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_seven_any = 8 * 9 * 9\n    at_least_two_sevens = total_three_digit_numbers - no_seven_any\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for number in range(100000, 1000000):\n        if int(str(9) + str(number)[:-1]) == 4 * number:\n            return number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    min_divisor = 1\n\n    min_dividend = (min_divisor * quotient) + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    initial_animals, initial_cows, initial_goats = symbols('initial_animals initial_cows initial_goats')\n\n    # System of equations based on the problem statement\n    equation1 = Eq(initial_cows, 0.65 * initial_animals) # 65% of initial animals were cows\n    equation2 = Eq(initial_goats, initial_animals - initial_cows) # The rest were goats\n    equation3 = Eq(initial_cows + 240, 0.85 * (initial_animals + 240)) # After adding 240 animals, 20% more cows\n    equation4 = Eq(initial_goats * 2, initial_animals + 240 - (initial_cows + 240)) # Number of goats doubled\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (initial_animals, initial_cows, initial_goats))\n\n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_work = 1\n\n    # Let x be the days Alice takes off\n    for x in range(28):  # Alice can't take off more days than the project lasts\n        total_alice_work = (27 - x) * alice_work_rate\n        total_bob_work = 27 * bob_work_rate\n        if total_alice_work + total_bob_work >= total_work:\n            return x\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Abigail's age is denoted by 'a' and Jonathan's age by 'j'\n    a, j = symbols('a j')\n\n    # Abigail is 6 years older than Jonathan.\n    equation1 = Eq(a, j + 6)\n\n    # Six years ago, she was twice as old as he.\n    equation2 = Eq(a - 6, 2 * (j - 6))\n\n    # Solve the equations for 'a' and 'j'\n    solutions = solve((equation1, equation2), (a, j))\n\n    # We need to find Jonathan's age\n    return solutions[j]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    # We know ABA and CDC are three digit numbers and their sum is 726.\n    # This means A cannot be zero, and the maximum value for A is 6 (because 7xx would exceed 726)\n    # Also, C and D must be less than 7 (since C+D = 7 would be the maximum carryover from adding ABA + CDC)\n    # We iterate through permutations of possible values for the digits to find a valid equation.\n    for A, B, C, D in permutations(range(10), 4):\n        if A != 0 and C != 0 and A != B and B != C and B != D and A != C and A != D and C != D:\n            if A*101 + C*101 + D*20 == 726:\n                return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    ans = [number for number in range(30, 41) if number % 3 == 0 and number % 4 == 0]\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let D be the number of days to finish the book and P be the total number of pages.\n    D, P = symbols('D P')\n\n    # Equation representing finishing 2 days late with 30 pages a day\n    eq1 = Eq(30 * (D + 2), P)\n\n    # Equation representing finishing 4 days early with 39 pages a day\n    eq2 = Eq(39 * (D - 4), P)\n\n    # Solving the system of equations for D and P\n    solutions = solve((eq1, eq2), (D, P))\n\n    # Extracting the relevant values\n    days_to_finish = solutions[D]\n    total_pages = solutions[P]\n\n    return days_to_finish, total_pages\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    return (1000 + 2000 + 2100) / 17\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = [2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2]\n    sequence_length = len(sequence)\n    full_repeats, remaining_digits = divmod(535, sequence_length)\n\n    # Count the number of 2s in the full sequence\n    twos_full_repeats = sequence.count(2) * full_repeats\n\n    # Count the number of 2s in the remaining part of the sequence\n    twos_in_remaining = sequence[:remaining_digits].count(2)\n\n    # Sum the number of 2s in full repeats and the remaining part\n    total_twos = twos_full_repeats + twos_in_remaining\n\n    return total_twos\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_in_one_box = 5\n    number_of_boxes = 6\n    \n    total_apples = apples_in_one_box * number_of_boxes\n    \n    return total_apples\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_op(a, b):\n        return a * b + a - b\n    \n    return custom_op(4, 3) - custom_op(3, 4)\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(a, b):\n        return a ** 2 - b\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    baked_morning = 85\n    baked_afternoon = 135\n    given_friends = 55\n\n    left_cookies = (baked_morning + baked_afternoon) - given_friends\n\n    return left_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    # Number of adults and children\n    adults, children = symbols('adults children')\n    \n    # Equations based on the problem\n    tickets_sold_equation = Eq(adults + children, 19)          # Equation for the number of tickets sold\n    total_sales_equation = Eq(5*adults + 3*children, 75)      # Equation for the total sales\n    \n    # Solving the system of equations\n    solutions = solve((tickets_sold_equation, total_sales_equation), (adults, children))\n    \n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    difference = solutions[dress] - solutions[shirt]\n\n    return difference\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # let x be the total number of coins Owen had originally\n    # then 2/7 * x represents the number of fifty cent coins\n    # and 5/7 * x represents the number of one dollar coins\n    # Owen's mother gave him 10 one dollar coins and 5 dollars worth of fifty cent coins (which is 10 fifty cent coins)\n    # In the end, he had twice as many one dollar coins as fifty cent coins\n\n    # Set up the equation based on the above explanation:\n    # one dollar coins: 5/7 * x + 10\n    # fifty cent coins: 2/7 * x + 10 \n    # twice as many one dollar coins as fifty cent coins: 2 * (2/7 * x + 10) = 5/7 * x + 10\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * ((2/7) * x + 10), (5/7) * x + 10)\n\n    # Solve the equation for x\n    number_of_coins = solve(equation, x)\n\n    return number_of_coins[0]\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    brenda_daily_savings = 6\n    andy_total_savings = 378\n\n    brenda_total_savings = (andy_total_savings / andy_daily_savings) * brenda_daily_savings\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * points_correct + incorrect * points_incorrect\n        if score == 44:\n            return correct\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # original dimensions are l, b, h\n    # after changes, new dimensions are 1.10*l, 4/5*b, 11/10*h\n\n    # new volume / original volume\n    volume_ratio = (1.10) * (4/5) * (11/10)\n\n    # convert the ratio to percentage\n    volume_percentage = volume_ratio * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    equation1 = Eq(anna + betsy + charlene, 168)\n    equation2 = Eq(anna + 8, 2*(betsy - 8 + 15))\n    equation3 = Eq(betsy - 8 + 15, 5*(charlene - 15))\n    equation4 = Eq(charlene - 15, 7*(anna + 8))\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    contestants = 8\n    # There are 8 options for gold, 7 for silver (after gold has been awarded),\n    # and 6 for bronze (after gold and silver have been awarded).\n    ans = factorial(contestants) // factorial(contestants - 3)\n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    return comb(10, 3)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60 / 100\n    total_work = remaining_work / (1 - completed_percentage)\n    return int(total_work)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n\n    # Let the number of mushrooms gathered in the first hour be x\n    # Then the number of mushrooms gathered in the second hour would be total_mushrooms - x\n    # According to the question,\n    # x + 26 = total_mushrooms - x\n    # Solving the equation for x\n    x = (total_mushrooms - 26) // 2\n\n    # Mushrooms gathered in the second hour\n    second_hour_mushrooms = total_mushrooms - x\n\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The distribution of questions will be [1, 2, 3, 4, ...] for the classmates with the least to most questions\n    # until Noa gets the rest. We need to start by assigning the minimum number of questions to each classmate\n    # so that they all have different amounts.\n    \n    # Students (including Noa) can be ordered from the one who solves the least to the most questions.\n    # Let's distribute the questions so that the first four students get the minimum possible which are 1, 2, 3, and 4.\n    # This adds up to 10, so now there are 40 - 10 = 30 questions left for Noa.\n    \n    # Noa takes the remaining questions.\n    noa_questions = 40 - (1 + 2 + 3 + 4)\n    \n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n    # Current age ratio\n    current_ratio = Eq(scan/ted, 1/4)\n    # Future age ratio\n    future_ratio = Eq((scan + 4)/(ted + 4), 1/3)\n    \n    # Solve the system of equations for scan and ted\n    ages = solve((current_ratio, future_ratio), (scan, ted))\n    \n    # Calculate the number of years ago when the ratio of their ages was 1:9\n    for age in ages:\n        years_ago = 1\n        while (age[scan] - years_ago)/(age[ted] - years_ago) != 1/9:\n            years_ago += 1\n        return years_ago\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    return hottest - coldest\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 AM to 7:30 AM\n    jogging_speed = 6.5  # miles per hour\n    jogging_time = 1  # hour\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Star walks for 2 hours from 7:30 AM to 9:30 AM\n    walking_speed = 4.5  # miles per hour\n    walking_time = 2  # hours\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of foldable bicycles and n be the number of non-foldable bicycles\n    f, n = symbols('f n')\n\n    # Total bicycles\n    equation1 = Eq(f + n, 476)\n    \n    # Bicycles sold and left\n    equation2 = Eq(f - (4/7)*f + n - (5/9)*n, 208)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, n))\n\n    foldable_sold = solutions[f] - (4/7)*solutions[f]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    difference = mollies - guppies\n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # scale of 2 cm per 3 m\n    real_tree_height_m = 12  # real tree height in meters\n    model_tree_height_cm = (real_tree_height_m * scale_ratio) * 100  # convert meters to cm\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_per_correct = 8\n    deduction_per_wrong = 4\n    total_score = 100\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * score_per_correct - wrong * deduction_per_wrong\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst-case scenario,\n    # each of the first 19 students gets 2 candies, which is the maximum \n    # number before reaching 3 candies for a single student.\n    # So, to ensure that at least one student gets 3 candies,\n    # we need to add 1 more candy to the total.\n\n    # Calculate candies needed for the first 19 students\n    candies_for_19_students = 19 * 2\n\n    # Add one more candy to ensure at least one student gets 3 candies\n    total_candies = candies_for_19_students + 1\n\n    return total_candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # grams\n    used_fraction = 5 / 8\n    remaining_fraction = 1 - used_fraction\n\n    original_flour = remaining_flour / remaining_fraction\n\n    return int(original_flour)\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure he gets a pair of white socks, consider the worst-case scenario:\n    # Yohan picks all the red and black socks first.\n    red_socks = 10\n    black_socks = 10\n    # He needs to pick one more sock to ensure he gets a pair of white socks.\n    white_sock_pair = 1 \n    \n    # The maximum number of socks Yohan must take to get a pair of white socks\n    # is all the red socks, all the black socks, plus one more sock (which will be white).\n    max_socks = red_socks + black_socks + white_sock_pair\n\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamp_posts = 3\n    total_intervals = total_flowers // flowers_between_lamp_posts\n    road_length = 50\n\n    distance_between_lamp_posts = road_length / (total_intervals + 1)\n\n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum_of_sequence = sum(range(1, 20, 2))\n    return sum_of_sequence\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    result = 1741 - 968\n    return result\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    return 6 + 1 + 13\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n\n    final_temp = initial_temp - decrease_temp\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_number = first_number * (ratio ** (5 - 1))\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**-12)\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - sweets_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Total number of apples\n    total_apples = 19\n    # Number of children\n    children = 5\n    \n    # If each child gets at least one apple, then we distribute one to each first\n    remaining_apples = total_apples - children  # Apples left after giving each child one apple\n    \n    # Since no two children can have the same number of apples,\n    # the sequence of maximum apples the children can get has to be strictly increasing\n    # Let's distribute the remaining apples one by one to each child until we can't distribute anymore\n    # We start from the child who gets the least after the initial distribution\n    \n    # Minimizing the apples the first four children get by giving them consecutive number of apples starting from 1\n    # 1, 2, 3, ..., x-1 (for first four children), this ensures that we have ascending numbers\n    # Distribute the remaining apples to the fifth child\n    \n    # Find the sum of the first 4 minimum unique numbers: 1 + 2 + 3 + 4\n    min_sum = sum(range(1, children))\n    # Remaining apples for the fifth child\n    max_apples_for_last_child = total_apples - min_sum\n    \n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # calculate the effective length that can be used to plant rosebushes\n    effective_length = side_length - 2 * distance_from_edge\n\n    # calculate the number of rosebushes that can be planted on one side\n    bushes_per_side = effective_length // distance_between_bushes\n\n    # the total number of rosebushes is the sum of bushes for all four sides\n    total_bushes = 4 * bushes_per_side\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    P_rate_per_hour = 1 / (12 * 8)\n    # Q's work rate per hour\n    Q_rate_per_hour = 1 / (8 * 10)\n    \n    # Combined work rate per hour when they work together 8 hours a day\n    combined_rate_per_hour = P_rate_per_hour + Q_rate_per_hour\n    \n    # Total hours required to complete the job when working together\n    total_hours_together = 1 / combined_rate_per_hour\n    \n    # Total days required to complete the job when working together 8 hours a day\n    days_together = total_hours_together / 8\n    \n    return days_together\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    faster_van_speed = 132  # km per hour\n    other_van_speed = 78    # km per hour\n    time_travelled = 8      # hours\n\n    distance_apart = (faster_van_speed + other_van_speed) * time_travelled  # since they are moving in opposite directions\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60  # Percentage of work left to do\n    total_masks = 360 * (100 / remaining_work_percentage)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    equation = Eq(score - 30, (score / 2) + 10)\n\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    count = 0\n    for bags in range(2, num_apples + 1, 2):\n        if num_apples % bags == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given exchange rates\n    rabbits_to_goats = 9 / 3  # 9 rabbits for 3 goats\n    goats_to_cows = 2 / 4     # 2 goats for 4 cows\n\n    # Find the exchange rate from cows to rabbits through goats (indirectly)\n    cows_to_goats = 1 / goats_to_cows      # Inverting goats_to_cows\n    goats_to_rabbits = 1 / rabbits_to_goats # Inverting rabbits_to_goats\n    cows_to_rabbits = cows_to_goats * goats_to_rabbits\n\n    # Find how many rabbits can 2 cows be exchanged for\n    rabbits_for_2_cows = cows_to_rabbits * 2\n\n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    total = sum(numbers)\n    avg = total / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n\n    # Assume all attempted questions were answered correctly\n    all_correct_score = attempted * 4  # Maximum score if all attempted questions are correct\n    surplus_score = all_correct_score - total_score  # Extra score that needs to be zeroed out by wrong answers\n\n    # For each wrong answer, we lose 5 marks (4 for the correct one we didn't get and 1 for the penalty)\n    wrong_answers = surplus_score // 5\n    correct_answers = attempted - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_terms = 10\n\n    total_seats = (num_terms / 2) * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = hash_op(10, 9)\n    ans = hash_op(ans, 8)\n    ans = hash_op(ans, 7)\n    ans = hash_op(ans, 6)\n    ans = hash_op(ans, 5)\n    ans = hash_op(ans, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the total cost of the books is 100 units.\n    total_cost = 100\n    planned_profit = 0.60 * total_cost  # 60% profit on 100 units cost\n    actual_profit = 0.80 * planned_profit  # 80% of the planned profit\n\n    sold_first_day = 0.70 * total_cost  # Amount of 70% of his books in cost\n    profit_first_day = 0.60 * sold_first_day  # 60% profit on the first day sales\n\n    remaining_books_cost = total_cost - sold_first_day  # remaining book cost\n    sold_second_day = remaining_books_cost  # he sold all the remaining books\n\n    # Assuming 'd' is the discount rate on the second day\n    d = symbols('d')  \n\n    # On the second day, he still makes some profit even after giving discount 'd'\n    # So the total profit is from first day + second day\n    equation = Eq(profit_first_day + (sold_second_day * (1 - d)) - remaining_books_cost, actual_profit)\n\n    discount_rate = solve(equation, d)[0]\n    \n    return discount_rate\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let x be the factor by which the ratios are multiplied to get the actual number of pencils and pens.\n    # Initially, we have 4x pencils and 5x pens.\n    # After taking out a pen and replacing it with a pencil, we have (4x+1) pencils and (5x-1) pens.\n    # The new ratio is 7:8, so we can set up an equation: (4x+1)/(5x-1) = 7/8\n    # Cross-multiply to find x:\n    # 8*(4x+1) = 7*(5x-1)\n    # 32x + 8 = 35x - 7\n    # 3x = 15\n    # x = 5\n    # Now calculate the total number of pencils and pens initially:\n    # Total = 4x + 5x = 9x\n    # Total = 9*5 = 45\n    # Return the total number of pencils and pens\n    return 9 * 5\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls_count = 72\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls_count * 100) / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    remaining_strawberries = (initial_strawberries - strawberries_eaten) + strawberries_bought\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # The last page number before the missing pages is 14, which means it could be the front (odd number)\n    # or back (even number) of a sheet. Similarly, the first page number after the missing pages is 35, \n    # which could also be the front or back of a sheet.\n\n    # Two cases arise considering that one side of the sheet has an even number and the other side an odd number.\n\n    # The number of pages actually missing will be the difference between the first page number after \n    # and the last page number before, minus 1 (since we're counting consecutive missing pages).\n    missing_pages_count = (35 - 14) - 1\n\n    # Since every sheet has 2 pages, the number of missing sheets is half the number of missing pages. \n    # If there's an odd number of missing pages, we'll need to add 1 to account for the additional sheet.\n    if missing_pages_count % 2 == 0:\n        missing_sheets_count = missing_pages_count // 2\n    else:\n        missing_sheets_count = missing_pages_count // 2 + 1\n\n    return missing_sheets_count\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n    \n    # Each curry puff costs $0.20 less than a tuna puff\n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n    \n    # Jenna bought 12 tuna puffs and 19 curry puffs for $39.60\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n    \n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_count = 0\n    for tens_digit in digits:\n        for ones_digit in digits:\n            if tens_digit != ones_digit:\n                if (10 * tens_digit + ones_digit) % 2 != 0:\n                    odd_count += 1\n    return odd_count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 38)   # total number of children\n    equation2 = Eq(2 * boys + 4 * girls, 126)   # total number of balloons\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_number = 10\n    end_number = 25\n    count = end_number - start_number + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_per_minute = 36  # meters per minute\n    time_in_minutes = 200 / 60  # converting seconds to minutes\n\n    distance = speed_per_minute * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    result = 1\n    for i in range(3, 21, 2):\n        result *= (1 + 2 / i)\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    length_needed_cm = 400 * 85  # Total length in cm\n    roll_length_cm = 20 * 100    # Roll length in cm (1m = 100cm)\n    rolls_needed = length_needed_cm / roll_length_cm\n    return -(-rolls_needed // 1) # Ceiling division to get whole number of rolls\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, goats = symbols('total_animals goats')\n\n    # Let's define the expressions based on the problem statement\n    cows = 0.65 * total_animals\n    # Since only 65% were cows, the remaining 35% must be goats\n    equation1 = Eq(goats, total_animals - cows)\n\n    # When 240 animals are added\n    total_animals_new = total_animals + 240\n\n    # The percentage of cows increases by 20%, so it becomes 65% + 20% = 85%\n    # Also, the number of goats has doubled\n    cows_new = 0.85 * total_animals_new\n    goats_new = 2 * goats\n\n    # Now, after adding 240 animals, we get a new equation\n    equation2 = Eq(total_animals_new, cows_new + goats_new)\n\n    # Solving the set of equations\n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Emma and John's current age\n    emma, john = symbols('emma john')\n\n    # Create the equations based on the problem statement\n    # Equation 1: In 3 years, the sum of their ages will be 27.\n    equation1 = Eq((emma + 3) + (john + 3), 27)\n    \n    # Equation 2: John is 7 years older than Emma.\n    equation2 = Eq(john, emma + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    # Emma's age is what we want\n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Mike's salary\n    salary = symbols('salary')\n\n    # Define the equations based on the problem\n    donation = salary / 4\n    spent_on_food = (salary - donation) * 5/6\n    savings = salary - donation - spent_on_food\n\n    # The amount spent on food is £78 more than the donation.\n    equation = Eq(spent_on_food, donation + 78)\n\n    # Solve for Mike's salary\n    solved_salary = solve(equation, salary)\n\n    # Return the salary value\n    return solved_salary[0]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) David walks after increasing his speed\n    t = symbols('t')\n    \n    # Distance walked at the initial speed: 150 m/min * 10 min\n    initial_distance = 150 * 10\n    \n    # Distance walked at the increased speed: (150 + 50) m/min * t\n    increased_distance = (150 + 50) * t\n    \n    # Total distance = Initial distance + Increased distance\n    total_distance = Eq(initial_distance + increased_distance, 3700)\n    \n    # Solve the equation for t\n    t_solution = solve(total_distance, t)\n    \n    # Total time spent = initial time + time after increasing speed\n    total_time = 10 + t_solution[0]\n    \n    return total_time\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    n7 = 7\n    n15 = 15\n\n    d = (a15 - a7) / (n15 - n7)\n\n    return d\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number when multiplied repeatedly by itself follows a cycle.\n    # For the number 2, the last digit cycle is: 2, 4, 8, 6\n    # For the number 3, the last digit cycle is: 3, 9, 7, 1\n\n    # We find the position of the last digit for both numbers 2 and 3 after 2017 multiplications. \n    # Since both have a cycle of length 4, we can use modulus to find their respective positions.\n    last_digit_position_2 = 2017 % 4\n    last_digit_position_3 = 2017 % 4\n\n    # Define the cycles for 2 and 3\n    cycle_2 = [2, 4, 8, 6]\n    cycle_3 = [3, 9, 7, 1]\n\n    # Get the last digit for each number at their respective positions\n    last_digit_2 = cycle_2[last_digit_position_2 - 1]\n    last_digit_3 = cycle_3[last_digit_position_3 - 1]\n\n    # Multiply the two last digits together to find the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((1, 2), (2, 3), (4, 5), (6, 7))\n    ans = solve_congruence(*congruences)\n    return ans[0] if ans[0] < 400 else None\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be a multiple of 9.\n    # Since 4 + 7 + 1 + 9 = 21, we need A + B + C to be a multiple of 9 - 21 % 9 = 3.\n\n    # Initializing the candidates list to store valid combinations\n    candidates = []\n\n    # Looping over all possible digits to find a combination where A + B + C is a multiple of 3\n    for A in range(10): \n        for B in range(10): \n            for C in range(10): \n                # Check if all digits are unique and the combination (A+B+C) satisfies the condition\n                if len({A, B, C, 4, 7, 1, 9}) == 7 and (A + B + C + 21) % 9 == 0: \n                    candidates.append((A, B, C, 4700000 + A * 10000 + B * 100 + C))\n\n    # Assuming we're interested in one solution (since the problem states \"What is the value of A + B + C?\")\n    A, B, C, number = candidates[0]  # Take the first solution\n\n    # The value of A + B + C\n    sum_abc = A + B + C\n\n    # The 7-digit number\n    num = number\n\n    return sum_abc, num\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_changed_per_week = 45 - 60\n    goal_sweets = 150\n\n    weeks = (goal_sweets - sweets_left) / sweets_changed_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    carrie = solutions[apple] + solutions[orange]\n    \n    return carrie\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    options_per_digit = 3  # 5, 6, 7\n    num_digits = 3  # three-digit number\n\n    # Each digit can be any of the 3 options since repetition is allowed\n    total_combinations = options_per_digit ** num_digits\n\n    return total_combinations\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2  # We start with 2 sweets because we know there are always 2 remaining.\n\n    while True:\n        # Check if sweets-2 is evenly divisible by 3, 4, 5, and 6.\n        if all((sweets - 2) % n == 0 for n in [3, 4, 5, 6]):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    rackets_cost = 49 * 2  # cost for two rackets\n    remaining_money = 140 - rackets_cost\n    price_per_ball = 1.5\n    num_balls = remaining_money // price_per_ball\n    \n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Drawing all balls of one color + drawing all balls of another color + 1\n    # Ensures that the next draw will be of the third color\n    ans = 4 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Each right-angled triangle forms by center point and two adjacent points on the circle.\n    # There are 12 points, so there are 12 ways to choose the vertex at the center.\n    # For each center point, there are 4 right angles it can be a part of (90-degree rotations).\n    # So the total number of right-angled triangles is 12 * 4.\n    \n    ans = 12 * 4\n    return ans\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes of 6 donuts each\n    donuts_eaten = 3      # Donuts eaten by Maryam on her way home\n    donuts_left = total_donuts - donuts_eaten  # Donuts left after eating some\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    \n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weights of one box of apples and one box of oranges\n    apple_box, orange_box = symbols('apple_box orange_box')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * apple_box + 5 * orange_box, 270)\n    equation2 = Eq(3 * apple_box + 7 * orange_box, 342)\n\n    # Solve the system of linear equations for the weights of one box of apples and one box of oranges\n    solutions = solve((equation1, equation2), (apple_box, orange_box))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, shuttlecock = symbols('racket shuttlecock')\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    position = 11  # Tiger's position is the 11th which is also the middle\n    total_animals = (position - 1) * 2 + 1  # Double the position minus one and add the tiger\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    return (1/3)*24 + (2/5)*30 + (1/3)*15\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    # Iterate through all three-digit numbers\n    for i in range(100, 1000):\n        # Calculate the sum of the digits\n        sum_digits = sum(int(digit) for digit in str(i))\n        # Check if the sum of the digits is equal to 4\n        if sum_digits == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy initially divided 24 roses into 3 vases\n    roses_first_batch = 24\n    vases_first_batch = 3\n    roses_per_vase_first_batch = roses_first_batch / vases_first_batch\n    \n    # Nancy's mother brought more roses and they were divided into 4 vases\n    # Each vase has the same amount as any vase from the initial division\n    vases_second_batch = 4\n    roses_per_vase_second_batch = roses_per_vase_first_batch  # same as the first batch\n    roses_second_batch = vases_second_batch * roses_per_vase_second_batch\n    \n    # Calculate the total number of roses\n    total_roses = roses_first_batch + roses_second_batch\n    \n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    cost_haribo = 50\n    cost_mamee = cost_haribo - 30\n    cost_big_jelly = 6 * cost_mamee\n\n    return cost_big_jelly / 100\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    from num2words import num2words\n    number = 2405 + 1827\n    return num2words(number)\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    # Will can eat all the candies except the ones in mint flavour.\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n    \n    # The maximum number of candies Will can eat is the total candies minus mint candies.\n    max_candies = lemon_candies + cherry_candies - mint_candies\n    \n    return max_candies\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    num1 = -18\n    num2 = -2\n    mid_num = (num1 + num2) / 2\n    return mid_num\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(1, 10, 2):  # Last digit must be odd since ABCD is divisible by 5, so ends in either 5 or 0, but 0 is not a positive digit.\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 100 * A + 10 * B + C\n                    BCD = 100 * B + 10 * C + D\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n    price_2_cheese_cakes = 2 * cheese_cake\n    return price_2_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if (num % 2 == 1) and (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    result = 10.256 + 9.2 - 7.51\n    return result\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In single elimination, number of games is one less than number of players\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(3 * number + 6, number + 16)\n    \n    solutions = solve(equation, number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20+19+18+17+16) - (15+14+13+12+11)\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for each child's age\n    # Two sons: older (s1) and younger (s2)\n    # Two daughters: older (d1) and younger (d2)\n    s1, s2, d1, d2 = symbols('s1 s2 d1 d2', integer=True)\n    \n    # We will set up the system of equations based on the problem statement\n    equations = (\n        Eq(s2 - s1, 3),        # sons were born three years apart\n        Eq(d2 - d1, 2),        # daughters were born two years apart\n        Eq(s2, 2 * d1),        # younger son is twice the age of the older daughter\n        Eq(s1 + s2 + d1 + d2, 55)  # sum of ages is 55\n    )\n    \n    # Solve the system of equations\n    solutions = solve(equations)\n    \n    # Extract the minimum age value from the solutions, which will be the age of the youngest child\n    youngest_age = min(solutions[s1], solutions[s2], solutions[d1], solutions[d2])\n    \n    return youngest_age\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the price of one wallet and one watch\n    wallet, watch = symbols('wallet watch')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    # Get the price of one wallet\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_str = \"428571\"  # The recurring part of 3/7\n    total_digits = 58  # Number of digits after decimal point we want to sum\n\n    # Sum the digits by cycling through the recurring part\n    sum_of_digits = sum(int(decimal_str[i % len(decimal_str)]) for i in range(total_digits))\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    average_distance = (eddie + jenny + jason) / 3\n    return average_distance\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_liters = 177\n    jane_liters = audrey_liters + 32\n    total_liters = audrey_liters + jane_liters\n    return total_liters\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution transferred from A to B\n    x = symbols('x')\n\n    # The total amount of sugar in bottle A must remain the same.\n    equation1 = Eq(0.11 * (50 - x) + 0.11 * x, 0.47 * x + 0.11 * (50 - x))\n\n    # Solve for x\n    amount_exchanged = solve(equation1, x)\n\n    return amount_exchanged[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_length = 13\n    difference_in_length = 25\n    nicks_length = toms_length + difference_in_length\n    \n    ans = nicks_length - toms_length\n    return ans\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # total number of books\n    books_factorial = factorial(total_books)  # factorial of the total number of books\n    biographies_factorial = factorial(3)  # factorial of the number of biographies\n    science_fictions_factorial = factorial(4)  # factorial of the number of science fictions\n    magazines_factorial = factorial(2)  # factorial of the number of magazines\n    practice_books_factorial = factorial(2)  # factorial of the number of practice books\n\n    # Number of different ways to arrange the books\n    ans = books_factorial // (biographies_factorial * science_fictions_factorial * magazines_factorial * practice_books_factorial)\n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n    \n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    from itertools import permutations\n    \n    cards = ['1', '3', '6']\n    all_permutations = set(permutations(cards, 3))\n    \n    return len(all_permutations)\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) / 8\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_of_plot = 20 * 100  # convert to cm\n    distance_apart = 40\n    first_cauliflower_distance = 20\n    \n    # The effective planting length is the total length minus the space at the start for the first cauliflower\n    effective_length = length_of_plot - first_cauliflower_distance\n\n    # Divide effective length by the distance apart to get the number of spaces between cauliflowers\n    # Will floor the division to get the whole number of cauliflowers that can be planted\n    number_of_cauliflowers = effective_length // distance_apart\n\n    # Since we have a first cauliflower 20 cm from the end, we can add one more to the number_of_spaces\n    number_of_cauliflowers += 1\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    # First, we find all combinations of 4 natural numbers that sum up to 15\n    comb = combinations(range(1, 15), 4)\n\n    # Then, we filter out those combinations which do not have unique values\n    valid_comb = [c for c in comb if sum(c) == 15]\n\n    return len(valid_comb)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_numbers = []\n    for i in range(2, 51):\n        if isprime(i) and isprime(i + 6):\n            prime_numbers.append(i)\n        elif isprime(i) and isprime(i - 6):\n            prime_numbers.append(i)\n    return len(prime_numbers), prime_numbers\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n    \n    ans = (percentage / 100) * base_value\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100  # Converting 64 cm to metres and adding to 3.7 metres\n    subtract_metres = 2 + 7 / 100  # Converting 7 cm to metres and adding to 2 metres\n    ans = total_metres - subtract_metres  # Subtracting the second quantity from the first\n\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of banana and pear\n    b, p = symbols('b p')\n\n    # Create the first equation based on Max's purchase\n    equation1 = Eq(1*b + 2*p, 94)\n\n    # Create the second equation based on Emily's purchase\n    equation2 = Eq(1*b + 1*p, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while b < 21:  # Last number provided\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # Given the sequence 1, 2, 4, 8, 16, 32, ... is a geometric sequence\n    # Each term is double the previous one, so this is a geometric progression\n    # with a common ratio of 2. The nth term of a geometric sequence can be \n    # found by a * r^(n-1) where a is the first term and r is the common ratio.\n\n    # The first term (a) is 1\n    a = 1\n    # Common ratio (r) is 2\n    r = 2\n    # We want the 20th and 17th terms\n    n_20th = 20\n    n_17th = 17\n  \n    # Find the 20th term\n    term_20th = a * r ** (n_20th - 1)\n    # Find the 17th term\n    term_17th = a * r ** (n_17th - 1)\n  \n    # Divide the 20th term by the 17th term\n    ans = term_20th / term_17th\n  \n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # The product of two numbers is maximized when the numbers are as close to each other as possible.\n    # Since 35 is an odd number, the two numbers cannot be exactly equal, but they can be one unit apart.\n    # Let's say the two numbers are x and 35-x.\n    # To maximize the product, x should be as close to half of 35 as possible.\n    \n    half_sum = 35 / 2\n    \n    # The closest integers to half_sum are floor(half_sum) and ceil(half_sum).\n    # In python, we can use integer division to find floor(half_sum).\n    num1 = half_sum // 1\n    num2 = 35 - num1\n    \n    # Calculate the product\n    max_product = num1 * num2\n    \n    return max_product\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Given average for Alice, Becky and Crystal\n    original_avg = 60\n    # Number of people originally\n    original_count = 3\n    # Total number of books originally\n    original_total = original_avg * original_count\n\n    # New average when Dennis is included\n    new_avg = original_avg + 10\n    # New count with Dennis\n    new_count = original_count + 1\n    # Total number of books with Dennis\n    new_total = new_avg * new_count\n\n    # Books Dennis has is the difference between new total and original total\n    dennis_books = new_total - original_total\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    well_depth = 16\n    total_distance = 0\n    day = 0\n    \n    while total_distance < well_depth:\n        day += 1\n        total_distance += day_distance\n        if total_distance >= well_depth:\n            break\n        total_distance -= night_distance\n\n    return day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81\n    \n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9  # distance from the 1st to the 4th flag\n    num_intervals_1_to_4 = 4 - 1  # intervals between 1st to 4th flag\n    \n    # distance for one interval\n    interval_distance = distance_1_to_4 / num_intervals_1_to_4\n    \n    # distance from the 1st to the 9th flag\n    num_intervals_1_to_9 = 9 - 1  # intervals between 1st to 9th flag\n    distance_1_to_9 = interval_distance * num_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    num_necklaces = total_beads // beads_per_necklace\n\n    return num_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n    \n    # If 233 is a prime number, then it cannot be divided evenly among any number of students (greater than 1 and less than 233)\n    ans = isprime(233)\n    return ans\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    number = 4 + 0.6 + 0.07\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    distance = 200\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, studentsB = symbols('peaches studentsB')\n\n    # Class A has 3 more students than Class B\n    studentsA = studentsB + 3\n\n    # All peaches given to Class A: each student gets 5 peaches, 10 left\n    eq1 = Eq(peaches, studentsA * 5 + 10)\n\n    # All peaches given to Class B: each student gets 8 peaches, 2 more needed\n    eq2 = Eq(peaches + 2, studentsB * 8)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (peaches, studentsB))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    # The ratio of the cost of a pen to the cost of a pencil\n    ratio = pen_cost // pencil_cost\n\n    return ratio\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    \n    ways = trains + buses + flights\n    \n    return ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_points = 6\n    incorrect_points = -2\n    total_questions = 10\n\n    # Let the correct answers be c and incorrect answers be i\n    # c + i = total_questions  -> Equation (1)\n    # correct_points * c + incorrect_points * i = total_points  -> Equation (2)\n\n    # Hypothesis: Suppose all the answers are incorrect first\n    # Then the total points would be total_questions * incorrect_points\n    # For each correct answer, the change in points would be\n    # correct_points - incorrect_points, since we remove one incorrect and add a correct\n\n    points_with_all_incorrect = total_questions * incorrect_points\n    points_change_per_correct = correct_points - incorrect_points\n\n    correct_answers = (total_points - points_with_all_incorrect) // points_change_per_correct\n\n    return correct_answers\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the factorial of a number\n    def fact(n):\n        return factorial(n)\n\n    # Number of dancing performances\n    dancing = 7\n    # Number of playing a sketch performances\n    playing = 3\n    \n    # First consider the 7 dancing performances as a unit.\n    # We have to place 3 playing performances in the 8 (7+1) possible slots\n    # between or at the ends of the dancing performances\n    # This is equivalent to choosing 3 out of 8 slots, which can be done in 8C3 ways.\n    \n    slots = dancing + 1\n    ways_to_choose_slots = fact(slots) // (fact(playing) * fact(slots - playing))\n    \n    # Now, within those chosen slots, the 3 playing performances can be arranged in 3! ways\n    # The 7 dancing performances can be arranged in 7! ways\n    dance_arrangements = fact(dancing)\n    playing_arrangements = fact(playing)\n\n    # Total number of ways is the product of the above terms\n    total_ways = ways_to_choose_slots * dance_arrangements * playing_arrangements\n    \n    return total_ways\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    import sympy as sp\n    \n    # Find the cube root of 28512\n    cube_root = sp.root(28512, 3)\n    \n    # Square the cube root to find h\n    h = cube_root**2\n    \n    return int(h)\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To ensure Bart gets 2 M&M's chips of different colours, \n    # consider the worst case scenario.\n    # If Bart picks all M&M's of the same colour before getting to a different colour,\n    # the worst case is picking all of one color that has the most, which is brown with 5 chips,\n    # and then one more to ensure getting a different color.\n    \n    red_chips = 3\n    yellow_chips = 4\n    brown_chips = 5\n    \n    # In the worst case, Bart picks all 5 brown chips and then one additional chip,\n    # which has to be of different color.\n    total_chips = brown_chips + 1  # The +1 is for the next chip of a different color\n    \n    return total_chips\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "from itertools import permutations\n\ndef count_derangements(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n\ndef solution():\n    n = 7\n    return count_derangements(n)\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    \n    # Each father shakes hands with fathers, mothers, and children from 9 other families (3 people per family)\n    father_handshakes = 9 * 3 * families\n    \n    # Each mother shakes hands with fathers and children from 9 other families (2 people per family), not mothers\n    mother_handshakes = 9 * 2 * families\n    \n    # Each child shakes hands with fathers and mothers from 9 other families (2 people per family), not children\n    child_handshakes = 9 * 2 * families\n    \n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n    \n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = a - 1  # c is actually the same as a in value\n    ans = (a**2) - (b * c)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # LCM of 17 and 19 is the smallest number that is divisible by both\n    lcm = 17 * 19\n    \n    # Find the smallest number greater than 2009 that is divisible by the LCM\n    smallest_divisible = (2009 // lcm + 1) * lcm\n    \n    # Subtracting 2009 from this number gives us the first three-digit number that, when 2009 is added, is divisible by 17 and 19\n    first_three_digit = smallest_divisible - 2009\n    \n    # The largest three-digit number is 999, so we need to find the largest number less than 1000 satisfying the condition\n    largest_three_digit = ((1000 - 1 + 2009) // lcm) * lcm - 2009\n    \n    return largest_three_digit\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    cost_after_40hrs = bill\n\n    # since first 40 hours are free, remove bill for up to 50 hours\n    if cost_after_40hrs > 10 * 5:\n        cost_after_40hrs -= 10 * 5\n    else:\n        hours = 40 + cost_after_40hrs / 5\n        return hours\n\n    # remove bill for up to 60 hours\n    if cost_after_40hrs > 10 * 8:\n        cost_after_40hrs -= 10 * 8\n    else:\n        hours = 50 + cost_after_40hrs / 8\n        return hours\n\n    # now the remaining hours are billed at $15 per hour\n    hours = 60 + cost_after_40hrs / 15\n    return hours\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9) and each place (hundreds, tens, ones) can be filled\n    # with any of these 5 digits.\n    # Since we're looking for 3-digit numbers, we can't have 0 in the hundreds place.\n    odd_digits_count = 5  # (1, 3, 5, 7, 9)\n    \n    # Multiplication Rule: If one event can occur in `m` ways, and a second can occur independently\n    # of the first in `n` ways, then the two events can occur in `m * n` ways.\n    # Applying this rule for the digits (hundreds, tens, ones):\n    total_numbers = odd_digits_count * odd_digits_count * odd_digits_count\n    \n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    sequence_length = len(recurring_sequence)\n    digit_index = (79 - 1) % sequence_length  # Minus 1 because the sequence starts at index 0\n    return int(recurring_sequence[digit_index])\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    expected_sum = sum(range(1, 63))\n    actual_sum = 1939\n    missing_page = expected_sum - actual_sum\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # To ensure getting 4 different colors, you must consider the worst-case scenario:\n    # Jane could pick all the marbles of each color first before picking a different color.\n    # So she could pick all red, all green, all blue and then only needs to pick one orange marble to ensure 4 different colors.\n    # The number of marbles picked will be all but one of the colors (because in the worst case the last one picked is the missing color)\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    # Worst case: drawing all but one color\n    worst_case_draw = (red + green + blue + (orange - 1))\n\n    return worst_case_draw\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1, 999):\n        if i + (i - 1) == 777:\n            return i  # i will be the next after our two sequential numbers\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps):\n        if steps == 0:\n            return 1\n        if steps < 0:\n            return 0\n        return count_ways(steps - 1) + count_ways(steps - 2) + count_ways(steps - 3)\n\n    total_ways = 0\n    \n    # Calculate ways to reach step 4 (since 5 is muddy)\n    ways_to_step_4 = count_ways(4)\n    \n    # Calculate the ways from step 6 to 10 (avoiding step 5)\n    ways_from_step_6_to_10 = count_ways(10 - 6)\n    \n    # Multiply the ways to reach step 4 with the ways from step 6 to 10\n    total_ways = ways_to_step_4 * ways_from_step_6_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    daily_earnings = 60\n    days_in_week = 7\n\n    total_earnings = daily_earnings * days_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # If we want to maximize the largest number, we should minimize the other four numbers.\n    # The smallest four odd numbers are: 1, 3, 5, and 7.\n    # We will subtract the sum of these four numbers from the total to find the largest number.\n    smallest_odd_numbers_sum = 1 + 3 + 5 + 7\n    largest_number = 85 - smallest_odd_numbers_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # T% tax on the first 30000\n    tax_first_30000 = T / 100 * 30000\n\n    # (T + 3)% tax on the rest of the income above 30000\n    tax_above_30000 = (T + 3) / 100 * (income - 30000)\n\n    # Total tax paid\n    total_tax = tax_first_30000 + tax_above_30000\n\n    # Tax paid amounts to (T+1)% of his annual income\n    tax_percentage_income = (T + 1) / 100 * income\n\n    # Setting up the equation (T+1)% of income = total_tax\n    equation = Eq(tax_percentage_income, total_tax)\n\n    # We have two variables T and income, but we are only asked for income\n    # To find income we must find T first. We know that the income must be above 30000 \n    # and it must also be a plausible income number that does not make T negative or zero.\n    possible_incomes = solve(equation, (T, income))\n\n    # Filter possible incomes and select the one that fits the description\n    valid_income = next(val[1] for val in possible_incomes if val[1] > 30000 and val[0] > 0)\n    \n    # Returning the income rounded to the nearest dollar (since it's a monetary value)\n    return round(valid_income)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of 20-cent and 50-cent coins\n    num_20, num_50 = symbols('num_20 num_50')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(num_20 + num_50, 21)  # total number of coins is 21\n    equation2 = Eq(20 * num_20 + 50 * num_50, 630)  # total value in cents is 630\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (num_20, num_50))\n\n    return solutions[num_50]\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n    distance = 500\n    \n    speed_downstream = speed_in_still_water + speed_of_current\n    time_taken = distance / speed_downstream\n    \n    return time_taken\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    distance = symbols('distance')\n    \n    # Phillip's speed is 15 meters per minute more than Alan's speed\n    # So Alan's speed is (distance / (12 + 3)) meters per minute\n    # And Phillip's speed is (distance / 12) meters per minute\n    # We can setup the equation: (distance / (12 + 3)) + 15 = (distance / 12)\n    \n    # Solve the equation\n    equation = Eq((distance / 15) + 15, (distance / 12))\n    solution = solve(equation, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    coins_left = total_coins % children\n    return coins_left\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4) # choose 4 out of 8 girls\n    boys_ways = comb(12, 3) # choose 3 out of 12 boys\n    total_ways = girls_ways * boys_ways # total combinations for boys and girls\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "import math\n\ndef solution():\n    count = 0\n    for i in range(1, 10):\n        num = int(\"2\" + \"5\" * i)\n        if math.isqrt(num) ** 2 == num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    # Let's denote the initial amount of money Alice had as 'alice_initial'.\n    # After Alice spent $36, she had $25.40 less than Tom.\n    # This means, alice_initial - 36 = tom - 25.40, where tom is the amount of money Tom had, which is $68.10.\n    tom = 68.10\n    alice_remaining = tom - 25.40\n    \n    # Now we calculate the initial amount of money Alice had by adding the $36 she spent.\n    alice_initial = alice_remaining + 36\n    \n    return alice_initial\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_of_five_numbers = 28\n    mean_of_twelve_numbers = 11\n\n    total_of_five_numbers = mean_of_five_numbers * 5\n    total_of_twelve_numbers = mean_of_twelve_numbers * 12\n\n    total_numbers = 5 + 12\n    total_sum = total_of_five_numbers + total_of_twelve_numbers\n\n    overall_mean = total_sum / total_numbers\n\n    return overall_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = original_price * 0.20\n    new_price = original_price - discount\n    return new_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74\n    gap_length = 7\n    number_of_gaps = 9 - 1  # number of gaps is one less than number of benches\n    \n    total_gap_length = number_of_gaps * gap_length\n    bench_length = (total_length - total_gap_length) / 9\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    candies, students_b = symbols('candies students_b')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq((students_b * 2) * 4 + 20, candies)  # Class A\n    equation2 = Eq(students_b * 6 - 16, candies)        # Class B\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Initial assumption is that the octopus bugbear doesn't regrow more arms than cut\n    # So we start with the number of arms Peter cut\n    total_cut = 21\n    cut = 5\n    regrow = 1\n    original_arms = total_cut\n\n    # Each time 5 arms are cut, only 1 grows back\n    # We need to calculate this 21 / 5 times (the number of full cycles of cutting and regrowing)\n    for i in range(total_cut // cut):\n        # Every full cycle, the octopus has 5 - 1 arms fewer than it started with\n        original_arms += cut - regrow\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Given\n    total_sum = 2021\n    third_greatest = 246\n    \n    # If we want the 4th greatest to be the minimum, \n    # we want the three numbers greater than or equal to the third greatest to be as big as possible.\n    # Since the third greatest is 246, let's assume the greatest and second greatest are just 1 more than the previous.\n    # Hence, greatest would be 246 + 1 + 1 and the second greatest would be 246 + 1.\n    greatest = third_greatest + 2\n    second_greatest = third_greatest + 1\n    \n    # The sum of the remaining 7 numbers would then be total_sum - (sum of the 3 greatest numbers)\n    remaining_sum = total_sum - (third_greatest + second_greatest + greatest)\n    \n    # To minimize the value of the 4th greatest number, we want to maximize the values of the remaining 6 numbers.\n    # Since these are different whole numbers, they should start from 1 and go up to 6 (the smallest different whole numbers).\n    # The sum of first 6 minimal different whole numbers 1 + 2 + 3 + 4 + 5 + 6\n    sum_of_six_minimal = sum(range(1, 7))\n    \n    # Now, subtracting this sum from the remaining_sum will give us the minimal value for the 4th greatest number\n    fourth_greatest_minimal = remaining_sum - sum_of_six_minimal\n    \n    return fourth_greatest_minimal\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # To ensure we have 2 different coloured coins, we need to consider the worst case scenario.\n    # That is, if we take out coins one by one, we could be unlucky and always take out the same color.\n    # Since there are 6 gold and 6 silver, taking out 7 coins ensures that we will have at least 1 coin of the other color.\n    return 7\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    distance_1_to_5 = 20\n    # Each interval between trees is the same, so from 1 to 5 (4 intervals) is 20 cm\n    # Calculate the distance for one interval\n    distance_per_interval = distance_1_to_5 / 4\n    \n    # From the 8th tree to the 14th tree are 6 intervals (14 - 8)\n    distance_8_to_14 = 6 * distance_per_interval\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    nums = list(range(1, 25))\n    count = 0\n    for i in nums:\n        is_valid = True\n        for j in nums:\n            if i != j and (i % j == 0 or j % i == 0):\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_per_minute = 60  # meters per minute\n    time_in_seconds = 150\n    time_in_minutes = time_in_seconds / 60  # convert seconds to minutes\n\n    distance = speed_per_minute * time_in_minutes  # total distance in meters\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    # Pip has 7 sweets\n    pip = 7\n    # Kevin has three times as many sweets as Pip\n    kevin = 3 * pip\n    # Qing Qing has 6 more sweets than Kevin\n    qing_qing = kevin + 6\n    # Calculate the total sweets\n    total_sweets = pip + kevin + qing_qing\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Devi and Jerry's current ages as symbols\n    devi, jerry = symbols('devi jerry')\n\n    # Create the equations based on the problem statement\n    age_difference = Eq(devi, jerry + 8)  # Devi is 8 years older than Jerry\n    future_ratio = Eq((devi + 4) / (jerry + 4), 5/7)  # The ratio of their ages in 4 years will be 5:7\n\n    # Solve the system of equations\n    solutions = solve((age_difference, future_ratio), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age_at_grey_birth, current_year = symbols('grey_age father_age_at_grey_birth current_year')\n    equation1 = Eq(father_age_at_grey_birth, 30)\n    equation2 = Eq(current_year, grey_age + father_age_at_grey_birth)\n    equation3 = Eq(current_year, 3 * grey_age)\n\n    solutions = solve((equation1, equation2, equation3), (grey_age, father_age_at_grey_birth, current_year))\n\n    return solutions[current_year]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Since we need to draw a \"parts\" graph and return that as an answer, we'll assume\n    # that the \"parts\" graph can be represented in ASCII art as the function's return value\n    \n    # We define the ratio as per the problem statement.\n    ratio_pip_to_bud = 5\n    \n    # Creating the parts graph with string representation\n    # where 'P' represents Pip's part and 'B' represents Bud's part\n    pip_part = \"P\" * ratio_pip_to_bud\n    bud_part = \"B\"\n    \n    # Combine the parts into a single graph representation\n    parts_graph = \"Pip: \" + pip_part + \"\\n\" + \"Bud: \" + bud_part\n    \n    return parts_graph\n\n# Call the function and assign the result to variable ans\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Calculate the least number of books on the layer with the most books using Pigeonhole Principle\n    least_books_on_most_layer = (total_books + layers - 1) // layers\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Find the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_seats = num_terms * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Initial count for the number of three-digit numbers\n    count = 0\n    \n    # Loop for the hundreds place (cannot be 0 for a three-digit number)\n    for i in range(1, 3):\n        # Loop for the tens place (can be 0, 1 or 2)\n        for j in range(0, 3):\n            # Loop for the ones place (can be 0, 1 or 2)\n            for k in range(0, 3):\n                # Check to make sure that i, j, and k are not the same\n                if i != j and j != k and i != k:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 6, 9]\n    \n    perms = list(permutations(digits, 3))\n    return len(perms)\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        number += 3 * 5 * 7\n    ans = number if 100 <= number <= 200 else None\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The divisor is not given, but it must be more than the remainder.\n    # Since the question asks for the minimum dividend, we assume the\n    # smallest possible divisor, which is one more than the remainder.\n    divisor = remainder + 1\n    \n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cookies sold by each person\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    # Equations based on the problem statement\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    y = symbols('y')  # y represents Hazel's age in three years\n\n    # Define expressions based on the problem statement\n    hazel_current_age = y - 3  # Hazel's current age\n    jessica_current_age = hazel_current_age - 3  # Jessica's current age, 3 years younger than Hazel\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)  # Their total age next year\n\n    # Solve for total age next year as a function of y\n    total_age_next_year_expr = total_age_next_year.subs(y, y)  # Simply return the expression as y is the variable\n\n    return total_age_next_year_expr\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats.\n    c, g = symbols('c g')\n\n    # Initial conditions\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation3 = Eq(g * 2, (c + g + 240) - (c + 240))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Given measurements\n    first_section_cm = 30\n    second_section_m = 1.5\n    third_section_mm = 150\n\n    # Conversion to cm\n    second_section_cm = second_section_m * 100\n    third_section_cm = third_section_mm / 10\n\n    # Total width\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    age_difference = uncle_future_age - melanie_age\n    \n    uncle_current_age = melanie_age + age_difference\n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    facing_teacher = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            if i % 4 == 0 and i % 6 == 0:  # If multiple of 12, student will face the teacher again\n                continue\n            facing_teacher -= 1\n    return facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    start_time = 15 * 60 + 25  # Convert 3:25 PM to minutes (15:25 in 24h format)\n    duration = 108  # Duration of the film in minutes\n    end_time = start_time + duration  # Calculate end time in minutes\n\n    # Convert minutes back to hours and minutes\n    hours = end_time // 60\n    minutes = end_time % 60\n    \n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_age_now = sister_age_in_3_years - 3\n    \n    return sister_age_now\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Given degree of the monomial -x^{3}y^{2n} is 5\n    # Degree of a monomial is the sum of exponents of all its variables\n    # Here, the degree is the sum of the exponent of x and exponent of y\n    # Exponent of x = 3\n    # Let exponent of y be 2n\n    # Since the total degree is 5, we have 3 + 2n = 5\n    \n    # Solving for n\n    n = (5 - 3) / 2\n    \n    return int(n)\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # To guarantee two cards of the same number or letter,\n    # we use the pigeonhole principle. There are 13 possible\n    # card numbers/letters, and each of the 4 suits has a unique card\n    # of each number/letter.\n\n    # Since there are 13 different numbers/letters, drawing one from each\n    # suit will result in 13 * 4 = 52 unique cards.\n    # So to ensure a match, we must draw one more than this number.\n    num_suits = 4\n    num_numbers_per_suit = 13\n    cards_to_draw = (num_suits * num_numbers_per_suit) // num_numbers_per_suit + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 21 and i % 2 == 0:\n            return i\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fraction = 3/5\n    partial_amount = 18\n\n    whole_amount = partial_amount / fraction\n\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    mixed_number_1 = 2 + Fraction(3, 8)\n    mixed_number_2 = 6 + Fraction(9, 12)\n    mixed_number_3 = 1 + Fraction(14, 16)\n\n    sum_of_mixed_numbers = mixed_number_1 + mixed_number_2 + mixed_number_3\n\n    return sum_of_mixed_numbers\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    # Cost of each cactus and sunflower\n    cactus_cost = 2\n    sunflower_cost = 7\n    # Total amount spent\n    total_cost = 156\n    \n    # Let's denote the number of sunflowers as x.\n    # Then the number of cacti will be x + 6.\n    # The total cost is then 2 * (x + 6) + 7 * x = 156.\n    # We can now form an equation and solve for x.\n\n    # Number of cacti and sunflowers\n    for x in range(total_cost):\n        if cactus_cost * (x + 6) + sunflower_cost * x == total_cost:\n            return x + 6\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    sarah_cost = 8 * book_price + 3 * 0.40\n    rebecca_cost = 3 * book_price + 8 * 0.40\n    \n    equation = Eq(sarah_cost, rebecca_cost + 1)\n    \n    book_cost_solution = solve(equation, book_price)\n    \n    return book_cost_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum(i**2 for i in range(2, 21, 2))\n    odd_sum = sum(i**2 for i in range(1, 20, 2))\n    \n    ans = even_sum - odd_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 0.40  # given in the problem statement\n\n    # Sarah's total cost\n    sarah_cost = 8 * book_price + 3 * pencil_price\n    # Rebecca's total cost\n    rebecca_cost = 3 * book_price + 8 * pencil_price\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_cost, rebecca_cost + 1)\n\n    # Solve for the price of a book\n    book_cost = solve(equation, book_price)[0]\n\n    return book_cost\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_points = andrew_points + 18\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2\n    before_nini = remaining_after_mike * 2\n    before_bob = before_nini * 2\n    original_amount = before_bob * 2\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    num_peaches, students_B = symbols('num_peaches students_B')\n\n    # Class A has 3 more students than Class B\n    students_A = students_B + 3\n\n    # Equations based on the problem statement\n    equation1 = Eq(num_peaches, 5 * students_A + 10)\n    equation2 = Eq(num_peaches, 8 * students_B - 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (num_peaches, students_B))\n\n    # Return the number of peaches\n    return solutions[num_peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Initialize the variables to keep track of the total number of digits\n    digit_length, number = 0, 0\n\n    # Loop to find the number of digits and the corresponding number till the total digits are less than 2023\n    while digit_length < 2023:\n        number += 1\n        digit_length += len(str(number))\n    \n    # Once the loop is complete, we have crossed the 2023rd digit, so we calculate the difference\n    difference = digit_length - 2023\n    \n    # We convert the last number to a string and get the digit\n    ans = int(str(number)[len(str(number)) - difference - 1])\n    \n    return ans\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'l' be the number of Liverpool fans at first, 'm' be Manchester United fans at first\n    l, m = symbols('l m')\n    \n    # At first, there are 1000 more Liverpool fans than Manchester United fans\n    equation1 = Eq(l, m + 1000)\n    \n    # After more fans enter, the number of Manchester United fans becomes 3 times that of Liverpool fans\n    equation2 = Eq(m + 4836, 3 * (l + 472))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (l, m))\n    \n    return solutions[l]\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps\n    t, c = symbols('t c')\n\n    # Given ratio of T-shirts to caps\n    ratio_eq = Eq(t / c, 8 / 5)\n\n    # Cost equations\n    t_shirt_cost = 3\n    cap_cost = 5\n\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    total_sales_eq = Eq(t_shirt_cost * (t / 4) + cap_cost * (c / 5), 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_sales_eq), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # Current age today (31/12/98) is 10, we know this because tomorrow is the 11th birthday\n    current_age = 10\n    \n    # We need to find the age on 31/12/01\n    # Since we are moving from 1998 to 2001, that's 3 years difference\n    age_on_31_12_01 = current_age + 3\n    \n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the digits\n    perms = permutations('4625')\n    # Convert each permutation into an integer and filter for odd numbers\n    odd_numbers = [int(''.join(p)) for p in perms if int(p[3]) % 2 != 0]\n    # Find the smallest odd number\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    trips = -(-students // boat_capacity)  # Using ceiling division to round up\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n    \n    position = ((nth_term - first_term) // common_difference) + 1\n    \n    return position\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of game cards Eric has be x.\n    # Then Joe has 7 times as many as Eric, which is 7x.\n    # If Joe gives y cards to Eric, Joe and Eric will both have 168 cards.\n    # After giving y cards to Eric, Eric will have x + y cards, and Joe will have 7x - y cards.\n    # We need to find the value of y that makes both x + y and 7x - y equal to 168.\n    # So we have the system of equations:\n    # x + y = 168 (1)\n    # 7x - y = 168 (2)\n    \n    # We can add both equations to get rid of y:\n    # x + y + 7x - y = 168 + 168\n    # 8x = 336\n    # x = 336 / 8\n    x = 336 // 8\n    \n    # Now we can find y using equation (1) or (2):\n    # y = 168 - x\n    y = 168 - x\n    \n    return y\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import primerange\n\ndef solution():\n    # Single-digit prime numbers are 2, 3, 5, and 7\n    single_digit_primes = [2, 3, 5, 7]\n\n    # Generate two-digit primes using the sympy primerange function\n    two_digit_primes = list(primerange(10, 100))\n    \n    # Count how many of these have both digits as prime numbers\n    count = sum(1 for prime in two_digit_primes if prime // 10 in single_digit_primes and prime % 10 in single_digit_primes)\n\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catches = 8\n    run_aways = 5\n    additional_catches = 9\n\n    total_catches = initial_catches - run_aways + additional_catches\n\n    return total_catches\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # minutes, 1 hour and 20 minutes\n    ans = total_time // time_per_picture\n    return ans\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for people in range(1, 40):  # assume a reasonable upper bound\n        if (people // 2) == (19 - 6):\n            return people\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    import math\n    return math.factorial(5)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n            \nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming_times = 14\n    joanne_swimming_times = 5\n    difference = amy_swimming_times - joanne_swimming_times\n\n    return difference\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Mina can split the 10 apples in the following ways:\n    # 1 with 9, 2 with 8, 3 with 7, 4 with 6, 5 with 5\n    # However, the last split (5 with 5) is not allowed, as the groups must have different numbers of apples\n    # Therefore, there are only 4 valid splits\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    # Loop through all possible values for abcd\n    for abcd in range(1000, 10000):\n        # Extract digits a, b, c, d\n        a = abcd // 1000\n        b = (abcd // 100) % 10\n        c = (abcd // 10) % 10\n        d = abcd % 10\n\n        # Check if it satisfies the given equation\n        if (abcd + 100 * a + 10 * b + a + 10 * c + b + 10 * d + c + d + a) == 1370:\n            return abcd  # Return the value of abcd if the condition is met\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N_base8 = '12345654321'\n    \n    # Convert to base 10\n    N_base10 = int(N_base8, 8)\n    \n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    sum_remainders = remainder_7 + remainder_9\n    \n    return sum_remainders\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Isaac had 5 times as many stamps as Joseph initially.\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After Joseph received 154 stamps, he had 9/10 as many stamps as Isaac.\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    # Return the number of stamps Isaac had.\n    return solutions[isaac]\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the total length of the path be x meters.\n    # Let the distance Ted has covered when they meet be y meters.\n    # Since the speed ratio of Linda to Ted is 3:4, \n    # the distance Ted covers is (4/3) times that of Linda's when they meet.\n    # Therefore, y = (4/3) * 1200 meters.\n    \n    y = (4/3) * 1200\n    \n    # Now, because they are jogging towards each other and meet somewhere in between, \n    # the sum of the distances covered by Linda and Ted will be the total length of the path.\n    # Hence, x = 1200 + y.\n    \n    x = 1200 + y\n    \n    return x\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_and_elvis = 1\n\n    # We count Ryan, the 1 squirrel between them, and Elvis\n    squirrels_in_line = ryan_front + between_ryan_and_elvis + elvis_behind + 2  # Ryan and Elvis are also in line\n\n    return squirrels_in_line\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a classical problem of derangements, sometimes called the \"hat-check problem\"\n    # We need to find !6, the derangement of 6 items.\n\n    # One way to calculate the derangement is by using the formula:\n    # !n = (n-1)*(!(n-1) + !(n-2))\n    # Where !n is the number of derangements of n objects,\n    # with base cases !0 = 1 and !1 = 0\n\n    # Calculate derangements recursively\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    # Calculate the number of ways\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n\n    # If 3 workers take 3 days, 1 worker will take 3 times longer\n    days_for_1_worker = workers * days_for_3_workers\n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9\n    # For the number 2018A, sum of digits is 2 + 0 + 1 + 8 + A = 11 + A\n    # To find the possible values of A such that 11 + A is divisible by 9\n    # we loop from 0 to 8 (since A is a single digit) and check divisibility by 9\n    for A in range(9):\n        if (11 + A) % 9 == 0:\n            # Once we find an A where 2018A is divisible by 9\n            # We find the remainder when 2018A is divided by 8\n            # Since we are only concerned with the last three digits for divisibility by 8\n            # we use 18A to calculate the remainder by 8\n            number = int(f\"18{A}\")\n            remainder = number % 8\n            return remainder\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n    \n    ans = (percentage / 100) * total_weight\n    \n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of pupils in School P\n    # Let y be the original number of pupils in School Q\n    x, y = symbols('x y')\n\n    # Initial ratio equation: x / y = 2 / 3\n    equation1 = Eq(x / y, 2 / 3)\n\n    # After admitting 240 pupils, the new ratio becomes: (x + 240) / (y + 240) = 3 / 4\n    equation2 = Eq((x + 240) / (y + 240), 3 / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30 / 100\n    total_amount = 45\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_odd = sum(i for i in range(1, 20, 2))\n    return sum_odd\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_now = symbols('jack_now')\n\n    equation = Eq(jack_now - 5, (jack_now + 8) / 2)\n    \n    solutions = solve(equation, jack_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percentage_spent_on_bag = 70\n    percentage_left = 100 - percentage_spent_on_bag\n\n    fraction_spent_on_purse = 3 / 8\n    percentage_spent_on_purse = fraction_spent_on_purse * percentage_left\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_letters = len(\"EDUCATION\")\n    total_vowels = len(\"EUAIO\")\n    total_consonants = total_letters - total_vowels\n\n    # Total arrangements for the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Total arrangements where vowels are together:\n    # Treat the vowels as a single entity and find the permutations for all entities\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtract the arrangements where vowels are together from total arrangements\n    arrangements_with_vowels_apart = total_arrangements - vowels_together\n    \n    return arrangements_with_vowels_apart\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12  # initially there are 5 students with 12 candies each\n    new_student_count = 5 + 1  # 1 more student joins, so now there are 6 students\n    candies_per_student = total_candies // new_student_count  # divide the candies equally among 6 students\n    return candies_per_student\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    initial_sweets = 11\n    wrappers = initial_sweets\n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        initial_sweets += new_sweets\n        wrappers = wrappers % 3 + new_sweets\n    return initial_sweets\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # The sum of angles in a triangle is 180 degrees.\n    sum_of_angles = 180\n    # Given m∠BAC = 50 degrees\n    angle_BAC = 50\n    # Since BP bisects ∠ABC and CP bisects ∠ACB,\n    # their respective adjacent angles are equal.\n    # Let m∠ABP = m∠PBC = x and m∠ACP = m∠PCB = y.\n    # We then have x + y + angle_BAC = sum_of_angles\n    # Solving for x + y gives us x + y = sum_of_angles - angle_BAC.\n    x_plus_y = sum_of_angles - angle_BAC\n    # The angles around point P add up to 360 degrees.\n    # Since P is inside triangle ABC, we have 2x + 2y + m∠BPC = 360\n    # We substitute x + y for the previously found value and solve for m∠BPC.\n    angle_BPC = 360 - 2 * x_plus_y\n\n    return angle_BPC\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the four variables for the different birds\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n    \n    # Create the system of equations based on the problem\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)\n    eq2 = Eq(three_tailed, 0.5 * six_tailed + 2)\n    \n    # Every bird has 1 head, but the eight-tailed bird has 2\n    heads = two_tailed + three_tailed + six_tailed + 2 * eight_tailed\n    # Calculate the tails based on type of bird\n    tails = 2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed\n    \n    eq3 = Eq(tails, 4 * heads - 2)\n    eq4 = Eq(heads - tails, 241)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n    \n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    weight_of_sweets_in_kg = 5\n    weight_of_sweets_in_g = weight_of_sweets_in_kg * 1000\n    weight_per_bag_in_g = 250\n    number_of_bags_sold = weight_of_sweets_in_g / weight_per_bag_in_g\n    total_selling_price = selling_price_per_bag * number_of_bags_sold\n    profit = total_selling_price - cost_price\n    percentage_profit = (profit / cost_price) * 100\n    return percentage_profit\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    ans = (3 * 20) / 15\n    return int(ans)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    ways_A_B = 4\n    ways_B_C = 5\n    ways_C_D = 6\n    ways_A_D = 3\n\n    # Ayton to Beeton to Ceeton to Deeton\n    ways_A_B_C_D = ways_A_B * ways_B_C * ways_C_D\n    \n    # Direct Ayton to Deeton\n    total_ways = ways_A_B_C_D + ways_A_D\n\n    return total_ways\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given values in the problem\n    tenth_number = 23\n    fifteenth_number = 38\n    term_difference = 15 - 10\n\n    # Calculate the common difference of the sequence\n    common_difference = (fifteenth_number - tenth_number) / term_difference\n\n    # Calculate the 12th number using the common difference\n    twelfth_number = tenth_number + (12 - 10) * common_difference\n\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    sally_had = 3.75\n    each_spent = 2.50\n    total_left = 5\n\n    # Calculate how much they had together after spending.\n    spent_total = sally_had - each_spent + total_left\n\n    # Calculate how much Joe had at first.\n    joe_had_at_first = spent_total - (sally_had - each_spent)\n\n    return joe_had_at_first\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days = 135\n    last_5_days = 151\n    total_days = 8\n\n    total_trees = (first_3_days * 3) + (last_5_days * 5)\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count_twice_underlined = 0\n\n    for i in range(1, 2017):\n        underline_count = 0\n        if i % 2 == 0:\n            underline_count += 1\n        if i % 3 == 0:\n            underline_count += 1\n        if i % 4 == 0:\n            underline_count += 1\n        if underline_count == 2:\n            count_twice_underlined += 1\n\n    return count_twice_underlined\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n    \n    magic_number_value = solve(equation, magic_number)\n    \n    return magic_number_value[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the magic number\n    magic_number = symbols('magic_number')\n\n    # Create an equation representing the relationship between the numbers after adding the magic number\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    # Solve the equation\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate combinations for each pair selection\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Add up all of the combination possibilities\n    total_choices = salad_soup + salad_vegetable + salad_sandwich + soup_vegetable + soup_sandwich + vegetable_sandwich\n\n    return total_choices\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check the condition that all the numbers are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Let's assume there are n layers in the square array.\n    # Therefore, the total number of students can be written as the sum of an arithmetic series\n    # 4n + 4(n-2) + 4(n-4) + ... until we reach the innermost layer, which might have only 1 boy (if n is odd) or 4 boys (if n is even).\n    # Since the difference in the number of boys and girls is 32, let's calculate the total difference layer by layer.\n    # The first layer has 4 boys more than girls, the second layer has 4 girls more than boys, and so on.\n    # The difference is thus 4 - 4 + 4 - ... + 4 or -4 depending on whether n is odd or even.\n    \n    boys_more_than_girls = 32\n    total_difference = 0\n    layer = 1\n\n    # We iterate through possible numbers of layers to find the correct one that gives us 32 more boys than girls.\n    while total_difference != boys_more_than_girls:\n        # Update total_difference for each layer, alternating adding and subtracting 4.\n        # Outermost layer is all boys, so start with adding 4 for the first layer.\n        if layer % 2 == 1:\n            total_difference += 4 * (layer)\n        else:\n            total_difference -= 4 * (layer - 1)\n        layer += 1\n\n    # Calculate the total number of students\n    # Use the formula for the sum of the first m odd numbers is m^2 to find the total students.\n    # Total students = (number of boys) + (number of girls) = (number of boys) + (number of boys - 32)\n    # Now, the total number of boys can be found by summing up to layer, which is m^2 where m = n//2 if n is even, or (n//2 + 1)^2 if n is odd.\n    n = layer - 1  # Since we added one extra layer in the while loop.\n    total_students = (n // 2) ** 2 if n % 2 == 0 else (n // 2 + 1) ** 2\n    total_students *= 2  # Total students is twice the number of boys since the difference is only 32.\n    total_students -= boys_more_than_girls  # Subtract the difference to find the total.\n\n    return total_students\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes, strawberries + 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n    total_items_solution = solve(equation, total_items)\n    \n    lemons_quantity = total_items_solution[0] - (2/3 * total_items_solution[0]) - (1/9 * total_items_solution[0])\n    \n    return int(lemons_quantity)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    equation1 = Eq(max_money - 12, 2/5 * (anthony_money))\n    equation2 = Eq(max_money, 8/13 * (anthony_money - 12))\n\n    solutions = solve((equation1, equation2), (max_money, anthony_money), rational=True)\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the total number of red stickers and b be the total number of blue stickers\n    r, b = symbols('r b')\n    \n    # Liz had an equal number of red and blue stickers\n    equation1 = Eq(r, b)\n    \n    # She gave away 2/3 of her red stickers\n    red_given_away = r * (2/3)\n    \n    # She was left with 1/4 of her stickers, so 3/4 were given away\n    total_left = (r + b) / 4\n    total_given_away = (r + b) - total_left\n\n    # The number of red stickers given away plus the number of blue stickers given away equals total given away\n    equation2 = Eq(red_given_away + (b - r/3), total_given_away)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (r, b))\n\n    # Calculate the fraction of blue stickers Liz gave away\n    blue_given_away_fraction = (solution[b] - solution[r]/3) / solution[b]\n    \n    return blue_given_away_fraction\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Using the formula for combinations with repetition (stars and bars method):\n    # (n + k - 1) choose (k - 1)\n    n = 20 - 6  # Subtract 1 pen for each kid to ensure they all get at least one\n    k = 6 - 1  # We need to place 5 dividers to create 6 sections\n\n    number_of_ways = combinations(n + k - 1, k)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # The unit digit of 444^2022 depends on the unit digit of 4^2022\n\n    # The unit digit pattern for 4^x is 4, 6, 4, 6, and so on, repeating every 2\n    # Since 2022 is even, the unit digit will be the same as 4^2, which is 6\n\n    ans = 6\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Assuming the piles are sorted from smallest to largest, the smallest number of marbles in the largest pile is sought.\n    # We can start by checking whether the piles can be properly divided with the smallest pile having 1 marble and so on.\n    # We start by checking the smallest valid configuration that satisfies all conditions.\n    for biggest_pile in range(1, 16):  # Iterate through possible sizes for the biggest pile.\n        for pile1 in range(1, biggest_pile):  # Pile 1 must be smaller than the biggest pile.\n            for pile2 in range(pile1 + 1, biggest_pile):  # Pile 2 must be larger than pile1 but smaller than the biggest pile.\n                for pile3 in range(pile2 + 1, biggest_pile):  # Pile 3 must be larger than pile2 but smaller than the biggest pile.\n                    if pile1 + pile2 + pile3 + biggest_pile == 16:  # Check if the marbles add up to 16.\n                        return biggest_pile  # If it adds up, return the smallest number of marbles in the biggest pile.\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to a common unit - millimetres (mm)\n    lengths_mm = [\n        (10, '10 millimetres'), \n        (100 * 10, '100 centimetres'), \n        (10 * 1000, '10 metres'), \n        (2 * 1000 * 1000, '2 kilometres'), \n        (2800 * 10, '2800 centimetres'), \n        (2500 * 1000, '2500 metres'), \n        (100, '100 millimetres'), \n        (100 * 1000, '100 metres')\n    ]\n    \n    # Find the length with the smallest value in mm\n    smallest_length = min(lengths_mm, key=lambda x: x[0])\n    \n    # Return the smallest length description (without the numeric value)\n    return smallest_length[1]\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    increase_per_day = 4\n\n    # Calculate the number of days it took to finish the book\n    days = (last_day_pages - first_day_pages) // increase_per_day + 1\n\n    # Total pages read, using the arithmetic series sum formula: n/2 * (first_term + last_term)\n    total_pages = days / 2 * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both_sports = 10\n    neither_sport = 9\n\n    total_students = swim_only + basketball_only + both_sports + neither_sport\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    hundreds_place_options = 5  # 1, 2, 3, 4, 5 (6 cannot be in the hundreds place as we need a three-digit number)\n    tens_place_options = 4  # One digit is used in hundreds place, so 4 options remain\n    units_place_options = 3  # Odd places (1, 3, 5), one digit is used in hundreds place, so 3 options remain\n\n    # Since the first place (hundreds) cannot be 0 and the last digit\n    # must be odd, so we calculate separately for the three places\n    total_ways = hundreds_place_options * tens_place_options * units_place_options\n\n    return total_ways\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(6 * pupils - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Total number of children\n    total_children = 11 + 5  # girls + boys\n\n    # Total height of the group of children\n    total_height = total_children * 122.5\n\n    # Let the average height of the boys be x\n    # Then the average height of the girls will be x + 3.2\n\n    # Number of girls times average height of girls (11 * (x + 3.2))\n    # Plus number of boys times average height of boys (5 * x)\n    # Equals total height\n    # 11 * (x + 3.2) + 5 * x = total_height\n\n    # Solve the equation\n    x = (total_height - 11 * 3.2) / total_children\n\n    # Average height of the girls\n    avg_height_girls = x + 3.2\n\n    return avg_height_girls\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # the maximum number of regions into which a plane can be divided by n lines is\n    # given by (n^2 + n + 2) / 2, since each new line intersects all the previous lines \n    # at most once, defining two new regions.\n    # For triangles, we consider each edge to be a line.\n    # Since there are 5 triangles and each triangle has 3 lines, we consider 15 lines.\n    # Thus, we replace n with 15 in the given formula.\n\n    n = 15  # total number of lines\n    max_regions = (n**2 + n + 2) // 2\n    return max_regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's denote x as the number of cows and y as the number of ducks.\n    # We know that cows have 4 legs and ducks have 2 legs.\n    # We have two equations:\n    # x + y = 25 (total number of animals)\n    # 4x + 2y = 68 (total number of legs)\n    #\n    # We can solve these linear equations for x and y.\n    # From the first equation, we can express y in terms of x: y = 25 - x\n    # Substituting y in the second equation, we get:\n    # 4x + 2(25 - x) = 68\n    # 4x + 50 - 2x = 68\n    # 2x = 18\n    # x = 9\n    # y = 25 - x = 25 - 9 = 16\n    #\n    # Therefore, the farmer has 16 ducks.\n\n    # Number of cows\n    x = (68 - 2 * 25) // 2\n    # Number of ducks\n    y = 25 - x\n    return y\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls and b represent the number of boys\n    g = symbols('g')\n    \n    # Total students\n    total_students = 70\n    \n    # Total marks, given by the total students times the average\n    total_marks = total_students * 66\n    \n    # Since the total number of students is given, we have\n    b = total_students - g\n    \n    # Equations based on the given average marks\n    equation = Eq(g * 70 + b * 63, total_marks)\n    \n    # Substitute the expression for b into the equation and solve for g\n    solved_g = solve(equation.subs(b, total_students - g), g)\n    \n    return solved_g[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since the numbers are consecutive odd numbers, they form an arithmetic sequence\n    # with a common difference of 2. Let the middle number of the sequence be 'm'.\n    # There are 4 numbers before 'm' and 4 numbers after 'm', hence the sum of these 9 numbers can be represented by:\n    # m + (m-2) + (m-4) + (m-6) + (m-8) + (m+2) + (m+4) + (m+6) + (m+8)\n    # Simplifying the sum, we get:\n    # 9m = 1503 -> m = 1503 / 9\n    # Now find the first term 'a' which is 4*2 (since the difference is 2) less than the middle term:\n    # a = m - 4*2\n\n    m = 1503 // 9\n    a = m - 4 * 2\n    return a\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    nth_term_32 = 157\n    nth_term_108 = 537\n    difference = (nth_term_108 - nth_term_32) / (108 - 32)\n    first_term = nth_term_32 - (32 - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the total candies\n    donna_candies = symbols('x')\n\n    # Express the conditions based on the problem description\n    # Equation: After dividing and giving to Jane\n    jane_candies = (donna_candies / 2) + 3\n    # Equation: After Jane ate candies and gave to Kate\n    kate_candies = jane_candies - (jane_candies / 3) - 4\n    # Equation: After Kate ate candies, 42 left\n    final_candies = kate_candies - (kate_candies / 4) - 42\n\n    # Solve for the original number of candies based on conditions\n    original_candies = solve(final_candies, donna_candies)\n\n    return original_candies[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # A can pass the ball to B, C, or D initially (3 options)\n    # Whoever receives the first pass has 2 options to pass the ball next (not A and not themselves)\n    # The final person also has 2 options (not the previous two people who had the ball)\n    # Since A must receive the final pass, there are no options for the last pass\n\n    count = 3 * 2 * 2\n    return count\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let's represent the number of storybooks Anthea has as A.\n    # According to the problem, when Jason gives Anthea 4 books, they will have the same number.\n    # That means, originally Jason has 30 books and after giving 4, he will have 26 books.\n    # So, we can set up the equation: A + 4 = 30 - 4\n\n    # Now we solve for A.\n    A = 30 - 4 - 4\n\n    # The difference between Jason and Anthea's books originally is:\n    difference = 30 - A\n\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        P, Q, R = perm\n        if R != 0 and (P != 0) and (10 * Q + P == 4 * (10 * R + P)):\n            return 10 * Q + P\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n\n    # Find the LCM (Lowest Common Multiple) of 4 and 10\n    # Since the first guest to get both a face mask and a mug\n    # will be at a position that is a multiple of both 4 and 10\n    ans = lcm(4, 10)\n\n    return ans\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2\n    time_s = 12 * 60  # converting minutes to seconds\n    \n    distance_m = speed_m_per_s * time_s\n    return distance_m\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_2020 = 4 * 505\n    multiply_68 = 68\n    multiply_128 = 128\n\n    sum_multiplications = (common_factor_2020 * multiply_68) + (505 * multiply_128)\n    return sum_multiplications\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    \n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    \n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of days A and B take to complete the job individually\n    days_a = symbols('days_a')\n    \n    # A's efficiency is twice B's, and A finishes in 12 days less than B\n    days_b = days_a + 12\n    efficiency_a = 1 / days_a\n    efficiency_b = 1 / days_b\n    \n    # Write the equation based on their combined work completing 1 job\n    combined_efficiency = efficiency_a + efficiency_b\n    equation = Eq(combined_efficiency, 1 / (days_b - 12))\n    \n    # Solve the equation for the value of days_a, which is the time A takes alone\n    days_a_solution = solve(equation, days_a)\n    \n    # Calculate the days needed for A and B to complete the job together\n    days_together = 1 / (1 / (days_a_solution[0]) + 1 / (days_a_solution[0] + 12))\n    \n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    newspaper_cost = 2.20\n    change = 4.83\n    note = 10\n    tissues_cost = note - (newspaper_cost + change)\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    boys = girls = 1  # Start with 1 boy and 1 girl (equal number)\n    while True:\n        boys_left = boys - (3/5) * boys\n        girls_left = girls - 42\n        if boys_left == girls_left + 12:\n            break\n        boys += 1\n        girls += 1  # Maintaining the equal number\n    return boys + girls\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours for 12 min late and 4 min early\n    late_time = 12 / 60\n    early_time = 4 / 60\n\n    # If Mike travels at 3 km/h and reaches 12 minutes late, then \n    # the time taken to travel at 3 km/h (time_3) is:\n    # time_3 = (distance / 3) + late_time\n    #\n    # If he travels at 5 km/h and reaches 4 minutes early, then \n    # the time taken to travel at 5 km/h (time_5) is:\n    # time_5 = (distance / 5) - early_time\n    #\n    # Since the distance is the same, the total time taken is decreased\n    # by (late_time + early_time) when speed increases from 3 km/h to 5 km/h.\n    #\n    # Therefore, we have:\n    # time_3 - time_5 = late_time + early_time\n    #\n    # Which leads to:\n    # (distance / 3) + late_time - ((distance / 5) - early_time) = late_time + early_time\n    #\n    # Simplifying the above equation will give us the distance\n\n    # Time difference\n    time_difference = late_time + early_time\n\n    # Calculate distance using the relationship:\n    # distance / speed_1 + time_late = distance / speed_2 - time_early\n    distance = (3 * 5 * time_difference) / (5 - 3)\n\n    return distance\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    perms = permutations(digits)\n    count = 0\n    for _ in perms:\n        count += 1\n    return count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + (3 * baskets_of_tomatoes)\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_increase = 13 - (-8)\n    return temperature_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    # Number of ways to arrange them = 4! (any of the 4 socks can go in first, then any of the remaining 3 can go second, etc.)\n    ways_diff_colored_socks = factorial(4)\n    \n    # For two different colored pairs of socks\n    # Number of ways to arrange them = 4!/2!2! (we divide by 2! twice because the pairs are identical)\n    ways_pair_socks = factorial(4) / (factorial(2) * factorial(2))\n    \n    return (ways_diff_colored_socks, ways_pair_socks)\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' be the initial number of boys and 'g' the initial number of girls\n    b, g = symbols('b g')\n\n    # Original ratio: boys to girls is 3 to 2\n    equation1 = Eq(b/g, 3/2)\n\n    # After 12 boys and 12 girls join: new number of boys is (b+12), new number of girls is (g+12)\n    # New ratio: boys to girls is 19 to 14\n    equation2 = Eq((b + 12)/(g + 12), 19/14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Total number of children after 12 boys and 12 girls join\n    total_children_afternoon = solutions[b] + 12 + solutions[g] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total = A + B + C\n    return total\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_after_transfer = total_pupils // 2\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Given the period on Earth\n    period_earth = 1  # in seconds\n\n    # Acceleration due to gravity on Earth\n    g_earth = 9.81  # in m/s^2\n    \n    # Acceleration due to gravity on the Moon\n    g_moon = g_earth / 6\n\n    # As the period T is proportional to the square root of (length / g),\n    # and assuming that the length of the pendulum does not change,\n    # we can write the relationship between the periods on Earth and on the Moon as\n    # T_moon = T_earth * sqrt(g_earth / g_moon)\n\n    period_moon = period_earth * sqrt(g_earth / g_moon)\n\n    return period_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    red_tiles = 0\n    green_tiles = 0\n    layer = 0\n\n    # Calculate the size of the wall in one dimension (since it's a square wall)\n    side_length = int(total_tiles**0.5)\n\n    while side_length > 0:\n        # Calculate the number of tiles in the current layer\n        if layer % 2 == 0:\n            red_tiles += side_length * side_length\n        else:\n            green_tiles += side_length * side_length\n\n        # Move one layer inwards and increase layer count\n        side_length -= 2\n        layer += 1\n\n    # Calculate the difference in number of tiles and dominant color\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return difference\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_23cm = 23\n    length_37cm = 37\n    welded_part = 3\n\n    full_length = length_23cm + length_37cm - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 4  # Justin gets 24 more points than William (4 more correct answers)\n        justin_points = 6 * justin_correct - 2 * (10 - justin_correct)\n        william_points = 6 * william_correct - 2 * (10 - william_correct)\n        if justin_points + william_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    \n    num_days = (end_date - start_date).days + 1\n    \n    return num_days\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's daily work rate\n    A_rate = 1 / 15\n    # B's daily work rate\n    B_rate = 1 / 10\n    # A and B's combined daily work rate\n    combined_rate = A_rate + B_rate\n    # Work done in the first 3 days\n    work_done = 3 * combined_rate\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # Days B needs to finish the remaining work\n    days_needed_B = remaining_work / B_rate\n    return days_needed_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    from math import sqrt, ceil\n\n    total_people = 100\n    # Find the size of the square array (side length)\n    side_length = ceil(sqrt(total_people))\n    \n    # If it's a perfect square, outermost layer will have side_length * 4 - 4 people\n    if side_length**2 == total_people:\n        number_outermost = side_length * 4 - 4\n    else:\n        # If it's not a perfect square, calculate people in the previous layer and subtract from total\n        previous_perfect_square = (side_length - 1) ** 2\n        people_in_previous_layer = (side_length - 1) * 4 - 4\n        number_outermost = total_people - previous_perfect_square + people_in_previous_layer\n\n    return number_outermost\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Solve the following number puzzle (A represents a digit):\n    #   A A A\n    # + A A A\n    # -------\n    #   9 3 3\n    # Since A A A + A A A = 2 * A A A = 9 3 3\n    # A should be a digit from 0 to 9, we check 2 * A A A = 933\n    for A in range(10):\n        if 2 * int(str(A) * 3) == 933:\n            return A\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        count += 1\n        term += difference\n    \n    return count\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    pile_a = 88\n    pile_b = 52\n    \n    # Tom wins if he can make the two piles have the same number of cards after his turn.\n    # He does this by making sure that anytime Jane picks from one pile,\n    # he picks the same number of cards from the other pile.\n    \n    # Calculate the difference between the two piles\n    difference = abs(pile_a - pile_b)\n    \n    # Tom's winning strategy:\n    # In his first move, Tom should equalize the number of cards in the two piles.\n    # He can pick the difference (36 cards from Pile A).\n    # After this, whatever move Jane makes, Tom just copies her move on the other pile. \n    # This ensures that the piles will always be equalized after Tom's move.\n    # Ultimately, Tom will be the one to pick the last card.\n\n    return difference\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8)\n    original_amount = remaining_after_sister / (1 - 3/7)\n    return original_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black, total_balls = symbols('red white black total_balls')\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 34)\n    \n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecakes, logcakes = symbols('cheesecakes logcakes')\n    \n    equation1 = Eq(6 * cheesecakes + 7 * logcakes, 1426)\n    equation2 = Eq(4 * cheesecakes, 3 * logcakes)\n    \n    solutions = solve((equation1, equation2), (cheesecakes, logcakes))\n    \n    cost_10_cheesecakes_logcakes = 10 * solutions[cheesecakes] + 10 * solutions[logcakes]\n    \n    return cost_10_cheesecakes_logcakes\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_each = total_amount / people\n    return amount_each\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 2014! will contain the factors 2 and 5, the last digit will always be 0\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # If we give 3 apples to that student first, we are left with 80 - 3 = 77 apples.\n    # Now, we have to distribute these 77 apples to the students making sure each gets at least 1 apple.\n    # This is equivalent to finding the number of students if we have 'n' objects and 'r' identical boxes\n    # is C(n+r-1, r-1), where C denotes the combination.\n    #\n    # Here, 'n' is 77 (apples) and we do not know 'r' (the number of students),\n    # but we know that each student must get at least one apple. So we try different values of 'r'\n    # while following the pigeonhole principle that there are enough apples for each student to get one.\n    # Since each of the 'r' students must get at least one apple, distributing 'n' apples is like\n    # distributing 'n + r' objects into 'r' distinct boxes, where each box already contains one object.\n    # Hence, we effectively need to find how many ways we can distribute the remaining 'n' apples.\n    # The problem transforms to finding the smallest 'r' such that the sum of apples and students 'n + r' \n    # is less than or equal to 'n + r' choose 'r', i.e., C(n + r, r).\n    # We keep incrementing 'r' until the condition is met. Once it is met, that 'r' is the class size.\n    \n    from math import comb\n    apples_remaining = 77\n    for class_size in range(1, apples_remaining + 1):\n        if comb(apples_remaining + class_size, class_size) > 0:\n            ans = class_size\n            break\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    outer_volume = 480  # Volume of the prism including the hole\n    base_area = 5 ** 2  # Area of the square base\n    hole_area = 1 * 1   # Area of the square hole\n\n    remaining_base_area = base_area - hole_area  # Area of the base excluding the hole\n    height = outer_volume / remaining_base_area  # Volume of prism divided by the base area excluding hole\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total_sum = sum(i * (2*i - 1) for i in range(1, 11))\n    return total_sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    cost_pencil = 5\n    cost_pen = 15\n    pencils_per_pen = cost_pen // cost_pencil\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total = 0\n    for num in range(1, 1002):\n        if num % 2 == 0:\n            total -= num\n        else:\n            total += num\n    return total\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y, g = symbols('y g')  # y for yellow beads, g for green beads\n    \n    # Original ratio 3:2.\n    equation1 = Eq(y/g, 3/2)\n    \n    # After adding beads, ratio of green to yellow becomes 3:2.\n    equation2 = Eq((g + 20)/(y + 5), 3/2)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (y, g))\n    \n    # Calculate the total number of beads initially.\n    initial_total = solutions[y] + solutions[g]\n    \n    return initial_total\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    return 12 + 102 + 1002 + 10002\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 <= 12 and len({x1, x2, x3}) == 3:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the three numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left = 16\n\n    total_marbles = marbles_given_to_brother + (2 * marbles_given_to_each_sister) + marbles_left\n\n    return total_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # For two-digit palindromes: xx\n    for x in range(1, 10):\n        count += 1\n    \n    # For three-digit palindromes: xyx\n    for x in range(1, 10):\n        for y in range(0, 10):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum = 0\n    for a in range(20, 1, -1): # Start from 20 and go down to 2\n        b = a - 1\n        sum += a**2 - b**2\n    return sum\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:  # The last digit must be even\n            if perm[0] != '0':  # The first digit cannot be 0 for a four-digit number\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed (miles per hour)\n    amy_speed = 60\n    # Christen's speed (miles per hour)\n    christen_speed = 40\n    # Combined speed\n    combined_speed = amy_speed + christen_speed\n    # Time taken to meet (hours)\n    time_to_meet = 4\n\n    # Calculate the distance they covered before they met\n    distance_covered = combined_speed * time_to_meet\n\n    # Calculate the time taken for Christen to reach Amy's starting point\n    time_for_christen_to_reach_amy = distance_covered / christen_speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    marks_correct = 4\n    marks_wrong = -1\n    total_score = 110\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * marks_correct + wrong * marks_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = 0.35 * total_cakes\n    \n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    # Ratio of lemon to chocolate cakes\n    ratio_lemon = 4\n    ratio_chocolate = 5\n    total_ratio = ratio_lemon + ratio_chocolate\n    \n    # Calculate number of lemon cakes\n    lemon_cakes = (ratio_lemon / total_ratio) * remaining_cakes\n    \n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # First digit cannot be zero (for a three-digit number)\n        for digit2 in range(0, 10):  # Second digit\n            for digit3 in range(0, 10):  # Third digit\n                if digit1 != digit2 or digit1 != digit3:\n                    if digit2 != digit3:  # All different is not what we want\n                        continue\n                    count += 1  # Exactly two different digits\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Lily has 2 choices for the first pass (Cici or April)\n    # Whoever receives the ball has 1 choice (pass to the remaining person)\n    # So total ways = First pass choices * Second pass choices\n    \n    first_pass_choices = 2\n    second_pass_choices = 1\n    \n    total_ways = first_pass_choices * second_pass_choices\n    return total_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    first_four_average = 89\n    total_score_first_four = first_four_average * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    return average_score_five_assignments\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of books Lily (L) and Judy (J) initially have\n    L, J = symbols('L J')\n\n    # We know that if Lily gives x books to Judy, they will have the same amount.\n    # L - x = J + x\n\n    # We also know we want to find the difference at the beginning: L - J\n\n    # Equation: L - J = 2*x\n    # But x = L - (L + J) / 2   ->   This is because after giving x books, they have the same amount which is (L + J) / 2\n\n    # Replace x in the first equation\n    equation = Eq(L - J, 2 * (L - (L + J) / 2))\n\n    # Solve the equation for L - J\n    solution = solve(equation, L - J)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    wibble_arms = 6\n    total_arms = 81\n    \n    total_wibble_arms = wibbles * wibble_arms\n    remaining_arms = total_arms - total_wibble_arms\n    \n    wobble_arms = 5\n    wobbles = remaining_arms // wobble_arms\n    \n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) // 9\n            if b > 0 and isprime(b) and 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total = 400\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15 and\n                    tens == 2 * hundreds and\n                    hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60  # convert minutes to seconds\n    return total_seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10  # km/h\n\n    relative_speed = maverick_speed - kelvin_speed\n\n    initial_distance = 10  # km\n\n    time_maverick_thinks = 24 / 60  # hours (converted from minutes to hours)\n\n    distance_maverick_thinks = maverick_speed * time_maverick_thinks\n\n    if distance_maverick_thinks * kelvin_speed == initial_distance:\n        # This means Maverick's thinking was correct\n        return False\n    else:\n        # Maverick was not correct, we calculate the correct time\n        actual_time = initial_distance / relative_speed  # time = distance / relative speed\n        return actual_time * 60  # Convert hours to minutes\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the operation in a Python function\n    def sharp_operation(a, b):\n        return a + b - (a * b) / 910\n\n    # Initialize result with the last term in the pattern\n    result = 1\n\n    # Loop backwards through the terms, applying the operation\n    for i in range(2, 2017):\n        result = sharp_operation(i, result)\n\n    # Return the final result\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The smaller number is y\n    return solutions[y]\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since we need to distribute 6 identical erasers to 3 kids\n    # and everyone gets at least one, we can use the \"stars and bars\" \n    # theorem, which is a common method in combinatorics for solving such problems.\n\n    # First, we give each child one eraser, that leaves us with 6 - 3 = 3 erasers to distribute.\n    remaining_erasers = 6 - 3\n\n    # The number of ways to distribute the remaining erasers can be calculated\n    # using combinations with repetition, also known as multichoose.\n    # This is equivalent to the binomial coefficient (n + k - 1) choose (k),\n    # where n is the number of remaining items to distribute and k is the number of kids/bins.\n\n    from math import comb\n    num_ways = comb(remaining_erasers + 3 - 1, remaining_erasers)\n\n    return num_ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_points = 5\n    wrong_points = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + wrong_answers * wrong_points\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    total_length = 4 * (41 - 1)  # Distance between plum trees times the number of intervals\n    num_pine_trees = (total_length // 5) + 1  # Number of 5m intervals plus 1 for the first tree\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_originally = 10\n    hours_originally = 9\n    hours_required = 3\n\n    work_rate_per_person = 1 / (people_originally * hours_originally)\n    people_needed = 1 / (work_rate_per_person * hours_required)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    cost_of_bag = 120\n    fraction_spent_on_bag = 2/5\n\n    # Money spent on bag is 2/5 of the remaining money after buying the book\n    remaining_money_after_book = cost_of_bag / fraction_spent_on_bag\n\n    # Bud spent 1/3 of her initial money on a book\n    fraction_spent_on_book = 1/3\n\n    # Initial money is the remaining money after book times 3/2 (because 1 - 1/3 = 2/3, to find the whole, divide by 2/3)\n    initial_money = remaining_money_after_book / (1 - fraction_spent_on_book)\n\n    return initial_money\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, o = symbols('y o')  # y for younger person's current age, o for older person's current age\n    equation1 = Eq(o - y, y - 4)  # When the older was the age of the younger, the younger was 4\n    equation2 = Eq(y + (o - y), 61)  # When the younger reaches the age of the older, he will be 61\n\n    solutions = solve((equation1, equation2), (y, o))\n    younger_age_now = solutions[y]\n\n    return younger_age_now\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.60)\n    total_watermelons = remaining_after_first_day / (2/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_square = 5\n    total_squares = n - first_square + 1  # total elements from 5^2 to 15^2\n\n    sum_of_squares = (1/6) * total_squares * (2*total_squares*total_squares + 3*total_squares + 1)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    # Number of desks behind Judy\n    desks_behind_judy = 7\n    # Desks where Jessica and Judy are sitting (2 desks since they are adjacent)\n    jessica_and_judy_desks = 2\n\n    # Total number of desks in the column\n    total_desks = desks_in_front_of_jessica + jessica_and_judy_desks + desks_behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(75 / 100 * x - 5, 2.5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n    \n    term = initial_amount\n    while term >= 0:\n        term -= subtraction_amount\n\n    return term\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    # Let's denote the total number of boys as b and total number of girls as g.\n    # According to the question, original number of students is the sum of boys and girls: b + g = 152.\n    # After removing 1/11 of boys and 5 girls, the number of boys and girls become equal.\n    # Therefore, we have: b - b/11 = g - 5.\n    # Simplifying the equation above gives: 10b/11 = g - 5.\n    # Since b + g = 152, we can substitute g with 152 - b.\n    # Thus we have: 10b/11 = 152 - b - 5.\n    # Solving this equation for b will give us the original number of boys.\n\n    # Simplifying the equation:\n    # 10b/11 + b = 152 - 5\n    # (10b + 11b) / 11 = 147\n    # 21b = 147 * 11\n    # b = (147 * 11) / 21\n\n    b = (147 * 11) // 21\n    return b\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    number1 = 0.11\n    half_difference = 0.126 - number1\n    number2 = 0.126 + half_difference\n    return number2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    number_of_classmates = 17\n\n    sweets_per_classmate = total_sweets // number_of_classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    chocolate_to_toffee_ratio = 12 / 7\n    toffees = chocolates / chocolate_to_toffee_ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(factors(number)):\n            return number\n\ndef factors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mango_cost_per_box = 56\n    mango_boxes = 24\n    lychee_boxes = 19\n\n    # Calculate total cost of mangoes\n    total_mango_cost = mango_boxes * mango_cost_per_box\n    \n    # Subtract total mango cost from total to get total litchi cost\n    total_lychee_cost = total_cost - total_mango_cost\n    \n    # Calculate cost per box of lychee\n    lychee_cost_per_box = total_lychee_cost / lychee_boxes\n    \n    return lychee_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                totals.add(i+j+k)\n    \n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        A, B, C = p\n        A, B, C = int(A), int(B), int(C)\n        if A == 0 or B == 0:\n            continue\n        num1 = int('5{}{}3'.format(A, B))\n        num2 = int('{}4{}6'.format(A, C))\n        product = num1 * num2\n        str_product = str(product)\n        if len(str_product) == 6 and str_product[2] == '7' and str_product[4] == '8':\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation 24x - 5(3 + x) = 4\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Get the numerical value of the solution\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    return 0.65 + 0.507 + 0.25\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    perm_set = set(permutations(cards, 3))  # Generate all permutations of length 3\n    three_digit_numbers = set(int(\"\".join(p)) for p in perm_set if p[0] != '0')  # Filter out numbers starting with 0\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since it's a multiplication tiling puzzle, let's assume that P, Q, and R are single-digit numbers.\n    # The multiplication implies the following relationships:\n    #   P * Q = R (mod 10) => R is the last digit of the product P*Q\n    #   P * Q > 10 since there's a carryover to the hundreds place. So P*Q must be at least 10.\n    #   The hundreds digit resulting from P*Q must be 1, because after adding R,\n    #   it results in P in the sum, which is a single digit.\n    # To find all such combinations, we loop through possible values of P and Q:\n\n    for P in range(1, 10):  # P cannot be 0 since it's a digit in the hundreds place\n        for Q in range(1, 10):  # Q cannot be 0 for a similar reason\n            R = (P * Q) % 10\n            if (P * Q >= 10) and ((P * Q) // 10 + R == P):\n                # Since we have a valid P, Q, and R, we can return their sum\n                return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children_10, children_15 = symbols('children_10 children_15')\n    \n    # Price without name: £10, with name: £15, total: £555\n    equation1 = Eq(10 * children_10 + 15 * children_15, 555)\n    # Total number of children\n    equation2 = Eq(children_10 + children_15, 50)\n    \n    # Solve equations\n    solutions = solve((equation1, equation2), (children_10, children_15))\n    \n    return solutions[children_15]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Calculate the distance Susan jogged from 7:30 AM to 8:30 AM.\n    jogging_time_hours = 1  # Time duration of jogging in hours.\n    jogging_speed_mph = 5   # Jogging speed in miles per hour.\n    jogging_distance = jogging_speed_mph * jogging_time_hours\n\n    # Calculate the distance Susan walked from 8:30 AM to 10:30 AM.\n    walking_time_hours = 2  # Time duration of walking in hours.\n    walking_speed_mph = 3   # Walking speed in miles per hour.\n    walking_distance = walking_speed_mph * walking_time_hours\n\n    # Calculate the total distance traveled by Susan.\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x. Then the next four numbers would be x+1, x+2, x+3, and x+4.\n    # The sum of these five numbers is given to be 100.\n    # So we have the equation, x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 100.\n    # Combining like terms, we get 5x + 10 = 100.\n\n    # Finding x by solving the equation for x.\n    total_sum = 100\n    count = 5\n    additional_sum = sum(range(count))  # sum of 1+2+3+4\n\n    x = (total_sum - additional_sum) // count\n\n    return x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Set up the equation\n    q = symbols('q')\n    equation = Eq(44000 / q, q**3)\n\n    # Solve the equation for q\n    solutions = solve(equation, q)\n\n    # Filter out the real solutions that are not negative\n    q_value = [s.evalf() for s in solutions if s.is_real and s > 0]\n\n    return q_value[0]\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # To guarantee at least 3 cards with the same number,\n    # we can draw the worst case scenario by getting 2 cards of each number first.\n    # There are 13 different numbers.\n    worst_case_cards = 13 * 2\n    \n    # Since we want at least 3 cards with the same number,\n    # one more card will ensure that we have at least one triplet.\n    # Thus, we add one more card to the worst case.\n    return worst_case_cards + 1\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n    number_of_gaps = number_of_trees - 1\n    distance_between_trees = total_length / number_of_gaps\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Initial number of notebooks Andy has\n    andy_notebooks = 149\n    # Number of notebooks Andy gives to his sister\n    notebooks_given = 38\n\n    # Calculate the number of notebooks Andy and his sister will have after giving\n    # They will have the same amount, so we subtract the notebooks given and divide by 2\n    notebooks_each = (andy_notebooks - notebooks_given) / 2\n    \n    # Andy's sister original number of notebooks is the number of notebooks each has after the exchange minus the notebooks given\n    sister_original_notebooks = notebooks_each - notebooks_given\n\n    # Check if Joey's approach was correct\n    is_correct = sister_original_notebooks == 130\n\n    return int(sister_original_notebooks), is_correct\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define the possible cards by suit and number\n    suits = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n\n    # Create all possible cards initially\n    possible_cards = []\n    for suit, numbers in suits.items():\n        for number in numbers:\n            possible_cards.append((suit, number))\n\n    # After Eddie's first statement, we remove cards with unique numbers since he would know if Avril was told a unique number\n    unique_numbers = {number for number in suits['Hearts']}  # numbers that only belong to one suit\n    possible_cards = [card for card in possible_cards if card[1] not in unique_numbers]\n\n    # After Avril's statement, the card's number must still be in the game (after removing unique numbers)\n    numbers_in_game = set(number for _, number in possible_cards)\n    possible_cards = [card for card in possible_cards if card[1] in numbers_in_game]\n\n    # After Eddie's second statement, there must be only one card of that suit left\n    remaining_cards_by_suit = {}\n    for suit, number in possible_cards:\n        remaining_cards_by_suit.setdefault(suit, []).append(number)\n\n    # Find the suit that has exactly one card associated with it, which will be the card Eddie realizes\n    card = next((suit, numbers[0]) for suit, numbers in remaining_cards_by_suit.items() if len(numbers) == 1)\n\n    return card\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    number_of_gaps = 9 + 1  # Number of intervals is one more than the number of trees\n\n    distance_between_trees = total_distance / number_of_gaps\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n    \n    base_number = 200\n    count_primes = 0\n    for position in range(3):\n        for digit in range(10):\n            # Skip changing the digit to the same it currently is\n            if (position == 0 and digit == 2) or (position in [1, 2] and digit == 0):\n                continue\n            new_number = list(str(base_number))\n            new_number[position] = str(digit)\n            new_number = int(''.join(new_number))\n            \n            # Prime numbers greater than 2 are always odd, so skip even numbers\n            if new_number > 2 and new_number % 2 == 0:\n                continue\n            if isprime(new_number):\n                count_primes += 1\n   \n    return count_primes\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let x be the smaller number, then the larger number would be 2x.\n    # Their sum is given as 72, hence x + 2x = 72.\n\n    # Solving the equation for x.\n    x = 72 // 3\n\n    return x\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_Emily = 25\n    Danny_position_from_back = 14\n\n    total_people = people_in_front_of_Emily + Danny_position_from_back + 1  # +1 for Emily\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # For the original task, Emma needs to make 3 cuts to create 4 sections, which takes 12 minutes.\n    # For each cut, Emma takes 12 minutes / 3 cuts = 4 minutes per cut.\n    # To cut the wood 5 times, it will take her 5 cuts * 4 minutes per cut.\n    return 5 * (12 / 3)  # Return the total time in minutes for 5 cuts.\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days to finish the book and p be the total pages.\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she finishes in d+2 days\n    eq1 = Eq(30 * (d + 2), p)\n\n    # If Vanessa reads 39 pages a day, she finishes in d-4 days\n    eq2 = Eq(39 * (d - 4), p)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 30:\n        page += 1\n        count += str(page).count('5')\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    cost_per_cup = total_cost / num_cups\n    return round(cost_per_cup, 2)\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    ans = (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    number_of_workers = 2\n    \n    days = (total_rooms / (rooms_per_day_per_worker * number_of_workers))\n    \n    return days\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Access the solution (only one solution expected for linear equation)\n    correct_answer = solutions[0]\n\n    # Check if Celeste's answer is correct\n    celestes_answer = 4 / 3\n    is_correct = celestes_answer == correct_answer\n\n    # Return the correct answer and whether Celeste's answer is correct\n    return correct_answer, is_correct\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Two equations based on the given information\n    equation1 = Eq(1 * apple + 2 * orange, 48)\n    equation2 = Eq(1 * apple + 1 * orange, 31)\n\n    # Solve the equations for the price of apple and orange\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the unknowns\n    pocket_money = symbols('pocket_money')\n    price_per_ball = symbols('price_per_ball')\n\n    # Define the equations based on the given conditions\n    equation1 = Eq(pocket_money - 4 * price_per_ball, 0.27)\n    equation2 = Eq(pocket_money - 2 * price_per_ball, 1.51)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    \n    seconds_per_page = seconds_per_hour / pages_per_hour\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    \n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    # Iterate from 100 to 999\n    for i in range(100, 1000):\n        # Convert number to a string and count zeros\n        num_str = str(i)\n        zero_count = num_str.count('0')\n        # Check if there is exatly one zero digit\n        if zero_count == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    original_state = Eq(elias, 5 * aileen)\n    final_state = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((original_state, final_state), (elias, aileen))\n\n    return (solutions[elias] - 88, solutions[aileen] - 8)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let the number of units eaten by Gerald be g\n    # For every unit g that Gerald eats, Thomas eats 5/3 * g\n    # Total cheese eaten is the sum of Gerald's and Thomas's parts: g + (5/3 * g) = 104\n\n    # Solve the equation for g\n    g = symbols('g')\n    equation = Eq(g + (5/3) * g, 104)\n    total_gerald = solve(equation, g)[0]\n\n    # Calculate Thomas's part\n    total_thomas = (5/3) * total_gerald\n\n    # Calculate the difference in the number of pieces of cheese\n    difference = total_thomas - total_gerald\n\n    return difference\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    num1_base8 = int(str(25), 8)\n    num2_base8 = int(str(37), 8)\n    \n    sum_base10 = num1_base8 + num2_base8\n    ans = oct(sum_base10)[2:]  # Convert sum back to base 8 and remove '0o' prefix\n    \n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return round(result, 2)\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    purchase_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of tennis rackets purchased initially.\n    # The initial cost is x * $150.\n    # The revenue when 8 rackets are left is (x - 8) * $175.\n    # According to the problem, revenue = initial cost + $525 profit.\n\n    # Form the equation and solve for x.\n    x = (profit + remaining_rackets * selling_price) / (selling_price - purchase_price)\n\n    return int(x)\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of girls be 7x (as there are 2/7 as many boys as girls, let the boys be 2x)\n    # Children = boys + girls = 2x + 7x = 9x\n    # Adults = (2/3) * children = (2/3) * 9x = 6x\n    # It's given that there were 1228 more adults than boys: 6x - 2x = 1228\n    # This simplifies to 4x = 1228, so x = 1228 / 4\n    x = 1228 / 4\n    \n    # Total number of people at the park = children + adults\n    # children = 9x, adults = 6x\n    total_people = (9 * x) + (6 * x)\n    return int(total_people)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    days_chloe_spent = (157 - 82) / 20\n    gordon_initial = 82 + days_chloe_spent * 25\n    return gordon_initial\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # B told A \"If you gave me 24 points, my result would be 2 points less than yours.\"\n    equation1 = Eq(B + 24, A - 2)\n    \n    # A told B \"if you gave me 25 points, then my result would be 5 times that of yours.\"\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    # According to the formula R = n^2 - n + 2 for circles dividing a plane\n    n = 10  # number of identical circles\n    R = n**2 - n + 2\n    return R\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len({x1, x2, x3}) == 3:\n                    count += 1\n    # Division by 6 to avoid overcounting triplets like (1,2,3), (1,3,2), etc.\n    return count // 6\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the total initial value of jewels in P be x\n    # Let the total initial value of jewels in Q be y\n    # After transferring a £5000 jewel from P to Q, P has 2 jewels, Q has 4 jewels\n    # The average value increase by £1000 for each box means:\n    # (x - 5000) / 2 + 1000 = x / 3\n    # (y + 5000) / 4 + 1000 = y / 3\n    # Solving the equations gives us the total initial value of jewels in each box.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((x - 5000) / 2 + 1000, x / 3)\n    equation2 = Eq((y + 5000) / 4 + 1000, y / 3)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total value of all 6 jewels is the sum of the initial total values of jewels in P and Q\n    total_value = solutions[x] + solutions[y]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    # The number of consecutive zeros in a factorial is determined by the number of times the number can be divided by 10.\n    # However, because 10 = 2 * 5, and there will be more factors of 2 than 5, the number of zeros is determined by the number of times the number can be divided by 5.\n    n = 10  # Since we're multiplying numbers 1 through 10\n    count = 0\n    for i in range(1, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i //= 5\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons * (1/5)\n    remaining_melons = total_melons - bad_melons\n    sell_price_per_melon = 1.5\n    revenue = remaining_melons * sell_price_per_melon\n    profit = revenue - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    # The number of neighbours is the largest number that,\n    # when used to divide the number of oranges or apples,\n    # leaves the same remainder.\n    # To find this, we use the difference between the total\n    # fruits and the remainder fruits which should be divisible\n    # by the number of neighbours.\n    \n    oranges_total = 150\n    apples_total = 100\n    oranges_remainder = 17\n    apples_remainder = 5\n    \n    # Calculate the number of fruits that were evenly divided\n    oranges_divisible = oranges_total - oranges_remainder\n    apples_divisible = apples_total - apples_remainder\n\n    # Find the greatest common divisor of evenly divided fruits\n    # This will be the highest possible number of neighbours\n    from math import gcd\n    num_neighbours = gcd(oranges_divisible, apples_divisible)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    interval = 1\n\n    crosses = (line_length / interval) + 1\n\n    return int(crosses)\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # Create a list representing the balloon pattern\n    pattern = ['red', 'red', 'green', 'yellow', 'yellow', 'green']\n    \n    # Calculate the number of complete patterns in 75 balloons\n    full_patterns, remaining_balloons = divmod(75, len(pattern))\n    \n    # Calculate the initial number of green balloons in the complete patterns\n    green_balloons = full_patterns * pattern.count('green')\n    \n    # Count the number of green balloons in the incomplete pattern\n    for i in range(remaining_balloons):\n        if pattern[i] == 'green':\n            green_balloons += 1\n    \n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Sandra's and Jessica's marbles\n    sandra, jessica = symbols('sandra jessica')\n\n    # Sandra had more marbles than Jessica at first\n    equation1 = Eq(sandra, jessica + 13)\n\n    # After Sandra gave Jessica 13 marbles, Sandra had 6 fewer marbles than Jessica\n    equation2 = Eq(sandra - 13, jessica + 13 - 6)\n\n    solutions = solve((equation1, equation2), (sandra, jessica))\n\n    sandra_start = solutions[sandra]\n    jessica_start = solutions[jessica]\n\n    # How many more marbles did Sandra have than Jessica in the beginning\n    ans = sandra_start - jessica_start\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_1_to_6 = 60\n    number_of_gaps_1_to_6 = 6 - 1\n    gap_distance = distance_1_to_6 / number_of_gaps_1_to_6\n\n    number_of_gaps_1_to_9 = 9 - 1\n    distance_1_to_9 = gap_distance * number_of_gaps_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    # Combination of 3 teams taken 2 at a time (because 2 teams play a match)\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    strawberries = 15 + 27 + 19\n    leftovers = strawberries % 8\n\n    return leftovers\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    count_ones = 0\n    count_twos = 0\n    n = 1\n    while True:\n        str_n = str(n)\n        count_ones += str_n.count('1')\n        count_twos += str_n.count('2')\n        \n        # Stop when there are 15 ones and 14 twos\n        if count_ones == 15 and count_twos == 14:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let's denote the initial number of candy pieces as x.\n    # The problem tells us that Kate ate 1/3 of x, and then she was left with 2/3 of x.\n    # At school, she shared the remaining candy with her friends, each one receiving 26 pieces.\n    # 7 friends received candy, so they received a total of 7 * 26 pieces.\n    # Kate was left with 22 pieces.\n    # Therefore, the equation we can use to find x is:\n    # (2/3)x = (7 * 26) + 22\n    # We solve for x:\n\n    candies_given_to_friends = 7 * 26\n    kate_left_with = 22\n    \n    # candies_left equals candies given to friends plus what Kate left with\n    candies_left = candies_given_to_friends + kate_left_with\n    \n    # since candies left are 2/3 of the total candies, divide by 2 and multiply by 3 to find the initial number\n    initial_candies = (candies_left * 3) // 2\n\n    return initial_candies\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    \n    andy_total_floors = 25\n    # To find out on which floor will Bob be when Andy reaches the top,\n    # we need to find the ratio of their speeds.\n    # The ratio of their speeds is the same as the ratio of the floors they have reached.\n    speed_ratio = bob_current_floor / andy_current_floor\n    \n    # Now to find out which floor Bob will be when Andy reaches the top,\n    # we apply this speed ratio to the total floors Andy has to climb.\n    bob_top_floor = andy_total_floors * speed_ratio\n    \n    # The answer needs to be an integer since we're counting floors.\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    original_speed = symbols('original_speed')\n\n    # original time in minutes\n    original_time = 3\n    # new time in minutes (1 minute earlier)\n    new_time = original_time - 1\n\n    # original work done equation\n    original_work_eq = Eq(original_speed * original_time)\n\n    # new speed (30 more words per minute)\n    new_speed = original_speed + 30\n    # new work done equation\n    new_work_eq = Eq(new_speed * new_time)\n\n    # since the total work is same, the equations should be equal\n    equations = Eq(original_work_eq.lhs, new_work_eq.lhs)\n\n    # solve for the original speed\n    solutions = solve(equations, original_speed)\n\n    # total words typed is the original speed times the original time\n    total_words = solutions[0] * original_time\n\n    return total_words\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [False] * 10  # Represent lights as off: False\n    \n    # Ms. Lily's action: toggle every other light starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = not lights[i]\n    \n    # Sam's action: toggle every even light 7 times\n    for i in range(1, 10, 2):\n        for _ in range(7):\n            lights[i] = not lights[i]\n    \n    # Count the number of lights that are on\n    ans = lights.count(True)\n    \n    return ans\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_distance = 8\n    day_climb = 3\n    night_slip = 2\n    net_progress_per_day = day_climb - night_slip\n\n    distance_covered = 0\n    day_count = 0\n    \n    while distance_covered < total_distance - day_climb:  # minus day_climb because on the last day, the worm won't slip back\n        distance_covered += net_progress_per_day\n        day_count += 1\n    day_count += 1  # add the last day when the worm gets out\n\n    return day_count\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # A table cost two times as much as a chair\n    equation1 = Eq(table, 2 * chair)\n    \n    # Two tables and three chairs cost $280\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900 # ml\n    initial_sugar_percent = 0.06 # 6%\n    desired_sugar_percent = 0.10 # 10%\n    \n    initial_sugar = initial_volume * initial_sugar_percent # amount of sugar initially\n    \n    # Let x be the amount of sugar to be added\n    # Equation: (initial_sugar + x) / (initial_volume + x) = desired_sugar_percent\n    # Solve for x\n\n    x = symbols('x')\n    equation = Eq((initial_sugar + x) / (initial_volume + x), desired_sugar_percent)\n    \n    sugar_to_add = solve(equation, x)[0]\n    \n    return sugar_to_add.evalf()\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original amount of water in Pail A is 2/3 of Pail B\n    equation1 = Eq(A, 2/3 * B)\n\n    # After pouring 4 liters from B to A:\n    # A now has original A + 4 liters (A + 4)\n    # B now has original B - 4 liters (B - 4)\n    # A now contains 7/8 as much water as B after pouring\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # The total amount of water in both pails is A + B\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n    \n    parts_per_hour = parts_made / hours_spent\n    total_hours_needed = total_parts_needed / parts_per_hour\n    \n    remaining_hours_needed = total_hours_needed - hours_spent\n    return remaining_hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    total_cost = 4 * cost_per_bar\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # In the worst case, we draw all balls of two colors first.\n    # That means we draw all 5 red and all 5 white before we get a yellow, or any such combination.\n    # Therefore, after drawing 10 balls we still cannot be sure we have 3 different colors.\n    # Thus, we need to draw one more to be certain we have at least one of each color.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n    # There are 5 different colors and each person takes 2 balls\n    # In the worst-case scenario where no two people have drawn the same, each person must draw a unique pair of colors\n    # The number of ways to draw 2 balls out of 5 colors is C(5,2)\n    unique_draws = comb(5, 2)\n    # Since there are always 2 people who get the same kind of balls, we need one more person than the possible unique draws\n    at_least_people = unique_draws + 1\n    return at_least_people\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # since the product of two numbers is divisible by 4 when at least one of them is even\n    # and for certainty they both are even.\n    # among the integers 10 to 41, there are 16 odd and 16 even numbers\n    # in the worst case scenario, we would have to pick all odd numbers\n    # plus one more number to ensure it's even\n    count = 16 + 1  # all odd numbers and 1 more to ensure we have an even number\n    return count\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let Melissa have M cards and Hisham have H cards.\n    # According to the problem statement, we have two equations:\n    # M + H = total_cards\n    # M = 2 * H\n\n    # From the equations above, we can find the individual number of cards.\n    H = total_cards // 3\n    M = total_cards - H\n\n    # To make the number of cards equal, Melissa should give Hisham:\n    # (M - H) / 2 cards - because (M - H) is how many more cards Melissa has than Hisham\n    cards_to_give = (M - H) // 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    n_third = 3\n\n    common_difference = (third_term - first_term) / (n_third - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    result = term1 - term2\n    return result\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50 - i) * (50 + i) for i in range(5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(1, 100):\n        square = i**2\n        if square < 100:\n            largest_two_digit_square = square\n        else:\n            break\n    \n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown\n    x = symbols('x')\n    \n    # Set up the equation according to the problem statement\n    equation = Eq(40/(x + 5), 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Get the first solution assuming there's only one solution\n    ans = solution[0]\n    return ans\n\n# Call the function\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # initial ages\n    brian_age = 14\n    father_age = 41\n    \n    # find the next age where the reversal occurs\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    price_in_euros = 4.8\n    price_in_usd = price_in_euros * euro_to_usd\n    return price_in_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + (b/c) + ((d/e)*f) - (g + (h/j))\n        if N % 1 == 0:  # Check if N is a whole number\n            if max_N is None or N > max_N:\n                max_N = N\n    return max_N\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    \n    for A in range(1, 20):\n        for B in range(1, 20):\n            C = 19 - A - B\n            if C > 0:\n                product = A * B * C\n                if product > max_product:\n                    max_product = product\n                    \n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_before = 3900\n    total_books_after = 3900 + 510\n    \n    # Calculate the number of books for each language before the increase\n    chinese_books_before = (4 / (4 + 3 + 6)) * total_books_before\n    malay_books_before = (3 / (4 + 3 + 6)) * total_books_before\n    english_books_before = (6 / (4 + 3 + 6)) * total_books_before\n    \n    # Increase Chinese and Malay books by 20% and 10% respectively\n    chinese_books_after = chinese_books_before * 1.20\n    malay_books_after = malay_books_before * 1.10\n    \n    # Calculate the number of English books after the increase\n    english_books_after = total_books_after - chinese_books_after - malay_books_after\n    \n    # Calculate the percentage increase of English books\n    increase_percentage_english = ((english_books_after - english_books_before) / english_books_before) * 100\n    \n    return increase_percentage_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9700 - 50\n    \nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_4_years_ago = 10\n    combined_age_now = combined_age_4_years_ago + 2 * 4  # Each dog is 4 years older now\n    combined_age_in_2_years = combined_age_now + 2 * 2  # Each dog will be 2 years older in 2 years\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    total_score = 66\n    questions_attempted = total_questions - 1\n\n    # Let correct_answers be x\n    # incorrect_answers be questions_attempted - x\n    # each correct answer gives 4 points: 4x\n    # each incorrect answer gives -2 points: -2(questions_attempted - x)\n    # Total: 4x - 2(questions_attempted - x) = total_score\n\n    for correct_answers in range(questions_attempted + 1):\n        if points_correct * correct_answers + points_incorrect * (questions_attempted - correct_answers) == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_seniors = 8\n    average_juniors = 10\n    total_participants = total_juniors + total_seniors\n    average_total = 14\n\n    total_score_juniors = total_juniors * average_juniors\n    total_score_all = total_participants * average_total\n    total_score_seniors = total_score_all - total_score_juniors\n\n    average_seniors = total_score_seniors / total_seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_answer_mark = 5\n    wrong_answer_deduction = 2\n    unanswered_question_mark = 1\n\n    answered_questions = int(0.6 * total_questions)\n    unanswered_questions = total_questions - answered_questions\n\n    # Let 'x' be the number of correct answers\n    # Since the rest must be wrong answers, we can use 'answered_questions - x' to find the number of wrong answers\n    \n    # Total score is the sum of marks from correct answers, deductions from wrong answers, and marks from unanswered questions\n    # correct_answer_mark * x - wrong_answer_deduction * (answered_questions - x) + unanswered_questions * unanswered_question_mark = total_marks\n    total_marks = 264\n    \n    # Now we have a linear equation to solve for 'x':\n    # 5x - 2(answered_questions - x) + unanswered_question_mark * unanswered_questions = total_marks\n    # 5x - 2(answered_questions - x) + unanswered_questions = total_marks\n    # Solving for x gives us:\n    x = (total_marks + 2 * answered_questions - unanswered_questions) / (correct_answer_mark + wrong_answer_deduction)\n\n    return int(x)\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    min_apples_per_container = 1\n    extra_apples = 1  # to ensure at least one container has 2 apples\n    min_total_apples = (containers * min_apples_per_container) + extra_apples\n    return min_total_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)  # 0.00...001058 where ... has 2018 zeros\n    denominator = 92 / (10 ** 2023)  # 0.00...00092 where ... has 2019 zeros\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    initial_cookies = 160\n    initial_butter = 50\n    required_cookies = 300\n\n    ratio = required_cookies / initial_cookies\n    required_butter = initial_butter * ratio\n\n    return required_butter\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the amount Dedra had at first,\n    # and t represent the amount Timm had at first.\n    d, t = symbols('d t')\n\n    # According to the problem, Dedra had 4 times as much money as Timm at first.\n    equation1 = Eq(d, 4 * t)\n\n    # Both received $72 each.\n    d_received = d + 72\n    t_received = t + 72\n\n    # Now, Dedra has twice as much money as Timm.\n    equation2 = Eq(d_received, 2 * t_received)\n\n    # Solve the system of equations for d and t\n    solutions = solve((equation1, equation2), (d, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    total_digits = 0\n    number = 1\n    while total_digits < 1000:\n        total_digits += len(str(number))\n        number += 1\n    # Since we overshoot, we subtract the last added number\n    number -= 1\n    digits_over = total_digits - 1000\n    # Find the 1000th digit in the last number we added\n    unit_digit = str(number)[-1 - digits_over]  \n    return int(unit_digit)\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # inverse operation to solve for the value in the box\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the Inclusion-Exclusion Principle\n    total_fruits = A + C + E - AC - AE - CE + ACE\n    \n    return total_fruits\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n    \n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    num_ways = permutations(18, 3)\n    return num_ways\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let x be the number of friends\n    # If each friend gets 5 erasers, Andy will have 3 left: 5x + 3\n    # If each friend gets 6 erasers, Andy will be short of 2 erasers: 6x - 2\n    # Therefore, with one more eraser per friend, Andy is short of 5 more erasers\n    # Hence, x = 5, and the total number of erasers is 5x + 3\n\n    x = 5\n    total_erasers = 5 * x + 3\n\n    return total_erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake's and John's current ages\n    jake, john = symbols('jake john')\n    \n    # Create the equation for the sum of their current ages\n    equation1 = Eq(jake + john, 44)\n    \n    # Create the equation for Jake's age being twice as old as John's age in 14 years\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (jake, john))\n    \n    # Calculate John's age in 14 years\n    john_14_years = solutions[john] + 14\n\n    return john_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the ages of Jason, Bruce, and Willie\n    jason, bruce, willie = symbols('jason bruce willie')\n    \n    # Jack is 4 years old\n    jack_age = 4\n\n    # equations based on the problem statement\n    equation1 = Eq(bruce, jason)  # Bruce and Jason are the same age\n    equation2 = Eq(willie, jason)  # Willie and Jason are the same age\n    equation3 = Eq(jack_age + jason + bruce + willie, 19)  # Total age is 19\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (jason, bruce, willie))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    # Given values\n    future_value = 2360\n    annual_interest_rate = 0.06\n    years = 3\n    \n    # Formula to calculate present value\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Since the children were born at regular intervals, we can create a sequential\n    # age difference with the youngest child's age being 'x' and the oldest being\n    # 'x + 8 * 15 / 12' (since there are 8 intervals of 15 months, and we convert\n    # months into years by dividing by 12)\n    \n    x = symbols('x')\n    oldest_age = x + 8 * (15 / 12)\n    \n    # We know the oldest is six times as old as the youngest\n    equation = Eq(oldest_age, 6 * x)\n    \n    # Solve for the youngest child's age 'x'\n    youngest_age = solve(equation, x)\n\n    return youngest_age[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Option 1: Put brackets around addition operations that would be executed after the multiplication\n    result1 = (15+5)*(5+(15-6))+7\n    # Option 2: Put brackets around the addition and the subtraction to pair with the multiplication\n    result2 = 15+(5*5)+(15-(6+7))\n    # Option 3: Put brackets to group the first three terms and the last three terms\n    result3 = ((15+5)*5)+15-(6+7)\n    # Option 4: Group the multiplication with the first addition term and the subtraction with the last addition term\n    result4 = 15+((5*5+15)-6)+7\n    \n    # The minimum result would be the smallest among the calculated options\n    ans = min(result1, result2, result3, result4)\n    return ans\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = 0\n    for n in range(1, 2008):\n        ans += (n**2 + (n+1)**2) / (n * (n+1))\n    return round(ans)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Iterate through all possible 4-digit combination lock numbers\n    for i in range(1000, 10000):  \n        # Convert the number to a string to manipulate digits\n        str_num = str(i)\n        # Form the new number by changing the ones digit to the first digit\n        new_num = int(str_num[-1] + str_num[1:3] + str_num[0])\n        # Check the condition that the new number is greater than the old by 5877\n        if new_num - i == 5877:\n            # Return the smallest original number that satisfies the condition\n            return i\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has\n    # Cayden has 5 more sweets than Jiaxiang, so Cayden has x + 5 sweets\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang sweets = x + 10\n    # Cayden sweets = (x + 5) - 10\n    # The difference in number of sweets they have now = (x + 10) - ((x + 5) - 10)\n    \n    # Original amount doesn't matter for calculating the final difference\n    # since we're just interested in the difference after the exchange\n    difference_after_exchange = (10 + 10) - 5  # Jiaxiang gains 10, Cayden loses 10, adjust for original 5 surplus\n    \n    return difference_after_exchange\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    start = (50 // 11) + 1  # First multiple of 11 after 50\n    end = 150 // 11         # Last multiple of 11 before 150\n    count = end - start + 1 # +1 to include the end in the count\n    return count\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    original_total = 5 * 72\n    new_total_with_mary = 6 * 75\n    marys_score = new_total_with_mary - original_total\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # speed of the train in m/s\n\n    # The total distance to be covered by the train to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is total distance divided by speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    morning_cookies = 200 * (1/5)\n    remainder_cookies = 200 - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    max_number = 0\n    for hundred in range(9, 0, -1):  # starts from 9 because we want the greatest number and goes down to 1\n        for ten in range(8, -1, -4):  # starts from 8 because it needs to be divisible by 4 and goes down in steps of 4\n            for unit in range(9, -1, -2):  # starts from 9 because we want an odd number and goes down in steps of 2\n                number = hundred * 100 + ten * 10 + unit\n                if number % 9 == 0:  # the number needs to be divisible by 9\n                    return number  # returns immediately after finding the greatest number according to the conditions\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # The worst case scenario to ensure 4 different coloured marbles\n    # would be to withdraw all of one colour before getting a single marble of another colour. \n    # After that, withdraw all of a second colour, and then all but one of a third colour.\n    \n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n    \n    # The worst case is withdrawing all red, green, and blue marbles but one less from the blue\n    marbles_drawn = red + green + (blue - 1)\n    \n    # One more marble must be drawn to guarantee the fourth colour\n    marbles_drawn += 1\n    \n    return marbles_drawn\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    coin_values = [5, 10, 20, 50, 100]  # Values of coins in pence\n    total_value = 500  # Total value of five pound note in pence\n\n    for coin in coin_values:\n        total_value -= coin  # Subtracting each coin value from the total\n\n    amount_spent = total_value\n    return amount_spent\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each student has to get at least one doughnut, we give one to each first\n    remaining_doughnuts = 11 - 4\n    \n    # Now the problem is reduced to finding the number of ways to distribute\n    # the remaining 7 identical doughnuts to 4 students which is equivalent to \n    # finding the number of non-negative integer solutions to the equation\n    # x1 + x2 + x3 + x4 = 7\n    # This problem is known as counting the number of compositions and can be\n    # solved using stars and bars method and the formula is:\n    # (n+k-1) choose (k-1) where n is the number of items to distribute\n    # and k is the number of buckets or students in our case.\n    ans = comb(remaining_doughnuts + 4 - 1, 4 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_notes = 38\n    spent_10_notes_percent = 0.8\n    spent_2_notes_percent = 0.75\n\n    num_10_notes, num_2_notes = symbols('num_10_notes num_2_notes')\n\n    # Equations based on the problem statement\n    equation1 = Eq(num_10_notes + num_2_notes, total_notes)  # Total number of $10 and $2 notes\n    equation2 = Eq(num_10_notes * (1 - spent_10_notes_percent), 3 * num_2_notes * (1 - spent_2_notes_percent))\n    # The 10$ spent are 80% (0.8) and the 2$ spent are 75% (0.75)\n    # After spending, the $10 notes left are three times the $2 notes left\n\n    solutions = solve((equation1, equation2), (num_10_notes, num_2_notes))\n    num_10_notes_solution = solutions[num_10_notes]\n    num_2_notes_solution = solutions[num_2_notes]\n\n    # Finding the total cost of the fan\n    total_spent_10_notes = num_10_notes_solution * 10 * spent_10_notes_percent\n    total_spent_2_notes = num_2_notes_solution * 2 * spent_2_notes_percent\n    cost_of_fan = total_spent_10_notes + total_spent_2_notes\n\n    return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_production = 50\n    target_production = 90\n\n    additional_hives = (target_production / current_production) * current_hives - current_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    # Ali and Kumar share erasers in the ratio of 7:5\n    ratio_Ali = 7\n    ratio_Kumar = 5\n    \n    # After giving 10 erasers to Kumar, ratio becomes 1:5\n    final_ratio_Ali = 1\n    final_ratio_Kumar = 5\n    \n    # Let the common ratio multiplier before giving erasers be x\n    # Ali has 7x erasers, and Kumar has 5x erasers\n    \n    # Ali gives Kumar 10 erasers, so we have the following equations:\n    # 7x - 10 (erasers Ali has left)\n    # 5x + 10 (erasers Kumar has now)\n    \n    # According to the new ratio, we get the following equation:\n    # (7x - 10) / (5x + 10) = final_ratio_Ali / final_ratio_Kumar\n    \n    # Solving the equation for x\n    x = symbols('x')\n    numerator = (ratio_Ali * x) - 10\n    denominator = (ratio_Kumar * x) + 10\n    equation = Eq(numerator/denominator, final_ratio_Ali/final_ratio_Kumar)\n    \n    x_value = solve(equation, x)[0]\n    \n    # Now, to find the total number of erasers they have together:\n    total_erasers = (ratio_Ali * x_value) + (ratio_Kumar * x_value)\n    \n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    nth_student = 23\n\n    nth_term = first_term + (nth_student - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    distance_east = 15 - 9   # Distance covered towards east after cancelling the west part\n    distance_north = 3 + 5   # Total distance covered towards north\n    shortest_distance = sqrt(distance_east ** 2 + distance_north ** 2)  # Pythagorean theorem\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the costs of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert hours to minutes\n    activity_and_break = 45 + 20  # Duration of each activity including the break\n\n    # Find out how many full activity-and-break intervals fit into the total duration\n    # Subtract the duration of the last break since the day ends after the last activity\n    activities = (total_minutes - 20) // activity_and_break\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Given weight relationships\n    ab = 102\n    bc = 97\n    ac = 92\n\n    # Total weight is sum of all three combined weights minus sum of individual weights\n    total_weight = (ab + bc + ac) // 2  # division by 2 as each person's weight is counted twice\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        num = int(''.join(perm))\n        if num > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of days B takes to finish the work\n    b = symbols('b')\n    # Since A takes 5 days less than B, A takes b - 5 days\n    # A's efficiency is twice B's, which means A does 1/(b - 5) work per day\n    # B does 1/b work per day\n    # Since A and B's work add up to 1 (the whole job), we have:\n    # 2*(1/b) = 1/(b - 5)  -> A's work per day is twice B's work per day\n    # Solve for b\n    equation = Eq(2/b, 1/(b - 5))\n    \n    # Solve the equation\n    days_b = solve(equation, b)\n    \n    # We only need the positive solution, since negative time doesn't make sense\n    return [sol.evalf() for sol in days_b if sol > 0][0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    fraction = 3 / 5\n    number = 35\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    \n    # The rule for divisibility by 11 is that the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions must be divisible by 11\n    odd_sum = sum(digits[0::2])\n    even_sum = sum(digits[1::2])\n    remainder = (odd_sum - even_sum) % 11\n    \n    # If the remainder is 0, then the number is divisible by 11\n    is_divisible_by_11 = remainder == 0\n    \n    # The answer expected is whether George's statement was correct.\n    # According to George, the remainder is 1, so we check if our calculated remainder matches George's claim.\n    georges_claim_matches = (remainder == 1)\n    \n    return is_divisible_by_11, georges_claim_matches, remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    \n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    \n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    \n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length = 2.06  # in meters\n    end_length = 78 / 100  # converting cm to meters\n\n    melted_length = start_length - end_length\n\n    return melted_length\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    base_amount = 650\n    ans = percentage * base_amount\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Dynamic programming approach to count the ways to climb the stairs\n    # Initialize an array to store the number of ways to reach each step\n    num_ways = [0] * 10  # 0 step through 9 steps, so we need 10 elements\n    num_ways[0] = 1  # There is 1 way to stay on the ground (not climbing any steps)\n\n    for step in range(1, 10):\n        # For each step, we count the ways to get there by either climbing 1 or 4 steps from a previous step\n        if step >= 1:\n            num_ways[step] += num_ways[step - 1]  # One step from the previous step\n        if step >= 4:\n            num_ways[step] += num_ways[step - 4]  # Four steps from the step that is 4 steps behind\n\n    return num_ways[9]  # The number of ways to reach the 9th step\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2 / 5) * initial_passengers + 7\n    after_second_stop = after_first_stop - (1 / 4) * after_first_stop + 13\n\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # The given series alternates in increments of 0.5\n    # We need to find the number of terms in the sequence before finding the sum of cubes\n    # The series starts at 0.5 and ends at 10, with an increment of 0.5\n    \n    start = 0.5\n    end = 10\n    increment = 0.5\n    terms = int((end - start) / increment + 1)  # Finding the number of terms\n    \n    # Given the formula for the sum of cubes is (1^3 + 2^3 + ... + n^3) = (1 + 2 + ... + n)^2\n    # We need to find the sum of the series from 1 to terms and then square it to find the sum of cubes\n    \n    sum_n = ((terms*(2*start + (terms-1)*increment)) / 2)  # Sum of an arithmetic series formula\n    sum_cubes = sum_n ** 2  # Square the sum to get the sum of cubes\n    \n    return sum_cubes\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # If the price is estimated to £35 to the nearest £5,\n    # the least amount the bill could be is £32.50,\n    # because £32.50 to £37.49 would all round to £35 when rounded to the nearest £5.\n    ans = 35 - 2.5\n    return ans\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x be the number of years from now when the sum of their ages will be 40.\n    # At that time Geoff's age + his sister's age = 40\n    # Given that currently Geoff's age + his sister's age = 22\n    # Thus after x years this sum increases by 2x (each will age by x years)\n    # So we can write the equation: 22 + 2x = 40\n\n    # Solving this equation\n    x = (40 - 22) // 2\n\n    return x\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n    # Elephant is on the right of the rabbit, so we have to count\n    # toys between + 1 for the rabbit itself\n    rabbit_position_from_left = elephant_position - (toys_between + 1)\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the time it takes for Tim to complete the book by himself as `t`.\n    t = symbols('t')\n    # Nancy's rate of working is 1/6 of the book per day.\n    # Tim's rate of working is 1/t of the book per day.\n\n    # Together, their combined rate is 1/6 + 1/t = 1/4 of the book per day.\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solving the equation for t gives us the time it takes for Tim to complete the book by himself.\n    solutions = solve(equation, t)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1  # start testing from the smallest number that fits the modulus criteria\n    while True:\n        # According to the problem, pencils leave a remainder of pencils - 1 when divided by 2, 3, 4, and 5.\n        if (pencils % 2 == 1 and pencils % 3 == 2 and \n            pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1  # increment and check the next number\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan + his 3 sisters\n    biscuits_each = total_biscuits / people_count\n\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass of the sauce to grams\n    total_mass_g = 172000  # 172 kg in grams\n    \n    # The mass of each packet for P, Q, and R\n    mass_P = 300\n    mass_Q = 400\n    mass_R = 500\n    \n    # The ratio of the number of packets\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    \n    # Let the common ratio multiplier be x\n    # Total mass is the sum of individual masses of ingredients\n    # (7*x)*mass_P + (3*x)*mass_Q + (2*x)*mass_R = total_mass_g\n    # By substituting the known masses and total mass, solve for x\n    x = total_mass_g / (ratio_P*mass_P + ratio_Q*mass_Q + ratio_R*mass_R)\n    \n    # Now calculate the total number of packets used for each ingredient\n    packets_P = ratio_P * x\n    packets_Q = ratio_Q * x\n    packets_R = ratio_R * x\n    \n    # Total number of packets used altogether\n    total_packets = packets_P + packets_Q + packets_R\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    a = mean_value * (len(numbers) + 1) - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    # Convert minutes to seconds for more precise calculations\n    first_light = 60   # 1 minute in seconds\n    second_light = 90  # 1.5 minutes in seconds\n    all_green = 540    # 9 minutes in seconds\n\n    # Calculate the least common multiple for the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # Now, we find the least common multiple of the third light that will sync up with the all_green time\n    # The third light's time should be at least 30 seconds, so we start from there\n    third_light = 30  # 30 seconds as a starting point\n\n    while True:\n        if lcm(lcm_first_second, third_light) == all_green:\n            return third_light\n        third_light += 1\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit (centimeters)\n    pink_ribbon_cm = 2.5 * 100  # converting meters to centimeters\n    blue_ribbon_cm = 220  # already in centimeters\n    orange_ribbon_cm = 30.5  # already in centimeters\n\n    # Determine which ribbon is the longest\n    longest_ribbon = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon == pink_ribbon_cm:\n        return \"pink\"\n    elif longest_ribbon == blue_ribbon_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    # Time in minutes for each activity\n    preparing_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    # Summing all the activities time to get the total time\n    total_time = preparing_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 50 / 100\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n\n    total_cars = red_cars + blue_cars + green_cars\n    total_capacity = (red_cars * red_car_capacity) + (blue_cars * blue_car_capacity) + (green_cars * green_car_capacity)\n\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given data\n    rachel_speed_km_per_hr = 84\n    time_difference_hr = 1.5\n    eleanor_time_hr = 4\n    rachel_remaining_distance_km = 39\n    \n    # Eleanor's speed can be calculated as the distance she covers over her travel time\n    # Distance covered by Rachel in 1.5 hours\n    rachel_distance_km = rachel_speed_km_per_hr * time_difference_hr\n    \n    # Total distance between the two cities\n    # The total distance is the sum of what Eleanor travels in 4 hours plus what Rachel covers in the same time,\n    # minus Rachel's remaining 39km to city F when Eleanor reaches city G\n    distance_between_cities_km = (eleanor_time_hr * rachel_speed_km_per_hr + rachel_distance_km - rachel_remaining_distance_km)\n    \n    return distance_between_cities_km\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    total = 0\n    for i in range(1, 4):  # Since we need to calculate 4 ⊙ 3, we iterate 3 times\n        number = int(\"4\" * i)  # This creates the necessary pattern: 4, 44, 444\n        total += number\n    return total\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    boys = 5\n    total_students = 25\n\n    percent_boys = (boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollar_value = 64\n    exchange_rate = 1.25\n    us_dollar_cost = canadian_dollar_value / exchange_rate\n    return us_dollar_cost\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score_needed = 90 * 5\n    min_score = None\n    \n    for a in range(101):\n        for b in range(a + 1, 101):\n            for c in range(b + 1, 101):\n                for d in range(c + 1, 101):\n                    e = total_score_needed - (a + b + c + d)\n                    if e > d and e < 101:\n                        if min_score is None or a < min_score:\n                            min_score = a\n    return min_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the lengths of the ropes in cm\n    A, B, C = symbols('A B C')\n    \n    # Given equations\n    equation1 = Eq(A, 3 * B)          # Rope A is 3 times Rope B\n    equation2 = Eq(C, B + 56)         # Rope C is 56cm longer than Rope B\n    equation3 = Eq(A, C + 130)        # Rope A is 130cm (1m 30cm) longer than Rope C\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Total length of all ropes\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_letters = 5\n    string_length = 3\n    # Calculate all possible strings of 3 different letters out of 5\n    total_combinations = factorial(total_letters) // factorial(total_letters - string_length)\n    \n    # Calculate the combinations of strings containing both A and B\n    # Since A and B must be included, we are choosing the remaining 1 letter from the 3 remaining letters (C, D, E)\n    remaining_choices = total_letters - 2\n    favorable_combinations = factorial(remaining_choices)\n    \n    # Calculate the probability\n    probability = favorable_combinations / total_combinations\n    \n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    male_students_percentage = 16\n    female_students_percentage = 10\n    \n    total_members = male_members + female_members\n    male_students = male_members * (male_students_percentage / 100)\n    female_students = female_members * (female_students_percentage / 100)\n    \n    total_students = male_students + female_students\n    total_students_percentage = (total_students / total_members) * 100\n    \n    return total_students_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_in_first = 200 * 0.35\n    fruit_juice_in_second = 300 * 0.50\n    total_fruit_juice = fruit_juice_in_first + fruit_juice_in_second\n    concentration_percentage = (total_fruit_juice / total_volume) * 100\n    return concentration_percentage\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratios\n    x_to_48 = (x, 48)\n    ratio_3_to_4 = (3, 4)\n\n    # Since the ratios are equivalent, we can write x/48 = 3/4\n    # Cross multiplying we get:\n    # 4x = 48 * 3\n    # Now, solving for x:\n    x = (48 * 3) / 4\n\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    desired_difference = 4\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy_apples - x) apples\n    # and John will have (john_apples + x) apples\n    # We want Amy to have 4 more apples than John, which means:\n    # (amy_apples - x) - (john_apples + x) = desired_difference\n    # Simplify the equation:\n    # amy_apples - john_apples - 2x = desired_difference\n    # Solve the equation for x:\n    x = (amy_apples - john_apples - desired_difference) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of papers be x\n    x = symbols('x')\n\n    # Original rate is x papers in 5 hours\n    original_rate = x / 5\n\n    # After 1 hour of work at the original rate, remaining papers are x - original_rate * 1\n    remaining_papers = x - original_rate\n\n    # New rate is original_rate + 6, and the time to finish remaining papers is 4 hours\n    increased_rate_equation = Eq((original_rate + 6) * 4, remaining_papers)\n\n    # Another new rate is original_rate + 10, and the time to finish is 5-1-1 = 3 hours\n    further_increased_rate_equation = Eq((original_rate + 10) * 3, remaining_papers)\n\n    solutions = solve((increased_rate_equation, further_increased_rate_equation), x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    total_pies = 40 + 20 + 30\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    chicken_more_than_vegetable = (chicken_pies - vegetable_pies) / total_pies\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    vegetable_less_than_fruit = (fruit_pies - vegetable_pies) / total_pies\n\n    ans = (chicken_more_than_vegetable, vegetable_less_than_fruit)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    given_away = 7\n    markers_left = total_markers - given_away\n    bag_size = 5\n    num_bags = markers_left // bag_size\n    return num_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent the cost of one jug and c represent the cost of one cup\n    j, c = symbols('j c')\n\n    # Create equations based on the given information\n    equation1 = Eq(4 * j + 5 * c, 85)  # 4 jugs and 5 cups cost £85\n    equation2 = Eq(2 * j + 2 * c, 40)  # 2 jugs and 2 cups cost £40\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Return the cost of one cup\n    return solutions[c]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # Since 'a' is the first digit, it can't be 0\n        for b in range(10):  # 'b' is the second digit, it can be 0-9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_digits = 0\n    for i in range(1, 208):\n        sum_digits += sum(map(int, str(i)))\n    return sum_digits\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    \n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the cost of each wristband be 'w' and each cap '3w'\n    caps, wristbands, w, total_money = symbols('caps wristbands w total_money')\n    \n    # Caleb spent 2/5 of his money on 4 caps (4 * 3w each) and 6 wristbands (6 * w each)\n    equation1 = Eq(2/5 * total_money, 4 * 3 * w + 6 * w)\n    \n    # Remaining money is total_money - 2/5 * total_money = 3/5 * total_money\n    remaining_money = 3/5 * total_money\n    \n    # He bought some more caps with 1/3 of his remaining money\n    # The cost for these additional caps is 1/3 * remaining_money\n    additional_caps = 1/3 * remaining_money / (3 * w)\n    \n    # Total number of caps is the original 4 plus the additional ones\n    total_caps = Eq(caps, 4 + additional_caps)\n    \n    # Solve the system of equations to find the value of 'caps'\n    solutions = solve((equation1, total_caps), (caps, wristbands, w, total_money))\n    \n    # Since we can assume the number of caps is a whole number, we return the integer part\n    return int(solutions[caps])\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for velocity at 2000m (v) and gravitational acceleration (g)\n    v, g = symbols('v g')\n    \n    # Altitude difference (h)\n    h = 1000  # 3000m - 2000m\n     \n    # Kinematic equation without air resistance: v^2 = u^2 + 2*g*h\n    # Initial velocity (u) is 0 because the skydiver starts from rest\n    equation = Eq(v**2, 2*g*h)\n    \n    # Gravitational acceleration on Earth (approximate)\n    g_value = 9.81  # in m/s^2\n    \n    # Solving for final velocity v\n    solution = solve(equation.subs(g, g_value), v)\n\n    # We take the positive value since we're looking for the magnitude of velocity\n    return max(solution)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 numbers, if we want to ensure 4 consecutive numbers,\n    # the worst case will be that we take one from each group of 3 consecutive numbers.\n    # Since there are 13 numbers, we can split them into 10 groups of 3 consecutive numbers (1-3, 2-4, ..., 10-12).\n    # So we need to take at least one card from each of these groups, and at least one more to ensure a consecutive sequence.\n    \n    # Plus, we can get any pattern.\n    # Therefore, we need a minimum of 10 (for the consecutive numbers in different groups) + 1 (to ensure the 4th consecutive number)\n    # and we multiply by 4 for the worst case scenario for the patterns.\n\n    min_cards = (10 + 1) * 4\n    return min_cards\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]  # Digits excluding A, C, G which are already known\n\n    # Iterate over all permutations of the remaining digits\n    for perm in permutations(remaining_digits):\n        # Form the ten-digit number with the known A, C, G digits at their respective positions\n        A, B, C, D, E, F, G, H, I, J = [3, perm[0], 1, perm[1], perm[2], perm[3], 7, perm[4], perm[5], perm[6]]\n\n        # Checking divisibility for each property of the number ABCDEFGHIJ\n        if (A % 1 == 0 and\n            (A*10 + B) % 2 == 0 and\n            (A*100 + B*10 + C) % 3 == 0 and\n            (A*1000 + B*100 + C*10 + D) % 4 == 0 and\n            (A*10000 + B*1000 + C*100 + D*10 + E) % 5 == 0 and\n            (A*100000 + B*10000 + C*1000 + D*100 + E*10 + F) % 6 == 0 and\n            (A*1000000 + B*100000 + C*10000 + D*1000 + E*100 + F*10 + G) % 7 == 0 and\n            (A*10000000 + B*1000000 + C*100000 + D*100000 + E*1000 + F*100 + G*10 + H) % 8 == 0 and\n            (A*100000000 + B*10000000 + C*1000000 + D*100000 + E*10000 + F*1000 + G*100 + H*10 + I) % 9 == 0 and\n            J == 0):  # Last digit J must be 0 as the number is divisible by 10\n            return {'B': B, 'D': D, 'E': E, 'F': F, 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    def actual_page_to_printed_page(actual_page):\n        return actual_page - actual_page // 3\n\n    low = 1\n    high = 89 * 2  # To ensure we cover the upper bound of the possible last page number\n    while low <= high:\n        mid = (low + high) // 2\n        if actual_page_to_printed_page(mid) < 89:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Once the loop ends, low minus 1 will give us the last actual page number \n    # whose printed page number is 89.\n    last_printed_page = low - 1\n    \n    return last_printed_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adult_tickets, child_tickets = symbols('adult_tickets child_tickets')\n\n    equation1 = Eq(adult_tickets * 5 + child_tickets * 3, 75)\n    equation2 = Eq(adult_tickets + child_tickets, 19)\n\n    solutions = solve((equation1, equation2), (adult_tickets, child_tickets))\n\n    return solutions[adult_tickets]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_multiples_3 = 600 // 3\n    count_multiples_5 = 600 // 5\n    count_multiples_15 = 600 // 15  # LCM of 3 and 5 is 15, so these are counted twice\n    \n    ans = count_multiples_3 + count_multiples_5 - count_multiples_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n\n    grandma_age_now = grandma_age_future - (tom_age_future - tom_age_now)\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let a be the number of students in class A, b be the number of students in class B,\n    # and c be the total number of candies.\n    a, b, c = symbols('a b c')\n    \n    # Class A equation: 4a + 20 = c (each student in A gets 4 candies, 20 more needed)\n    eq1 = Eq(4 * a + 20, c)\n    \n    # Class B equation: 6b - 16 = c (each student in B gets 6 candies, 16 candies are left)\n    eq2 = Eq(6 * b - 16, c)\n    \n    # Relationship between the number of students in class A and B: a = 2b\n    eq3 = Eq(a, 2 * b)\n    \n    # Solve the system of equations for c (total number of candies)\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6): # Possible quantities of 10 pence coins from 0 to 5\n        for twenty_pence in range(4): # Possible quantities of 20 pence coins from 0 to 3\n            for fifty_pence in range(2): # Possible quantities of 50 pence coins: 0 or 1\n                if (ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50) == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # If we take 4 stickers, in the worst case, we might have taken 1 red and 1 green three times.\n    # But to ensure we have 2 stickers of the same colour, we need to take one more.\n    # Therefore, after taking 4, regardless of the combination, the fifth sticker must \n    # match one of the colours already chosen, giving us two stickers of the same colour.\n    return 4 + 1  # Worst case + 1\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # We need to consider the worst case to ensure 4 balls of the same colour\n    # Worst case scenario: Sheila picks balls in a way that she avoids getting 4 of the same color as long as possible\n    # She can pick 3 blue balls, 3 orange balls, and 2 yellow balls without having 4 of the same colour\n    # Next ball she picks will ensure 4 balls of one colour\n    \n    worst_case_blue_orange = 3 + 3  # She can pick 3 blue and 3 orange\n    worst_case_yellow = 2  # She can pick 2 yellow\n    \n    # Next ball will make 4 of one colour\n    next_ball = 1\n    \n    total_balls = worst_case_blue_orange + worst_case_yellow + next_ball\n    \n    return total_balls\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2 # Each duckling has 2 legs, so 4 ducklings have 4*2 legs\n    goose_legs = 2 * 2 # Each baby goose has 2 legs, so 2 baby geese have 2*2 legs\n    remaining_legs = 36 - (duck_legs + goose_legs) # Remaining legs are those of the lambs\n    lamb_legs = 4 # Each lamb has 4 legs\n    number_of_lambs = remaining_legs / lamb_legs # Each lamb has 4 legs\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    min_num = int(''.join(map(str, sorted(digits))))\n    \n    return max_num - min_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (top layer) has 1^2 = 1 box\n    # Layer 2 has 2^2 = 4 boxes\n    # Layer 3 has 3^2 = 9 boxes\n    # Total number of boxes is the sum of boxes in all three layers\n    total_boxes = 1**2 + 2**2 + 3**2\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_from_A = 600 * (3/5)\n    good_copies_needed_from_B = 600 * (2/5)\n    \n    total_copies_from_A = good_copies_needed_from_A * (5/4)\n    total_copies_from_B = good_copies_needed_from_B * (6/5)\n    \n    total_copies_needed = total_copies_from_A + total_copies_from_B\n    \n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    expression1 = (1.2 + 1.23 + 1)\n    expression2 = (1.2 + 1.23)\n    \n    ans = expression1 * (expression1 - expression2)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the son to finish harvesting by himself\n    x = symbols('x')\n\n    # Formula for work done: Work = Rate * Time\n    # Farmer's work rate = 1/24 work per hour (since he alone finishes in 24 hours)\n    # Son's work rate = 1/x work per hour\n    # Together rate = 1/24 + 1/x\n    # Total work is 1 (as in, the whole harvesting job)\n    # They finish this 1 job in 16 hours when working together\n    equation = Eq(1/24 + 1/x, 1/16)\n\n    # Solving the equation for x will give us the son's time to harvest by himself\n    solution = solve(equation, x)\n\n    # Only one positive solution would be meaningful in this context\n    return solution[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    return smiles_per_day * days_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "import math\n\ndef solution():\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Annie's solution sugar content\n    annie_sugar = 300 * 0.15\n    # Becky's solution sugar content\n    becky_sugar = 400 * 0.25\n    # Carol's solution sugar content\n    carol_sugar = 300 * 0.35\n    \n    # Total sugar content\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    # Total mass of the mixed solution\n    total_mass = 300 + 400 + 300\n\n    # Concentration of the resulting sugar solution\n    concentration = total_sugar / total_mass\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n    expected_times = total_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(5)\n    # Count the permutations where Hugh is between Louise and Richard\n    # We treat Louise, Hugh, and Richard as one block, so we have 3 blocks in total.\n    unhappiness_permutations = factorial(3) * factorial(3)\n    \n    # Subtract from the total permutations to get the number of permutations where Hugh is happy\n    happy_permutations = total_permutations - unhappiness_permutations\n    \n    return happy_permutations\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    ans = 10 - 1 + 1\n    return ans\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_matches = 10 / (1 - (2/5 + 7/20))\n    points_from_wins = (2/5) * total_matches * 3\n    points_from_draws = (7/20) * total_matches * 1\n    total_points = points_from_wins + points_from_draws\n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's initial multiplication step is correct:\n    quotient = 9\n    remainder = 2\n    multiplied_value = quotient * 4\n    \n    # But he should have added the remainder to the result of the multiplication:\n    correct_answer = multiplied_value + remainder\n    \n    # Check if Johnny's answer is correct\n    is_correct = (multiplied_value + 4 == 22 and remainder == 2)\n    \n    # Circle out his error and write the correct working\n    if not is_correct:\n        error_in_solution = \"18+4\"\n        correct_working = f\"{multiplied_value} + {remainder} = {correct_answer}\"\n        return correct_working\n    else:\n        return \"Johnny's answer is correct.\"\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total = sum((-1)**((i//2) + 1) * i for i in range(2, 41, 2))\n    return total\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_chocolate_cost = 4 * 75  # cost in pence\n    total_pen_cost = 3 * 95        # cost in pence\n    total_cost = total_chocolate_cost + total_pen_cost\n    \n    note_value = 10 * 100  # value of £10 note in pence\n    change = note_value - total_cost\n    \n    return change / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_sum = 8 * 555\n    mean_diff = 296\n\n    # Let x be the mean of the last 5 numbers\n    # Mean of the first 3 numbers would be x - mean_diff\n    # Total sum of the first 3 numbers is 3 * (x - mean_diff)\n    # Total sum of the last 5 numbers is 5 * x\n    # And we know that 3*(x - mean_diff) + 5*x = total_sum\n\n    x = (total_sum + (3 * mean_diff)) / 8\n    return x\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    interval = 2\n    multiples_of_two = list(range(start, end + 1, interval))\n    count = len(multiples_of_two)\n    return count\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    # Number of people initially\n    initial_people = 5\n    # Initial number of days to build the bridge\n    initial_days = 15\n    # Desired number of days to build the bridge\n    target_days = 5\n    # Work done by initial group of people\n    initial_work = initial_people * initial_days\n\n    # Work remains the same, so we use inverse proportion to find the number of people for the target days\n    # work = people * days\n    # people = work / days\n    # Calculate the number of people required for the target days\n    required_people = initial_work / target_days\n\n    # Calculate how many more people are needed\n    more_people = required_people - initial_people\n\n    return int(more_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    balls_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = balls_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    total_children = 20\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rasidah and Chai Seng's money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - (3/5) * rasidah\n\n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - (6/7) * chai_seng\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, (1/2) * rasidah_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    # Find the amount of money Rasidah had at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    isaac_age_then = isaac_current_age - years_ago\n    mother_age_then = mother_current_age - years_ago\n\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n\n    ans = solve(equation)\n\n    return ans[years_ago]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age, _ = solve_congruence(*congruences)\n    \n    return grandma_age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_to_kg = 1 / 2.2\n    kg = pounds * pounds_to_kg\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def new_op(x, y):\n        return sum(range(x, y)) - y\n\n    return new_op(5, 10) - new_op(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # m/s\n    cat_speed = 3    # m/s\n    distance_behind = 500  # metres\n\n    relative_speed = elena_speed - cat_speed  # m/s\n\n    time_to_catch_up = distance_behind / relative_speed  # seconds\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 2, 3]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 21))\n    count = 0\n    for prime in primes:\n        if (prime - 6 in primes or prime - 6 <= 0) and (prime + 6 in primes or prime + 6 >= 20):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial\n\n    last_digit_even = 2  # There are 2 even choices for the last digit: 2 and 4\n    remaining_digits = 4  # Four places to fill with the remaining digits\n\n    # The number of arrangements of the remaining four digits\n    remaining_arrangements = factorial(remaining_digits)\n\n    # Total number of arrangements\n    total_arrangements = last_digit_even * remaining_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    mean_initial = 50\n    mean_final = 52\n    num_apples_initial = 8\n    num_apples_final = num_apples_initial + 1\n\n    total_weight_initial = mean_initial * num_apples_initial\n    total_weight_final = mean_final * num_apples_final\n\n    weight_extra_apple = total_weight_final - total_weight_initial\n\n    return weight_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Initialize the counter for the number of lights that are on\n    count = 0\n\n    # Iterate from 1 to 250 (inclusive) to check for each light\n    for i in range(1, 251):\n        # A light is toggled every divisor it has. Thus, lights that are perfect squares have odd number of divisors.\n        # Check if the number is a perfect square by checking if the square root is an integer\n        if (i ** 0.5).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    # Let x be the total number of pages\n    x = symbols('x')\n\n    # Original time taken to finish copying the document\n    original_time = x / 50\n\n    # New time taken to finish copying the document with increased speed\n    new_time = x / 70\n\n    # Equation based on the problem statement\n    equation = Eq(original_time - new_time, 2)\n\n    # Solving the equation to find the number of pages\n    pages = solve(equation, x)\n\n    return pages[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_year = 2013\n    target_date = datetime(start_year, 1, 28)  # January 28, 2013 is a Monday\n    one_day = timedelta(days=1)\n  \n    while True:\n        start_year += 1\n        new_date = datetime(start_year, 1, 28)\n        if new_date.weekday() == 0:  # Checking if the new date is a Monday (0 represents Monday)\n            break\n\n    return start_year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # We can limit the search to a reasonable range\n        dividend = 8 * divisor + 7  # The given formula for the equation\n        if dividend % divisor == 7:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Speed for jogging\n    jogging_speed = 6  # miles per hour\n    \n    # Speed for walking\n    walking_speed = 5  # miles per hour\n    \n    # Total exercise time for jogging before tired\n    jogging_time = 1  # from 6:30 am to 7:30 am is 1 hour\n    \n    # Total exercise time for walking\n    walking_time = 2  # from 7:30 am to 9:30 am is 2 hours\n\n    # Distance covered while jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Distance covered while walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance covered\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    money_left = initial_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900  # total meters of expressway\n    companies = 4  # number of construction companies\n    days = 5  # number of days to build with 4 companies\n\n    meters_per_company_per_day = total_expressway / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 0.8  # cost for up to 15 minutes\n    additional_cost = 0.05  # cost for each additional minute\n    total_cost = 1.4  # total cost of the call\n\n    if total_cost <= base_cost:\n        minutes = 15\n    else:\n        extra_cost = total_cost - base_cost\n        extra_minutes = extra_cost / additional_cost\n        minutes = 15 + extra_minutes\n\n    return int(minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_of_2_power_2017 = (2 ** 2017) % 10\n    last_digit_of_3_power_2017 = (3 ** 2017) % 10\n    answer = (last_digit_of_2_power_2017 * last_digit_of_3_power_2017) % 10\n    return answer\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    ans = (55 + 13) // 4\n    return ans\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Based on the pattern in the examples given:\n    # (a ◈ b) seems to mean (a * b) - (a + b)\n    def new_operation(a, b):\n        return (a * b) - (a + b)\n    \n    # Using the new operation to find 9 ◈ 20\n    ans = new_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara_number = symbols('sara_number')\n\n    equation = Eq((sara_number - 4) / 2 + 11, 37)\n\n    result = solve(equation, sara_number)\n\n    return result[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    # Find the next multiple of 5 after 56\n    if 56 % 5 == 0:\n        next_multiple = 56\n    else:\n        next_multiple = (56 // 5 + 1) * 5\n    \n    # Find the last multiple of 5 before 120\n    last_multiple = 120 // 5 * 5\n    \n    # Calculate the number of multiples of 5 in the range\n    count = (last_multiple - next_multiple) // 5 + 1\n    \n    return count\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 35 - (10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Calculate the difference in years between Gina being 50 and 35\n    years_difference = 50 - 35\n    \n    # Find the year when Gina was 35\n    year_gina_35 = 2005 - years_difference\n    \n    # Calculate James's age in the year when Gina was 35\n    james_age_when_gina_35 = (year_gina_35 - 1997) + 20\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_amount * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    total_people = (lucy_position - 1) + people_between + (eddie_position - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]\n    for num in range(1, 3*5*7*8):  # LCM of 3, 5, 7, 8 would be the upper bound\n        remainders = [num % 3, num % 5, num % 7, num % 8]\n        if sorted(remainders) == primes:\n            return num\n    return None\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # converting meters to centimeters\n    dress_length_cm = 5 * 100 + 8    # converting meters to centimeters\n\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm // 9\n    stripe_length_m = stripe_length_cm // 100  # converting back to meters\n    stripe_length_extra_cm = stripe_length_cm % 100  # centimeters left\n\n    return stripe_length_m, stripe_length_extra_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    left_handed_girls = max(0, girls - (total_pupils - right_handed))\n    right_handed_girls = girls - left_handed_girls\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for orchids (o), tulips (t) and roses (r)\n    o, t, r = symbols('o t r')\n    \n    # Equation 1: The sum of orchids, tulips, and roses equals 3616\n    eq1 = Eq(o + t + r, 3616)\n    \n    # Equation 2: The ratio of the number of orchids to the number of tulips is 3:5\n    eq2 = Eq(o / t, 3 / 5)\n    \n    # Equation 3: After selling the flowers, the number left is 2644\n    eq3 = Eq(o * (1 - 0.40) + t * (1 - 1/5) + r * (1 - 0.25), 2644)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (o, t, r))\n    \n    # Get the number of orchids\n    return solutions[o]\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    cost_of_books = 12 * books\n    cost_of_files = 9 * files\n    total_cost = 336\n    books_more_than_files = books - files - 14\n\n    equations = (Eq(cost_of_books + cost_of_files, total_cost),\n                 Eq(books, files + 14))\n\n    solutions = solve(equations, (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    # Number of animals is known (10)\n    # Total legs are known (34)\n    # Chickens have 2 legs and rabbits have 4 legs\n\n    total_animals = 10\n    total_legs = 34\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if (chickens * 2) + (rabbits * 4) == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Compute the ones digit of each number raised to the power of 2013\n    # The ones digit pattern repeats every 4 powers for numbers 1-9, except for 0, 1, 5, 6\n    \n    # ones_digit = number ** 2013 % 10 gives the ones digit of number raised to the 2013\n    ones_digits_sum = sum([number ** 2013 % 10 for number in range(1, 10)])\n    \n    # Get the ones digit of the final sum\n    ans = ones_digits_sum % 10\n    \n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Peter needs to take at least one of each color before he can be sure to have a pair of the same color.\n    # So, he takes one red, one blue, and one black. After that, the next sock will definitely match one of the previous ones.\n    num_socks = 1 + 1 + 1 + 1  # 3 different colors + 1 to guarantee a pair\n    return num_socks\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Amy's departure in Japan time (8pm on 2nd July)\n    departure_hour = 20\n    \n    # Amy's arrival in France time (1am on 3rd July)\n    arrival_hour = 1 \n\n    # Since we know that Japan is 7 hours ahead, we need to convert the arrival time to Japan time\n    # Adding 7 hours to the France arrival time\n    arrival_hour_japan = arrival_hour + 7\n\n    # Considering that the arrival is on the next day, we add 24 hours to the arrival time\n    arrival_hour_japan += 24\n\n    # Calculate the duration of the flight\n    duration = arrival_hour_japan - departure_hour\n    \n    return duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n\n    # Let x be the number of correct answers\n    # Each correct answer gives 4 marks and each wrong answer takes away 1 mark\n    # correct answers (x) + wrong answers (attempted - x) * -1 = total_score\n    # 4x - (attempted - x) = total_score\n    # 4x - attempted + x = total_score\n    # 5x = total_score + attempted\n    # x = (total_score + attempted) / 5\n\n    correct_answers = (total_score + attempted) // 5\n\n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Eugene's and Sid's initial amounts of coins\n    eugene, sid = symbols('eugene sid')\n    \n    # Equation representing that Eugene had 5 times as many coins as Sid initially\n    equation1 = Eq(eugene, 5 * sid)\n    \n    # Equation representing the total number of coins left after they used some\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene, sid))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # Define the tens and units place, excluding 0 at tens place\n    tens_place_choices = 2 # only 1 or 2 can be used in the tens place\n    units_place_choices = 3 # 0, 1, or 2 can be used in the units place\n    \n    # Use the multiplication rule (tens choices * units choices)\n    total_numbers = tens_place_choices * units_place_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # n is the first term of the arithmetic sequence.\n    # Since they are consecutive even numbers, their common difference (d) is 2.\n    # The five numbers are n, n+2, n+4, n+6, n+8.\n    # The sum S is given by S = n + (n+2) + (n+4) + (n+6) + (n+8).\n    # Simplifying, we get 5n + 20 = 200.\n    # Solving for n, we get n = (200 - 20) / 5.\n    \n    n = (200 - 20) // 5\n    return n\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Container A: initial amount of sugar is 0.10 * 50g\n    # After transfer: (0.10 * 50 - 0.10x + 0.20x) / (50 + x - x)\n    # Container B: initial amount of sugar is 0.20 * 30g\n    # After transfer: (0.20 * 30 - 0.20x + 0.10x) / (30 + x - x)\n\n    equation = Eq((0.10 * 50 - 0.10*x + 0.20*x) / 50, (0.20 * 30 - 0.20*x + 0.10*x) / 30)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    numerator = 100\n    partial_numerator = 1\n    denominator = 97\n    partial_denominator = 1\n    sum_terms = 0\n\n    while denominator >= 1:\n        sum_terms += (numerator / partial_denominator) * partial_numerator\n        partial_numerator *= (numerator - 1)\n        partial_denominator *= denominator\n        numerator -= 1\n        denominator -= 1\n\n    return sum_terms\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie cuts a piece of wood into 5 sections in 8 minutes\n    # To get 5 sections, Katie has to make 4 cuts\n    cuts_for_5_sections = 4\n    time_for_5_sections = 8\n\n    # Time per cut is the time for 5 sections divided by the number of cuts\n    time_per_cut = time_for_5_sections / cuts_for_5_sections\n\n    # To cut the wood 6 times, she needs to make 6 cuts\n    cuts_needed = 6\n\n    # Total time needed is the time per cut multiplied by the number of cuts needed\n    total_time = time_per_cut * cuts_needed\n\n    return int(total_time)\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    \n    votes_remaining = total_votes - (22 + 27 + 35)\n    half_plus_one = total_votes // 2 + 1\n    \n    additional_votes_required = max(0, half_plus_one - votes_for_peter)\n    \n    return additional_votes_required\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation representing total number of pupils\n    equation1 = Eq(boys + girls, 995)\n    # Equation representing difference between boys and girls\n    equation2 = Eq(boys - girls, 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    return max(31, 32)\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # total amount in pence\n    # Let n be the number of each type of coin in the money box\n    # 5n + 10n + 20n = total_amount\n    # 35n = total_amount\n    # n = total_amount / 35\n    n = total_amount // 35\n    \n    # total number of coins = number of 5p coins + number of 10p coins + number of 20p coins\n    # total number of coins = n + n + n = 3n.\n    total_coins = 3 * n\n    \n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # number of terms (days)\n    sum_n = 135  # sum of the arithmetic sequence\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # and the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We know that S_n (sum_n) is 135, n is 9, and d (common difference) is 3\n    # We need to find a_1 and a_n (the number of sweets eaten on the last day)\n\n    # From the sum formula: sum_n = n/2 * (2a_1 + (n - 1)d)\n    # Thus, 2a_1 = 2 * sum_n / n - (n - 1)d\n    d = 3\n    a_1 = (2 * sum_n / n - (n - 1) * d) / 2  # calculate a_1 (first term)\n\n    # Now we find a_n (last term)\n    # a_n = a_1 + (n - 1) * d\n    a_n = a_1 + (n - 1) * d  # calculate a_n\n\n    return int(a_n)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    total_money = 100\n    spent_on_book = total_money * 0.10\n    left_after_book = total_money - spent_on_book\n    spent_on_dvd = left_after_book * 0.20\n    money_left = left_after_book - spent_on_dvd\n\n    return money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # in dollars\n    gift_cost = 20       # in dollars\n\n    remaining_amount_dollars = initial_amount - gift_cost\n    remaining_amount_cents = remaining_amount_dollars * 100  # converting dollars to cents\n\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000  # initial amount\n    rate = 0.06  # interest rate\n    time = 5  # number of years\n\n    # compound interest formula\n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    pages = 185\n\n    # Pages 1-9 use 1 digit each\n    total_digits += min(pages, 9) * 1\n    \n    # Pages 10-99 use 2 digits each\n    if pages > 9:\n        total_digits += (min(pages, 99) - 9) * 2\n    \n    # Pages 100-185 use 3 digits each\n    if pages > 99:\n        total_digits += (pages - 99) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    months_in_year = 12\n\n    # Calculate the pay rise amount\n    pay_rise_amount = (pay_rise_percent / 100) * annual_salary\n    \n    # Calculate new annual salary after pay rise\n    new_annual_salary = annual_salary + pay_rise_amount\n    \n    # Calculate new monthly salary\n    new_monthly_salary = new_annual_salary / months_in_year\n    \n    return round(new_monthly_salary, 2)\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Loop through all possible months (1 to 12) and days (1 to 31)\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the given condition is satisfied\n            if (month * 31 + day * 12) == 376:\n                # Format the date as \"ddmm\"\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return (4.08 * 20 - 1.08 * 20) / 20\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = sum([119, 113, 109, 105, 101] - [115, 111, 107, 103, 99])\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = price_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    original_calculator_price = 6\n    sale_calculator_discount = 1/4\n    original_protractor_price = 0.30\n    sale_protractor_discount = 1/2\n    calculators_bought = 8\n    protractors_bought = 20\n    \n    sale_calculator_price = original_calculator_price * (1 - sale_calculator_discount)\n    sale_protractor_price = original_protractor_price * (1 - sale_protractor_discount)\n    \n    total_cost = (sale_calculator_price * calculators_bought) + (sale_protractor_price * protractors_bought)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n\n    flour_available = 25\n    milk_needed = (milk_ratio / flour_ratio) * flour_available\n\n    return milk_needed\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n    older_age_future = 62\n\n    # The difference in age between the two elephants will remain constant\n    age_difference = older_age_future - younger_age_now\n    \n    # The older elephant's age this year is the younger elephant's age plus the age difference\n    older_age_now = younger_age_now + age_difference\n\n    return older_age_now\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # We know that oxen * weeks = constant_work for grazing the entire field\n    # Given: 27 oxen * 6 weeks = 23 oxen * 9 weeks\n    # We need to find x such that 21 oxen * x weeks = 27 oxen * 6 weeks\n    \n    constant_work = 27 * 6\n    x = constant_work / 21  # weeks for 21 oxen to finish eating the grass\n    \n    return x\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n\n    # Simplify the denominator\n    # 2015^3 - 2014 * 2015^2 - 2014 * 2016\n    # = 2015^2 * (2015 - 2014) - 2014 * 2016\n    # = 2015^2 - 2014 * 2016\n    # Factor out 2015 from the first term and -2014 from the second term\n    # = 2015(2015 - 2014 * 2016/2015)\n    # = 2015(2015 - 2014 * 2016/2015)\n    # Since 2016/2015 is a little more than 1, we can write\n    # 2016/2015 as 1 + 1/2015 and simplify further\n    # = 2015(2015 - 2014 * (1 + 1/2015))\n    # = 2015(2015 - 2014 - 2014/2015)\n    # = 2015(1 - 2014/2015)\n    # = 2015 - 2014\n    # = 1\n    denominator = 2015 - 2014\n\n    # Now the fraction is simplified to 1/1\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2 / 3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000  # 1 tonne = 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride time is 1 hour (from 7:30 a.m. to 8:30 a.m.)\n    bike_speed = 10 # miles per hour\n    bike_distance = bike_speed * 1 # distance = speed * time\n\n    # Ellen's train ride time is 2 hours (from 8:30 a.m. to 10:30 a.m.)\n    train_speed = 50 # miles per hour\n    train_distance = train_speed * 2 # distance = speed * time\n\n    # Total distance traveled every Saturday\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # The number of ways to distribute n identical objects into r distinct boxes is given by the combinations\n    # with repetitions formula: (n+r-1) choose (r-1)\n    # Here, n = 5 balls, r = 3 boxes\n    from math import comb\n    n = 5\n    r = 3\n    ways = comb(n + r - 1, r - 1)\n    return ways\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    \n    equation = Eq(blue + red + green, 112)\n    solution = solve(equation, blue)\n\n    return solution[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {char: word.count(char) for char in set(word)}\n    \n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from the front and 2nd from the back, so there are (3 - 1) + (2 - 1) = 4 rows\n    rows = 3 + 2 - 1\n    # Lucas is 4th from the left and 3rd from the right, so there are (4 - 1) + (3 - 1) = 6 columns\n    columns = 4 + 3 - 1\n    # Total number of students is rows * columns\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Ema's and Keng Wee's amounts\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Define equations based on the problem statement\n    equation1 = Eq(ema, keng_wee - 360)\n    equation2 = Eq(ema - ema/4, keng_wee - (4/7)*keng_wee)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 216\n    while True:\n        number += 1\n        if sum(map(int, str(number))) == 9:\n            return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36\n    square = one_tenth_of_square * 10\n    return int(square)\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # If Lucas is the 3rd from the front and 2nd from the back,\n    # it means there are 3 people in front and 1 person behind him (2nd from back means 1 behind).\n    # Hence there are a total of 3 (in front) + 1 (himself) + 1 (behind) = 5 people in his column.\n\n    # Similarly, if Lucas is the 4th from the left and 3rd from the right,\n    # it means there are 4 people on his left and 2 on his right (3rd from the right means 2 on the right).\n    # Hence there are a total of 4 (on the left) + 1 (himself) + 2 (on the right) = 7 people in his row.\n\n    # The total number of students in the rectangular array is the number of people in his row times the number in his column.\n    num_students = 5 * 7\n    return num_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g = number of girls and b = number of boys originally\n    g, b = symbols('g b')\n\n    # Original ratio of girls to boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # After 2 girls transfer in, the new ratio\n    equation2 = Eq(g+2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students after the transfer\n    total_students = solutions[g] + 2 + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 0\n    for i in range(1, 11):\n        ans += sum(1/j for j in range(1, i + 1)) + sum(1/j for j in range(i, 0, -1))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    solved_values = solve(equation, (x, y))\n    \n    # Extracting the solution for the expression (2x - y)\n    expression_value = 2 * solved_values[x] - solved_values[y]\n\n    return expression_value\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + (1 * 78) + (1 * 105)\n    change_from_5_pounds_pence = (5 * 100) - total_cost_pence\n    return change_from_5_pounds_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Let's denote the number of sweets Trevor has as T and Siobhan as S.\n    # According to the problem, we have two equations:\n    # T = 5 * S        (Trevor has five times as many sweets as Siobhan)\n    # T = S + 24       (Siobhan has 24 sweets fewer than Trevor)\n\n    # We can solve these two equations for T and S using simple algebra:\n    # From the second equation: S = T - 24\n    # Substitute S in the first equation:\n    # T = 5 * (T - 24)\n\n    # Now we solve for T:\n    T = symbols('T')\n    equation = Eq(T, 5 * (T - 24))\n    solution = solve(equation, T)\n\n    # The solution will be in the form of a list, we take the first (and only) element\n    T = solution[0]\n\n    return T\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    difference = solutions[lim] - solutions[tan]\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_age_now = symbols('zehan_age_now')\n\n    age_in_12_years = Eq(zehan_age_now + 12, 3 * zehan_age_now)\n\n    solutions = solve(age_in_12_years, zehan_age_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total number of ways to choose 5 students from 15\n    total_ways = comb(15, 5)\n    \n    # Number of ways to choose 5 students when A, B, and C are not chosen (choose all 5 from the remaining 12)\n    no_ABC = comb(12, 5)\n\n    # Number of ways to choose 5 students when A and B are chosen (choose remaining 3 from 12)\n    A_and_B = comb(12, 3)\n\n    # Number of ways to choose 5 students when A and C are chosen (choose remaining 3 from 12)\n    A_and_C = comb(12, 3)\n\n    # Number of ways to choose 5 students when B and C are chosen (choose remaining 3 from 12)\n    B_and_C = comb(12, 3)\n    \n    # Number of ways to exclude when none or more than one of A, B, or C is chosen\n    exclude_ways = no_ABC + A_and_B + A_and_C + B_and_C\n    \n    # Total different ways to choose 5 students such that exactly one of A, B, or C is chosen\n    ans = total_ways - exclude_ways\n    \n    return ans\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    cost_per_ticket = total_cost / number_of_tickets\n    \n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    value = 0.36\n    percent = value * 100\n    return percent\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_lemon_juice, original_water = symbols('original_lemon_juice original_water')\n    \n    equation1 = Eq(original_lemon_juice / original_water, 2/3)\n    equation2 = Eq((original_lemon_juice + 80) / original_water, 6/5)\n    \n    solutions = solve((equation1, equation2), (original_lemon_juice, original_water))\n    \n    return solutions[original_lemon_juice]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n    total_sweets = shaila_sweets * total_ratio / shaila_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    # Spent 177 on dresses\n    # Spent 129 on earrings\n    # The remaining is 50% of what she gave to her mother, which is (1/3) / 2 = 1/6 of her total savings\n\n    # Equation: savings - (1/3 * savings + 177 + 129) = 1/6 * savings\n    equation = Eq(savings - (1/3 * savings + 177 + 129), 1/6 * savings)\n\n    # Solve the equation\n    result = solve(equation, savings)\n\n    return result[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3\n    delay_time = 9 / 60  # converting minutes to hours\n\n    # Since the car has to reach on time despite the 9-minute delay,\n    # the time saved per hour because of the speed increase must be equal to the delay.\n    time_saved_per_hour = 1 - usual_speed / increased_speed\n    total_time_saved = time_saved_per_hour * delay_time\n\n    # The distance can be found by multiplying the usual speed with the total time saved.\n    distance = usual_speed * total_time_saved\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    final_result = 80\n    number = ((final_result * 8) + 8) / 8 - 8\n    return number\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    initial_speed = symbols('initial_speed')\n    initial_time = symbols('initial_time')\n    # The distance does not change\n    distance = initial_speed * initial_time\n\n    # If speed increases by 25%, time decreases by 20 minutes\n    # new_time_1 = initial_time - 20\n    # new_speed_1 = initial_speed * 1.25 = initial_speed + 0.25 * initial_speed\n    equation1 = Eq(distance, (initial_speed + 0.25 * initial_speed) * (initial_time - 20))\n\n    # If speed decreases by 45 m/min, time increases by 75%\n    # new_time_2 = initial_time * 1.75\n    # new_speed_2 = initial_speed - 45\n    equation2 = Eq(distance, (initial_speed - 45) * (initial_time * 1.75))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (initial_speed, initial_time))\n    \n    # Calculate the distance using one of the equations\n    dist = solutions[initial_speed] * solutions[initial_time]\n    \n    return dist\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    \n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if 2 * red_ropes + 3 * blue_ropes == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    return 21 / 0.3\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_second_half = 6\n    total_second_half = average_second_half * months_second_half\n    months_in_year = 12\n    average_per_month = (total_first_half + total_second_half) / months_in_year\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):\n        if i % 7 == 0 and i % 9 == 2:\n            return i + 7*9\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22):\n        if i != 22 - i and {i, 22 - i} not in [{j, 22 - j} for j in range(1, i)]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n\n    return used_flour.simplify()\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            smallest_factor = i\n            greatest_factor = 41 // i + 1\n            A = smallest_factor * greatest_factor\n            break\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given height and height to width ratio\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    # Calculate width based on the ratio\n    width = (ratio_width / ratio_height) * height\n\n    # Calculate perimeter of the screen (P = 2 * (height + width))\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1  # Starting with 1 as multiplication identity\n    for i in range(2, 12):  # From 2 to 11, since the series ends at 1 1/11\n        result *= (1 + 1/i)\n\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 36)\n    equation2 = Eq(x + y, 98)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = (4 ** 100) % 10  # 4 raised to any power ends with the digit 4.\n    last_digit_7 = (7 ** 100) % 10  # 7 raised to power of 4 cycles through 1, 7, 9, 3 as last digits, so 7^100 ends with 1.\n    last_digit_9 = (9 ** 100) % 10  # 9 raised to power of 2 cycles through 1, 9 as last digits, so 9^100 ends with 1.\n    last_digit_11 = (11 ** 100) % 10  # 11 raised to any power ends with the digit 1.\n    \n    # Multiply the last digits of each expression.\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Ratio of files to rulers is constant because we assume a linear relationship\n    # Cost of files and rulers in the first scenario\n    cost_files_rulers_1 = 40\n    # Number of files and rulers in the first scenario\n    files_1 = 6\n    rulers_1 = 10\n\n    # Number of files and rulers in the second scenario we need to find cost for\n    files_2 = 9\n    rulers_2 = 15\n\n    # Find the total number of \"units\" for the first scenario\n    total_units_1 = files_1 + rulers_1\n    \n    # Find the cost per \"unit\" in the first scenario\n    cost_per_unit = cost_files_rulers_1 / total_units_1\n\n    # Total number of \"units\" for the second scenario\n    total_units_2 = files_2 + rulers_2\n\n    # Find the total cost for the second scenario\n    total_cost_2 = cost_per_unit * total_units_2\n\n    return total_cost_2\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    equation1 = Eq(john, 5/13 * jessie)\n    equation2 = Eq(john + 600, 1/2 * (jessie - 600))\n\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    return solutions[john] + solutions[jessie]\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    n = 1\n    count_1 = 0\n    count_2 = 0\n    while True:\n        str_n = str(n)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n        if count_1 == 15 and count_2 == 14:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    \n    # Meng answered 70% of questions, so find the total number answered\n    questions_answered = int(total_questions * correct_percentage)\n    # Number of unanswered questions\n    questions_unanswered = total_questions - questions_answered\n    \n    # Assume all answered questions were correct initially\n    total_marks_if_all_correct = questions_answered * 3\n    \n    # Let x be the number of questions actually answered correctly\n    # Then the wrong questions answered will be (questions_answered - x)\n    # Total marks will be 3x (for correct answers) - 1*(questions_answered - x) (for wrong answers)\n    # And this should equal to 78, which is the score he actually got\n    # So we get the equation 3x - (questions_answered - x) = 78\n    \n    # Rearrange the equation as x = (total marks + questions_answered) / 4\n    correct_answers = (78 + questions_answered) // 4\n\n    return correct_answers\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_in = datetime.strptime(\"10:30\", \"%H:%M\")\n    time_out = datetime.strptime(\"11:00\", \"%H:%M\")\n    baking_time = time_out - time_in\n    return baking_time.seconds // 60  # Convert seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # Equation based on the ratio of T-shirts to caps\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n    \n    # Equation for the total cost after selling 1/4 of T-shirts and 1/5 of caps\n    total_cost_equation = Eq((t_shirts / 4) * 3 + (caps / 5) * 5, 132)\n    \n    # Solving the system of equations\n    solutions = solve((ratio_equation, total_cost_equation), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = (3 * 12) + (5 * 11)  # total cost in pence\n    payment = 200  # £2 coin in pence\n    change = payment - total_cost  # change in pence\n\n    # Convert pence to pounds and pence\n    pounds = change // 100\n    pence = change % 100\n\n    return f\"£{pounds}.{pence:02d}\"\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    difference = 2\n    number_of_children = 7\n\n    oldest_age = youngest_age + (number_of_children - 1) * difference\n\n    return oldest_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n\n    total_spent = calendar_cost + ball_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used_for_muffins = 1/5\n    flour_used_for_cookies = 1/2\n    flour_left_in_kg = 360 / 1000  # converting grams to kilograms\n\n    flour_initial = flour_used_for_muffins + flour_used_for_cookies + flour_left_in_kg\n\n    return flour_initial\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n    \n    # Create equations based on the problem statement\n    # Equation 1: The cost of oranges and lemons together is ￡5 (500p)\n    equation1 = Eq(26 * oranges + 30 * lemons, 500)\n    \n    # Since we need the total number of fruits, we try all possible combinations of oranges and lemons\n    for o in range(0, 500 // 26 + 1):\n        for l in range(0, 500 // 30 + 1):\n            if 26 * o + 30 * l == 500:\n                return o + l\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    num_people = 4\n    # The number of ways to arrange n people around a circular table is (n-1)!\n    num_ways = factorial(num_people - 1)\n    return num_ways\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original = symbols('original')\n    equation = Eq(original + 24, 3 * original)\n    \n    solution = solve(equation, original)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    delta = lambda a, b: 3 * a + 2 * b\n    star = lambda a, b: 3 * a - 2 * b\n    \n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female visitors on the first day\n    # Let m be the number of male visitors on the first day\n    f, m = symbols('f m')\n\n    # From the problem statement, we have two equations:\n    # 1. The number of male visitors on the first day was 450 more than the number of female visitors\n    equation1 = Eq(m - f, 450)\n\n    # 2. On the second day, the total number of visitors was 1354,\n    # and the number of female visitors increased by 15(%)\n    # and the number of male visitors decreased by 18(%)\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # Calculate the total number of visitors on the first day\n    total_visitors_first_day = solutions[f] + solutions[m]\n\n    return int(total_visitors_first_day)\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Leo and Jason have\n    leo, jason = symbols('leo jason')\n\n    # Leo initially has $220 more than Jason\n    initial_condition = Eq(leo, jason + 220)\n    \n    # After receiving their salaries:\n    # Leo's new amount is his initial amount plus $180\n    leo_salary = Eq(leo + 180, jason + 1100)\n    \n    # Now, Jason has 2 times as much money as Leo\n    final_condition = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, leo_salary, final_condition), (leo, jason))\n\n    # Return the amount of money Jason has now\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, k):\n        return factorial(n) // factorial(n-k)\n\n    def combinations(n, k):\n        return permutations(n, k) // factorial(k)\n\n    total_books = 3 + 4 + 2 + 2\n    total_ways = factorial(total_books)\n    duplicate_ways = factorial(3) * factorial(4) * factorial(2) * factorial(2)\n\n    ans = total_ways // duplicate_ways\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0 or D == 0: # leading digit cannot be zero\n            continue\n        if (2 * (10 * A + B) == 10 * D + E) and (4 * (10 * A + B) == 10 * C + F) and (8 * (10 * A + B) == 100 * E + 10 * F + C):\n            return 10000 * E + 1000 * F + 100 * C + 10 * B + H\n    return None\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencils are identical and the cases are identical,\n    # we just need to find the partitions of 7 that consist of 3 parts or less,\n    # including zeros. \n    count = 0\n    for x1 in range(8):\n        for x2 in range(8):\n            for x3 in range(8):\n                if x1 + x2 + x3 == 7:\n                    count += 1\n    # Dividing by 6 to account for the identical cases (3! permutations for each partition)\n    return count // 6\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    total_robots = robots_per_day * days_in_week\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    last_positive_number = start_number % 9\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6  # 3 million pounds\n    number_of_friends = 5\n    \n    each_pay = total_cost / number_of_friends\n    \n    return each_pay\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15\n    x, y = symbols('x y')\n\n    # We have two equations based on the problem statement\n    equation1 = Eq(x + y, 50)  # The total number of children is 50\n    equation2 = Eq(10 * x + 15 * y, 555)  # The total amount paid is £555\n\n    # Solve the two equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We need to return the number of children who paid to have their name put on the shirt (y)\n    return solutions[y]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    time_before_speed_increase = 10  # in minutes, given in the question\n    speed_before_increase = 150  # in metres per minute, given in the question\n    speed_after_increase = speed_before_increase + 50  # David increases his speed by 50 metres per minute\n    \n    # Time spent walking after the speed increase\n    time_after_speed_increase = symbols('t')\n    \n    # Create an equation based on total distance\n    total_distance = 3700  # in metres, given in the question\n    equation = Eq(\n        (time_before_speed_increase * speed_before_increase)\n        + (time_after_speed_increase * speed_after_increase),\n        total_distance\n    )\n    \n    # Solve the equation for the time after the speed increase\n    time_after_speed_increase_solution = solve(equation, time_after_speed_increase)\n    \n    # Calculate the total time spent walking\n    total_time_spent_walking = time_before_speed_increase + time_after_speed_increase_solution[0]\n    \n    return total_time_spent_walking\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(0.85 * male_first_day + 1.15 * female_first_day, 1354)\n\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Convert Singapore take-off time to London time.\n    # Singapore take-off time: 05:00\n    # 7 hours behind is 22:00 (the previous day) in London time.\n    takeoff_time_london = 22\n\n    # London landing time in hours (24-hour format).\n    landing_time_london = 11\n\n    # Calculate the flight duration.\n    # Considering the time spent could've passed through midnight, if the landing time is smaller than take off, it means the plane landed the next day.\n    # 24 hours in a day + landing - takeoff gives us total flight duration.\n    if landing_time_london < takeoff_time_london:\n        flight_duration = 24 + landing_time_london - takeoff_time_london\n    else:\n        flight_duration = landing_time_london - takeoff_time_london\n\n    return flight_duration\n\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards is the sum of hearts, spades, and diamonds.\n\n    # Ways to arrange all cards: total factorial of all the cards\n    total_arrangements = factorial(total_cards)\n\n    # Since there are multiple cards of the same suit, we divide the total arrangements\n    # by the factorial of the count of each suit to correct for over-counting.\n    arrangements = total_arrangements // (factorial(4) * factorial(3) * factorial(7))\n    \n    return arrangements\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5 is 5 itself.\n    second_digit = 1  # The smallest odd natural number is 1.\n    third_digit = 9  # The largest single digit odd number is 9.\n    fourth_digit = 2  # The smallest even natural number is 2.\n    fifth_digit = 8  # The largest single digit that is a multiple of 2 is 8.\n    sixth_digit = 3  # The smallest odd natural number greater than 1 is 3.\n    \n    # Seventh digit must be divisible by both 2 and 5, which means it must end in 0.\n    seventh_digit = 0  \n    \n    # Combine the digits to form the final phone number.\n    ans = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    \n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    pages_per_day = 20\n    total_pages = 80\n    increase_per_day = 5\n    days = 1\n\n    while total_pages > pages_per_day:\n        total_pages -= pages_per_day\n        pages_per_day += increase_per_day\n        days += 1\n\n    total_pages += pages_per_day * days\n\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    almonds_weight = Fraction(4, 9)\n    cashew_nuts_weight = Fraction(1, 3)\n    more_almonds = almonds_weight - cashew_nuts_weight\n    return more_almonds\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Here is Johnny's mistake:\n    # He multiplied the quotient by the remainder, which is incorrect.\n    # The correct approach to find the dividend is:\n    # dividend = (quotient * divisor) + remainder\n\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Calculate the correct dividend\n    dividend = (quotient * divisor) + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(54, 1, -2):\n        total += sign * i\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 6), x ≡ 4 (mod 7), and x ≡ 1 (mod 8)\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    for s in range(1, 10):\n        for a in range(0, 10):\n            for m in range(0, 10):\n                for o in range(0, 10):\n                    for g in range(0, 10):\n                        if len(set([s, a, m, o, g])) == 5:\n                            sasmo = 10000 * s + 1010 * a + 100 * s + 10 * m + o\n                            ogams = 10000 * o + 1000 * g + 100 * a + 10 * m + s\n                            if sasmo * 4 == ogams:\n                                return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls.\n    b, g = symbols('b g')\n\n    # Each boy distributed 4 bags\n    boys_bags = 4 * b\n\n    # Each girl distributed 3 bags\n    girls_bags = 3 * g\n\n    # Equation representing the total number of students\n    equation1 = Eq(b + g, 40)\n\n    # Equation representing the difference in bags distributed between boys and girls\n    equation2 = Eq(boys_bags - girls_bags, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    count = (11-1) * 11 // 2\n    if count % 2 == 0:\n        median = count // 2 // 10 + 1\n    else:\n        median = (count + 1) // 2 // 10 + 1\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the part that has been cut from both ropes\n    x = symbols('x')\n\n    # Initial lengths of ropes A and B\n    length_a = 65\n    length_b = 29\n\n    # Equation representing the new length of rope A after cutting x meters\n    equation1 = Eq((length_a - x), 3 * (length_b - x))\n\n    # Solve the equation for x\n    part_cut = solve(equation1, x)\n\n    return part_cut[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_number_of_5s = total_rolls * probability_of_5\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator_original = 18\n    denominator_new = 6\n    \n    ans = (numerator / denominator_original) * denominator_new\n    return int(ans)\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given ratio equations\n    eq1 = Eq(A/B, 2/3)\n    eq2 = Eq(B/C, 6/5)\n\n    # Given average equation\n    eq3 = Eq((A + B + C)/3, 45)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = 5  # There are 5 odd digits: 1, 3, 5, 7, 9\n    # There are 5 choices for each digit place in a 3-digit number\n    # Using the multiplication principle\n    # First digit can't be 0, but since we only count odd digits, we don't count it anyways.\n    count = odd_digits * odd_digits * odd_digits\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # Based on the given pattern, it can be seen that the sum is simplified to k / (k + 1)\n    # where k is the number of terms in the sum. Since we're considering the sum until\n    # 1/(2011 * 2012), k will be 2011.\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on his own\n    x = symbols('x')\n    # Define the work done by one complete job (painting the house once) as 1\n    work_done = 1\n\n    # The energetic one's rate of working (house/day)\n    energetic_rate = work_done / 12\n    # The lazy one's rate of working (house/day), yet to be determined\n    lazy_rate = work_done / x\n\n    # The combined rate of working (house/day) when both decorators work together\n    combined_rate = energetic_rate + lazy_rate\n\n    # Equation based on the combined work: combined_rate * 8 days = 1 complete job\n    equation = Eq(combined_rate * 8, work_done)\n\n    # Solve the equation for x (days for the lazy one to paint the house on his own)\n    days_for_lazy = solve(equation, x)\n\n    return days_for_lazy[0]  # Return the number of days as an integer value\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += i**2\n    return remainder_sum % 3\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # If the original rectangle has length l and width w, then:\n    # Perimeter of original rectangle = 2 * (l + w)\n    # Perimeter of new rectangle after increasing length by 12cm = 2 * (l + 12 + w) = 38\n    # Therefore, we can set up the equation: 2 * (l + w) + 24 = 38\n    # Simplifying it gives us the equation for the perimeter of the original rectangle:\n    perimeter_original = 38 - 24\n\n    return perimeter_original\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    ratio_eq = Eq(jamie_anne / natasha, 5/3)\n    stamp_diff_eq = Eq(jamie_anne - natasha, 18)\n\n    solutions = solve((ratio_eq, stamp_diff_eq), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it's the first digit of a two-digit number\n        for b in range(10):  # b can be from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            aab = 100 * a + 10 * a + b\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    total_coins = 234\n\n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n\n    # Sana and Mina had 234 coins in total\n    equation2 = Eq(sana + mina, total_coins)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina gave away 12 coins\n    coins_left = solutions[mina] - 12\n\n    return coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    \n    # Sold 3/7 of the grapes on Monday\n    sold_on_monday = (3/7) * total_grapes\n    \n    # Calculate the remaining grapes after Monday\n    remaining_after_monday = total_grapes - sold_on_monday\n    \n    # Sold 3/8 of the remaining on Tuesday\n    sold_on_tuesday = (3/8) * remaining_after_monday\n    \n    # Calculate the remaining grapes after Tuesday\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    \n    # Each small bag contains 3/4 kg of grapes\n    bag_weight = 3/4\n    \n    # Calculate the number of small bags\n    num_bags = remaining_after_tuesday / bag_weight\n    \n    # Return the number of bags as an integer since you can't have a partial bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pounds_to_pence = pounds * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Time taken to cycle from the first lamp post to the eleventh lamp post\n    time_for_10_intervals = 50  # There are 10 intervals between 11 lamp posts\n    # Each interval time\n    time_per_interval = time_for_10_intervals / 10\n\n    # Time given to find out the number of lamp posts Uncle Sam will cycle past\n    given_time = 80\n    # Number of intervals Uncle Sam can cycle in the given time\n    intervals_in_given_time = given_time / time_per_interval\n\n    # The number of lamp posts is one more than the number of intervals\n    num_lamp_posts = intervals_in_given_time + 1\n\n    return int(num_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Since a flower is embroidered at each of the four corners, each corner is counted twice.\n    # Jill multiplies 6 times 4, but this includes the corners twice.\n    # We need to subtract the 4 corner flowers once to get the correct count.\n    \n    flowers_per_side = 6\n    sides = 4\n    corner_flowers = 4\n\n    # Calculate total flowers\n    total_flowers = (flowers_per_side * sides) - (corner_flowers)\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the total number of items as x\n    x = symbols('x')\n\n    # Fraction of items represented by apples, bananas, and lemons\n    apples = (2/3) * x\n    bananas = (1/9) * x\n    lemons = x - apples - bananas  # The rest of the items are lemons\n\n    # The equation obtained from the condition given in the problem\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for the total number of items\n    total_items_solution = solve(equation, x)\n\n    # Evaluate the number of lemons bought\n    num_lemons = lemons.subs(x, total_items_solution[0])\n\n    return num_lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the ones place is the sum of all the factors of 4,\n    # which are 1, 2, and 4. Thus, the ones digit is 1 + 2 + 4 = 7.\n    ones = 1 + 2 + 4\n\n    # The digit in the hundreds place has a value of 800,\n    # implying the hundreds digit is 8.\n    hundreds = 8\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place.\n    thousands = hundreds + 1\n\n    # The tens place is the difference between the hundreds place and the ones place.\n    tens = hundreds - ones\n\n    # Form the 5-digit number now that we have all the digits.\n    number = 40000 + thousands * 1000 + hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n\n    football_field_length = basketball_court_length + football_field_extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    discount_given_to_ana = 1 - (67.50 / original_price)\n    ans = discount_given_to_ana * 100\n    return ans\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    left = Fraction(3, 10)\n    right = Fraction(5, 16)\n\n    s = 1\n    while True:\n        r = (s * left).numerator + 1\n        while Fraction(r, s) <= left:\n            r += 1\n        if Fraction(r, s) < right:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_steering_wheels = symbols('total_steering_wheels')\n    \n    first_day = 300\n    second_day = 250\n    two_day_total = first_day + second_day\n    \n    equation = Eq(two_day_total, total_steering_wheels * 5/6)\n    \n    solutions = solve(equation, total_steering_wheels)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_seats = 40  # Maximum children the bus can carry\n    children_seats_occupied = 15\n    remaining_seats_for_children = total_seats - children_seats_occupied\n\n    adults_per_child = 24 / 40  # Equivalent adult seats per child seat\n    remaining_seats_for_adults = remaining_seats_for_children * adults_per_child\n\n    ans = int(remaining_seats_for_adults)\n    return ans\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # The prime factorization of 28 is 2^2 * 7\n    # To make a perfect square, each prime factor must be raised to an even power.\n    # Therefore, we must multiply 28 by 7 to have 2^2 * 7^2.\n    # The smallest number that can be multiplied by 28 to give a perfect square is 7.\n    \n    number = 28\n    minimal_multiplier = 1 \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            minimal_multiplier *= i\n    if number > 1:\n        minimal_multiplier *= number\n\n    # To get the smallest multiplier, we divide by gcd(28, minimal_multiplier)\n    ans = minimal_multiplier // gcd(28, minimal_multiplier)\n    return ans\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_to_cook_one_batch = 3  # minutes\n    pancakes_per_batch = 2\n    total_time_available = 12  # minutes\n\n    batches_in_total_time = total_time_available // time_to_cook_one_batch\n    total_pancakes = batches_in_total_time * pancakes_per_batch\n\n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    sizes = 3\n    min_students_same_size = (total_students // sizes) + 1\n    \n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle(a, b):\n        return (a + 2) / b\n\n    ans = triangle(8, triangle(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    # Mr Krishnan spent $740 on a DVD player\n    remaining_after_dvd = salary - 740\n\n    # He spent 3/4 of the remaining money on a television set\n    spent_on_tv = 3/4 * remaining_after_dvd\n    remaining_after_tv_and_dvd = remaining_after_dvd - spent_on_tv\n\n    # He had 1/5 of his salary left\n    equation = Eq(remaining_after_tv_and_dvd, 1/5 * salary)\n\n    # Solve for salary\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent Russell's current age\n    russell = symbols('russell')\n\n    # Create the equation based on the problem statement\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    # Solve the equation to find Russell's current age\n    solution = solve(equation, russell)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 120 * 0.4\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Assuming there are n people in the circle\n    # The person with number 1 is adjacent to number n (as they are in a circle),\n    # so number 6 will be opposite to the person who is (n/2 + 6)th in position.\n    # We know that number 19 is directly opposite to number 6,\n    # so we can set up the equation n/2 + 6 = 19\n    # Solving for n, we get n + 12 = 38 (after multiplying both sides by 2)\n    n = 38 - 12\n    return n\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pips_number = 1001 * A + 100 * B + 10 * C\n                buds_number = 1100 * A + 10 * B + C\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let x be the number of students in Class 6A initially\n    # Then 9/4 * x is the number of students in Class 6B initially\n    # The reshuffling implies that x - 3 + 18 = 9/4 * x - 18 + 3\n    # Simplify the equation to find x\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n\n    equation = Eq(x - 3 + 18, (9/4) * x - 18 + 3)\n\n    initial_students_6A = solve(equation, x)[0]\n\n    return initial_students_6A\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # If it takes 2 minutes to cut a rod into two pieces, \n    # it means each cut takes 2 minutes.\n    # To cut into 5 pieces, we need 4 cuts.\n    # Total time is number of cuts times the time per cut.\n\n    time_per_cut = 2\n    number_of_cuts_needed = 5 - 1\n    total_time = time_per_cut * number_of_cuts_needed\n\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n    \n    # Since each shelf can only contain one type of books, the number of shelves \n    # containing spelling books will be the total number of spelling books divided \n    # by the number of spelling books that can fit on a shelf.\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    \n    # The remaining shelves will be filled with math books.\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    \n    # Each shelf with math books will contain 4 math books.\n    math_books_per_shelf = 4\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n    \n    return int(total_math_books)\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n\n    chocolate_needed = (biscuits_available * chocolate_original) / biscuits_original\n    \n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    return 3 + 2 * 5\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    days_in_a_week = 7\n    total_earnings = average_earnings_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from the first to the fourth floor\n    time_to_fourth_floor = 6\n    \n    # Number of floors covered when walking from the first to the fourth floor\n    floors_covered = 4 - 1  # since he starts from the first floor, we subtract 1\n    \n    # Calculate the time taken per floor\n    time_per_floor = time_to_fourth_floor / floors_covered\n    \n    # Number of floors to cover from the first to the tenth floor\n    total_floors_to_tenth = 10 - 1  # since he starts from the first floor, we subtract 1\n    \n    # Calculate the total time to walk up to the tenth floor\n    time_to_tenth_floor = time_per_floor * total_floors_to_tenth\n    \n    return time_to_tenth_floor\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n    harry_flowers = luna_flowers - difference\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n    ans = pasta_choices * sauce_choices * topping_choices\n    return ans\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n    return solutions[0]  # Since we expect the number to be whole, we return the first solution\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    students_before = 16 - 8\n    students_after = 22 - 8\n    difference_in_students = students_after - students_before\n    new_students = difference_in_students * 2  # Every student has an opposite, so multiply by 2 to get total new students\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Speed and distance for the first part\n    speed1 = 7  # meters per second\n    distance1 = 280  # meters\n    \n    # Speed and distance for the second part\n    speed2 = 5  # meters per second\n    distance2 = 400  # meters\n    \n    # Speed and distance for the third part\n    distance3 = 800 - (distance1 + distance2)  # meters\n    speed3 = 8  # meters per second\n    \n    # Time spent on each part, divide distance by speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time spent on the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let a, b, c be the final number of marbles Anna, Betsy, and Charlene have\n    a, b, c = symbols('a b c')\n\n    # Given final ratio 2:5:7\n    ratio_eq = Eq(a/b, 2/5) & Eq(b/c, 5/7)\n\n    # Total marbles equation before any marbles are given\n    total_eq = Eq(a + b + c, 168)\n\n    # Transactions equation\n    # Charlene gave 15 marbles to Betsy: c-15 -> b+15\n    # Betsy gave 8 marbles to Anna: b+15-8 -> a+8\n    # The final marble counts will be (a+8), (b+7), (c-15)\n    transaction_a = a + 8\n    transaction_b = b + 7\n    transaction_c = c - 15\n\n    # Substituting back the final counts into the total equation\n    transaction_eq = Eq(transaction_a + transaction_b + transaction_c, 168)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_eq, transaction_eq), (a, b, c))\n\n    # Solve for initial marbles Betsy had\n    betsy_initial = solutions[b] - 7\n\n    return betsy_initial\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for lollipops (l) and gum drops (g)\n    l, g = symbols('l g')\n\n    # Equation 1: Ratio before adding candy\n    eq1 = Eq(l/g, 5/7)\n\n    # Equation 2: Ratio after adding candy\n    eq2 = Eq((l + 120)/(g + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (l, g))\n    \n    # Calculate total pieces of candy now\n    total_candy = solutions[l] + solutions[g] + 120 + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 269):  # Page numbers range from 1 to 268 inclusive\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    width = 136  # Convert meters to centimeters to work with whole numbers\n    height = 80  # Convert meters to centimeters to work with whole numbers\n    \n    # Find the greatest common divisor (gcd) of both dimensions. \n    # The side of the largest possible square will be the gcd of the two dimensions.\n    square_side = gcd(width, height)\n    \n    # The number of squares will be the area of the rectangle divided by the area of a square.\n    num_squares = (width * height) // (square_side ** 2)\n    \n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n    for hundreds in digits:\n        for tens in digits:\n            for ones in digits:\n                if ones % 2 != 0: # Check if the ones digit is odd\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_5 = 201 // 5\n    count_7 = 201 // 7\n    count_5_and_7 = 201 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    # Chris's purchase\n    equation1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's purchase\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 2000):\n        if (i - int(str(i)[:-1])) == 135:\n            return i\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    matches = Symbol('matches')\n    teams = Symbol('teams')\n    # each team plays with every other team twice\n    # Combinations of teams taken 2 at a time is total matches/2 (because each match is counted twice)\n    equation = Eq(matches, teams*(teams - 1))\n    \n    # Since there are 30 matches total during the season, we need to solve the equation for matches = 30/2\n    num_teams = solve(equation.subs(matches, 30/2), teams)\n    \n    # We get two solutions, one negative and one positive. We are interested in the positive one.\n    num_teams = [t for t in num_teams if t.is_real and t > 0]\n\n    return num_teams[0]\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    capacity = 5\n    total_trips = 0\n    \n    # Each round trip takes 2 trips: there and back, but the last trip won't require a return\n    while students > 0:\n        if students <= capacity:\n            # No need to return after the last trip\n            total_trips += 1\n            break\n        else:\n            # Carry students across and return empty\n            students -= (capacity - 1)  # one student needs to row back the boat\n            total_trips += 2\n    \n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Define the percentage of students choosing each subject\n    percent_grade_A = 0.8\n    percent_grade_B = 0.35\n    percent_neither = 0.10\n\n    # Percent of students choosing both is the intersection of A and B.\n    # This is calculated as the sum of student percentages for each subject, minus the total percentage (1),\n    # minus the percentage of students choosing neither.\n    percent_both = percent_grade_A + percent_grade_B - 1 + percent_neither\n\n    # Given that 75 students chose both subjects, calculate the total number of students\n    total_students = 75 / percent_both\n\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    ans = hundreds*100 + tens*10 + ones\n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(100) / (factorial(99) + factorial(98))\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nimport math\n\ndef solution():\n    # Define the function to find total factors of a number\n    def find_factors(n):\n        factors_count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                factors_count += 2 if i != n/i else 1\n        return factors_count\n\n    # All possible combinations of 9 numbers from the 13\n    possible_combinations = list(combinations(range(1, 14), 9))\n    \n    # Iterate through possible combinations\n    for combo in possible_combinations:\n        # Calculate factors for each number\n        factors_list = [find_factors(number) for number in combo]\n        # Looking for numbers that only have two students raising hands\n        # because they know the number of their factors (prime numbers have 2 factors)\n        prime_count = factors_list.count(2)\n        if prime_count != 2:\n            continue\n        \n        # Alice knows her number is odd, filter combos where Alice could have an even number\n        even_numbers = [num for num in combo if num % 2 == 0]\n        # May's number is less than Alice's by 2 and more than Mark's by 1\n        may_numbers = [num for num in combo if num+2 in combo and num-1 in combo]\n        \n        # Check if there's only one odd number for Alice and one valid number for May\n        if len(even_numbers) == 4 and len(may_numbers) == 1:\n            # Get the numbers that were not picked\n            unpicked_numbers = [num for num in range(1, 14) if num not in combo]\n            return math.prod(unpicked_numbers)\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 4, 6, 9]\n    all_numbers = [int(\"\".join(map(str, perm))) for perm in permutations(digits)]\n    average = sum(all_numbers) / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the original number of boys (and girls)\n    b = symbols('b')\n\n    # Set up the equation based on the problem statement\n    equation = Eq((b - 60)*2, b - 12)\n\n    # Solve the equation\n    solution = solve(equation, b)\n\n    # Return the number of boys at the gathering at first\n    return solution[0]\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Equations based on the information given\n    equation1 = Eq(frank - alex, alex - paul)  # The age difference condition\n    equation2 = Eq(frank + alex + paul, 99)  # The sum of their ages\n\n    # Solve the system of equations for their ages\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Since Frank is older than Alex who is older than Paul, we can choose the solution where Alex's age is in the middle\n    alex_age = solutions[0][1]\n    \n    return alex_age\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            if i + j == 15:\n                if j % 2 == 0:  # to ensure the number is even\n                    return 900 + i * 10 + j\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    # speed of van\n    speed_van = 80  # in km/h\n\n    # speed of car\n    speed_car = 120  # in km/h\n\n    # time after which car starts\n    start_difference = 3  # in hours\n\n    # distance covered by van during the 3 hours before car starts\n    distance_covered_by_van = speed_van * start_difference\n\n    # relative speed between car and van\n    relative_speed = speed_car - speed_van\n\n    # time taken by car to catch up with the van\n    time_to_catch_up = distance_covered_by_van / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # Compute combinations for each clothing type, hats are optional so +1 for not choosing any hats\n    hats_combinations = 4 + 1\n    shirts_combinations = 3\n    pants_combinations = 2\n    skirt_combinations = 1\n\n    # Using the multiplication rule to find total combinations\n    total_combinations = hats_combinations * shirts_combinations * pants_combinations * skirt_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate pages printed by each printer per minute\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n\n    # Calculate pages printed by both printers per minute\n    pages_per_minute_both = pages_per_minute_A + pages_per_minute_B\n    \n    # Calculate the total pages printed by both printers in 1/2 hour (30 minutes)\n    pages_in_half_hour = pages_per_minute_both * 30\n    \n    return int(pages_in_half_hour)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    \n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n\n    num_lemons = lemons.subs(total_items, solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert the repeating decimals to fractions\n    # 0.01 is 1/99 because 0.010101... is a geometric series with first term a=1/100 and common ratio r=1/100\n    n = 1 / 99\n    # The product of two identical repeating decimals is the square of the fraction\n    product = n * n\n    \n    # Find the decimal representation of the product\n    # 'numerator' and 'denominator' of the fraction after squaring\n    numerator = 1\n    denominator = 99 * 99\n    \n    # Count the number of \"repetend\" digits in the denominator's prime factorization\n    # Any factor of 2 and 5 can be divided out, leaving a number that dictates the cycle\n    # e.g., if it's all 2's and 5's then the repetend length is 1, otherwise it's related to the remainder of 10^n\n    while denominator % 2 == 0:\n        denominator //= 2\n    while denominator % 5 == 0:\n        denominator //= 5\n        \n    # If after factoring out 2s and 5s the denominator is 1, there is no repeating part\n    if denominator == 1:\n        return 0\n    \n    # The length of the repetend (the cycle length) is the smallest n such that 10^n ≡ 1 (mod denominator)\n    # This is equivalent to solving 10^n % denominator = 1\n    repetend_length = 1\n    while (10 ** repetend_length) % denominator != 1:\n        repetend_length += 1\n        \n    return repetend_length\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            \n            # Assuming mm/dd/yyyy format, create the date as a string\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            \n            # Count the occurrences of \"3\" in the date string\n            count += date_str.count('3')\n\n            # Handling February and days that are not possible for some months\n            if (month == 2 and day > 28) or \\\n               (month in [4, 6, 9, 11] and day > 30):\n                break\n\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # The cuboid is cut into 490 small cubes, implying side lengths of the small cubes are 1x1x1 (since 7*5*14 = 490).\n    # Each corner cuboid will have exactly three faces painted. There are 8 such corner cubes.\n    # So, the solution is the number of corner cubes.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == one_third_original + 3:\n                return original_number\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's label the number of puffs sold as d, c, and s respectively\n    d, c, s = symbols('d c s')\n    \n    # Given ratio of puffs sold\n    ratio_d = 3\n    ratio_c = 4\n    ratio_s = 2\n    \n    # Given prices of each puff\n    price_d = 5\n    price_c = 3\n    price_s = 4\n    \n    # Given the total amount collected\n    total_amount = 560\n    \n    # Setting up the ratio equations\n    eq1 = (d / ratio_d) - (c / ratio_c)\n    eq2 = (c / ratio_c) - (s / ratio_s)\n    \n    # Setting up the amount equation\n    eq3 = (d * price_d) + (c * price_c) + (s * price_s) - total_amount\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (d, c, s))\n    \n    # Finding amount collected from durian puffs\n    amount_collected_d = solutions[d] * price_d\n    \n    return amount_collected_d\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 0.06\n    rate_second_period = 0.08\n    time_first_period = 3\n    time_second_period = 2\n\n    final_amount_first_period = principal * (1 + rate_first_period) ** time_first_period\n    final_amount_second_period = final_amount_first_period * (1 + rate_second_period) ** time_second_period\n\n    return round(final_amount_second_period, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n    \n    equation1 = Eq(raisin_roll, 3 * donut)\n    equation2 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    \n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n    \n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    school_a = 24\n    school_b = 36\n    school_c = 42\n\n    # Finding the GCD of the first two numbers\n    gcd_ab = gcd(school_a, school_b)\n\n    # Using the GCD of the first two to find the GCD with the third\n    gcd_abc = gcd(gcd_ab, school_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define symbols for each person and level\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon')\n\n    # Construct the system of equations based on the given conditions\n    equations = [\n        A - C,            # A lives higher than C\n        D - A,            # D lives higher than A\n        B - Xavier,       # B lives lower than Xavier\n        Eq(D, 5 * Yvonne),  # D's unit is 5 times Yvonne's unit\n        Eq(Zachary + 2 - Xavier, Zachary - Waylon),  # Zachary's condition relation to Xavier and Waylon\n        Eq(Zachary, Yvonne + Xavier),  # Zachary's level is the sum of Yvonne's and Xavier's levels\n        Eq(A + B + C + D, 18),   # The sum of all levels is 18\n    ]\n\n    # Define the domain for each variable based on the total levels in the building\n    domain = {level: (1, 18) for level in (A, B, C, D, Zachary, Yvonne, Xavier, Waylon)}\n\n    # Solve the system of equations\n    solutions = solve(equations, (A, B, C, D, Zachary, Yvonne, Xavier, Waylon), domain=domain)\n\n    # Considering multiple solutions, we must filter to ensure all conditions are met:\n    for sol in solutions:\n        if all([\n            sol[A] > sol[C],\n            sol[D] > sol[A],\n            sol[B] < sol[Xavier],\n            sol[D] == 5 * sol[Yvonne],\n            sol[Zachary] + 2 - sol[Xavier] == sol[Zachary] - sol[Waylon],\n            sol[Zachary] == sol[Yvonne] + sol[Xavier],\n            sol[A] + sol[B] + sol[C] + sol[D] == 18\n        ]):\n            return sol[A]\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)  # Total cost\n    equation2 = Eq(notebook + pencil_case, 6)                 # Cost of notebook and pencil case\n    equation3 = Eq(pencil_case + eraser, 9)                   # Cost of pencil case and eraser\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        hundreds, tens, units = map(int, str(i))\n        if tens != 0 and units != 0 and hundreds % tens == 0 and hundreds % units == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Determine the number of terms in the sequence\n    total_numbers = sum(range(1, 13))\n    \n    # The sequence is symmetric, so the median is the average of the two central numbers when there's an even count\n    if total_numbers % 2 == 0:\n        # When it's even, the median is the average of the middle two 12's since 12 is the last number\n        median = 12\n    else:\n        # When it's odd, the median is simply the middle 12\n        median = 12\n\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n    digits = [4, 5, 8]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Given sum of first 9 terms (S9) and 27 terms (S27)\n    sum_9 = 99\n    sum_27 = 540\n    \n    # Formula for sum of arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    # S9 = 9/2 * (2a + 8d) = 99 and S27 = 27/2 * (2a + 26d) = 540\n    # We have a system of two equations\n    # 9/2 * (2a + 8d) = 99 .....(1)\n    # 27/2 * (2a + 26d) = 540 ...(2)\n    \n    # Let's solve for 'a' and 'd' using sympy\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')  # Arithmetic sequence first term 'a' and common difference 'd'\n    \n    # Create equations based on the given data\n    eq1 = Eq(9/2 * (2*a + 8*d), sum_9)\n    eq2 = Eq(27/2 * (2*a + 26*d), sum_27)\n    \n    # Solve the system of equations\n    sol = solve((eq1, eq2), (a, d))\n    \n    # With 'a' and 'd' found, calculate the sum of the first 16 terms\n    sum_16 = 16/2 * (2*sol[a] + (16-1)*sol[d])\n\n    return sum_16\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6/5\n    loafs_needed = 24\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for i in range(7, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import gcd\n\n    red_flashes_per_minute = 4\n    green_flashes_per_minute = 6\n    minutes_in_an_hour = 60\n\n    lcm = (red_flashes_per_minute * green_flashes_per_minute) // gcd(red_flashes_per_minute, green_flashes_per_minute)\n    flashes_in_an_hour = minutes_in_an_hour / lcm\n\n    return flashes_in_an_hour\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number\n    # According to the problem statement:\n    # 3x + 1 = 22\n    \n    # Perform inverse operations to solve for x:\n    # Subtract 1 from both sides\n    x = (22 - 1) / 3\n    \n    return int(x)\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_paintings = 40\n    landscapes = int(0.40 * total_paintings)\n    french_landscapes = 25\n    \n    french_still_lifes = french_paintings - french_landscapes\n    still_lifes = total_paintings - landscapes\n    non_french_still_lifes = still_lifes - french_still_lifes\n    \n    return non_french_still_lifes\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # For each group stage, 4 teams play a single round-robin tournament.\n    # In a single round-robin, each team plays against each other team once, so for 4 teams:\n    # each team plays 3 games -> 4 teams * 3 games / 2 pairs per game\n    group_games_per_group = 4 * 3 // 2\n\n    # There are 8 groups, so total games in the group stage:\n    group_games_total = group_games_per_group * 8\n\n    # In the knockout round, we have: top 16 -> top 8 -> top 4 -> top 2 -> winner and runner-up\n    # This means there are 15 games in the knockout round (as each game eliminates one team).\n    knockout_games_total = 16 - 1\n\n    # The total number of games is the sum of the group stage games and the knockout round games\n    total_games = group_games_total + knockout_games_total\n\n    return total_games\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink in milliliters\n    max_volume_per_glass = total_volume // 9  # Maximum volume in each glass (integer division)\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    amount_first = 100\n    concentration_first = 50 / 100\n\n    amount_second = 400\n    concentration_second = 80 / 100\n\n    total_amount = amount_first + amount_second\n    total_rice = (amount_first * concentration_first) + (amount_second * concentration_second)\n\n    concentration_new_mixture = (total_rice / total_amount) * 100\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    return int(str(total_sum)[-5:])\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method\n    # First, find how many horse-days the pile of hay can feed\n    total_horse_days = horses_initial * days_initial\n\n    # Then, find out how many days the pile of hay can feed the new number of horses\n    days_final = total_horse_days / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        moved_digit = int(str(i)[1:] + str(i)[0])\n        if moved_digit - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let 'x' be the number of years later\n    # Oliver's age after 'x' years will be 20 + x\n    # Lin's age after 'x' years will be 26 + x\n    # Sum of their ages after 'x' years will be (20 + x) + (26 + x)\n    # The equation for the sum of their ages to be 48 is:\n    # (20 + x) + (26 + x) = 48\n    # Simplifying the equation gives us:\n    # 2x + 46 = 48\n    # 2x = 48 - 46\n    # 2x = 2\n    # x = 1\n    # So, the sum of their ages will be 48 years after 1 year.\n    return 1\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_now = 8\n    mother_now = 4 * sandra_now\n    difference_2_years_ago = (mother_now - 2) - (sandra_now - 2)\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 1000):  \n        num = 35 * i  \n        if str(num).endswith('35') and sum(map(int, str(num))) == 35:\n            return num\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    \n    # There are 99 years between 1901 and 2000 inclusive\n    for year in range(1901, 2000 + 1):\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            # Leap year\n            total_days += 366\n        else:\n            # Not a leap year\n            total_days += 365\n\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Odd days, he deposits money\n            money += 10\n        else:  # Even days, he spends money\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    money_on_watch = 4 * y\n    money_on_handbag = 20\n    money_per_child = y - 5\n\n    # Equation: total_money = money_on_watch + money_on_handbag + 2 * money_per_child\n    equation = Eq(total_money, money_on_watch + money_on_handbag + 2 * money_per_child)\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # The first term and last term of this series\n    first_term = 1\n    last_term = 12\n    \n    # The number of terms in the series\n    num_terms = last_term\n\n    # Sum of an arithmetic series formula: S_n = n/2 * (a_1 + a_n)\n    total_strikes = num_terms / 2 * (first_term + last_term)\n\n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    coin_weight = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40    # total value of coins in pence\n    coin_value = 10     # value of one ten-pence coin in pence\n    \n    num_coins = total_value / coin_value\n    total_weight = num_coins * coin_weight\n    \n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let's denote the number of buttons Nina has originally as n, and James as j.\n    # Based on the problem, we have two equations:\n    #   n + j = 22, since together they have 22 buttons\n    #   n - 4 = j + 4, since after giving 4 buttons to James they have the same amount\n    \n    # We can solve these two equations to find the value of n.\n    # First substitute value of j from the first equation into the second: n - 4 = (22 - n) + 4\n    # Now, we solve for n:\n    #   n - 4 = 26 - n\n    #   2n = 30\n    #   n = 15\n    \n    # Nina originally has 15 buttons.\n    return 15\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs of mango, pear, and apple\n    mango, pear, apple = symbols('mango pear apple')\n\n    # First equation: mango + pear = £3.40\n    equation1 = Eq(mango + pear, 3.40)\n    # Second equation: mango + apple = £3.80\n    equation2 = Eq(mango + apple, 3.80)\n    # Third equation: 4*mango + 2*pear + apple = £13.20\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    correct_points = 5\n    wrong_points = 2\n\n    # Let the number of correct answers be x\n    # Then the number of wrong answers is total_questions - x\n\n    # We can set up the equation:\n    # correct_points * x - wrong_points * (total_questions - x) = total_score\n    total_score = 23\n    for x in range(total_questions + 1):  # +1 because range is exclusive\n        if correct_points * x - wrong_points * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    adults_to_children_ratio = 1 / 4\n    adults = total_people / (1 + adults_to_children_ratio)\n\n    return int(adults)\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 3 != 0 and num % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # m/s\n    angle_degrees = 37  # degrees\n    g = 9.81  # Acceleration due to gravity in m/s^2\n\n    # Converting angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Using the kinematic equation for vertical motion h = v^2 * sin^2(angle) / (2 * g)\n    # (initial vertical velocity squared) / (2 * acceleration due to gravity)\n    vertical_height = (initial_speed ** 2) * (math.sin(angle_radians) ** 2) / (2 * g)\n\n    # To find the distance along the ramp, use the relationship: distance = height / sin(angle)\n    distance_along_ramp = vertical_height / math.sin(angle_radians)\n\n    return vertical_height, distance_along_ramp\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_seat = (start_seat + total_candies - 1) % total_children\n\n    # If last_seat equals 0, the last candy goes to the 9th child as our seat numbers are 1-indexed.\n    return last_seat if last_seat != 0 else total_children \n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2*racket + 3 * ball, 904)\n    \n    solutions = solve((equation1, equation2), (racket, ball))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    sum_of_numbers = 9 + 12 + 17 + 18 + 21 + 23\n    return sum_of_numbers\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    num_players = 64\n    num_matches = 0\n\n    while num_players > 1:\n        num_matches += num_players // 4\n        num_players = num_players // 4\n\n    return num_matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Since Sheila wants to get 2 groups of 4 balls of the same color,\n    # she would need to consider the worst case scenario according\n    # to the pigeonhole principle, where she picks the balls in such a way\n    # that she doesn't complete a group of 4 balls of the same color until\n    # the very end.\n\n    # The worst case scenario for the first group would be that she picks\n    # all balls of the other two colors first before getting 4 balls of\n    # one color, so she would take all 4 orange balls and 2 yellow balls,\n    # a total of 4 + 2 = 6, and then 3 blue balls to make a total of 9 picks.\n\n    # After having one group of 4 blue balls, there is one blue ball left.\n    # The worst case for the second group is to pick the last blue ball first,\n    # and then pick the rest of the balls any which way until she has a group of four.\n\n    # Therefore, she needs to take out the one remaining blue ball and then\n    # three more balls, any of which will complete the second group.\n\n    # She takes 1 more from the remaining blue, orange, and yellow after first\n    # group of blue is completed, so in the worst case, she will take 3 more.\n\n    # In the end, the answer is 9 (first group) + 3 (second group) + 1 (to complete the\n    # second group) = 13\n\n    return 13\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    sum_numbers = sum(numbers)\n    return sum_numbers\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        str_num = str(i)\n        new_num = int(str_num[1:] + str_num[0])\n        if new_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n\n    flour_bag_weight = (total_weight - cheese_weight) / number_of_flour_bags\n\n    return flour_bag_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Exchange rate from GBP to RUB (as of the knowledge cutoff in 2023, approximate value)\n    # This needs to be updated to the current exchange rate\n    exchange_rate = 90  # 1 GBP = 90 RUB (example rate)\n    \n    # Amount Richard spends in GBP\n    amount_in_gbp = 14\n    \n    # Convert the GBP amount to RUB\n    amount_in_rub = amount_in_gbp * exchange_rate\n    \n    # The price of a CD in St Petersburg in RUB\n    # Assuming the CD costs the same price in St Petersburg as in England\n    price_of_cd_in_rub = 14 * exchange_rate\n    \n    # Number of CDs Richard could buy\n    num_cds = amount_in_rub // price_of_cd_in_rub\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    for age in [28, 39, 52, 84]:\n        # Conditions based on uncle's statement\n        if int((age - 3) ** 0.5) ** 2 == age - 3 and \\\n           isprime(age + 1) and \\\n           round((age + 12) ** (1/3)) ** 3 == age + 12:\n            return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # n-th term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # Sum of the first n terms of an arithmetic sequence: S_n = n/2 * (2*a_1 + (n - 1) * d)\n    # Where a_1 is the first term, d is the common difference, and S_n is the sum of the first n terms\n\n    # We have two equations based on the given sums:\n    # S_9 = 72 => 9/2 * (2*a_1 + 8*d) = 72\n    # S_23 = 736 => 23/2 * (2*a_1 + 22*d) = 736\n    \n    # Using these equations, let's solve for a_1 and d\n    from sympy import symbols, Eq, solve\n    \n    a_1, d = symbols('a_1 d')\n    \n    eq1 = Eq(9/2 * (2*a_1 + 8*d), 72)\n    eq2 = Eq(23/2 * (2*a_1 + 22*d), 736)\n\n    # Solve the equations to find a_1 and d\n    solutions = solve((eq1, eq2), (a_1, d))\n    \n    # Now we have a_1 and d, we can calculate the sum of the first 16 terms\n    a_1_val = solutions[a_1]\n    d_val = solutions[d]\n    \n    S_16 = 16/2 * (2*a_1_val + (16 - 1) * d_val)\n    \n    return S_16\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart needs to take out at least one chip of each color to ensure he has two of different colors.\n    # Since there are 3 colors, he can take out one chip of the first color (red or yellow or brown),\n    # one chip of the second color (one that he didn't pick first), and for the worst case, he needs to\n    # take all chips of one color before picking a different color (for instance, all reds before getting a yellow).\n    # Therefore, the worst case is taking all of one color plus one more from another color.\n    # This gives us:\n    # max(red, yellow, brown) + 1 = max(3, 4, 5) + 1 = 5 (all brown) + 1 (one red or one yellow)\n    \n    ans = max(3, 4, 5) + 1  \n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Let's denote Andrew's speed as A, Bernice's as B and Cassandra's as C\n    andrew_at_5 = 5  # Andrew is at level 5 (base reference)\n    bernice_at_5 = 3\n    \n    # We can tell Andrew is 5/3 times faster than Bernice because when he reached 5, Bernice has only reached 3.\n    ratio_a_to_b = andrew_at_5 / bernice_at_5\n    \n    # When Berenice reached 6, Cassandra was at level 10. So, Bernice is 6/10 times the speed of Cassandra.\n    bernice_at_6 = 6\n    cassandra_at_bernices_6 = 10\n    ratio_b_to_c = bernice_at_6 / cassandra_at_bernices_6\n    \n    # Now when Cassandra reaches level 19, we should find out where Andrew is.\n    cassandra_at_19 = 19\n    \n    # Since A/B = 5/3 and B/C = 6/10, then A/C = (A/B) * (B/C)\n    ratio_a_to_c = ratio_a_to_b * ratio_b_to_c\n    \n    # To find Andrew's level when Cassandra is at 19:\n    # A/C = andrews_level / cassandras_level\n    # andrews_level = (A/C) * cassandras_level\n    andrews_level = ratio_a_to_c * cassandra_at_19\n    \n    return int(andrews_level)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a + b\n    \n    # let y = x ⋁ 4\n    # We have 2 ⋁ y = 59\n    # By the definition of the operation: 2 * y + 2 + y = 59\n\n    # Now solve for y\n    y = symbols('y')\n    equation = Eq(2 * y + 2 + y, 59)\n    solution_y = solve(equation, y)\n    y_value = solution_y[0]\n\n    # Now we have y = x ⋁ 4.\n    # By the definition: x * 4 + x + 4 = y\n    x = symbols('x')\n    equation2 = Eq(x * 4 + x + 4, y_value)\n    solution_x = solve(equation2, x)\n    return solution_x[0]\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    num_repeats, remainder = divmod(43, len(pattern))\n    total_sum = sum(int(digit) for digit in pattern) * num_repeats + sum(int(pattern[i]) for i in range(remainder))\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # time taken to finish one quiz in minutes\n    total_quizzes = 4  # total number of quizzes\n    total_time_minutes = time_per_quiz * total_quizzes  # total time in minutes\n    total_time_hours = total_time_minutes / 60  # convert total time into hours\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres = kilometres * 100000  # Since 1 km = 100,000 cm\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert the average speeds to km/min\n    speed_shafur = 54 / 60\n    speed_samuel = 66 / 60\n\n    # They both drove for 40 minutes before Samuel went back\n    time_initial_drive = 40\n\n    # Calculate the distance Samuel must drive back to Town X\n    distance_back_to_X = time_initial_drive * speed_samuel\n\n    # The time Samuel drives back is the same as the extra time Shafur needs to finish the trip alone\n    time_extra_shafur = distance_back_to_X / speed_shafur\n\n    # Total time Shafur takes to drive from X to Y is the initial drive + extra time\n    total_time_shafur = time_initial_drive + time_extra_shafur\n\n    # Calculate the distance between Town X and Y using Shafur's total time and speed\n    distance_X_to_Y = total_time_shafur * speed_shafur\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n\n    years = 0\n    while sum(grandsons_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n\n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair, table = symbols('chair table')\n    equation1 = Eq(table, 3 * chair)\n    equation2 = Eq(4 * table + 9 * chair, 504)\n    \n    solutions = solve((equation1, equation2), (chair, table))\n    \n    return solutions[chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    # Total amount to make\n    total_amount = 40\n    # Types of coins\n    coin_five = 5\n    coin_ten = 10\n    \n    ways = 0\n\n    # Check all possible combinations of how many 10p coins can be used\n    for ten_p_count in range(0, total_amount // coin_ten + 1):\n        # Remaining amount after using 10p coins\n        remaining_amount = total_amount - (ten_p_count * coin_ten)\n        # If remaining amount is divisible by 5, then it is a valid way \n        if remaining_amount % coin_five == 0:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    \n    num_terms = 0\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    # We'll start from the smallest 3-digit number, which is 100, and check the product\n    # of its digits until we find a product that is a 3-digit number.\n    for num in range(100, 1000):\n        # Extract each digit from the number\n        digits = [int(d) for d in str(num)]\n        # Calculate the product of the digits\n        product = 1\n        for d in digits:\n            product *= d\n        # Check if the product is a three-digit number\n        if 100 <= product <= 999:\n            return num\n    # If no such number is found in the range (which shouldn't be the case), return None as the answer\n    return None\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity_per_vase = 9\n    vases_needed = (flowers + capacity_per_vase - 1) // capacity_per_vase\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Compute the values step by step according to the expression given\n    # The expression broken down is as follows:\n    # a = (7 / (-3.333...))\n    # b = ((2 ** 3) / (4 ** 2))\n    # c = 0.125 * (1.8 - (0.2 * 7))\n    # d = 0.1 / 0.142857 (which is 1/7 as a repeating decimal)\n    # e = (2 * 0.3)\n    \n    # Evaluate a:\n    a = 7 / (-10/3)\n    \n    # Evaluate b: (2^3 = 8 and 4^2 = 16)\n    b = 8 / 16\n    \n    # Evaluate c (0.125 = 1/8, 1.8 - 1.4 = 0.4)\n    c = (1/8) * 0.4\n    \n    # Evaluate d (0.1 / 0.142857... is 1/7)\n    d = 0.1 / (1/7)\n    \n    # Evaluate e\n    e = 2 * 0.3\n    \n    # Combine all parts using the expression given\n    ans = (a / (-(1/30))) + (b / c) - (d + e)\n    \n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # First number greater than or equal to 38 that is divisible by 3\n    last_multiple = 81 // 3 * 3  # Last number less than or equal to 81 that is divisible by 3\n\n    count = (last_multiple - first_multiple) // 3 + 1  # Counting the number of multiples by difference and step\n\n    return count\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    import math\n    ans = math.lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the increasing sequence from 3 to 10\n    sum_increasing = sum(range(3, 11))\n    # Calculate the sum of the decreasing sequence from 10 to 3\n    sum_decreasing = sum(range(10, 2, -1))\n    # The total sum is the sum of both sequences\n    total_sum = sum_increasing + sum_decreasing\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 0.75 * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_phones = symbols('initial_phones')\n\n    half_jan = initial_phones / 2\n    sold_jan = half_jan + 22\n\n    remaining_after_jan = initial_phones - sold_jan\n\n    half_feb = remaining_after_jan / 2\n    sold_feb = half_feb + 13\n\n    remaining_after_feb = remaining_after_jan - sold_feb\n\n    equation = Eq(remaining_after_feb, 78)\n\n    initial_value = solve(equation, initial_phones)\n\n    return initial_value[0]\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (base_number * 5) / 6\n    return result\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With 5 players, you need 4 games to eliminate 4 players and determine the winner.\n    return 4\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x.\n    # Then the number of pens will be x + 50.\n    # Therefore, x + (x + 50) = 438.\n    # Solving for x gives us the number of pencils.\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate the total expenses\n    jan_to_apr = 500 * 4  # January to April\n    may_to_jul = 300 * 3  # May to July\n    aug_to_sep = 400  # August to September\n    oct_to_dec = 300 * 3  # October to December\n    total = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Calculate the average per month\n    average = total / 12\n    \n    return average\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_packets = 4\n    amount_short = 15\n    amount_intended_per_packet = 70\n    \n    total_amount_intended = total_packets * amount_intended_per_packet\n    total_amount_had = total_amount_intended - amount_short\n    \n    return total_amount_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count(\"3\")\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # Therefore, the number of games played is equal to the number of players minus 1,\n    # since the last player standing is the winner without needing to play further.\n    num_players = 5\n    num_games = num_players - 1\n\n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Initial conditions after Charlano gave 15 marbles to Betsy and Betsy gave 8 marbles to Anna\n    final_ratio = Eq(anna / betsy, 2 / 5)\n    final_ratio_2 = Eq(betsy / charlene, 5 / 7)\n    total_marbles = Eq(anna + betsy + charlene, 168 + 15 - 8)  # 15 given to Betsy and 8 given to Anna\n\n    # Solve the system of equations\n    solutions = solve((final_ratio, final_ratio_2, total_marbles), (anna, betsy, charlene))\n\n    # Calculate the number of marbles Betsy had at first\n    betsy_begin = solutions[betsy] - 15\n\n    return betsy_begin\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and the 10th shelf from the back,\n    # then there are 7 shelves in front of it and 9 shelves behind it.\n    # The total number of shelves is 7 (in front of the book) + 1 (the book's shelf itself) + 9 (behind the book)\n    shelves = 7 + 1 + 9\n    return shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n    factors = factorint(2016)\n    ages = [2]*(factors[2]) + [3]*(factors[3]) + [7]\n    while len(ages) > 4:\n        ages.sort()\n        ages = [ages[0] * ages[1]] + ages[2:]\n    return sum(ages)\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris's position from the front and back gives the total number of rows\n    rows = 7 + 4 - 1  # Subtract 1 since Chris is counted twice\n\n    # Chris's position from the left and right gives the total number of columns\n    columns = 3 + 7 - 1  # Subtract 1 since Chris is counted twice\n\n    # Total number of students is the product of the number of rows and columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago the combined age of 2 dogs was 10 years.\n    combined_age_four_years_ago = 10\n\n    # Each year, each dog grows older by 1 year.\n    # So, after 4 years, the total combined age is:\n    combined_age_now = combined_age_four_years_ago + 2 * 4\n\n    # In 2 years, the combined age will be:\n    combined_age_in_two_years = combined_age_now + 2 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of coins\n    coins_5p, coins_10p, coins_20p = symbols('coins_5p coins_10p coins_20p')\n\n    # Define relationships between coins\n    relationship1 = Eq(coins_20p, 2 * coins_10p)\n    relationship2 = Eq(coins_5p, coins_10p / 2)\n\n    # Define the total amount equation in pence\n    total_amount_eq = Eq(5 * coins_5p + 10 * coins_10p + 20 * coins_20p, 1575)\n\n    # Solve the system of equations\n    solutions = solve((relationship1, relationship2, total_amount_eq), (coins_5p, coins_10p, coins_20p))\n\n    # Number of 20p coins\n    num_20p_coins = solutions[coins_20p]\n\n    return num_20p_coins\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n    \n    # each boy has as many sisters as brothers -> b - 1 = g\n    # each girl has half as many sisters as brothers -> g - 1 = (b/2)\n    equations = (Eq(b - 1, g), Eq(g - 1, b / 2))\n    \n    # solve the system of equations\n    solutions = solve(equations)\n    \n    # sum the number of boys and girls to get the total number of children\n    total_children = solutions[b] + solutions[g]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    x = symbols('x')\n    \n    # Since Andy drove for 90 minutes, each segment is 30 minutes or 0.5 hours\n    time_per_segment = 0.5  # in hours\n    \n    # Distance covered in the first segment\n    distance_first_segment = x * time_per_segment\n    # Distance covered in the second segment\n    distance_second_segment = (x - 20) * time_per_segment\n    # Distance covered in the third segment\n    distance_third_segment = (x + 10) * time_per_segment\n    \n    # Total distance is the sum of the three segments which is equal to 70 miles\n    total_distance = Eq(distance_first_segment + distance_second_segment + distance_third_segment, 70)\n    \n    # Solve the equation to find the value of x\n    solution = solve(total_distance, x)\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    fraction_eaten = 3/5\n    remaining = 60\n    original_mass = remaining / (1 - fraction_eaten)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # assuming the current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number //= 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    for max_apples in range(1, 27):\n        remaining_apples = 27 - max_apples\n        # If remaining apples can be distributed to 4 other children with different amounts\n        # we try to distribute to 4 incremental quantities starting from 1\n        # If sum becomes greater than remaining_apples \n        # then current max_apples value is the result we need\n        if 1 + 2 + 3 + 4 >= remaining_apples:\n            return max_apples\n    return None  # This should never happen, given the problem statement\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    total_paid = total_cost + tip\n    change = 50 - total_paid\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_in_a_minute = 60\n    return seconds_in_a_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_distance = 4\n    night_distance = 2\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        \n        if current_distance >= total_distance:\n            break\n        \n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To ensure a win, Jason must place Belinda in a position where no matter what she chooses,\n    # he will be able to pick the last but one marble, leaving the last for her.\n    # In this case, Jason needs to ensure that after his first pick,\n    # the number of marbles left must be a multiple of 4 (1 for Belinda, 3 for Jason, 4 total in a cycle).\n\n    total_marbles = 26\n\n    # Loop through the possible choices for Jason (1, 2, or 3 marbles)\n    for jason_pick in range(1, 4):\n        if (total_marbles - jason_pick) % 4 == 0:\n            return jason_pick\n\n    # If for some reason the loop did not return, (which should not happen here),\n    # there is no guaranteed winning first pick.\n    return None\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 0\n    while True:\n        n += 1\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    results = []\n    for comb in combinations(range(1, 25), 7):\n        if sum(comb) == 25:\n            results.append(comb)\n    return len(results), results\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # If the alcoholic is not at two of the bars, they must be at the third bar.\n    # The probability is 100%, because there are no other options.\n    # Represented as a fraction, this would be 1 or 100%\n    ans = 1\n    return ans \n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    whole_number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (whole_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the number of cows as x and the growth rate as r\n    # 120 cows * 12 weeks = r growth rate * (6 weeks + 6 weeks) = 2 * 6 * r\n    # 150 cows * 8 weeks = r growth rate * (4 weeks + 4 weeks) = 2 * 4 * r\n\n    # Using the proportionality principle of the advanced Newton's problem of cows and fields,\n    # we can establish these equations:\n    # 120 cows for 12 weeks is equivalent to 120 * 12 = 6 * r\n    # 150 cows for 8 weeks is equivalent to 150 * 8 = 8 * r\n    # After simplifying, we get:\n    # r = 120 * 2\n    # r = 150 * 1.5\n\n    # We equate these two to find r:\n    # 120 * 2 = 150 * 1.5\n    # Hence, r = 120 * 2\n\n    # Now we need to find the number of cows x that can be sustained for 6 weeks:\n    # x * 6 weeks = 6 weeks of growth\n    # x * 6 = 120 * 2\n\n    # So we solve for x:\n    r = 120 * 2\n    weeks_of_growth = 6\n    x = symbols('x')\n    equation = Eq(x * 6, weeks_of_growth * r)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n    return solution[x]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    days_spent = 3 * 7  # Three weeks\n    \n    end_date = start_date + timedelta(days=days_spent)\n    \n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer = 1  # Start with one volunteer\n    while True:\n        # To find the total trees, add the trees that would be left if\n        # each volunteer plants 4 trees to 4 times the number of volunteers.\n        total_trees_4 = 4 * volunteer + 5\n        \n        # If each volunteer plants 7 trees, it means total trees is a\n        # multiple of 7. Also, there should be less trees than volunteers\n        # times 7 so that one volunteer has nothing to plant.\n        if total_trees_4 % 7 == 0 and total_trees_4 <= 7 * volunteer:\n            total_trees_7 = total_trees_4\n            return (volunteer, total_trees_7)\n        \n        volunteer += 1  # Increase the number of volunteers and check again\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_students = None\n    for girl_layers in range(1, 55):  # Assuming at least one girl layer, and max 55 because there are 55 more boys\n        boy_layers = girl_layers + 1  # There is one more boy layer than girl layers\n        boys = (2 * boy_layers - 1) ** 2  # Total boys in square formation\n        girls = (2 * girl_layers - 1) ** 2  # Total girls in square formation\n        if boys - girls == 55:  # We are looking for 55 more boys than girls\n            total_students = boys + girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    stickers_total = 270\n    stickers_moved = 56\n    \n    # Let x be the initial number of stickers in bag A\n    # Then, (stickers_total - x) would be the initial number of stickers in bag B\n    # After moving, bag A has x - stickers_moved stickers\n    # After moving, bag B has (stickers_total - x) + stickers_moved stickers\n    \n    # The ratio of stickers in bag B to bag A after moving is 3:2,\n    # so (bag B after moving) / (bag A after moving) = 3/2.\n    # ((stickers_total - x) + stickers_moved) / (x - stickers_moved) = 3/2\n    \n    # Solve for x:\n    # 2*((stickers_total - x) + stickers_moved) = 3*(x - stickers_moved)\n    # 2*stickers_total - 2*x + 2*stickers_moved = 3*x - 3*stickers_moved\n    # 5*x = 2*stickers_total + 5*stickers_moved\n    x = (2 * stickers_total + 5 * stickers_moved) / 5\n    \n    return x\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # We need to find the missing number (x) in the proportion 10:x = 14:21\n    # We can use the cross-multiplication method to find x.\n    # 10 / x = 14 / 21 => 10 * 21 = x * 14\n    \n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    first_term = 5\n    difference = 6\n    # count the terms to find out the index of the next number\n    terms_count = 7 # first 7 numbers are given\n  \n    next_term = first_term + difference * terms_count # next term index would be 7 \n\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    total_children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-total_children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    percentage_value = 5 / 100\n    number = 180\n\n    result = percentage_value * number\n\n    return result\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    number = 2\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_10 = 25 + (10 - 1) * 3\n    diff = 3\n    term_1 = term_10 - (10 - 1) * diff\n    return term_1\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = (total_cakes + cakes_per_box - 1) // cakes_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_given_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_given_away // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of muffins Lovelle(L) and Makayla(M) had initially.\n    L, M = symbols('L M')\n\n    # Equation based on the total number of muffins they had at first.\n    equation1 = Eq(L + M, 3998)\n\n    # Equation based on the condition after selling the muffins.\n    equation2 = Eq(L - 462, M - (2/5) * M)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    equation = Eq((1/4 + 2/7) * original_amount, 225)\n\n    solutions = solve(equation, original_amount)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # The maximum number of different positive integers summing to 30 can be found\n    # by considering the series of minimum unique numbers starting from 1.\n    # 1 + 2 + 3 + ... + n <= 30, find the largest n such that this holds true.\n    # This is a problem of finding the max length of consecutive numbers summing to at most 30.\n    # While it feels like a combinatorics problem, it's actually more of a puzzle/problem-solving question.\n\n    n = 1\n    while (n * (n + 1)) // 2 <= 30:\n        n += 1\n    return n - 1  # Subtract 1 because we need to increment n before checking the condition.\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # The colors have 4, 8, 12, and 16 cards each.\n    # Maximum selection without getting 10 of any color is 9 from each color\n    # but since we only have 4 of one color, those are selected entirely.\n    # So we pick 4 + 9 (from second color) + 9 (from third color) + 9 (from fourth color) cards without having 10 of the same color.\n    # To ensure we have 10 of the same color, we need to add 1 more card.\n    ans = 4 + 9 + 9 + 9 + 1\n    return ans\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n\n    # The row starts and ends with a daffodil,\n    # so there are 7 gaps between 8 daffodils.\n    num_gaps = num_daffodils - 1\n\n    # Total length of the row\n    row_length = num_gaps * gap_between_daffodils + 2 * 0  # no additional space beyond the first and last daffodils\n\n    return row_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n\n    total_books = boxes * books_per_box\n\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # x2 must be greater than x1\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # x3 must be greater than x2 because the boxes are identical\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48  # in meters\n    speed = 8      # in meters per minute\n    # Aunt Lina's calculation\n    correct_time = distance / speed  # in minutes\n\n    # Check if Aunt Lina is correct\n    is_correct = (correct_time == 5)\n\n    # If she's incorrect, return the correct time.\n    return correct_time if not is_correct else is_correct\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    \n    # Total number of ways to choose 4 students out of 12 without any restriction:\n    total_combinations = comb(total_girls + total_boys, 4)\n    \n    # Total number of ways to choose 4 girls (0 boys):\n    all_girls_combinations = comb(total_girls, 4)\n    \n    # Total number of ways with at least 1 boy is the total combinations minus the all-girl combinations:\n    ans = total_combinations - all_girls_combinations\n    return ans\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    # The equation is: 1/4 * 16 = 1/2 * missing_number\n    # So, we can simply calculate the missing number by rearranging the equation:\n    # missing_number = (1/4 * 16) / (1/2)\n    missing_number = (1 / 4 * 16) / (1 / 2)\n    return int(missing_number)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    num_friends = 6\n\n    fruits_per_friend = (total_pear + total_strawberry) // num_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let's denote the initial amount of money Bud had as 'initial_money'.\n  \n    # According to the problem, Bud spent 1/4 of her money on a book.\n    # So, she had 3/4 of her initial money left.\n  \n    # Then, she spent 2/5 of her remaining money on a bag, which cost £60.\n    # Let's express the cost of the bag in terms of the initial money:\n    # (3/4 * 2/5) * initial_money = 60\n  \n    # Now, we'll calculate the initial money.\n    initial_money = 60 / (3/4 * 2/5)\n  \n    return initial_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    # Initialize variables\n    total_digits = 157\n    digits_used = 0\n    page_number = 1\n    \n    # Loop to count the digits used for each page number and sum them up\n    while digits_used < total_digits:\n        digits_in_page_number = len(str(page_number))\n        digits_used += digits_in_page_number\n        if digits_used <= total_digits:\n            page_number += 1\n    \n    # The loop will add one extra page that cannot be counted within the digit limits.\n    # So, we need to subtract it from the total page count.\n    return page_number - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Iterate over odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let Jane's amount be x, then Alex drinks x + 50% of x which is 1.5x\n    # Together they drink the whole bottle: x + 1.5x = 150\n    # Solving for x gives us the amount Jane drinks, and 1.5x will be the amount Alex drinks.\n    \n    # Equation: 2.5x = 150\n    # x = 150 / 2.5\n    jane_amount = total_juice / 2.5\n    alex_amount = 1.5 * jane_amount\n    return alex_amount\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # The total number of gaps between peach trees is one less than the number of peach trees\n    num_gaps = 41 - 1\n\n    # The total length of the road is the number of gaps multiplied by the distance between each tree\n    total_length = num_gaps * 3\n\n    # The number of gaps between lamp posts is the total length divided by the distance between lamp posts\n    # Since there's a lamp post at both ends, we add 1 to the result to get the total number of lamp posts\n    num_lamp_posts = (total_length // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    # Iterate over possible missing digits\n    for d1 in range(10):\n        for d2 in range(10):\n            # Construct the total price with the current digits\n            total_price = int(f\"{d1}679{d2}\")\n            # Check if the total price is divisible by the number of apparatus\n            if total_price % 72 == 0:\n                # If divisible, return the unit price of the apparatus\n                return total_price // 72\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    classA, classB, candies = symbols('classA classB candies')\n    \n    equation1 = Eq(4 * classA, candies - 20)\n    equation2 = Eq(6 * classB, candies + 16)\n    equation3 = Eq(classA, 2 * classB)\n    \n    solutions = solve((equation1, equation2, equation3), (classA, classB, candies))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40          # speed of the train in m/s\n    \n    # Time = Distance / Speed\n    time_to_pass = train_length / speed\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    savings = 24\n    spent_on_dvd = savings / 3\n    remaining_after_dvd = savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits_initial = 32\n    years = 3\n\n    for year in range(years):\n        # Each year rabbits are tripled\n        rabbits_initial *= 3\n        # Wolves eat half of the rabbits\n        rabbits_initial /= 2\n\n    return int(rabbits_initial)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1\n    time_for_first_mile = 1 / 60\n    time_for_second_mile = 1 / 30\n    total_time = time_for_first_mile + time_for_second_mile\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    number_of_washes = target_amount / amount_per_wash\n    return int(number_of_washes) + 1 if number_of_washes.is_integer() else int(number_of_washes) + 1\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    exponent = 4 - 1  # because on the first day she ate 2 candies already\n    candies_eaten_on_fourth_day = initial_candies ** exponent\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    equations = (Eq(290 % n, a),\n                 Eq(235 % n, a + 2),\n                 Eq(200 % n, a + 5))\n\n    solutions = solve(equations, (a, n))\n\n    # Filter solutions to get the natural number which is greater than 1\n    natural_number = next(sol[n] for sol in solutions if sol[n] > 1)\n    \n    return natural_number\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_days_worked = 6\n\n    total_earnings = average_daily_earnings * number_of_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the unknown smallest angle, then 2x is the largest angle\n    x = symbols('x')\n    \n    # Sum of angles in a triangle is 180 degrees\n    # We have a right angle (90 degrees), so the sum of the two unknown angles is 90 degrees\n    equation = Eq(x + 2*x, 90)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Find the largest angle, which is 2 times the smallest angle\n    largest_angle = 2 * solution[x]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(1, 10):\n                if I != P and I != S and P != S:\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # As the ages are consecutive natural numbers, they form an arithmetic sequence.\n    # The sum of the members' ages is given as an arithmetic series sum S = n/2 * (a1 + an)\n    # Where n is the number of terms, a1 is the first term, and an is the last term.\n    # Since the ages are consecutive, their difference (common difference d) is 1.\n    # The middle term (which is the median) of an odd number of consecutive numbers is also the average,\n    # so we will find the average age and that will be the age of the middle seated elderly member.\n\n    # Total number of elderly members\n    n = 9\n    # Total sum of ages\n    S = 765\n    # Average age\n    average_age = S / n\n    # The middle seated elderly member's age will be the average age\n    return average_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    six_day_sunshine_total = 3 * 6 # Average per day times number of days (Monday to Saturday)\n    sunday_sunshine = 10 # Sunday's sunshine hours\n    total_sunshine = six_day_sunshine_total + sunday_sunshine # Total sunshine for the whole week\n    total_days = 7 # Total number of days in the week\n    average_sunshine_per_day = total_sunshine / total_days # Average per day for the whole week\n    \n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n    \n    walk_time_to_school = 24  # minutes\n    distance_to_school = walking_speed * walk_time_to_school  # m\n\n    half_distance = distance_to_school / 2  # m\n    \n    walking_time_for_half_distance = half_distance / walking_speed  # minutes\n    running_time_for_half_distance = half_distance / running_speed  # minutes\n    \n    total_time = walking_time_for_half_distance + running_time_for_half_distance  # minutes\n    \n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # Since there are no trees in front of the school or her house, there are total_trees + 1 intervals\n    intervals = total_trees + 1\n    distance_between_each_tree = total_distance / intervals\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 0.5\n    girls_saw_movie = girls * 0.6\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return total_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    mother = savings / 3\n\n    # Kim spent $177 on dresses and $129 on a pair of earrings\n    spent = 177 + 129\n\n    # The amount of money left was 1/2 of what she gave her mother\n    remaining = savings - spent\n    equation = Eq(remaining, mother / 2)\n\n    # Solve for the original amount of savings\n    solutions = solve((equation), (savings))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    possible_values = []\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            possible_values.append(N)\n    return sum(possible_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    workers = 1\n    \n    for day in range(1, 10): # for the 9 days\n        total_skirts += workers * skirts_per_worker\n        workers += 1 # each day a new worker joins\n    \n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cows, chickens = symbols('cows chickens')\n    total_animals = Eq(cows + chickens, 8)\n    total_legs = Eq(4 * cows + 2 * chickens, 26)\n\n    solutions = solve((total_animals, total_legs), (cows, chickens))\n\n    return solutions[chickens]\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = 14 - 11  # Any two consecutive terms can be used\n\n    # Given the possible range, we subtract the smallest term from each number in the range\n    # and check if the result is divisible by the common difference.\n    possible_numbers = list(range(30, 61))  # 60 is inclusive\n    valid_numbers = [num for num in possible_numbers if (num - 11) % common_difference == 0]\n\n    return valid_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # We need to solve the equation x1 + x2 + x3 = 6\n    # where x1, x2, x3 are the number of apples in each basket and can be zero.\n    # Since the baskets are identical, we only need to count distinct combinations (a, b, c)\n    # where a <= b <= c and a + b + c = 6.\n    \n    count = 0\n    for a in range(7):  # a can be from 0 to 6\n        for b in range(a, 7):  # b starts from a and goes up to 6\n            c = 6 - a - b\n            if c >= b:  # ensures that c is greater than or equal to b to maintain order\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    leftover = total_length % cut_length\n\n    return leftover\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    current_number = 1\n    current_digit_count = 0\n    while True:\n        next_number_str = str(current_number)\n        next_number_digit_count = len(next_number_str)\n        if current_digit_count + next_number_digit_count >= 2023:\n            return int(next_number_str[2023 - current_digit_count - 1])\n        current_digit_count += next_number_digit_count\n        current_number += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the price of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas using the price of a banana from the solutions\n    cost_of_five_bananas = 5 * solutions[banana]\n\n    return cost_of_five_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for T\n    T = symbols('T')\n    \n    # First $50,000 is tax at 8%\n    tax_for_first_50k = 0.08 * 50000\n    \n    # Remaining income\n    remaining_income = 150000 - 50000\n    \n    # Tax for the remaining income\n    tax_for_remaining = remaining_income * (0.08 + T/100)\n    \n    # Total tax paid is $15,000\n    total_tax = tax_for_first_50k + tax_for_remaining\n    \n    # Setting up the equation\n    equation = Eq(total_tax, 15000)\n    \n    # Solving for T\n    solution = solve(equation, T)\n\n    # Returning the full answer\n    return float(solution[0])\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    total_score = 66\n    unattempted = 1\n\n    for correct in range(total_questions):\n        incorrect = total_questions - correct - unattempted\n        if correct * score_correct + incorrect * score_incorrect == total_score:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of candies Rachel has\n    # Let a represent the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount:\n    # r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces, Rachel has 3 times as many as Alice:\n    # (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations to find the values of r and a\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total amount of candy they had originally\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_in_january = 31\n    boys_in_club = 432\n\n    # Using the Pigeonhole Principle\n    most_births = -(-boys_in_club // days_in_january)  # Ceiling division\n\n    return most_births\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "from itertools import permutations\n\ndef solution():\n    digits = '023'\n    count = 0\n    for perm in permutations(digits, 3):\n        if perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    total_other_cars = 31 - 1\n    distance_between_cars = 5\n    total_distance_between_cars = distance_between_cars * 31\n\n    total_length = first_car_length + (other_cars_length * total_other_cars) + total_distance_between_cars\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Since the terms are sequences of the 7th, 8th, and 9th term, \n    # we can find the common difference first.\n    # The common difference (d) is the difference between two consecutive terms.\n    term_7th = 105\n    term_8th = 120\n    term_9th = 135\n\n    # Calculate the common difference (d)\n    d = term_8th - term_7th # which is also equal to term_9th - term_8th\n\n    # To find the 100th term (term_100th), we use the formula for any term of an arithmetic sequence:\n    # An = A1 + (n - 1) * d, where An is the nth term, A1 is the first term, and d is the common difference.\n\n    # Here, we need to calculate A1 (the first term).\n    # Since term_7th is the 7th term, we can express term_7th as:\n    # term_7th = A1 + (7 - 1) * d\n    # A1 = term_7th - (7 - 1) * d\n    A1 = term_7th - (7 - 1) * d \n\n    # Finally, calculate the 100th term using the A1 and d we found:\n    term_100th = A1 + (100 - 1) * d\n\n    return term_100th\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    \n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Permute all possible arrangements of the seven students\n    for perm in permutations('ABCDEFG'):\n        # Convert the permutation to a string for easier manipulation\n        arrangement = ''.join(perm)\n        # Find the indices of A, B, and C\n        a_index = arrangement.index('A')\n        b_index = arrangement.index('B')\n        c_index = arrangement.index('C')\n        # Validate A is in the middle of B and C\n        A_in_middle = (a_index > b_index and a_index < c_index) or (a_index < b_index and a_index > c_index)\n        # Validate D and E are standing next to each other by checking the absolute difference of their indices\n        DE_next_to_each_other = abs(arrangement.index('D') - arrangement.index('E')) == 1\n\n        if A_in_middle and DE_next_to_each_other:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuit_cost = 73  # pence\n    cake_cost = 113    # pence (£1.13 converted to pence)\n\n    biscuit_total = 7 * biscuit_cost\n    cake_total = 9 * cake_cost\n\n    total_cost_pence = biscuit_total + cake_total\n    total_cost_pounds = total_cost_pence / 100  # convert total cost back to pounds\n    \n    change = 20 - total_cost_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_to_peter = sam * 0.20\n\n    # Peter gave 25% of his stickers to Sam\n    peter_to_sam = (peter + sam_to_peter) * 0.25\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq((sam - sam_to_peter + peter_to_sam), (peter + sam_to_peter - peter_to_sam) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    num_tops = 4\n    num_bottoms = 5\n    combinations = num_tops * num_bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    total_time_before_lunch = 10 + 20 + 20  # 10 minutes playing, 20 minutes watching TV, 20 minutes lunch\n    home_arrival_time = lunch_end_time - timedelta(minutes=total_time_before_lunch)\n    \n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time_in_minutes = (12 * 60) + 40  # Convert 12.40pm to minutes\n    stay_duration_in_minutes = (2 * 60) + 40  # Convert 2 hours 40 minutes to minutes\n    leave_time_in_minutes = arrival_time_in_minutes + stay_duration_in_minutes\n\n    leave_hour = leave_time_in_minutes // 60\n    leave_minutes = leave_time_in_minutes % 60\n\n    # Since the time is in PM and may go over to the next day, we adjust hours greater than 24\n    if leave_hour >= 24:\n        leave_hour -= 24\n\n    # Format time to HH:MM format\n    leave_time = f'{leave_hour}:{str(leave_minutes).zfill(2)}'\n\n    return leave_time\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # For 3-digit numbers, we cannot use the digit '0' in the hundreds place.\n    # So we have 3 choices for the first place, 3 choices for the second place\n    # (excluding the one used in the first place), and 2 choices for the last place.\n    three_digit_combinations = permutations('2017', 3)\n    three_digit_count = sum(1 for x in three_digit_combinations if x[0] != '0')\n    \n    # For 4-digit numbers, all 4 digits can be used in any order as the number cannot start with '0'.\n    # Therefore we simply take the number of permutations of all 4 digits.\n    four_digit_combinations = permutations('2017', 4)\n    four_digit_count = len(list(four_digit_combinations))\n    \n    return three_digit_count + four_digit_count\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = (6 + 1/2) / (1/2)\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (first_term + last_term) * num_terms // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def count_nines_in_page_number(page_number):\n    return str(page_number).count('9')\n\ndef solution():\n    total_nines_count = 0\n    page_number = 1\n    while total_nines_count < 181:\n        total_nines_count += count_nines_in_page_number(page_number)\n        page_number += 1\n    return page_number - 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # He sold 10 more than half of his crystals to Yvonne\n    crystals_after_yvonne = initial_crystals - (initial_crystals / 2 + 10)\n\n    # Then, he mined 20 more crystals in Singapore\n    crystals_after_mining = crystals_after_yvonne + 20\n\n    # After that, he sold 14 crystals to Cherlyn\n    final_crystals = crystals_after_mining - 14\n\n    # He has 35 crystals in the end\n    equation = Eq(final_crystals, 35)\n\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Define the number of grey rabbits.\n    grey_rabbits = 14\n\n    # Since the pattern is 1 black, 2 white, 2 grey, \n    # and there are 14 grey rabbits, we can determine \n    # the number of patterns by dividing the number of \n    # grey rabbits by 2 (because there are 2 grey rabbits per pattern).\n    patterns = grey_rabbits // 2\n\n    # For each pattern, we have 1 black, 2 white, and 2 grey rabbits, making 5 rabbits in total.\n    # So we can calculate the minimum number of rabbits by multiplying the number of patterns by 5.\n    min_rabbits = patterns * 5\n\n    # However, if there's an incomplete pattern because the number of grey rabbits is not evenly divisible by 2,\n    # we need to account for this incomplete pattern.\n    # An incomplete pattern still starts with 1 black rabbit and 2 white rabbits before having any grey rabbits.\n    if grey_rabbits % 2 == 1:\n        min_rabbits += 3  # 1 additional black and 2 additional white rabbits for the incomplete pattern\n\n    return min_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    three_digit_numbers = [100*a + 10*b + c for a in numbers for b in numbers for c in numbers if a != 0 and len({a, b, c}) == 3]\n    smallest = min(three_digit_numbers)\n    largest = max(three_digit_numbers)\n    return largest - smallest\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in class A, B, and C\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    # First find the GCD of class A and B\n    gcd_ab = gcd(class_a, class_b)\n    \n    # Then find the GCD of the result with class C\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    even_digits = ['2', '4']\n    count = 0\n    for p in permutations(digits):\n        if p[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = 0\n    n = 180\n    for i in range(1, n+1):\n        if n % i == 0 and i % 9 == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    sol = solve(equation, u)\n\n    return sol[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f\"26{a}539\")\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n    \n    amount = principal * ((1 + rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200\n    single_price = 12\n    triple_price = 30\n    \n    max_triple_bundles = total_pence // triple_price\n    remaining_pence = total_pence % triple_price\n\n    max_singles_with_remainder = remaining_pence // single_price\n\n    total_sweets = (max_triple_bundles * 3) + max_singles_with_remainder\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for Kenny's and his brother's current age, and May's current age\n    kenny, brother, may = symbols('kenny brother may')\n\n    # Given that May is 7 years old\n    current_age_may = 7\n\n    # Kenny is 2 years older than his brother\n    eq1 = Eq(kenny, brother + 2)\n\n    # When May is 10, the sum of the ages of Kenny and his brother is 3 times May's age\n    # Kenny's age at that time will be kenny + (10 - current_age_may)\n    # Brother's age at that time will be brother + (10 - current_age_may)\n    # May's age at that time will be 10\n    eq2 = Eq((kenny + (10 - current_age_may)) + (brother + (10 - current_age_may)), 3 * 10)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (kenny, brother))\n\n    # Kenny's current age is the value of 'kenny' from the solutions\n    kenny_current_age = solutions[kenny]\n\n    # The difference in age between Kenny and May currently\n    age_difference = kenny_current_age - current_age_may\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since we want at least 1 ball in each box, we place 1 ball in each of the 7 boxes.\n    # This leaves us with 10 - 7 = 3 balls to distribute freely among the 7 boxes.\n    # The problem now reduces to finding the number of ways to distribute 3 identical balls\n    # among 7 different boxes, which is a combination problem with repetition.\n    # The formula for combinations with repetition is C(n + k - 1, k)\n    # where n is the number of boxes and k is the number of identical balls.\n    remaining_balls = 3\n    boxes = 7\n    ans = comb(remaining_balls + boxes - 1, remaining_balls)\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Total candies\n    total_candies = 10\n    # Felix wants to enforce a position where John is forced to take the last candy.\n    # To ensure victory, Felix needs to always leave a multiple of 3 for John to play.\n    # This way, regardless of whether John takes 1 or 2 candies, Felix can always leave a multiple of 3 after his turn.\n    \n    # Felix should go first and eat 1 candy.\n    # This will leave 9 candies, which is a multiple of 3.\n    # Now, no matter if John eats 1 or 2 candies, he will leave a non-multiple of 3 candies for Felix.\n    # Felix can then eat 2 or 1 candy accordingly to bring the total back to a multiple of 3.\n    # This strategy ensures that Felix will always eat the 10th candy and win the game.\n    \n    # Return 'First' as Felix should go first and the strategy described.\n    ans = ('First', 'Eat 1 candy, then always adjust to leave a multiple of 3 candies')\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # If he uses a 5-litre pail, 4 litres of water will overflow.\n    # Hence, he needs one pail less (without the 4 litres of overflow), \n    # the tank capacity would be 5 * (x - 1) + 1 (to account for the pail that causes overflow)\n\n    # If he uses a 3-litre pail, he needs another 4 more pails of water.\n    # Hence, the tank capacity would be 3 * (y + 4)\n    \n    # Since both expressions above describe the tank capacity, we can equate them:\n    # 5 * (x - 1) + 1 = 3 * (y + 4)\n\n    # Find the smallest x and y that satisfy this equation\n    x = 1\n    while True:\n        y = (5 * (x-1) + 1) // 3\n        if 5 * (x-1) + 1 == 3 * (y+4):\n            # Once found, the tank capacity can be calculated as either\n            # 5 * (x-1) + 1 or 3 * (y+4)\n            tank_capacity = 5 * (x-1) + 1\n            break\n        x += 1\n\n    return tank_capacity\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = (total_length + pipe_length - 1) // pipe_length\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        underline_count = 0\n        if i % 2 == 0:\n            underline_count += 1\n        if i % 3 == 0:\n            underline_count += 1\n        if i % 4 == 0:\n            underline_count -= 1  # Every multiple of 4 is also a multiple of 2.\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 28:\n        page += 1\n        count += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    brother_sum = sum(coins) / 2\n    \n    for coin in coins:\n        if sum(coins) - coin == brother_sum * 2:\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n    ans = girls_ways * boys_ways\n    return ans\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Since the average of some 4 of these 5 numbers is given, we can find out the total sum of these 4 numbers by multiplying the average by 4\n    average_of_4_numbers = [36, 38, 39, 45, 49]\n    sum_of_4_numbers = [a * 4 for a in average_of_4_numbers]\n\n    # Now, we can find out the sum of all the 5 numbers by summing the sums of the 4 numbers (since one number is common in all) and subtracting 4 times the common number (since it's counted one extra time every time it's included)\n    sum_of_5_numbers = sum(sum_of_4_numbers) - 4 * min(average_of_4_numbers)\n    \n    # Now, we need to find out the largest number. Since it will be equal to the total sum of the 5 numbers minus the sum of the smallest 4 numbers, we can find this by subtracting the sum of the smallest 4 numbers (which is the sum of the first 4 averages times 4) from the sum of all the 5 numbers.\n    largest_number = sum_of_5_numbers - sum(sum_of_4_numbers[:-1])\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15*60 + 55  # converting 15.55 to minutes past 0:00\n    second_bus_time = 16*60 + 35  # converting 16.35 to minutes past 0:00\n\n    time_missed_first_bus = first_bus_time + 4  # 4 minutes late for the first bus\n    \n    waiting_time_for_second_bus = second_bus_time - time_missed_first_bus  # time to wait for the second bus\n\n    return waiting_time_for_second_bus\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    total_students = 152\n    \n    # Let x be the number of boys, so number of girls is (152-x).\n    # After removing (1/11)*x of boys and 5 girls, we have:\n    # Boys: x - (1/11)*x = (10/11)*x\n    # Girls: (152 - x) - 5 = 147 - x\n    # We know that after removing students, the number of boys and girls is equal\n    # So, (10/11)*x = 147 - x\n    # Solving for x gives us the original number of boys\n    x = (11/10) * (147)\n    x /= 2 # because (10/11)*x + x = 147\n    return int(x)\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    # The number of spaces between the trees is one less than the number of trees\n    # first tree at the start of the road, last tree at the end of the road\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    \n    lorries_needed = (workers + lorry_capacity - 1) // lorry_capacity\n\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_next_four_days * 4) + pages_last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    # Since the positive three-digit whole number is less than 200,\n    # we will check numbers from 100 to 199.\n    for number in range(100, 200):\n        if number % 4 == 3 and number % 5 == 3 and number % 9 == 3:\n            return number\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    students_per_room_option1 = 4\n    remaining_students_option1 = 6\n    students_per_room_option2 = 5\n    \n    # Let x be the number of rooms\n    # For option1: total students = 4x + 6\n    # For option2: total students = 5(x-1)\n    \n    # Setting up the equation 4x + 6 = 5(x-1), solving for x\n    x = (6 + 5) // (5 - 4)   # 11 is the common difference between 4x and 5x\n    \n    # Total students can be calculated using either option1 or option2\n    total_students = students_per_room_option1 * x + remaining_students_option1\n    \n    return total_students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n    \n    # Convert sugar weight from kg to grams\n    sugar_weight_g = sugar_weight_kg * 1000\n    \n    # Add all the weights in grams\n    total_weight_g = sugar_weight_g + pasta_weight_g + spaghetti_weight_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    original_sum = 7 * 9  # Total sum for seven numbers with mean 9\n    new_sum = 6 * 10      # New sum for six numbers with mean 10\n    removed_number = original_sum - new_sum\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_leave = total_people * (1/3)\n    people_remaining = total_people - people_leave\n    return int(people_remaining)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    # Calculate least common multiple of the three intervals\n    least_common_interval = lcm(interval_a, interval_b, interval_c)\n\n    # Since trains arrive together at 10:00 am, calculate the next arrival time\n    hours = 10 + least_common_interval // 60\n    minutes = least_common_interval % 60\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    for correct in range(21):\n        incorrect = 20 - correct\n        if correct * 5 - incorrect * 2 == 79:\n            return correct\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    # Total students\n    total_students = 52\n\n    # Students in each sport\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Maximum number of students participating in at least one sport\n    max_one_sport = swimmers + cyclists + table_tennis_players - total_students\n\n    # Minimum number of students participating in all three sports\n    # = total number participating in at least one sport - number participating in exactly one or two sports\n    all_three_sports = max_one_sport - (swimmers - 1) - (cyclists - 1) - (table_tennis_players - 1)\n\n    return all_three_sports\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6*x), 48)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    common_factor = 3999 * 2014\n    val = (common_factor * 1.2014 + common_factor * 3.999) / 12.0012\n    return val\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_taken = 30  # time taken to pass the tree in seconds\n    length_of_train = 360  # length of the train in meters\n\n    # Speed = Distance / Time\n    speed_of_train = length_of_train / time_taken  # speed of train in meters per second\n\n    # convert from m/s to km/h by multiplying with 3.6 (1m/s = 3.6 km/h)\n    speed_of_train_km_h = speed_of_train * 3.6\n\n    return speed_of_train_km_h\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    effective_distance = day_distance + night_distance\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n    \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Add one less than the number needed for each color guaranteed, then add one more to ensure the fourth color.\n    # In this case, we do this for the three colors with the least marbles, because picking all from them does not guarantee a fourth color.\n    return (9 - 1) + (8 - 1) + (3 - 1) + 1\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie has the choice to pick 1 restaurant out of each type\n    chinese_restaurants = 8    # Possible choices of Chinese restaurants\n    mexican_restaurants = 6    # Possible choices of Mexican restaurants\n    fastfood_restaurants = 4   # Possible choices of fast food restaurants\n\n    # By the law of addition, since these choices are mutually exclusive,\n    # Eddie's total different choices is the sum of the choices for each type of restaurant\n    total_choices = chinese_restaurants + mexican_restaurants + fastfood_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_percentage = 20\n    books_spending = pocket_money * (books_percentage / 100)\n    savings_less_food = 6\n\n    # Let's denote the money spent on transport as 't'\n    # Then food spending would be 3 * t\n    # Savings would be 3 * t - 6\n    # Total spending = books_spending + 3 * t + t \n    # Total spending + savings = pocket_money\n    # books_spending + 4 * t + (3 * t - 6) = pocket_money\n    # 7 * t - 6 = pocket_money - books_spending\n    t = (pocket_money - books_spending + 6) / 7\n    \n    savings = 3 * t - savings_less_food\n    savings_percentage = (savings / pocket_money) * 100\n\n    return savings_percentage\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n\n    return possible_ages[-1]  # Assuming we want the current age, which would be the last element\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Since the numbering starts from 2 and goes on evenly with a step of 2,\n    # we recognize this as an arithmetic progression with a common difference of 2.\n    # We want to find the number of terms (people) for which the person with number 10\n    # is directly opposite to the person with number 24 in a circle. Being directly\n    # opposite means they are halfway around the circle from each other.\n    #\n    # Person with number 10 is the 5th person (since 10 = 2 + (5-1)*2)\n    # Person with number 24 is the 12th person (since 24 = 2 + (12-1)*2)\n    #\n    # The number of people 'n' in the game must be such that 12 is halfway around\n    # the circle from 5, which means the difference between the two positions\n    # needs to be n / 2. So, if x is the position of person with number 24,\n    # then x - 5 = n / 2.\n\n    # Let's find the position count from number 2 to number 24\n    pos_24 = (24 - 2) / 2 + 1  # this is the 12th position\n\n    # Let's find the position count from number 2 to number 10\n    pos_10 = (10 - 2) / 2 + 1  # this is the 5th position\n\n    # The difference in position should be half the number of people in the game\n    half_people = pos_24 - pos_10\n\n    # Total number of people is twice the half_people\n    total_people = half_people * 2\n\n    return int(total_people)\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    from itertools import permutations\n\n    # First we generate all possible permutations of the digits with length between 2 and 4\n    digits = '123456'\n    count = 0\n    for length in range(2, 5):  # For numbers of length 2, 3 and 4\n        for number_tuple in permutations(digits, length):\n            number = int(''.join(number_tuple))\n            # Check if the number is in the range 3267 to 5120\n            if 3267 <= number <= 5120:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    two_digit_factors = [i for i in factors_of_75 if 10 <= i < 100]\n    for number in two_digit_factors:\n        if number % 6 == 3:\n            return number\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # original equation (which was seen wrongly): minuend - 41 = 50\n    # correcting the subtrahend: minuend - 14\n    # Let's find the minuend\n    minuend = 50 + 41\n\n    # Now let's calculate the correct difference\n    correct_difference = minuend - 14\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3*(2*x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum(40 - i if i % 2 == 0 else -(40 - i) for i in range(0, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n    \n    total_apples_eaten = justin_apples + (sisters_apples_each * number_of_sisters)\n    total_apples_before = total_apples_eaten + apples_left\n    \n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    years = 4\n\n    rate = (amount / principal) ** (1 / years) - 1\n    return rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let the original number of rows (and columns) in the square be n\n    # After 31 soldiers joined, the square array became (n+1) x (n+1)\n    # Therefore, the equation to solve is:\n    # (n + 1)^2 = n^2 + 31\n\n    # We can rewrite the equation as:\n    # n^2 + 2n + 1 = n^2 + 31\n    # simplifying gives us:\n    # 2n + 1 = 31\n    # 2n = 30\n    # n = 15\n\n    # The total number of soldiers in the array now is (n+1)^2:\n    ans = (15 + 1) ** 2\n    return ans\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    # Since 3/x of 56 is 21, we can set up the equation (3/x)*56 = 21\n    # To find x, we solve the equation for x.\n\n    # Rearrange the equation: 3 * 56 = 21 * x\n    # Thus, x = (3 * 56) / 21\n    x = (3 * 56) / 21\n\n    return x\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n    february_savings = total_savings - january_savings - march_savings\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((original_value - new_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes required to paint one picture\n    total_time = 80  # one hour and twenty minutes in total\n\n    number_of_pictures = total_time / time_for_one_picture\n\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n\n    total_seconds = seconds_per_minute * minutes\n\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total number of apples.\n    total_apples = 30\n    # Number of children excluding Ann.\n    children = 5\n    # As each child should get at least one apple, we subtract this amount from the total.\n    apples_after_minimum_distribution = total_apples - children\n    # What remains is the largest number of apples Ann can get.\n    ans = apples_after_minimum_distribution\n    return ans\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(\"1356789\"):\n        first_num = int(\"\".join(perm[:3]))\n        second_num = int(\"\".join(perm[3:5]))  # second number uses two digits\n        third_num = int(\"\".join(perm[5:]))  # third number uses two digits\n\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    highest_common_factor = 75  # This is 3^1 * 5^2\n    # M has 12 factors, implying its prime factorization will have the form 3^a * 5^b\n    # The number of factors for a number is (a+1)(b+1)\n    # So for 12 factors, some possibilities for (a+1)(b+1) are (1+1)(11+1) = 2 * 12,\n    # (2+1)(5+1) = 3 * 6, (3+1)(2+1) = 4 * 3. But since M must include the factors of \n    # the highest_common_factor, we need to start with (3^1 * 5^2),\n    # hence we subtract the powers (a-1)(b-1) = 12 / 2 = 6\n\n    # For M\n    M_factors = [6, 3, 2]  # (2+1)(1+1) = 6, (1+1)(2+1) = 6; starting powers minus powers of highest_common_factor\n    M_values = [3**((i+1) + 1) * 5**((j+1) + 2) for i, j in enumerate(M_factors) if i < j]\n    \n    # For N has 10 factors, which implies its prime factorization will have the form 3^c * 5^d\n    # So for 10 factors, possibilities for (c+1)(d+1) are (1+1)(9+1) = 2 * 10,\n    # (4+1)(1+1) = 5 * 2. But since N must include the factors of the\n    # highest_common_factor 75, we need to start with (3^1 * 5^2),\n    # hence we subtract the powers (c-1)(d-1) = 10 / 2 = 5\n\n    # For N\n    N_factors = [5, 1]  # (1+1)(4+1) = 10; starting powers minus powers of highest_common_factor\n    N_values = [3**((i+1) + 1) * 5**((j+1) + 2) for i, j in enumerate(N_factors) if i < j]\n    \n    # Now, we have found one suitable value for M and one for N,\n    # we just need to sum them up to get the final result.    \n    return min(M_values) + min(N_values)\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # combinations with blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # combinations with dresses\n    dresses_combinations = dresses * (shoes + heels)\n\n    # total combinations\n    total_combinations = blouse_pants_combinations + dresses_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n    \n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    difference_mass_g = abs(soil_mass_g - sand_mass_g)\n    \n    return difference_mass_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons James originally has. \n    # Hence, Nina originally has 22 - x buttons.\n    # After Nina gives 4 buttons to James, they both have the same number of buttons.\n    # So, James would have x + 4 buttons, and Nina would have (22 - x) - 4 buttons.\n    # We set these two expressions equal to each other to find the original number of buttons.\n    for x in range(1, 22):\n        if x + 4 == (22 - x) - 4:\n            nina_original = 22 - x\n            return nina_original\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1 / i for j in range(1, 101) for i in range(1, j + 1))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 29\n    \n    # Let the number of correct answers be x\n    # Then number of incorrect answers will be total_questions - x\n    # We can write the equation:\n    # correct_points*x + incorrect_points*(total_questions - x) = total_score\n    \n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    digit_pattern = [1, 2, 3, 4, 5]\n    pattern_length = len(digit_pattern)\n    full_patterns = 52 // pattern_length\n    remaining_digits = 52 % pattern_length\n\n    sum_full_patterns = sum(digit_pattern) * full_patterns\n    sum_remaining_digits = sum(digit_pattern[:remaining_digits])\n\n    total_sum = sum_full_patterns + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper / paper_needed_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_distance = 320\n    # Since there are no trees in front of the school or her house, we have 79 intervals\n    # created by 80 points (79 trees + 1 start point at her house).\n    number_of_intervals = 79\n    \n    distance_between_each_tree = total_distance / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen traded 10 fish for 4 rabbits, which is a ratio of 10 fish to 4 rabbits.\n    fish_to_rabbits = 10 / 4\n    \n    # Oscar then traded 5 rabbits for 6 packs of wheat, which is a ratio of 5 rabbits to 6 packs of wheat.\n    rabbits_to_wheat = 6 / 5\n    \n    # We want to find out how many fish correspond to 12 packs of wheat.\n    # First, we find out how many fish correspond to 1 pack of wheat by multiplying the ratios.\n    fish_to_one_pack_wheat = fish_to_rabbits * rabbits_to_wheat\n    \n    # Then we multiply the number of fish for one pack of wheat by 12 to find out how many fish for 12 packs of wheat.\n    fish_for_twelve_packs = fish_to_one_pack_wheat * 12\n    \n    return fish_for_twelve_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    \n    number_of_short_rods = total_length / short_rod_length\n    \n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_laptops = 30\n    deal_cost = 2800\n\n    cost_without_deal = 20 * single_laptop_cost\n    cost_per_laptop_with_deal = deal_cost / deal_laptops\n    cost_with_deal = 20 * cost_per_laptop_with_deal\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Total performances\n    total_singing = 6\n    total_dancing = 4\n    \n    # The number of ways to arrange singing performances\n    sing_perms = factorial(total_singing)\n    \n    # We need to place at least 1 singing between every 2 dancing\n    # We can think of this as \"slots\" between singing where we can place dancing\n    # There are 5 slots between 6 singing performances (think _S_S_S_S_S_S_, where _ represents a potential slot)\n    # Plus 1 slot at the beginning and 1 at the end: _S_S_S_S_S_S_  \n    # There are total_singing + 1 slots\n    total_slots = total_singing + 1 \n    \n    # Now, since we need to put at least one singing between every two dancing,\n    # we choose 4 slots out of the available to put in the dancing performances.\n    # This is equivalent to the number of combinations of choosing 4 slots out of 7.\n    # Number of ways to place the dancing in the slots\n    dance_slots = factorial(total_slots) // (factorial(total_dancing) * factorial(total_slots - total_dancing))\n\n    # Multiply the number of arrangements of singing and the number of ways to place the dancing performances\n    ans = sing_perms * dance_slots\n    \n    return ans\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    final_price = original_price * (1 - discount_rate)\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    penguins = symbols('penguins')\n    \n    # Equation for giving 3 fish to each penguin with 5 left\n    equation1 = Eq(3*penguins + 5)\n    \n    # Equation for giving 4 fish to each penguin with 15 more needed\n    equation2 = Eq(4*penguins - 15)\n\n    # Since both situations describe a fixed amount of fish, the amounts must be equal\n    solutions = solve((equation1 - equation2), (penguins))\n\n    return solutions[penguins]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    # Jenny subtracted 26 and obtained -14\n    # Let's find the number before subtraction\n    original_number = -14 + 26\n    \n    # Now, we add 26 to the original number as she was supposed to\n    correct_result = original_number + 26\n    \n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    result = 35 * 80 / 100\n    return result\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Half time scores for Team A can be 0, 1, or 2 (since they can't score more than the final)\n    for a in range(3):\n        # Half time scores for Team B can also be 0, 1, or 2 for the same reason\n        for b in range(3):\n            # Conditions for possible half time scores:\n            # 1. Team A's half time score cannot be greater than the final score\n            # 2. Team B's half time score cannot be greater than the final score\n            # 3. Team A must have at least one goal in the second half if they didn't score 3 in the first\n            # 4. Team B must have at least one goal in the second half if they didn't score 2 in the first\n            if a <= 3 and b <= 2 and (3 - a) > 0 and (2 - b) > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n\n    cards_lost = original_cards * fraction_lost\n    \n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    num_students = 6\n    monitors_needed = 2\n    \n    ans = comb(num_students, monitors_needed)\n    \n    return ans\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of girls be g, and the total number of boys be b.\n    g, b = symbols('g b')\n\n    # Given that 20 pupils cannot swim and there are equal number of boys and girls who cannot swim\n    # So, 10 girls and 10 boys cannot swim\n    # Then 3/8 of the girls can swim, means (1 - 3/8) * g = 10 girls cannot swim\n    # And 3/5 of the boys can swim, means (1 - 3/5) * b = 10 boys cannot swim\n    \n    equation1 = Eq((1 - 3/8) * g, 10)\n    equation2 = Eq((1 - 3/5) * b, 10)\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Total number of students in the class is the sum of the number of girls and boys\n    total_pupils = solutions[g] + solutions[b]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    students = 0\n    for rows in range(2, 100):  # an upper limit of 100 for searching\n        for cols in range(2, 100):\n            if rows * cols - max(rows, cols) == 1:\n                students = rows * cols\n                break\n        if students:\n            break\n    return students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # The weight of the mangoes when the basket is full:\n    full_mangoes = full_weight - half_full_weight\n\n    # The weight of the empty basket:\n    empty_basket = half_full_weight - full_mangoes\n\n    return empty_basket\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 85 / 100 * 400\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let's denote the total number of sweets as 'total_sweets'\n    # Given: Pip ate 3/5 of the total_sweets, leaving 2/5 of the total_sweets\n    # Bud's sweets (2/5 of total) are known to be 16\n\n    bud_sweets_fraction = 2 / 5  # Fraction of sweets that Bud received\n    bud_sweets = 16  # The number of sweets Bud received\n\n    # Calculate the total number of sweets\n    total_sweets = bud_sweets / bud_sweets_fraction\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    num = 6 * 5\n    total = 40\n    ans = (num / total) * 100\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    unit_cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    number_of_cups_mandy_wants = 5\n    total_cost_for_mandy_cups = unit_cost_per_cup * number_of_cups_mandy_wants\n    return total_cost_for_mandy_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    capacity_big_mushroom_house = 4\n    \n    rabbits_in_big_houses = big_mushroom_houses * capacity_big_mushroom_house\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    \n    rabbits_per_small_mushroom_house = remaining_rabbits / small_mushroom_houses\n    \n    return rabbits_per_small_mushroom_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n    total_earnings = average_earnings_per_day * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += (i ** 2) - ((i - 1) ** 2)\n        else:\n            ans -= (i ** 2) - ((i - 1) ** 2)\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * 7\n    ways[0] = 1  # 1 way to stay on the ground floor\n    for step in range(1, 7):\n        ways[step] = ways[step - 1] + ways[step - 2] + ways[step - 3]\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July inclusive\n    \n    total_pizzas = average_pizzas_per_month * number_of_months\n    \n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_result = 21 + 22 + 23\n    factors = [2, 3]\n    for i in range(1, sum_result + 1):\n        if sum_result == 2 * 3 * i:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n    \n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 100:\n        return ans\n        ans += 3 * 4 * 5  # the product of the moduli\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    drink, popcorn = symbols('drink popcorn')\n    \n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n    \n    solutions = solve((equation1, equation2), (drink, popcorn))\n    \n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n\n    last_multiple = (92 // 4) * 4\n\n    num_multiples = ((last_multiple - first_multiple) // 4) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    for num in range(1, 61):\n        if (num % 4 == 1) or (num % 4 == 0):\n            ans += num\n        else:\n            ans -= num\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base_digit = 9\n    pattern_cycle = 4  # The ones digit in powers of 9 cycles every 4 (9^1=9, 9^2=1, 9^3=9, 9^4=1...)\n    power = 99\n\n    # Find the position in the cycle for 9^99\n    cycle_position = power % pattern_cycle\n\n    # if cycle_position is 0, it means we are at the last digit of the cycle, which is 1\n    if cycle_position == 0:\n        ones_digit = 1\n    else:\n        # Raise 9 to the power of cycle_position\n        ones_digit = (base_digit ** cycle_position) % 10  # Get the ones digit\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for Claire's current age\n    claire_current_age = symbols('claire_current_age')\n\n    # Equation representing the problem statement\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n\n    # Solve the equation for Claire's current age\n    claires_age_now = solve(equation, claire_current_age)\n\n    # Claire's age two years from now\n    claires_age_in_two_years = claires_age_now[0] + 2\n\n    return claires_age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    actual_time = 1 - 11/12\n    late_difference = 15 - 5\n    expected_time = late_difference / actual_time\n    return expected_time\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n\n    missing_number = (total_product - known_product) / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    total_coins = 0\n    susan_fare = 44\n\n    # List of UK coins in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n\n    # Susan pays with the biggest possible coin smaller than £1 (100p), since driver can give change\n    susan_pay = next(coin for coin in coins if coin > susan_fare)\n\n    # Calculate change to give back to Susan\n    change = susan_pay - susan_fare\n    \n    # Count coins used for change\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            total_coins += 1\n\n    # Include the coin Susan used to pay\n    total_coins += 1\n\n    return total_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # The worst case scenario according to Pigeonhole principle is \n    # when Jane picks all marbles of the most abundant color,\n    # then all marbles of the second-most abundant color and so on.\n    # She must ensure to pick one more marble to guarantee that she has 4 different colors.\n    \n    # Sort the number of marbles in descending order, the most to the least\n    marbles_sorted = sorted([4, 7, 6, 2], reverse=True)\n    \n    # Calculate the sum of the largest numbers (the worst case) and add 1\n    marbles_needed = sum(marbles_sorted[:3]) + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    total_chickens = 9\n    legs_per_chicken = 8 / 4\n    total_legs = total_chickens * legs_per_chicken\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= distance_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Since each kid must get at least one book, we distribute 4 books to the kids first.\n    remaining_books = 19 - 4\n\n    # Now we have to partition the remaining 15 books to 4 kids, which is \n    # equivalent to placing 3 partitions in the 15 remaining books\n    # This can be calculated by the formula for combinations: C(n+k-1, k-1)\n    # where n is the remaining_books and k is the number of partitions (kids - 1)\n    \n    partitions = 4 - 1\n    total_ways = factorial(remaining_books + partitions) // (factorial(partitions) * factorial(remaining_books))\n\n    return total_ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    m, t, v = symbols('m t v')\n    # Motorbikes have 2 wheels, tricycles have 3 wheels, and vans have 4 wheels.\n    # Create equations based on the information provided.\n    equation1 = Eq(2 * m + 4 * v, 3 * t + 35)  # Motorbikes and vans have 35 more wheels than tricycles.\n    equation2 = Eq(3 * t + 4 * v, 2 * m + 13)  # Tricycles and vans have 13 more wheels than motorbikes.\n    equation3 = Eq(2 * m + 3 * t + 4 * v, 101)  # Total wheels.\n\n    # Solve the equations for m, t, and v.\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n    \n    # Number of motorbikes more than vans.\n    num_more_motorbikes_than_vans = solutions[m] - solutions[v]\n    \n    return num_more_motorbikes_than_vans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of water in each tank A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given conditions\n    equation1 = Eq(A, 5 * B)              # Tank A has 5 times as much water as Tank B\n    equation2 = Eq(B, C + 5)              # Tank B has 5 more liters than Tank C\n    equation3 = Eq(A, C + 41)             # Tank A has as much water as Tank C and D together (Tank D has 41 liters)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i + 2) ** 2 - i ** 2 for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # This problem is equivalent to finding the number of positive solutions\n    # to the equation x1 + x2 + x3 = 6, where x1, x2, x3 are the numbers of\n    # pens in each pencil case.\n\n    # Since each pencil case cannot be empty, we can place one pen in each\n    # case and distribute the remaining 3 pens among the 3 cases.\n    \n    # This is a problem of distributing 3 identical items into 3 distinct\n    # boxes, which can be calculated using the combination formula with\n    # repetition: C((n-1)+r, r) where n is the number of boxes and r is\n    # the number of items to distribute. \n    # Here, n = 3 (three pencil cases) and r = 3 (three pens to distribute).\n    # So, we use the formula C((3-1)+3, 3) = C(5, 3).\n    \n    from math import comb\n    \n    # Calculate the number of combinations of 5 items taken 3 at a time.\n    count = comb(5, 3)\n    \n    return count\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_order = 30\n    \n    gallons_needed = milk_per_cup * cups_order\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Pip_and_Bud = 2  # Including Pip and Bud themselves\n\n    total_people = people_in_front_of_Pip + people_behind_Bud + Pip_and_Bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    # The year is fixed as 2014, which contains two '1's and one '2'.\n    # We need to form dates where we have equal numbers of 0, 1, and 2.\n    # Two remaining '1's and '2's are already in 2014, so we need to add\n    # two '0's and one '1' to have equal numbers (3 each) of 0, 1, and 2.\n    digits = '001'  # digits to form the remaining part of the date (mmdd)\n    # Generate all unique permutations of the remaining digits\n    unique_permutations = set(permutations(digits))\n    \n    count = 0\n    for perm in unique_permutations:\n        mmdd = ''.join(perm)\n        mm, dd = int(mmdd[:2]), int(mmdd[2:])\n\n        # Check if the month is valid (01-12)\n        if 1 <= mm <= 12:\n            # Check if the day is valid, considering the month and whether it's a leap year\n            if mm in [1, 3, 5, 7, 8, 10, 12] and 1 <= dd <= 31:\n                count += 1\n            elif mm in [4, 6, 9, 11] and 1 <= dd <= 30:\n                count += 1\n            elif mm == 2 and 1 <= dd <= 28:  # 2014 is not a leap year\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers without p and q\n    numbers = [4, 5, 6, 9, 3, 9]\n    # Calculate the sum of the given numbers\n    sum_numbers = sum(numbers)\n    # Since the average of all 8 numbers is 6, their sum must be 8 * 6\n    total_sum = 8 * 6\n    # Calculate the sum of p and q\n    pq_sum = total_sum - sum_numbers\n    # The difference between the highest value and the lowest value is 6\n    # The lowest value among the given numbers is 3\n    # Hence, the highest value must be 3 + 6 = 9\n    # We know that q is higher than p, and q cannot exceed the highest value\n    # To have the lowest possible value of q, we set p as low as possible\n    # The lowest possible value for p is the lowest value among the given numbers\n    \n    # In case p could be less than the lowest of the given numbers\n    # Find the minimum p that is a whole number and makes q a whole number\n    for p in range(3, pq_sum // 2 + 1):\n        q = pq_sum - p\n        if p < q and q - p <= 6:\n            # Found the lowest possible values for p and q that satisfy the conditions\n            break\n            \n    return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n    football = 3 * both\n    basketball = 4 * both\n    total_students = 36\n\n    equation = Eq(football + basketball - both, total_students)\n    both_sports = solve(equation, both)\n\n    return both_sports[both]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are: x ≡ 3 (mod 7), x ≡ 7 (mod 11), x ≡ 9 (mod 13)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n\n    # Using the Chinese Remainder Theorem to find a solution for the system of congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the smallest five-digit number that satisfies the congruences\n    num = number\n    while num < 10000:\n        num += 7 * 11 * 13\n\n    return num\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam and Jacob\n    speed_adam = 60  # km/h\n    speed_jacob = 80  # km/h\n    \n    # Time taken by Jacob to reach home\n    time_jacob = 3  # hours\n    \n    # Time taken by Adam to reach home\n    time_adam = 3.5  # hours (3 hours + 30 minutes)\n    \n    # Distance covered by Adam and Jacob\n    distance_adam = speed_adam * time_adam\n    distance_jacob = speed_jacob * time_jacob\n    \n    # Total distance between their homes\n    total_distance = distance_adam + distance_jacob\n    \n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    term_number = 21\n    common_difference = 5\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_multiply(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n    \n    # Compute step by step as per the given operation\n    result1 = custom_multiply(1, 2)\n    result2 = custom_multiply(result1, 3)\n    result3 = custom_multiply(result2, 4)\n    result4 = custom_multiply(result3, 5)\n    \n    # Find the largest integer not exceeding the result\n    ans = int(result4)\n    return ans\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # 252 is factored into 36 * 7\n    # Write the numbers as products of prime factors:\n    # 36 = 2^2 * 3^2 and 7 = 7^1\n    # So, 252 = 2^2 * 3^2 * 7^1\n\n    # The number of factors of a number is found by adding one to each of the exponents\n    # in its prime factorization and then multiplying those together.\n    num_factors = (2 + 1) * (2 + 1) * (1 + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    # Using the Pigeonhole Principle, we calculate the minimum number\n    # of cakes in the layer with the most cakes\n    min_cakes_in_top_layer = (total_cakes + total_layers - 1) // total_layers\n    return min_cakes_in_top_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_fraction = 7 / 100\n    total_paid = 0.91\n    cost_before_gst = total_paid / gst_fraction\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # To guarantee that Lucy can get 2 marbles of the same colour,\n    # consider the worst case scenario using the pigeonhole principle.\n    # If Lucy takes one blue and one yellow marble first,\n    # any marble she takes next must give her 2 of the same colour.\n    # Therefore, in the worst case, she needs to take 3 marbles.\n\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg = 2.49 + 3\n    weight_g = 670 + 80\n    total_weight_g = (weight_kg * 1000) + weight_g\n    return total_weight_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_lap_time = 56\n    ben_lap_time = 80\n    charlie_lap_time = 105\n\n    lcm_time = lcm(ashley_lap_time, ben_lap_time, charlie_lap_time)\n\n    # Calculate the total time in seconds when they meet\n    total_seconds = lcm_time\n\n    # Convert total seconds to hours, minutes\n    hours = total_seconds // 3600\n    minutes = (total_seconds % 3600) // 60\n    seconds = total_seconds % 60\n\n    # Start time is 10:00 AM\n    start_hour = 10\n\n    # Calculate the meeting time\n    meet_hour = start_hour + hours\n    meet_minute = minutes\n    meet_second = seconds\n\n    # Time in format HH:MM:SS\n    meet_time = '{:02d}:{:02d}:{:02d}'.format(meet_hour, meet_minute, meet_second)\n\n    return meet_time\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60\n    jogging_fraction = 2 / 3\n    jogging_time = total_time_minutes * jogging_fraction\n    \n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    future_age = justin + 18\n    past_age = justin - 6\n\n    equation = Eq(future_age, 4 * past_age)\n\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 18 - 22  # Calculate the common difference between terms\n    last_term = 2  # The last term before n\n    next_term = last_term + difference  # Calculate the next term in the sequence (n)\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Since we want to maximize the apples for the kid who gets the most,\n    # we will distribute the apples to the other kids first,\n    # giving them each one apple and then increasing the number\n    # one by one to keep the counts distinct until we can't anymore.\n\n    apples = 30\n    children = 6\n\n    # Start by giving one apple to each child\n    apples -= children\n\n    # Give out apples one by one to each child, ensuring that each child gets a unique amount\n    for i in range(children - 1):\n        apples -= i + 1\n\n    # Whatever apples are left go to the kid with the most\n    maximum_apples = apples\n\n    return maximum_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_mpg = 72.8\n    tom_additional_gallons = 6 + 3/4\n\n    sam_gallons_used = distance / sam_mpg\n    tom_gallons_used = sam_gallons_used + tom_additional_gallons\n    tom_mpg = distance / tom_gallons_used\n\n    return tom_mpg\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Ways to fail to pick 2 M&Ms of different colours:\n    # 1. Pick 3 reds\n    # 2. Pick 4 yellows\n    # 3. Pick 5 browns\n    # To ensure success, take one more than the total failing picks.\n\n    fail_pick_red = 3\n    fail_pick_yellow = 4\n    fail_pick_brown = 5\n    \n    smallest_number = fail_pick_red + fail_pick_yellow + fail_pick_brown + 1\n    \n    return smallest_number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum((2 * i + 1)**2 for i in range(10))\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n    ans = num_shirts * num_skirts\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    return 3 ** 2  # The pattern is that each number is a power of 3\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    seventh_term = 105\n    term_difference = 120 - 105\n    hundredth_term = seventh_term + (100 - 7) * term_difference\n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    sum_base_10 = num1 + num2\n    ans = ''\n    while sum_base_10:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, lemons = symbols('oranges lemons')\n    \n    original_ratio = Eq(oranges / lemons, 3/5)\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n    \n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_day_per_rabbit = 4\n\n    total_carrots = rabbits * days * carrots_per_day_per_rabbit\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate how much of a bale each animal eats in one day\n    horse_daily = 1/2\n    cow_daily = 1/3\n    sheep_daily = 1/12\n    \n    # Total amount of hay eaten by all animals in one day\n    total_daily = horse_daily + cow_daily + sheep_daily\n\n    # Number of days the 22 bales will last\n    days = 22 / total_daily\n    \n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the mother's age now\n    mother_now = symbols('mother_now')\n    # Symbol for the daughter's age now\n    daughter_now = symbols('daughter_now')\n\n    # Equation representing \"When you reach my age, I will be 75 years old.\"\n    eq1 = Eq(mother_now + (mother_now - daughter_now), 75)\n    # Equation representing \"When you were at my age, I was only 3 years old.\"\n    eq2 = Eq(daughter_now - (mother_now - daughter_now), 3)\n\n    # Solve the system of equations\n    solved_ages = solve((eq1, eq2), (mother_now, daughter_now))\n\n    return solved_ages[mother_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To guarantee 3 red apples, Isabella might have to take all the non-red apples first.\n    non_red_apples = 11 + 7  # green + yellow apples\n    \n    # After taking all non-red apples, she needs to take 3 red apples to meet the requirement.\n    required_red_apples = 3\n\n    # The smallest number of apples she needs to take is the sum of non-red apples plus 3 red apples.\n    total_apples_to_take = non_red_apples + required_red_apples\n\n    return total_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n\n    # Defining the possible digits for year, month and day according to the conditions.\n    year_digits = '2014'  # The year is fixed at 2014 so its digits are 2, 0, 1, 4.\n\n    # The number of 0s, 1s, or 2s to be in the date, which should be equal as per the question.\n    num_equal_digits = 2\n\n    # The potential two digits for month and day have to either be both 0, both 1, or both 2.\n    # This is because if they are not equal, it's not possible to have equal counts of 0s, 1s, and 2s.\n    possible_month_day_digits = ['00', '11', '22']\n\n    valid_dates = 0\n\n    # Combining the potential month and day with year digits and then counting the permutations\n    # that have equal numbers of 0, 1 and 2.\n    for month_day in possible_month_day_digits:\n        combined_digits = year_digits + month_day\n\n        # Generating all possible permutations of the combined digits.\n        for perm in set(permutations(combined_digits)):\n            date_str = ''.join(perm)\n\n            year = date_str[0:4]\n            month = date_str[4:6]\n            day = date_str[6:8]\n\n            if int(month) > 12 or int(month) == 0:  # Invalid month\n                continue\n            if int(day) > 31 or int(day) == 0:  # Invalid day\n                continue\n\n            # Check for each month's correct number of days\n            if month in ['04', '06', '09', '11'] and int(day) > 30:\n                continue\n            if month == '02':  # February, considering 2014 is not a leap year\n                if int(day) > 28:\n                    continue\n\n            # If all conditions are met, the date is valid.\n            valid_dates += 1\n\n    return valid_dates\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Assuming all boys are right-handed\n    boys = total_pupils - girls\n    right_handed_boys = min(boys, right_handed)\n    \n    # The rest of the right-handed pupils must be girls\n    right_handed_girls = right_handed - right_handed_boys\n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    sum = 0\n    for i in range(10, 21, 2):\n        sum += i - (i - 1)\n    return sum\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    discounted_price = 6400\n    original_price = discounted_price / 0.2\n    savings = original_price - discounted_price\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "from itertools import combinations\n\ndef solution():\n    # Each match will give out a total of 2 points (either 2 to the winner, or 1 to each team in the case of a tie)\n    # The number of matches is the number of ways to choose 2 teams from 6, which is C(6, 2) or \"6 choose 2\"\n    total_matches = len(list(combinations('ABCDEF', 2)))\n    \n    # Total points is therefore 2 points per match times the number of matches\n    total_points = total_matches * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n    minibuses = -(-children // capacity)  # Ceiling division to get the number of minibuses needed\n\n    return minibuses\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # The worst-case scenario for Jane to get 4 different colored marbles is when she picks out all marbles of one color,\n    # followed by all marbles of another color and so on.\n    # In the worst-case scenario, she will have all red, green, and blue marbles (the three colors with the most marbles)\n    # and would only need one more marble to get an orange one.\n    \n    # Calculating the total marbles for the first 3 colors with the most marbles\n    total_red_green_blue = 4 + 7 + 6  # Red + Green + Blue\n    \n    # Adding 1 for the guaranteed orange marble\n    total_marbles_needed = total_red_green_blue + 1  # Add 1 for one orange marble\n\n    return total_marbles_needed\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variables\n    girls, boys = symbols('girls boys')\n    girls_swim, girls_cannot_swim = 31 * girls, 49 * girls\n    boys_swim, boys_cannot_swim = boys - 120, boys\n\n    # Define the equations\n    equation1 = Eq(girls + 90, boys)  # There are 90 more boys than girls\n    equation2 = Eq(girls + boys, 1690)  # Total number of pupils in the school\n    equation3 = Eq(girls_swim + girls_cannot_swim + boys_swim + boys_cannot_swim, 1690)  # Total who can and cannot swim\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (girls, boys))\n\n    # Total pupils who cannot swim\n    girls_cannot_swim_value = 49 * solutions[girls]\n    boys_cannot_swim_value = solutions[boys]\n\n    total_cannot_swim = girls_cannot_swim_value + boys_cannot_swim_value\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if (number % 2 == 0 and\n            number % 3 == 0 and\n            number % 5 == 0 and\n            number % 7 == 6):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    factor_5 = 0\n    n = 1\n    while factor_5 < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            factor_5 += 1\n            temp //= 5\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 14): # a must be less than 14 because 3a=41 when a=14\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_per_tender_4pc = 7 / 4\n    cost_per_tender_6pc = 8.5 / 6\n\n    if cost_per_tender_4pc < cost_per_tender_6pc:\n        ans = \"4pc is a better buy\"\n    elif cost_per_tender_4pc > cost_per_tender_6pc:\n        ans = \"6pc is a better buy\"\n    else:\n        ans = \"Both are equally good\"\n\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    outcomes = 6 * 6  # There are 6 outcomes for each die\n    successful_outcomes = 0  # Initialize number of successful outcomes\n\n    # Calculate the number of successful outcomes (sum of dice > 10)\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 > 10:\n                successful_outcomes += 1\n\n    # Calculate the probability of a successful outcome\n    probability = successful_outcomes / outcomes\n\n    # Expected value calculation\n    expected_win_per_roll = 10 * probability\n    expected_loss_per_roll = 1 - expected_win_per_roll\n\n    # Total expected loss for 60 games\n    total_expected_loss = total_rolls * expected_loss_per_roll\n\n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    remaining_after_phone = 1 - 740\n    remaining_after_rent = remaining_after_phone * (1 - 0.75)\n    salary = 1 / remaining_after_rent\n\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_after_removing_apples = 280\n    apples_removed = 3\n    \n    weight_of_removed_apples = total_weight_with_apples - weight_after_removing_apples\n    # Since 3 apples weigh the weight_of_removed_apples, each apple weighs weight_of_removed_apples / 3.\n    weight_per_apple = weight_of_removed_apples / apples_removed\n    # Since 5 apples were in the basket initially, their total weight is 5 times weight_per_apple.\n    total_apple_weight = 5 * weight_per_apple\n    # The weight of the basket is the total weight minus the weight of all 5 apples.\n    weight_of_basket = total_weight_with_apples - total_apple_weight\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 4]\n    numbers = set()\n\n    for i in range(1, len(digits) + 1):\n        for combo in permutations(digits, i):\n            number = int(''.join(map(str, combo)))\n            numbers.add(number)\n\n    return len(numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    minutes = 0\n    hour = 2\n    minute = 31\n\n    while True:\n        minute += 1\n        minutes += 1\n\n        if minute == 60:\n            minute = 0\n            hour += 1\n            if hour == 24:\n                hour = 0\n\n        time_str = '{:02d}{:02d}'.format(hour, minute)\n        if all(digit in time_str for digit in '0123'):\n            break\n\n    return minutes\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150\n    drank_after_class = 100\n    half_bottle = remaining_after_class + drank_after_class\n    original_amount = half_bottle * 2\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    # Lynn and Mary initially had the same amount of money, so lynn = mary\n    equation1 = Eq(lynn, mary)\n    # After spending their respective amounts, Mary had thrice as much as Lynn\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    # Calculate the money Lynn had left\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    first_part = diamond(4, 2)\n    ans = triangle(first_part, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remaining_after_tuesday / bag_weight\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percentage_sold = 60\n    tickets_unsold = 28\n    total_tickets = tickets_unsold * 100 / (100 - percentage_sold)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    divisor = 27\n    remainder = 9\n    \n    # Minimum value of the dividend is when the quotient is at its lowest positive value\n    quotient = 1\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jerry, devi = symbols('jerry devi')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((jerry + 4) / (devi + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (jerry, devi))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    result = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return result\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_subtrahend in range(1, 10):\n        for ones_subtrahend in range(10):\n            for tens_minuend in range(1, 10):\n                for ones_minuend in range(10):\n                    if (tens_minuend * 10 + ones_minuend) - (tens_subtrahend * 10 + ones_subtrahend) == 36:\n                        if (tens_minuend * 10 + ones_minuend) - ((tens_subtrahend + 2) * 10 + (ones_subtrahend - 1)) == 36:\n                            correct_difference = (tens_minuend * 10 + ones_minuend) - (3 * 10 + 2)\n                            return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    jugs_needed = -(-total_ml // jug_capacity)  # Ceiling division\n    return jugs_needed\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # 49 red + 1 blue\n    target_percentage = 0.90  # 90%\n\n    # Calculate the number of red balls to achieve 90% of the total after removal\n    # Let x be the number of red balls to be removed\n    # Equation: (49 - x) / (total_balls - x) = target_percentage\n    # Solve for x:\n    x = (49 - target_percentage * total_balls) / (1 - target_percentage)\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = sum((100 / 97)**i for i in range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_matches = 220\n    weight_with_matches = 45\n    weight_empty_box = 12\n\n    weight_matches_only = weight_with_matches - weight_empty_box\n    weight_one_match = weight_matches_only / total_matches\n\n    return weight_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    equation1 = Eq(cows + birds, 1300)  # The total number of cows and birds is 1300\n    equation2 = Eq(4 * cows + 2 * birds, 3440)  # The total number of legs\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    number = 96\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for velocities\n    vx, vy = symbols('vx vy')\n\n    # Initial momentum of car going north (y-direction)\n    p_north_initial = 500 * 20  # mass * velocity\n\n    # Initial momentum of car going west (x-direction), negative because west is the opposite direction\n    p_west_initial = -500 * 30  # mass * velocity\n\n    # Conservation of momentum (after collision)\n    # Momentum in y-direction\n    equation1 = Eq(500 * vy, p_north_initial)\n    # Momentum in x-direction\n    equation2 = Eq(500 * vx, p_west_initial)\n\n    # Solve for the velocity components\n    solutions = solve((equation1, equation2), (vx, vy))\n\n    # Calculate the magnitude of the velocity\n    v_magnitude = (solutions[vx]**2 + solutions[vy]**2)**0.5\n\n    # Return magnitude of velocity\n    return v_magnitude\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # The greatest 3-digit number is 999.\n    # We should start from there and decrease by 2 (to ensure odd numbers) until\n    # we find a number that satisfies the given conditions.\n    for number in range(999, 99, -2):\n        # Check for divisibility by 9 and if the tens place is divisible by 4\n        if number % 9 == 0 and (number // 10) % 10 % 4 == 0:\n            return number  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let x be the number of pens Ben has at first\n    # After giving away 28 pens, Jenny will have 83 - 28 pens\n    # Jenny will then have the same number of pens as Ben, which means:\n    # 83 - 28 = x + 28\n    # Solve for x:\n    x = (83 - 28) - 28\n    return x\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Calculate the total length of the road divider\n    # The first and last tree are at the opposite ends and there are 21 trees\n    # So, there are 20 intervals of 2m each\n    total_length = 20 * 2\n\n    # Lamp posts are placed at regular intervals of 10m, including opposite ends\n    # To find out how many intervals of 10m fit into the total_length\n    # We would need to add an additional 10m as the first lamp post is also at one end\n    lamp_post_intervals = (total_length + 10) // 10\n\n    # Number of lamp posts is the number of intervals plus one (for the opposite end)\n    num_lamp_posts = lamp_post_intervals + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    laptop, dvd_player = symbols('laptop dvd_player')\n    \n    # Equation representing total cost for 5 laptops and 4 DVD players\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    \n    # Equation representing combination of 1 laptop and 1 DVD player\n    equation2 = Eq(laptop + dvd_player, 2960)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n    \n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, and L\n    colors = 5  # black, white, red, yellow, and purple\n    num_handbags = sizes * colors\n    return num_handbags\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # Let x be the average weight before Aaron joined\n    # Let n be the number of people before Aaron joined\n    # Total weight = average weight * number of people = x * n\n    # After Aaron joined: new total weight = x * n + 45\n    # New average after Aaron joined = 61\n    # Equation: (x * n + 45) / (n + 1) = 61\n    \n    # After Ben joined: new total weight = x * n + 45 + 71\n    # New average after Ben joined = 62\n    # Equation: (x * n + 45 + 71) / (n + 2) = 62\n    \n    # From these two equations, we can solve for x\n    # Multiplying both sides by the denominators gives us:\n    # x * n + 45 = 61 * (n + 1)\n    # x * n + 45 + 71 = 62 * (n + 2)\n\n    # Simplifying these:\n    # x * n + 45 = 61 * n + 61\n    # x * n + 116 = 62 * n + 124\n    \n    # Subtract x * n from both sides:\n    # 45 = 61 * n + 61 - x * n\n    # 116 = 62 * n + 124 - x * n\n    \n    # Subtract 61 * n from both sides of the first equation, and subtract 62 * n from both sides of the second equation:\n    # -61 * n + 45 = 61 - x * n\n    # -62 * n + 116 = 124 - x * n\n    \n    # Since the left sides of both equations now equal -x * n, we can set the right sides equal to each other:\n    # 61 - x * n = 124 - x * (n + 2)\n    \n    # Simplify by distributing x over n + 2:\n    # 61 - x * n = 124 - x * n - 2x\n\n    # Add x * n to both sides to cancel it out:\n    # 61 = 124 - 2x\n    \n    # Solve for x:\n    # 2x = 124 - 61\n    # 2x = 63\n    # x = 63 / 2\n    # x = 31.5\n\n    return 31.5\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    # Since all the letters represent different digits and form a multiplication fact\n    # The only digits that can be multiplied to get a two-digit number that ends with a square (4 or 6)\n    # where both digits are the same (since triangle and diamond represent the same digit)\n    # are 1 and 6: 1 * 6 = 06, where 0 and 6 would be the digits represented by triangle and diamond\n    # However, since they must be different, the only viable option is triangle=1 and diamond=6.\n    triangle = 1\n    return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize the count of pairs to zero\n    count = 0\n    \n    # Iterate over all possible distinct pairs (i, j) where i < j\n    for i in range(1, 100):\n        for j in range(i+1, 101):\n            # Check if the sum of the pair is a multiple of 5\n            if (i + j) % 5 == 0:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    repetitions, remainder = divmod(2000, len(pattern))\n    total_sum = sum(pattern) * repetitions + sum(pattern[:remainder])\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # Total cost in pounds\n    coffee_cost = 3.69  # Cost of coffee in pounds\n    milk_cost = 0.89  # Convert 89p to pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)  # Subtract the sum of coffee and milk cost from total cost to get sugar cost\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # The worst case would be picking 3 balls of each color without obtaining 4 balls of the same color\n    # So we have to add one more ball to ensure Sheila gets 4 balls of the same color\n    worst_case_number = (3 * 3) + 1\n\n    return worst_case_number\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    return 2.3 + 9.7 + 5.2 - 2.2\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges) + (price_mangoes_per_kg * weight_mangoes)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers_sum = 5 * 7  # mean * number of values\n    known_sum = 2 + 3 + 8 + 4 + 7 + 6  # sum of known values\n    a = numbers_sum - known_sum  # remainder for 'a'\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    ans = 4825 + 1754\n    return ans\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Rate at which A can do the job per day\n    rate_a = 1 / 15\n    # Rate at which B can do the job per day\n    rate_b = 1 / 10\n    \n    # Combined rate per day when A and B work together\n    combined_rate = rate_a + rate_b\n    \n    # Work done in 4 days by A and B together\n    work_done = 4 * combined_rate\n    \n    # Remaining work to be done after 4 days\n    remaining_work = 1 - work_done\n    \n    # Days B will take to finish the remaining work alone\n    days_b = remaining_work / rate_b\n    \n    return days_b\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the sequence 1 to 13\n    sum_to_13 = sum(range(1, 14))\n    # The sequence is symmetrical, hence we multiply by 2\n    # but we subtract 13 since it's counted twice in the symmetry\n    total_sum = 2 * sum_to_13 - 13\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    price_reduction = original_price - reduced_price\n    percentage_reduction = (price_reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Assume the square array has a side of length 'n'\n    # The number of boys will be the sum of the squares of all the odd numbers up to 'n'\n    # if 'n' is odd, or up to 'n-1' if 'n' is even.\n    # The number of girls will be the sum of the squares of all the even numbers up to 'n-1'\n    # if 'n' is odd, or up to 'n' if 'n' is even.\n    # Let's find the value of 'n' that satisfies the condition that there are 52 more boys than girls.\n    for n in range(1, 100):  # search within a reasonable range\n        boys = sum((2*i + 1)**2 for i in range((n + 1)//2))\n        girls = sum((2*i)**2 for i in range(n//2))\n        if boys - girls == 52:\n            # Calculate the total number of students (boys + girls)\n            total_students = boys + girls\n            return total_students\n    return None\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    from math import ceil, log2\n    num_bottles = 1000\n    num_test_tubes = ceil(log2(num_bottles))\n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    ducklings_legs = 4 * 2  # Each duckling has 2 legs\n    baby_geese_legs = 2 * 2  # Each baby goose has 2 legs\n    total_legs = 36\n    \n    remaining_legs_for_lambs = total_legs - (ducklings_legs + baby_geese_legs)\n    lamb_legs = 4  # Each lamb has 4 legs\n    number_of_lambs = remaining_legs_for_lambs / lamb_legs\n    \n    return int(number_of_lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres_to_mililitres = 1000\n    n = 2.5 * litres_to_mililitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    # Remaining sweets after each day\n    remaining_after_day1 = 6 / (1 - 1/4)\n    remaining_after_day2 = remaining_after_day1 / (1 - 1/5)\n    remaining_after_day3 = remaining_after_day2 / (1 - 1/6)\n    initial_sweets = remaining_after_day3 / (1 - 1/7)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the initial number of cookies Charlene had\n    x = symbols('x')\n\n    # Charlene kept 1/2 of the cookies plus 8 cookies\n    charlene_kept = (1/2) * x + 8\n\n    # Remaining cookies given to Emerald\n    remaining_for_emerald = x - charlene_kept\n    \n    # Emerald ate 1/3 of the cookies plus 4 cookies\n    emerald_ate = (1/3) * remaining_for_emerald + 4\n    \n    # Remaining cookies given to Hebe\n    remaining_for_hebe = remaining_for_emerald - emerald_ate\n    \n    # Hebe ate 1/4 of the cookies and had 42 cookies left\n    hebe_ate = (1/4) * remaining_for_hebe\n    hebe_left = remaining_for_hebe - hebe_ate\n\n    # Equation for the cookies Hebe had left\n    equation = Eq(hebe_left, 42)\n\n    # Solve the equation\n    cookies_at_first = solve(equation, x)\n\n    return cookies_at_first[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teams = symbols('teams')\n\n    # Based on the problem, each team plays each other team twice.\n    # The total number of matches played can be represented as n*(n-1), where n is the number of teams.\n    # We then equate this to 30 matches times 2 (because each match is counted twice, once for each team).\n    equation = Eq(teams * (teams - 1), 30 * 2)\n\n    solutions = solve(equation)\n\n    # Since the number of teams can't be negative, we choose the positive solution.\n    ans = [sol for sol in solutions if sol > 0][0]\n\n    return ans\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    uniforms_made_first_5_days = 720\n    total_uniforms = 3600\n\n    days_to_make_720_uniforms = 5\n    uniforms_per_day = uniforms_made_first_5_days / days_to_make_720_uniforms\n\n    total_days = total_uniforms / uniforms_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    ways = [0] * 11\n    ways[0] = 1  # Base case, one way to stand at the bottom\n    ways[1] = 1  # One way to reach the first step\n    ways[2] = 2  # Two ways to reach the second step (1+1 or 2)\n\n    # Calculate the ways to reach each step up to 4\n    for i in range(3, 5):\n        ways[i] = ways[i - 1] + ways[i - 2]\n\n    # Since Nelson wants to step on the 5th step, he can come from step 3 or 4\n    ways[5] = ways[3] + ways[4]\n\n    # Calculate the ways to reach each step from 6 to 10\n    for i in range(6, 11):\n        ways[i] = ways[i - 1] + ways[i - 2]\n\n    return ways[10]\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first, second, third = symbols('first second third')\n\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # Perform prime factorization of numbers to count the factors of 2 and 5\n    factors_of_2 = 3    # As 2 appears three times: 2, 2, 2 (2**3)\n    factors_of_5 = 4    # As 5 appears four times: 5, 5, 25 (5**2)\n\n    # Number of zeros at the end is equal to the minimum of the count of factors of 2 and 5\n    ans = min(factors_of_2, factors_of_5)\n    \n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # only need to check numbers between sqrt(40) and sqrt(50)\n        if i**2 > 40 and i**2 < 50:\n            return i**2\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n    remaining_water = initial_volume - (cup_volume * cups_poured)\n    return remaining_water\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + sister + 20, 53)\n\n    solution = solve((equation1, equation2), (alice, sister))\n    return solution[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    for i in range(1, int(3024 ** (1/4)) + 1):\n        if i * (i + 1) * (i + 2) * (i + 3) == 3024:\n            return i + 3\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Calculate least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Find the smallest multiple of pack_lcm that is greater than or equal to 1000\n    least_packs = -(-1000 // pack_lcm) # Ceiling division\n\n    return least_packs * 4 # Multiply by 4 because there are 4 types of packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    handshakes = num_students * (num_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring decimals to fractions\n    # For 0.1(1)99251(7), the pattern is non-recurring part = 0.1 and recurring part = 117\n    # The corresponding fraction is (0.1117251-0.1)/0.99999\n    n1 = int('1117251') - int('1')\n    d1 = int('99999')\n    fraction1 = n1 / d1\n    \n    # For 0.2(3)456(7), the pattern is non-recurring part = 0.2 and recurring part = 34567\n    # The corresponding fraction is (0.234567-0.2)/0.9999\n    n2 = int('234567') - int('2')\n    d2 = int('9999')\n    fraction2 = n2 / d2\n    \n    # Find the smallest value of n\n    n = 1\n    while True:\n        if int(fraction1 * 10**n) % 10 == 7 and int(fraction2 * 10**n) % 10 == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20/100) * 90 - (90/100) * 20\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Calculate the number of days Jason took to read the book.\n    # The sum of an arithmetic series is given by the formula: S = n/2 * (a1 + an)\n    # Where S is the sum of the series, n is the number of terms,\n    # a1 is the first term and an is the last term.\n    # Here, we have S = total_pages, a1 = first_day_pages, an = last_day_pages\n    # We need to find the common difference, d and the number of terms, n.\n    # n/2 * (a1 + an) = S\n    # n * (a1 + an) = 2S\n    # n * (first_day_pages + last_day_pages) = 2 * total_pages\n\n    # We can use the quadratic formula to solve for n, since\n    # n^2 * d + n * (a1 - d) = 2S\n    # Let's solve for n knowing that n*(n-1)/2 * d = S - n*a1\n    n_squared_minus_n = 2 * (total_pages - first_day_pages)\n    # Since we know that n*(n-1) is even, we can simplify and solve for n\n    for n in range(1, total_pages):\n        if n * (n - 1) == n_squared_minus_n:\n            break\n\n    # Now, we can find the common difference d\n    # d = (S - n * a1) * 2 / (n * (n-1))\n    d = (total_pages - n * first_day_pages) * 2 // (n * (n - 1))\n\n    return d\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_purchase = 416\n    afternoon_purchase = 248\n    difference = morning_purchase - afternoon_purchase\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    water_amount = (water_ratio * orange_amount) / orange_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    required_average = 8.5\n    current_scores = [7.9, 8.3, 8.8, 8.6]\n    sum_current_scores = sum(current_scores)\n    num_judges = 5\n\n    required_total = required_average * num_judges\n    required_final_judge_score = required_total - sum_current_scores\n\n    return required_final_judge_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    total_interest = 816\n    interest_per_year = total_interest / 2\n    rate_per_year = (interest_per_year / principal) * 100\n    \n    return rate_per_year\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Johnny's calculation is incorrect.\n    # The correct method to find the dividend is:\n    # (quotient * divisor) + remainder\n    quotient = 9\n    divisor = 4\n    remainder = 2\n\n    # Johnny mistakenly multiplied the quotient by the remainder.\n    # The correct dividend should be calculated as follows:\n    dividend = (quotient * divisor) + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # equation: 2*x + 7 = 43\n    # solving for x\n    original_number = (43 - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Hannah be 'h' cm/s.\n    h = symbols('h')\n\n    # Using the inverse proportionality of time and speed\n    equation = Eq(3/h, 4/(h + 15))\n\n    # Solving the equation for h\n    speed_hannah = solve(equation, h)[0]\n\n    return speed_hannah\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)  # The cost of a mango and a pear\n    equation2 = Eq(mango + apple, 3.80)  # The cost of a mango and an apple\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)  # The total cost of Brad's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blank = 35\n\n    time_left_for_short_answers = total_time - (time_spent_multiple_choices + time_spent_fill_in_the_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850\n    time = 45\n    train_speed = 30\n\n    # Total distance covered by the train while crossing the tunnel\n    total_distance = train_speed * time\n\n    # The length of the tunnel is the total distance covered minus the length of the train\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # Maximum parts by circles only\n    max_parts_by_circles = circles * (circles - 1) // 2 + circles + 1\n    # Increase by the line\n    max_parts_with_line = max_parts_by_circles + circles + line\n    return max_parts_with_line\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the total number of coins Owen originally had.\n    # Let y be the number of fifty-cent coins Owen originally had.\n    x, y = symbols('x y')\n\n    # Given that 2/7 of his coins were fifty-cents coins.\n    equation1 = Eq(y, 2/7 * x)\n\n    # His mother gave him 10 one-dollar coins.\n    # His mother also gave him five-dollars’ worth of fifty-cent coins meaning 10 fifty-cent coins.\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins.\n    # one_dollar_coins = total_coins - fifty_cent_coins\n    # one_dollar_coins_end = (total_coins + 10) - (fifty_cent_coins + 10)\n    equation2 = Eq((x + 10) - (y + 10), 2 * (y + 10))\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from itertools import permutations\n\n    # Number of ways to arrange Joe, Mike, Tina\n    total_permutations = len(list(permutations('JMT')))\n    \n    # Number of entrances each can choose from\n    entrances = 4\n\n    # Joe or Mike must choose from 3 entrances, the other from 4, and Tina from 4 as well\n    # However, since order matters (due to permutations), we account for them choosing in any order\n    ways_for_joe_or_mike = 3\n    ways_for_other_two = entrances * entrances\n\n    total_ways = total_permutations * ways_for_joe_or_mike * ways_for_other_two\n\n    return total_ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let's denote the money spent on transportation as x.\n    # Therefore, money spent on food will be 2x.\n    # According to the problem, x + 2x = spent_money\n    # 3x = spent_money \n    # x = spent_money / 3\n    transportation_money = spent_money / 3\n    food_money = 2 * transportation_money\n    \n    return food_money\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # First, calculate the cost for the first 3 tons\n    first_three_tons_cost = 3 * 4  # 3 tons * $4 per ton\n    \n    # Subtract the fixed service fee from the total amount\n    remaining_money = 109 - 4  # $109 total - $4 service fee\n    \n    # Subtract the cost for the first 3 tons from the remaining money\n    remaining_money -= first_three_tons_cost\n    \n    # Calculate the tons of water she can use with the remaining money\n    # at the rate of $3 per additional ton\n    additional_tons = remaining_money // 3\n    \n    # Finally, add the first 3 tons to the additional tons\n    total_tons = 3 + additional_tons\n    \n    return int(total_tons)\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n    total_cookies = 6230\n    \n    equation1 = Eq(amelia, 160)\n    equation2 = Eq(bala, amelia + daniel + 320)\n    equation3 = Eq(bala, (amelia + carl + daniel) / 2)\n    equation4 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    equation5 = Eq(amelia + bala + carl + daniel, total_cookies)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_divisor = quotient + 1\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    quick_gardener_rate = 1 / 12  # Work rate of the quick gardener (lawn/hour)\n    lazy_gardener_rate = symbols('lazy_gardener_rate')  # Work rate of the lazy gardener (lawn/hour)\n\n    # Equation based on the combined work rate (quick_gardener_rate + lazy_gardener_rate) * time = 1 lawn\n    equation = Eq((quick_gardener_rate + lazy_gardener_rate) * 8, 1)\n\n    # Solve for the lazy gardener's rate\n    solution = solve(equation, lazy_gardener_rate)\n\n    # Calculate how many hours it would take the lazy gardener to mow the lawn on his own\n    lazy_gardener_hours = 1 / solution[lazy_gardener_rate]\n\n    return lazy_gardener_hours\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of apples as 'a' and the number of oranges as 'o'.\n    a, o = symbols('a o')\n\n    # The number of oranges was 32 more than the number of apples.\n    eq1 = Eq(o, a + 32)\n\n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left.\n    eq2 = Eq(a - a/3 + o - o/2, 100)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, o))\n\n    # Initial total number of fruits is the sum of apples and oranges.\n    total_fruits = solutions[a] + solutions[o]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Eve's and Alice's candies\n    girls = 3  # Eve, Alice, and Irene\n    candy_per_girl = total_candy // girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_gave = 7\n    matthew_tomatoes = belinda_tomatoes - belinda_gave\n\n    # After giving away the tomatoes, they have the same number\n    belinda_after = belinda_tomatoes - belinda_gave\n    matthew_after = matthew_tomatoes + belinda_gave\n\n    # Find the number of tomatoes Matthew had at first\n    matthew_initial = matthew_after - belinda_gave\n\n    return matthew_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of dresses and skirts\n    x = symbols('x')\n    \n    # Original amount of money\n    original_amount = 182\n    \n    # Spent $5 each on x dresses\n    cost_dresses = 5 * x\n    \n    # Spent $3 each on x skirts\n    cost_skirts = 3 * x\n    \n    # $5x left\n    left_amount = 5 * x\n    \n    # Equation representing the situation\n    equation = Eq(original_amount - (cost_dresses + cost_skirts), left_amount)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    start_time = 5 * 60  # convert 5 am to minutes (300 minutes from midnight)\n    green_interval = 5  # green line interval in minutes\n    red_interval = 6  # red line interval in minutes\n\n    lcm_interval = (green_interval * red_interval) // math.gcd(green_interval, red_interval)\n    next_common_time = start_time + lcm_interval\n\n    hours = next_common_time // 60\n    minutes = next_common_time % 60\n\n    return hours, minutes\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Initialize the sum.\n    ans = 0\n    \n    # Each term in the sequence has alternating multiplying by 2 or increasing by 2\n    for i in range(8):\n        term = 1\n        for j in range(i):\n            if j == 0:\n                term *= (j + 2)  # Multiply by 2 for the first term.\n            else:\n                term *= (j*2 + 1)  # Subsequent terms are odd numbers increased by 2 each time.\n        ans += term  # Add the term to the sum.\n\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # capacity of the jug in milliliters\n    cups_to_half_jug = 3  # number of cups to fill half the jug\n    half_jug_capacity = jug_capacity / 2  # capacity of half the jug in milliliters\n    cup_capacity = half_jug_capacity / cups_to_half_jug  # capacity of each cup in milliliters\n\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3  # meters\n    trees_passed = 101 - 1\n    distance_walked = trees_passed * distance_per_tree  # Olivia walks this distance in 3 minutes\n\n    total_distance = 4000  # meters\n    walking_time_for_total_distance = (total_distance / distance_walked) * 3  # time to walk 4000 meters\n\n    return walking_time_for_total_distance\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the provided information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost for 5 bananas using the price of bananas obtained from the solution\n    cost_for_5_bananas = solutions[banana] * 5\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Calculate the ratio of fish to rabbits from Owen's trade\n    fish_to_rabbits = 5 / 2\n\n    # Calculate the ratio of rabbits to packs of wheat from Oscar's trade\n    rabbits_to_wheat = 4 / 7\n\n    # Calculate the ratio of fish to packs of wheat by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Now find how many fish Owen needs to give for 14 packs of wheat\n    fish_for_14_wheat = 14 / (1 / fish_to_wheat)\n    \n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the sum of squares using the formula for the sum of cubes\n    # The series given is 2^2 * (1^2 + 2^2 + 3^2 + ... + (124/4)^2)\n    # We know that 1^2 + 2^2 + 3^2 + ... + n^2 = n*(n+1)*(2n+1)/6\n    n = 124 // 4  # Since we have to go up to 124 and the common difference is 4\n\n    sum_of_squares = (2**2) * (n * (n + 1) * (2 * n + 1) // 6)\n\n    return sum_of_squares\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    # The total ways without the constraint of at least one person per entrance\n    total_ways = 3**4\n    \n    # Subtracting the scenarios where all 4 people choose the same entrance (3 scenarios)\n    all_choose_same = 3\n    \n    # Subtracting the scenarios where only one entrance is empty (3 entrances * permutations of 3 people choosing 2 entrances)\n    one_entrance_empty = 3 * len(set(permutations([1, 1, 2], 3)))\n    \n    ans = total_ways - all_choose_same - one_entrance_empty\n    return ans\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n\n    # Let correct_answers be the number of questions Valerie answered correctly.\n    # Then the number she got wrong would be total_questions - correct_answers.\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * correct_mark) + (wrong_answers * wrong_mark)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows_initial, goats_initial = symbols('cows_initial goats_initial')\n    total_initial = cows_initial + goats_initial\n    cows_final = cows_initial + 240\n    goats_final = 2 * goats_initial\n\n    equation1 = Eq(cows_initial, 0.65 * total_initial)\n    equation2 = Eq(cows_final, 0.85 * (total_initial + 240))\n    equation3 = Eq(cows_final + goats_final, total_initial + 240)\n\n    solutions = solve((equation1, equation2, equation3), (cows_initial, goats_initial))\n\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    justin_age = solve(equation, justin)[0]\n    \n    return justin_age\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    for cookies in range(1, 9*8):  # The least common multiple of 8 and 9 is their product here, since they are coprime\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    equations = [\n        Eq(x % 4, 1),\n        Eq(x % 5, 2),\n        Eq(x % 6, 3)\n    ]\n    # Use the Chinese Remainder Theorem to solve for x\n    solutions = solve(equations, x)\n\n    # The required number is less than 100\n    for sol in solutions:\n        if sol < 100:\n            return sol\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        total_cost -= 15\n    elif total_cost >= 20:\n        total_cost -= 4\n\n    return total_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as fac\n\n    boys_permutations = fac(2)\n    girls_permutations = fac(3)\n\n    total_arrangements = boys_permutations * girls_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for age in ages:\n        if age % 3 == 0 and age < 10:\n            return age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenario: we draw all 5 balls of one color, and all 5 of another color.\n    # By the pigeonhole principle: to definitely get 3 different colored balls, we need at least 1 more.\n    # So, 5 (first color) + 5 (second color) + 1 (to ensure third color) = 11.\n    \n    return 11\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    num = 2023\n    while True:\n        if int(str(num) * n) % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4 * b - 9, 7)\n    solution = solve(equation, b)\n    return solution[0]\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    max_apples_for_Avril = 28 - (1+2+3+4+5)  # Subtract the sum of the distinct counts for the other five children\n    return max_apples_for_Avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n\n    cost_of_laptop = total_money * fraction_spent\n\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    ratio_jocye_to_lori = 3 / 2\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    jocye_speed = ratio_jocye_to_lori * lori_speed\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    # The average of the first two numbers\n    avg_initial = 60\n    \n    # The total sum of the first two numbers\n    total_initial = avg_initial * 2\n    \n    # The new average after adding the third number\n    new_avg = 70\n    \n    # The total sum after adding the third number, for three numbers\n    total_final = new_avg * 3\n    \n    # The newly added number is the difference between the two total sums\n    new_number = total_final - total_initial\n    \n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Convert times to datetime objects\n    school_out_time = datetime.strptime('15:22', '%H:%M')\n    bus_arrival_time = datetime.strptime('16:01', '%H:%M')\n    home_arrival_time = datetime.strptime('16:35', '%H:%M')\n    \n    # Calculate time spent walking to bus stop\n    walk_to_bus_duration = bus_arrival_time - school_out_time\n    \n    # Calculate time spent on the bus\n    bus_ride_duration = timedelta(minutes=18)\n    \n    # Calculate time spent walking from bus stop to home\n    time_after_bus_ride = bus_arrival_time + bus_ride_duration\n    walk_from_bus_duration = home_arrival_time - time_after_bus_ride\n    \n    # Calculate total walking time\n    total_walking_time = walk_to_bus_duration + walk_from_bus_duration\n    total_walking_time_minutes = total_walking_time.total_seconds() // 60\n    \n    return int(total_walking_time_minutes)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    last_term = 79\n    difference = second_term - first_term\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa initially\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    \n    # After giving away amount_given, Ken has $21 less than Lisa\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n\n    percentage_boys = (boys / total_children) * 100\n\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    difference = 6\n    \n    # Let n be the number of cookies eaten on the first day.\n    # The total number of cookies eaten over 5 days forms an arithmetic series.\n    # Sum of an arithmetic series is given by: sum = (n/2) * (first_term + last_term)\n    # In this case sum = total_cookies and n = days\n    # The last term can be expressed in terms of the first term: last_term = first_term + (n - 1) * difference\n    # Hence, the equation becomes: total_cookies = (days / 2) * (first_term + first_term + (days - 1) * difference)\n    \n    # Multiplying out the brackets and rearranging for first_term:\n    # 2 * total_cookies = days * (2 * first_term + (days - 1) * difference)\n    # 2 * total_cookies = days * 2 * first_term + days * (days - 1) * difference\n    # 2 * total_cookies - days * (days - 1) * difference = days * 2 * first_term\n    # first_term = (2 * total_cookies - days * (days - 1) * difference) / (days * 2)\n    \n    first_day_cookies = (2 * total_cookies - days * (days - 1) * difference) / (days * 2)\n    \n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Initialize the series\n    sequence = []\n    \n    # Generate the sequence according to the pattern\n    # 2 times 1, 3 times 2, 4 times 3, ..., until 9 times 8\n    for i in range(1, 9):\n        sequence.extend([i] * (i+1))\n\n    # Sort the sequence to find the median\n    sequence.sort()\n    n = len(sequence)\n\n    # Calculate the median\n    if n % 2 == 1:\n        # If odd number of elements, return the middle element\n        median = sequence[n // 2]\n    else:\n        # If even number of elements, return the average of the two middle elements\n        median = (sequence[(n // 2) - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_blue_and_orange = 18 + 8  # Total non-red marbles\n    # To ensure 2 red marbles, we must take out all non-red marbles + 2 red marbles\n    marbles_to_take = total_blue_and_orange + 2\n    return marbles_to_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        if (i % 2 == 0 and i % 3 != 0) or (i % 2 != 0 and i % 3 == 0):\n            continue\n        facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt\n\n    x = solve(Eq(sqrt(x) + sqrt(36), sqrt(81)), x)\n    return x[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n    \n    # Calculate common difference from first and fourth term\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Use the formula for the sum of an arithmetic series: S_n = n/2 * (2a + (n-1)d)\n    total_athletes = number_of_rows / 2 * (2 * first_term + (number_of_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Original chance of picking the car is 1/3 for each gate.\n    # If you pick gate 1, there's a 1/3 chance the car is there, and a 2/3 chance it's behind one of the other gates.\n    # When the host opens gate 3 with a goat, if the car was behind gate 2 or 3, it's now definitely behind gate 2.\n    # So, the probability that the car is behind gate 2 is 2/3, while the probability it is behind gate 1 is still 1/3.\n    # Therefore, it is statistically better to switch to gate 2.\n\n    # We return '2' to represent that you should choose gate 2 based on the statistical advantage.\n    return 2\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    x = 2\n    while not (x % 4 == 2 and x % 3 == 2 and x % 7 == 1):\n        x += 1\n    return x\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i*(i+1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    return 7  # The number of pokemon trainers does not change because the rate is the same\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # Define the algebraic symbol\n    total_spent = 6 * x  # Total amount spent is 6 times x\n    \n    return total_spent  # Return the algebraic expression\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Total ways to lend 7 different books to 3 students\n    # Each student must get exactly one book\n\n    # Choosing 1 book for the first student (7 options)\n    # Then 1 book for the second student (6 options)\n    # Then 1 book for the third student (5 options)\n    # The rest 4 books are not given out so they do not contribute to permutations.\n    ways = factorial(7) // (factorial(4) * factorial(3))\n\n    return ways\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money David had\n    x = symbols('x')\n    \n    # David spent $75 on CDs\n    remaining_after_cds = x - 75\n    \n    # Then he spent 1/4 of the remaining on batteries\n    remaining_after_batteries = remaining_after_cds - (remaining_after_cds / 4)\n    \n    # Finally, David is left with 1/3 of the original sum\n    equation = Eq(remaining_after_batteries, x / 3)\n    \n    # Solve the equation to find the original sum of money\n    initial_money = solve(equation, x)\n    \n    return initial_money[0]\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # 99-digit number is the repetition of \"928\" 33 times\n    repetitions = 99 // 3\n    remainder = (int(\"928\") * repetitions) % 9\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oplus = symbols('oplus')\n    \n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    \n    solutions = solve(equation, oplus)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    smallest, median, largest = symbols('smallest median largest')\n    \n    equation1 = Eq(smallest + median + largest, 56)\n    equation2 = Eq((smallest + median) / 2, 14)\n    equation3 = Eq((median + largest) / 2, 22)\n    \n    solutions = solve((equation1, equation2, equation3), (smallest, median, largest))\n    \n    return solutions[median]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 0, 2, 9] # Digits provided\n\n    # Start with the smallest digit in the ones place for the number to be even\n    even_digit = min([digit for digit in digits if digit % 2 == 0])\n    \n    # Remove the used digit from the list\n    digits.remove(even_digit)\n    \n    # Sort the remaining digits to get the smallest possible number\n    digits.sort()\n\n    # The smallest digit (other than 0) should be in the thousands place\n    # to form the smallest 4-digit number\n    if digits[0] == 0:\n        thousands_digit = digits[1]\n        hundreds_digit = digits[0]\n        tens_digit = digits[2]\n    else:\n        thousands_digit = digits[0]\n        hundreds_digit = digits[1]\n        tens_digit = digits[2]\n    \n    # Combine the digits to form the smallest 4-digit even number\n    smallest_even_number = thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + even_digit\n    \n    return smallest_even_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    num_containers = total_juice / per_container\n    return num_containers\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let's denote the number of bars each person bought as 'x'.\n    # Sour Sweets' bar costs 12p, and Eliot pays with 3 £1 coins, which equals 300p.\n    # Chocolate Drops' bar costs 17p, and Maya pays with 4 £1 coins, which equals 400p.\n    # They both receive the same amount of change, hence the cost of the bars they bought must be equal.\n    # This results in the equation: 12*x + change = 17*x + change,\n    # But since change is the same, we can ignore it for now and focus on the amount paid:\n    # 12*x (Eliot's total payment) + remaining_pence = 300p (amount of pounds he gave)\n    # Similarly for Maya,\n    # 17*x (Maya's total payment) + remaining_pence = 400p (amount of pounds she gave)\n    # As change is equal, we can set the equations equal to each other:\n    # 12*x + remaining_pence = 17*x + remaining_pence\n    # We can eliminate the remaining_pence since it's equal for both and solve for x.\n    # So we get the simplified equation: 300p - 12*x = 400p - 17*x\n    # Solving for x gives us the number of bars each person bought.\n\n    # Simplify the equation: 400p - 300p = 17*x - 12*x\n    # 100p = 5*x\n    # x = 100p / 5\n    x = 100 // 5\n\n    return x\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 1 + 12  # Tommy and his 12 friends\n    time_per_person = 142  # Minutes spent on Mathematics homework by each person\n\n    total_time = total_people * time_per_person\n\n    return total_time\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_charge = 2.5\n    additional_charge_per_km = 1.2\n    total_charge = 8.5\n    base_distance = 1.8\n\n    additional_charge = total_charge - base_charge\n    additional_km = additional_charge / additional_charge_per_km\n    total_distance = base_distance + additional_km\n\n    return total_distance\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(yellow + red + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Define the variable for the number of students in the class\n    n = symbols('n', integer=True, positive=True)\n    \n    # Using the Pigeonhole Principle, we need to solve for n from the inequality:\n    # n * 2 + 1 <= 80    because at least one student must get at least 3 apples\n    # rearranges to\n    # n <= (80 - 1) / 2\n    n_max = Eq(n * 2 + 1, 80)\n    \n    # Solve the equation for the maximum number of students\n    n_value = solve(n_max, n)[0]\n    \n    # The size of the class is n_value + 1, as at least one student must get 3 apples\n    return n_value + 1\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    return 8 * 2\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // capacity_big_car\n    small_cars_needed = girls_in_small_cars // capacity_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_years = 100\n    \n    # Add the current total age of the family to find out how much more they need to reach 100\n    current_total_age = mother_age + father_age + julia_age\n    # Each year, all three of them get one year older, so the total age increases by 3 each year\n    years_needed = (total_years - current_total_age) // 3  # Integer division since we count full years\n    \n    return years_needed\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 56 / 16\n    pounds_to_kg = ounces_to_pounds / 2.2\n    return round(pounds_to_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = x + 0.25 * x - 200\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    first_term = 5\n    last_term = 80\n    count = last_term - first_term + 1  # Count numbers in one direction (5 to 80)\n    total_sum = (first_term + last_term) * count // 2  # Sum of arithmetic sequence\n    return 2 * total_sum - last_term  # Double the sum and subtract the peak value\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        A = (100 * perm[0] + 10 * perm[1] + perm[2]) + \\\n            (100 * perm[1] + 10 * perm[2] + perm[3]) + \\\n            (100 * perm[2] + 10 * perm[3] + perm[4]) + \\\n            (100 * perm[3] + 10 * perm[4] + perm[5]) + \\\n            (100 * perm[4] + 10 * perm[5] + perm[6]) + \\\n            (100 * perm[5] + 10 * perm[6] + perm[7]) + \\\n            (100 * perm[6] + 10 * perm[7] + perm[8])\n        max_sum = max(max_sum, A)\n    return max_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    # Calculate the original price\n    sale_price = 32\n    discount_percentage = 20 / 100  # 20%\n    additional_discount = 4\n    \n    # The price after the initial discount is the sale price, so we can back-calculate the original price\n    original_price = sale_price / (1 - discount_percentage)\n    \n    # Calculate the new sale price after the additional discount\n    new_sale_price = sale_price - additional_discount\n    \n    # Calculate the total discount in dollars\n    total_discount = original_price - new_sale_price\n    \n    # Calculate the total discount as a percentage of the original price\n    total_discount_percentage = (total_discount / original_price) * 100\n    \n    return total_discount_percentage\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') < perm.index('B') < perm.index('C'):\n            total_count += 1\n            \n    return total_count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Analyze the pattern\n    # 10 * 10 = 1 means (1+0)*(1+0) = 1^2\n    # 11 * 11 = 4 means (1+1)*(1+1) = 2^2\n    # Therefore, we need to square the sum of the digits of the first number.\n    \n    # For 55 * 55 it is (5+5) * (5+5) = 10^2\n    ans = (5 + 5) ** 2\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_numbers = sorted([''.join(number) for number in permutations(digits, 6) if number[0] != '0'])\n    return int(all_numbers[504])\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # There are three slots to fill for a three-digit number: _ _ _\n    # The first slot can only be filled by 2 or 3 (since we can't start with 0 for a three-digit number),\n    # and there are 2 options.\n    first_slot_options = 2\n    \n    # Once the first slot is filled, the second slot can be filled by any two of the remaining numbers,\n    # and there are 2 options.\n    second_slot_options = 2\n    \n    # The third slot can only be filled by the remaining one number, and there is 1 option.\n    third_slot_options = 1\n    \n    # Multiplying the number of options for each slot together gives the total number of possible numbers.\n    total_numbers = first_slot_options * second_slot_options * third_slot_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 36) # Total students\n    equation2 = Eq((girls * 88 + boys * 91) / 36, 89) # Average score equation\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Let x be the number of days Alice takes off\n    # In 27 days, Alice works (27 - x) days and Bob works 27 days\n    # Alice's work rate is 1 job per 40 days, so in one day she does 1/40 of the job\n    # Bob's work rate is 1 job per 60 days, so in one day he does 1/60 of the job\n    # Equation representing total work done:\n    # (27 - x)*(1/40) + 27*(1/60) = 1 (1 complete job)\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((27 - x)*(1/40) + 27*(1/60), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for number in range(21, 50):\n        if number % 6 == 0 and number % 9 == 0:\n            multiples.append(number)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # let red = x, white = 2x, black = (2x * 4/3) = 8x/3\n    red, white, black = symbols('red white black')\n    eq1 = Eq(white, 2 * red)            # white to red ratio\n    eq2 = Eq(black, (white * 4) / 3)    # black to white ratio\n    eq3 = Eq(red + white + black, 136)  # total number of balls\n\n    # Solve for red, white, and black\n    solutions = solve((eq1, eq2, eq3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # The common difference in the arithmetic sequence can be found by subtracting consecutive terms\n    common_difference = 120 - 105  # which is 15\n\n    # The first term of the arithmetic sequence can be found by using the nth term formula:\n    # an = a1 + (n - 1) * d\n    # 105 = a1 + (7 - 1) * 15\n    # 105 = a1 + 6 * 15\n    # 105 = a1 + 90\n    # a1 = 105 - 90\n    first_term = 105 - 6 * common_difference\n\n    # The 100th term can be found similarly using the formula:\n    # a100 = a1 + (100 - 1) * d\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # There are only 2 colors, so we want to find the smallest number\n    # that guarantees we have a pair of one of the colors.\n\n    # We can take a sock of each color without having a matching pair: 2 socks.\n    # The next sock we take will have to match one of the previously taken socks.\n    # So, we need a total of 3 socks to be sure we have a matching pair.\n    \n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # If four years ago the combined age of 3 dogs was 24 years,\n    # their current combined age is 24 years + 3 dogs * 4 years/dog\n    current_combined_age = 24 + (3 * 4)\n    \n    # In 2 years' time, each dog will be 2 years older, therefore\n    # the combined age will be the current combined age + 3 dogs * 2 years/dog\n    future_combined_age = current_combined_age + (3 * 2)\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    # Let r be the number of marbles Ryan had originally\n    # Let a be the number of marbles Audrey had originally\n    # According to the given ratio 2:7\n    # r/a = 2/7 -> 7r = 2a\n    # According to the new ratio after transactions 1:3\n    # (r + 20)/(a - 80) = 1/3 -> 3(r + 20) = a - 80\n    # Now we have a system of two equations:\n    # 7r = 2a\n    # 3r + 60 = a - 80\n    # We solve this system for a (Audrey's original number of marbles)\n\n    from sympy import symbols, Eq, solve\n\n    r, a = symbols('r a')\n    equation1 = Eq(7*r, 2*a)\n    equation2 = Eq(3*r + 60, a - 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    return solutions[a]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Angle covered by hour hand per hour (360 degrees / 12 hours)\n    angle_per_hour = 360 / 12\n    # Angle covered by minute hand per minute (360 degrees / 60 minutes)\n    angle_per_minute = 360 / 60\n\n    # Angle covered by hour hand from 12 till 8.30\n    hour_hand_angle = (hour + minute/60) * angle_per_hour\n    # Angle covered by minute hand from 12 till 30 minutes\n    minute_hand_angle = minute * angle_per_minute\n\n    # Difference\n    angle_difference = abs(hour_hand_angle - minute_hand_angle)\n    \n    # The smaller angle between the hands (since it could be the inner or outer angle)\n    ans = min(angle_difference, 360 - angle_difference)\n\n    return ans\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # There are four sisters and each ate 5 apples.\n    remaining_apples = 20\n    \n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # total beads in one repeating pattern\n    black_beads_in_pattern = 3 + 3  # black beads in one repeating pattern\n\n    # Number of complete patterns\n    complete_patterns = total_beads // pattern_length\n\n    # Black beads in complete patterns\n    black_beads = complete_patterns * black_beads_in_pattern\n\n    # Remaining beads after complete patterns\n    remaining_beads = total_beads % pattern_length\n\n    # Count black beads in the remaining part\n    if remaining_beads > 3:\n        black_beads += 3\n    elif remaining_beads > 0:\n        black_beads += remaining_beads\n    \n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    required_time_minutes = 13 + 23 + 8 + 27\n    school_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    wakeup_time = school_time - timedelta(minutes=required_time_minutes)\n    return wakeup_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1)**((i - 1) // 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    # Let the number of chickens (and ducks because they are equal in number) be x\n    # Let the number of cows be y\n    # The total number of heads is 51, so x + y = 51\n    # Chickens and ducks have 2 legs each, cows have 4 legs each\n    # So the total number of legs is 2x (chickens) + 2x (ducks) + 4y (cows) = 160\n    # Simplifying, we get 4x (chickens and ducks) + 4y (cows) = 160\n    # We can divide the entire equation by 4 to simplify it: x + y = 40\n    \n    # Solve the system of equations:\n    # x + y = 51\n    # x + 2y = 80 (because 160/4 = 40 and the equation with legs is 4x + 4y = 160)\n    \n    # Hence we just need to solve these two equations for x and y\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # system of equations\n    equation1 = Eq(x + y, 51)\n    equation2 = Eq(x + 2*y, 80)\n\n    # solve the system\n    solution = solve((equation1, equation2), (x, y))\n\n    return solution[x]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    result = 4.2 + 7.8 + 7.5 - 2.5\n    return result\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                totals.add(total)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    # There are 4 entrances and 3 people.\n    # Let's consider the entrance options for Joe, Mike, and Tina as J, M, T respectively.\n    total_entrance_options = 4\n\n    # Since Joe and Mike cannot join the same entrance, we consider Joe's entrance as fixed.\n    # Mike has 3 options left (since he cannot join the same entrance as Joe).\n    mike_entrance_options = total_entrance_options - 1\n\n    # Tina can choose any of the 4 entrances as there is no restriction on her choice.\n    tina_entrance_options = total_entrance_options\n\n    # The total possibilities without considering order is:\n    total_possibilities = mike_entrance_options * tina_entrance_options\n\n    # The order in which they enter is uncertain, so we need to consider all permutations:\n    num_people = 3\n\n    # Calculating the number of permutations for 3 people to enter\n    permutations_people = len(list(permutations(range(num_people), num_people)))\n\n    # The final answer is the product of the two quantities.\n    return total_possibilities * permutations_people\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1/5)\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    total_time_hours = 13 * 24 + 22  # days to hours\n\n    average_speed = total_distance / total_time_hours\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2\n    concentration1 = 0.40\n    volume2 = 3\n    concentration2 = 0.70\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    # Find the smallest multiple of 11 that is greater than or equal to 50\n    min_val = 50 - (50 % 11)\n    if (min_val < 50):\n        min_val += 11\n\n    # Find the largest multiple of 11 that is less than or equal to 150\n    max_val = 150 - (150 % 11)\n\n    # Count the multiples of 11 in this range\n    count = ((max_val - min_val) // 11) + 1\n    \n    return count\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let w be the initial number of women, and m be the initial number of men.\n    # After the first bus, the number of women becomes w - 36.\n    # According to the problem, we then have (w - 36) = (3/5) * m.\n    # After the second bus, the number of men becomes m - 48.\n    # Since there is now equal number of men and women, we have w - 36 = m - 48.\n    # Now we can set up a system of equations and solve for w and m.\n\n    # w - 36 = (3/5)m  -->  Equation 1\n    # m - 48 = w - 36   -->  Equation 2\n\n    # From Equation 2, we get: m = w - 36 + 48 = w + 12\n    # We substitute m in Equation 1: w - 36 = (3/5)(w + 12)\n\n    # Solving the equation:\n    w = symbols('w')\n    equation = Eq(w - 36, (3/5) * (w + 12))\n    solution_w = solve(equation, w)\n\n    # Calculate m using the value of w we just found:\n    m = solution_w[0] + 12\n\n    # The total number of people at the bus stop at first:\n    total_people = solution_w[0] + m\n\n    return total_people\n\n# Call the solution function and assign the result to `ans`\nans = solution()\n\n# End of the function"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_away_first = 339\n    bought_stamps = 455\n    gave_away_second = 777\n\n    remaining_stamps = initial_stamps - gave_away_first + bought_stamps - gave_away_second\n    \n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n    \n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    return sum(numbers)\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(20, 30))\n    return primes[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fatouma = symbols('fatouma')\n\n    equation = Eq(fatouma + 2, 2 * (fatouma - 5))\n\n    age = solve(equation, fatouma)[0]\n\n    return age\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x in range(1, 14):\n        for y in range(1, 14):\n            for z in range(1, 14):\n                if x + y + z == 14 and x != y and y != z and x != z:\n                    sorted_way = sorted([x, y, z])\n                    if sorted_way not in ways:\n                        ways.append(sorted_way)\n    return ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    # Using the Pigeonhole Principle, calculate the minimum class size\n    # for at least 4 students to have the same height when height can range\n    # from 124cm to 132cm (inclusive)\n\n    # Range of possible heights\n    height_range = 132 - 124 + 1\n    \n    # Each possible height is a pigeonhole; we need at least 4 students (pigeons) in one of them\n    # Therefore, we add 3 to the total height range to ensure that at least 4 students share a height\n    min_class_size = (height_range - 1) * 3 + 1\n\n    return min_class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # Cost of three pens at 50p each\n    amount_paid = 5        # Amount paid by Jennifer (£5)\n    change = amount_paid - total_cost  # Calculate the change\n\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    more_english_books = english_books - chinese_books\n\n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Since the player who makes the total number of oranges removed reach a multiple of 4 will lose,\n    # Fred needs to remove enough oranges to make the remaining count a multiple of 4.\n\n    total_oranges = 15\n    for remove in range(1, 4):\n        if (total_oranges - remove) % 4 == 0:\n            return remove  # Found the number of oranges to remove to win\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cooking_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Number of students participating in each activity\n    go = 42\n    checkers = 55\n    chess = 33\n\n    # Number of students participating in two activities\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n\n    # Number of students participating in all three activities\n    all_three = 5\n\n    # Applying the inclusion-exclusion principle\n    total = go + checkers + chess\n    total -= go_checkers + go_chess + checkers_chess\n    total += all_three  # Adding back the students who were counted thrice\n\n    return total\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Current ages\n    oliver_age = 20\n    lin_age = 26\n    \n    # Current sum of ages\n    current_sum = oliver_age + lin_age\n    \n    # Desired sum of ages\n    desired_sum = 48\n    \n    # Calculate the number of years required for the sum of their ages to be 48\n    # Since both of them get older by 1 year each year, we'll divide the difference by 2\n    years_later = (desired_sum - current_sum) // 2\n    \n    return years_later\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    \n    total_cost = num_tickets * cost_per_ticket\n    \n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3\n    \n    # Since there are 40 poles, there are 39 intervals between them\n    total_intervals = number_of_poles - 1\n    total_distance = total_intervals * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    for i in range(2, 245 + 1):\n        if 245 % i**3 == 0:\n            p = i\n            break\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 0-9\n    digits = list(range(10))\n    perm = permutations(digits, 6)  # We need six unique digits for E, S, A, M, O, and the first digit of SASMO is not 0.\n\n    for p in perm:\n        E, S, A, M, O = p[:5]\n        if S == 0 or E == 0:  # Since ESSE and SASMO can not start with 0, we avoid these solutions.\n            continue\n        ESSE = E*1000 + S*100 + S*10 + E\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_meters = 736 / 100.0\n    return cm_in_meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([-1 if i % 2 else 1 for i in range(64, 45, -2)]) * 62 + sum(range(64, 45, -2))\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = (1/4) * this_year_production\n    last_year_min_production = last_year_production + 1\n\n    return int(last_year_min_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n    \n    attendance_rate = present_students / total_students * 100\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    fraction1_numerator = 5\n    fraction1_denominator = 15\n    fraction2_numerator = 8\n\n    ans = (fraction1_denominator / fraction1_numerator) * fraction2_numerator\n\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_series = 0\n    for i in range(2, 2018):\n        sum_series += sum(1 / i for j in range(1, i))\n    return sum_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim stands 4th from the front, 3rd from the back.\n    # This means there are 3 people in front of him and 2 people behind.\n    total_vertical = 3 + 1 + 2  # Tim is counted as 1 here.\n\n    # Tim stands 1st from left to right and 4th from right to left.\n    # This means there are 3 people to the right of him and 0 people to the left.\n    total_horizontal = 0 + 1 + 3  # Tim is counted as 1 here.\n\n    # Multiply the two totals to get the total number of band members.\n    ans = total_vertical * total_horizontal \n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(apples / oranges, 3 / 8)\n    equation2 = Eq((apples - 1) / oranges, 1 / 3)\n\n    solution = solve((equation1, equation2), (apples, oranges))\n\n    return solution[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda number: abs(100 - number))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_amount = 150\n    daily_savings = 2.40\n    days_in_week = 7\n\n    total_days = total_amount / daily_savings\n    total_weeks = total_days / days_in_week\n\n    # Since we need the least number of whole weeks, we take the ceiling value\n    least_weeks = -(-total_days // days_in_week)\n\n    return least_weeks\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    original_sum = sum(range(1, 15))  # Sum of numbers from 1 to 14\n    augmented_sum = original_sum + 2019  # The new sum after adding 2019\n\n    # Since we are looking for the sum of 8 consecutive numbers we can define\n    # those numbers as x, x+1, x+2, x+3, x+4, x+5, x+6, x+7 and their sum as\n    # 8x + 28 and it should be equal to the augmented_sum.\n\n    # We can now solve the equation to find the value of x.\n    x = (augmented_sum - 28) // 8\n    return x\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = 6.5 / 0.25\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of one chicken as 'c', one rabbit as 'r', and one kangaroo as 'k'\n    c, r, k = symbols('c r k')\n\n    # According to the problem, we set up our equations\n    equation1 = Eq(2 * r, 6 * c)  # The weight of 2 rabbits is equal to 6 chickens\n    equation2 = Eq(3 * k, 4 * r)  # The weight of 3 kangaroos is equal to 4 rabbits\n\n    # Solving for the weights of the rabbit and kangaroo in terms of chickens\n    solutions = solve((equation1, equation2), (c, r, k))\n\n    # One kangaroo weighs the same as some number of chickens. We need to find this number\n    weight_kangaroo_in_chickens = solutions[k] / solutions[c]\n\n    return weight_kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    # The number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of the arithmetic sequence\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    word_length = len(word)\n    arrangements = factorial(word_length)\n\n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n\n    return arrangements\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    cutting_wood = 3\n    weaving_grass = 1\n    drying_wood = 5\n    mowing_grass = 1\n    preparing_food = 1\n    soaking_grass = 1\n    choosing_wood = 1\n\n    # Since grass can be soaked while doing other things, it does not consume separate days\n    # and it is the same case for choosing wood, which can be done during cutting wood\n    ans = max(cutting_wood + drying_wood + weaving_grass, mowing_grass) + preparing_food\n\n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_other_factors = 836 + 162 + 2\n\n    ans = common_factor * sum_of_other_factors\n\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age_now = 10\n    difference_in_age_then = 2\n    brother_age_then = ashley_age_now - 3 - difference_in_age_then\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White's position from both ends is the 7th.\n    # Since she is in the exact middle, there are 6 people in front of her and 6 people behind her.\n    # Therefore, the total number of dwarves is the number of people in front plus the number of people behind.\n    total_dwarves = (7 - 1) * 2\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    max_participants_per_school = 3\n    total_participants = 100\n    \n    # Using Pigeonhole Principle\n    max_schools = (total_participants + max_participants_per_school - 1) // max_participants_per_school\n    \n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += (2018 + i) / 5 - ((2018 + i) // 5)\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i % 6 == 0) and ((i // 6) ** 0.5).is_integer() and ((i * 6) ** (1/3)).is_integer():\n            return i\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Let the distance traveled by the slower train be x km\n    # Then the distance traveled by the faster train is x + 70 km\n    \n    # The time taken for the trains to meet is the same for both trains\n    # Time = Distance / Speed\n    \n    # So, for the slower train, time = x / 36 hours\n    # and for the faster train, time = (x + 70) / 48 hours\n    \n    # Since both times are equal, we have\n    # x / 36 = (x + 70) / 48\n    # Cross multiply to solve for x\n    x = symbols('x')\n    equation = Eq(x / 36, (x + 70) / 48)\n    solution = solve(equation, x)\n    \n    # Calculate the total distance\n    total_distance = solution[0] + (solution[0] + 70)\n    \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "def solution():\n    from fractions import Fraction\n\n    ans = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position in the queue gives us the dimensions of the array\n    rows = 4 + 3 - 1  # 4 from the front, 3 from the back, subtract 1 since Tim is counted in both\n    cols = 4 + 7 - 1  # 4 from the left, 7 from the right, subtract 1 for the same reason\n    \n    # Multiply the number of rows by the number of columns to get the total\n    total_members = rows * cols\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Values of the coins in cents\n    coins = [50, 20, 10, 5]\n\n    # Total amount Zoey had before losing one coin\n    total = sum(coins)\n\n    # Iterate through the coins to determine which one she lost\n    for lost_coin in coins:\n        if (total - lost_coin) == 2 * (total - lost_coin - sum(coins)):\n            return lost_coin\n\n# Call the function and assign the result to `ans`\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        if (6 * (boat + 1)).is_integer() and ((6 * (boat + 1)) % 9) == 0:\n            students = 6 * (boat + 1)\n            break\n        boat += 1\n    return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize the counter for the different pairs\n    pairs_count = 0\n\n    # Loop through all the possible pairs of numbers from 1 to 100\n    for num1 in range(1, 101):\n        for num2 in range(num1 + 1, 101):  # Ensure num2 > num1 to have distinct pairs\n            if (num1 + num2) % 5 == 0:\n                pairs_count += 1\n\n    return pairs_count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    equation1 = Eq(total_chocolates - 18*friends, 41)\n    equation2 = Eq(23*friends - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    remaining_chocolates = Eq(total_chocolates - 20*friends)\n\n    remaining = solve(remaining_chocolates.subs(solutions))\n\n    return remaining[total_chocolates]\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables for Rasidah's and Chai Seng's original amounts\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Create equations based on the information given\n    # Rasidah had $48 less than Chai Seng: chai_seng - rasidah = 48\n    # Rasidah spent 3/5 of her money: rasidah - 3/5 * rasidah\n    # Chai Seng spent 6/7 of his money: chai_seng - 6/7 * chai_seng\n    # Chai Seng had 1/2 as much money left as Rasidah: (chai_seng - 6/7 * chai_seng) = 1/2 * (rasidah - 3/5 * rasidah)\n\n    equation1 = Eq(chai_seng - rasidah, 48)\n    equation2 = Eq(chai_seng * 1/7, rasidah * 1/2 * 2/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens >= 10 or tens <= hundreds:  # make sure digits are in increasing order and less than 10\n                continue\n            ones = thousands + hundreds + tens\n            if ones >= 10 or ones <= tens:  # make sure digits are in increasing order and less than 10\n                continue\n            if thousands + hundreds + tens + ones == 16:\n                return ones\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = [0, 2, 4]\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            if i != j and i != 0:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    uphill_distance = 5 * 3  # speed * time\n    downhill_distance = 10 * 2  # speed * time\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n    average_speed = total_distance / total_time  # total distance divided by total time\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Calculate the cost for the first 5 kolowatt-hours\n    initial_cost = 5 * 2 + 3  # 5 kWh at $2 each plus $3 service fee\n    # Subtract the initial cost from the total cost to find the cost of additional kWh\n    additional_cost = 63 - initial_cost\n    # Calculate the number of additional kWh she can use\n    additional_kWh = additional_cost / 1  # $1 per additional kWh\n    # Add the first 5 kWh to the additional kWh\n    total_kWh = 5 + additional_kWh\n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_of_63 = 54\n    whole_number = 63\n    numerator = fraction_of_63 * 7\n\n    return numerator\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create congruences based on the problem statement\n    # x ≡ 2 (mod 3)\n    # x ≡ 6 (mod 7)\n    # x ≡ 10 (mod 11)\n    congruences = [(2, 3), (6, 7), (10, 11)]\n\n    # Solve the system of congruences for the smallest x\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factors_4320 = [2, 2, 2, 2, 2, 3, 3, 3, 5]  # Prime factorization of 4320\n    prime_factors_3_over_2 = [3, -2]  # Prime factors of (3/2)^n = 3^n * 2^-n\n    \n    # The power of 2 in (3/2)^n must be non-negative for the product to be an integer\n    # (3/2)^n will contribute negative powers of 2, thus we need to cancel it with 4320's powers of 2\n    min_power_of_2 = -min(prime_factors_4320.count(2), n * prime_factors_3_over_2.count(-2))\n    \n    # n can range from 0 (include 4320's own prime factors only) to\n    # the number of 2's in 4320's prime factorization to cancel out negative powers of 2\n    ans = prime_factors_4320.count(2) - min_power_of_2 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = -(-total_cookies // cookies_per_small_box)\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # At most, all students that passed one test, passed all three\n    # Thus, we take the total number of students that passed at least one test\n    # and subtract the sum of students who passed each test individually\n    # because those could have been counted multiple times.\n    # However, since we've subtracted those that have passed two tests too many times,\n    # they would be \"non-passers\" now. So we have to add them back to get the maximum.\n    # We don't know how many passed exactly two tests, but we know it can't be more\n    # than those who passed each test. So we take the minimum passed test count,\n    # which would be the maximum number that could have passed all three.\n\n    total_passed_at_least_one = 43\n    \n    # Calculate number of pupils who passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Calculate the minimum of the passed subjects, for the maximum overlap.\n    min_passed_tests = min(passed_math, passed_science, passed_english)\n    \n    # Calculate the overlap, considering the minimum passed tests out of the three subjects.\n    overlap = (passed_math + passed_science + passed_english) - total_passed_at_least_one\n    \n    # The maximum number that could have passed all three is the minimum passed tests minus\n    # the calculated overlap, because the overlap could contribute to the maximum overlap.\n    max_all_passed = min_passed_tests - overlap\n    \n    # Make sure the maximum number of pupils who passed all tests can't be negative.\n    max_all_passed = max(0, max_all_passed)\n    \n    return max_all_passed\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_punch = 20 + 30\n    fruit_juice_first_punch = 0.35 * 20\n    fruit_juice_second_punch = 0.60 * 30\n    total_fruit_juice = fruit_juice_first_punch + fruit_juice_second_punch\n    concentration_percent = (total_fruit_juice / total_punch) * 100\n    return concentration_percent\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbol for the original quantity in warehouse B\n    original_B = symbols('original_B') \n    \n    # Equation representing the relationship after the shipments\n    equation = Eq((50 + 12), 2 * (original_B - 16))\n    \n    # Solve the equation\n    original_quantity_B = solve(equation, original_B)\n    \n    return original_quantity_B[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 41, 43]  # Given prime numbers with a missing prime\n    for num in range(primes[1] + 1, primes[2]):  # Start searching between 31 and 41\n        for i in range(2, num):\n            if num % i == 0:  # Not a prime number if divisible by i\n                break\n        else:  # If not divisible by any i, it's a prime number\n            return num  # This is the missing prime number\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    # Count the frequency of each letter in 'COLLEGE'\n    letter_counts = {\"C\": 1, \"O\": 1, \"L\": 2, \"E\": 2, \"G\": 1}\n    \n    # Find the total number of letters\n    total_letters = sum(letter_counts.values())\n    \n    # Calculate the total permutations of the letters\n    total_permutations = factorial(total_letters)\n    \n    # Divide by the factorial of each letter's frequency to account for indistinguishable arrangements\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.5 * 0.2 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Define the ratios\n    fishes_to_rabbit = 3   # Owen gave 3 fishes to get 1 rabbit\n    rabbits_to_wheat = 2/3 # Oscar gave 2 rabbits to get 3 packs of wheat\n\n    # Calculate fishes to wheat ratio\n    # By multiplying the ratios we get how many fishes are needed for one pack of wheat\n    fishes_to_wheat = fishes_to_rabbit * rabbits_to_wheat\n\n    return fishes_to_wheat\n\n# Calculate the final answer\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Assuming the number of people is below 1000\n        if (people + 7) % 3 == 0 and (people - 3) % 7 == 0:\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    lowest, _ = solve_congruence(*congruences)\n    \n    # Find the minimum number that satisfies the conditions and is between 400 and 500\n    ans = lowest\n    while ans <= 500:\n        if ans >= 400 and ans <= 500:\n            return ans\n        ans += 4 * 5 * 7  # Increase by the product of the mods since it's the next solution\n\n    return None\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # Since we include 0, we go from 0 to 9\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if 0 <= x3 < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Dell had twice as many stickers as Ginnie\n    ginnie = 32 // 2\n\n    # Ginnie had 4 times as many stickers as Lyn\n    lyn = ginnie // 4\n\n    # Total stickers Ginnie and Lyn have together\n    total = ginnie + lyn\n\n    return total\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_a = 2\n    ratio_b = 3\n    bigger_share = (ratio_b / (ratio_a + ratio_b)) * total_amount\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of the empty bottle and the weight of the apple juice\n    bottle_weight, juice_weight = symbols('bottle_weight juice_weight')\n\n    # Define equations based on the given information\n    equation1 = Eq((5/6) * juice_weight + bottle_weight, 4.6)\n    equation2 = Eq((2/3) * juice_weight + bottle_weight, 4.45)\n\n    # Solve the system of equations\n    solved_weights = solve((equation1, equation2), (bottle_weight, juice_weight))\n\n    # Extract the weight of the empty bottle and convert it to grams\n    empty_bottle_weight_grams = solved_weights[bottle_weight] * 1000\n\n    return empty_bottle_weight_grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    # Let x be Lisa's favourite number\n    # According to the problem, we have: 2x - 3 = 19\n    # By using simple algebra, we can determine Lisa's favourite number by adding 3 to 19 and then dividing by 2\n    \n    result = (19 + 3) / 2\n    return result\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 != 0:  # Check if the number is odd\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 5:  # Check if the sum of digits is 5\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages = 0\n    digits_used = 0\n    \n    # Numbers 1-9 use 1 digit each\n    for i in range(1, 10):\n        if digits_used + 9 < total_digits:\n            digits_used += 9\n            pages += 9\n        else:\n            pages += (total_digits - digits_used)\n            return pages\n    \n    # Numbers 10-99 use 2 digits each\n    for i in range(10, 100):\n        if digits_used + 2 * 90 < total_digits:\n            digits_used += 2 * 90\n            pages += 90\n        else:\n            remaining = (total_digits - digits_used) // 2\n            pages += remaining\n            return pages\n    \n    # Numbers 100-999 use 3 digits each\n    for i in range(100, 1000):\n        if digits_used + 3 * 900 < total_digits:\n            digits_used += 3 * 900\n            pages += 900\n        else:\n            remaining = (total_digits - digits_used) // 3\n            pages += remaining\n            return pages\n    \n    # Numbers 1000 and onwards use 4 digits each\n    pages += (total_digits - digits_used) // 4\n    \n    return pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Since we are asked to calculate, but no specific operation is given,\n    # let's assume this is a multiplication operation for two whole numbers\n    # not found within a standard multiplication table.\n    number1 = 123  # A whole number not commonly found in multiplication tables\n    number2 = 456  # Another whole number not commonly found in multiplication tables\n\n    ans = number1 * number2  # Multiplying the two whole numbers\n\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_after_transfer = total_pupils // 2  # Divided by 2 to get the same number in each room\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    increment = 2\n    while True:\n        next_term = term + increment\n        if next_term >= 100:\n            break\n        term = next_term\n        increment += 2\n    return term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote adam's weight as A, ben's weight as B, and carl's weight as C.\n    # Based on the question we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Now we want to find the total weight A + B + C.\n    # We can sum the three equations we have to get:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # Then divide by 2 to get the total weight\n    total_double = 102 + 97 + 93\n    total_weight = total_double / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spent = 23\n    book_price = 3.40\n    magazine_price = 1.60\n    \n    for books in range(total_spent + 1):\n        magazines = (total_spent - books * book_price) / magazine_price\n        if magazines.is_integer() and magazines >= 0:\n            return int(magazines)\n            \nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38 * 2  # Since giving away 38 makes them equal\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n    total_pages = sum(solutions.values())\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Iterate through the range of plausible ages for Mr. Lv (e.g., 0-99)\n    for age in range(100):\n        # Convert the age in Base 10 to a string, append \"0\", then convert back to int with Base 3\n        base3_age = int(str(age) + \"0\", 3)\n        # Check if the age in Base 3 equals the age in Base 10\n        if base3_age == age:\n            return age  # Return the matching age\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5/8 + 1/17) * 8 + 9/17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors_of_7007 = []\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if 7007 % i == 0 and i % 7 == 0:  # Must be a factor of 7007 and a multiple of 7\n            factors_of_7007.append(i)\n            if len(factors_of_7007) == 2:  # We only need two factors\n                break\n    ans = sum(factors_of_7007)  # Sum of the two factors\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "from math import factorial\n\ndef solution():\n    num_people = 7\n    num_seats = 8\n    \n    # Since the rotation of the table yields the same order, one person's seat is fixed\n    # The rest can be arranged in any order, so we permute the remaining seats\n    # which is (num_people - 1)! because one seat is always empty\n    arrangements = factorial(num_people-1)\n    \n    return arrangements\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let o represent the initial number of orchids\n    # Let t represent the initial number of tulips\n    # Let r represent the initial number of roses\n    o, t, r = symbols('o t r')\n    \n    # Equation based on the ratio 3o = 5t\n    ratio_eq = Eq(3 * o, 5 * t)\n    \n    # Equation based on the total number of flowers\n    total_eq = Eq(o + t + r, 3616)\n    \n    # Equation based on the flowers left after selling\n    sold_eq = Eq(0.6 * o + 0.8 * t + 0.75 * r, 2644)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_eq, sold_eq), (o, t, r))\n    \n    # Get the initial number of orchids\n    return solutions[o]\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    return 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    digits = set(range(10)) - {2, 0, 1, 9}\n\n    for A in digits:\n        for M in digits - {A}:\n            for C in digits - {A, M}:\n                number = int(f\"20{A}{M}C19\")\n                if number % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    return solutions[B]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let c be the cost of one piece of chocolate cake in dollars               \n    # Let ch be the cost of one piece of cheesecake in dollars\n    # It is given that 1 cookie costs $9, so the cost for 5 cookies is $45\n\n    # According to the given information, we have the system of equations:\n    # 3*c = 2*ch  (1)\n    # 3*ch = 45   (2)\n\n    # From (2), we can express ch as:\n    # ch = 45 / 3\n\n    ch = 45 / 3\n\n    # Then substituting the value of ch in (1), we get:\n    # c = (2/3) * ch\n    c = (2/3) * ch\n\n    return c\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa, mother = symbols('melissa mother')\n    \n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother - melissa, 32 - 8)\n    \n    # Now, Melissa's mother is three times as old as Melissa\n    equation2 = Eq(mother, 3 * melissa)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n    \n    return solutions[melissa]\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    decimal_part = \"857142\"  # 6/7 recurring part in decimal\n    num_repeats = 58 // len(decimal_part)  # The number of complete sequence repeats\n    remaining_digits = 58 % len(decimal_part)  # The remaining digits after the complete repeats\n\n    # Sum of digits in the repeating part\n    sum_repeat = sum(int(digit) for digit in decimal_part)\n\n    # Sum of digits in the incomplete part\n    sum_incomplete = sum(int(decimal_part[i]) for i in range(remaining_digits))\n\n    # Total sum is sum of repeats plus sum of remaining digits\n    total_sum = (sum_repeat * num_repeats) + sum_incomplete\n    return total_sum\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n    eaten_candy = symbols('eaten_candy')\n\n    # Mike will have 6 pieces after eating some candy.\n    equation1 = Eq(mike_candy - eaten_candy, 6)\n    # Valeria will have 22 pieces after eating some candy.\n    equation2 = Eq(valeria_candy - eaten_candy, 22)\n    # The total candy they have is 36.\n    equation3 = Eq(mike_candy + valeria_candy, 36)\n    # Mike and Valeria eat the same amount of candy.\n    equation4 = Eq(mike_candy - 6, valeria_candy - 22)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (mike_candy, valeria_candy, eaten_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    num1 = Fraction(473, 100)           # 4.73 as a fraction\n    num2 = Fraction(477, 100)           # 4.77 as a fraction\n    num3 = Fraction(4737, 1000)         # 4.737 as a fraction\n    num4 = 4 + Fraction(73, 99)          # 4.73 repeating as a fraction\n\n    smallest_fraction = min(num1, num2, num3, num4)\n    ans = float(smallest_fraction)\n\n    return ans\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    eggs_sold_second = (remaining_eggs + 7) * 2\n    total_eggs_after_first_sale = remaining_eggs + eggs_sold_second\n    eggs_sold_first = total_eggs_after_first_sale + 16\n    initial_eggs = (eggs_sold_first * 2) - 16\n\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    numbers = [33, 29, 34, 28, 27, 30]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    original_price = final_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P1, P6 = symbols('P1 P6')\n    equation1 = Eq(P1 + P6, 120)  # Total number of students\n    equation2 = Eq(P6 * 2 + P1 / 2, 180)  # Total number of buckets\n\n    solutions = solve((equation1, equation2), (P1, P6))\n\n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_for_one_coin = 2  # Heads or Tails\n    total_outcomes = outcomes_for_one_coin ** 2  # Total outcomes for two tosses\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    \n    pencils = 55\n    pens = 143\n    common_factor = gcd(pencils, pens)\n    \n    return common_factor\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import solve, sqrt, symbols\n\n    PA, x = symbols('PA x')\n    \n    # Based on the property that the squares of the lengths from the vertex to the points P, B, C, D, G\n    # should add up to 4 times the square of length from the vertex to point A (the center of the sphere).\n    # Hence, we have an equation deriving from the following property: PB^2 + PC^2 + PD^2 + PG^2 = 4 * PA^2\n    \n    # PB = 60*sqrt(10), PC = 60*sqrt(5), PD = 120*sqrt(2), PG = 36*sqrt(7).\n    # We can express PB, PC, PD, PG in terms of PA and x (the edge of the cube),\n    # where PB^2 = PA^2 + (x-PA)^2, PC^2 = PA^2 + PA^2, PD^2 = (x-PA)^2 + (x-PA)^2, PG^2 = 3*x^2.\n    # We know that x = PG / sqrt(3) by the property of the cube diagonal being sqrt(3) times the edge length.\n    \n    # Set up the equation according to the above properties.\n    equation = Eq((PA**2 + (x-PA)**2) + 2*PA**2 + 2*(x-PA)**2 + 3*x**2, 4*PA**2)\n    \n    # We solve for x first since we know PG.\n    x_val = solve(Eq(3*x**2, (36*sqrt(7))**2), x)\n    \n    # We take the positive value of x because lengths cannot be negative.\n    x_val = max(x_val)\n    \n    # Now we substitute the value of x in the equation to solve for PA.\n    equation = equation.subs(x, x_val)\n\n    PA_val = solve(equation, PA)\n    \n    # We take the positive value of PA because lengths cannot be negative.\n    ans = max(PA_val)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit: ratio 3:1\n    # Oscar trades 2 rabbits for 3 packs of wheat: ratio 2:3\n\n    # Find fish to rabbit ratio\n    fish_to_rabbit_ratio = 3 / 1\n\n    # Find rabbit to wheat ratio (since 2 rabbits === 3 wheat, then 1 rabbit === 3/2 wheat)\n    rabbit_to_wheat_ratio = 3 / 2\n\n    # Find fish to wheat ratio\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    return fish_to_wheat_ratio\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    plants_joel_left = (remaining_plants + 2) * 2\n    plants_valerie_left = (plants_joel_left + 3) * 2\n    original_plants = (plants_valerie_left + 1) * 2\n    return original_plants\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    dividend = 9 * 4 + 2\n    correct_answer = dividend // 4\n    johnny_answer = (9 * 2) + 4\n\n    ans = correct_answer if johnny_answer == dividend else correct_answer\n    return ans\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes_needed = 66.5 / apples_per_box\n    return int(total_boxes_needed) if total_boxes_needed.is_integer() else int(total_boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    # Define the possible scores for one die\n    die_scores = range(1, 7)\n    # Initialize a list to hold the pairs that sum to 8\n    ways_to_score_8 = []\n\n    for die1 in die_scores:\n        for die2 in die_scores:\n            if die1 + die2 == 8:\n                # Save the pair as a tuple\n                ways_to_score_8.append((die1, die2))\n\n    # The answer is the number of tuples in the list\n    ans = len(ways_to_score_8)\n    return ans, ways_to_score_8\n\nans, ways_to_score_8 = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Generate all possible combinations with repetitions allowed for 1, 2, and 3 digit numbers.\n    for i in range(1, 4):\n        for number_tuple in permutations(digits, i):\n            number = int(''.join(number_tuple))\n            if number < 100 and isprime(number):\n                primes.add(number)\n\n    return len(primes)\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of students in the canteen\n    x = symbols('x')\n\n    # Initial number of boys: 0.4 * x\n    # After 16 boys left: 0.4 * x - 16\n    # After 16 girls entered: x + 16 (since the total number of students is now x + 16)\n    # According to the problem, the boys now make up 2/15 of the students: (0.4 * x - 16) / (x + 16) = 2/15\n    equation = Eq((0.4 * x - 16) / (x + 16), 2/15)\n\n    # Solve for x\n    total_students_initially = solve(equation, x)\n\n    # Since we want the number of girls after the change:\n    # Total girls after the change = Total students after the change - Boys after the change\n    # Total students after the change = total_students_initially[0] + 16\n    # Boys after the change = 0.4 * total_students_initially[0] - 16\n    # Girls after the change = Total students after the change - Boys after the change\n    boys_after_change = 0.4 * total_students_initially[0] - 16\n    total_students_after_change = total_students_initially[0] + 16\n    girls_after_change = total_students_after_change - boys_after_change\n\n    return round(girls_after_change)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the costs of the necklace, bracelet, and ring\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(necklace, 2 * bracelet)        # Necklace costs twice as much as the bracelet\n    equation2 = Eq(ring, bracelet - 10)           # The ring is £10 cheaper than the bracelet\n    equation3 = Eq(necklace + bracelet + ring, 350)  # Total cost of all three items\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterate through all possible four-digit numbers\n    for N in range(1000, 10000):\n        # Convert the number to a string to work with individual digits\n        str_N = str(N)\n        \n        # Iterate over each digit to remove it and form a three-digit number\n        for i in range(4):\n            # Create a new number M by omitting one digit\n            M = int(str_N[:i] + str_N[i+1:])\n            \n            # Check if the difference between the original number and the new number is 2021\n            if N - M == 2021:\n                return N\n    return None\n\nans = solution() "
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions where needed\n    # 3 1/3 = 10/3, 4 1/2 = 9/2, 4 2/3 = 14/3, 2 2/15 = 32/15, 1 1/20 = 21/20\n\n    # Calculate the numerator\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n\n    # Calculate the denominator\n    denominator = (Fraction(62, 75) - 0.16)\n\n    # Calculate the division\n    division = numerator / denominator\n\n    # Calculate the second fraction in the division\n    second_fraction_numerator = 3.5 + Fraction(14, 3) + Fraction(32, 15)\n    second_fraction_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    second_fraction = second_fraction_numerator / second_fraction_denominator\n\n    # Calculate the final result\n    result = division / second_fraction\n\n    # Return the result as a float\n    return float(result)\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the given information\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    num_swimming = total_students * (percent_swimming / 100)\n    num_jogging = total_students * (percent_jogging / 100)\n    num_neither = total_students * (percent_neither / 100)\n\n    # Using the inclusion-exclusion principle to find the number of students who like both\n    num_both = num_swimming + num_jogging - (total_students - num_neither)\n\n    return int(num_both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    rate_a = 1 / 15\n    # B's work rate per day\n    rate_b = 1 / 10\n    # Combined work rate per day when A and B work together\n    combined_rate = rate_a + rate_b\n    \n    # Work done in 4 days by A and B together\n    work_done = 4 * combined_rate\n    \n    # Remaining work to be done after 4 days\n    remaining_work = 1 - work_done\n    \n    # Time required for B to complete the remaining work alone\n    time_b = remaining_work / rate_b\n    \n    return time_b\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    number_of_tickets = 16\n    cost_per_ticket = 112\n    total_cost = number_of_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150  # length of the road in metres\n    tree_spacing = 10  # spacing between trees in metres\n\n    # Calculate the number of trees. One is added for the tree at the beginning.\n    num_trees = road_length // tree_spacing + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    total_time_minutes = 2 * 60  # converting hours to minutes\n    rate_linda = 1/5  # Linda's rate in problems per minute\n    rate_cici = 1/6  # Cici's rate in problems per minute\n    combined_rate = rate_linda + rate_cici  # combined rate of Linda and Cici per minute\n    \n    total_problems = combined_rate * total_time_minutes  # total number of problems they can do together\n    \n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    # Let's denote the number of apples Amy gives to John as x.\n    # After giving x apples, Amy will have (amy_initial - x) apples and John will have (john_initial + x) apples.\n    # We want Amy to have 4 more apples than John, so:\n    # amy_initial - x = john_initial + x + 4\n    # Solving for x gives us:\n    x = (amy_initial - john_initial - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    ans = gcd(num1, num2)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for i in range(14, 17):\n        if i % 2 != 0:\n            return i\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n    wait_time = bus_interval - (late_time % bus_interval)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Number of grass units for the pasture to feed 14 goats for 15 days\n    grass_for_goats = 14 * 15\n    # Number of grass units for the pasture to feed 70 rabbits for 8 days\n    grass_for_rabbits = 70 * 8\n\n    # Since both represent the same total amount of grass, we equate them\n    # and hence we can find the grass needed for one rabbit per day\n    grass_per_rabbit_per_day = grass_for_goats / (4 * 15)\n  \n    # Find out how much grass units are there in the pasture\n    total_grass_units = grass_per_rabbit_per_day * 70 * 8\n\n    # 1 goat = 4 rabbits in terms of eating grass\n    total_goats_as_rabbits = 17 * 4 + 20\n\n    # Calculate the days the pasture can feed the given number of goats and rabbits\n    days = total_grass_units / (total_goats_as_rabbits * grass_per_rabbit_per_day)\n\n    return days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n\n    total_cost = cost_per_person * number_of_people\n\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4, toh / 3 + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha - riley, 60)\n    \n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19-x), 65)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    base = 4\n    repeat = 3\n    ans = sum(base * 10**i for i in range(repeat))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    total_savings = 13 + 18 + 5\n    num_months = 3\n    mean_savings = total_savings / num_months\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # Create a mapping of letters to their corresponding numbers\n    mapping = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n\n    # The password 'Angel' corresponds to 0141705021\n    angel_password = '0141705021'\n\n    # Create a translation table using the mapping\n    translation_table = str.maketrans(mapping)\n\n    # Decode the number 4005220912 to check if it decodes to 'Devil'\n    decoded_password = '4005220912'.translate(translation_table)\n\n    # Check if Andy's attempt matches the word 'Devil'\n    if decoded_password == 'Devil':\n        ans = True  # Andy can unlock the treasure chest\n    else:\n        # If not, provide the correct password by translating 'Devil'\n        correct_password = 'Devil'.translate({v: str(k) for k, v in mapping.items()})\n        ans = (False, correct_password)  # Andy cannot unlock the treasure chest and the correct password is provided\n\n    return ans\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Converting the recurring decimals to fractions\n    recurring_to_fraction = lambda a, b: a / (9 if b == 0 else 90)\n    \n    # Applying the recurring_to_fraction function to each term\n    term1 = recurring_to_fraction(1, 0)\n    term2 = 0.1 + recurring_to_fraction(2, 1)\n    term3 = 0.2 + recurring_to_fraction(3, 2)\n    term4 = 0.3 + recurring_to_fraction(4, 3)\n    term5 = 0.4 + recurring_to_fraction(5, 4)\n    term6 = 0.5 + recurring_to_fraction(4, 3)\n    term7 = 0.78 # This term does not have a recurring digit\n    \n    # Calculate total\n    ans = term1 + term2 + term3 + term4 + term5 + term6 + term7\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, simplify, sqrt\n\n    a = symbols('a', real=True, positive=True)\n    x = symbols('x', real=True)\n    \n    # Given equation\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n    \n    # Solve the equation for x\n    x_solution = solve(equation, x)[0]\n    \n    # Calculate sqrt(x^2 + 8x) using the solved x\n    expression = sqrt(x_solution**2 + 8 * x_solution)\n    \n    # Simplify the expression to get the result in terms of a\n    ans = simplify(expression)\n    \n    return ans\n    \nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # Since we want to write 6 as a sum of two or more, we go up to 5\n    for i in range(1, 6):\n        for j in range(1, 6):\n            if i + j == 6 and i != j:  # Two numbers sum to 6 and are different\n                count += 1\n            else:\n                for k in range(1, 6):\n                    if i + j + k == 6 and len(set([i, j, k])) == len([i, j, k]):  # Three different numbers sum to 6\n                        count += 1\n                    else:\n                        for l in range(1, 6):\n                            if i + j + k + l == 6 and len(set([i, j, k, l])) == len([i, j, k, l]):  # Four different numbers sum to 6\n                                count += 1\n    # To account for the combinations, divide by 2 since (1,5) and (5,1) are the same for this context\n    count //= 2\n    return count\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    day = 0\n    height_climbed = 0\n    slide_down_increase = 1\n\n    while height_climbed < 45:\n        day += 1  # Snail starts climbing on the next day\n        height_climbed += 10  # Snail climbs during the day\n\n        if height_climbed >= 45:  # Check if snail has reached the top\n            break\n\n        height_climbed -= slide_down_increase  # Snail slides down at night\n        slide_down_increase += 1  # Increase the slide down distance for next night\n\n    return day\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    min_sheep_in_max_pen = (total_sheep // total_pens) + (1 if total_sheep % total_pens != 0 else 0)\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 7 == 5:\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    \n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_persons = total_boys + total_girls\n    \n    mean_age_total = (total_age_boys + total_age_girls) / total_persons\n    \n    return mean_age_total\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n    \n    angel_count = sorted([angel.count(char) for char in set(angel)])\n    devil_count = sorted([devil.count(char) for char in set(devil)])\n    \n    if angel_count == devil_count:\n        return True\n    else:\n        # To find the correct password, we must rearrange \"devil\" to match the count pattern of \"angel\"\n        angel_freq = {char: angel.count(char) for char in set(angel)}\n        correct_password = ''.join(sorted(devil, key=lambda x: (-angel_freq.get(x, 0), x)))\n        return False, correct_password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n    \n    # First calculate LCM of Raye and Simon's cycles\n    lcm_raye_simon = lcm(raye_cycle, simon_cycle)\n    \n    # Then, calculate the LCM of the result with Taylor's cycle\n    lcm_all_three = lcm(lcm_raye_simon, taylor_cycle)\n    \n    return lcm_all_three\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Sara could take out all non-green balls and still not have 5 of the same color.\n    # 5 yellow + 2 red = 7 balls\n    max_other_balls = 5 + 2\n\n    # The next ball she takes out will have to be green for sure.\n    # So to be certain of 5 of the same color, she needs one more than all the others.\n    balls_needed = max_other_balls + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_number = 10\n    last_term_shown = 31\n    common_difference = 3  # since the sequence is increasing by 3\n\n    # Using the formula for nth term of arithmetic sequence:\n    # nth_term = a + (n-1)*d\n    # where a is the first term, n is the term number and d is the common difference\n    # here, we need to find out 'a', and we have nth_term (31), n (10) and d (3)\n    \n    first_term = last_term_shown - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    total_distance = 30  # in meters\n    sam_speed = 1  # in meters per second\n    ben_speed = 0.6  # in meters per second\n    total_time = 10 * 60  # in seconds (10 min)\n\n    combined_speed = sam_speed + ben_speed  # when they are swimming towards each other\n\n    distance_per_meet = total_distance / combined_speed\n    num_meets = total_time / distance_per_meet\n    \n    return int(num_meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    def new_operation(a, b):\n        str_a, str_b = str(a), str(b)\n        return int(str_a[0]) * int(str_a[1]) + int(str_b[0]) * int(str_b[1])\n\n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    ans = 5928 * 13\n    return ans\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    coldest = min(temperatures)\n    hottest = max(temperatures)\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = average_bob_cindy * 2\n    total_height_all = total_height_bob_cindy + height_doris\n    average_height_all = total_height_all / 3\n    return average_height_all\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the mass of one table, and c be the mass of one chair\n    t, c = symbols('t c')\n    \n    # Equation representing total mass of 3 tables and 4 chairs\n    equation1 = Eq(3 * t, 4 * c)\n    \n    # Equation representing the fact that a table is 2kg heavier than a chair\n    equation2 = Eq(t, c + 2)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    return solutions[t]\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for Destin's current age and his nephew's current age\n    destin, nephew = symbols('destin nephew')\n\n    # create equations based on the problem description\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))  # in 6 years, Destin = 2 * nephew's age\n    equation2 = Eq(destin - 6, 5 * (nephew - 6))  # 6 years ago, the ratio of their ages was 5:1\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # calculate the sum of their ages in 10 years' time\n    sum_of_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_of_ages_in_10_years.evalf()\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    boys, girls = symbols('boys girls')\n\n    # Average number of pencils (total pencils / number of pupils)\n    avg_pencils = 35\n\n    # Total number of pupils\n    total_pupils = 40\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys + girls, total_pupils)\n    equation2 = Eq((boys * 20 + girls * 60) / total_pupils, avg_pencils)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    pies_tan, pies_lim = symbols('pies_tan pies_lim')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(pies_tan, pies_lim)  # They had an equal number initially\n    equation2 = Eq(pies_tan + 12, 2 * (pies_lim - 4))  # After transactions, relationship between pies\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pies_tan, pies_lim))\n\n    return solutions[pies_tan]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)  # 6:35 am\n    arrival_time = (10, 22)   # 10:22 am\n\n    hours_diff = arrival_time[0] - departure_time[0]\n    minutes_diff = arrival_time[1] - departure_time[1]\n\n    total_minutes = hours_diff * 60 + minutes_diff\n\n    return total_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    pattern_length = len(pattern)\n    total_length = 50\n    \n    full_patterns = total_length // pattern_length\n    remaining_digits = total_length % pattern_length\n    \n    sum_full_patterns = sum(int(digit) for digit in pattern) * full_patterns\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_full_patterns + sum_remaining_digits \n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Calculate the division step by step\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    card_combinations_2 = list(combinations(cards, 2))\n    card_combinations_3 = list(combinations(cards, 3))\n\n    products_2 = {a * b for a, b in card_combinations_2}\n    products_3 = {a * b * c for a, b, c in card_combinations_3}\n\n    common_products = products_2 & products_3\n    common_product = common_products.pop()\n\n    # We find the cards used by the product\n    used_cards = set()\n    for card_set in card_combinations_2:\n        if card_set[0] * card_set[1] == common_product:\n            used_cards.update(card_set)\n\n    for card_set in card_combinations_3:\n        if card_set[0] * card_set[1] * card_set[2] == common_product:\n            used_cards.update(card_set)\n\n    # Find unused card\n    unused_card = (set(cards) - used_cards).pop()\n\n    return unused_card\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Let's assume Tom's father's current age is 'father_age'.\n    tom_age_now = 10\n\n    # From the problem, we know the age difference between Tom and his father will remain constant. \n    # So when Tom reaches his father's current age, the age difference will be the same as it is now.\n    # Tom's father will be 70 years old then.\n\n    # Let 'x' be the number of years it takes for Tom to reach his father's current age.\n    # Therefore, we have:\n    # Tom's age in 'x' years = Tom's current age + x\n    # Father's age in 'x' years = 70\n    # Tom's future age (father's current age) = father's current age\n\n    # We can express this relationship as an equation:\n    # father_age_now - tom_age_now = 70 - (tom_age_now + x)\n    # Since Tom's future age is his father's current age, we can also write:\n    # tom_age_now + x = father_age_now\n\n    # Now, let's solve these equations:\n    # father_age_now - tom_age_now = 70 - father_age_now\n    # 2 * father_age_now = tom_age_now + 70\n    father_age_now = (tom_age_now + 70) / 2\n\n    return int(father_age_now)\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    part_students_6_sweets = 3/5\n    part_students_4_sweets = 1/4\n\n    # Calculate the number of sweets given to the 3/5 of students\n    sweets_for_3_5_students = part_students_6_sweets * total_sweets\n    # Number of students who received 6 sweets each\n    students_6_sweets = sweets_for_3_5_students / 6\n\n    # Calculate the remaining sweets after giving 3/5 of the students their sweets\n    remaining_sweets = total_sweets - sweets_for_3_5_students\n\n    # Calculate the number of sweets given to the 1/4 of the remaining students\n    sweets_for_1_4_remaining = part_students_4_sweets * remaining_sweets\n    # Number of students who received 4 sweets each\n    students_4_sweets = sweets_for_1_4_remaining / 4\n\n    # Calculate the number of sweets given to the rest of the students\n    sweets_for_rest_students = remaining_sweets - sweets_for_1_4_remaining\n    # Number of students who received 5 sweets each\n    students_5_sweets = sweets_for_rest_students / 5\n\n    # Total number of students in the classroom\n    total_students = students_6_sweets + students_4_sweets + students_5_sweets\n\n    return int(total_students)\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3 / 10) * 54 + 0.3 * 45 + (30 / 100)\n    return result\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for odd in range(1000, 1, -2):\n        found = True\n        for i in range(2, odd):\n            if is_composite(i):\n                for j in range(i+1, odd):\n                    if is_composite(j) and is_composite(odd - i - j) and (odd - i - j) != i and (odd - i - j) != j:\n                        found = False\n                        break\n                if not found:\n                    break\n        if found:\n            return odd\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n    \n    difference = first_number - second_number\n\n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # each boy received $8, each girl received $5\n    # total prize money is $580\n    # there are thrice as many boys as girls\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_A = 25\n    packet_B = 20\n    days_in_packet = lcm(packet_A, packet_B)\n\n    start_day = 1 \n    start_month = 3  \n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    total_days = start_day\n    month_index = start_month - 1\n    while total_days < days_in_packet:\n        total_days += days_in_month[month_index]\n        month_index = (month_index + 1) % 12\n        if month_index == 2 and total_days < days_in_packet:\n            total_days += 1 \n\n    day_of_new_start = total_days - days_in_packet + 1\n    month_of_new_start = month_index + 1 if day_of_new_start > days_in_month[month_index] else month_index + 1\n\n    if month_of_new_start > 12:\n        month_of_new_start -= 12\n        ans = (f\"{day_of_new_start}th April\")\n    else:\n        ans = (f\"{day_of_new_start}th March\")\n\n    return ans \n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum_of_numbers = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # The perimeter of the triangle is 12\n    perimeter = 12\n    \n    # Since the triangle is isosceles, two sides are equal\n    # We iterate over possible lengths of the equal sides\n    for equal_side in range(1, perimeter//2):\n        # The third side can be at most the perimeter minus twice the equal side\n        third_side = perimeter - 2 * equal_side\n        \n        # The third side must be smaller than the sum of the two equal sides according to the triangle inequality\n        # Also, it must be a positive integer bigger than 0 \n        if 0 < third_side < 2 * equal_side:\n            count += 1\n            \n    # Return the number of isosceles triangles\n    return count\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    equation1 = Eq(elder + younger, 42)  # Their current ages add up to 42\n    equation2 = Eq(elder - younger, 2 * younger)  # A few years ago relationship\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_strawberries_initial = 86\n    lena_strawberries_given_away = 29\n    lena_strawberries_final = 100\n\n    strawberries_received_from_mother = lena_strawberries_final - (lena_strawberries_initial - lena_strawberries_given_away)\n\n    return strawberries_received_from_mother\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Calculate the greatest common divisor (GCD) for the three class sizes\n    gcd_ab = gcd(class_A, class_B)\n    gcd_abc = gcd(gcd_ab, class_C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Total students who failed the first exam\n    failed_first_exam = total_students - passed_first_exam\n\n    # Those who passed both = those who passed the first - (those who failed the second but passed the first)\n    passed_both_exams = passed_first_exam - (failed_second_exam - passed_second_failed_first)\n\n    # Those who passed only the first exam = total who passed the first - those who passed both\n    passed_only_first_exam = passed_first_exam - passed_both_exams\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Assign values from the question\n    routes_from_A_to_B = 7\n    routes_from_B_to_C = 5\n    routes_from_A_to_C = 4\n    routes_from_C_to_D = 2\n    routes_directly_from_A_to_D = 6\n    \n    # Calculate the total routes using the law of addition and multiplication\n    routes_from_A_to_B_to_C_to_D = routes_from_A_to_B * routes_from_B_to_C * routes_from_C_to_D\n    routes_from_A_to_C_to_D = routes_from_A_to_C * routes_from_C_to_D\n    \n    # Combine all the routes including the direct routes\n    total_routes = routes_directly_from_A_to_D + routes_from_A_to_B_to_C_to_D + routes_from_A_to_C_to_D\n    \n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Total cupcakes = chocolate cupcakes (c) + cheese cupcakes (255 - c)\n    # After selling, chocolate cupcakes left = c - 0.4c = 0.6c\n    # After selling, cheese cupcakes left = (255 - c) - 0.75(255 - c) = (255 - c) * 0.25\n    # The number of chocolate cupcakes and cheese cupcakes left are equal.\n    # equation: 0.6c = (255 - c) * 0.25\n    \n    # Solve for c\n    c = (255 * 0.25) / (0.6 + 0.25)\n    \n    # Calculate the number of cupcakes left after selling\n    chocolate_left = 0.6 * c\n    # cheese_left would be the same as chocolate_left but is not required to answer the question\n    \n    return int(chocolate_left)\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    # Cost of 3 pencils\n    pencils_cost = 3 * 2  # Each pencil costs £2\n    \n    # Total cost excluding pencils\n    remaining_cost = 20 - pencils_cost  # Total is £20\n    \n    # Cost per pen\n    pen_cost = remaining_cost / 2  # Pip bought 2 pens\n    \n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    daily_hay_consumption_per_cattle = total_hay / (total_cattle * total_days)\n\n    return daily_hay_consumption_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # The product of their ages is 210, let's get its divisors under 10\n    # since the children are all under 10.\n    divs = divisors(210)\n    valid_divs = [d for d in divs if d < 10]\n\n    # Find groups of three divisors whose product is 210 and are all different.\n    for youngest in valid_divs:\n        for middle in valid_divs:\n            for oldest in valid_divs:\n                if youngest < middle < oldest and youngest * middle * oldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # The total number of students\n    total_students = 39\n\n    # Using SymPy to create symbols and equations\n    from sympy import symbols, Eq, solve\n    boys, girls = symbols('boys girls')\n\n    # Equation representing 1/4 of the boys is equal to 2/5 of the girls\n    equation1 = Eq(boys / 4, 2 * girls / 5)\n\n    # Equation representing the total number of boys and girls is equal to 39\n    equation2 = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of more boys than girls\n    more_boys = solutions[boys] - solutions[girls]\n\n    return more_boys\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    total_boxes = total_avocados // per_box\n    return total_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed\n    seedlings_survive = total_seedlings - seedlings_killed\n\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n\n    full_days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts % locusts_per_day\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Total number of notes is 116\n    total_notes_eq = Eq(x + y, 116)\n\n    # Spent 60% of the $10 notes and 25% of the $5 notes\n    spent_x = 0.60 * x\n    spent_y = 0.25 * y\n\n    # After spending, the ratio of $10 notes to $5 notes is 4/7\n    remaining_x = x - spent_x\n    remaining_y = y - spent_y\n    ratio_eq = Eq(remaining_x / remaining_y, 4 / 7)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, ratio_eq), (x, y))\n\n    # Calculate the amount spent on the bag\n    total_spent = (spent_x * 10 + spent_y * 5).subs(solutions)\n\n    return total_spent.evalf()\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of stickers Don and Ben have be 2x and 3x respectively\n    x = symbols('x')\n    # After Don buys 10 more stickers and Ben loses 5 stickers\n    # The ratio of their stickers becomes 6 : 7\n    equation = Eq((2*x + 10) / (3*x - 5), 6/7)\n    \n    # Solving the equation for x\n    original_x = solve(equation, x)\n    \n    # Since x could be more than one solution, we find the positive one\n    for i in original_x:\n        if i > 0: \n            # Don's original number of stickers is 2x\n            don_original = 2 * i\n            break\n    \n    return int(don_original)\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    num_terms = (2016 - 2) // 2 + 1\n    sum_even = (2 + 2016) * num_terms // 2\n    sum_odd = (3 + 2015) * num_terms // 2\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    a, b, c = 1, 1, 29  # Start with a minimal partition of the sum 31\n\n    # Now find the partition with the largest product\n    max_product = a * b * c\n    for i in range(1, 30):\n        for j in range(1, 31 - i):  # Note that k = 31 - i - j\n            k = 31 - i - j\n            product = i * j * k\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    # Given\n    heather_saved = 12.15\n    \n    # Zach saved 3 times as much as Heather\n    zach_saved = 3 * heather_saved\n    \n    # Serena saved $24.50 more than Zach\n    serena_saved = zach_saved + 24.50\n    \n    # Serena saved 5 times as much as Jason\n    jason_saved = serena_saved / 5\n    \n    # Jason saved $1.54 more than William\n    william_saved = jason_saved - 1.54\n    \n    return william_saved\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    result = sum((2*i + 1) * (2*i + 3) for i in range(20))\n    return result\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Calculate total arrangements without any restrictions: 7!\n    total_without_restrictions = factorial(7)\n    \n    # Triplets treated as a single unit plus other 4 individuals: 5!\n    # and we could arrange the triplets among themselves in 3! ways\n    triplets_as_unit = factorial(5) * factorial(3)\n    \n    # The twins can be arranged in 2! ways\n    twins_arrangement = factorial(2)\n    \n    # Calculate arrangements with twins together treated as a single unit with other 5 units (including triplet unit): 6!\n    twins_together_with_triplets_unit = factorial(6)\n\n    # Calculate restricted arrangements (twins together)\n    restricted_arrangements_twins_together = twins_together_with_triplets_unit * factorial(3) * twins_arrangement\n\n    # Subtract the restricted arrangements from the total possible arrangements to get the arrangements with the twins not together\n    twins_not_together = triplets_as_unit - restricted_arrangements_twins_together\n\n    # Total possible arrangements for twins not together and triplets together\n    ans = twins_not_together\n    \n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    # Include trees at both ends\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_size = 30\n    gallons_needed = order_size / cups_per_gallon\n    \n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_a_week = 7\n\n    least_number_in_most_populated_weekday = (total_students + days_in_a_week - 1) // days_in_a_week\n\n    return least_number_in_most_populated_weekday\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since the number of Fridays that can occur will depend on\n    # which day the summer vacation starts on, we explore all possibilities.\n    # We start by assuming the first day of the summer vacation is a Friday.\n    # In 55 days, there are 55 // 7 full weeks and some days left.\n    # For each additional day over 7 * (55 // 7),\n    # there could be one more Friday, up to 6 more days (as a week has 7 days).\n\n    full_weeks = 55 // 7\n    extra_days = 55 % 7\n\n    # The greatest number of Fridays will happen if the first day is a Friday\n    # and we have 6 extra days.\n\n    # If the first day isn't a Friday, the maximum Fridays we could get is\n    # the same as the number of full weeks (since the following Friday would\n    # land on the first of the \"extra days\").\n    # If we have 6 extra days and the first day is a Friday, then we get\n    # one additional Friday.\n\n    max_fridays = full_weeks + (1 if extra_days >= 1 else 0)\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20 / 100\n    girls_wearing_glasses = total_girls * percentage_wearing_glasses\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy import lcm, symbols, Eq, solve\n    \n    # Least common multiple of the divisible numbers \n    lcm_value = lcm(2, 3, 4, 5, 6, 8, 9)\n    \n    # Define a symbol for our number N\n    N = symbols('N')\n    \n    # Equation for condition that N gives a remainder of 5 when divided by 7\n    equation = Eq(N % 7, 5)\n    \n    # Find the smallest N satisfying the equation\n    # Start checking from the LCM value, and keep adding the LCM value until the condition is met\n    solution_N = lcm_value\n    while not equation.subs(N, solution_N):\n        solution_N += lcm_value\n\n    return solution_N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    pencils_for_a_pen = pen_cost // pencil_cost\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * 1 // 5  # Number of pupils away on a school trip\n    pupils_going_to_cathedral = total_pupils - pupils_away  # Number of pupils going to the cathedral\n\n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    single_song_time = 3\n    number_of_songs = 2\n    number_of_children = 50\n\n    total_time = single_song_time * number_of_songs * number_of_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_without_3_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_without_3_apples\n    weight_per_apple = weight_of_3_apples / 3\n    weight_of_5_apples = weight_per_apple * 5\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(0.25, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since the question is simply the number 1,\n    # The answer is just 1.\n    return 1\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years = 5\n    amount_after_years = principal * ((1 + interest_rate) ** years)\n\n    if abs(amount_after_years - final_amount) < 1e-5:\n        return \"right\"\n    else:\n        current_amount = principal\n        actual_years = 0\n        while current_amount < final_amount:\n            current_amount *= (1 + interest_rate)\n            actual_years += 1\n        return actual_years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    num = lcm\n    while num % 10 != 2:  # Check if the number ends with 2\n        num += lcm\n    return num\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n    \n    # Initial conditions\n    equation1 = Eq(cookies, 3 * cakes)\n    \n    # After selling\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # Calculate how many cookies are left\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    return 7 * 2\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position1_value = 3 * 10**4  # value of 3 in the ten-thousands place\n    position2_value = 3 * 10**2  # value of 3 in the hundreds place\n    difference = position1_value - position2_value\n    return difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # This is a problem of finding the largest value that cannot be obtained by a combination of the two coins.\n    # It's a variation of the Frobenius coin problem, solution is given by the formula (a*b)-a-b,\n    # where a and b are relatively prime positive integers (coefficient of two denominations).\n\n    a = 4\n    b = 5\n\n    # Calculate the result using Frobenius formula\n    largest_non_representable_total = (a * b) - a - b\n\n    return largest_non_representable_total\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of work for John, Jonah, and Angus be j, jo, and a respectively\n    # The total work done to build the wall can be considered as 1 (completion of the wall)\n    j, jo, a = symbols('j jo a')\n\n    # According to the problem:\n    # For John, Jonah and Angus together: j + jo + a = 1/27 (work per hour)\n    # For Jonah and Angus together: jo + a = 1/36 (work per hour)\n\n    # Creating equations from the problem statements\n    equation1 = Eq(j + jo + a, 1/27)\n    equation2 = Eq(jo + a, 1/36)\n\n    # Solving equations for j (John's rate of work)\n    solutions = solve((equation1, equation2), (j, jo, a))\n\n    # John's individual time to build the wall\n    john_time = 1 / solutions[j]\n\n    return john_time\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    sum_of_numbers = 1001\n    for d in range(sum_of_numbers, 0, -1):  # Start with the sum and go down to 1\n        if sum_of_numbers % d == 0:  # d divides the total sum\n            count = sum_of_numbers // d\n            # Check if count is <= 10 since we must have 10 positive integers\n            if count <= 10:  \n                return d  # Found the maximum possible value of d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    combined_age_now = combined_age_5_years_ago + 2 * 5  # 5 years for each person\n    combined_age_in_3_years = combined_age_now + 2 * 3  # 3 more years for each person\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(0, 10):\n        for b in range(0, 10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n    \n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    weight_four_apples_and_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_four_apples_and_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_1 = 45\n    length_2 = 30\n\n    longest_length = gcd(length_1, length_2)\n\n    return longest_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students):\n        girls = total_students - boys\n        boys_after_removal = boys - boys / 11\n        girls_after_removal = girls - 5\n        if boys_after_removal == girls_after_removal:\n            return boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while not(number % 5 == 1 and number % 12 == 3):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    eggs_become_adults = 30\n\n    # Since new adult fleas only start emerging from day 30,\n    # from day 1 to 30 there are no new adults, we will count from day 31 to 40\n    new_adults = daily_eggs * (40 - eggs_become_adults)\n\n    return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3 + ~~~)\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink_litres = 12\n    fraction_of_water = 3 / 4\n    litres_of_water = total_orange_drink_litres * fraction_of_water\n    \n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    number_of_rows = 22\n    common_difference = 3\n\n    # Number of students is the sum of the arithmetic sequence.\n    # Using the formula for the sum: n/2 * (2a + (n-1)d),\n    # where n is the number of terms, a is the first term, and d is the common difference\n    total_students = number_of_rows / 2 * (2 * first_term + (number_of_rows - 1) * common_difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = 50000 + abcd\n        N = abcd * 10 + 5\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(21*286+21, 286)\n    num2 = Fraction(6*2530+647, 2530)\n    num3 = Fraction(1*2829+1370, 2829)\n    \n    result = num1 / num2 * num3\n    \n    ans = float(result)\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The dimensions of the cuboid are 6, 10, and 12, and each dimension is divided equally into\n    # smaller cube-edge lengths. To have 720 small cubes, each dimension should be divided by \n    # the cube root of 720, which is 6 (since 6 * 6 * 6 = 216 and 720 / 216 = 10/2 * 12/2 = 60).\n    \n    # Now, calculate the number of small cubes along each dimension:\n    cubes_along_width = 10 // 2\n    cubes_along_height = 12 // 2\n    cubes_along_length = 6 // 2\n    \n    # Then, calculate the number of cubes on each face with one face painted pink:\n    # For the bottom and top faces:\n    bottom_top = (cubes_along_width - 2) * (cubes_along_length - 2) * 2\n    \n    # For the front and back faces:\n    front_back = (cubes_along_width - 2) * (cubes_along_height - 2) * 2\n    \n    # For the left and right faces:\n    left_right = (cubes_along_length - 2) * (cubes_along_height - 2) * 2\n    \n    # Add all the numbers together to get the total number of small cubes with exactly one face painted:\n    total_painted_cubes = bottom_top + front_back + left_right\n    \n    return total_painted_cubes\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    ans = 1600 * 0.30\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in £\n    price_pencil = 0.38  # in £\n    price_ruler = 0.59  # in £\n\n    money_left = total_money - (price_pencil + price_ruler)\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the hourly rates for Star and Nini as s and n, respectively\n    s, n = symbols('s n')\n\n    # Star types for 5 hours and Nini for 20, together they finish job\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # Star types for 20 hours and Nini for 8, together they finish job\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations for the hourly rates s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # By solving, we get Nini's rate to finish the job\n    nini_rate = solutions[n]\n    \n    # Nini's time to finish the job by herself\n    nini_time = 1 / nini_rate\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne, maria = symbols('anne maria')\n    \n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n    \n    solutions = solve((equation1, equation2), (anne, maria))\n    \n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # We're looking for the number of ways to write 140 as a sum of odd numbers\n    # Since 140 is even, it can only be written as a sum of an even number of\n    # odd numbers (so that they add up to an even number).\n    # Any odd number can be written as 2k + 1 (where k is a whole number).\n    # Let's find the prime factors of 140.\n    from sympy import factorint\n\n    factors = factorint(140)\n    # factors will be a dictionary containing the prime factors of 140 and their powers.\n\n    # For each odd prime factor p, we can write 140 as p * (some odd number).\n    # The number of ways to do this is equal to the exponent of p + 1.\n    # (This is because we can distribute 140 into 1 pile of 140, 2 piles of 70, etc.)\n    # Since we know that 1 is also an odd number, we consider it too (hence the +1).\n\n    # For the prime 2, as it is not odd, it only contributes by doubling the number of \n    # odd piles we can form (since any sum of even number of odd numbers is even).\n    # We don't need to count the different ways to arrange 2's because they don't affect\n    # the count of odd piles.\n    \n    ways = 1  # There is at least one way to make the number itself as one pile.\n    for prime, power in factors.items():\n        if prime != 2:  # For any odd prime factor,\n            ways *= (power + 1)  # Multiply the ways with the exponent of the prime factor + 1.\n\n    return ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # In the worst case, the warden has to try each key on every door until the last key,\n    # which means for the first door, he might have to try up to 20 keys,\n    # for the second door, up to 19 keys, and so on, until the last door, where only 1 key is left.\n    # So it's a sum of an arithmetic sequence from 1 to 20.\n    num_keys = 20\n    max_tries = sum(range(1, num_keys + 1))\n\n    return max_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, there are 20 stones in Stack A and 16 stones in Stack B.\n    # For Jerry to win, he must leave the stacks in such a state that Tom is forced to take the last stone.\n    # A winning strategy for Jerry would be to make the number of stones in both stacks equal after his turn,\n    # because then whatever Tom does on his next turn, Jerry can always mirror Tom's move and be the one to take\n    # the last stone.\n    \n    # Calculate the number of stones Jerry should take to make the number of stones in both piles equal\n    stones_to_take = 20 - 16\n    \n    # Jerry should take stones from Stack A to keep the stacks even.\n    stack_to_take_from = 'A'\n    \n    return stones_to_take, stack_to_take_from\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    total_pages = 56\n    sheet_number = 3\n    pages_per_sheet = 4\n\n    # The page numbers are like this for each sheet:\n    # Sheet 1 -> Page 1, Page 2, Page 55, Page 56,\n    # Sheet 2 -> Page 3, Page 4, Page 53, Page 54,\n    # Each sheet reduces the high page number by 4 and increases the low page number by 4\n    # Hence, each sheet's highest page number is: total_pages - sheet's lower page number + 1\n\n    lower_page = (sheet_number - 1) * pages_per_sheet + 1\n    higher_page = total_pages - lower_page + 1\n\n    # The pages on the third sheet are: lower_page, lower_page + 1, higher_page, higher_page - 1\n    # The sum is: lower_page + (lower_page + 1) + higher_page + (higher_page - 1)\n    # Simplified to: 2 * lower_page + 2 * higher_page\n\n    page_sum = 2 * lower_page + 2 * higher_page\n    return page_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    num_girls = total_students * fraction_girls\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    # Given exchanges\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    # Find how many apples can be exchanged for 1 watermelon\n    apples_per_watermelon = watermelon_to_peaches * peaches_to_apples\n\n    return int(apples_per_watermelon)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    total_pages = 0\n    digit_count = 0\n    digit_len = 1\n\n    while digit_count + digit_len * 9 * 10**(digit_len - 1) < digits:\n        digit_count += digit_len * 9 * 10**(digit_len - 1)\n        total_pages += 9 * 10**(digit_len - 1)\n        digit_len += 1\n\n    remaining_digits = digits - digit_count\n    total_pages += remaining_digits // digit_len\n\n    return total_pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    halfway_point = (120 + 300) / 2\n    return halfway_point\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n\n    average_cost = total_cost / total_cups\n\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial state of Box A and B (each): 10 blue, 15 red, 20 black, 25 green\n    initial_pens_per_color = {'blue': 10, 'red': 15, 'black': 20, 'green': 25}\n    \n    # After moving 20 pens from A to B, we don't know the distribution,\n    # but we know that each color in A can be at minimum 0 and maximum the initial number\n    # We need at least 15 pens of each color in A after returning\n    \n    # Calculate the least number of pens that must be returned for each color\n    pens_to_return = 0\n    for color, count in initial_pens_per_color.items():\n        # How many pens of this color left in box A after 20 are taken\n        pens_left_in_A = max(0, count - 20)\n        \n        # How many pens to return to reach at least 15, if needed\n        if pens_left_in_A < 15:\n            pens_to_return += (15 - pens_left_in_A)\n    \n    return pens_to_return\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = 9 * 60 + 15  # Convert 9:15 PM to minutes\n    end_time = 23 * 60 + 6    # Convert 11:06 PM to minutes\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Initialize the total count as 0, starting with the outer layer being boys.\n    total_count = 0\n    boy_count = 0\n    girl_count = 0\n    layer = 0\n\n    # We will iterate until the difference between boys and girls is 32.\n    while boy_count - girl_count != 32:\n        layer += 1\n        # Calculate the number of students in the current layer (4 sides of the square minus 4 corners)\n        students_in_layer = layer * 4\n        \n        # Each layer is adding boys, girls, and so on, in square rings.\n        # Odd layers are boys, even layers are girls.\n        if layer % 2 == 1:\n            boy_count += students_in_layer\n        else:\n            girl_count += students_in_layer\n\n        total_count += students_in_layer\n\n    # The total count needs to include the innermost student if the layers are odd; there is 1 more boy (odd layer)\n    if layer % 2 == 1:\n        boy_count += 1\n\n    total_count += 1  # Add the innermost student\n    return total_count\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1/8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total number of chocolates is 20\n    total_chocolates = 20\n    # Number of plain chocolates is 8\n    plain_chocolates = 8\n    # Number of milk chocolates is 12\n    milk_chocolates = 12\n    # Number of chocolates with soft-centres is 16\n    soft_centres = 16\n    \n    # Since there are only 4 chocolates without soft-centres, and\n    # all milk chocolates must have soft-centres (because 8 plain + 4 without = 12,\n    # which leaves no room for milk chocolates without soft-centres),\n    # the number eaten must be from plain chocolates.\n    \n    # Minimum number of plain chocolates with soft-centres\n    min_plain_soft = max(0, soft_centres - milk_chocolates)\n    # Maximum number of plain chocolates with soft-centres\n    max_plain_soft = min(plain_chocolates, soft_centres)\n    \n    # Since the minimum and maximum are the same, we can say exactly\n    # how many plain chocolates have soft centres.\n    \n    return min_plain_soft\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the dividend be denoted by D and the divisor by d.\n    D, d = symbols('D d')\n\n    # We are given that the quotient is 29 and the remainder is 11.\n    # Therefore, D = 29d + 11.\n    equation1 = Eq(D, 29*d + 11)\n\n    # We are also given that the sum of the dividend and the divisor is 431.\n    # Therefore, D + d = 431.\n    equation2 = Eq(D + d, 431)\n\n    # We can solve the system of equations for D and d.\n    solutions = solve((equation1, equation2), (D, d))\n\n    # The difference between the dividend and the divisor.\n    difference = solutions[D] - solutions[d]\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    violin_percentage = 12.5 / 100\n\n    total_pupils = violin_players / violin_percentage\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    cost_per_bar = 50\n    C = cost_per_bar * n\n    return C\n\n# Example usage:\n# n = number of chocolate bars\nn = 5\nans = solution(n)"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n\n    # Equation based on the total sum of pence\n    equation = Eq(x + 2*x + 5*x + 10*x, 90)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    # Total number of coins is 4 times x (1p, 2p, 5p, and 10p coins)\n    total_coins = 4 * solutions[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears', integer=True)\n\n    # Equation for the total number of apples and pears\n    equation1 = Eq(apples + pears, 105)\n\n    # Equation for the number of apples and pears left after selling\n    equation2 = Eq((1 - 1/3) * apples, (5/6) * (1 - 2/5) * pears)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    # Calculate the total number of apples and pears sold\n    apples_sold = 1/3 * solutions[apples]\n    pears_sold = 2/5 * solutions[pears]\n\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total stickers be x and the number of pupils be n\n    x, n = symbols('x n')\n    \n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(x - 13 * n, 190)\n    \n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = Eq(x - 17 * n, 50)\n    \n    # Solve the system of equations to find the value of x (total stickers)\n    solutions = solve((equation1, equation2), (x, n))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_equation = Eq(A/B, 4/5) & Eq(B/C, 5/6)\n    difference_equation = Eq(C - A, 10)\n\n    solutions = solve((ratio_equation, difference_equation), (A, B, C))\n\n    sum_ABC = sum(solutions.values())\n    return sum_ABC\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # There are (12 - 4 + 1 = 9) \"spots\" where the group of A, B, C, D can be placed,\n    # as we can consider ABCD as a single entity to place.\n    # so, there are 9 ways to place the group ABCD.\n    \n    group_ABCD_spots = 9\n    \n    # Within this group ABCD, there are 4! ways to arrange A, B, C, and D.\n    \n    arrangements_ABCD = factorial(4)\n    \n    # The remaining 8 students can be arranged in 8! ways.\n    \n    remaining_students = factorial(8)\n    \n    # Answer will be the product of the different possibilities.\n    \n    ans = group_ABCD_spots * arrangements_ABCD * remaining_students\n    \n    return ans\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # In a round-robin tournament involving 6 players, each plays 5 matches.\n    # Total matches = Number of unique pairs of players = 6 choose 2\n    # Each match produces 2 points in total, 2 for a win, 0 for a loss, 1 each for a tie.\n    total_points_all_players = 5 * 6 / 2 * 2\n\n    # Sum of the points of the five students\n    known_points = 7 + 6 + 5 + 4 + 3\n\n    # Points of the remaining student\n    remaining_student_points = total_points_all_players - known_points\n\n    return remaining_student_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B', positive=True)\n\n    # original ratio equation A:B = 5:3\n    equation1 = Eq(A/B, 5/3)\n    \n    # new ratio after transferring 10g from A to B A-10:B+10 = 7:5\n    equation2 = Eq((A-10)/(B+10), 7/5)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # calculate total weight\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = girls_per_boy * number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    # Using the sum of an arithmetic sequence formula: n/2 * (a1 + an)\n    # where n = total number of terms, a1 = first term, an = last term\n    # S = n/2 * (a1 + an) => total_players = n/2 * (first_line_players + last_line_players)\n    # Hence, n = (2 * total_players) / (first_line_players + last_line_players)\n    n = (2 * total_players) / (first_line_players + last_line_players)\n    \n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n - 1)d\n    # where d = common difference.\n    # Since we know a1, an, and n, we can solve for d\n    # So, last_line_players = first_line_players + (n - 1)d\n    # Hence, d = (last_line_players - first_line_players) / (n - 1)\n    difference = (last_line_players - first_line_players) / (n - 1)\n\n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    str_product = str(product)\n    return len(str_product) - len(str_product.rstrip('0'))\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    largest_mass = max(masses_in_grams)\n    return largest_mass\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    boys_ratio = 5 / 11  # Since 6 out of 11 are girls, 5 out of 11 must be boys.\n\n    number_of_boys = total_children * boys_ratio\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest difference will occur when the two numbers are as close\n    # to each other as possible. Therefore, the two numbers should be consecutive\n    # in the sorted order of all permutations of the numbers 1-9.\n    # The smallest number will be 123456789 and the second smallest will be\n    # 123456798, the difference between them is the smallest possible difference.\n    \n    smallest_number = int(\"123456789\")\n    second_smallest_number = int(\"123456798\")\n    \n    ans = second_smallest_number - smallest_number\n    return ans\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original numbers of boys and girls\n    eq1 = Eq(boys + 65, girls)\n\n    # Numbers of boys and girls after some left for recess\n    eq2 = Eq(boys - (2/5) * boys, girls - (3/7) * girls)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n\n    # Substitute the solutions to find the numbers of boys and girls left\n    boys_left_val = boys_left.subs(boys, solutions[boys])\n    girls_left_val = girls_left.subs(girls, solutions[girls])\n\n    # Total number of students left\n    total_left = boys_left_val + girls_left_val\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of bricks as b\n    b = symbols('b')\n\n    first_trip = (b / 2) - 26\n    remaining_after_first = b - first_trip\n    second_trip = (remaining_after_first / 2) + 11\n    remaining_after_second = remaining_after_first - second_trip\n    third_trip = 68\n    remaining_after_third = remaining_after_second - third_trip\n    final_remaining = 25\n\n    # Setting up the equation based on the problem statement\n    equation = Eq(remaining_after_third, final_remaining)\n\n    # Solving the equation for b - the initial number of bricks\n    initial_bricks = solve(equation, b)\n\n    return initial_bricks[0]\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    boys_more_than_girls = 90\n    girls_swim_ratio = 31\n    girls_cannot_swim_ratio = 49\n    boys_swim_less = 120\n\n    # Calculating total number of girls and boys\n    girls = (total_pupils - boys_more_than_girls) // 2\n    boys = girls + boys_more_than_girls\n\n    # Calculating number of girls who can swim and cannot swim\n    total_girls_ratio = girls_swim_ratio + girls_cannot_swim_ratio\n    girls_cannot_swim = (girls * girls_cannot_swim_ratio) // total_girls_ratio\n\n    # Calculating number of boys who can swim and cannot swim\n    # Let x be the number of boys who cannot swim\n    x = symbols('x')\n    boys_cannot_swim = solve(x - (x - boys_swim_less) - boys, x)[0]\n\n    # Number of boys who can swim\n    boys_can_swim = boys_cannot_swim - boys_swim_less\n\n    # Total pupils who cannot swim\n    cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return cannot_swim\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Given that the dog barks 3 times every week, we first calculate the total number of barks in 1000 days:\n    barks_per_week = 3\n    weeks_in_1000_days = 1000 / 7\n    total_barks = barks_per_week * weeks_in_1000_days\n\n    # We know that there were 2 thefts, and the dog barks with a probability of 0.9 when a thief is around.\n    thefts = 2\n    probability_bark_during_theft = 0.9\n\n    # The probability of the dog barking on a non-theft night is the total number of barks minus\n    # the expected number of barks during thefts, divided by the total number of barks.\n    expected_barks_during_thefts = thefts * probability_bark_during_theft\n    probability_bark_non_theft = (total_barks - expected_barks_during_thefts) / total_barks\n\n    # Using Bayes' theorem to find the probability of theft given barking\n    # P(Theft|Bark) = P(Bark|Theft) * P(Theft) / P(Bark)\n    probability_theft = thefts / 1000\n    probability_theft_given_bark = (probability_bark_during_theft * probability_theft) / probability_bark_non_theft\n\n    return probability_theft_given_bark\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    target_sum_ages = 40\n\n    years_to_target = target_sum_ages - current_sum_ages\n\n    return years_to_target\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    ans = 0\n    # Start checking from 3x3 up to a certain reasonable limit as we know\n    # Mike cannot be on the corners and the formation must be a square\n    for n in range(3, 101):\n        total_students = n * n\n        # Check if Mike can be the second student in the second row/column\n        # as he is always the second irrespective of the counting direction\n        if (n - 2) * 4 == total_students:\n            ans = total_students\n            break\n    return ans\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # We can solve this using dynamic programming\n    # Let dp[i] be the number of ways to reach the ith step.\n\n    # Base cases:\n    # dp[0] = 1 (There is one way to stand at the ground level)\n    # We cannot reach step 1 because Peter can only jump 2 or 3 steps at a time\n    # dp[2] = 1 (one jump of 2 steps)\n    # dp[3] = 1 (one jump of 3 steps)\n\n    dp = [0] * 11\n    dp[0] = 1\n    dp[2] = 1\n    dp[3] = 1\n\n    # Now fill in the rest of the dp array using the recurrence relation\n    # dp[i] = dp[i-2] + dp[i-3]\n    # Peter can reach the ith step from two possibilities: i-2 or i-3\n    for i in range(4, 11):\n        dp[i] = dp[i - 2] + dp[i - 3]\n\n    return dp[10]\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # The smallest possible non-zero divisor\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Let the original number be ABCD where A, B, C, D are its digits\n    # Therefore, the new number after changing the digit is DBCD\n    # The number represented by ABCD is A*1000 + B*100 + C*10 + D\n    # The number represented by DBCD is D*1000 + B*100 + C*10 + D\n    # According to the condition DBCD - ABCD = 5877\n    # Expanding it gives: (D*1000 + B*100 + C*10 + D) - (A*1000 + B*100 + C*10 + D) = 5877\n    # Simplifying gives: D*1000 - A*1000 = 5877\n    # Or (D - A)*1000 = 5877, therefore D - A = 5877 / 1000\n    # Since A and D are digits, D - A should be an integer and 5877 is not divisible by 1000\n    # Hence, D must have changed from a units place to the thousands place, so it has increased by 9000\n    # So, A*1000 + B*100 + C*10 + D + 9000 = DBCD\n    # And according to the condition: DBCD = ABCD + 5877\n    # Hence: (A*1000 + B*100 + C*10 + D) + 9000 = (A*1000 + B*100 + C*10 + D) + 5877\n    # 9000 = 5877 + 1000A - 1000D, because D's position is moved from unit to thousand place\n    # 5877 + 1000A = 1000D + 9000\n    # 1000D - 1000A = 3123\n    # D - A = 3.123 which is not a valid solution for digits\n    # So, D's contribution when moved adds 9000 + D to the number\n    # And now A's place in 1000s is empty (which we can consider as 0 for the calculation)\n    # Therefore, 1000D - 1000A + D = 5877\n    # 1000(D - A) + D = 5877\n    # 1000(D - A) = 5877 - D\n    # The possible values of D can range from 1 to 9\n    # We need to find a value of D such that 5877 - D is divisible by 1000\n    # Loop through the possible range for values of D\n    for D in range(1, 10):  # D cannot be 0\n        if (5877 - D) % 1000 == 0:\n            A = (5877 - D) // 1000\n            break\n    \n    # The value of B and C are not changing and are not contributing to the difference\n    # Therefore, B and C can take any values from 0 to 9\n    # However, the problem does not ask for B and C, so we do not need to calculate them\n    # We can simply assume them to be 0 for the smallest combination\n    B = C = 0\n    \n    # Restore the original number using the values A, B, C, and D\n    original_number = A*1000 + B*100 + C*10 + D\n    \n    return original_number\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num_str = '1998'\n    n = len(num_str)\n    \n    # Keep appending '1998' until it's divisible by 33\n    while int(num_str) % 33 != 0:\n        num_str += '1998'\n        n += len('1998')\n\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_number = group_number\n    second_number = group_number ** 2\n    third_number = group_number * second_number\n\n    sum_of_numbers = first_number + second_number + third_number\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    miles_per_run = 1/4\n    total_miles = 3.75\n\n    num_runs = total_miles / miles_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    return int(\"3,030,030\".replace(\",\", \"\"))\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2 \n    \n    girls = boys / boy_to_girl_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stamps each person has\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Create equations based on the given information\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    # Extract the solution for Andrew\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    from fractions import Fraction\n\n    # We have the proportion 10:x = 14:21\n    ratio = Fraction(14, 21)\n    # Find x by cross-multiplication\n    x = 10 * ratio\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n\n    total_books = books_about_fish + books_about_birds\n    \n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and num % 9 == 0 and str(num).endswith('0'):\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    initial_number = 5832\n    tens_to_add = 7 * 10  # '7 tens' means 7 * 10\n\n    correct_answer = initial_number + tens_to_add\n    johnnys_answer = 5839\n\n    return correct_answer if johnnys_answer != correct_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # Starting from 1, find the maximum number of different positive integers\n    # that sum to 27. We use the fact that the sum of the first n natural\n    # numbers is n*(n+1)/2. We must find the largest n such that n*(n+1)/2 <= 27.\n    n = 1\n    while n * (n + 1) // 2 <= 27:\n        n += 1\n    # Since we overshoot the while loop by 1, subtract 1 to get the correct value.\n    return n - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3 m to cm\n    lengths_cm = [147, 32.5, 67]\n\n    fourth_length_cm = total_length_cm - sum(lengths_cm)\n\n    return fourth_length_cm\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    papers = 18\n    interval = 3\n\n    leaves_required = papers // interval\n\n    return leaves_required\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Start with the initial '1' in the sequence\n    for i in range(2, 11):  # From 1/2 to 9/10 increments\n        ans += (i-1) * (1/i)\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of watches and y be the number of caps initially\n    x, y = symbols('x y')\n\n    # According to the problem, we have two equations:\n    # Equation 1: The initial ratio of watches to caps: x/y = 8/11\n    # Equation 2: The new ratio after selling 88 caps: x/(y-88) = 12/11\n\n    # Convert the ratios to equations\n    equation1 = Eq(x/y, 8/11)\n    equation2 = Eq(x/(y-88), 12/11)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # probability that A, B, and C pass\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n    \n    # probability that each combination of people passes\n    p_A_pass = p_A * (1 - p_B) * (1 - p_C)\n    p_B_pass = (1 - p_A) * p_B * (1 - p_C)\n    p_C_pass = (1 - p_A) * (1 - p_B) * p_C\n    \n    p_AB_pass = p_A * p_B * (1 - p_C)\n    p_AC_pass = p_A * (1 - p_B) * p_C\n    p_BC_pass = (1 - p_A) * p_B * p_C\n    \n    p_ABC_pass = p_A * p_B * p_C\n    \n    # probability of nobody passes\n    p_no_pass = (1 - p_A) * (1 - p_B) * (1 - p_C)\n    \n    # probability of exactly one person passing\n    prob_one_pass = p_A_pass + p_B_pass + p_C_pass\n    \n    # probability of exactly two people passing\n    prob_two_pass = p_AB_pass + p_AC_pass + p_BC_pass\n    \n    # probability of exactly three people passing\n    prob_three_pass = p_ABC_pass\n    \n    # finding which scenario is most likely\n    max_prob = max(prob_no_pass, prob_one_pass, prob_two_pass, prob_three_pass)\n    \n    if max_prob == prob_one_pass:\n        return 1\n    elif max_prob == prob_two_pass:\n        return 2\n    elif max_prob == prob_three_pass:\n        return 3\n    else:\n        return 0\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Given that Sam takes 30 minutes to travel between the first and sixth house\n    # There are 5 equal intervals between the first 6 houses (1-2, 2-3, 3-4, 4-5, 5-6)\n    # So time per interval is 30 minutes / 5 intervals\n    interval_time = 30 / 5\n\n    # To travel between the first and the tenth house,\n    # there are 9 equal intervals (1-2, 2-3, ..., 9-10)\n    # Total time will be interval_time multiplied by the number of intervals (9)\n    total_time = interval_time * 9\n\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(1, 10):\n                    if (A == D/4) and (B == A - 1) and (4 * (1000 * A + 100 * B + 10 * C + D) == (1000 * D + 100 * C + 10 * B + A)):\n                        if len(set([A, B, C, D])) == 4:\n                            return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 105  # Convert 1.05 m to cm\n    longer_piece = (2/3) * total_length_cm\n    return longer_piece\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    total_miles = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = total_miles / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # The strategy is to always leave a multiple of 12 (1+11) for Ken\n    # Start by reducing the problem to modulo 12 to find the remainder\n    remainder = 2015 % 12\n    \n    # Jack needs to take enough coins to make the remaining coins a multiple of 12\n    # If the remainder is 0, Jack can choose any amount (1-11) because he is in a losing position\n    # Otherwise, Jack need to take the remainder (which will be less than 12) to put Ken in the losing position\n    if remainder == 0:\n        jack_pick = 1     # we can choose any number from 1-11\n    else:\n        jack_pick = remainder\n\n    return jack_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin (0,0), we know that b = 0.\n    b = 0\n    \n    # We are also given that the graph passes through the point (4,8).\n    # The general form of the equation is y = mx + b, and for the point (4,8), it becomes 8 = m*4 + b.\n    # Since we know b = 0, we can solve for the slope m.\n    x, y = 4, 8\n    m = y / x\n    \n    # Now we have the values of m and b, we can write the linear equation.\n    linear_equation = f\"y={m}x+{b}\"\n    \n    return linear_equation\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_holes(number):\n        hole_map = {0: 1, 1: 0, 2: 0, 3: 0, 4: 1, 5: 0, 6: 1, 7: 0, 8: 2, 9: 1}\n        total_holes = sum(hole_map[int(digit)] for digit in str(number))\n        return total_holes\n\n    ans = count_holes(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the dwarfs were born in seven consecutive years,\n    # their ages will form an arithmetic sequence with a common difference of 1 year.\n\n    # Let the age of the youngest dwarf be y\n    # Then ages of the youngest three are y, y+1, y+2\n    # According to the problem, the sum of these ages is 42\n    # y + (y + 1) + (y + 2) = 42\n    # 3y + 3 = 42\n    # 3y = 39\n    # y = 13\n\n    # The youngest dwarf is 13 years old\n    youngest_age = 42 // 3\n\n    # The oldest dwarf is 6 years older than the youngest (as they are born in consecutive years)\n    oldest_age = youngest_age + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Calculate the number of passengers after the first stop\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Calculate the initial number of passengers\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n    shortened_length_cm = shortened_length_mm / 10  # converting mm to cm\n\n    new_length_cm = original_length_cm - shortened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Distance covered in each segment\n    distance1 = 420\n    distance2 = 620\n    # The last distance can be calculated as total distance - sum of the first two distances\n    distance3 = 1200 - distance1 - distance2\n\n    # Speed in each segment\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Time spent in each segment is distance divided by speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent is the sum of times spent in each segment\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Stickers for John, Sam, and Peter\n    j, s, p = symbols('j s p')\n\n    # 20% that Sam and Peter gave to John\n    sj_frac = 0.20 * s\n    pj_frac = 0.20 * p\n\n    # The result of the transfer to John - John's stickers increased by 80%\n    equation1 = Eq(j + sj_frac + pj_frac, 1.80 * j)\n\n    # Sam had 20 stickers more than John after giving away stickers\n    equation2 = Eq(s - sj_frac, j + 20)\n\n    # Sam and Peter's stickers were in the ratio 7 : 5 before giving away stickers\n    equation3 = Eq(s / p, 7 / 5)\n\n    # It is known that after taking 20% of stickers from both Sam and Peter, John increased his stickers by 80%\n    # Which is essentially doubling the stickers of John.\n    # Since all stickers are integers, the increment must be equal to 100% of the initial value of John's stickers\n    # Therefore, the total of sj_frac + pj_frac must be equal initial value of John's stickers\n    equation4 = Eq(sj_frac + pj_frac, j)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (j, s, p))\n\n    # Extract the solution for Peter's initial number of stickers\n    peter_initial = solutions[p]\n\n    return peter_initial\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    target_average = 95\n    \n    additional_tests = 0\n    while True:\n        additional_total_score = additional_tests * 100\n        new_average = (current_total_score + additional_total_score) / (4 + additional_tests)\n        if new_average >= target_average:\n            break\n        additional_tests += 1\n        \n    return additional_tests\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # We can see a pattern of 5 balls with 3 black balls (●) and 2 white balls (○)\n    # Every 5 balls there are 2 white balls\n    # If there are 92 white balls, we can calculate the number of groups of 5 balls:\n    groups_of_five = 92 // 2  # since each group of five contributes 2 white balls\n\n    # Now, we need to calculate the total number of balls.\n    # There are 3 black balls for each group of 5 balls, so:\n    total_balls = groups_of_five * (3 + 2)  # total groups times the pattern length\n\n    # If there is an incomplete group, we add the remaining balls\n    remaining_white_balls = 92 % 2\n    if remaining_white_balls > 0:\n        # We need to add the remainder of the sequence ●○ to account for the extra white balls\n        # Since the pattern cannot end in a black ball, we don't need to check for extra black balls\n        total_balls += remaining_white_balls * 2\n    \n    return total_balls\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Total number of notes\n    equation1 = Eq(x + y, 72)\n\n    # After spending, twice as many $10 notes as $2 notes are left\n    equation2 = Eq(x - 0.9 * x, 2 * (y - 0.75 * y))\n\n    # Solve the systems of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the cost of the gift\n    cost = 0.9 * solutions[x] * 10 + 0.75 * solutions[y] * 2\n\n    return cost\n\n# Assign the final result to the variable ans\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A, B, and C be the fraction of the pool that hoses A, B, and C fill in one hour, respectively.\n    A, B, C = symbols('A B C')\n\n    # Equations based on the given information.\n    equation1 = Eq(A + B, 1/9)\n    equation2 = Eq(A + C, 1/12)\n    equation3 = Eq(B + C, 1/18)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # The fraction of the pool that all three hoses can fill in one hour.\n    pool_fill_rate = solutions[A] + solutions[B] + solutions[C]\n\n    # The total time it takes to fill the pool with all three hoses turned on.\n    time_to_fill = 1 / pool_fill_rate\n\n    return time_to_fill.evalf()\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # We have 3 different colors and we need to ensure that at least 2 markers are the same color.\n    # According to the Pigeonhole Principle, if we take one marker of each color, we have taken 3 markers.\n    # The next marker we take must be of a color we already have, therefore ensuring at least 2 markers are the same color.\n    fewest_number = 3 + 1  # 3 different colors + 1 to ensure a pair\n    return fewest_number\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    for pears in range(1, 6*7):  # Smallest number would be less than the product of 6 and 7\n        if (pears % 6 == 2) and ((pears + 3) % 7 == 0):\n            return pears\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $5 notes.\n    # Total number of notes: x + y = 58\n    # Total value of money: 2x + 5y = 164\n\n    for y in range(59):  # y cannot be greater than 58 because x + y = 58.\n        x = 58 - y\n        if 2 * x + 5 * y == 164:\n            return y\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Since the number of marbles must be a multiple of 2 and at least 2 marbles per box,\n    # we start with the smallest even numbers and account for one pair of boxes with the same count.\n    # We will have 9 distinct counts and 1 duplicate.\n    \n    marbles = [2*i for i in range(1, 11)]  # Start with the first 10 even numbers\n    marbles[9] = marbles[8]  # Make a pair of boxes with the same count\n    \n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Since we know the 7th, 8th and 9th values, we can determine the common difference\n    # in the arithmetic sequence. Then we can use that to find the 100th term.\n    seventh_term = 105\n    eighth_term = 120\n    difference = eighth_term - seventh_term  # Common difference\n    \n    # To find the 100th term, we start from the 7th term and add the common difference \n    # 93 times (because 100 - 7 = 93).\n    # 100th_term = a + (n - 1)d where a is the first term, d is the common difference, \n    # and n is the term number.\n    hundredth_term = seventh_term + (100 - 7) * difference\n    return hundredth_term\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Using the pigeonhole principle\n    max_pigeons_in_a_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return max_pigeons_in_a_cage\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Number of sprinklers equals to the number of spaces between parterres\n    # If there are 1007 parterres, there will be 1006 spaces in between them, as it's a straight line\n    # Each space requires 1 sprinkler.\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Convert the mixed number to an improper fraction:\n    # 2 1/4 = (2*4 + 1) / 4 = 9/4\n    papaya_mass = 9 / 4\n    \n    # Calculate the mass of the jackfruit, which is 3 times the mass of the papaya\n    jackfruit_mass = 3 * papaya_mass\n    \n    # Calculate the total mass\n    total_mass = papaya_mass + jackfruit_mass\n    \n    # Check James's workings\n    # His calculation: 2 1/4 * 4 = 2 4/4 = 3, which is incorrect.\n\n    # Correct the total mass calculation\n    correct_total_mass = total_mass\n    \n    # Return correct total mass\n    return correct_total_mass\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    average = (number1 + number2) / 2\n    return average\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n    \n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(marry, 7/5 * alexis)\n    \n    # They each gave 20% of their stickers to Charlotte\n    eq2 = Eq(charlotte_final, charlotte_initial + 0.2 * marry + 0.2 * alexis)\n    \n    # Charlotte's stickers increased by 80%\n    eq3 = Eq(charlotte_final, 1.8 * charlotte_initial)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    eq4 = Eq(marry, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (marry, alexis, charlotte_initial, charlotte_final))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Total amount spent on initial purchase of cupcakes and muffins\n    total_spent_initial = 187.50 / (5/9 + 1/6)\n\n    # Amount spent on the initial cupcakes\n    initial_cupcakes_cost = 5/9 * total_spent_initial\n\n    # Price of one cupcake\n    price_per_cupcake = initial_cupcakes_cost / 36\n\n    # Price of one muffin (one third of the price of a cupcake)\n    price_per_muffin = price_per_cupcake / 3\n\n    # Total cost for muffins\n    total_muffins_cost = price_per_muffin * 32\n\n    return total_muffins_cost\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_length = symbols('total_length')\n    \n    first_day = 8          \n    second_day = total_length / 6 + 4 \n    total_two_days = (5 / 12) * total_length\n    \n    equation = Eq(first_day + second_day, total_two_days)\n    \n    solution = solve(equation, total_length)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Let x be the original number of bottle caps\n    # After giving 440 caps away, he has 5/9 of the original left\n    # So, (x - 440) / x = 5 / 9\n    \n    # Rearrange the equation to find x\n    # (x - 440) = 5x / 9\n    # 9(x - 440) = 5x\n    # 9x - 3960 = 5x\n    # 4x = 3960\n    # x = 3960 / 4\n    x = 3960 / 4\n    \n    return int(x)\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        if sum(map(int, str(multiple))) == 35 and str(multiple).endswith('35'):\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n    \n    # Subtract the 4 corner wheat to account for them only once\n    total_wheat -= 4\n    \n    # Since the wheat is distributed on the perimeter which consists of two lengths and two widths,\n    # we divide the remaining wheat by 4 to get the count on one side\n    wheat_per_side = total_wheat // 4\n\n    # The distance between wheat will be the side's total length divided by the number of intervals\n    # The number of intervals is one less than the number of wheat per side\n    distance_length = length / (wheat_per_side + 1)\n    distance_width = width / (wheat_per_side + 1)\n\n    # The distance should be the same for length and width, so we return one of them\n    return distance_length\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    min_cost = float('inf')\n    for packs_of_5 in range(4):\n        for two_bottles in range(9):\n            for single_bottles in range(17):\n                total_bottles = 5 * packs_of_5 + 2 * two_bottles + single_bottles\n                cost = 60 * packs_of_5 + 28 * two_bottles + 15 * single_bottles\n                if total_bottles >= 17 and cost < min_cost:\n                    min_cost = cost\n    return min_cost / 100  # convert pence to pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, every round eliminates half of the players.\n    # The tournament continues until there is one winner.\n    # With four people, we will need two rounds to determine the winner:\n    # Round 1: 4 players -> 2 players\n    # Round 2: 2 players -> 1 winner\n    num_rounds = 2\n\n    return num_rounds\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_pine_nuts = 112\n    sunny_day_pine_nuts = 20\n    rainy_day_pine_nuts = 12\n\n    # Let x be the number of sunny days and y be the number of rainy days.\n    # We have two equations:\n    # x + y = total_days\n    # sunny_day_pine_nuts * x + rainy_day_pine_nuts * y = total_pine_nuts\n    \n    # We can solve for x from the first equation: x = total_days - y\n    # Substitute x in the second equation to find y:\n    # sunny_day_pine_nuts * (total_days - y) + rainy_day_pine_nuts * y = total_pine_nuts\n    # After rearranging the terms, we can solve for y (rainy days):\n    \n    y = (total_pine_nuts - sunny_day_pine_nuts * total_days) / (rainy_day_pine_nuts - sunny_day_pine_nuts)\n\n    return int(y)\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    only_first_correct = 10 - 7  # Kids who only answered the first question correctly\n    only_second_correct = 15 - 7  # Kids who only answered the second question correctly\n    \n    total_only_one_correct = only_first_correct + only_second_correct  # Total kids who can only answer one question correctly\n\n    return total_only_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the pieces of candy Rachel has and a be the pieces Alice has.\n    r, a = symbols('r a')\n\n    # After Rachel gives Alice 10 pieces, they have the same number.\n    equation1 = Eq(r - 10, a + 10)\n\n    # After both eat 8 pieces, Rachel has 3 times as many as Alice.\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the simultaneous equations for r and a.\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Sum the original number of candies they both had.\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed in m/s\n    time = 5  # time in seconds\n\n    # Distance = Speed * Time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            break\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expression = \"285+15/5-2\"\n    results = set()\n\n    # No brackets\n    results.add(eval(expression))\n\n    # One pair of brackets\n    results.add(eval(\"(285+15)/5-2\"))\n    results.add(eval(\"285+(15/5)-2\"))\n    results.add(eval(\"285+15/(5-2)\"))\n\n    # Two pairs of brackets\n    results.add(eval(\"(285+15)/(5-2)\"))\n\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    # number of mushrooms gathered in the second hour\n    second_hour = symbols('second_hour')\n    \n    # equation based on the problem statement\n    equation = Eq(second_hour + (second_hour+26), 40)\n\n    # solve the equation\n    solution = solve(equation, second_hour)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    for num_brushes in range(1, 10 // brush_price):\n        if (total_spent - num_brushes * brush_price) % towel_price == 0:\n            return num_brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 8, 71)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n\n    ans = Fraction('0.49').limit_denominator()\n    \n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    # Since it's an arithmetic sequence, we use the formula for the sum of an arithmetic sequence:\n    # total_bears = (first_day_bears + last_day_bears) / 2 * days\n    # We also know that last_day_bears = first_day_bears + 2 * (days - 1)\n    # Thus we have two equations:\n    # total_bears = (first_day_bears + first_day_bears + 2 * (days - 1)) / 2 * days\n    # Solving for first_day_bears gives us:\n    first_day_bears = (total_bears * 2 / days - 2 * (days - 1)) / 2\n    # And now we can find the number of bears made on the fifth day:\n    fifth_day_bears = first_day_bears + 2 * (days - 1)\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    from itertools import permutations\n\n    digits = '018'\n    all_perms = permutations(digits, 3)\n    count = sum(1 for perm in all_perms if perm[0] != '0')  # We must exclude leading zeros\n\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Worst case scenario for not drawing a blue marble\n    # involves drawing all pink and all grey marbles\n    pink = 9\n    grey = 7\n\n    # One more marble must be drawn to ensure a blue one is drawn\n    ans = pink + grey + 1\n\n    return ans\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n    price_of_computer_before_tax = sales_tax_paid / tax_rate\n    return price_of_computer_before_tax\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef is_coprime_adjacent(p):\n    for i in range(len(p) - 1):\n        if gcd(p[i], p[i + 1]) != 1:\n            return False\n    return True\n\ndef solution():\n    count = 0\n    for p in permutations(range(1, 9)):\n        if is_coprime_adjacent(p):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    return (3 / 10) / (6 / 7) * 100\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation based on the information given in the question\n    equation1 = Eq(girls - boys, 30)\n    # Equation based on the remaining boys and girls after recess\n    equation2 = Eq((1 - 3/5)*boys, (1 - 5/8)*girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    num_boys = solutions[boys]\n    \n    return num_boys\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n    \n    # Initial condition equation\n    equation1 = Eq(frogs_before - dragonflies_before, 9)\n    \n    # After magic show equations\n    equation2 = Eq(frogs_before - 1, 11)  # One frog turns into a dragonfly\n    equation3 = Eq(dragonflies_before + 1, 10) # One dragonfly turns into a frog\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (frogs_before, dragonflies_before))\n    \n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - (9 + 19 + 29 + 39 + 49 + 59)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    total_apples = amy_apples + john_apples\n    apples_each = total_apples // 2\n    apples_to_give = amy_apples - apples_each\n\n    return apples_to_give\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(1, 25):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1) ** (i % 2) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the work rate of worker A, B and C respectively.\n    a, b, c = symbols('a b c')\n\n    # a + b = 1/3, since A and B can finish the job together in 3 hours.\n    # b + c = 1/4, since B and C can finish the job together in 4 hours.\n    # a + c = 1/8, since A and C can finish the job together in 8 hours.\n    equation1 = Eq(a + b, 1/3)\n    equation2 = Eq(b + c, 1/4)\n    equation3 = Eq(a + c, 1/8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # The combined rate of all three workers\n    combined_rate = solutions[a] + solutions[b] + solutions[c]\n\n    # The total time taken by all three workers together to complete the job\n    total_time = 1 / combined_rate\n\n    return total_time.evalf()\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the initial mathematical expression as a string\n    expression = \"285+15/5-2\"\n    \n    # Define an empty set to store unique results\n    unique_results = set()\n    \n    # Insert brackets in different positions and compute the results\n    # There are three main positions to insert brackets (before +, before /, or after /)\n    \n    # Position 1: Brackets before the '+'\n    unique_results.add(eval(f\"({expression[:3]}){expression[3:]}\"))  # (285)+15/5-2\n    unique_results.add(eval(f\"({expression[:7]}){expression[7:]}\"))  # (285+15)/5-2\n    unique_results.add(eval(f\"({expression[:5]}){expression[5:]}\"))  # (285+15/5)-2\n    \n    # Position 2: Brackets before the '/'\n    unique_results.add(eval(f\"{expression[:4]}({expression[4:6]}){expression[6:]}\"))  # 285+(15/5)-2\n    unique_results.add(eval(f\"{expression[:4]}({expression[4:8]})\"))                # 285+(15/5-2)\n    \n    # Position 3: Brackets after the '/'\n    unique_results.add(eval(f\"{expression[:5]}({expression[5:7]}){expression[7:]}\"))  # 285+15/(5-2)\n    \n    # Two pairs of brackets\n    unique_results.add(eval(f\"({expression[:3]})+({expression[4:6]}){expression[6:]}\")) # (285)+(15/5)-2\n    unique_results.add(eval(f\"({expression[:3]})+({expression[4:8]})\"))                 # (285)+(15/5-2)\n    unique_results.add(eval(f\"({expression[:7]})/({expression[8:]})\"))                   # (285+15)/(5-2)\n    unique_results.add(eval(f\"({expression[:5]})+({expression[6:]})\"))                   # (285+15/5)+(2)\n    unique_results.add(eval(f\"{expression[:4]}(({expression[4:6]}){expression[6:]}))\"))  # 285+((15/5)-2)\n    \n    return len(unique_results)\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    johnson, vicky = symbols('johnson vicky')\n    total_coins = 48\n    \n    equation1 = Eq(johnson + vicky, total_coins)\n    equation2 = Eq(vicky + 8 + 2, johnson - 8)\n    \n    solutions = solve((equation1, equation2), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies, kids * 18 + 12)\n    equation2 = Eq(candies, (kids + 2) * 15)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_girl_ratio = 3 / 2\n\n    girls = boys / boy_girl_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = S % 100000\n    return last_five_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Final result after adding 6 and multiplying by 7 is given as 77\n    final_result = 77\n    # Perform the inverse operations to find the original number\n    # First, divide by 7\n    after_addition = final_result / 7\n    # Then, subtract 6\n    original_number = after_addition - 6\n    # Return the original number\n    return original_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    sum_result = 297 + 196 + 388 + 199\n    return sum_result\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    cost = 11.4\n    weight = 0.6\n    price_per_kg = cost / weight\n    return price_per_kg\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies Sam originally had, and y be the number Tim originally had.\n    x, y = symbols('x y')\n\n    # Create the equations based on the problem description\n    # Sam ate 1/4 of her cookies, which means she has x - x/4 left.\n    # Tim bought 1/5 more cookies, which means he has y + y/5.\n    # Sam has 663 fewer cookies than Tim after the changes.\n    equation1 = Eq(x + y, 1170)  # Sam and Tim had 1170 cookies in total.\n    equation2 = Eq(x - x/4 + 663, y + y/5)  # Sam had 663 fewer cookies than Tim after eating and buying.\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the number of cookies Sam ate\n    cookies_eaten_by_sam = solutions[x] / 4\n\n    return cookies_eaten_by_sam\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for num in range(200, 301):\n        if all(num % x == 1 for x in [2, 3, 4, 6]) and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # initial number of stamps\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # after giving some stamps, their stamps will be in the ratio 1:2 (Sally:Ting)\n    # let's assume Sally gives x stamps to Ting\n    # then Sally will have (40 - x) stamps and Ting will have (32 + x) stamps\n\n    # we set up the equation based on the given ratio\n    # (40 - x) / (32 + x) = 1 / 2\n    # after cross-multiplying, we get:\n    # 2 * (40 - x) = 32 + x\n    # 80 - 2x = 32 + x\n    # 80 - 32 = 3x\n    # 48 = 3x\n    # x = 48 / 3\n    x = 48 / 3\n\n    # therefore, Ting has (32 + x) stamps at the end\n    ting_final_stamps = 32 + x\n\n    return ting_final_stamps\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_time = 18  # Jerry can complete the job in 18 hours\n    combined_time = 6  # Together, they can complete the job in 6 hours\n\n    # 1/jerry_time is Jerry's work rate (jobs per hour)\n    # 1/tom_time is Tom's work rate (jobs per hour)\n    # Their combined work rate is the sum of their individual work rates\n    # 1/combined_time = 1/jerry_time + 1/tom_time\n\n    # We need to solve for tom_time.\n    tom_time = 1 / (1/combined_time - 1/jerry_time)\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote t as the time in minutes David walks with his initial speed.\n    t = symbols('t')\n\n    # Distance walked with initial speed: 150 * t\n    # Distance walked with increased speed: (150 + 50) * (t - 10)\n    # Total distance: 3700 metres\n    # t is in the range (10, infinity) since he walks for a while with the increased speed\n    equation = Eq(150 * t + 200 * (t - 10), 3700)\n\n    # Solve the equation for t\n    solutions = solve(equation, t)\n\n    # Time spent walking in the park: initial time + increased speed time\n    total_time = solutions[0] + 10\n\n    return total_time\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # 2kg of 45% sugar solution contains 0.45 * 2kg of sugar\n    sugar_45 = 0.45 * 2\n    \n    # x kg of 15% sugar solution contains 0.15 * x kg of sugar\n    sugar_15 = 0.15 * x\n    \n    # The total amount of sugar in the final solution should be 25% of the total weight\n    total_weight = 2 + x\n    total_sugar = 0.25 * total_weight\n\n    # Equation representing the total amount of sugar from both solutions\n    equation = Eq(sugar_45 + sugar_15, total_sugar)\n\n    # Solve the equation to find the value of x\n    amount_15_percent = solve(equation, x)[0]\n\n    return amount_15_percent\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    budget = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    free_sweets_condition = 2\n\n    packets_bought = budget // price_per_packet\n    free_sweets = (packets_bought // free_sweets_condition) * sweets_per_packet\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # The smallest possible sums for 7 children with distinct number of candies (at least 1) can be obtained\n    # by giving them 1, 2, 3, ..., 7 pieces of candy respectively.\n    # This sum is the sum of the first 7 natural numbers minus 1 (since each child gets at least one piece).\n    sum_for_seven_children = sum(range(1, 8))  # sum of 1+2+3+...+7\n\n    # To find the least number of pieces the child with the most candies can get,\n    # we subtract the sum_for_seven_children from the total number of pieces (88).\n    most_pieces = 88 - sum_for_seven_children\n\n    return most_pieces\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Current configuration\n    pink = 5\n    purple = 7\n    orange = 8\n    total = pink + purple + orange\n    # Current chance of picking a pink counter\n    current_chance = pink / total\n    # The goal is to double this chance\n    target_chance = 2 * current_chance\n    # To increase the chance, we add only pink counters\n    # Let x be the number of extra pink counters added\n    x = symbols('x')\n    # New configuration: (pink + x) will give us the new chance which should equal target_chance\n    equation = Eq((pink + x) / (total + x), target_chance)\n    # Solve for x\n    solution = solve(equation, x)\n    # Return the number of extra pink counters to add\n    return solution[0]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    # Calculate 16 factorial\n    num = factorial(16)\n    \n    # Convert the factorial number to a string\n    num_str = str(num)\n    \n    # Count the number of consecutive zeros from the end of the string\n    count = 0\n    for char in reversed(num_str):\n        if char == '0':\n            count += 1\n        else:\n            break\n\n    return count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # In the worst case scenario, Cindy picks one of each color until she gets a pair.\n    # She needs to make sure she has at least two pairs of the same color.\n    # Worst case, she picks 3 different colors first, then another 3 different colors, \n    # and she will have a pair in the 7th pick.\n\n    # To have at least two pairs, she could then pick one more of each color without getting a second pair\n    # (3 picks) and then on the 11th pick, she is guaranteed a second pair.\n\n    # So she has to pick 3 (first round of different colors) + 3 (second round of different colors) \n    # + 1 (to complete the first pair) + 3 (third round of different colors) + 1 (to complete the second pair)\n    # = 11 socks to ensure she has at least two pairs of the same color.\n\n    return 11\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cupcakes and muffins as 'x'.\n    x = symbols('x')\n\n    # After selling 60 cupcakes, the number of cupcakes left is x - 60.\n    # After selling 12 muffins, the number of muffins left is x - 12.\n    # According to the problem, the number of muffins left is twice the number of cupcakes left.\n    # So, we get the equation: x - 12 = 2 * (x - 60)\n\n    equation = Eq(x - 12, 2 * (x - 60))\n\n    # Solving the equation will give us the initial number of cupcakes and muffins (which is the same for both)\n    initial_number = solve(equation, x)[0]\n\n    # The total initial number is the sum of cupcakes and muffins, so we double the initial number found\n    total_initial_number = 2 * initial_number\n\n    return total_initial_number\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25\n    los_angeles_to_shanghai = shanghai_to_los_angeles + 1.5\n    \n    total_time = shanghai_to_los_angeles + los_angeles_to_shanghai\n\n    return total_time\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n    \n    result = solve((eq1, eq2), (a, d))\n    \n    a_val = result[a]\n    d_val = result[d]\n    \n    nth_term = a_val + 31*d_val  # As we need the 32nd term\n\n    return nth_term\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    # initial ratio\n    equation1 = Eq(eddi/wiya, 3/2)\n    # new condition after lisa gives eddi $4\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let x represent Helen's daily pocket money\n    # George receives x + 3 daily\n    # Helen spends 5 a day, so she saves x - 5 each day\n    # After saving $60, Helen would have spent (x - 5) * n days, where n is the number of days\n    # George saves (x + 3 - 5) * n days and will have $90 more in savings than Helen,\n    # which means George saves 90 + 60 in total (x + 3 - 5) * n = 90 + 60\n    # We can set up the equations:\n    # (x - 5) * n = 60\n    # (x - 2) * n = 150\n    # Now we solve for x and n\n    \n    from sympy import symbols, Eq, solve\n    \n    x, n = symbols('x n')\n    \n    # Set up the two equations\n    equation1 = Eq((x - 5) * n, 60)\n    equation2 = Eq((x - 2) * n, 150)\n    \n    # Solve the system for x and n\n    solution = solve((equation1, equation2), (x, n))\n    \n    return solution[x]\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of boys and girls initially as b and g respectively.\n    b, g = symbols('b g')\n    \n    # According to the problem, there were 40% more boys than girls initially.\n    equation1 = Eq(b, 1.4 * g)\n    \n    # After 24 boys and girls left, there were 50% more boys than girls.\n    equation2 = Eq(b - 24, 1.5 * (g - 24))\n    \n    # Now let's solve these equations to find the number of boys and girls.\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # We are interested in the number of boys initially which is 'b'.\n    return solutions[b]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    return sum(range(1, 31)) + sum(range(1, 30))\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Linda's speed for the first 2 hours\n    speed_first_hours = 40  # km/h\n    # Distance covered in the first 2 hours\n    distance_first_hours = 2 * speed_first_hours\n    \n    # Distance for the remaining journey\n    distance_remaining = 280  # km\n    # Linda's speed for the remaining journey\n    speed_remaining = 70  # km/h\n    # Time taken for the remaining journey\n    time_remaining = distance_remaining / speed_remaining\n    \n    # Total distance of the whole trip\n    total_distance = distance_first_hours + distance_remaining\n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_count = 0\n\n    # Counting numbers with exactly two sevens and one different digit\n    for i in range(10):\n        if i != 7:\n            # Cases: 77x, 7x7, x77\n            total_count += 3\n\n    # Counting numbers with three sevens\n    total_count += 1  # Only one case: 777\n\n    # Subtracting overlapping cases: numbers like 777 are already counted\n    # So there are no overlapping cases to subtract.\n\n    return total_count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 4 * four_page_letters + 3 * three_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    packet_one = 25  # Number of tablets in the first packet\n    packet_two = 20  # Number of tablets in the second packet\n\n    # Find the least common multiple of the two packet sizes\n    days_to_new_packets = lcm(packet_one, packet_two)\n\n    # Assuming 1st March as day 1, find the next start date\n    day = days_to_new_packets % 30  # Days in March\n    month = 3  # March\n\n    # As long as day exceeds total days in the given month, increase the month count and compute the day\n    while day > 30:\n        month += 1\n        if month in [1, 3, 5, 7, 8, 10, 12]:  # Months with 31 days\n            day -= 31\n        elif month == 2:  # February, not accounting for leap years as it is beyond the 2 packets cycle\n            day -= 28\n        else:  # Months with 30 days\n            day -= 30\n\n        # Adjust the month if it goes beyond December\n        if month > 12:\n            month -= 12\n\n    ans = (day, month)\n    return ans\n    \nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    from fractions import Fraction\n\n    A = Fraction(1, 1)\n\n    # Apply the new operation Δ to find the values of a1, a2, ..., a6\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n\n    # Subtract the sum of a1 to a6 from A to find a0\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Simplify a0 to its simplest form (m/n)\n    a0_simplified = a0.limit_denominator(max_denominator=1000)\n    m = a0_simplified.numerator\n    n = a0_simplified.denominator\n\n    # Find the sum of m and n\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    # Total performances: 6 singing (S) + 4 dancing (D)\n    # We can consider the arrangements of Ds first and then place Ss between them.\n    # To satisfy the constraint of having at least 1 S between every 2 Ds, we can think like this:\n    # _ D _ D _ D _ D _ (where underscores represent possible slots for S performances)\n    # We have 5 slots, but we need at least 3 Ss to separate the Ds (S_D_S_D_S_D_S_D)\n    # Thus, we have 3 Ss fixed and 3 more remaining to be arranged in 5 slots.\n    # We can choose 3 out of 5 slots for these remaining Ss in a combination manner and\n    # then multiply that number by the permutation of the Ss and Ds among themselves.\n\n    # Calculate combinations for the additional Ss: C(5,3)\n    # We have 5 slots and need to place 3 additional Ss\n    n_slots = 5\n    n_additional_Ss = 3\n    combinations_for_additional_Ss = factorial(n_slots) // (factorial(n_additional_Ss) * factorial(n_slots - n_additional_Ss))\n    \n    # Calculate permutations of the 4 Ds\n    permutations_of_Ds = factorial(4)\n\n    # There are remaining 3 Ss to be arranged in chosen slots, can be any order,\n    # so we also calculate permutations for them\n    permutations_of_Ss = factorial(3)\n\n    # Final answer is the product of combinations and permutations\n    return combinations_for_additional_Ss * permutations_of_Ds * permutations_of_Ss\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value_of_8 = (number // 10) % 10 * 10\n    return place_value_of_8\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import factorint\n\n    factors_75 = factorint(75)\n    factors_56 = factorint(56)\n    factors_12 = factorint(12)\n    factors_105 = factorint(105)\n\n    total_factors_2 = factors_75.get(2, 0) + factors_56.get(2, 0) + factors_12.get(2, 0) + factors_105.get(2, 0)\n    total_factors_5 = factors_75.get(5, 0) + factors_56.get(5, 0) + factors_12.get(5, 0) + factors_105.get(5, 0)\n\n    # The number of zeros at the end of a product is determined by the number of pairs of 2 and 5 in its prime factorization.\n    zeros_count = min(total_factors_2, total_factors_5)\n\n    return zeros_count\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, donna = symbols('chloe donna')\n    \n    equation1 = Eq(chloe, 4 * donna)\n    equation2 = Eq(chloe - donna, 816)\n    \n    solutions = solve((equation1, equation2), (chloe, donna))\n\n    return solutions[donna]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) / 8, 3)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    children, adults, boys, girls = symbols('children adults boys girls')\n    \n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n    \n    solutions = solve((equation1, equation2, equation3), (children, adults, boys, girls))\n    \n    total_people = solutions[children] + solutions[adults] + solutions[boys] + solutions[girls]\n    \n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # The ones digit of the base (999)\n    exponent = 99     # The exponent\n    ones_digit = pow(base, exponent, 10)  # Calculate the ones digit\n\n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3 * a + 11 * b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0, since ab is a two-digit number\n        for b in range(0, 10):\n            ab = 10*a + b\n            a0b = 100*a + b\n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Aiden mistakenly did this calculation:\n    mistake = (x / 4) - 25\n    # but he was supposed to do this calculation:\n    correct = (x * 4) + 25\n    \n    # He obtained this answer:\n    mistaken_ans = 2021\n    \n    # Equation based on his mistaken calculation\n    eq = Eq(mistake, mistaken_ans)\n    \n    # Solve the equation to find the original number\n    original_num = solve(eq, x)[0]\n    \n    # Now calculate the correct answer with the original number\n    correct_ans = correct.subs(x, original_num)\n    \n    return correct_ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_numbers = set(range(10))\n    \n    # Based on \"5430\", none of these numbers can be in the solution\n    possible_numbers -= {5, 4, 3, 0}\n    \n    # Based on \"8642\", 6 and 4 are in the correct positions\n    correct_positions = {2: 6, 3: 4}\n    \n    # Based on \"1023\", since 0 and 3 cannot be in the solution, 1 and 2 are in the number but in the wrong positions\n    # Based on \"8765\", since 6 and 4 are correct and in the right position, 8 and 7 are incorrect\n    possible_numbers -= {8, 7}\n    \n    # Based on previous deductions, the numbers in the correct positions cannot be in the other positions\n    for pos, num in correct_positions.items():\n        possible_numbers -= {num}\n\n    # We can now deduce the remaining possible numbers for the first and fourth positions\n    remaining_possible_numbers = list(possible_numbers)\n    \n    # With the above deductions, we can construct the possible 4-digit number\n    ans = '{}{}{}{}'.format(\n        remaining_possible_numbers[0],\n        correct_positions[2],\n        correct_positions[3],\n        remaining_possible_numbers[1]\n    )\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana_price, apple_price = symbols('banana_price apple_price')\n\n    # Ellie pays £1.50 for 2 bananas and 3 apples\n    equation1 = Eq(2 * banana_price + 3 * apple_price, 1.50)\n    # Beth pays £1.45 for 3 bananas and 2 apples\n    equation2 = Eq(3 * banana_price + 2 * apple_price, 1.45)\n\n    # solve for banana and apple prices\n    solutions = solve((equation1, equation2), (banana_price, apple_price))\n\n    # calculate how much Annabella pays for 1 banana and 1 apple\n    annabella_pay = solutions[banana_price] + solutions[apple_price]\n\n    return annabella_pay\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = 14 / (3 * 4)\n    houses_built = houses_per_worker_per_day * 9 * 2\n    return houses_built\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    num3 = 60\n\n    # Finding the gcd of num1 and num2\n    gcd_num1_num2 = gcd(num1, num2)\n\n    # Using the previously found gcd to find the gcd of it and num3\n    ans = gcd(gcd_num1_num2, num3)\n\n    return ans\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n    \n    equation = Eq(children, men + 20)\n    \n    number_of_people = solve(equation, total_people)\n    \n    return number_of_people[0]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        if A % 75 != 0:\n            continue\n        for B in range(100, 1000):\n            if B % 75 == 0 and A != B:\n                if len(set(str(A))) < 3 and len(set(str(B))) < 3:\n                    if len(set(str(A)) & set(str(B))) > 0:\n                        max_sum = max(max_sum, A+B)\n    return max_sum\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    min_pencils, _ = solve_congruence(*congruences)\n\n    return min_pencils\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # height after the second bounce in cm\n    # Since the ball rebounds to one third of the height, we reverse this by multiplying by 3\n    # to find the height from which it fell before the second bounce.\n    height_after_first_bounce = height_after_second_bounce * 3\n    # Repeat the process to find the initial height\n    initial_height = height_after_first_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "from itertools import permutations\n\ndef solution():\n    for ages in permutations(range(1, 29), 3):\n        bob, rex, fido = ages\n        if fido == bob - 10 and sum(ages) == 28 and bob > rex > fido:\n            return bob * rex * fido\n    return None\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    num1 = (1/30) + (1/6)\n    den1 = 2/25\n    first_fraction = num1 / den1\n\n    num2 = 2 - (2/3)\n    den2 = 8/3\n    second_fraction = num2 / den2\n\n    ans = first_fraction + second_fraction\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'b' represent the price of 1 ball, 'm' represent the money Adam has.\n    b, m = symbols('b m')\n    \n    # If Adam buys 5 balls, he'll have $15 left.\n    eq1 = Eq(m - 5 * b, 15)\n    # If Adam buys 8 balls, he'll need $12 more.\n    eq2 = Eq(m - 8 * b, -12)\n\n    # Solve the two equations\n    solution = solve((eq1, eq2), (b, m))\n\n    return solution[b]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    equation1 = Eq(1/lee_rate + 1/nancy_rate, 1/10)\n    equation2 = Eq(6*lee_rate + 20*nancy_rate, 1)\n\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n\n    return 1 / solutions[nancy_rate]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_pupils = 40 + 30\n    total_average = 90\n    total_marks = total_average * total_pupils\n\n    B_average_more = 7\n    A_average = total_average - B_average_more * (30 / total_pupils)\n    B_average = A_average + B_average_more\n\n    return B_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    numerator = 1\n    denominator_sum = (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n    ans = numerator / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_p in range(6):  # He can use 0 to 5 ten-pence coins\n        for twenty_p in range(4):  # He can use 0 to 3 twenty-pence coins\n            for fifty_p in range(2):  # He can use 0 to 1 fifty-pence coins\n                if ten_p * 10 + twenty_p * 20 + fifty_p * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = a**2 - (a - 1) * (a + 1)\n    return ans\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    # Subtract Mark and people behind him from total to get number of people in front of Mark\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 200 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for ages\n    aaron, becky, chris = symbols('aaron becky chris')\n\n    # Equations based on problem description\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    # Since there are infinite solutions, we take the one where aaron > becky > chris and all are positive\n    for sol in solutions:\n        if sol[aaron] > sol[becky] > sol[chris] and sol[aaron] > 0 and sol[becky] > 0 and sol[chris] > 0:\n            return sol[becky]\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f\"125{J}6\") % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and a peach\n    apple, peach = symbols('apple peach')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    # Solve the equations for the cost of an apple and a peach\n    solution = solve((equation1, equation2), (apple, peach))\n\n    # We are interested in the cost of each peach\n    return solution[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    after_adding = final_number / 6\n    original_number = after_adding - 7\n\n    return original_number\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    table, chair = symbols('table chair')\n    \n    # Set up the equations based on the problem statement\n    # 5 tables and 12 chairs cost £720: 5*table + 12*chair = 720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    \n    # Each table costs £25 more than each chair: table = chair + 25\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    # The solution is the cost of one table\n    return solutions[table]\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Using the formula for the sum of squares and cubes\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    def sum_of_cubes(n):\n        return ((n * (n + 1)) // 2) ** 2\n\n    # Given sum: 0×1^2 + 1×2^2 + 2×3^2 +...+ 23×24^2\n    # We break it into two parts: (1^2+2^2+...+24^2) - (1^2+0^2)\n    sum_squares = sum_of_squares(24) - sum_of_squares(1)\n\n    # And: 0×1^3 + 1×2^3 +...+ 23×24^3\n    # We rewrite this as (1^3+2^3+...+23^3) + 23×24^3\n    sum_cubes_except_last = sum_of_cubes(23)\n    last_term_cube = 23 * (24 ** 3)\n\n    # The total sum can be split and calculated using distributive law:\n    # sum_squares - sum_cubes_except_last - last_term_cube (since the last is not multiplied by its cube)\n    ans = sum_squares - (sum_cubes_except_last + last_term_cube)\n\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time_minutes = 360\n    ratio_up_to_down = 5 / 4\n\n    time_up = (total_time_minutes * ratio_up_to_down) / (1 + ratio_up_to_down)\n    time_down = total_time_minutes - time_up\n\n    speed_diff = 10\n\n    speed_down = time_up * speed_diff / (time_down - time_up)\n    speed_up = speed_down - speed_diff\n\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    lcm_days = lcm(25, 20)\n    next_start_day = 1 + lcm_days\n    month = 3\n    year = 2023\n\n    # 2023 is not a leap year, so February has 28 days\n    days_in_february = 28\n    days_in_march = 31\n\n    while next_start_day > days_in_march:\n        next_start_day -= days_in_march\n        month += 1\n        if month > 12:\n            month = 1\n            year += 1\n        # Assuming the question is intended for short term, not accounting for leap years beyond 2023\n        if month == 2:\n            next_start_day -= days_in_february\n            month += 1\n\n    return next_start_day, month, year\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    initial_watermelons = 94\n    initial_pineapples = 138\n    used_watermelons_day = 9\n    used_pineapples_day = 9\n    \n    for days in range(1, max(initial_watermelons, initial_pineapples)):\n        remaining_watermelons = initial_watermelons - days * used_watermelons_day\n        remaining_pineapples = initial_pineapples - days * used_pineapples_day\n        \n        if remaining_pineapples == 3 * remaining_watermelons:\n            return days\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the mass of the fruits each car carries\n    car_fruits = 24.2 / 4\n    \n    # Calculate the mass of the fruits each truck carries\n    truck_fruits = 410 / 50\n    \n    # Calculate the difference\n    difference = truck_fruits - car_fruits\n    \n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival_time_minutes = (9 * 60) + 22  # Convert arrival time to minutes past midnight\n    bus_departure_time_minutes = (9 * 60) + 15  # Convert bus departure time to minutes past midnight\n    \n    time_since_last_bus = (aiden_arrival_time_minutes - bus_departure_time_minutes) % bus_interval\n    wait_time_for_next_bus = bus_interval - time_since_last_bus\n    \n    return wait_time_for_next_bus\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # Since the question is simply the number 11,\n    # and the knowledge point indicates word problem modules but without context,\n    # the solution is to return the number 11 as-is.\n\n    return 11\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    tom_current_age, jerry_current_age = symbols('tom_current_age jerry_current_age')\n\n    # Given that Tom will be twice his age in 4 years\n    equation1 = Eq(tom_current_age + 4, 2 * tom_current_age)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom_current_age - 3) + (jerry_current_age - 3), 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tom_current_age, jerry_current_age))\n\n    # Extract the solution for the current ages\n    tom_age_solution = solutions[tom_current_age]\n    jerry_age_solution = solutions[jerry_current_age]\n\n    # Calculate in how many years from now will Jerry's age be doubled\n    years_until_jerry_age_doubled = symbols('years_until_jerry_age_doubled')\n    equation3 = Eq(jerry_current_age + years_until_jerry_age_doubled, 2 * jerry_age_solution)\n\n    # Solve the equation to find in how many years Jerry's age will be doubled\n    jerry_age_doubled_solution = solve(equation3, years_until_jerry_age_doubled)\n\n    return jerry_age_doubled_solution[0]\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    result = 252 - (62 - 58) * 13\n    return result\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n    return total_cards\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # metres per minute\n    brother_speed = 70  # metres per minute\n    meeting_time = 5  # minutes\n\n    # Distance covered by Eddie = Eddie's speed * time\n    distance_by_eddie = eddie_speed * meeting_time\n\n    # Distance covered by his brother = Brother's speed * time\n    distance_by_brother = brother_speed * meeting_time\n\n    # Total distance to the mall is the sum of distances covered by Eddie and his brother\n    distance_to_mall = distance_by_eddie + distance_by_brother\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    result = (5/9) * 243\n    return result\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1) ** (i + 1) * i ** 2 for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # Total intervals is total flowers divided by flowers between each post\n    total_intervals = total_flowers // flowers_between_posts\n\n    # Total posts is one more than the total intervals\n    total_posts = total_intervals + 1\n\n    road_length = 50\n\n    # The distance between every 2 lamp posts is the road length divided by the total intervals\n    distance_between_posts = road_length / total_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n + (n*(n-1)//2) + (n*(n-1)*(n-2)//6)\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_packed = total_books - books_given_away\n    \n    return books_packed\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    def all_prime(years):\n        return all(isprime(age + years) for age in initial_ages)\n\n    initial_ages = [7, 5, 29, 31]\n    years_passed = 1\n\n    while not all_prime(years_passed):\n        years_passed += 1\n\n    return initial_ages[3] + years_passed\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_fraction = 3/5\n    males = total_adults * male_fraction\n    return int(males)\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and \", \"9000\").replace(\"nine\", \"9\"))\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio_shop_to_school = 6 * 2\n    paths_book_shop_to_school = 4 * 2\n    paths_chapel_to_school = 5 * 3\n\n    total_paths = paths_audio_shop_to_school + paths_book_shop_to_school + paths_chapel_to_school\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = 2 * (solutions[adam] + solutions[ben] + solutions[carl])\n    \n    return total_weight / 2  # Divide by 2 to correct double counting\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n\n    # The pattern of the unit digit for powers of 4 repeats every two steps: 4, 6, 4, 6, ...\n    cycle_length = 2\n    power = 2008\n\n    # Find the position in the cycle\n    position_in_cycle = power % cycle_length\n\n    # Since cycle starts with 4 and alternates, even powers will have unit digit 6, odd will have unit digit 4\n    ans = 6 if position_in_cycle == 0 else 4\n\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n    \n    one_pound_value = one_pound_coins * 1  # £1 each\n    fifty_pence_value = fifty_pence_coins * 0.50  # £0.50 each\n    twenty_pence_value = twenty_pence_coins * 0.20  # £0.20 each\n    \n    total_value = one_pound_value + fifty_pence_value + twenty_pence_value\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamp_posts = 2\n\n    length_of_road = (number_of_lamp_posts - 1) * distance_between_lamp_posts\n    return length_of_road\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks, eddie_sticks = symbols('belle_sticks eddie_sticks')\n\n    belle_initial = 49\n    belle_received = 11\n    belle_final = belle_initial + belle_received\n\n    # After receiving sticks from Eddie, Belle has the same number as Eddie.\n    equation = Eq(belle_final, eddie_sticks)\n\n    # Solve for Eddie's initial number of sticks.\n    solutions = solve(equation, eddie_sticks)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    jason_tea = 983\n    belinda_tea = 179\n    total_tea = jason_tea + belinda_tea\n    equal_volume = total_tea / 2\n    tea_to_give = equal_volume - belinda_tea\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 4, 6]\n    permutations_list = list(permutations(digits))\n    \n    return len(permutations_list)\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return -16 - (18 + 2)\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbit, special_rabbit = symbols('normal_rabbit special_rabbit')\n\n    # normal rabbit: 1 head, 4 feet\n    # special rabbit: 3 heads, 2 feet\n    \n    # Total heads\n    equation1 = Eq(normal_rabbit + 3 * special_rabbit, 53)\n    # Total feet\n    equation2 = Eq(4 * normal_rabbit + 2 * special_rabbit, 102)\n\n    solutions = solve((equation1, equation2), (normal_rabbit, special_rabbit))\n\n    return solutions[normal_rabbit], solutions[special_rabbit]\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum(range(1, 101, 2)) - sum(range(2, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    period = \"142857\"\n    index = (500 - 1) % len(period)\n    return int(period[index])\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one, which means he initially had 5\n    neelesh_initial = 4 + 1\n\n    # Since Neelesh received 1/6 of the sweets from Ayesha, we can find the total number of sweets Ayesha had\n    total_sweets = neelesh_initial * 6\n\n    # The number of sweets Ayesha has left is the total minus the sweets given to Neelesh\n    ayesha_left = total_sweets - neelesh_initial\n\n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weight of one copper ball and one iron ball\n    copper, iron = symbols('copper iron')\n\n    # Equation for the total weight of 8 copper balls and 9 iron balls\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n\n    # Equation for the total weight of 6 copper balls and 3 iron balls\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    # Solve the system of equations for copper and iron\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculating the numerator\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculating the denominator\n    denominator = sum(1 / ((20 - i) * (i + 1)) for i in range(11, 16))\n    \n    # Dividing numerator by denominator to get the answer\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_c = symbols('box_c')\n\n    box_a = 80\n    box_b = 2 * box_c\n    total_marbles = 560\n\n    equation = Eq(box_a + box_b + box_c, total_marbles)\n\n    solution = solve(equation, box_c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    # Let x be the total number of gummy bears initially, y be the total number of lollipops initially.\n    # x/y = 5/7          (1)\n    # (x + 120)/(y + 120) = 4/5     (2)\n    \n    # Solve equations (1) and (2) for x and y with substitution.\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x/y, 5/7)\n    equation2 = Eq((x + 120) / (y + 120), 4/5)\n\n    solutions = solve((equation1, equation2), (x, y))\n    x_value = solutions[x]\n    y_value = solutions[y]\n    \n    # Calculate the total number of candies now.\n    total_now = (x_value + 120) + (y_value + 120)\n\n    return int(total_now)\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3  # Since the pattern [5, 15, 17, 23] repeats 3 times\n    return sum_of_numbers\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert from base 3 to base 10, perform subtraction, convert back to base 3\n    num1_base10 = int(str(12101), 3)\n    num2_base10 = int(str(2210), 3)\n    diff_base10 = num1_base10 - num2_base10\n    ans_base3 = \"\"\n    while diff_base10 > 0:\n        ans_base3 = str(diff_base10 % 3) + ans_base3\n        diff_base10 = diff_base10 // 3\n    return ans_base3 if ans_base3 else \"0\"\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy, bella, carl = symbols('andy bella carl')\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    nums = list(range(1, 21))\n    largest_n = 0\n\n    # Attempt to optimize by checking the complement set\n    for diff in range(1, 6):\n        acceptable_nums = set(nums) - set(range(diff, 21, 5))\n        n = len(acceptable_nums)\n        if n > largest_n:\n            largest_n = n\n\n    return largest_n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for cake and biscuit\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Two equations based on the problem statement\n    equation1 = Eq(1*cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    # We are interested in the calories of one biscuit\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's age now (j) and his mother's age now (m)\n    j, m = symbols('j m')\n    \n    # John's age in 8 years = j + 8\n    # Mother's age 20 years ago = m - 20\n    # According to the first condition, these are equal.\n    equation1 = Eq(j + 8, m - 20)\n    \n    # Now we need to establish the relationship when mother's age was 5 times John's age.\n    # Let's consider 'x' years ago. So we have:\n    # Mother's age x years ago = m - x\n    # John's age x years ago = j - x\n    # According to the second condition, mother's age was 5 times John's age: 5 * (j - x) = m - x\n    # Note that the age difference between John and his mother is constant.\n    # So we can use equation1 to express John's age at that time in terms of m.\n\n    # We know that age difference = m - j which is equal to 28 from equation1\n    age_difference = m - j\n    equation2 = Eq(age_difference, 28)\n    \n    # The second condition at the time mother was 5 times John's age can now be written using their age difference.\n    # m - 5*(m - 28) = 5 * (j) => m - 5m + 140 = 5j => 4m + 5j = 140\n    equation3 = Eq(4 * m - 5 * j, 140)\n    \n    # We can now solve equations 2 and 3 together.\n    solutions = solve((equation2, equation3), (m, j))\n\n    # John's age when his mother was 5 times his age can be solved by considering the time period from now until that point.\n    # That time period is the current age of John minus the age he was at the time, which is represented by 'x' in our setup.\n    # So, the time period 'x' years ago is equal to John's current age - John's age at the time\n    # m/5 gives John's age at the time when his mother was 5 times his age\n    johns_age_when_mother_5_times = solutions[j] - (solutions[m] / 5)\n\n    return johns_age_when_mother_5_times\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    fraction1_num = 2017 * 8 + 7\n    fraction1_den = 8\n    fraction2_num = 3 * 3 + 2\n    fraction2_den = 3\n    fraction3_num = 3 * 32 + 23\n    fraction3_den = 32\n    numerator_fraction_num = fraction1_num * fraction2_den + fraction2_num * fraction1_den\n    numerator_fraction_den = fraction1_den * fraction2_den\n    denominator_term = (2017 * 3 - 2) - (2016 * 3 + 2625 / 3)\n    denominator = denominator_term * 17\n    \n    # Calculate the numerator and the denominator of the complex fraction\n    numerator = (fraction1_num / fraction1_den * fraction2_num / fraction2_den) - (2016.875 * 11 / 3)\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n    \n    # Calculate the result of the complex fraction\n    result_fraction = numerator / denominator\n    result = result_fraction * fraction3_num / fraction3_den\n    \n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for i in range(10):\n        total_pencils = int(\"44\" + str(i))\n        if total_pencils % 44 == 0:\n            return total_pencils // 44\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let's denote the number of letters Sara wrote as 's'\n    s = Symbol('s')\n\n    # Kevin wrote 30 more letters than Sara: k = s + 30\n    # James wrote 40 more letters than Sara: j = s + 40\n    # Altogether, they wrote 160 letters: s + k + j = 160\n\n    # Formulating the equation\n    equation = s + (s + 30) + (s + 40) - 160\n\n    # Solving the equation\n    sara_letters = solve(equation, s)[0]\n    kevin_letters = sara_letters + 30\n\n    return kevin_letters\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    total_amount = 3.20\n    fifty_percent = 0.50\n    ans = total_amount * fifty_percent * fifty_percent\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and 0 not in remainders:\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = lambda a, b: a * b // gcd(a, b)\n    from math import gcd\n\n    tom_time = 24\n    william_time = 8\n\n    # Least common multiple will give the time when they meet for the first time\n    meeting_time = lcm(tom_time, william_time)\n\n    return meeting_time\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    containers = -(-apples // container_capacity)  # Compute ceiling division\n\n    return containers\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    # Equation representing the multiplication with 28 to obtain a perfect square\n    eq = x**2 - 28**2\n\n    # Solve the equation to find the value of x that makes the expression a perfect square\n    solutions = solve(eq, x)\n\n    # We want the smallest positive value\n    ans = min([abs(s) for s in solutions if s > 0])\n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    distance_between_posts = 4\n    length_of_field = 480\n    number_of_posts = (length_of_field // distance_between_posts) + 1\n    \n    return number_of_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0, as ab is a two-digit number\n        for b in range(0, 10):  # b can be 0 to 9\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    andrew, louise = symbols('andrew louise')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(andrew, 3 * louise)  # Andrew is three times as old as Louise\n    equation2 = Eq(andrew + louise, 84) # The sum of their ages is 84\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, (reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    result = (10 + 20 + 30 + 50 + 60 + 70) - (6 + 16 + 26 + 46 + 56 + 66)\n    return result\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n    \n    home_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n    return home_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    for _ in range(years):\n        initial_rabbits = 5 * initial_rabbits / 2\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for i in range(99, 9, -1):\n        if (i - 3) % 4 == 0 and (i - 3) % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # AB can be treated as one unit, so we have 5 units to arrange (AB, C, D, E, F)\n    unit_arrangements = factorial(5)\n\n    # AB can be arranged in 2 ways (AB or BA)\n    ab_arrangements = factorial(2)\n\n    # Total arrangements are combination of both\n    total_arrangements = unit_arrangements * ab_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since we need at least one student to get 5 sweets, let's start dividing the total number of sweets by 5 and then proceed until we get an uneven distribution.\n    class_size = total_sweets // min_sweets_per_student\n\n    # Check if the distribution is even. If it is not even, decrease the class size.\n    while total_sweets % class_size == 0:\n        class_size -= 1\n\n    return class_size\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of each color balloon\n    red, green, purple = symbols('red green purple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n\n    # The total weight equation\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    # Return the number of purple balloons\n    return solutions[purple]\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Calculate the result of 246 * 135\n    result_246_135 = 246 * 135\n    \n    # According to the question we know that 246 * 135 = 33210\n    # We have to find 248 * 135 which is 2 more than 246\n    # We can add 135 two times to the initial result to find the answer\n    ans = result_246_135 + 2 * 135\n    \n    return ans\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    return tens + hundredths + thousandths\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James's height in cm\n    height_difference = 30  # The height difference between James and Mark in cm\n\n    mark_height = james_height + height_difference  # Mark's height in cm\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks // 4\n    blocks_left = total_blocks - blocks_given\n    return blocks_left\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # Since it needs to be even and less than the ones digit which is double this\n        for tens_digit in [0, 2, 4, 6, 8]:  # Even digits\n            for ones_digit in range(0, 10, 2):  # Even digits\n                # Form the number\n                number = 100 * hundreds_digit + 10 * tens_digit + ones_digit\n                # Check properties (b), (c) and (d)\n                if hundreds_digit != tens_digit and tens_digit != ones_digit and hundreds_digit != ones_digit:\n                    if ones_digit == 2 * hundreds_digit:\n                        if hundreds_digit < tens_digit:\n                            # Check property (a)\n                            if number % 2 == 0 and number % 9 == 0:\n                                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    color_pencil, notebook = symbols('color_pencil notebook')\n\n    equation1 = Eq(5 * color_pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * color_pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (color_pencil, notebook))\n\n    return solutions[color_pencil] + solutions[notebook]\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # Initial ratio of chocolates\n    equation1 = Eq(sally / ken, 5/7)\n\n    # Ken gives Sally 24 chocolates\n    equation2 = Eq(sally + 24, 2 * (ken - 24))\n\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    return solutions[ken]\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    free_hours = 40\n    first_segment_cost = 5 * (50 - 40)\n    second_segment_cost = 8 * (60 - 50)\n\n    # If the bill is within the first segment after free hours\n    if total_bill <= first_segment_cost:\n        hours = (total_bill / 5) + free_hours\n    # If the bill is within the second segment\n    elif total_bill <= first_segment_cost + second_segment_cost:\n        hours = ((total_bill - first_segment_cost) / 8) + 50\n    # If the bill exceeds both the first and second segments\n    else:\n        hours = ((total_bill - first_segment_cost - second_segment_cost) / 15) + 60\n    \n    return hours\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Distance covered by Peter is the same in both cases.\n    # Let x be the number of steps of the escalator.\n    # When Peter walks at 1 step per second for 10 seconds,\n    # the escalator adds some steps, let it be y steps.\n    # So, x = 10 + y (1)\n    \n    # When Peter walks at 2 steps per second for 16/2 = 8 seconds,\n    # the escalator adds steps again, which should be 8 * (y/10) because\n    # the escalator's speed is constant and time is 8 seconds now.\n    # So, x = 16 + 8 * (y/10) (2)\n    \n    # Solving (1) and (2) for x and y\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    x = Symbol('x')\n    y = Symbol('y')\n    \n    equation1 = x - 10 - y\n    equation2 = x - 16 - (8 * (y / 10))\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n\n    number_thought = (sides_in_square * 2) - sides_in_triangle\n\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of money the three boys have\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    # Equation 1: Raju has 3 times as much money as Vijay\n    eq1 = Eq(raju, 3 * vijay)\n    \n    # Equation 2: Raju has $152 more than Patrick\n    eq2 = Eq(raju, patrick + 152)\n    \n    # Equation 3: The average amount of money the three boys have is $507\n    eq3 = Eq((raju + vijay + patrick) / 3, 507)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (raju, vijay, patrick))\n    \n    # Return the amount of money Vijay has\n    return solutions[vijay]\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 1014\n    digit_count = 0\n    page_number = 0\n    \n    while digit_count < total_digits:\n        page_number += 1\n        digit_count += len(str(page_number))\n    \n    return page_number - 1 if digit_count > total_digits else page_number\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent) * weeks\n\n    ans = joanna_total - amy_total\n\n    return ans\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((57 + magic_number), 4 * (9 + magic_number))\n    \n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways to pick any 4 students without any restriction:\n    total_ways_any_students = comb(total_male_students + total_female_students, 4)\n\n    # Total ways to pick 4 male students (which means no female student is in the committee):\n    total_ways_all_male_students = comb(total_male_students, 4)\n\n    # Subtracting the ways that have all male students from the total ways\n    # to find the ways that include at least one female student:\n    total_ways_at_least_one_female = total_ways_any_students - total_ways_all_male_students\n\n    # Multiply by the number of ways to choose a teacher, as there are 2 teachers:\n    total_ways = total_ways_at_least_one_female * total_teachers\n\n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - 6 * i for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    n10 = 23\n    n15 = 38\n    position_diff = 15 - 10\n    common_difference = (n15 - n10) / position_diff\n    n12 = n10 + common_difference * (12 - 10)\n    return n12\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    n = (5 - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    total_cups = 45\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    \n    total_milk = total_cups * milk_per_cup\n    total_tea = total_cups * tea_per_cup\n    \n    total_liquid = total_milk + total_tea\n\n    return total_liquid\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n\n    percentage = (marks_scored / total_marks) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    # Sarah's total cost\n    sarah_cost = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_cost = 3 * book_price + 8 * 0.40\n    \n    # Equation based on the problem statement\n    equation = Eq(sarah_cost, rebecca_cost + 1)\n\n    # Solve for the price of a book\n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of gummy bears bought by Candice be x.\n    # Therefore, Bernice buys x + 8 and Angela buys x + 8 + 2.\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    # Bernice buys eight more gummy bears than Candice.\n    equation1 = Eq(bernice, candice + 8)\n    # Angela buys two more gummy bears than Bernice.\n    equation2 = Eq(angela, bernice + 2)\n    # Together the three girls spend 3.42 pounds on gummy bears, and each costs 0.06 pounds.\n    equation3 = Eq(0.06 * (angela + bernice + candice), 3.42)\n\n    # Solve the equations.\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given that the median is 20, which is the middle value of this odd-numbered list,\n    # the median corresponds to n+8.\n    median = 20\n    n = median - 8\n\n    # Now, we find the mean by adding all elements of the list and dividing by the number of elements.\n    elements = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(elements) / len(elements)\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10  # Total volume of orange juice\n    per_container_volume = 2  # Volume each container can hold\n    num_containers = total_volume / per_container_volume  # Number of containers needed\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the weights of the three apples be a, b, and c, with a being the heaviest and c being the lightest.\n    a, b, c = symbols('a b c')\n\n    # Equation for when Tim eats the largest apple, the mean weight of the remaining two is 70 grams.\n    equation1 = Eq((b + c) / 2, 70)\n\n    # Equation for when Tim eats the lightest apple, the mean weight of the remaining two is 105 grams.\n    equation2 = Eq((a + b) / 2, 105)\n\n    # Solve the system of equations for a, b, and c.\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Calculate the difference between the heaviest and the lightest apple.\n    # The solutions for a and c will be in terms of b, so we take any valid b to compute the weights.\n    weight_diff = solutions[a].subs(b, 70) - solutions[c].subs(b, 70)\n\n    # Return the absolute value of the difference because we need the positive weight difference.\n    return abs(weight_diff)\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    total_sum = 60\n    # Let the first number be n, then the consecutive numbers will be n+1 and n+2\n    # Therefore, n + (n + 1) + (n + 2) = 60\n    # Solving for n we get 3n + 3 = 60\n    n = (total_sum - 3) / 3\n    # The largest number will then be n + 2\n    largest_number = n + 2\n    return int(largest_number)\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    # Total possible handshakes if no restrictions were in place\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Handshakes that did not happen among the non_shaking_groups\n    non_shaken_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n    # Subtract handshakes that did not happen from the total possible handshakes\n    handshakes_that_happened = total_handshakes - non_shaken_handshakes\n\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(0, 10):\n        if 1000 + 100 + 10 + 1 + 100 + 10 + A == 1111:\n            return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for original_number in range(1, 10):\n        new_number = int(str(original_number) + '0')\n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    total_distance_plum = (41 - 1) * 4\n    num_pine_trees = (total_distance_plum // 5) + 1\n    return int(num_pine_trees)\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd when counting in any direction,\n    # the array must have 3 rows and 3 columns. \n    # This is because Bob being the 3rd requires 2 animals in front and \n    # 2 animals behind in every direction, forming a square around him.\n  \n    # Therefore, the total number of animals is that of a 3x3 array.\n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = ((100 // 11) + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    if largest_multiple == 300:\n        largest_multiple -= 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 12 * 4000\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    \n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z be the number of one-cent coins, two-cent coins, and five-cent coins, respectively.\n    x, y, z = symbols('x y z')\n\n    # We have three equations based on the problem statement:\n    # Equation 1: The ratio of the height of one-cent coins to two-cent coins (6:5)\n    equation1 = Eq(6*x, 5*y)\n    # Equation 2: The ratio of the height of one-cent coins to five-cent coins (4:3)\n    equation2 = Eq(4*x, 3*z)\n    # Equation 3: The total number of coins used is 124\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Extract solutions for the number of each type of coin\n    num_one_cent = solutions[x]\n    num_two_cent = solutions[y]\n    num_five_cent = solutions[z]\n\n    # Calculate the total value of all the coins\n    total_value = num_one_cent + 2*num_two_cent + 5*num_five_cent\n\n    return total_value\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and blue_pens.is_integer() and red_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    spent_on_books = total_money * 0.25\n    remaining_after_books = total_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    money_left = remaining_after_books - spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)  # Replace m with the actual number of components produced last year"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in Container B\n    x = symbols('x')\n    # Container A had 350 mL more water than Container B at first,\n    # so it had x + 350 mL of water.\n    \n    # After 500 mL of water was spilled, Container A had (x + 350) - 500 mL of water left,\n    # which simplifies to x - 150 mL of water.\n    \n    # Container B had twice as much water as what was left in Container A,\n    # so Container B had 2 * (x - 150) mL of water, which equals 2x - 300 mL of water.\n    \n    # At the start, Container B initially had x mL of water. Hence the equation is:\n    equation = Eq(x, 2 * (x - 150))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the amount of water in Container A at first\n    initial_water_A = solution[0] + 350\n\n    return initial_water_A\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Start with the largest 6-digit number and decrease to find the largest palindrome\n    for num in range(999999, 100000 - 1, -1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 6 == 0:  # Check if the number is divisible by 6\n                return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n\n    total_children_after_an_hour = boys_initial + girls_initial + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    required_length_m = 1.83  # m\n    shortfall_cm = 10  # cm\n    \n    # Convert shortfall to meters\n    shortfall_m = shortfall_cm / 100  # m\n    \n    # Calculate length of piece in garage in meters\n    garage_piece_m = required_length_m - shortfall_m\n    return garage_piece_m\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    \n    # Let the total number of needles be 5u (because 4/5 of the needles were sold),\n    # then the number of needles sold is 4u and the number of pins initially is 2540 - 5u.\n    # Since the number of pins and needles left is equal:\n    # (2540 - 5u) - 1820 = 5u - 4u => u = (2540 - 1820) / 2\n    \n    u = (total_pins_needles - sold_pins) / 2\n    \n    # Number of needles she had left is 5u - 4u = u\n    needles_left = u\n    return int(needles_left)\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    total_numbers = 41\n    pattern_length = len(pattern)\n    \n    full_patterns = total_numbers // pattern_length\n    remaining_numbers = total_numbers % pattern_length\n    \n    sum_full_patterns = sum(pattern) * full_patterns\n    sum_remaining_numbers = sum(pattern[:remaining_numbers])\n    \n    total_sum = sum_full_patterns + sum_remaining_numbers\n    \n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_marbles = symbols('initial_marbles')\n\n    marbles_after_friends = initial_marbles - (3/8) * initial_marbles\n    marbles_after_brother = marbles_after_friends - (5/7) * marbles_after_friends\n    marbles_final = marbles_after_brother + 408\n\n    equation = Eq(marbles_final, 2 * initial_marbles)\n\n    ans = solve(equation, initial_marbles)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    total_amount = 47\n    combinations = 0\n    for two_pence_count in range(0, total_amount // 2 + 1):\n        if (total_amount - two_pence_count * 2) % 5 == 0:\n            combinations += 1\n    return combinations\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator_sequence = [(9+10+11)/8, (10+11+12)/9, (11+12+13)/10, (12+13+14)/11]\n    denominator_sequence = [1/8, 1/9, 1/10, 1/11]\n\n    numerator = numerator_sequence[0] - numerator_sequence[1] + numerator_sequence[2] - numerator_sequence[3]\n    denominator = denominator_sequence[0] - denominator_sequence[1] + denominator_sequence[2] - denominator_sequence[3]\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # The ages difference will remain constant over time\n    age_difference = 41 - 14\n\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        # Check for reverse of ages\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11 - x1):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass_tree = 16  # time in seconds\n    length_of_train = 480  # length in meters\n\n    speed = length_of_train / time_to_pass_tree  # speed in meters per second\n    return speed\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n\n    # Round off each number to the nearest hundred\n    rounded_number1 = round(number1, -2)\n    rounded_number2 = round(number2, -2)\n\n    # Calculate the estimated difference\n    estimated_difference = rounded_number1 - rounded_number2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for i in range(1, 8):  # dividing into two natural numbers\n        count += 1  # Each i gives a unique partition with (i, 8-i)\n    \n    # dividing into more than two numbers is equivalent to distributing\n    # the remaining 8 - i candies to i - 1 places\n    for i in range(2, 8):  # start with at least two 1's\n        for j in range(1, 8 - i + 1):\n            if i + j < 8:\n                count += 1  # combination for each partition\n            for k in range(1, 8 - (i + j) + 1):\n                if i + j + k < 8:\n                    count += 1  # combination for each partition\n                for l in range(1, 8 - (i + j + k) + 1):\n                    if i + j + k + l == 8:\n                        count += 1  # combination found that sums to 8\n    return count\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    # Price per kg of apples\n    price_per_kg = 3.60 / 2.5\n    \n    # Calculate the cost of 3.5 kg of apples\n    cost_for_3_5_kg = price_per_kg * 3.5\n    \n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (num_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_sum += number\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    num_pastas = 4\n    num_sauces = 3\n    num_toppings = 3\n\n    combos = num_pastas * num_sauces * num_toppings\n    return combos\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    max_attempts = 0\n    for i in range(1, 11):\n        max_attempts += i \n    return max_attempts\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n    poppers_left = total_guests % bag_size\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Pattern for the ones digit of the powers of 7:\n    # 7^1 = 7 -> Ones digit is 7\n    # 7^2 = 49 -> Ones digit is 9\n    # 7^3 = 343 -> Ones digit is 3\n    # 7^4 = 2401 -> Ones digit is 1\n    # Then the pattern repeats: 7, 9, 3, 1\n\n    pattern = [7, 9, 3, 1]  # ones digits of 7^1, 7^2, 7^3, 7^4\n    index = (2023 - 1) % 4   # we subtract 1 because we start counting powers from 0\n    ones_digit = pattern[index]\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import root, Rational\n    from math import sqrt\n\n    numerator = root(Rational(-40, 3), 3) * (Rational(37, 9))**2\n    denominator = Rational(5924, 100) - sqrt(Rational(100, 9))\n    result = numerator / denominator\n\n    return round(float(result), 3)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # Least 5-digit palindrome is 10001\n    least_5_digit_palindrome = 10001\n    \n    # Greatest 6-digit palindrome is 999999\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    pick_children = 2\n    \n    ans = comb(total_children, pick_children)\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create a string containing all concatenated numbers from 1 to 30\n    number_string = ''.join(str(i) for i in range(1, 31))\n    \n    # Since we want the smallest number after removing 46 digits,\n    # we need to remove digits from the left as much as possible.\n    # The leftmost digits carry the highest value.\n    # So we keep the last 46 characters and remove everything else.\n    min_number_string = number_string[:-46]\n    \n    # If there are leading zeroes, they should be removed to ensure\n    # the number is not considered as 0 and to get the smallest number\n    min_non_zero_number = min_number_string.lstrip('0')\n    \n    # If after removing leading zeros, the string is empty, it means all\n    # characters were zeros, so we should take the first non-zero digit from\n    # the right of the removed part and put it at the beginning.\n    if not min_non_zero_number:\n        reverse_number_string = number_string[::-1]\n        for char in reverse_number_string[:46]:\n            if char != '0':\n                min_non_zero_number = char + '0' * (46 - 1)\n                break\n    \n    return int(min_non_zero_number)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys are 1/4 of the total, multiply by 4 to get the total\n    girls = total_members * (3/4)  # Three quarters are girls\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_current_age = 8\n    lucy_current_age = 36\n    target_age_sum = 60\n    \n    years_passing = 0\n    while sara_current_age + lucy_current_age < target_age_sum:\n        years_passing += 1\n        sara_current_age += 1\n        lucy_current_age += 1\n    \n    return years_passing\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    \n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n    \n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    coin_value = 1\n    num_coins = int(book_cost // coin_value)\n    change = num_coins * coin_value - book_cost\n    return -round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(99, 120, 2):\n        sum += i * sign\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n\n    age_solution = solve((equation1, equation2), (older_current, younger_current))\n\n    return age_solution[older_current]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    colors = 5\n    # Rona must pick one from each color, but since she needs a pair,\n    # she might have to pick all gloves of different colors before getting a matching pair.\n    # Therefore, she needs to pick one glove from each of the 5 colors (5 gloves in total)\n    # and then one more to ensure she has a pair.\n    gloves_needed = colors + 1\n    \n    return gloves_needed\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for Sam's and Peter's initial number of stickers\n    sam, peter = symbols('sam peter', integer=True)\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # After Sam gave 20% of his stickers to Peter\n    sam_gives = sam * 20 / 100\n    sam_after_gives = sam - sam_gives\n    peter_after_gets = peter + sam_gives\n\n    # Peter then gave 25% of his stickers after receiving Sam's stickers to Sam\n    peter_gives = peter_after_gets * 25 / 100\n    peter_final = peter_after_gets - peter_gives\n    sam_final = sam_after_gives + peter_gives\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert the mixed number to an improper fraction\n    numerator = 201 * 7 + 1\n    denominator = 7\n\n    # Perform the division\n    result = (numerator / denominator) / 8\n    \n    # Subtract 1/7 to find A\n    A = result - (1 / 7)\n\n    return A\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    return 13 * (13 - 1) // 2\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    raised_price = original_price * (1 + 10/100)\n    final_price = raised_price * (1 - 10/100)\n    return final_price\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n\n    original_ratio = Eq(footballs, 2/5 * basketballs)\n    new_ratio = Eq(footballs, 2/3 * (basketballs - 16))\n\n    solutions = solve((original_ratio, new_ratio), (footballs, basketballs))\n\n    total_initial = solutions[footballs] + solutions[basketballs]\n\n    return total_initial\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # In a single round-robin, each of the n contestants plays a game with every other contestant.\n    # Therefore, in a group of 4, each player plays 3 games: C(4, 2) to find number of games in one group\n    group_games = 4 * (4 * 3 // 2)\n\n    # In the knockout stage:\n    # Top 8 requires 4 games to determine winners,\n    # Top 4 requires 2 games, \n    # Top 2 requires 1 game.\n    knockout_games = 4 + 2 + 1\n\n    # Plus games for determining third and fourth place.\n    third_fourth_game = 1\n\n    # Total number of games\n    total_games = group_games + knockout_games + third_fourth_game\n\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert the total time spent by the teacher from minutes to hours\n    total_time = 7.2 / 60\n    \n    # Calculate the relative speed when the teacher runs towards the head of the line\n    # It's the sum of both the teacher's and students' speeds\n    relative_speed_up = 12 + 8\n    \n    # Calculate the relative speed when the teacher runs back to end of the line\n    # It's the difference between the teacher's and students' speeds\n    relative_speed_down = 12 - 8\n    \n    # Let d be the one-way distance to cover from the end to the front\n    # During the first part of the trip (towards the head of the line) t1 = d / relative_speed_up\n    # During the second part of the trip (back to end of the line) t2 = d / relative_speed_down\n    # The total time (t1 + t2) is known and equals to the total time spent by the teacher\n    # Hence, we can calculate d as follows:\n    # d / relative_speed_up + d / relative_speed_down = total_time\n    # We can now solve the equation for d\n    \n    # Total distance traveled by the teacher\n    d = (relative_speed_up * relative_speed_down) / (relative_speed_up + relative_speed_down) * total_time\n    \n    # Length of the line is the one-way distance to cover from the end to the front\n    return d\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    factor = 9\n    flora_age_then = flora_age_now - 2\n    fathers_age_then = factor * flora_age_then\n    fathers_age_now = fathers_age_then + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = 0\n    for num in range(31, 40):\n        if num % 4 == 0 and num % 6 == 0:\n            sweets = num\n            break\n    return sweets\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doggo, bugcat, pusheen = symbols('doggo bugcat pusheen')\n\n    equation1 = Eq(bugcat, pusheen * 5)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(doggo + bugcat + pusheen, 189)\n\n    solutions = solve((equation1, equation2, equation3), (doggo, bugcat, pusheen))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for number in range(8, 86):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Speeds given in km/h\n    speed_slow = 4\n    speed_fast = 6\n\n    # Time difference in hours\n    # Convert minutes to hours by dividing by 60\n    time_difference = (20 + 10) / 60\n\n    # Using the formula: distance = speed * time\n    # Since the distance is the same, we can use the ratio of speeds\n    # and the inverse ratio of times. Hence, we have the following equation:\n    # speed_slow / speed_fast = (time_fast - time_difference) / time_fast\n    # Which simplifies to:\n    # speed_slow * time_fast = speed_fast * (time_fast - time_difference)\n    # Solving for time_fast:\n    # time_fast = speed_slow * time_fast / (speed_fast - speed_slow + time_difference * speed_slow)\n    \n    # Rearranging the terms gives us:\n    # time_fast = time_difference / (speed_fast/speed_slow - 1)\n    # Compute time_fast in hours\n    time_fast = time_difference / (speed_fast/speed_slow - 1)\n\n    # Now, calculate the distance using the speed_fast and time_fast\n    distance = speed_fast * time_fast\n\n    return distance\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):  # first 25 even numbers\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100  # Convert pounds to pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candies = 3\n    # Ken took 1 less than half of the remaining pieces, so before he took, there were:\n    before_ken = (remaining_candies * 2) + 1\n    # Nini took 3 more than half of the remaining pieces, so before she took, there were:\n    before_nini = (before_ken * 2) - 3\n    # Ivy took 2 less than half of the pieces left, so before she took, there were:\n    before_ivy = (before_nini * 2) + 2\n    # Eddie took 1 more than half of the pieces of candy, so before he took, there were:\n    before_eddie = (before_ivy * 2) - 1\n\n    return before_eddie\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance the snail must climb\n    total_distance = 18\n\n    # Distance climbed each day\n    daily_climb = 7\n\n    # On the 6th day, the snail is able to climb only 3 meters\n    day_6_climb = 3\n\n    # Calculate the distance climbed after 5 days\n    distance_after_5_days = daily_climb * 5\n\n    # Subtract the distance climbed on the 6th day to find the height before climbing on the 6th day\n    height_before_6th_day_climb = distance_after_5_days - day_6_climb\n\n    # Distance remaining for the snail to climb out after the 5th day\n    distance_remaining = total_distance - height_before_6th_day_climb\n\n    # Since the snail gets out on the 6th day, the distance climbed that day equals the remaining distance\n    distance_climbed_on_6th_day = distance_remaining\n\n    # Find out the snail's slide during the night by subtracting\n    # the distance climbed during the day from what it manages on the 6th day\n    night_slide = daily_climb - distance_climbed_on_6th_day\n\n    return night_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations('CYZZ'))\n    return len(arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let's denote the number of boys as b and the number of girls as 3*b (since there are 3 times as many girls as boys).\n    # Each girl took 2 paintbrushes, and each boy took 3 paintbrushes.\n    # Total paintbrushes taken by girls will be 2 * (3*b) and by boys will be 3 * b.\n    # Together, they took 99 paintbrushes. So we get the equation:\n    # 2 * (3*b) + 3 * b = 99\n    # Which simplifies to:\n    # 6*b + 3*b = 99\n    # 9*b = 99\n    # b = 99 / 9\n    # b = 11 (This is the number of boys)\n    # Since we are asked for the number of girls, we will multiply the number of boys by 3.\n    # g = 3 * b\n    # g = 3 * 11\n    # g = 33 (This is the number of girls)\n    b = 99 / 9\n    g = 3 * b\n    return g\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = 3 ** 2 * 2 ** 3\n    sum_of_m_n = m + n\n    return sum_of_m_n\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Unit conversions to meters\n    height_in_meters = 5  # Already in meters\n    height_in_cm_to_m = 120 / 100  # Convert cm to meters\n    height_in_mm_to_m = 50 / 1000  # Convert mm to meters\n    height_in_feet_to_m = 8 * 0.3048  # Convert feet to meters\n\n    # Typical height of a pupil should be between 1m and 2m\n    correct_estimations = []\n    \n    if 1 < height_in_meters < 2:\n        correct_estimations.append('5m')\n    if 1 < height_in_cm_to_m < 2:\n        correct_estimations.append('120cm')\n    if 1 < height_in_mm_to_m < 2:\n        correct_estimations.append('50mm')\n    if 1 < height_in_feet_to_m < 2:\n        correct_estimations.append('8 feet')\n        \n    return correct_estimations\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    total_score_boys = total_boys * average_boys\n\n    total_participants = total_boys + total_girls\n    average_all = 82\n    total_score_all = total_participants * average_all\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    \n    alyson_piece = 2\n    clara_piece = 3\n    joyce_piece = 5\n\n    shortest_length = lcm(alyson_piece, clara_piece, joyce_piece)\n    \n    return shortest_length\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    # Unitary method: Find the amount of food one rabbit needs for 15 days\n    food_per_rabbit_for_15_days = days_initial / rabbits_initial\n\n    # Now find the total amount of food that 20 rabbits would need for the same 15 days\n    total_food_for_20_rabbits_for_15_days = food_per_rabbit_for_15_days * rabbits_final\n\n    # Since the total food amount is constant, we find the number of days 20 rabbits can\n    # be fed with the same amount of food initially meant for 12 rabbits for 15 days\n    days_final = days_initial / total_food_for_20_rabbits_for_15_days\n\n    return days_final\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    total_trees = 100\n    more_trees = 12\n\n    # Let number of trees planted by boys be x, then girls planted x + 12 trees\n    # According to the problem, x + (x + 12) = total_trees\n    # 2x + 12 = total_trees\n    # 2x = total_trees - 12\n    # x = (total_trees - 12) / 2\n\n    x = (total_trees - more_trees) // 2\n\n    return x\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gift = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gift\n    more_money_needed = dress_cost - total_money\n\n    return more_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Starting time when Abigail gets up\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # Time spent for breakfast\n    breakfast_time = timedelta(minutes=25 + 10)\n    \n    # Time spent on journey to school\n    journey_time = timedelta(minutes=35)\n    \n    # She arrives 5 minutes late\n    late_time = timedelta(minutes=5)\n    \n    # Time when registration was supposed to start\n    registration_time = get_up_time + breakfast_time + journey_time - late_time\n    \n    # Format answer\n    ans = registration_time.strftime(\"%H:%M\")\n    return ans\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method (Lincoln Index)\n    # The estimated number of fish in the pond is given by:\n    # Total number of fish = (number of fish in the first catch * number of fish in the second catch) / number of marked fish recaptured\n\n    first_catch = 100\n    second_catch = 200\n    marked_recaptured = 25\n\n    total_fish = (first_catch * second_catch) / marked_recaptured\n\n    return total_fish\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    \n    mass_of_salt = salt_per_packet * packets\n    \n    return mass_of_salt\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))**2\n    sum_to_9 = sum(range(1, 10))**2\n    ans = sum_to_20 - sum_to_9\n    return ans\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 16\n    class_c = 20\n\n    gcf_ab = gcd(class_a, class_b)\n    gcf_abc = gcd(gcf_ab, class_c)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (3, 4),  # x % 4 = 3\n        (4, 5),  # x % 5 = 4\n        (6, 7)   # x % 7 = 6\n    ]\n\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # We need at least 5 different colours, with at least 10 pencils for each colour\n    # If we take 4 colors times 10 pencils, we're not guaranteed to have 5 different colors yet\n    # So, we take one more pencil to ensure we have at least 5 different colours\n    min_pencils = 4 * 10 + 1\n    \n    return min_pencils\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g = number of girls, b = number of boys\n    # Let gs = girls who can swim, gns = girls who cannot swim\n    # Let bs = boys who can swim, bns = boys who cannot swim\n    g, b, gs, gns, bs, bns = symbols('g b gs gns bs bns')\n\n    # Total number of students\n    total_students_eq = Eq(g + b, 1690)\n    \n    # There are 90 more boys than girls\n    boys_girls_diff_eq = Eq(b, g + 90)\n    \n    # Ratio of girls who can swim to those who cannot swim: 31:49\n    girls_swim_ratio_eq = Eq(gs/gns, 31/49)\n    \n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    boys_swim_diff_eq = Eq(bs, bns - 120)\n    \n    # Express gns and gs in terms of g using the ratio 31:49\n    girls_swim_ratio_exp_eq = Eq(gs + gns, g)\n    # Replacing gs with 31/49 * gns using the ratio\n    girls_swim_ratio_subs_eq = Eq(gs, 31/49 * gns)\n    \n    # Since gs is in terms of gns, replace it in the girls_swim_ratio_exp_eq to find gns\n    gns_solution_eq = Eq(31/49 * gns + gns, g)\n    solutions_gns = solve((gns_solution_eq), (gns))\n    \n    # We solve to find g using the ratio of girls who can swim to those who can't (g = 80 * gns)\n    g_exp_eq = gs + gns\n    # Combine the equations and solve\n    solutions_g = solve((g_exp_eq.subs(gs, 31/49 * gns), gns_solution_eq), (g, gns))\n\n    # Using the solutions for g and the boys_girls_diff_eq, we find the solution for b\n    b_solution_eq = boys_girls_diff_eq.subs(g, solutions_g[g])\n    solutions_b = solve(b_solution_eq, b)\n    \n    # Using the solutions for b and the boys_swim_diff_eq, we find the solutions for bns\n    bns_solution_eq = boys_swim_diff_eq.subs(bs, bns - 120)\n    solutions_bns = solve(bns_solution_eq.subs(b, solutions_b), bns)\n    \n    # The number of pupils who cannot swim is the sum of girls who cannot swim and boys who cannot swim\n    total_non_swimmers = solutions_gns[gns] + solutions_bns\n\n    return total_non_swimmers\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n    return coaches_needed\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Original ratio\n    equation1 = Eq(pip/bud, 4/7)\n\n    # After Santa gave Bud five sweets, the new ratio\n    equation2 = Eq((pip/(bud + 5)), 8/15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    average_score = 90\n    num_assignments = 5\n    scores_sum = average_score * num_assignments\n    current_sum = 96 + 85 + 89 + 92\n\n    fifth_score = scores_sum - current_sum\n\n    return fifth_score\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # The total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # The number of intervals between the wheats is the same as the number of wheats minus 1\n    # Because there's a wheat at each corner, we subtract 4 (one for each corner)\n    intervals = 116 - 4\n\n    # The distance between each wheat is the perimeter divided by the number of intervals\n    distance = perimeter / intervals\n\n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    # Since we are only interested in the last digit, we only consider the last digit of 5 and 7\n    last_digit_5 = 5\n    last_digit_7 = 7\n    \n    # The last digit of any power of 5 is always 5\n    # For 7, the powers cycle every four: 7, 9, 3, 1\n    # So we need to find the last digit of 7^30\n    # Since 30 is a multiple of 4, the last digit is the same as 7^4, which is 1\n    \n    # Therefore, the last digit is the product of the last digits of 5 and 1\n    last_digit = (last_digit_5 * 1) % 10  # We use modulus to ensure we get the last digit\n    \n    return last_digit\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 46))\n\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:  # Different numbers\n                    if not (a + b == c or a + c == b or b + c == a):\n                        if b - 1 == 7 or a - 1 == 7 or c - 1 == 7:\n                            if 2*a + b == c or 2*a + c == b or 2*b + a == c or 2*b + c == a or 2*c + a == b or 2*c + b == a:\n                                return a + b + c\n    return None\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    import math\n    length1 = 39\n    length2 = 52\n    gcd = math.gcd(length1, length2)\n    return gcd\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_amount * quarters_in_one_dollar\n    return int(ans)\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a represent the score for an A grade\n    # Let b represent the score for a B grade\n    a, b = symbols('a b')\n    \n    # Simon has 4A and 4B with a score of 36\n    equation1 = Eq(4*a + 4*b, 36)\n    \n    # Peter has 2A and 3B with a score of 22\n    equation2 = Eq(2*a + 3*b, 22)\n    \n    # Solve the system of equations for a and b\n    scores = solve((equation1, equation2), (a, b))\n\n    # Calculate the score for 3A and 5B\n    score_3A_5B = 3 * scores[a] + 5 * scores[b]\n    \n    return score_3A_5B\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    children_between = 2\n    amanda_from_end = 7\n\n    # Calculate the position of Amanda from the start\n    amanda_position = laura_position + children_between + 1\n\n    # Calculate total number of children in the queue\n    total_children = amanda_position + amanda_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assign the known values based on the conditions given\n    A = 2  # A is the smallest prime number\n    B = 4  # B is the smallest composite number\n    C = 1  # C is neither prime number nor composite number nor zero\n    D = 0  # D is 2 less than the smallest prime number, which is 2\n    E = 9  # E is the largest composite number up to 10\n    F = 5  # F only has factors 1 and 5\n    G = 4  # G is the greatest factor of 8 (other than 8 itself)\n    H = 6  # H is the lowest multiple of 6\n    \n    # Combine the numbers to get Tony's phone number\n    phone_number = str(A) + str(B) + str(C) + str(D) + str(E) + str(F) + str(G) + str(H)\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Marry's, Alexis's, and Charlotte's stickers\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    # The equation representing the initial ratio of stickers between Marry and Alexis\n    equation1 = Eq(marry, 7/12 * (marry + alexis))\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry\n    alexis_gave = 0.20 * alexis\n    \n    # Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte + marry_gave + alexis_gave, 1.80 * charlotte)\n    \n    # Marry had 20 stickers more than Charlotte in the end\n    equation3 = Eq(marry - marry_gave, charlotte + marry_gave + 20)\n    \n    # Solve the system of equations for Marry, Alexis and Charlotte\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n    \n    return people_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_per_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3*x), 92)\n    \n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    joe_share = total_squares // 2\n    return joe_share\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # total number of digits (3 twos and 2 threes)\n    twos = 3  # number of twos\n    threes = 2  # number of threes\n\n    # Calculate permutations with repeated elements\n    permutations = factorial(total_digits) // (factorial(twos) * factorial(threes))\n\n    # Subtract the permutations where number starts with 0 (not valid for four-digit numbers)\n    ans = permutations - factorial(total_digits - 1) // (factorial(twos - 1) * factorial(threes))\n\n    return ans\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # Considering Eddie and his mom and dad as one entity, we first find the\n    # number of ways to arrange this entity and the rest of the family members.\n    \n    # Assuming there are n family members in total (including Eddie and his parents),\n    # there are (n - 2) entities now because Eddie and his parents are one entity now.\n\n    # Let's say n = total family members (Eddie's family + Eddie + Eddie's mom and dad)\n    n = 3\n    \n    # Calculate the factorial of (n - 2) to arrange the (n - 2) entities (individuals or the Eddie's entity)\n    arrangements = factorial(n - 2)\n    \n    # Next, find the number of ways to arrange Eddie and his parents within their entity.\n    # Since there are 3 of them, there are 3! ways.\n    internal_arrangements = factorial(3)\n    \n    # Apply the principle of multiplication to find the total arrangements.\n    total_arrangements = arrangements * internal_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for i in range(1, 10):  # Thousands digit cannot be 0\n        for j in range(0, 10):  # Hundreds digit\n            for k in range(0, 10):  # Tens digit\n                pip_number = 1000 * i + 100 * j + 10 * k + i\n                bud_number = 1000 * k + 100 * j + 10 * i + i\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let x be the number of cows that can be fed for 50 days.\n    # According to the problem, we have two scenarios with equal amount of grass:\n    # 25 cows for 10 days and 15 cows for 20 days. \n    # Hence, we can set up a proportion: (25 cows * 10 days) = (15 cows * 20 days).\n    # This can be simplified to 25 * 10 = 15 * 20.\n    # We need to find the number of cows that can be fed for 50 days. \n    # Let x be the unknown number of cows.\n    # So we have (25 * 10) * 5 = x * 50, because the number of days is 5 times the number in the first scenario.\n    # We can now solve for x:\n    x = (25 * 10 * 5) / 50\n  \n    return int(x)\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # Given that John reads a different number of pages every day,\n    # he forms an arithmetic sequence of the number of pages read with a\n    # common difference of at least 1. In the maximum days scenario, the \n    # common difference would be 1 and John would read 1 page on the first day,\n    # 2 pages on the second day, and so on.\n    # We want to find the maximum length of such a sequence where the sum\n    # is 95 pages. This is equivalent to finding the largest n such that\n    # 1 + 2 + ... + n <= 95, which is the sum of an arithmetic progression.\n    # Sum of the first n terms of an arithmetic progression is given by:\n    # S_n = n/2 * (a_1 + a_n), where a_1 is the first term and a_n is the nth term.\n    # For this sequence, a_1 is 1 and a_n is n, therefore we can simplify the formula to:\n    # S_n = n/2 * (1 + n)\n    # Now we need to find the maximum n for which S_n <= 95\n\n    # Initialize variables\n    n = 1\n    total_pages = 0\n\n    # Increase n until the sum exceeds 95\n    while True:\n        total_pages = (n * (1 + n)) // 2\n        if total_pages > 95:\n            break\n        n += 1\n\n    # The answer is the number of days minus 1 because we exceeded 95 in the last iteration\n    return n - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # The initial ratio of oranges to lemons is 3:5\n    initial_ratio = Eq(oranges / lemons, 3/5)\n\n    # After selling 48 oranges, the ratio becomes 1:2\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n\n    # Solve the system of equations to find the number of oranges and lemons\n    solutions = solve((initial_ratio, new_ratio), (oranges, lemons))\n\n    # Return the number of lemons\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    \n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n    \n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = second_day * (5 / 3)\n\n    total_watermelons = first_day + second_day + third_day\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # The 3 math books must be together, so treat them as a single entity (M)\n    # The 2 English books must be together, so treat them as a single entity (E)\n    # Now we have 'M', 'E', and 3 other books which can be arranged in factorial(5) ways\n    \n    # Arrange the 5 entities (M, E, and 3 other books)\n    total_arrangements_of_entities = factorial(5)\n\n    # Within entity M (the 3 math books), we can arrange these books in factorial(3) ways\n    arrangements_within_M = factorial(3)\n\n    # Within entity E (the 2 English books), we can arrange these books in factorial(2) ways\n    arrangements_within_E = factorial(2)\n    \n    # Multiply the arrangements to get the final answer\n    total_arrangements = total_arrangements_of_entities * arrangements_within_M * arrangements_within_E\n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_percentage = 30\n    additional_discount = 100\n    sales_tax_percentage = 10\n\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    price_after_additional_discount = discounted_price - additional_discount\n    final_price = price_after_additional_discount * (1 + sales_tax_percentage / 100)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + people_behind + judy\n\n    return total_people\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    combined_rate = ivy_rate + kevin_rate\n    half_work_time = 12 / 2\n\n    # The amount of work done by Ivy alone for half the time\n    work_done_by_ivy_alone = ivy_rate * half_work_time\n\n    # The remaining work needs to be done by both Ivy and Kevin together\n    remaining_work = 1 - work_done_by_ivy_alone\n    # Calculate how many days it takes to finish the remaining work at the combined rate\n    time_together_to_finish = remaining_work / combined_rate\n\n    # Kevin's off days are the remaining days after they worked together\n    kevin_off_days = half_work_time - time_together_to_finish\n\n    return kevin_off_days\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    # Ophelia has 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n\n    # After buying 21 more, Penelope has 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 / 20) * 8\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # There are 2 colors, so we use the pigeonhole principle.\n    # To ensure she gets at least one pair of the same color, she would need to take out\n    # all socks of one color and one more sock (which would be of the other color).\n    # (Max socks of one color + 1)\n    \n    max_socks_one_color = 4  # Maximum number of socks of one color\n    socks_to_ensure_pair = max_socks_one_color + 1\n    \n    return socks_to_ensure_pair\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange in a row\n\n    # Number of ways to arrange r statues out of n is given by nPr = n! / (n-r)!\n    ans = factorial(n) // factorial(n - r)\n    return ans\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 / flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # In pence\n    new_price = 100  # Converted to pence\n    increase = new_price - original_price\n\n    percentage_increase = (increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    original_price = 80\n    gst_rate = 0.08\n    gst_amount = original_price * gst_rate\n\n    final_price = original_price + gst_amount\n\n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    # Let x be the number of bicycles and y be the number of tricycles.\n    # Then we have:\n    # x + y = 300 (the total number of vehicles)\n    # 2x + 3y = 180 + 2x (the total number of tricycle wheels is 180 more than bicycle wheels)\n    # Simplifying the second equation: 3y - 2x = 180\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 300)\n    equation2 = Eq(3*y - 2*x, 180)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_total = 1 + 2 + 2  # black + white + grey\n    patterns = grey_rabbits // 2\n    max_rabbits = patterns * pattern_total + min(2, grey_rabbits % 2) * 3\n    return max_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # the smallest possible divisor that will give a remainder\n\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return 2015 * 2015 - 2016 * 2014\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    chocolate_biscuits = chocolate_with_foil + neither_chocolate_nor_foil - (foil_wrappers - chocolate_with_foil)\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original speed be \"s\" and the original time be \"t\"\n    s, t = symbols('s t', positive=True)\n    \n    # If speed increases by 25%, new speed is 1.25s and time decreases by 20 minutes (1/3 hours)\n    equation1 = Eq((s * 1.25) * (t - 1/3), s * t)\n    \n    # If speed decreases by 45 m/min, new speed is s-45, and time increases by 75%\n    equation2 = Eq((s - 45) * (t * 1.75), s * t)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, t))\n    \n    # distance = speed * time\n    distance = solutions[s] * solutions[t]\n    \n    return distance\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    is_tongtong_correct = rounded_number == 9764.0\n    ans = rounded_number if not is_tongtong_correct else 'Tongtong is incorrect'\n    return ans\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    result = 398 * (1/4)\n    return result\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the unknown initial number of crystals Jason had\n    initial_crystals = symbols('initial_crystals')\n\n    # Jason sold half of his crystals plus 10 more to Yvonne\n    sold_to_yvonne = (initial_crystals / 2) + 10\n\n    # After mining 20 more crystals, Jason's total becomes initial crystals - sold_to_yvonne + 20\n    after_mining_more = initial_crystals - sold_to_yvonne + 20\n\n    # Jason then sold 14 crystals to Cherlyn, so after this selling, he is left with 35 crystals\n    final_crystals = after_mining_more - 14\n\n    # Now we setup an equation based on the information given: final_crystals == 35\n    equation = Eq(final_crystals, 35)\n\n    # Use sympy's solve function to solve for the initial number of crystals\n    solutions = solve(equation, initial_crystals)\n\n    # Since the problem states crystals which are discrete, we expect a single positive integer solution\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Prime factorization of 5^15 * 2^10\n    # The number of zeros at the end of a product is determined by the number of 5 and 2 pairs\n    # Since we have more 5s than 2s, the number of zeros is limited by the number of 2s\n\n    # Number of pairs of 5 and 2\n    num_zeros = min(15, 10)  # Since there are only 10 twos\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    # Calculate permutations of digits without the decimal point\n    perm = permutations(digits)\n    count = 0\n    # Each permutation can have 3 different positions for the decimal point\n    # (between the 4 digits), so we multiply by 3.\n    for _ in perm:\n        count += 3\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_bala_pair = 2\n\n    total_people = people_in_front_of_ali + ali_bala_pair + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Since there are only black and blue cars, we can find the number of black cars\n    black_cars = total_cars - blue_cars\n\n    # Since there are only Fords and Dodges, we can find the number of Dodges\n    dodges = total_cars - fords\n\n    # Black Fords + Black Dodges = Black cars\n    # Black Fords + 25 (Black Dodges) = Black cars\n    black_fords = black_cars - black_dodges\n\n    # Blue Fords + Blue Dodges = Blue cars\n    # Since all of the Dodges are black, Blue Dodges = 0, so Blue Fords = Blue cars\n    blue_fords = blue_cars\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100\n    num_plants = budget_pence // plant_cost_pence\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    # Let x be the larger number and y be the smaller number.\n    # According to the problem, we have the following two equations:\n    # x + y = 80 (sum equation)\n    # x - y = 40 (difference equation)\n    \n    # We can solve these equations for x and y by adding them:\n    # (x + y) + (x - y) = 80 + 40\n    # 2x = 120\n    # x = 120 / 2\n    x = 120 / 2\n    \n    # Now we can find y by subtracting the difference from the larger number:\n    # x - (x - y) = 80 - 40\n    y = 80 - x\n\n    return y\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if (any(A % i == 0 for i in range(2, A)) and \n            any(B % i == 0 for i in range(2, B)) and\n            any(C % i == 0 for i in range(2, C)) and\n            any(D % i == 0 for i in range(2, D))):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 8 + 10 + 13  # Total number of balls\n    total_colours = 3  # The number of different coloured balls\n    \n    # If he picks one less than the total number of different colours' balls,\n    # there is a chance he might not have all colours.\n    # So, he must pick at least one more than that number.\n    min_picks = total_balls - total_colours + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return ans\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_earnings_per_day = 120\n    number_of_working_days = 5\n    total_earnings = average_earnings_per_day * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    # Assuming `k` apples is the least possible number of apples for the child who gets the most.\n    # By pigeonhole principle, at least one child gets `k` apples.\n    apples_left = 50 - k\n    \n    # The remaining apples must be at least 1 for each of the other 7 children.\n    # So k is the minimum number when apples_left >= 7, meaning 50 - k >= 7\n    k = 50 - 7  # Minimum apples that the child who gets the most can have\n    \n    return k\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_marks = 3\n    wrong_marks = 2\n    andrew_score = 125\n\n    # Assume all answers are correct: 50 * 3 = 150 marks\n    all_correct_score = total_questions * correct_marks\n    # Find the difference between all correct score and Andrew's score\n    score_difference = all_correct_score - andrew_score\n\n    # Since for each wrong answer, we not only lose 3 marks (that we would have gained)\n    # but also get 2 marks deducted. So each wrong answer results in a 5 marks difference.\n    total_marks_lost_per_wrong_answer = correct_marks + wrong_marks\n\n    # Find how many wrong answers would result in the difference\n    wrong_answers = score_difference // total_marks_lost_per_wrong_answer\n    \n    # Find the number of correct answers by subtracting wrong answers from total questions\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_numbers = 12\n    count_to = 30\n    end_at = 10\n    start_from = (end_at - count_to % total_numbers) % total_numbers\n    if start_from == 0:\n        start_from = total_numbers\n    return start_from\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    while len(sequence) < 2011:\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (24 * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31  # Start with the smallest value greater than 30\n    while True:\n        sum_of_series = sum(range(23, (2*k), 2))  # Sum of the odd number series starting at 23\n        if (sum_of_series**0.5).is_integer():  # Check if the square root of the sum is a whole number\n            return int(sum_of_series**0.5)\n        k += 1  # Try the next k if the current does not satisfy the condition\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # The distance driven in the first 2 hours at 40 km/h\n    distance_first_part = 2 * 40\n    # The time taken to drive the remaining 280 kilometres at 70 km/h\n    time_second_part = 280 / 70\n    # The total time taken for the whole trip\n    total_time = 2 + time_second_part\n    # The total distance driven\n    total_distance = distance_first_part + 280\n    # The average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'alan' be the number of cards Alan originally has\n    # Bob has 15 more cards than Alan, and after receiving 25 cards, has 3 times as many cards as Alan.\n    alan, bob = symbols('alan bob')\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_money = 20\n    savings_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = savings_per_day * days_saved\n    current_money = initial_money + total_saved - lent_to_brother - spent_on_snacks\n\n    return current_money\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    total_percentage = 100\n    men_percentage = 37\n    women_children_ratio = 4/5\n    children_men_difference = 12\n\n    # Calculate percentage of children and women\n    children_women_percentage = total_percentage - men_percentage\n\n    # Since there are 12 more men than children, we can create the following equations:\n    # children_percentage / men_percentage = 4 / (4 + 5) -> because the ratio of women to children is 4:5\n    # men = 37% of total, so we can express children as (37 - 12) as the number of men is 12 more than children\n    children_percentage = children_women_percentage / (1 + women_children_ratio)\n    men = children_percentage + children_men_difference\n    women_percentage = children_women_percentage - children_percentage\n\n    # Convert percentages to actual numbers\n    # Since men is 12 more than children, and men is 37% of total. We can assume total to be 100 (for calculation purpose)\n    total_visitors = 100\n    women = (women_percentage / 100) * total_visitors\n\n    return int(women)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n    \n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the price of one banana and y be the price of one apple\n    x, y = symbols('x y')\n\n    # Ellie's equation: 2x + 3y = 3\n    eq1 = Eq(2 * x + 3 * y, 3)\n\n    # Beth's equation: 3x + 2y = 4\n    eq2 = Eq(3 * x + 2 * y, 4)\n\n    # Solving the system of equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n    banana_price = solutions[x]\n    apple_price = solutions[y]\n\n    # Annabella's cost: 10 bananas and 10 apples\n    cost = 10 * banana_price + 10 * apple_price\n\n    return cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the quantities of oil sold from each bucket\n    sold = symbols('sold')\n\n    # Defining the original quantities of oil in each bucket\n    big_bucket_original = 89\n    small_bucket_original = 45\n\n    # Creating the equation that states the oil left in the big bucket is 12 times the oil left in the small one\n    equation = Eq((big_bucket_original - sold), 12 * (small_bucket_original - sold))\n\n    # Solving the equation\n    solution = solve(equation, sold)\n\n    # The answer is the quantity of oil sold from each bucket\n    return solution[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_train_to_work_late = 0.7\n    prob_train_home_late = 0.4\n    prob_both_trains_on_time = (1 - prob_train_to_work_late) * (1 - prob_train_home_late)\n    prob_at_least_one_late = 1 - prob_both_trains_on_time\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # Numbers from 10-99\n    numbers_without_six = 1  # Number of possibilities for a digit (not six nor zero)\n    for i in range(1, 10):\n        if i != 6:\n            numbers_without_six *= 8  # Each digit has 8 possibilities (1-9 excluding 6)\n    \n    numbers_with_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    first_value = floor(2017)\n    second_value = floor(201.7)\n    third_value = ceil(20.17)\n    fourth_value = ceil(2.017)\n\n    ans = first_value - second_value + third_value - fourth_value\n\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # The last digit of a number raised to any power will only depend on the last digit of the base number.\n    # We will find the last digit of each term and then add them together.\n    last_digit_2023_squared = (2023 ** 2) % 10  # Last digit of 2023 squared\n    last_digit_2_power_2023 = pow(2, 2023, 10)   # Last digit of 2 to the power of 2023\n    \n    # Add the last digits and then find the last digit of the sum\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    \n    # Now raise this sum to the power of 3 and find the last digit\n    ans = (last_digit_sum ** 3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    combined_speed = speed_a + speed_b\n    \n    time_to_meet = distance / combined_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    n = 13\n    ans = n * (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # The perimeter of the figure includes the perimeters of two quadrants and two semicircles.\n    # First, calculate the radius of the quadrants and semicircles based on the given information.\n    # Since AB = CD = 14 cm, the diameter of the semicircles is 14 cm.\n    # Therefore, the radius (r) of both the quadrants and semicircles is 7 cm.\n    \n    # Use the formula for the circumference of a circle to calculate the perimeter of one full circle, then divide accordingly.\n    # Circumference of a full circle with radius r: C = 2 * pi * r\n    # Perimeter of two quadrants (half circle): P_quadrants = (1/2) * C\n    # Perimeter of two semicircles (also half circle): P_semicircles = (1/2) * C\n    \n    # Since we need two quadrants and two semicircles the perimeter will be just the circumference of full circle.\n    \n    # Use the provided value for pi: pi = 22 / 7\n    pi = 22 / 7\n    radius = 7\n    circumference = 2 * pi * radius\n    perimeter = circumference\n    \n    return perimeter\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)  # Find the remaining after the second day\n    total_watermelons = remaining_after_first_day / (1 - 1/3)  # Find the total watermelons\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_cost = symbols('rice_cost')\n\n    # Total cost in pence\n    total_cost = 1170  # £11.70 = 1170 pence\n    pasta_cost = 95  # 95 pence per packet\n\n    # Equation for total cost\n    equation = Eq(6 * pasta_cost + 5 * rice_cost, total_cost)\n\n    # Solve for the cost of a packet of rice\n    solution = solve(equation, rice_cost)\n\n    return solution[rice_cost]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    number = 600  # Lowest possible three-digit number starting with 6\n\n    while True:\n        if number % lcm == 0:\n            return number\n        number += 5  # Increment by 5 because the last digit must be 0 or 5 (divisible by 5)\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5_series = 5 ** 20 % 10  # The last digit of 5^x is always 5\n    last_digit_7_series = (7 ** 20) % 10 # We only need the last digit of 7^20\n\n    # Multiply the last digit of the two series to get the result's last digit\n    last_digit = (last_digit_5_series * last_digit_7_series) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Define the symbols for the unknowns\n    a, b, c = symbols('a b c', integer=True)\n\n    # Define the equation according to the given complex fraction\n    equation = 1 + 1 / (a + 1 / (b + 1 / c)) - 13/10\n\n    # Solve the equation\n    solutions = solve(equation, (a, b, c))\n\n    # Filter the solutions to find the one which gives whole numbers\n    for sol in solutions:\n        if all(x.is_integer and x > 0 for x in sol):\n            a_sol, b_sol, c_sol = sol\n            break\n\n    # Calculate the required value\n    return a_sol + 2*b_sol + 3*c_sol\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # The combined rate of work of both decorators\n    combined_rate = 1 / 12\n    \n    # The rate of work of the energetic decorator\n    energetic_rate = 1 / 20\n    \n    # The rate of work of the lazy decorator (let's find it)\n    # 1 / lazy_days = combined_rate - energetic_rate\n    lazy_rate = combined_rate - energetic_rate\n    \n    # Number of days the lazy decorator would take to paint the house on his own\n    lazy_days = 1 / lazy_rate\n    \n    return int(lazy_days)\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 0.30 * (2/3) * 45\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    average = 1650 // 15\n    smallest = average - 7\n    largest = average + 7\n    return smallest + largest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        # Check if all digits are odd\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # 'a' when divided by 8 gives a remainder of 6, it can be any number of the form 8k+6\n    # 'b' when divided by 8 gives a remainder of 7, it can be any number of the form 8m+7\n    # The sum of 'a' and 'b' would then be of the form (8k+6) + (8m+7) = 8(k+m)+13\n    # Dividing this sum by 8 will give a quotient of (k+m) and a remainder of 13 - 8 = 5\n    remainder = (6 + 7) % 8\n\n    return remainder\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = number_of_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    skirts = 8\n    cloth_per_skirt = 2.83\n    blouses = 2\n\n    cloth_used_for_skirts = skirts * cloth_per_skirt\n    cloth_remaining = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = cloth_remaining / blouses\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    total_digit_count = 0\n    current_digit_length = 0\n\n    while True:\n        next_number_digit_count = total_digit_count + len(str(current_number))\n        if next_number_digit_count >= 2019:\n            remaining_digits = 2019 - total_digit_count\n            ans = str(current_number)[remaining_digits - 1]\n            return int(ans)\n        \n        total_digit_count = next_number_digit_count\n        current_number += 1\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # There are 11 keys and 11 rooms.\n    # In the worst case scenario, the security guard tries the keys one by one for each room.\n    # When trying the key for the first room, he may need up to 11 attempts to find the right key.\n    # For the second room, he would have one less key, so at most 10 attempts are needed, and so forth.\n    # We sum these attempts to get the worst-case number of tries.\n    num_keys = 11\n    total_tries = sum(range(1, num_keys + 1))  \n\n    return total_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    \n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 2, 2, 3, 3]\n    all_permutations = set(permutations(digits, 4))\n    count_numbers = len(all_permutations)\n    return count_numbers\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms.\n    basket_mass_kg = 500 / 1000  # Convert basket mass from grams to kilograms.\n    kitten_mass_kg = 0.6  # Kitten mass in kilograms.\n    num_kittens = 4  # Number of kittens.\n\n    # Mass of all kittens combined.\n    total_kittens_mass_kg = kitten_mass_kg * num_kittens\n\n    # Subtract the mass of the basket and the kittens from the total mass to get the cat's mass.\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    initial_price = 4\n    increase_percentage = 20\n    new_price = initial_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 1 + 3 + 4  # Mary + three brothers + four sisters\n    eggs_bought = (family_members - 1) * family_members  # each buys an egg for each other member, but not for themselves\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    format = '%H:%M'\n    start_time = datetime.strptime('7:50', format)\n    end_time = datetime.strptime('8:40', format)\n    \n    duration = end_time - start_time\n    return duration.seconds // 60  # Convert seconds to minutes\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the given problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The sequence is showing a pattern of increasing differences between each number.\n    # The differences are: 6-3=3, 10-6=4 and 15-10=5\n    # It looks like each time we're adding one more than the previous difference.\n\n    # The difference between the last two numbers given (10 and 15) is 5\n    # so the next difference should be 5+1=6.\n\n    # Therefore, the next number in the sequence should be 15 (the last number) plus 6 (the new difference)\n    ans = 15 + 6\n    return ans\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_handbag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_handbag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_into_bottle = 5\n    remaining_oil = total_oil - oil_poured_into_bottle\n    tanks = 6\n    \n    oil_per_tank = remaining_oil / tanks\n\n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    grandpa_age = 72 + years\n    johnny_age = 8 + years\n    \n    equation = Eq(grandpa_age, 5 * johnny_age)\n\n    ans = solve(equation, years)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variable for Samuel's initial money.\n    initial_money = symbols('initial_money')\n\n    # After spending 1/6 of his money and an additional $5, Samuel's remaining money is:\n    remaining_after_dvd = initial_money - (initial_money / 6) - 5\n\n    # After spending 2/5 of his remaining money and an additional $12 on magazines, Samuel's remaining money is:\n    remaining_after_magazines = remaining_after_dvd - (2 / 5) * remaining_after_dvd - 12\n\n    # Set up the equation that after all the spending he had $24 left\n    equation = Eq(remaining_after_magazines, 24)\n\n    # Solve the equation for the initial money\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children_in_queue = (pip_position + children_between + 1) + (bud_position_from_end - 1)\n    return total_children_in_queue\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Alan's and Bob's initial number of cards\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: Bob now has 3 times as many as Alan after getting 25 cards\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Alan's number of cards is the solution for 'alan'\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    end_balance = 2519.42\n    start_balance = 2000\n    years = 3\n\n    interest_rate = ((end_balance / start_balance) ** (1 / years)) - 1\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    total_odd = sum(range(1, 51, 2))\n    total_even = sum(range(2, 51, 2))\n    difference = total_even - total_odd\n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Define the custom operation\n    def delta_operation(m, n):\n        return 5 * m + 3 * n\n\n    # We know that x ~Delta~ 9 = 37\n    # Using the custom operation definition, we have: 5x + 3*9 = 37\n    # Solve for x:\n    nine_times_three = 3 * 9\n    x = (37 - nine_times_three) / 5  # Rearranging the equation to solve for x\n    \n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario calculation for the pigeonhole principle\n    # To be sure to get 4 balls of the same color, we must consider the worst case:\n    # She could pick 3 blue, 3 orange, and 3 yellow, and she would still not have 4 of the same color.\n    # The next ball she picks will guarantee 4 of the same color.\n    max_three_each_color = 3 * 3\n    one_more_to_guarantee_fourth = 1\n    \n    # Answer is the sum of the two situations\n    ans = max_three_each_color + one_more_to_guarantee_fourth\n    return ans\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Using the given information to set up equations\n    # Let the total number of oranges be O, and the number of elderly be E\n\n    # If she gave 20 oranges to each elderly, 10 will not receive: O = 20 * (E - 10)\n    # If she gave 16 oranges to each elderly, she has enough for 25 boxes of 2 dozens: O = 16 * E + 25 * 24\n\n    # Number of oranges in one box of 2 dozen\n    oranges_per_box = 24 * 2\n\n    # Number of boxes\n    num_boxes = 25\n\n    # Total number of oranges when giving 16 to each elderly\n    total_oranges_when_16_each = num_boxes * oranges_per_box\n    \n    # Since O is the same in both scenarios, we can equate the two expressions:\n    # 20 * (E - 10) = 16 * E + total_oranges_when_16_each\n\n    # Solve for E\n    E = (total_oranges_when_16_each) // (20 - 16)\n    O = 16 * E + total_oranges_when_16_each\n\n    # Calculate the number of oranges each elderly received if she gives out all oranges\n    oranges_per_elderly = O // E\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1 / 5\n    remaining_weight = 27\n  \n    soil_removed = full_weight * removed_soil_fraction\n    empty_weight = full_weight - soil_removed - (full_weight - remaining_weight)\n\n    return empty_weight\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import gcd\nfrom datetime import timedelta, datetime\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\ndef solution():\n    platform_1_cycle = 24\n    platform_2_cycle = 30\n\n    least_common_multiple = lcm(platform_1_cycle, platform_2_cycle)\n\n    start_time = datetime.strptime('09:00', '%H:%M')\n    next_departure_time = start_time + timedelta(minutes=least_common_multiple)\n\n    return next_departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # Sally had 72 more chocolate cupcakes than vanilla cupcakes.\n    equation1 = Eq(chocolate, vanilla + 72)\n    \n    # She had 36 lesser blueberry cupcakes than vanilla cupcakes.\n    equation2 = Eq(blueberry, vanilla - 36)\n    \n    # Sally is left with 427 cupcakes after selling some.\n    # chocolate_left = chocolate - (1/6)*chocolate\n    # vanilla_left = vanilla - (2/3)*vanilla\n    # blueberry_left = blueberry - (7/9)*blueberry\n    # Sum of left cupcakes is 427\n    equation3 = Eq((5/6)*chocolate + (1/3)*vanilla + (2/9)*blueberry, 427)\n    \n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Calculate the number of chocolate cupcakes sold\n    chocolate_cupcakes_sold = solutions[chocolate] - (5/6)*solutions[chocolate]\n    \n    return int(chocolate_cupcakes_sold)\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4  # The fraction of the tank filled\n    amount_poured = 24  # Gallons of water poured into the tank\n\n    full_tank = amount_poured / part_filled  # Calculate the gallons a full tank would hold\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    # Equations based on the problem description\n    equation1 = Eq(anu + benu + chris + dave, 20)\n    equation2 = Eq(dave, chris + 5)\n    equation3 = Eq(dave, benu + 3)\n    equation4 = Eq(anu, chris - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    red_initial, white_initial = symbols('red_initial white_initial', integer=True)\n    red_pip, white_bud = symbols('red_pip white_bud', integer=True)\n\n    # Initial ratio of red to white marbles\n    equation1 = Eq(red_initial / white_initial, 3/2)\n\n    # Ratio after Pip added red balls\n    equation2 = Eq((red_initial + red_pip) / white_initial, 5/3)\n\n    # Ratio after Bud added white balls\n    equation3 = Eq((red_initial + red_pip) / (white_initial + white_bud), 5/4)\n\n    # Bud added 100 more balls than Pip\n    equation4 = Eq(white_bud - red_pip, 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_pip, white_bud))\n    \n    # The solution for the initial number of white balls\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    remainder_sum = (remainder_a + remainder_b) % 8\n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tim's cookies and y be Tyler's cookies\n    t, y = symbols('t y')\n\n    # Equation 1: 1/6 of Tim's cookies is equal to 3/8 of Tyler's cookies\n    equation1 = Eq(t / 6, y * 3 / 8)\n\n    # Equation 2: After selling 96 cookies, Tim has 9 times more cookies than Tyler\n    equation2 = Eq(t, 9 * (y - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, y))\n\n    # Total number of cookies before any were sold\n    total_cookies = solutions[t] + solutions[y]\n\n    return total_cookies\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Jessica's position from the front is 5 + 1\n    jessica_pos = 5 + 1\n    # Judy's position from the back is 7 + 1\n    judy_pos_back = 7 + 1\n    \n    # Total desks = Desks in front of Jessica + 1 (Jessica's desk) + Desks behind Judy\n    total_desks = jessica_pos + judy_pos_back\n    \n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    digit_count = 0\n    for i in range(2, 57):\n        digit_count += str(i).count('6')\n    return digit_count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    agnes, george, jack = symbols('agnes george jack')\n    \n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n    \n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n    \n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # let x be the average weight before Aaron joined\n    # let n be the number of people in the group before Aaron joined\n    # After Aaron joined, the total weight is n*x + 45 and the number of people is n+1\n    # The new average after Aaron is (n*x + 45) / (n + 1) = 61\n    # After Ben joined, the total weight is n*x + 45 + 71 and the number of people is n+2\n    # The new average after Ben is (n*x + 45 + 71) / (n + 2) = 62\n    # We have two equations:\n    # (1) n*x + 45 = 61*(n + 1)\n    # (2) n*x + 45 + 71 = 62*(n + 2)\n    # Now, we need to solve these two equations to find x (the initial average)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, n = symbols('x n')\n    equation1 = Eq(n*x + 45, 61*(n + 1))\n    equation2 = Eq(n*x + 45 + 71, 62*(n + 2))\n    \n    solutions = solve((equation1, equation2), (x, n))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        a, b, c, d, e = p\n        if a != '0':\n            num1 = int(a + b + c)\n            num2 = int(d + e)\n            product = num1 * num2\n            product_str = str(product)\n            if len(product_str) == 5 and all(x in product_str for x in [a, b, c, d, e]):\n                return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    # Let x be the number of people needed to build the bridge in 2 hours\n    # If 6 people can build a bridge in 15 hours, then 1 person would take 6*15 hours to build the bridge alone\n    # Using the inverse operation, we have 6*15 hours of work divided by 2 hours to find the number of people (x)\n    total_hours_six_people = 6 * 15\n    hours_needed = 2\n\n    x = total_hours_six_people / hours_needed\n    return x\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 2989\n\n    # Since every time 2 balls are taken out, 1 ball is returned back to bag A,\n    # thus the net effect is that in each step, one ball is taken out of bag A. \n    # This means after taking 2989 times, 2989 balls will be taken out.\n    # If it's an even number, it means the last step must have been two white balls (two same color),\n    # leaving the black balls in bag A. If it's odd, the last step must have been one white and one black,\n    # leaving one white ball in the bag.\n\n    if total_taken % 2 == 0:\n        remaining_balls = black_balls\n        color = 'black'\n    else:\n        remaining_balls = black_balls\n        color = 'black'\n\n    # Since total_taken is an odd number and every time two balls are taken out, 0 or 1 ball is returned to bag A,\n    # Ming would have started with an odd number of balls and finished with an odd number of subtracted pairs of balls \n    # and an even number of returned black or white balls (0 or 2), which means the last ball remaining after \n    # 2989 removals would be black because it's the only possibility to have an odd number.\n    \n    # But since we know that bag A initially had more white balls than black balls, it is guaranteed \n    # that the net number of white balls taken out is more than the net number of black balls taken out.\n\n    while total_taken > 1:\n        # If there's an odd number of white balls, Ming will take out two of them and return a black ball.\n        if white_balls % 2 == 1:\n            white_balls -= 2\n            black_balls += 1\n        else:\n            # If there's an even number of white balls (or 0), Ming will take out one white and one black.\n            white_balls -= 1\n            black_balls -= 1\n        total_taken -= 2\n\n    # After all operations, the last remaining ball will be a black ball.\n    remaining_balls = black_balls\n\n    return {\"remaining_balls\": remaining_balls, \"color\": \"black\"}\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert from meters to centimeters\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    total_spent = sweets + magazine + stickers + pizza + orange_juice\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # Counting the partition of the number 5 into 2 parts\n    for x1 in range(1, 5):\n        if (5 - x1) > 0:\n            count += 1\n\n    # Counting the partition of the number 5 into more than 2 parts\n    # Since the problem deals only with non-zero natural numbers\n    # and the sum should equal 5, we only have one such case [1,1,1,2].\n    # The permutations of this partition would be countable with factorial and division\n    # to account for repeated elements (1's here).\n    from math import factorial\n    count += factorial(4) // (factorial(3) * factorial(1))\n\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10):\n                if units == hundreds + 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_han, daughter = symbols('mr_han daughter')\n\n    total_mass = Eq(mr_han + daughter, 91.2)\n    mass_ratio = Eq(mr_han, 3 * daughter)\n\n    solutions = solve((total_mass, mass_ratio), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (3/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i**2 - (i-1)**2) for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has to have more votes than anyone else, she has to have at least one more vote than\n    # the number of votes the other two can have combined divided by two (since there are two other students).\n    # In other words, she needs more than half of the total votes to guarantee she has the most.\n    \n    total_votes = 25\n    # Apply Pigeonhole Principle that states if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item (in this voting scenario it means at least\n    # one student must have more than 1/3 of the total votes to ensure she has the most).\n    votes_others_can_have = (total_votes - 1) // 2\n\n    # Samantha must have one more vote than the possible maximum of the other two students,\n    # which ensures she has more votes than anyone else.\n    samantha_votes = votes_others_can_have + 1\n    \n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    while digits_used < 291:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    result = (13 / 25) * 100\n    return result\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    return 2.4 * 1000\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x = symbols('x')\n\n    # Principal amount\n    P = 6000\n    \n    # Final amount\n    A = 8029.35\n    \n    # Number of years\n    t = 5\n    \n    # Compounded annually\n    n = 1\n    \n    # Compound Interest formula A = P * (1 + r/n)^(nt)\n    # where A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money).\n    # r is the annual interest rate (decimal).\n    # n is the number of times that interest is compounded per year.\n    # t is the time the money is invested for in years.\n\n    # Use the equation for the future value of an investment with compound interest\n    # and solve for the interest rate (x)\n    equation = Eq(P * (1 + x / (100*n))**(n*t), A)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the interest rate percentage\n    return solution[0]\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chair_money = 360\n    percentage = (chair_money / total_money) * 100\n    return percentage\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pages = symbols('total_pages')\n    \n    # Clarice has read 1 part, and 5 parts are unread\n    read = total_pages / 6\n    unread = total_pages - read\n\n    # After reading another 80 pages, read pages become 70% of total pages\n    equation = Eq(read + 80, 0.7 * total_pages)\n    \n    # Solve the equation for total_pages\n    total_pages_solution = solve(equation, total_pages)\n    \n    return total_pages_solution[0]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    for correct_cc in range(11):\n        points_cc = 10 * correct_cc - 5 * (10 - correct_cc)\n        points_vv = points_cc + 15\n        if points_cc + points_vv == 95:\n            return correct_cc\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = 2\n\n    rooms_for_girls = girls // girls_per_room\n    rooms_for_teachers = teachers // teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    flour_final = (flour_initial / people_initial) * people_final\n    \n    return flour_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    \n    total_cost = (2 * adult_ticket_price) + (3 * child_ticket_price)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n\n    for i in range(1, len(number)):\n        for j in range(i+1, len(number)):\n            part1 = int(number[:i])\n            part2 = int(number[i:j])\n            part3 = int(number[j:])\n            current_sum = part1 + part2 + part3\n            min_sum = min(min_sum, current_sum)\n            \n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Let's denote the two original numbers as x and y\n    # We know that x + y = 11.63 (equation 1)\n    # We also know that if one decimal point is shifted to the left, the sum becomes 5.87\n    # Let's assume the number with the decimal point shifted is x, so we have x/10 + y = 5.87 (equation 2)\n\n    # Now let's solve the two equations:\n    # x + y = 11.63\n    # x/10 + y = 5.87\n\n    # Multiplying the second equation by 10 gives:\n    # x + 10y = 58.7\n\n    # Subtracting the first equation from this we get:\n    # 9y = 47.07\n    # y = 47.07 / 9\n\n    # Now we can find x using the first equation:\n    # x = 11.63 - y\n\n    y = 47.07 / 9\n    x = 11.63 - y\n\n    # We want to find one hundred times the difference between the two original numbers\n    difference = x - y\n    ans = 100 * difference\n\n    return int(ans)  # since we are asked for \"one hundred times the difference\" (which implies an integer)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    mm = 7000000\n    m = mm / mm_in_m\n    return m\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Let the common ratio for science club and literature club be x\n    # So members in science club = 9x\n    # And members in literature club = 10x\n    \n    # The ratio of members in the literature club to members in the math club is 5:7.\n    # Since the members in literature club = 10x, let's find a common factor y such that 5y = 10x.\n    # It's evident that y = 2x, so members in math club = 7 * 2x = 14x.\n    \n    # Now that we know the ratios, we can write a total members equation:\n    # science club (9x) + literature club (10x) + math club (14x) = 99\n    # Combine like terms to get 33x = 99\n    # Solve for x:\n    x = 99 // 33\n    \n    # Members in literature club = 10x\n    literature_members = 10 * x\n    \n    # Members in math club = 14x\n    math_members = 14 * x\n    \n    # Difference in members between math and literature clubs:\n    diff = math_members - literature_members\n    \n    return diff\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Worst Case: He gets 2 blue, 2 yellow and 1 red without getting 3 of the same color.\n    marbles_taken = (2 * 2) + 1\n    # Now, irrespective of the color he picks, he will have 3 marbles of same color.\n    return marbles_taken + 1\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's current age and her mother's current age\n    melissa, mother = symbols('melissa mother')\n\n    # Equation 1: Relationship between their ages when Melissa was 8\n    equation1 = Eq(mother - melissa, 32 - 8)\n\n    # Equation 2: Mother is now three times as old as Melissa\n    equation2 = Eq(mother, 3 * melissa)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = len([f for f in factors if f % 2 == 0])\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10  # The original length of the rope in meters\n    cut1 = 4.8  # Length of the first piece cut off in meters\n    cut2 = 2.73  # Length of the second piece cut off in meters\n\n    remaining_length = original_length - (cut1 + cut2)\n\n    lengths = [cut1, cut2, remaining_length]\n    difference = max(lengths) - min(lengths)\n\n    return difference\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but we exclude the corner flowers as they are counted twice\n    # if we just multiply by 4 straight away.\n    # There are 4 corners with 1 flower each\n    corner_flowers = 4\n    \n    # Since each corner is counted twice when we count the individual sides,\n    # we subtract the corner flowers from each side's count before multiplying by 4.\n    # i.e., each side effectively has 4 unique flowers (excluding corners)\n    flowers_per_side_excluding_corners = 6 - 2\n    \n    # Calculate the total number of unique flowers along the sides\n    # (excluding the corner flowers)\n    total_side_flowers = flowers_per_side_excluding_corners * 4\n    \n    # Sum the unique side flowers with the corner flowers to get the total\n    total_flowers = total_side_flowers + corner_flowers\n    \n    return total_flowers\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # 5 basketballs and 6 volleyballs cost $325\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n\n    # A basketball costs $10 more than a volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    # Calculate the number of complete patterns that fit into 47 digits\n    number_of_complete_patterns = 47 // len(pattern)\n\n    # Calculate the number of remaining digits after the complete patterns\n    remaining_digits = 47 % len(pattern)\n\n    # Calculate the sum of the digits in the complete patterns\n    sum_complete_patterns = sum(int(digit) for digit in pattern) * number_of_complete_patterns\n\n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    # Total sum of all 47 digits\n    total_sum = sum_complete_patterns + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # let the total money Li Yan had at first be x\n    # She spent 1/3 on a book => money spent on book = x/3\n    # Remaining money = x - x/3 = 2x/3\n    # She spent 1/2 of the remainder on a bag => money spent on bag = (1/2) * (2x/3) = x/3\n    # So, money spent on book + money spent on bag = total_cost\n    # x/3 + x/3 = total_cost\n    # 2x/3 = total_cost\n    # x = (3/2) * total_cost\n\n    x = (3 / 2) * total_cost\n\n    return x\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')  # b for boys, g for girls\n\n    # Equation 1: average pencil count for the class\n    equation1 = Eq((20 * b + 60 * g) / (b + g), 35)\n    # Equation 2: total number of pupils\n    equation2 = Eq(b + g, 40)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(26):  # Jack cannot answer more than 25 questions\n        incorrect = 25 - correct  # total number of problems\n        # 4 points for each correct question, -1 for each incorrect, the rest are not answered\n        if 4 * correct - incorrect == 61:  \n            # Jack scored 61 points, so we find his correct and incorrect counts\n            for johnson_correct in range(correct):  # Johnson answered fewer correctly\n                # Johnson's incorrect answers, if he answered all, otherwise some are not answered\n                johnson_incorrect = 25 - johnson_correct  \n                if 4 * johnson_correct - johnson_incorrect == 61:\n                    # Johnson scored the same points\n                    return incorrect  # Return the number Jack did not answer\n    return None  # If there's no solution\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n    total_pounds = pounds + (pence / 100)  # Convert pence to pounds and add\n    return total_pounds\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 / (1/3)\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    for cupcakes in range(1, 1000):  # assuming a reasonable upper bound\n        if cupcakes <= 20:\n            price = cupcakes * 4.50 + 12\n        else:\n            price = (20 * 4.50) + ((cupcakes - 20) * 4.50 * 0.80) + 12\n            \n        if price == 120:\n            return cupcakes\n            \nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n\n    solutions = solve(equation, A)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    rose_position_from_back = 12\n\n    total_people = people_in_front + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # 1 energetic decorator's work done in 1 day\n    energetic_work_per_day = 1 / 10\n    # 2 decorators' combined work done in 1 day\n    combined_work_per_day = 1 / 6\n    # 1 lazy decorator's work done in 1 day\n    lazy_work_per_day = combined_work_per_day - energetic_work_per_day\n    # The number of days the lazy one would take to paint the house\n    lazy_days = 1 / lazy_work_per_day\n\n    return lazy_days\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Let x, y, z be the number of books for the first, second, and third brother, respectively.\n    for x in range(2, 9):  # The first brother must get at least 2 books and at most (10 - 2*2) books.\n        for y in range(2, 9):  # The second brother must get at least 2 books as well.\n            z = 10 - (x + y)\n            if z >= 2:  # The third brother must get at least 2 books.\n                count += 1  # All conditions are satisfied, so this is a valid distribution.\n    return count\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number John thought of\n    x = symbols('x')\n\n    # Set up the equation based on the problem description\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # There may be multiple solutions, but we want the first one\n    return solution[0]\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # We pick 3 marbles of each color except for the one with the smallest quantity, \n    # and we still might not have 4 different colors.\n    # At the next draw we are guaranteed to have the fourth color. \n    # In this case, we have 3 red, 9 blue, 8 yellow. We ignore the second set of 3 red.\n    \n    draw_red = 3        # One less than 4, since we need at least one of each of the four colors\n    draw_blue = 3       # One less than 4, since we need at least one of each of the four colors\n    draw_yellow = 3     # One less than 4, since we need at least one of each of the four colors\n    draw_smallest_color = 1  # Only need one from the smallest group to ensure the fourth color\n\n    # Summing all the draws to give us the minimum number required\n    total_draws = draw_red + draw_blue + draw_yellow + draw_smallest_color\n\n    return total_draws\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number_prefix = '5' * 19\n    number_suffix = '9' * 19\n    for digit in range(10):\n        number_str = number_prefix + str(digit) + number_suffix\n        number = int(number_str)\n        if number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_first_day / fraction_of_book\n    return total_pages\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first_number = 16  # The first two-digit number with unit digit 6\n    last_number = 96  # The last two-digit number with unit digit 6\n    difference = 10  # Difference between each consecutive number with unit digit 6\n    \n    num_numbers = ((last_number - first_number) // difference) + 1\n    \n    return num_numbers\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    \n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    \n    return total_spent\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # As height are whole numbers, it implies that the height of the 10th child\n    # must be less than or equal to 131 - (31 - 10) = 110, so that there are enough\n    # distinct whole numbers left for the taller children.\n    return 110\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote the number of storybooks Anthea has originally as 'a'.\n    # According to the problem, after Jason gives 4 books to Anthea,\n    # both will have the same number of books, i.e., Jason will be left with 30 - 4 books.\n    # Therefore, we can set up the equation:\n    # 30 - 4 = a + 4 (Jason's remaining books = Anthea's final number of books).\n\n    # Let's derive Anthea's original number of books from the equation above.\n    # a + 4 = 30 - 4\n    # a + 4 = 26\n    # a = 26 - 4\n    a = 26 - 4\n\n    # The difference between Jason and Anthea's number of storybooks originally is:\n    # 30 (Jason's books) - a (Anthea's books)\n    difference = 30 - a\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a = 3\n    b = 10\n    for i in range(3, 2023):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    gifts, students = symbols('gifts students')\n    gifts_5_left = Eq(students * 5 + 3, gifts)\n    gifts_4_left = Eq(students * 4 + 9, gifts)\n    \n    solutions = solve((gifts_5_left, gifts_4_left), (gifts, students))\n    \n    return solutions[students]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from math import sqrt\n\n    number = 840\n    factors_set = set()\n\n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            factors_set.add(i)\n            factors_set.add(number // i)\n\n    return len(factors_set)\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Alan, Bella, and Chloe's money\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # The total sum of money\n    total_money = Eq(alan + bella + chloe, 200)\n    \n    # The ratio of Alan's money to Bella's\n    ratio_alan_bella = Eq(alan / bella, 4/3)\n    \n    # Alan has £20 more than Chloe\n    alan_more_chloe = Eq(alan, chloe + 20)\n\n    # Solve the system of equations\n    solutions = solve((total_money, ratio_alan_bella, alan_more_chloe), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    total_cost = box_price + bar_price * 2\n    note_value = 20\n    change = note_value - total_cost\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # There are 3 remaining family members to arrange between Lily and her mother.\n    possible_arrangements = factorial(3)\n\n    return possible_arrangements\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all 2-digit numbers from the digits 1 to 8 without repetition\n    nums = [''.join(p) for p in permutations('12345678', 2)]\n    nums = [int(num) for num in nums if num[0] != '0']\n\n    # Filter according to the given conditions\n    smallest = [num for num in nums if (num % 10) == 2 * (num // 10)]\n    largest = [num for num in nums if (num % 10) + (num // 10) == 9]\n    second_largest = [num for num in nums if (num // 10) - (num % 10) == 5]\n\n    # Remove numbers used in other categories from the second smallest candidate pool\n    candidates = set(nums) - set(smallest) - set(largest) - set(second_largest)\n    \n    # Determine the odd number\n    odd_number = [num for num in candidates if num % 2 != 0]\n\n    # Remove the odd number from second smallest candidate pool\n    candidates = candidates - set(odd_number)\n\n    # Find the second smallest number now\n    second_smallest = sorted(list(candidates))[1]  # Get the second smallest number\n\n    return second_smallest\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n    num_terms = int((last_term - first_term) / difference) + 1\n    \n    total_seats = (num_terms * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of visitors be 'v'\n    v = symbols('v')\n\n    # We have two equations based on the problem statement:\n    # Equation 1: children are (3/5)v\n    # Equation 2: men are (1/2)(2/5)v = (1/5)v\n    # The difference between children and men is 140 visitors.\n\n    # Thus, we can set up the following equation\n    equation = Eq((3/5)*v - (1/5)*v, 140)\n\n    # Solve for 'v'\n    solutions = solve(equation, v)\n\n    # Number of visitors at the fair\n    number_of_visitors = solutions[0]\n\n    return number_of_visitors\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Average of three numbers is 120\n    avg_three = 120\n    sum_three = avg_three * 3  # Total sum of the three numbers\n    \n    # When the fourth number is added, the average becomes 150\n    avg_four = 150\n    sum_four = avg_four * 4  # Total sum of the four numbers\n    \n    # The fourth number is the difference between the sum of four and sum of three numbers\n    fourth_number = sum_four - sum_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n\n    # Use the formula for sum of squares from 1 to n\n    sum_to_n = (n * (n + 1) * (2 * n + 1)) // 6\n    # Calculate the sum of squares from 1 to (first_term - 1)\n    sum_to_first_term_minus_one = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    # Subtracting the two sums to get the sum from first_term to n\n    result = sum_to_n - sum_to_first_term_minus_one\n    \n    return result\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    sam, peter = symbols('sam peter')\n    initial_difference = 40\n\n    # Setting up the equations based on the problem statement\n    # After Sam gives away 20%, he has 80% left\n    sam_gives = sam - 0.20 * sam\n    # Peter receives 20% of Sam's stickers\n    peter_receives = peter + 0.20 * sam\n    # Peter gives away 25% of what he now has\n    peter_gives = peter_receives - 0.25 * peter_receives\n    # Sam receives 25% of the new amount of Peter's stickers\n    sam_receives = sam_gives + 0.25 * peter_receives\n    # The final difference is 96\n    final_difference = sam_receives - peter_gives\n\n    # Sam originally had 40 more stickers than Peter\n    equation1 = Eq(sam, peter + initial_difference)\n    # The final difference equation\n    equation2 = Eq(final_difference, 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # We need the number of stickers Peter had at first\n    return solutions[peter]\n    \nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n\n    money_after_highlighters = initial_money - (6/11) * initial_money - 5                               \n    money_after_pens = money_after_highlighters - (3/10) * money_after_highlighters - 12                 \n    equation = Eq(money_after_pens, 30)\n\n    ans = solve(equation, initial_money)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly.\n    # Then, 20 - x is the number of questions she answered incorrectly.\n    # Each correct answer gives her 5 points, so x correct answers give 5x points.\n    # Each incorrect answer loses her 2 points, so (20 - x) incorrect answers lose (20 - x)*2 points.\n    # The total score is the points from correct answers minus the points lost from incorrect answers.\n    # Hence, the equation modeling the total score of 51 points is:\n    # 5x - 2(20 - x) = 51\n    # Solve for x to find the number of questions she answered correctly.\n    for x in range(21):  # Range is from 0 to 20, since she can't answer more than 20 questions correctly.\n        if 5 * x - 2 * (20 - x) == 51:\n            return x\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    \n    actual_subtrahend = 75\n    actual_result = mistaken_result + (actual_subtrahend - mistaken_subtrahend)\n    \n    return actual_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 3 * 4  # The least common multiple (LCM) of 3 and 4\n    return 40 // lcm\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent Sally's current age, and g represent Gillian's current age\n    s, g = symbols('s g')\n\n    # The current age ratio is s:g = 2:7\n    eq1 = Eq(s/g, 2/7)\n\n    # In 15 years, their ages will be s+15 and g+15, and the ratio will be 1:2\n    eq2 = Eq((s+15)/(g+15), 1/2)\n\n    # Solve the system of equations\n    ages = solve((eq1, eq2), (s, g))\n\n    # Sally's current age is what we want\n    return ages[s]\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9  # mass of one apple in kg\n    apples_per_cake = 4  # number of apples used to bake one cake\n    total_mass_apples = 8  # total mass of apples used in kg\n    \n    total_apples_used = total_mass_apples / mass_per_apple  # total number of apples used\n    total_cakes_baked = total_apples_used / apples_per_cake  # total number of cakes baked\n\n    return int(total_cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    return 35 * 9 / 45\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_per_seed = 1.5\n    total_seeds = 12\n    circumference = distance_per_seed * total_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for cut_pieces in range(10 + 1):\n        if (10 - cut_pieces) + (cut_pieces * 3) == 16:\n            return cut_pieces\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    average_boys = 10\n\n    total_participants = 12 + 8\n    average_participants = 14\n\n    total_score_boys = total_boys * average_boys\n    total_score_participants = total_participants * average_participants\n    total_score_girls = total_score_participants - total_score_boys\n    \n    total_girls = 8\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let the side of the original square be n\n    # Then the original number of students is n^2 + 9\n    # After adding one more row and one more column, the new square has (n+1)^2 students\n    # We need 16 more students to fill this new square, so (n+1)^2 = n^2 + 9 + 16\n    # Hence, (n+1)^2 - n^2 = 25\n    # (n^2 + 2n + 1) - n^2 = 25\n    # 2n + 1 = 25\n    # 2n = 24\n    # n = 12\n    students = 12**2 + 9\n    return students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    cards_per_envelope_first = 50 / 5\n    cards_per_envelope_second = cards_per_envelope_first * 2\n    total_cards = 50 + cards_per_envelope_second\n\n    return total_cards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Start with largest possible coins and go down to the smallest\n    coins = [1, 0.50, 0.20, 0.10, 0.05, 0.02, 0.01]\n    \n    # The amount Harry received in change\n    total_change = 2.50\n    \n    # Iterate over each coin to find the smallest coin that could be present twice in the change\n    for coin in coins:\n        if total_change % (2 * coin) == 0:\n            return coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of cookies baked be x\n    x = symbols('x')\n\n    # Calculate the number of cookies thrown away\n    thrown_away = (3/5) * x\n\n    # Calculate the number of cookies remaining\n    remaining = x - thrown_away\n\n    # Calculate the number of cookies sold\n    sold = (3/4) * remaining\n\n    # Set up the equation based on the problem statement\n    equation = Eq(thrown_away - sold, 42)\n\n    # Solve for x\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_needed\n\n    return total_cost / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    container_capacity = 4\n    num_containers = (apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1000):  # checking all three digit numbers and appending 9 to them\n            num = int(str(j) + '9')\n            new_num = int('9' + str(j))\n            if new_num == 4 * num:\n                return num\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    Y = 0  # Initialize Y to 0, although we'll find the correct Y through iteration\n    for i in range(10):  # Possible values for Y (0 to 9 because it's a single digit)\n        if (1070 + i) % 6 == 0:  # Check divisibility by 6 for the number 107Y (1070 + i)\n            Y = i\n            break\n    return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front and there are 6! ways to arrange the others\n    laura_ways = factorial(5)\n\n    # Rita can't be at the end (5 possible positions), having arranged Laura and Rita there are 4! ways to arrange the others\n    rita_ways = 5 * factorial(4)\n\n    # By the multiplication principle, the total number of ways is the product of laura_ways and rita_ways\n    total_ways = laura_ways * rita_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    first_discount_rate = 0.50\n    additional_discount_rate = 0.20\n\n    price_after_first_discount = regular_total_price * (1 - first_discount_rate)\n    final_price = price_after_first_discount * (1 - additional_discount_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)  # Buzz is three times as heavy as Jessie\n    equation2 = Eq(buzz - jessie, 450)  # Buzz is 450g heavier than Jessie\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    \n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_sold = 4/7\n\n    total_apples = apples_sold / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Considering the ratio of distances covered by Jerry and Kevin when they meet\n    # Given that Jerry travels three-sevenths of the road length,\n    # Kevin travels four-sevenths of the road length (1 - 3/7)\n    jerry_ratio = 3/7\n    kevin_ratio = 4/7\n    \n    # Given that Jerry travels 2/5 of the road length per hour,\n    # and Kevin travels at a speed of 80 mph.\n    kevin_speed = 80  # Kevin's speed in mph\n    \n    # Since they meet at the same time, the time taken by Jerry and Kevin should be equal.\n    # Let's denote the length of the road as 'L'.\n    # Then Jerry's speed can be calculated as 2/5 of L.\n    # The time taken by Jerry to travel 3/7 of L is equal to the time taken by Kevin to travel 4/7 of L.\n    # Jerry's time = Distance / Speed => (3/7 * L) / (2/5 * L)\n    # Kevin's time = Distance / Speed => (4/7 * L) / 80\n\n    # The times must be equal, so we set the two expressions equal to each other and solve for L.\n    # (3/7 * L) / (2/5 * L) = (4/7 * L) / 80\n    # After simplifying and cross-multiplying, we can find the length of the road, 'L'.\n\n    jerry_speed = jerry_ratio * (2/5)\n    kevin_speed = kevin_speed\n\n    # kevin_time = kevin_distance / kevin_speed\n    # jerry_time = jerry_distance / jerry_speed\n    # Since Jerry's speed depends on the length, we have jerry_distance = jerry_ratio * L and jerry_speed = (2/5) * L\n    # Jerry's time will be (3/7 * L) / ((2/5) * L) = 3/7 * 5/2 = 15/14\n    # Kevin's time will be (4/7 * L) / 80 mph\n    # Set the times equal to one another: 15/14 = (4/7 * L) / 80\n    # Solving for L: L = 80 * 15/14 * 7/4\n\n    L = 80 * (15/14) * (7/4)\n\n    return L\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define time format\n    time_format = \"%H:%M %dth %B\"\n\n    # Time of take-off in Singapore in datetime format\n    singapore_take_off_str = \"05:00 24th August\"\n    singapore_take_off = datetime.strptime(singapore_take_off_str, time_format)\n\n    # Time of landing in London in datetime format\n    london_landing_str = \"11:00 24th August\"\n    london_landing = datetime.strptime(london_landing_str, time_format)\n\n    # Adjust the London time to Singapore time to find the duration\n    # Since Singapore is 7 hours ahead, we subtract 7 hours from London's landing time\n    adjusted_london_landing = london_landing + timedelta(hours=7)\n\n    # Calculate the flight duration by subtracting take-off time from adjusted landing time\n    flight_duration = adjusted_london_landing - singapore_take_off\n\n    return flight_duration.total_seconds() / 3600  # convert duration to hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    # Let b be the number of boys in the class\n    total_pupils = 40\n    average_pencils = 35\n    boys_average = 20\n    girls_average = 60\n    \n    # Total pencils in the class is the average number multiplied by the total pupils\n    total_pencils = average_pencils * total_pupils\n    \n    # If b is the number of boys and total_pupils - b is the number of girls\n    # then b boys with an average of boys_average pencils and the rest being girls\n    # with an average of girls_average pencils should add up to the total_pencils\n    # Set up the equation:\n    # boys_average * b + girls_average * (total_pupils - b) = total_pencils\n    \n    b = (total_pencils - girls_average * total_pupils) / (boys_average - girls_average)\n    \n    return int(b)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probabilities for individual outcomes\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob  # Since there are three exclusive outcomes\n\n    # Sally wins first game and loses or draws the second game\n    scenario1 = win_prob * (lose_prob + draw_prob)\n\n    # Sally loses or draws the first game and wins the second game\n    scenario2 = (lose_prob + draw_prob) * win_prob\n\n    # The total probability that Sally will win exactly one of the two games\n    ans = scenario1 + scenario2\n\n    return ans\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # Initialize the counter for lollipops\n    lollipops = 0\n    \n    # Increment lollipops until the conditions are met\n    while True:\n        # If 32 lollipops are left after putting 4 in each box,\n        # and 3 lollipops are in the last box when putting 7 in each,\n        # the conditions are satisfied\n        if (lollipops - 32) % 4 == 0 and lollipops % 7 == 3:\n            return lollipops\n        lollipops += 1\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Calculate the differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n    \n    # Find the greatest common divisor of the differences\n    from math import gcd\n    d = gcd(gcd(diff1, diff2), diff3)\n    \n    # The largest possible D is the gcd of the differences\n    D = d\n    \n    # To find R, we can use the gcd directly because when we find R,\n    # it will be the same remainder when 2010 (the smallest number) is divided by D\n    R = 2010 % D\n    \n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Getting the decimal part as a string\n    length_of_period = len(decimal)  # The length of the recurring period\n    position = (2012 - 1) % length_of_period  # Correcting the position for 0-indexing, and using mod for repetition\n    return int(decimal[position])  # Returning the digit as an integer\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  \n        if (number // 10 + number % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    e, w = symbols('e w')  # e for Eddi's cards, w for Wiya's cards\n\n    # Initial ratio equation: e/w = 8/7\n    initial_ratio = Eq(e / w, 8 / 7)\n\n    # Ratio after Eddi gives Wiya 4 cards: (e - 4)/(w + 4) = 18/17\n    new_ratio = Eq((e - 4) / (w + 4), 18 / 17)\n\n    # Solving the system of equations\n    solutions = solve((initial_ratio, new_ratio), (e, w))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # red_marbles to blue_marbles = 5:6\n    red_marbles = (5 / 6) * blue_marbles\n    # red_marbles = 2 * green_marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\n\ndef solution():\n    num = Fraction(2017, 1) + Fraction(7, 8)\n    num *= Fraction(11, 3)\n    den1 = (Fraction(2017, 1) + Fraction(1, 3)) - Fraction(2016, 1) - Fraction(875, 1000)\n    den1 *= 17\n    den = Fraction(3, 1) + Fraction(23, 32)\n    ans = (num - Fraction(2016, 1) - Fraction(875, 1000) * Fraction(11, 3)) / den1 * den\n    return float(ans)\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Speed of the golden rabbit and the sea turtle\n    speed_rabbit = 330  # in meters per minute\n    speed_turtle = 30    # in meters per minute\n\n    # The rabbit runs for 10 minutes before sleeping\n    distance_covered_by_rabbit_before_sleep = speed_rabbit * 10\n\n    # Time taken by the turtle to complete the race\n    total_time_turtle = 6990 / speed_turtle\n\n    # Time the rabbit sleeps\n    sleep_time_rabbit = 215\n\n    # Time remaining for the rabbit to run after waking up (in minutes)\n    remaining_time_rabbit = total_time_turtle - sleep_time_rabbit - 10\n\n    # Distance covered by the rabbit after waking up\n    distance_covered_by_rabbit_after_sleep = speed_rabbit * remaining_time_rabbit\n\n    # Total distance covered by the rabbit\n    total_distance_covered_by_rabbit = distance_covered_by_rabbit_before_sleep + distance_covered_by_rabbit_after_sleep\n\n    # Distance between the rabbit and the turtle when the first one reached the finish line\n    distance_between = abs(6990 - total_distance_covered_by_rabbit)\n\n    # Determine who reached the finish line first\n    # We can assume that if the rabbit has covered 6990m, it reached first\n    if total_distance_covered_by_rabbit >= 6990:\n        winner = \"rabbit\"\n    else:\n        winner = \"turtle\"\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let the number of students in Class B be x.\n    # Then the number of students in Class A is x + 47.\n    # After moving y students from Class A to Class B, we want:\n    # (x + 47 - y) = (x + y) + 9\n    # Solving for y gives us the number of students to be moved.\n    \n    # x + 47 - y = x + y + 9\n    # Simplify the equation:\n    # 47 - 9 = 2y\n    # 38 = 2y\n    # y = 38 / 2\n    y = 38 // 2\n    \n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    third_piece = total_length - (piece1 + piece2)\n\n    return third_piece\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_in_one_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    car_cost = 25000\n    selling_price = car_cost * 120 / 100\n\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # let x be the smaller number and y be the larger number\n    # we have two equations:\n    # x - y = -57 (since the smaller number subtracted from the larger number gives -57)\n    # x + y = 77\n    # we can solve for x using these two equations\n\n    # reorganizing the first equation: x = y - 57\n    # substituting x in the second equation: y - 57 + y = 77\n    # combining like terms: 2y - 57 = 77\n    # moving -57 to the other side: 2y = 77 + 57\n    # calculating the result: 2y = 134\n    # finally, dividing by 2 to get y: y = 134 / 2\n    y = 134 / 2\n    \n    # now that we have y, we can find x\n    # x = y - 57\n    x = y - 57\n    \n    # since x is the smaller number\n    return x\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    def is_oddtastic(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    ans = sum(is_oddtastic(number) for number in range(1, 1000))\n    return ans\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Hundreds digit, must be odd and non-zero\n        for j in range(10):     # Tens digit\n            for k in range(10, step=2):  # Ones digit, must be even\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # Each pair contains 2 avocados\n\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100\n\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Possible scores when rolling two 6-sided dice\n    scores = [i+j for i in range(1, 7) for j in range(1, 7)]\n    score_counts = Counter(scores)\n\n    # Find the score with the highest frequency\n    most_likely_score = max(score_counts, key=score_counts.get)\n    \n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    \n    boys = 36 - girls\n    \n    total_class_score = 36 * 89\n    total_girls_score = girls * 88\n    total_boys_score = boys * 91\n    \n    equation = Eq(total_girls_score + total_boys_score, total_class_score)\n    \n    num_girls = solve(equation, girls)\n    \n    return num_girls[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of rhinos, y be the number of deer, and z be the number of ostriches\n    x, y, z = symbols('x y z')\n\n    # Since the number of rhinos is equal to the number of deer\n    equation1 = Eq(x, y)\n\n    # Each animal has one head, and the total number of heads is 28\n    equation2 = Eq(x + y + z, 28)\n\n    # Rhinos and deer have 4 legs each, and ostriches have 2 legs each, with a total of 88 legs\n    equation3 = Eq(4*x + 4*y + 2*z, 88)\n\n    # Now we can solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # We need the number of rhinos\n    return solutions[x]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table can sit 3 people on the long side, and 2 on the short side.\n    # When putting 8 tables together in a row, each table's long side gets connected.\n    # Thus, the 8 tables in a row can seat 3 people on each short side, and\n    # (8 tables * 3 people/table) = 24 people on one side of the long side.\n    # However, we must subtract 2 for the corners, because they're counted twice.\n    # Therefore, each long side can seat 24 - 2 = 22 people.\n\n    short_sides = 3 * 2  # 2 short sides, each can sit 3 people\n    long_sides = 22 * 2  # 2 long sides, each can sit 22 after deducting double-counted corner seats\n\n    max_people = short_sides + long_sides\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    \n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    \n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(xavier, 3 * andrew)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n    \n    # The sum of the marbles that Jeffery and Boris have\n    jeffery_boris_sum = solutions[boris] + solutions[jeffery]\n    \n    return jeffery_boris_sum\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits = 0\n    page = 0\n    \n    while digits < total_digits:\n        page += 1\n        if page < 10:\n            digits += 1\n        elif page < 100:\n            digits += 2\n        else:\n            digits += 3\n            \n    return page\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "from sympy import divisors, isprime\n\ndef solution():\n    count = 0\n\n    # Since 15 has prime factors 3 and 5, a number that is a multiple of 15 must have at least these as factors.\n    # Get the exponents of these in a number that has 15 factors.\n    # For a number to have 15 factors, its prime factorization can be in the form of p^14, p^4 * q, p^2 * q^2 (excluding 1 and the number itself),\n    # where p & q are prime.\n    # Since we are only looking at multiples of 15, which already have 3^1 and 5^1, we only need to check p^4 * q or p^2 * q^2 forms:\n    # For a number to have exactly 15 factors, including 1 and the number itself,\n    # its prime factors can be in the form p^2 * q^2 or p^4 * q, where p and q are distinct primes.\n    # Since such a number must also be a multiple of 15 (which is 3*5), we only need to find the number of such combinations \n    # which include the prime factors 3 and 5.\n\n    # Let's start with the form p^2 * q^2. This means we need 2 more primes, both squared (because 3 and 5 are already present, but not squared).\n    # The resulting factor count is (2+1)*(2+1)*(1+1)*(1+1) = 15, so the other primes must raised to the power of 2.\n\n    i = 2  # Starting from smallest prime number.\n    while True:\n        new_number = 3**2 * 5**2 * i**2\n        if len(divisors(new_number)) == 15:\n            count += 1\n        if i > new_number:  # No new primes will yield a number with exactly 15 factors beyond this point.\n            break\n        i += 1\n        while isprime(i) == False:\n            i += 1  # Skipping non-primes.\n\n    # Now we check the p^4 * q form. This requires one more prime, raised to the 4th power.\n    # The resulting factor count is (4+1)*(1+1)*(1+1) = 15, so one of the primes must be raised to the power of 4.\n    i = 2\n    while True:\n        new_number = 3 * 5 * i**4\n        if len(divisors(new_number)) == 15:\n            count += 1\n        if i > new_number:  # No new primes will yield a number with exactly 15 factors beyond this point.\n            break\n        i += 1\n        while isprime(i) == False:\n            i += 1  # Skipping non-primes.\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the ones digit for 32^33\n    ones_digit_32_pow_33 = (32 ** 33) % 10\n    \n    # Calculate the ones digit for 22^29\n    ones_digit_22_pow_29 = (22 ** 29) % 10\n    \n    # Subtract the ones digits and find the result's ones digit\n    result_ones_digit = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    \n    return result_ones_digit\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Define a variable for the difference between the number of students and teachers\n    difference = 52\n    # Start with the smallest possible square size and increase until we find the solution\n    size = 1 # The size represents the length of the sides of the square\n    \n    while True:\n        # For each square, calculate the number of students and teachers\n        students = size * size if size % 2 != 0 else (size - 1) * (size - 1)\n        teachers = (size - 2) * (size - 2) if size > 2 else 0\n        # Check if the current difference equals the required difference\n        if students - teachers == difference:\n            # If so, return the total number of people\n            return students + teachers\n        size += 1\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_difference = max(max_difference, B - A)\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "def solution():\n    from math import comb\n    return comb(12, 6)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    result = 8 * 80 * 100\n    ans = result / (8**2)\n    return int(ans)\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    expression = Eq(2014 / 37, 54 + 1 / (x + 1 / (y + 1 / z)))\n\n    solutions = solve(expression, (x, y, z))\n\n    for sol in solutions:\n        if all(isinstance(num, int) for num in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_number = 10\n    count_to = 30\n    clock_numbers = 12\n\n    start_number = (end_number - count_to % clock_numbers + clock_numbers) % clock_numbers\n    start_number = clock_numbers if start_number == 0 else start_number\n\n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    # Adding the given whole numbers\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation representing the big bucket after selling x kilograms\n    equation1 = Eq(89 - x, 12 * (45 - x))\n\n    # Solving for x\n    amount_sold = solve(equation1, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n\n    amount_per_person = jackpot // people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernates = 180\n    bear_hibernates = (2/3) * snake_hibernates\n    frog_hibernates = (5/4) * bear_hibernates\n    return frog_hibernates\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Each alien has 5 legs, so the total number of legs is 5 legs/alien * 6 aliens\n    total_legs = 5 * 6\n    # Socks are sold in pairs, and since each pair is for 2 legs, divide total legs by 2 to get the number of pairs needed\n    total_pairs_of_socks = total_legs // 2\n    # Shoes are sold in batches of 5, so divide total legs by 5 to get the number of batches needed\n    total_batches_of_shoes = total_legs // 5\n    # Calculate the total cost for socks and shoes\n    total_cost = (total_pairs_of_socks * 12) + (total_batches_of_shoes * 78)\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Equation setup:\n    # a = 26 + b - 31\n    # b = 20 + c - 26\n    # c = a - 20 + 31\n    # => a = b - 5, b = c - 6, c = a + 11\n    # => c - a = 17 and also c = b + 6, b = a + 5\n\n    # We need to find the primes within a reasonable range since a, b, c are primes\n    # We will use the fact that c - a = 17 to reduce the search space\n    primes = list(primerange(1, 100))  # reasonable upper bound for our primes here\n\n    for c in primes:\n        a = c - 17\n        b = c - 6\n        if a in primes and b in primes:\n            return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # Convert total time to hours\n    \n    # Let's denote the distance from home to the park as 'd' kilometers.\n    # The time taken to go to the park is d/5 hours\n    # The time taken to return is d/4 hours\n    \n    # The total time taken is the sum of the time taken to go to the park and return\n    # So, we have the equation: d/5 + d/4 = total_time_hours\n    \n    # Finding common denominator for 5 and 4, which is 20\n    # The equation becomes (4d + 5d) / 20 = total_time_hours\n    # Simplify to get 9d = 20 * total_time_hours\n    \n    d = (20 * total_time_hours) / 9  # Solving for d\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie_pies = symbols('rennie_pies')\n    joleen_pies = rennie_pies + 5\n\n    equation = Eq((3/4) * rennie_pies, (2/3) * joleen_pies)\n    rennie_pies_solution = solve(equation, rennie_pies)[0]\n    joleen_pies_solution = rennie_pies_solution + 5\n\n    total_pies = rennie_pies_solution + joleen_pies_solution\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x. Then the number of girls will be x + 8.\n    # Therefore, x + (x + 8) = total number of pupils.\n    # 2x + 8 = total pupils\n    # 2x = total pupils - 8\n    # x = (total pupils - 8) / 2\n    boys = (total_pupils - 8) // 2\n    girls = boys + 8\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    # According to the problem:\n    # The number of students who like apples is 3x\n    # The number of students who like bananas is 5x\n    # Using the Inclusion-Exclusion Principle: \n    # Total = Only Apples + Only Bananas + Both - Neither\n    # Neither is 0 because all students like at least one of the fruits\n    # so Total = Only Apples + Only Bananas + Both\n    # But Only Apples = Apples - Both = 3x - x\n    # And Only Bananas = Bananas - Both = 5x - x\n    # So Total = (3x - x) + (5x - x) + x = 35 (total number of students)\n    # This simplifies to 3x + 5x - x + x = 35\n    # This further simplifies to 8x = 35\n    # Solving for x:\n    x = 35 / 8\n    return int(x)\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let n be the time Nancy takes to finish the work herself\n    n = symbols('n')\n    \n    # Lee and Nancy finish the work together in 10 hours\n    # Lee's work rate is 1/L, Nancy's work rate is 1/n\n    # Together, their combined work rate is 1/10\n    # In 6 hours, Lee can do 6/L of the work\n    # Nancy works for 20 hours, so she does 20/n of the work\n    # The sum of the fractions of work Lee and Nancy do should equal 1 job\n    equation = (6 * (1/n) + 20 * (1/n)) - (1/10 * (6 + n))\n\n    # Solving the equation will give us the time it takes for Nancy to finish the job by herself\n    nancy_time = solve(equation, n)\n\n    # Return the time it takes for Nancy to finish the job by herself\n    return nancy_time[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    original_weight_kg = 3.5\n    pie_weight_kg = 550 / 1000\n    juice_weight_kg = 1050 / 1000\n\n    remaining_weight_kg = original_weight_kg - (pie_weight_kg + juice_weight_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # Let's first set up the equation given in the question.\n    # If B is 25 more than six times A, it's represented as: B = 6A + 25\n    # Where A = 10x + y and B = 20x + 2y, based on the place value.\n    # Substituting the value of A and B, we have:\n    # 20x + 2y = 6(10x + y) + 25\n    # Which simplifies to:\n    # 20x + 2y = 60x + 6y + 25\n    # This can be further simplified to:\n    # 40x = 4y + 25\n\n    # Now let's find the values of x and y:\n    for x in range(1, 10):  # x can be from 1 to 9 since it is a digit in tens place\n        for y in range(0, 10):  # y can be from 0 to 9 since it is a digit in ones place\n            if 40 * x == 4 * y + 25:\n                A = 10 * x + y\n                return A\n    \n    return \"John's calculation is incorrect.\"\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    number_of_days = 5\n    total_chairs = sum(first_day_chairs + common_difference * (day - 1) for day in range(1, number_of_days + 1))\n    \n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100  # convert pounds to pence\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    ans = 111111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    pencil_ruler_combinations = pencil_colours * ruler_colours\n    pencil_pen_combinations = pencil_colours * pen_colours\n    ruler_pen_combinations = ruler_colours * pen_colours\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    return (12 / 25) * 100\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # To guarantee 3 marbles of the same color, we proceed with the worst-case scenario \n    # according to the Pigeonhole Principle.\n\n    # Worst case scenario: Benny takes out 2 blue, 2 yellow and 1 red marbles. \n    # This ensures that regardless of what color the next marble is, he will have 3 of the same color.\n\n    worst_case_benny = 2 + 2 + 1 + 1  # Plus one more to get the third marble of the same color\n\n    return worst_case_benny\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 13)]\n    ans, _ = solve_congruence(*congruences)\n    while ans <= 100 or ans >= 190:\n        ans += 4 * 13\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    sequence = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Current sum of Mary and her son's age\n    current_sum = 45\n    \n    # In 5 years, Mary will be 5 years older\n    # Her son will also be 5 years older\n    # Therefore, the sum of their ages will be increased by 5 + 5 = 10 years\n    future_sum = current_sum + 5 + 5\n    \n    return future_sum\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # in pence\n    amount_paid = 100     # convert £1 to pence\n    change = amount_paid - total_cost\n\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sebastian's and Garrett's current age\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(garrett_age - sebastian_age, 24)  # Garrett is 24 years older\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))  # In 10 years, Garrett will be thrice as old as Sebastian\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n\n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls - boys, 65)  # 65 fewer boys than girls\n    equation2 = Eq(boys - (2 / 5) * boys, girls - (3 / 7) * girls)  # After leaving, boys = girls\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    remaining_boys = boys - (2 / 5) * boys\n    remaining_girls = girls - (3 / 7) * girls\n\n    total_remaining = remaining_boys.subs(boys, solutions[boys]) + remaining_girls.subs(girls, solutions[girls])\n\n    return total_remaining.evalf()\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    tax_paid = 90\n    \n    price_before_tax = tax_paid / tax_rate\n    return price_before_tax\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    num_days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = num_people * travel_cost_per_person\n    total_hotel_cost = num_people * num_days * hotel_cost_per_day_per_person\n    total_spending_money = num_people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    earnings_march = 1354\n    earnings_april = 1672\n\n    total_earnings = earnings_march + earnings_april\n\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n    \n    nth_term = first_term + (term_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # All math books are together, all chemistry books are together and all physics books are together.\n    # We can consider each group of books as a single unit.\n    # Therefore, we have 4 units to arrange: M, C, P, B (math, chemistry, physics, biology)\n    num_units = 4\n    \n    # Now we need to calculate the number of ways to arrange these units.\n    arrangements_of_units = factorial(num_units)\n    \n    # Within each unit, we need to arrange the books themselves.\n    # For math books: 4! ways to arrange\n    arrangements_of_math_books = factorial(4)\n    \n    # For chemistry books: 3! ways to arrange\n    arrangements_of_chemistry_books = factorial(3)\n    \n    # For physics books: 2! ways to arrange\n    arrangements_of_physics_books = factorial(2)\n    \n    # For biology books there's only 1, so there's only 1! = 1 way to arrange\n    arrangements_of_biology_books = factorial(1)\n    \n    # Multiply the arrangements of the units by the arrangements within each unit\n    total_arrangements = (\n        arrangements_of_units *\n        arrangements_of_math_books *\n        arrangements_of_chemistry_books *\n        arrangements_of_physics_books *\n        arrangements_of_biology_books\n    )\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial as fact\n\ndef solution():\n    total_permutations = fact(7)\n    vowels_permutations = fact(3)\n    consonants_permutations = fact(4) # Considering the consonants R, N, G, S\n    \n    # The cases where all vowels are together are treated as a single entity (AEO, for example).\n    # Thus, we have a total of 5 entities (3 vowels together + 4 consonants) to arrange.\n    vowels_together = vowels_permutations * fact(5)\n    \n    # Subtract the cases where all vowels are together from the total permutations.\n    return total_permutations - vowels_together\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges, bananas = symbols('apples oranges bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n\n    return height_meters / meters_to_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # Number of problems in each category\n    cat1 = 30\n    cat2 = 40\n    cat3 = 45\n    \n    # Multiplying the number of problems in each category gives the total combinations\n    total_combinations = cat1 * cat2 * cat3\n    \n    return total_combinations\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    p = 12\n    for equal_side in range(1, p//2):\n        for base in range(1, p - 2*equal_side + 1):\n            if equal_side + equal_side + base == p and equal_side >= base / 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n\n    # Create symbols for a, b, and c\n    a, b, c = symbols('a b c')\n\n    # Set up the equations given by the problem\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n\n    # Solve the equations for a, b, and c\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # Extract solutions for a, b, and c\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # Check if a, b, and c are primes and calculate the product\n    if isprime(a_val) and isprime(b_val) and isprime(c_val):\n        return a_val * b_val * c_val\n    else:\n        return \"One or more variables are not prime numbers\"\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    \n    # Total seats at the table\n    total_seats = 8\n    \n    # People to seat\n    people = 6\n    \n    # Circular permutations formula P(n, k) = (n - 1)! / (n - k)!\n    # Adjusted for circular arrangement as (n - 1)! since 1 seat can be considered fixed due to rotational symmetry\n    permutations = factorial(total_seats - 1) // factorial(total_seats - people)\n    \n    return permutations\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Equation 1: Initially, the number of boys and girls was equal.\n    equation1 = Eq(b, g)\n\n    # Equation 2: In the end, boys are twice the girls\n    # b + 12 is the final number of boys, g - 8 is the final number of girls\n    equation2 = Eq(b + 12, 2 * (g - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # The total number of students initially is the number of boys plus the number of girls\n    initial_students = solutions[b] + solutions[g]\n    \n    return initial_students\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, melvin, david = symbols('eugene melvin david')\n    total_stickers = 260\n\n    # After the first transaction:\n    equation1 = Eq(melvin + 2*melvin, eugene - 2*melvin)\n    # After the second transaction:\n    equation2 = Eq(david + melvin, melvin - david)\n    # After the third transaction:\n    equation3 = Eq(eugene + (eugene - 2*melvin), david - (eugene - 2*melvin))\n    # The total number of stickers remained the same:\n    equation4 = Eq(eugene + melvin + david, total_stickers)\n    # Final ratio of their stickers:\n    equation5 = Eq(eugene/melvin, 46/12)\n    equation6 = Eq(melvin/david, 12/7)\n    \n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (eugene, melvin, david))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(40, 81, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculating the time taken for each segment and adding them up\n    time_first_segment = 280 / 7\n    time_second_segment = 400 / 5\n    time_third_segment = (800 - 280 - 400) / 8\n    \n    total_time = time_first_segment + time_second_segment + time_third_segment\n\n    return total_time\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Matches in pile A and pile B\n    pile_A = 35\n    pile_B = 24\n    \n    # The key to this problem is the concept of \"Nim Sum\".\n    # If the XOR (exclusive or) of the number of matches in the two piles is 0, then the person about to play is in a losing position.\n    # We calculate the Nim Sum by using bitwise XOR of the two pile amounts.\n    nim_sum = pile_A ^ pile_B\n\n    # If the Nim Sum is not zero at the beginning of the game, then the person taking the first move has a winning strategy:\n    if nim_sum != 0:\n        winner = \"Eddie\"\n    else:\n        winner = \"Wei'er\"\n    \n    # To describe the winning strategy we make a move that forces the Nim Sum to be 0 after each turn\n    winning_strategy = []\n    if winner == \"Eddie\":\n        # Check which pile to take from, by comparing Nim Sum with each pile\n        take_from_pile_A = (pile_A ^ nim_sum) < pile_A\n        # Determine the amount to take to make the Nim Sum of the new state 0\n        amount_to_take = pile_A - (pile_A ^ nim_sum) if take_from_pile_A else pile_B - (pile_B ^ nim_sum)\n        winning_strategy = [\"pile A\" if take_from_pile_A else \"pile B\", amount_to_take]\n    \n    return winner, winning_strategy\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2/7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if (25 - prime) in primes:\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n\n    length1 = 15\n    length2 = 45\n\n    ans = gcd(length1, length2)\n\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (6 * 60) + 52  # Convert 6:52 PM to minutes\n    end_time = (8 * 60) + 24    # Convert 8:24 PM to minutes\n    time_spent = end_time - start_time  # Calculate the difference in minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lampposts = 50\n    distance_between_lampposts = 2\n    # The first lamppost is at the beginning and the last at the end, so we consider 49 intervals.\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    students = 6\n    # Using the Pigeonhole Principle, to find the minimum number of peaches\n    # the student with the most peaches can get, we divide the total number\n    # of peaches by the number of students and round up.\n    peaches_per_student = (total_peaches + students - 1) // students\n    \n    return peaches_per_student\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # equations based on the problem\n    eq1 = Eq(chocolate, vanilla + 72)\n    eq2 = Eq(blueberry, vanilla - 36)\n    eq3 = Eq(427, chocolate - 1/6 * chocolate + vanilla - 2/3 * vanilla + blueberry - 7/9 * blueberry)\n    \n    # solve the system of equations\n    sold = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n    \n    # quantity of chocolate cupcakes sold\n    chocolate_sold = sold[chocolate] * 1/6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    halfway = (18 + 52) / 2\n    return halfway\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcard_price = 45  # price in pence\n    stamp_price = 27     # price in pence\n    postcards_count = 10\n    stamps_count = 10\n    note_value = 1000    # value in pence (£10 note)\n\n    total_cost = (postcard_price * postcards_count) + (stamp_price * stamps_count)\n    change = note_value - total_cost\n\n    return change / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    n = 7  # number of consecutive numbers\n    total_sum = 140  # sum of these numbers\n    \n    # The sum of an arithmetic sequence is (n/2)*(first_term + last_term)\n    # As the numbers are consecutive, their average is the sum divided by n\n    average = total_sum / n\n    \n    # To find the first term, subtract (n-1)/2 from the average (middle number)\n    first_term = average - (n - 1) / 2\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    lcm, remainder = solve_congruence(*congruences)\n    ans = remainder\n    # Since we want the smallest number of children that satisfies all conditions,\n    # we will return the smallest positive remainder that fulfills the congruences,\n    # considering all children should be in some group before they have to sit out,\n    # and then add the remaining children who sat out in the largest group (9 children per group).\n    while ans < 9:\n        ans += lcm\n    return ans + 3\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3! ways to seat Chantel, Tony, and Cale around the table with Claire's seat fixed.\n    total_ways = 3 * 2 * 1\n    \n    # However, we need to subtract the number of ways where Tony sits face to face with Claire.\n    # Given Claire's seat is fixed, there is only 1 way for Tony to sit face to face with her.\n    # For the other two seats, Chantel and Cale can swap their positions in 2! ways.\n    face_to_face_ways = 1 * 2\n    \n    # The number of valid seat arrangements is the total ways minus the invalid face to face ways.\n    valid_ways = total_ways - face_to_face_ways\n    \n    return valid_ways\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    mass_rounded = 7.4\n    smallest_mass = mass_rounded - 0.05\n    return smallest_mass\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's daily production rate\n    franks_rate = 180 / 10\n    \n    # Ryan's daily production rate\n    ryans_rate = 180 / 15\n    \n    # Difference in tables produced per day\n    difference = franks_rate - ryans_rate\n    \n    return int(difference)\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of questions and t be the time she was supposed to finish marking\n    x, t = symbols('x t')\n\n    # Equation 1: If she marks 4 questions per minute, she stays back 5 minutes late\n    equation1 = Eq(4 * (t + 5), x)\n\n    # Equation 2: If she marks 6 questions per minute, she leaves 5 minutes early\n    equation2 = Eq(6 * (t - 5), x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, t))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if marks_correct * correct + marks_wrong * wrong == total_marks:\n            return correct\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_pence = 165 * 100  # Convert pounds to pence\n    price_per_cake = 75  # Price of one cake in pence\n    num_cakes_sold = total_money_pence // price_per_cake  # Calculate number of cakes sold\n    \n    return num_cakes_sold\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3 / 7) * total_money\n    remainder = total_money - spent_at_restaurant\n    spent_on_fees = (2 / 9) * remainder\n    money_left = remainder - spent_on_fees\n\n    return money_left\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Iterate through all sets of five consecutive 2-digit numbers.\n    for i in range(10, 96):\n        # Determine the five consecutive numbers.\n        numbers = [i, i+1, i+2, i+3, i+4]\n\n        # Check all combinations of three numbers to fulfil the conditions.\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    # Sum of three consecutive numbers.\n                    sum_of_three = numbers[j] + numbers[k] + numbers[l]\n                    \n                    # Check divisibility by 37 and 60 for different combinations.\n                    if sum_of_three % 37 == 0:\n                        for m in range(5):\n                            if m != j and m != k and m != l:\n                                for n in range(m+1, 5):\n                                    if n != j and n != k and n != l and m != n:\n                                        for o in range(n+1, 5):\n                                            if o != j and o != k and o != l and o != n and o != m:\n                                                other_sum_of_three = numbers[m] + numbers[n] + numbers[o]\n                                                if other_sum_of_three % 60 == 0:\n                                                    return max(numbers)\n    return None\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_to_share_equally = total_candies // 2\n\n    candies_amy_should_give = amy_candies - candies_to_share_equally\n\n    return candies_amy_should_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Since we're only writing an expression, we do not have concrete values for x and y.\n# You can call the function with any x and y values. For example:\n\n# ans = solution(2, 3) would calculate the cost for x = 2 dollars per pound for bananas and y = 3 dollars per pound for oranges."
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    \n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Square of the sum of the first n natural numbers\n    n = 10  # since 30/3 = 10\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Multiplying by 3^2 to adjust the formula for our series\n    ans = 3**2 * sum_of_squares\n\n    return ans\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # There is a pause between each chime. Let's calculate the duration of each pause.\n    # 3 chimes at 3 pm take 6 seconds, meaning there are 2 pauses between the 3 chimes.\n    # So each pause is 6 seconds / 2 pauses = 3 seconds per pause.\n    \n    pause_duration = 6 / 2\n    \n    # 6 chimes at 6 pm would have 5 pauses.\n    num_pauses_at_6_pm = 6 - 1\n    \n    # Total duration for 6 chimes at 6 pm is the sum of the duration of the pauses and the chimes.\n    # But since a chime is instantaneous, we only account for pauses.\n    total_duration_at_6_pm = num_pauses_at_6_pm * pause_duration\n    \n    return total_duration_at_6_pm\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_hours = 12 * 8  # Total hours P needs to complete the job\n    q_hours = 8 * 10  # Total hours Q needs to complete the job\n\n    # Work done by P in 1 hour\n    p_work_hour = 1 / p_hours\n    # Work done by Q in 1 hour\n    q_work_hour = 1 / q_hours\n\n    # Combined work per hour\n    combined_work_hour = p_work_hour + q_work_hour\n\n    # Total hours needed when working together\n    total_hours_together = 1 / combined_work_hour\n\n    # Working 8 hours per day\n    days_needed = total_hours_together / 8\n\n    # Rounding up to get whole days\n    whole_days = -(-days_needed // 1)  # Ceiling division to get whole days\n\n    return int(whole_days)\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56  # cost in pence\n    weight_kg = 5\n    total_cost_pence = cost_per_kg * weight_kg\n    \n    total_paid_pence = 1000  # because £10 equals 1000p\n    change_pence = total_paid_pence - total_cost_pence\n    \n    return change_pence\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    n = 120\n    factors_count = 1\n    i = 2\n    while i * i <= n:\n        power = 0\n        while n % i == 0:\n            n //= i\n            power += 1\n        factors_count *= (power + 1)\n        i += 1\n    if n > 1:\n        factors_count *= 2\n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    number = 180\n    factors = [(i, number // i) for i in range(1, int(number**0.5) + 1) if number % i == 0]\n    min_diff = min(abs(pair[0] - pair[1]) for pair in factors)\n    return min_diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temp_midnight = -8\n    temp_midday = 13\n    change = temp_midday - temp_midnight\n\n    return change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 16):  # Start from 6 as it's the next multiple of 3 after 5, and end before 16\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time in minutes it takes for Max to cover the distance.\n    # Since Luca takes 10 more minutes than Max, Luca's time is x + 10.\n    # Their speed ratio is 2:3, so Max's speed is 3/2 times Luca's speed.\n    # Time is inversely proportional to speed for a fixed distance.\n    # Therefore, if Luca's time is x + 10, Max's time is x.\n    # If Luca doubles his speed, his time will be halved.\n    # We need to find Luca's halved time.\n    \n    # Firstly, we need to find the relationship between their times and speeds.\n    # We establish the equation based on their speed ratio and time taken:\n    # Luca's speed / Max's speed = Max's time / Luca's time\n    # 2/3 = x / (x + 10)\n    \n    # Solving for x gives us Max's time.\n    # Then we calculate Luca's normal walking time, which is x + 10.\n    # Finally, we calculate the time it would take if Luca doubled his speed (halved time).\n    \n    # Cross multiplying our equation:\n    # 2 * (x + 10) = 3 * x\n    # 2x + 20 = 3x\n    # x = 20, which is Max's time\n    \n    max_time = 20\n    \n    # Luca's usual time is Max's time plus 10 minutes\n    luca_usual_time = max_time + 10\n    \n    # If Luca doubles his speed, his time is halved\n    luca_doubled_speed_time = luca_usual_time / 2\n    \n    return luca_doubled_speed_time\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n\n    return difference\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    score = 71\n\n    # Let's denote x as the number of correct answers.\n    # Let's denote y as the number of wrong answers.\n    \n    # According to the problem's scoring system:\n    # Total score = 2 * correct_answers - wrong_answers\n    # 71 = 2*x - y\n    \n    # We also know that the total number of questions is the sum of correct and wrong answers:\n    # total_questions = correct_answers + wrong_answers\n    # 40 = x + y\n    \n    # We have a system of two linear equations:\n    # 2x - y = 71\n    # x + y = 40\n    \n    # We can solve for x and y using algebra:\n    # Adding the two equations, we get 3x = 111\n    # Therefore x = 111 / 3 = 37\n    \n    correct_answers = 111 // 3\n    wrong_answers = total_questions - correct_answers\n\n    return wrong_answers\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time spent jogging: from 6:30 AM to 7:30 AM (1 hour)\n    jogging_time = 1  # hours\n    jogging_speed = 6.5  # miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Time spent walking: from 7:30 AM to 9:30 AM (2 hours)\n    walking_time = 2  # hours\n    walking_speed = 4.5  # miles per hour\n    \n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled: jogging + walking\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let's denote the number of pens and pencils originally bought as x.\n    # After giving away 5 pencils, Mrs. Rajoo has (x - 5) pencils left.\n    # At this point, she has twice as many pens as pencils, so she has 2 * (x - 5) pens.\n    # Then she buys another 18 pens, so she ends up with 2 * (x - 5) + 18 pens.\n    # But we know that originally the number of pens was equal to the number of pencils (x),\n    # so the equation will be 2 * (x - 5) + 18 = x.\n    # Now we solve for x.\n\n    # Assuming x is equal to the original number of pens and pencils.\n    x = symbols('x')\n\n    # The equation of twice as many pens as pencils after giving 5 pencils away plus buying 18 more pens.\n    equation = Eq(2 * (x - 5) + 18, x)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # The number of pens she has in the end is twice the original number minus 10 pens given away plus 18 new pens.\n    num_pens_end = 2 * (solution[x] - 5) + 18\n\n    # Return the final number of pens.\n    return num_pens_end\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Total cards in the deck\n    total_cards = 52\n    # Types of patterns (total different labels)\n    patterns = 13\n\n    # Maximum number of cards that can be drawn without getting an \"A\"\n    # is one less than the number of patterns, because we could draw all 12 non-A cards of each pattern.\n    max_without_A = (patterns - 1) * 4\n\n    # To ensure getting an \"A\", we must draw one more than the maximum possible without an \"A\".\n    min_with_A = max_without_A + 1\n\n    return min_with_A\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    ship_speed_in_still_water = 33\n    current_speed = 7\n    downstream_speed = ship_speed_in_still_water + current_speed\n    distance = 320\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_lengths = 2 * 45\n    remaining_wire = total_length - cut_lengths\n    number_of_40cm_pieces = remaining_wire // 40\n    \n    return number_of_40cm_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_of_left_handed_who_play_tennis = 1 / 10\n    proportion_of_left_handed = 0.25\n\n    total_left_handed = left_handed_tennis_players / proportion_of_left_handed_who_play_tennis\n    total_students = total_left_handed / proportion_of_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_needed_for_100 = 100 / cookies_per_gram\n    return grams_needed_for_100\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35 AM\", \"%I:%M %p\")\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the 3 positions in the three-digit number can be occupied by any one of the 3 digits\n    # Hence, for each position we have 3 choices and there are 3 positions.\n    # Therefore, the total number of different three-digit numbers is 3 * 3 * 3.\n    \n    ans = 3**3\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    total_zeros = 0\n    current_number = 0\n\n    while total_zeros < 100:\n        current_number += 1\n        total_zeros += str(current_number).count('0')\n\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drank = 9\n    \n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n    \n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bud, pip, tom = symbols('bud pip tom')\n    \n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # meters per minute\n    speed_slow = 120  # meters per minute\n    time_fast = 6     # minutes\n    time_slow = 8     # minutes\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the sequence be 'a'\n    # Then the consecutive whole numbers are a, a+1, a+2, ..., a+7\n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # We know n = 8 (since there are 8 consecutive numbers) and Sum = 2012.\n    # Therefore:\n    # 2012 = 8/2 * (a + (a + 7))\n    # 2012 = 4 * (2a + 7)\n    # 2012 / 4 = 2a + 7\n    # a = (2012 / 4 - 7) / 2\n\n    a = (2012 // 4 - 7) // 2\n    # Therefore, the largest number in the sequence, which is a+7, is:\n\n    largest_number = a + 7\n\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue_cars = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue_cars)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    \n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return 42 / 35 * 100\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of students in class A and class B\n    A, B = symbols('A B')\n\n    # Original ratio of students in class A to class B\n    equation1 = Eq(A, 5/7 * B)\n\n    # Ratio after transferring students\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Return the number of students in class A before transfer\n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    return (14 - 8) / 3\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    girls = 17\n    for boys_side in range(1, girls):\n        if boys_side**2 + boys_side + 1 == girls:\n            boys = boys_side**2\n            return boys\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye had initially.\n    # For every 3 bottles, she gets 1 new bottle. So she would normally get x // 3 bottles from x bottles.\n    # But since she got 1 more bottle than expected, she got x // 3 + 1 = 4 bottles after the exchange.\n    # She exchanged 5 times, so she initially exchanged 5 * 3 = 15 bottles.\n    # Thus, her initial number of bottles is 15 (bottles given) + 4 (final bottles) - 1 (extra bottle she shouldn't have gotten).\n    initial_bottles = (5 * 3) + 4 - 1\n    return initial_bottles\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    litres_to_millilitres = 1000\n\n    total_millilitres = total_litres * litres_to_millilitres\n    time_in_seconds = total_millilitres / flow_rate_per_second\n\n    return time_in_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    total_digits = 0\n    while total_digits < 237:\n        pages += 1\n        total_digits += len(str(pages))\n    return pages - 1  # Subtract one because we stop after exceeding 237 digits\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let d be the distance between Ivy's home and the destination\n    # Let s be the speed Ivy needs to go to arrive at 7pm\n    # Using the formula time = distance / speed:\n    # If Ivy leaves home at 1pm and arrives at 7pm, that's 6 hours of travel, so:\n    # 6h = d / s => d = 6s ...(1)\n    # If she wants to arrive 1 hour earlier, at 6pm, that means she has 5 hours of travel, so she must increase her speed by 2 km/h:\n    # 5h = d / (s + 2) ...(2)\n\n    # We now have two equations (1) and (2):\n    # d = 6s from (1)\n    # 5s + 10 = d from (2), because multiplying both sides by (s + 2) results in 5s + 10\n    # Equating both:\n    # 6s = 5s + 10\n    # s = 10 km/h\n\n    # Now we can find d using equation (1):\n    # d = 6 * 10 = 60 km\n    d = 6 * 10\n\n    return d\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_avg = 1468\n    correct_avg = 1462\n    incorrect_entry = 1268\n    correct_entry = 1082\n    difference_in_entries = incorrect_entry - correct_entry\n    \n    difference_in_averages = incorrect_avg - correct_avg\n    \n    num_days = difference_in_entries / difference_in_averages\n\n    return int(num_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # It takes Mr. Tung 12 minutes to make 3 cuts and get 4 pieces of equal length.\n    # To get 12 pieces, he needs to make 11 cuts.\n    # The time taken for each cut is 12 minutes divided by 3 cuts.\n    time_per_cut = 12 / 3\n    # Therefore, the time to make 11 cuts is 11 times the time taken for each cut.\n    total_time = 11 * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a1, d = symbols('a1 d')\n\n    # Define the equations based on the given information\n    equation1 = Eq(a1 + 8*d, a1 + 14*d + 18)\n    equation2 = Eq(a1 + 19*d + a1 + 11*d, 88)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a1, d))\n\n    # Find the 32nd term\n    a_32nd = solutions[a1] + 31 * solutions[d]\n\n    return a_32nd\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25  # Second term - First term\n\n    # Formula to find the first term: a_n = a_1 + (n - 1)*d\n    # Rearrange to find a_1: a_1 = a_n - (n - 1)*d\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    for lily_age in range(1, 100):  # Assuming a reasonable upper limit for the ages\n        marry_age = lily_age + 1\n        carol_age = marry_age + 2\n        if 4 * lily_age * marry_age * carol_age == 2240:\n            return carol_age\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_fraction = 2/5\n    purple_fraction = 1/8\n\n    red_flowers = int(total_flowers * red_fraction)\n    purple_flowers = int(total_flowers * purple_fraction)\n\n    return red_flowers, purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    # The incorrect equation as provided by Chewy\n    incorrect_eq = (8*x + 8)/2 - 3*(x + 6)\n    \n    # Simplifying the incorrect equation\n    incorrect_simplified = simplify(incorrect_eq)\n    \n    # The correct equation after fixing the error\n    correct_eq = (8*x + 8)/2 - 3*(x + 6)\n    # Chewy made an error when expanding and subtracting: -3(x+6) should be -3x-18 instead of -3x+18\n    correct_simplified = simplify(correct_eq)\n    \n    # Chewy's wrong conclusion was x + 22, correcting it with the right conclusion\n    correct_answer = correct_simplified - (x + 22)\n    \n    # Finding for what values the error occurs\n    solution_to_error = correct_answer.equals(0)\n    \n    return solution_to_error\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since there are 10 identical marbles and they are to be split into 2 piles,\n    # we essentially need to find the number of ways to pick a number of marbles for the first pile,\n    # and the rest will go to the second pile. We can have 1 to 9 marbles in the first pile \n    # (since we need at least one marble in each pile to have distinct piles).\n\n    # The number of ways to distribute the marbles is therefore the number of possible pile sizes for the first pile, \n    # which is just 9 (since we can choose 1 to 9 marbles for the first pile).\n    num_ways = 9\n\n    return num_ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.056688\n    cup_capacity_quarts = 0.5\n    number_of_cups = liters_to_quarts / cup_capacity_quarts\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure he gets at least 3 cars of the same color, he would need to pick\n    # 2 cars of each color at worst case, and then one more which will assure 3 of the same color\n    red_picks = 2\n    blue_picks = 2\n    white_picks = 2\n    # Now he needs one more pick to ensure 3 cars of the same colour\n    one_more_pick = 1\n\n    # The worst-case scenario amount of picks\n    total_picks = red_picks + blue_picks + white_picks + one_more_pick\n    return total_picks\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length1_cm = 85\n    length2_cm = 200  # 2 meters in centimeters\n    length3_cm = 147\n    total_length_cm = length1_cm + length2_cm + length3_cm\n    total_length_m = total_length_cm / 100  # converting centimeters to meters\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    return 2 + 34/100\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_after_giving = 34 + 2\n    stamps_after_buying = stamps_after_giving - 11\n    initial_stamps = stamps_after_buying + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n    \n    return solutions[vivian]\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    x, y = symbols('x y')  # Define the symbols for the two original numbers\n    equation1 = Eq(x + y, 11.63)  # The correct sum of the numbers\n    equation2 = Eq(x + (y / 10), 5.87)  # Oliver's result after shifting decimal\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate one hundred times the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Initialize the height after the fourth bounce.\n    fourth_bounce_height = 36\n\n    # Since for the following bounces (including after the fourth bounce), it bounced half of the height from which it dropped.\n    # So, after the fourth bounce, it would have been dropped from a height that is twice as much.\n    third_drop_height = fourth_bounce_height * 2\n\n    # For the first two bounces, the ball bounced three times as high as the height from which it was dropped.\n    # So, after the first bounce, it would have been dropped from a height that is one third as much.\n    second_drop_height = third_drop_height / 3\n    first_drop_height = second_drop_height / 3\n\n    # Since the first drop is also at three times the height of the ball throw, we need to divide by three to get the initial drop height.\n    initial_drop_height = first_drop_height / 3\n\n    return initial_drop_height\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99\n    cost_whole_cd = 899\n\n    # Convert pence to pounds for calculations.\n    total_cost_separately = 12 * cost_per_song / 100\n\n    # Convert pence to pounds for whole CD.\n    total_cost_cd = cost_whole_cd / 100\n\n    savings = total_cost_separately - total_cost_cd\n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    total_trays = 40\n    \n    total_eggs = eggs_per_tray * total_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    # A number is divisible by 5 if its last digit is 0 or 5.\n    # Since all digits must be unique and the number must be 6-digits starting with 8,\n    # the last digit can only be 5, making the number end with 'e5'.\n\n    # A number is divisible by 4 if its last two digits form a number that is divisible by 4. \n    # Since we already know 'e' must be '5', we need to find a digit 'd' such that 'd5' is divisible by 4.\n    # The smallest such 'd' is 2 since 25 is divisible by 4.\n\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # We already have 3 digits (8, 2, 5), and their sum is 15.\n\n    # The remaining digits must sum to a value which, when added to 15, results in a multiple of 3.\n    # The smallest such digits, to get the smallest possible value for the number, would be 0, 3 and 7.\n\n    # However, 0 cannot be in the last digit as it would not be a 6-digit number.\n    \n    # Since 0 is one of the remaining digits and it can't be in the first position either (it would make the number not 6-digit),\n    # we cannot place 0 before 8 or in the last position (e).\n    # We place it in the 'a' spot, as it's the smallest value possible for 8a to be a multiple of 3.\n\n    # We place 7 in the 'b' spot and 3 in 'c' to maintain the smallest possible number.\n    # The final arrangement for the smallest number is 802357.\n\n    return int('802357')\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    legs_total = 64\n    spider_legs = 8\n    ant_legs = 6\n\n    max_ants = 0\n    while (legs_total - spider_legs * max_ants) % ant_legs != 0:\n        max_ants += 1\n\n    max_ants = (legs_total - spider_legs * max_ants) // ant_legs\n\n    return max_ants\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = []\n    for i in range(10, 100):\n        original = i\n        reversed_num = int(str(i)[::-1])\n        if original > reversed_num:\n            result = original - reversed_num\n        else:\n            result = reversed_num - original\n        results.append(result)\n    # Now, let's see what's common in all of these results.\n    unique_results = list(set(results))\n    if len(unique_results) == 1:\n        ans = unique_results[0]\n    else:\n        ans = None\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    # Available digits are 1, 2, 3\n    # Two-digit numbers can be formed by placing any of the three digits in tens place\n    # and any of the remaining two digits in ones place\n    tens_place_options = 3  # 1, 2, or 3\n    ones_place_options = 2  # One digit is already used in tens place, two options remain\n    # Total number of different two-digit numbers is the product of the number of options for each place\n    total_combinations = tens_place_options * ones_place_options\n    return total_combinations\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter - 0.25 * peter + 0.20 * sam + 96)\n    \n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # All digits from 0 to 9 used only once\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # To get the smallest possible difference, we want the largest number to start with the largest digits\n    # and the smallest number to start with the smallest digits after 0.\n    # We put the 0 in the second digit of the smaller number to avoid leading zeroes.\n    # The rest of the digits are arranged in descending order for the larger number and ascending for the smaller\n    \n    # Smaller number (0 as second digit to avoid leading zero)\n    smaller_number = int(\"\".join(map(str, [1, 0, 2, 3, 4])))\n    # Larger number\n    larger_number = int(\"\".join(map(str, [9, 8, 7, 6, 5])))\n\n    # The difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    length_of_train = 450  # in meters\n    time_to_pass_tree = 15  # in seconds\n\n    # Speed = Distance / Time\n    speed_of_train = length_of_train / time_to_pass_tree  # in meters per second\n\n    # Convert speed from m/s to km/h\n    speed_of_train_kmh = speed_of_train * 3.6\n\n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    ans = 1\n    for i in range(1, 11):\n        ans *= i\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) // 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n    \n    pencils_for_pen = cost_pen // cost_pencil\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_baba = 10\n    ali_and_baba = 2\n\n    total_people = people_in_front_of_ali + ali_and_baba + people_behind_baba\n    return total_people\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total_sum = sum(i * (i + 1) for i in range(1, 102))\n    return total_sum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2  # liters of water already in the tank\n    jug_capacity = 7   # capacity of one jug in liters\n    num_jugs = 4       # number of jugs added to the tank\n\n    # Total water added by the jugs\n    water_added = jug_capacity * num_jugs\n\n    # Total water in the tank after adding the jugs\n    total_water = initial_water + water_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amount collected by each friend\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)       # Chloe collects twice as much as David\n    equation2 = Eq(david, 3 * emily)       # David raises three times as much as Emily\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)  # Total amount collected\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    total_days = 3 + 2 + 2\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the number of days David takes off\n    x = symbols('x')\n\n    # Candy's work rate is 1/20 of the job per day\n    # David's work rate is 1/25 of the job per day\n\n    # Total work done by Candy is 12/20 (since she works all 12 days)\n    # Total work done by David is (12-x)/25 (since he takes x days off)\n\n    # The sum of their work should equal 1 (the whole job)\n    equation = Eq(12/20 + (12-x)/25, 1)\n\n    # Solve for x\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    first_50k_tax = 0.05 * 50000\n    remaining_income = income - 50000\n    remaining_tax = (0.08 + T) * remaining_income\n\n    total_tax = first_50k_tax + remaining_tax\n    tax_equation = Eq(total_tax, 15100)\n\n    T_value = solve(tax_equation, T)[0]\n\n    return T_value\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Since there are 3 types of balls, and we want to make sure we get 6 of the same type,\n    # in the worst case scenario, she would pick up 5 footballs, 5 basketballs, and 5 volleyballs first\n    # without getting 6 of the same type.\n    # The next ball she picks up will definitely be the 6th ball of some type.\n    worst_case_same_type = 5 + 5 + 5 + 1\n    return worst_case_same_type\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes_made = 6\n    cakes_needed = 10\n\n    time_per_cake = time_for_6_cakes / cakes_made\n    total_time = time_per_cake * cakes_needed\n\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 15\n    tax_percent = 8\n\n    tip = bill * (tip_percent / 100)\n    tax = bill * (tax_percent / 100)\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # By Newton's third law, the force exerted by the table on the book (normal force)\n    # is equal in magnitude and opposite in direction to the force of gravity on the book.\n    # Since the book rests on the table, these forces are balanced, so the magnitude of the\n    # force exerted by the table is equal to the weight of the book.\n    force_by_table = 20  # in Newtons (N)\n    return force_by_table\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the total number of fruits, y is the number of apples\n    x, y = symbols('x y')\n\n    equation1 = Eq(4*y, 5*x)  # there are 4/5 apples out of total number of fruits\n    equation2 = Eq((3/4)*x, y + 30)  # 3/4 of the fruits removed leaves y apples and 30 pears\n    equation3 = Eq(1/8*y, y - (3/4)*x)  # 1/8 of the number of apples equals the number of apples after removing 3/4 fruits\n\n    solutions = solve((equation1, equation2, equation3), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # Total oranges minus one orange for each child (to ensure each child gets at least one)\n    oranges_to_distribute = 13 - 3\n    \n    # The problem of distributing n identical items to r distinct groups is equivalent\n    # to the problem of placing n - 1 dividers between these items.\n    # This creates n + r - 1 positions, from which we choose r - 1 positions for the dividers.\n    r = 3  # number of kids\n    positions_for_dividers = oranges_to_distribute + (r - 1)\n    \n    # Choose (r - 1) positions from (positions_for_dividers) for dividers\n    # which is equivalent to distributing the remaining oranges\n    ways = comb(positions_for_dividers, r - 1)\n\n    return ways\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity of the arrow\n    v0 = 5  # m/s\n    \n    # Angle at which the arrow is shot\n    angle = 45  # degrees\n\n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n\n    # The height from which the arrow is shot\n    h = 30  # meters\n    \n    # Converting the angle to radians\n    angle_rad = math.radians(angle)\n    \n    # Initial velocity components\n    v0x = v0 * math.cos(angle_rad)  # Horizontal component of initial velocity\n    v0y = v0 * math.sin(angle_rad)  # Vertical component of initial velocity\n    \n    # The time it takes for the arrow to hit the ground can be found by using the vertical motion equation:\n    # final vertical position = initial vertical position + (initial vertical velocity * time) + (1/2 * acceleration * time^2)\n    # Since the final position is ground level, 0 = h + (v0y * t) + (1/2 * (-g) * t^2)\n    # Solving this quadratic equation for t gives us the time till impact:\n    # 0 = h + (v0y * t) - (1/2 * g * t^2)\n    # Using the quadratic formula: (-b + sqrt(b^2 - 4 * a * c)) / (2 * a), we get the time\n    \n    # Coefficients for the quadratic equation at^2 + bt + c = 0\n    a = -0.5 * g\n    b = v0y\n    c = h\n    \n    # Discriminant\n    discriminant = b**2 - 4 * a * c\n    \n    # We are interested in the positive root of the quadratic equation\n    t = (-b + math.sqrt(discriminant)) / (2 * a)\n    \n    # Vertical velocity at the moment of impact\n    vy_final = v0y - g * t  # v = u + at (final vertical velocity)    \n    # Horizontal velocity remains the same since there is no horizontal acceleration\n    \n    # Final velocity of the arrow\n    v_final = math.sqrt(v0x**2 + vy_final**2)  # Resultant of the horizontal and vertical velocity components\n    \n    return v_final\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    g = 9.8  # Acceleration due to gravity (m/s^2)\n    h = 5.0  # Height of the table (m)\n\n    # Using the formula v^2 = u^2 + 2gh, where u(initial velocity) = 0\n    v = sqrt(2 * g * h)\n\n    return v\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    number = 0\n    while True:\n        number += 11  # Increment the number by 11, as it should be divisible by 11\n        if sum(map(int, str(number))) == 20:  # Check if the digit sum is 20\n            return number\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "import itertools\n\ndef solution():\n    for digits in itertools.permutations(range(10), 5):\n        S, A, M, O, G = digits\n        if S == 0 or O == 0:  # Cannot be leading 0 due to digit constraints\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2  # sandwiches, burgers\n    drink_options = 3  # coffee, milk, tea\n    dessert_options = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_volume = equal_volume - 28\n\n    return transfer_volume\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n    interest_rate = (final_amount / principal) ** (1 / years) - 1\n    return interest_rate\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    change_received = 0.4\n    total_cost = total_paid - change_received\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    equation1 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    equation2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    # Let E represent the weight of an elephant\n    # Let C represent the weight of a cow\n    # Let H represent the weight of a horse\n    # Let P represent the weight of a pig\n    # We have the following equations:\n    #   2E = 5C => C = (2/5)E\n    #   4C = 3H => H = (4/3)C\n    #   3H = 5P => P = (3/5)H\n\n    # We want to find the number of pigs (x) that weigh as much as 8 elephants.\n    # So we need to express the weight of 8 elephants in terms of pigs:\n    #   8E = xP\n    # Substituting each animal weight from the equations we have:\n    #   8E = x * (3/5) * (4/3) * (2/5) * E\n    # Simplifying the expression:\n    #   8 = x * (3/5) * (4/3) * (2/5)\n    # Solving for x:\n    x = 8 / ((3/5) * (4/3) * (2/5))\n\n    return int(x)\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percentage = 60 / 100\n    fraction = 2 / 5\n    number = 75\n\n    ans = percentage * fraction * number\n\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n    \n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n    total_cost = bill + tip_amount + tax_amount\n    \n    return total_cost\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    weight_per_box = total_weight_5_boxes / 5\n    total_weight_3_boxes = weight_per_box * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let x be the number of correct answers Dora had\n    # and y be the number of correct answers Justin had\n    for x in range(11):\n        for y in range(11):\n            # Justin got 15 more points than Dora\n            if 10 * y - 5 * (10 - y) == 10 * x - 5 * (10 - x) + 15:\n                # Together they got 155 points\n                if 10 * x - 5 * (10 - x) + 10 * y - 5 * (10 - y) == 155:\n                    return x\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 4 comics among themselves\n    comics_arrangement = factorial(4)\n    # Number of ways to arrange 6 fictions among themselves\n    fictions_arrangement = factorial(6)\n    # Number of ways to arrange the two groups (comics group and fictions group)\n    groups_arrangement = factorial(2)\n    \n    # Total arrangements = arrangements within groups * arrangements of groups\n    total_arrangements = comics_arrangement * fictions_arrangement * groups_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "def solution():\n    from math import factorial\n\n    # To separate each pair of the 4 dancing performances, we need at least 3 singing performances\n    # We are left with 3 additional singing performances to arrange freely\n    \n    # Calculate the permutations for the 4 dancing performances (D) and the 3 fixed singing performances (S):\n    # They can be arranged in a sequence like S D S D S D S D, which has 5 \"slots\" where the additional\n    # 3 singing performances (s) can be placed. These slots include the beginning and ending of the sequence.\n    # Hence we treat the 3 remaining singing performances as identical balls, and the 5 slots as distinct boxes.\n    # This is a problem of placing 3 identical balls into 5 boxes, which can be calculated using combinations\n    # with repetitions, also known as stars and bars method: C(n + k - 1, k), where n is the number of boxes\n    # and k is the number of balls.\n\n    # Number of ways to distribute the 3 extra singing performances in the 5 slots\n    # Using stars and bars: C(5 + 3 - 1, 3) = C(7, 3)\n    ways_for_singing = factorial(7) // (factorial(3) * factorial(7 - 3))\n\n    # Multiplied by the number of permutations of the dancing performances D and the fixed singing performances S\n    # Which is P(8, 8) since there are 8 items (D and S) and all are distinct\n    ways_for_fixed = factorial(8)\n\n    # The total number of arrangements is the product of the two\n    return ways_for_singing * ways_for_fixed\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # lee_rate and nancy_rate are in job/hour\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # They finish the job in 10 hours working together\n    eq1 = Eq(1, 10 * (lee_rate + nancy_rate))\n\n    # Lee types for 6 hours and Nancy types for 20 hours\n    eq2 = Eq(1, lee_rate * 6 + nancy_rate * 20)\n\n    # Solve the system of equations\n    rates = solve((eq1, eq2), (lee_rate, nancy_rate))\n\n    # Time taken by Nancy to finish the job by herself is 1/nancy_rate\n    return 1 / rates[nancy_rate]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    \n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (6 / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let the number of groups in Class B be b\n    b = 4\n    # Average candies sold by each group in Class A\n    avg_A = 12\n    # Total candies sold by Class A\n    total_A = avg_A * 3\n    # Average candies sold by each group in both Class A and Class B\n    overall_avg = 8\n    # Total candies sold by both Class A and Class B\n    total_both = overall_avg * (3 + b)\n    # Total candies sold by Class B\n    total_B = total_both - total_A\n    # Average candies sold by each group in Class B\n    avg_B = total_B / b\n    return avg_B\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string_length = total_string_length - used_string_length\n    number_of_pieces = 10\n\n    length_per_piece = remaining_string_length / number_of_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    passengers_left = 22\n    # After one third got off, 22 is two thirds of the passengers left after first stop\n    # So we find the number at the first stop\n    passengers_after_first_stop = passengers_left * 3 / 2\n    # Two fifths got off initially, so we find the initial number of passengers\n    initial_passengers = passengers_after_first_stop * 5 / 3\n\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5)]  # (remainder, mod)\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45\n    number = 80\n    ans = (percentage / 100) * number\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    num_flavours = 7\n    num_doughnuts = 2\n\n    combinations = comb(num_flavours, num_doughnuts)\n\n    return combinations\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    number_of_people = 10\n    handshakes = comb(number_of_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities of chocolates\n    white, milk, dark = symbols('white milk dark')\n\n    # Given ratios\n    ratio_white = 3\n    ratio_milk = 7\n    ratio_dark = 5\n    \n    # Equation: The difference between dark and white chocolates\n    equation1 = Eq(dark - white, 8)\n    # Equation due to proportion of white:milk:dark = 3:7:5\n    equation2 = Eq(white / ratio_white, milk / ratio_milk)\n    equation3 = Eq(milk / ratio_milk, dark / ratio_dark)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbol for total number of students\n    total_students = symbols('total_students')\n\n    # Equation based on the problem statement\n    eq = Eq(total_students / 4 + 3 + (total_students - total_students / 4 - 3) / 3 - 3 + 25, total_students)\n\n    # Solve the equation\n    solutions = solve(eq, total_students)\n\n    # Return the number of students, making sure it's a number not a list\n    return solutions[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to add into the bag\n    # The probability of getting a green ball is (total green balls) / (total balls)\n    # Therefore, if P(green) = 1/3, (10) / (5 + 10 + x) = 1/3\n    # Solve for x: 10 = (1/3) * (15 + x)\n    # Multiply both sides by 3: 30 = 15 + x\n    # Subtract 15 from both sides: x = 30 - 15\n    \n    x = 30 - 15\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    side_length_big_square = 6\n    side_length_small_square = 3\n\n    num_squares = (side_length_big_square // side_length_small_square) ** 2\n\n    return num_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    # If 5p is one-quarter, then the total money is 4 times 5p\n    total_money = spent * 4\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    ones_digit_32 = pow(32, 33, 10)\n    ones_digit_22 = pow(22, 29, 10)\n    result = (ones_digit_32 - ones_digit_22) % 10\n    return result\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 18:\n        count += str(page).count('6')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of stickers Sam originally had\n    # Let p be the number of stickers Peter originally had\n    s, p = symbols('s p')\n\n    # Sam had 40 stickers more than Peter:\n    # s = p + 40\n\n    # Sam gave 20% of his stickers to Peter\n    # Sam has s - 0.20 * s = 0.80 * s stickers left\n    # Peter has p + 0.20 * s stickers\n\n    # Peter gave 25% of his stickers (after receiving Sam's) to Sam\n    # Peter has (p + 0.20 * s) - 0.25 * (p + 0.20 * s) = 0.75 * (p + 0.20 * s) stickers left\n    # Sam has 0.80 * s + 0.25 * (p + 0.20 * s) stickers\n\n    # In the end, Sam had 96 stickers more than Peter\n    # 0.80 * s + 0.25 * (p + 0.20 * s) = 0.75 * (p + 0.20 * s) + 96\n\n    # First equation (Sam originally had 40 more stickers than Peter)\n    eq1 = Eq(s, p + 40)\n    # Second equation (Sam had 96 stickers more than Peter after the exchange)\n    eq2 = Eq(0.80 * s + 0.25 * (p + 0.20 * s), 0.75 * (p + 0.20 * s) + 96)\n\n    # Using sympy solve to find the values of s and p\n    solutions = solve((eq1, eq2), (s, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            for die3 in range(1, 7):\n                if die1 != die2 and die1 != die3 and die2 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # From the ratio 4:9 = ?:81, we can cross multiply to find the missing number.\n    # Let the missing number be x. Then we have the equation x/81 = 4/9.\n    # Cross multiplying gives us x * 9 = 81 * 4.\n    x = (81 * 4) / 9\n\n    return int(x)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = 2 * jump_up - slide_down  # Total height gain after every two jumps\n    jumps = 0\n    \n    while total_height > 0:\n        jumps += 2  # As the monkey jumps twice before sliding down\n        total_height -= effective_jump\n        if total_height <= jump_up:  # If the monkey can reach the top in the next jump, add one last jump\n            jumps += 1\n            break\n    \n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    sum = 0\n    for i in range(1, 2014):\n        numerator = (2*i) ** 3\n        denominator = i * (i + 1) * (i + 2)\n        sum += numerator / denominator\n    sum += 1/4026  # Add the last fraction separately\n    return sum\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 16 == 0 and ((i + 1) % 5 == 0) and (int(i**0.5))**2 == i:\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    last_term = 39\n    common_diff = 21 - 15  # Calculate the common difference from the given sequence.\n    next_term = last_term + common_diff  # Calculate the next term by adding the common difference to the last term.\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_mark = -2\n\n    # Let the number of correct answers be x\n    # Then the number of wrong answers is total_questions - x\n    # We can set up the equation based on total marks scored.\n    # Total marks = number of correct answers * marks per correct answer + number of wrong answers * marks per wrong answer\n    # 152 = x * 4 + (80 - x) * (-2)\n    \n    # Solving for x\n    x = (152 + 2 * total_questions) / (correct_mark + abs(wrong_mark))\n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    people = 24\n    sausages = 16\n    # Each person should get an equal fraction of the total sausages\n    fraction_per_person = sausages / people\n    # The least number of cuts is one less than the number of people since each cut\n    # can create only one more piece\n    cuts = sausages * (people // sausages) - 1\n    return cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # RAINBOW has 7 letters\n    total_vowels = 3   # A, I, O are vowels\n    total_consonants = total_letters - total_vowels  # Rest are consonants\n\n    # First, calculate the total permutations of the letters\n    total_arrangements = factorial(total_letters)\n\n    # Now, calculate the number of arrangements where vowels ARE together\n    # We consider all vowels as a single entity, then we have 5 entities (4 consonants + 1 vowel block)\n    # Then rearrange vowels among themselves. Hence we multiply by permutations of vowels.\n    vowels_together = factorial(total_consonants + 1) * factorial(total_vowels)\n\n    # The number of arrangements where vowels are NOT together\n    vowels_not_together = total_arrangements - vowels_together\n    \n    return vowels_not_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of water in Container B\n    x = symbols('x')\n    \n    # Container A initially has 350 more than Container B\n    container_A_init = x + 350\n    \n    # After spilling 500mL, Container A has this amount\n    container_A_after_spill = container_A_init - 500\n    \n    # Container B has twice as much water as Container A after the spill\n    equation = Eq(2 * container_A_after_spill, x)\n    \n    # Now we solve for x\n    initial_amount_B = solve(equation, x)[0]\n    \n    # But we need to return the amount of water in Container A at first\n    initial_amount_A = initial_amount_B + 350\n\n    return initial_amount_A\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    gcd_ab = gcd(51 - 39, 147 - 39)\n    ans = gcd(gcd_ab, 147 - 51)\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle and 5 other team members each said 3 sentences to each other.\n    # This means the conversation was held among 6 people (Lovelle + 5 members).\n    # If each member says 3 sentences to each of the other 5 members, \n    # that would be 3 * 5 sentences per member.\n    \n    # However, since the sentences Lovelle said are also included, we need to exclude them\n    # because it's already given that she said 3 sentences to each of them.\n    # Since 12 members did not speak to Lovelle, those members could not have said anything to\n    # the group of 6.\n    \n    # Let x be the total number of team members.\n    # The 6 members who spoke to each other could not speak to these 12 members,\n    # and thus the count of sentences among them must be excluded as well.\n    # Our equation based on the problem description becomes:\n    # (x-12)*3 sentences were spoken because each of the (x-12) members said 3 sentences\n    # to each of the 6 members who spoke to each other.\n    \n    # Known equations:\n    # Conversations within the group of 6:\n    # (6 members speaking to each other excluding Lovelle's 3 sentences to 5 members) \n    # plus (6 members * 5 members * 3 sentences) equals to the total number of sentences said by the 6. \n    \n    # Assuming each of the 6 members (including Lovelle) spoke to each other, the total sentences are:\n    total_sentences_6_people = 5 * 3 * 6\n    \n    # Deducting Lovelle's sentences since they are already taken into account\n    total_sentences_6_people -= 5 * 3 \n    \n    # Conversations between the group of 6 and other members:\n    # (x - 12 - 6) * 3 * 6 sentences (6 conversations between the rest of the members and the group of 6)\n    # Adding these two equations:\n    # total_sentences_6_people + (x - 18) * 3 * 6 = (x - 12) * 3\n    \n    # Solving the above equation:\n    for x in range(12, 100):  # We expect a reasonable upper limit for team members.\n        if total_sentences_6_people + (x - 18) * 3 * 6 == (x - 12) * 3:\n            ans = x\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3/8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # All page numbers from 1 to 9 use 1 digit, so there are 9 pages using 9 digits.\n    digits_1_9 = 9 * 1\n    \n    # All page numbers from 10 to 99 use 2 digits, so there are 90 pages using 180 digits.\n    digits_10_99 = 90 * 2\n\n    # All page numbers from 100 to 325 use 3 digits,\n    # To find out how many pages are there, subtract 99 (the last page with 2 digits) from 325.\n    pages_100_325 = 325 - 99  \n    digits_100_325 = pages_100_325 * 3\n\n    # Sum all the counted digits.\n    total_digits = digits_1_9 + digits_10_99 + digits_100_325\n\n    return total_digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    forbidden_pairs = [\"TT\"]\n    total_permutations = set(permutations(word))\n    valid_permutations = set()\n    \n    for perm in total_permutations:\n        if all(pair not in ''.join(perm) for pair in forbidden_pairs):\n            valid_permutations.add(perm)\n    \n    count = len(valid_permutations)\n    return count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    \n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n    \n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total in range(1, 1000):  # Iterating through possible total numbers of fruit gums\n        remaining_after_music = total - 2  # Subtract the 2 eaten during Music lesson\n        shared_during_break = remaining_after_music // 3  # Shared one third with friends\n        \n        # Check if the remaining can be divided into equal parts after sharing\n        if (remaining_after_music - shared_during_break) % 4 == 0:\n            return total  # Return the smallest number that satisfies the condition\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sarah, mark = symbols('sarah mark')\n    \n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    round_to_nearest = 10  # We're rounding to the nearest ten\n\n    rounded_number = round(number / round_to_nearest) * round_to_nearest\n\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    return 17 + 18 + 29 + 6\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    result = (2018 - 20 + 18) / 8\n    return result\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The maximum number of attempts will be when the explorer tries all the wrong keys before finding the right one for each chest.\n    # For the first chest, the explorer tries 8 wrong keys before the correct one.\n    attempts_for_first_chest = 8\n    \n    # For the second chest, the explorer has 7 wrong keys left before finding the right one.\n    attempts_for_second_chest = 7\n\n    # For the third chest, the explorer has 6 wrong keys left before finding the right one.\n    attempts_for_third_chest = 6\n\n    # For the fourth chest, the explorer has 5 wrong keys left before finding the right one.\n    attempts_for_fourth_chest = 5\n\n    # The total number of attempts is just the sum of all the attempts.\n    total_attempts = (attempts_for_first_chest +\n                      attempts_for_second_chest +\n                      attempts_for_third_chest +\n                      attempts_for_fourth_chest)\n\n    # However, we have to add the successful attempt for each chest (1 for each chest).\n    total_attempts += 4\n\n    return total_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    ans = 527 * 8\n    return ans\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Notice the pattern alternates by adding and subtracting 500 or 200\n    pattern_diffs = [500, -200]\n    # Start with the first number in the sequence\n    numbers = [2945]\n\n    # Generate the sequence until the number before the missing one\n    for i in range(5):\n        # Calculate the next number based on the pattern\n        next_diff = pattern_diffs[i % 2]\n        next_number = numbers[-1] + next_diff\n        numbers.append(next_number)\n    \n    # The missing number is the one before the last one given in the problem\n    ans = numbers[-2]\n\n    return ans\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    # The sum of squares of the first n odd numbers is given by the formula n*(2n+1)*(2n-1)/3\n    n = (25 + 1) // 2  # number of odd numbers from 1 to 25\n    ans = n * (2 * n + 1) * (2 * n - 1) // 3\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1 / 7\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining variables for the number of women and men\n    women, men = symbols('women men')\n\n    # Creating equations based on the problem description\n    equation1 = Eq(women, 4 * men)  # 4 times as many women as men\n    equation2 = Eq(2 * women + 5 * men, 182)  # Total cupcakes eaten\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n\n    # Returning the number of women\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    number_of_coins = 11\n    diameter_of_each_coin = 1.85\n\n    total_length = (number_of_coins - 1) * diameter_of_each_coin + diameter_of_each_coin\n\n    return total_length\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour\n    # Let y be the number of mushrooms gathered in the second hour\n    # The total number of mushrooms gathered in two hours is 40, so x + y = 40\n    # If he could have gathered 26 more mushrooms in the first hour,\n    # then x + 26 would be equal to y, so x + 26 = y\n    # By substituting y from the second equation into the first equation, we have x + (x + 26) = 40\n    # By solving this equation for x, we get 2x + 26 = 40, so 2x = 40 - 26, so x = (40 - 26) / 2\n    x = (40 - 26) // 2\n    # Now we can find y by substituting x back into the equation x + y = 40\n    y = 40 - x\n    # y is the number of mushrooms gathered in the second hour\n    return y\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    common_difference = second_term - first_term\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Cross multiply to find the value of the square\n    ans = (3 * 20) / 12\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    # There are 8 people, but since the table is circular, we fix one person\n    # and then arrange the remaining 7 people around the table.\n    # This is a circular permutation problem.\n    number_of_people = 8\n    ans = factorial(number_of_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    difference = night_temp - morning_temp\n    \n    return difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Calculate the last digit of 2^2017\n    last_digit_2 = pow(2, 2017, 10)\n    \n    # Calculate the last digit of 3^2017\n    last_digit_3 = pow(3, 2017, 10)\n    \n    # Multiply the last digits and find the last digit of the product\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of ants in the kitchen\n    x = symbols('x')\n\n    # Equation representing the final number of ants\n    equation = Eq(x - 3/4*x - 2/5*(1/4*x) + 185, 2*x)\n\n    # Solve for x\n    ants_original = solve(equation, x)\n\n    return ants_original[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n    total_cost = book_cost * (books_first_day + books_second_day)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import solve, symbols\n\n    # Let's denote the first term as \"a\" and the common difference as \"d\".\n    a, d = symbols('a d')\n\n    # We can express the sum of the first four terms (S1) as: a + (a + d) + (a + 2d) + (a + 3d)\n    S1 = a + (a + d) + (a + 2*d) + (a + 3*d)\n\n    # We can also express the sum of the last four terms (S2) as: (a + 4d) + (a + 5d) + (a + 6d) + (a + 7d)\n    S2 = (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d)\n\n    # According to the question, the sum of the last four terms is 32 greater than the sum of the first four terms.\n    equation = Eq(S2, S1 + 32)\n\n    # Now, we need to find the common difference \"d\".\n    # We can ignore the value of \"a\" for the moment, since we are just interested in \"d\".\n    common_difference = solve(equation, d)[0]\n\n    return common_difference\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    current_term = 49\n    next_term = (int(current_term ** 0.5) + 1) ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    num_friends = 42\n    total_pens = pens_per_friend * num_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(n):\n        return (n * 2 + 4) % 100\n\n    current_number = 1\n    for i in range(2021):\n        current_number = next_number(current_number)\n    \n    return current_number\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import primerange\n\n    # Generate a list of prime numbers less than 41 (since 3a + 7b must be less than 41)\n    primes = list(primerange(1, 41))\n\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    halfway = (4.5 + 10.3) / 2\n    return halfway\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import gcd\n\n    # Calculate least common multiple (lcm) using gcd\n    lcm = (4 * 6) // gcd(4, 6)\n\n    # The lights will flash together every (lcm) seconds\n    # Since both lights start at the same instant, we include the first instant\n    # and add 1 to include the last instant in the total count.\n\n    # There are 60 minutes in an hour, each minute is 60 seconds\n    # so, 60 * 60 = 3600 total seconds in one hour.\n    # We divide 3600 by the time they flash together to know how many times\n    # they will flash at the same instant.\n\n    flashes_in_hour = (3600 // lcm) + 1\n\n    return flashes_in_hour\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percentage = 30\n\n    # Calculate the cost price based on the profit made (profit_percentage)\n    cost_price = sale_price / (1 + profit_percentage / 100)\n\n    # Calculate the new profit percentage if the profit is $5000\n    new_profit_percentage = (5000 / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (1 - 3/5)\n    water_volume_per_bottle = total_volume_per_bottle * (3/5)\n    total_water_for_6_bottles = water_volume_per_bottle * 6\n    return total_water_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "def solution():\n    from math import factorial\n\n    num_letters = len('EARTH')\n    num_arrangements = factorial(num_letters)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Distance covered by Simon before realizing his book is at school.\n    simon_initial_distance = 150 * 10\n    \n    # Simon now runs back to school at twice his original speed.\n    simon_speed_back = 150 * 2\n    \n    # Time taken for Simon to run back to school.\n    simon_time_back = simon_initial_distance / simon_speed_back\n    \n    # Distance covered by Simon's friend when Simon reaches the school again.\n    friends_distance = 200 * (10 + simon_time_back)\n    \n    # Since they are walking in opposite directions, we only need to take \n    # Simon's friend's distance to find how far they are when Simon reaches the school.\n    return friends_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 5):\n        if int(p[0]) * int(p[1] + p[2] + p[3] + p[4]) == int(p[1] + p[2] + p[3] + p[0]):\n            return int(p[0]) * int(p[1] + p[2] + p[3] + p[4])\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    # There are 7 decorations in total (2 bells, 2 stars, 2 red balls, 1 green ball)\n    total_decorations = 7\n    # There are 3 pairs of identical items\n    identical_pairs = 2\n    \n    # Calculate the number of permutations for all different items\n    total_permutations = factorial(total_decorations)\n    # Since there are items that are identical, divide by the factorial of the number of those identical items\n    for _ in range(identical_pairs):\n        total_permutations //= factorial(2)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    original_volume = 5  # The original volume of water in the dispenser in litres\n    container_ratio = 0.25  # The ratio of the other container's size to the dispenser\n    cup_volume_ml = 150  # The volume of each cup in milliliters\n    number_of_cups = 14  # The number of cups filled\n    ml_to_litres = 1000  # Conversion factor from milliliters to litres\n\n    # Calculate the volume taken by the other container in litres\n    container_volume = original_volume * container_ratio\n\n    # Calculate the total volume taken by the cups in litres\n    cups_total_volume_l = (cup_volume_ml * number_of_cups) / ml_to_litres\n\n    # Calculate the remaining water in the dispenser\n    remaining_water = original_volume - (container_volume + cups_total_volume_l)\n\n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    return count_derangements(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"2{i}{j}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "from itertools import combinations\n\ndef solution():\n    # Define the time taken by each person to cross the bridge\n    times = [1, 2, 5, 10]\n\n    def find_fastest_pair(crossed):\n        # Find the fastest two people on the current side\n        return min((time, people) for people in combinations(crossed, 2) for time in [max(people)])\n\n    def bridge_crossing(crossed, uncrossed, time_taken):\n        # If everyone has crossed, return the time taken\n        if not uncrossed:\n            return time_taken\n\n        # If there is only one person left on the initial side, they cross over with the flashlight\n        if len(uncrossed) == 1:\n            return time_taken + uncrossed[0]\n\n        # Send two fastest from the uncrossed side\n        fastest_cross_time, fastest_crossers = find_fastest_pair(uncrossed)\n        new_uncrossed = [person for person in uncrossed if person not in fastest_crossers]\n        new_crossed = crossed + list(fastest_crossers)\n        # One person returns with the flashlight\n        return_time, returner = find_fastest_pair(new_crossed)\n        new_crossed.remove(returner)\n        new_uncrossed.append(returner)\n        # Recursively find the next move\n        return bridge_crossing(new_crossed, sorted(new_uncrossed), time_taken + fastest_cross_time + return_time)\n\n    # Initially, no one has crossed and everyone is on the original side\n    crossed, uncrossed = [], sorted(times)\n    time_taken = 0\n\n    return bridge_crossing(crossed, uncrossed, time_taken)\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let p represent the number of pages Anny writes per day at the original rate\n    # Let t represent the total number of pages Anny needs to finish\n\n    # From the problem, we have two equations:\n    # p * 8 = t (because she finishes in 8 days at the original rate)\n    # (p + 2) * (8 - 2) = t (because she finishes 2 days earlier, writing 2 more pages a day)\n\n    # Now, we can solve for p and t with the given equations\n    from sympy import symbols, Eq, solve\n\n    p, t = symbols('p t')\n    equation1 = Eq(p * 8, t)\n    equation2 = Eq((p + 2) * 6, t)\n\n    solutions = solve((equation1, equation2), (p, t))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking bread\n    pip_rate = 5 / 20  # loaves per minute\n    # Bud's rate of baking bread\n    bud_rate = 3 / 15  # loaves per minute\n\n    # Total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * 40\n    # Total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * 40\n\n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n\n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Last year, the house's value after a 10% increase was 11,000 pounds,\n    # which means before the increase, the house's value was 11,000 / 1.1.\n    original_value_last_year = 11000 / 1.1\n    \n    # This year, the house loses 10% of its value, so it's 90% of last year's original value.\n    value_this_year = original_value_last_year * 0.9\n    \n    # The profit or loss compared to the original price two years ago is the difference\n    # between this year's value and the original value two years ago.\n    # Since the original value last year is already calculated as the value \n    # before a 10% increase, we can use it directly as the original price two years ago.\n    profit_or_loss = value_this_year - original_value_last_year\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To guarantee a pair of white socks, he could pick all the red and black socks first\n    max_red_black_socks = 10 + 10  # Maximum red and black socks\n    # Then he needs at most 2 white socks to make sure he gets a pair of white\n    max_white_socks = 2  \n\n    # The total maximum number of socks he must take to guarantee a pair of white socks\n    total_socks = max_red_black_socks + max_white_socks\n    \n    return total_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # a can be any non-zero value, since we're only simplifying\n    expr = (12 * a) / 4 + (2 * a) * 5\n    ans = expr\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n    ans = simplify(expression)\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from fractions import Fraction\n\n    # The fractions of the cookies Richard ate\n    morning_fraction = Fraction(3, 8)\n    afternoon_fraction = Fraction(1, 6)\n\n    # The fraction of the cookies Richard is left with\n    remaining_fraction = 1 - morning_fraction - afternoon_fraction\n\n    # The number of cookies left\n    cookies_left = 33\n\n    # Calculate the original number of cookies before Richard ate them\n    original_cookies = cookies_left / remaining_fraction\n\n    return original_cookies\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemma_num = symbols('jemma_num')\n\n    equation = Eq((jemma_num + 3) * 5, 35)\n\n    ans = solve(equation, jemma_num)\n\n    return ans[0]\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 5)  # 5th May 2023\n    end_date = datetime(2023, 6, 7)    # 7th June 2023\n\n    # Find the first Sunday after start_date\n    days_to_sunday = (6 - start_date.weekday() + 7) % 7\n    if days_to_sunday == 0:\n        days_to_sunday = 7\n    first_sunday = start_date + timedelta(days=days_to_sunday)\n\n    # Calculate the number of Sundays between the first_sunday and end_date\n    num_sundays = ((end_date - first_sunday).days // 7) + 1\n\n    return num_sundays\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # Generate the sequence according to the given pattern\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n    \n    # Find the median of the sequence\n    # The median is the middle element in an ordered list.\n    # If the list has an odd number of elements, the median is the middle one.\n    # If the list has an even number of elements, the median is the average of the two middle ones.\n    # Since we stop before the first 10 appears, we only consider numbers 1 through 9.\n    # Sorting is not necessary as the sequence is already in order.\n    n = len(sequence)\n    middle = n // 2\n    if n % 2 == 1:\n        # If odd, return the middle element\n        ans = sequence[middle]\n    else:\n        # If even, return the average of the two middle elements\n        ans = (sequence[middle - 1] + sequence[middle]) / 2\n    \n    return ans\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the original number of red marbles and y be the original number of white marbles\n    # Let r be the number of red marbles added by Pip and w be the number of white marbles added by Bud\n    x, y, r, w = symbols('x y r w')\n\n    # initial ratio of red to white marbles is 3:2\n    initial_ratio = Eq(3*y, 2*x)\n    # After Pip adds red marbles, ratio becomes 5:3\n    after_pip_ratio = Eq(5*y, 3*(x + r))\n    # After Bud adds white marbles, ratio becomes 5:4\n    after_bud_ratio = Eq(5*(y + w), 4*(x + r))\n    # Bud adds 100 more marbles than Pip\n    bud_pip_marbles = Eq(w, r + 100)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, after_pip_ratio, after_bud_ratio, bud_pip_marbles), (x, y, r, w))\n\n    # The solution for the number of white marbles at first\n    return solutions[y]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n\n    num_buckets = total_litres // bucket_capacity\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40 # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for k in range(10):\n        number = int(f\"5{k}27{k}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return k\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n    equation1 = Eq(cookies / brownies, 4/3)\n    equation2 = Eq(cookies / (brownies - 6), 12/7)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # 4 construction companies can build 900 m in 5 days\n    # 1 construction company can build 900 m in 5 * 4 days\n    # Hence, the rate of one construction company is 1 / (5 * 4) of 900 m per day\n    company_rate = 900 / (5 * 4)\n    \n    # 6 construction companies will have a combined rate of 6 times the individual rate\n    combined_rate = 6 * company_rate\n    \n    # Time required for 6 construction companies to build 5400 m\n    time_required = 5400 / combined_rate\n    \n    return time_required\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    initial_cost = 10\n    first_sale = 20\n    second_cost = 30\n    second_sale = 40\n\n    profit = (first_sale - initial_cost) + (second_sale - second_cost)\n\n    return profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    # Calculate the price per ticket that Adam spent\n    price_per_ticket = adam_spent / adam_tickets\n\n    # Now we can calculate how many tickets Claire bought\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term = 10\n    tenth_value = 25\n    common_difference = 28 - 25\n\n    first_value = tenth_value - (term - 1) * common_difference\n    return first_value\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    total_sum = sum(range(1, 9))  # Sum of numbers 1 through 8\n    player_one_sum = 23\n    player_two_sum = total_sum - player_one_sum\n    cards = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    # Find the highest card player two could have\n    for highest_card in reversed(cards):\n        if highest_card < player_two_sum - sum(cards[-4:]):\n            break\n        player_two_cards_sum = player_two_sum - highest_card\n        # Check if it's possible to pick 3 cards that sum up to player_two_cards_sum\n        # without using the highest_card we subtracted\n        for i in cards:\n            if i == highest_card:\n                continue\n            for j in cards:\n                if j == i or j == highest_card:\n                    continue\n                for k in cards:\n                    if k in [i, j, highest_card]:\n                        continue\n                    if i + j + k == player_two_cards_sum:\n                        return highest_card\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # Total number of individual shoes\n    time_per_shoe = 2  # Time to clean one shoe in minutes\n    cobblers = 2  # Number of cobblers\n\n    # Since they work simultaneously, the time is divided by the number of cobblers\n    total_time = (total_shoes * time_per_shoe) / cobblers\n\n    return total_time\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n    correct_mark = 4\n    wrong_mark = -1\n    \n    # Let's say all attempted questions were correct\n    max_score = attempted * correct_mark\n    \n    # Difference between the maximum possible score and the actual score\n    difference = max_score - total_score\n    \n    # Since each wrong answer reduces the score by 5 (4 for the correct answer not gained and 1 for the penalty),\n    # the number of wrong questions can be found by dividing the difference by 5.\n    wrong_questions = difference // (correct_mark - wrong_mark)\n    \n    # Therefore, the number of correct questions is the total attempted minus the wrong questions.\n    correct_questions = attempted - wrong_questions\n    \n    return correct_questions\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n    return dumplings_to_give\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_odd = sum(range(1, 20, 2))\n    return sum_odd\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    cookies = 118\n    per_packet = 7\n\n    packets_needed = (cookies + per_packet - 1) // per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 4):\n        b, d, e, c = p\n        cbcd = int(c+b+c+d)\n        cdbc = int(c+d+b+c)\n        bdec = int(b+d+e+c)\n        if cbcd + cdbc == bdec and len(set(p)) == 4:\n            return bdec\n            \nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "from math import lcm\n\ndef solution():\n    packs = [6, 8, 9, 15]\n    least_common_multiple = lcm(*packs)\n    min_markers = least_common_multiple\n    while min_markers < 1000:\n        min_markers += least_common_multiple\n    return min_markers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    players = 6\n    handshakes = comb(players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    word = \"CHALLENGE\"\n    vowels = \"AEE\"\n    num_vowels = len(vowels)\n    num_consonants = len(word) - num_vowels\n\n    # Count the vowels as one single letter first\n    total_letters = num_consonants + 1\n\n    # Calculate the permutations of all letters considering the vowels as one\n    all_permutations = factorial(total_letters)\n\n    # Calculate the permutations of the vowels among themselves\n    vowel_permutations = factorial(num_vowels) // factorial(vowels.count('E'))\n\n    # Multiply to get total permutations where vowels are together\n    total_ways = all_permutations * vowel_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_tailor_per_day = 2\n    number_of_tailors = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_tailor_per_day * number_of_tailors * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    from January_to_March = 3 * 450\n    from_April_to_July = 4 * 350\n    from_August_to_October = 1250\n    from_November_to_December = 2 * 400\n\n    total_spend = (from January_to_March + from_April_to_July + \n                   from_August_to_October + from_November_to_December)\n\n    average_per_month = total_spend / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    # Calculate the total sales from each type of cake\n    total_carrot_cake_sales = 4 * 5\n    total_cheesecake_sales = 1 * 10\n    total_chocolate_cake_sales = 5 * 12\n\n    # Calculate the total revenue from all cakes\n    total_revenue = total_carrot_cake_sales + total_cheesecake_sales + total_chocolate_cake_sales\n\n    # Calculate the total number of cakes\n    total_cakes = 4 + 1 + 5\n\n    # Calculate the average selling price per cake\n    average_selling_price = total_revenue / total_cakes\n\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    divisor_quotient = 1  # Start by assuming the quotient (and thus the divisor) is 1\n    while True:\n        dividend = divisor_quotient ** 2 + 7  # Dividend is the square of the divisor plus the remainder\n        if dividend // divisor_quotient == divisor_quotient and dividend % divisor_quotient == 7:\n            break\n        divisor_quotient += 1  # Increment the divisor (and quotient) to check the next possibility\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, (4/3) * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    equation3 = Eq(cars + bikes + lorries % 2, 0)\n\n    # Iterate through possible number of lorries until find a solution that meets criteria.\n    for lorries_count in range(1, 100):\n        # Solve the symbolic equations for the current number of lorries\n        solutions = solve((equation1, equation2.subs(lorries, lorries_count)), (cars, bikes))\n\n        # If the solutions are valid and total is even and less than 100, return the solution\n        total_vehicles = solutions[cars] + solutions[bikes] + lorries_count\n        if total_vehicles < 100 and total_vehicles % 2 == 0:\n            return solutions[cars], solutions[bikes], lorries_count\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    difference = 2\n    row_number = 12\n\n    # Formula to find the nth term of an arithmetic progression: a_n = a_1 + (n - 1)d\n    seats_12th_row = first_row_seats + (row_number - 1) * difference\n\n    return seats_12th_row\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    num_days = total_pages // pages_per_day\n    if total_pages % pages_per_day != 0:\n        num_days += 1\n\n    return num_days\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n\n    total_visitors_16_min = visitors_per_minute * 16\n    check_in_rate_1_entrance = check_in_per_entrance_per_minute * 1\n\n    remaining_visitors_after_16_min = total_visitors_16_min - check_in_rate_1_entrance * 16\n\n    # With 2 entrances\n    check_in_rate_2_entrances = check_in_per_entrance_per_minute * 2\n    time_until_no_line_with_2_entrances = remaining_visitors_after_16_min / check_in_rate_2_entrances\n\n    # Since there were no visitors after 16 min with one entrance, we calculate only the remaining time needed\n    return time_until_no_line_with_2_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 245\n    cube_root = p ** (1/3)\n    if cube_root.is_integer():\n        ans = 1\n    else:\n        for i in range(1, p + 1):\n            if (p * i) ** (1/3) % 1 == 0:\n                ans = i\n                break\n\n    return ans\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.10\n    remaining_after_book = initial_money - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # The decimal part of 1/3 is repeating \"3\"s\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_doubled = final_number - added_number\n    original_number = original_doubled / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_progress = 5\n    night_regress = 3\n    net_progress = day_progress - night_regress\n    burrow_depth = 16\n    total_progress = 0\n    days = 0\n\n    while total_progress < burrow_depth:\n        days += 1\n        total_progress += day_progress\n        if total_progress >= burrow_depth:\n            break\n        total_progress -= night_regress\n    \n    return days\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_rate = 0.10\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    num_burgers = 2\n    num_sides = 3\n    num_drinks = 5\n    \n    combos = num_burgers * num_sides * num_drinks\n    \n    return combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits, and each student can choose from 1 to 3 types.\n    # So, there are 2^3 - 1 non-empty subsets of fruit choices (since we subtract\n    # the empty set, which is not a valid choice).\n    subsets = 2**3 - 1\n    \n    # By the Pigeonhole Principle, if we have n students where n equals the number of possible \n    # non-empty subsets of choices, then the (n+1)th student will necessarily choose a subset \n    # that has already been chosen by one of the previous n students.\n    # Therefore, to ensure that there are two students who choose the same set of fruits, \n    # we need one more student than the number of subsets.\n    students_needed = subsets + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let x be the original number of oranges\n    # Let y be the original number of lemons\n    # According to the problem, the ratio of the number of oranges to the number of lemons was 3:5\n    # So we have the proportion 3/5 = x/y\n\n    # After 48 oranges were sold, the ratio became 1:2, which gives us the new proportion\n    # 1/2 = (x-48)/y\n\n    # Solving the system of equations:\n    # 3y = 5x (from the first proportion)\n    # 2(x - 48) = y (from the second proportion)\n\n    # Replace y from the first equation into the second equation:\n    # 2(x - 48) = 3y/5\n    # 10(x - 48) = 3y\n    # Plug y from the first equation to the second equation (y = 5x/3):\n    # 10(x - 48) = 3(5x/3)\n    # 10x - 480 = 5x\n    # 5x = 480\n    # x = 96\n\n    # Now find y using the first ratio\n    # 3y = 5x\n    # y = (5/3)x\n    # y = (5/3)*96\n    y = (5/3) * 96\n\n    return y\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent, which is one-quarter\n    total_money = spent * 4  # To find the total, multiply by 4\n    return total_money\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    a = 45\n    b = 75\n    c = 210\n\n    # Calculate the Greatest Common Divisor (GCD) of the three numbers\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    ages = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return ages[years_ago]\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Define the number of legs for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n    \n    # Count legs of ducks, parrots, and the rabbit\n    existing_legs = 3 * duck_legs + 2 * parrot_legs + 1 * rabbit_legs\n    \n    # Subtracting the existing animal legs from the total number of legs will give us the number of cat legs\n    cat_legs = 32 - existing_legs\n    \n    # Since each cat has 4 legs, divide the cat legs by 4 to find out how many cats Jessica has\n    num_cats = cat_legs // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    teams = 11\n\n    # Calculate the number of matches in a single round-robin tournament\n    # where every two teams play against each other once\n    matches = comb(teams, 2)\n\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    inner_result = phi(8, 3)\n    ans = phi(4, inner_result)\n    \n    return ans\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the current age of the younger brother, and y represent the current age of the older brother.\n    x, y = symbols('x y')\n\n    # When the older brother was the same age as the younger brother's current age, the younger brother was 12.\n    equation1 = Eq(y - x, 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27.\n    equation2 = Eq(x, y - (27 - y))\n\n    # Solving the system of equations\n    solution = solve((equation1, equation2), (x, y))\n\n    # The current age of the older brother is the value of y\n    return solution[y]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 2**3 * 3**2 * 5  # Least Common Multiple of 6, 8, 9 and 15\n    min_markers = (1000 // lcm) * lcm\n    if min_markers < 1000:\n        min_markers += lcm\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    rooms = symbols('rooms')\n    # Let's denote x as the number of rooms\n    # If there are 4 people in each room, 40 students don't have dormitories\n    # It means total students = 4 * rooms + 40\n    # If there are 6 people in each room, 24 beds will be vacated\n    # It means total students = 6 * rooms - 24\n    # So we have the equation 4 * rooms + 40 = 6 * rooms - 24\n    equation = Eq(4 * rooms + 40, 6 * rooms - 24)\n    solutions = solve(equation, rooms)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n    \n    n = 102\n    first_term = tenth_term - common_difference * (10 - 1)\n    \n    nth_term = first_term + common_difference * (n - 1)\n    \n    return nth_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    eaten_sweets = 18\n    total_sweets = eaten_sweets / eaten_fraction\n    sweets_left_over = total_sweets - eaten_sweets\n    \n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    # Calculate the difference in age between Jane and John\n    age_difference = 9 - 5\n    \n    # Jane's age when John is that same age difference older\n    john_age_when_jane_is_15 = 15 - age_difference\n    \n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    # Define the range based on the question.\n    lower_bound = 10\n    upper_bound = 20\n\n    # Define the given multiple and factor constraints.\n    multiple_of = 4\n    factor_of = 36\n\n    # Loop through the range to find the number that satisfies the conditions.\n    for number in range(lower_bound, upper_bound + 1):\n        if number % multiple_of == 0 and factor_of % number == 0:\n            return number\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.80\n    loss = cost_price - selling_price\n    \n    equation = Eq(loss, 40)\n    \n    result = solve(equation, cost_price)\n    \n    return result[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    pupils_apples = 20\n    pupils_strawberries = 30\n    pupils_both = 10\n    pupils_neither = 5\n\n    total_pupils = (pupils_apples + pupils_strawberries - pupils_both) + pupils_neither\n\n    return total_pupils\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of markers Xuanrui and Yaokuan have\n    x, y = symbols('x y')\n\n    # Setup the equation based on the problem statement\n    equation1 = Eq(x + y, 708)  # Xuanrui and Yaokuan had $708 markers altogether\n    equation2 = Eq(x - 532, y - (3/7)*y)  # After the given transactions, they have the same amount\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of markers Xuanrui had at first\n    return solutions[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percentage = 12\n    discount_amount = usual_price * (discount_percentage / 100)\n    final_price = usual_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let x be the part of the tank filled by Tap X in 1 minute\n    # Let y be the part of the tank filled by Tap Y in 1 minute\n\n    # As given, Tap X alone fills the tank in 10 minutes\n    x = 1 / 10\n\n    # Together, both taps fill the tank in 6 minutes\n    # So, in 1 minute, both taps fill 1/6 of the tank\n    xy = 1 / 6\n\n    # Using the Inclusion-Exclusion principle to find the part filled by Tap Y alone\n    # (Part filled by both) = (Part filled by Tap X) + (Part filled by Tap Y)\n    y = xy - x\n\n    # Time taken by Tap Y alone to fill the tank is the reciprocal of y\n    time_y = 1 / y\n\n    return time_y\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_points * correct_answers + \n            incorrect_points * incorrect_answers) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([1, 1*2, 1*2*3, 1*2*3*4, 1*2*3*4*5, 1*2*3*4*5*6, 1*2*3*4*5*6*7, 1*2*3*4*5*6*7*8])\n    return factorial_sum % 100\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Volume of Cup A\n    vol_A = 300\n    # Sugar concentration in Cup A\n    conc_A = 20 / 100\n    \n    # Volume of Cup B\n    vol_B = 300\n    # Sugar concentration in Cup B\n    conc_B = 30 / 100\n    \n    # Calculate total sugar in the mixed solution\n    total_sugar = (conc_A * vol_A) + (conc_B * vol_B)\n    \n    # Calculate total volume of the mixed solution\n    total_volume = vol_A + vol_B\n    \n    # Calculate the sugar concentration in the mixed solution\n    mixture_concentration = total_sugar / total_volume\n    \n    return mixture_concentration * 100  # multiply by 100 to get percentage\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    total_marbles = 1442\n    \n    # Ahmad has 6 times as many marbles as Ryan\n    equation1 = Eq(ahmad, 6 * ryan)\n    # Together they have 1442 marbles\n    equation2 = Eq(ahmad + ryan, total_marbles)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    # Calculating how many marbles Ahmad must give to Ryan for them to have an equal number\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    pound_to_dollar = 2.50\n    pounds = dollars / pound_to_dollar\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    for two_dollar_notes in range(1, 96):\n        ten_dollar_notes = 95 - two_dollar_notes\n        total_two_dollar_notes = two_dollar_notes + 5 * ten_dollar_notes\n        if total_two_dollar_notes == 175:\n            return two_dollar_notes\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n\n    total_carriage_length = total_length - head_length\n    carriage_with_gap_length = carriage_length + gap_length\n    \n    num_carriages = total_carriage_length // carriage_with_gap_length + 1 # Include the head of the train\n    \n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Digit '8' in the ones place\n    ones_place = sum(1 for i in range(1, 289) if '8' in str(i)[-1])\n\n    # Digit '8' in the tens place\n    tens_place = sum(1 for i in range(1, 289) if '8' in str(i)[-2:-1])\n\n    # Digit '8' in the hundreds place\n    hundreds_place = sum(1 for i in range(1, 289) if '8' in str(i)[-3:-2])\n\n    # Total appearances of '8'\n    ans = ones_place + tens_place + hundreds_place\n\n    return ans\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct  # total questions minus correctly answered questions\n        score = correct * 2 - wrong\n        if score == 82:\n            return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24 * x - 25 * y, 8)\n    solutions = solve(equation, (x, y))\n\n    # Since we want the smallest value of x, we sort the solutions and select the first\n    smallest_x = min(solutions, key=lambda sol: sol[x])[x]\n\n    return smallest_x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):       # x can be any digit from 1 to 9\n        for y in range(10):      # y can be any digit from 0 to 9\n            A = 10 * x + y       # Calculate the value of A (xy)\n            B = 20 * x + y       # Calculate the value of B (2xy)\n            if B == 6 * A + 25:  # Check the given condition\n                return A         # Return the value of A if condition is met\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n    \n    discounted_price = original_price * (1 - discount)\n    final_price = discounted_price * (1 + increase)\n    \n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for each bag\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n\n    # Compare and determine which is better value\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        ans = \"2.5kg bag of carrots costing £5\"\n    else:\n        ans = \"4kg bag of carrots costing £7.70\"\n    \n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    cost_per_book = 4.50\n    number_of_books = 5\n    total_cost = cost_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    length_of_road = 60\n    interval = 10\n\n    # Calculate trees on one side\n    trees_one_side = (length_of_road // interval) + 1\n\n    # Since trees are on both sides, the total number is twice the amount\n    total_trees = 2 * trees_one_side\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses * bus_length) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    incorrect_eq = Eq(x/4 - 25, 2021)\n    x_value = solve(incorrect_eq, x)[0]\n\n    correct_eq = x_value*4 + 25\n    return correct_eq\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    one_fourth_full_mass = 250\n    three_fourth_full_mass = 350\n\n    # Let's call the mass of an empty jar E and the mass of Marmite needed to make the jar full M.\n    # Therefore, when the jar is 1/4 full, the mass is E + 1/4 * M = 250g\n    # And when the jar is 3/4 full, the mass is E + 3/4 * M = 350g\n    # We can set these equalities as equations:\n    # E + 1/4 * M = 250\n    # E + 3/4 * M = 350\n\n    # Now we can subtract the first equation from the second to eliminate E and solve for M.\n    # (E + 3/4 * M) - (E + 1/4 * M) = 350 - 250\n    # 3/4 * M - 1/4 * M = 100\n    # 1/2 * M = 100\n    # M = 200\n\n    # Now that we have M, we can plug it back into the first equation to solve for E.\n    # E + 1/4 * 200 = 250\n    # E + 50 = 250\n    # E = 250 - 50\n    # E = 200g\n\n    M = 200\n    E = one_fourth_full_mass - (1/4 * M)\n\n    return E\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    proportion = 5 / 3\n    x_value = 5\n    y_value = (x_value / 5) * 3\n    ans = (proportion, y_value)\n    return ans\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        if ((m ** 2) + 5 + 18) ** 0.5 % 1 == 0:\n            original_count = (m ** 2) + 5\n            break\n        m += 1\n    return original_count\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let the first two numbers of the sequence be a and b.\n    # Consequently, the sequence looks like this: a, b, a+b, 2a+3b, 3a+5b, 5a+8b, ...\n    # Given that the 4th number is 6 and the 6th number is 15, we have:\n    # 2a+3b = 6\n    # 5a+8b = 15\n\n    # Now we need to solve for a and b (the first two numbers in the sequence)\n    from sympy import symbols, solve\n\n    a, b = symbols('a b')\n    equations = (2*a + 3*b - 6, 5*a + 8*b - 15)\n    solutions = solve(equations, (a, b))\n\n    # Now that we have a and b, we can find the 7th number in the sequence:\n    # It will be the sum of the 5th and 6th numbers: (3a+5b) + (5a+8b)\n    a_value = solutions[a]\n    b_value = solutions[b]\n    seventh_number = (3*a_value + 5*b_value) + (5*a_value + 8*b_value)\n\n    return seventh_number\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    discounted_price = selling_price * 0.90  # 10% Christmas discount\n    profit = discounted_price - cost_price  # profit calculation\n    return profit\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    gcf = gcd(students_A, gcd(students_B, students_C))\n\n    return gcf\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time_minutes = 5 * 60  # Convert 5 p.m. to minutes\n    total_activity_time = 45 + 30  # Total activity time in minutes\n    end_time_minutes = start_time_minutes + total_activity_time  # Calculate end time in minutes\n\n    end_hour = end_time_minutes // 60  # Convert minutes back to hours\n    end_minute = end_time_minutes % 60  # Get the remaining minutes\n\n    # Format time to return in standard 12-hour format\n    return f\"{end_hour % 12 or 12}:{str(end_minute).zfill(2)} {'p.m.' if end_hour < 12 or end_hour >= 24 else 'a.m.'}\"\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # The total sum for the average of 25 with 3 numbers\n    total_sum_original = 3 * 25\n    \n    # The total sum for the average of 22 after changing one number to 16\n    total_sum_after = 3 * 22\n    \n    # The difference is the original number that got changed to 16\n    original_number = total_sum_original - (total_sum_after - 16)\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    not_attempted = 1\n    rex_score = 66\n\n    # Assume Rex got x questions correct, (24 - x) incorrect, 1 not attempted.\n    # Equation to calculate Rex's score: 4x - 2(24 - x) = 66\n    x = symbols('x')\n    equation = Eq(points_for_correct * x - points_for_incorrect * (total_questions - not_attempted - x), rex_score)\n\n    correct_answers = solve(equation, x)[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls # Since there are 36 students in total\n    \n    # total scores from girls + total scores from boys = total score of the class\n    equation = Eq(girls * 88 + boys * 91, 36 * 89)\n    \n    number_of_girls = solve(equation, girls)[0]\n    return number_of_girls\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    total_weight = 800 + 200 + 300\n    total_sugar = 800 * 0.05 + 200 * 0.3 + 300 * 0.1\n    concentration = total_sugar / total_weight\n\n    return concentration * 100  # converting to percentage\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens  # 4 times the number of black pens\n    green_pens = 2 * black_pens  # 2 times the number of black pens\n    total_pens = blue_pens + black_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import permutations\n\ndef solution():\n    # There are 5 possible vertices each vertex can connect to, making a total of 8C2 = 28 edges.\n    # A 3D shape cannot have all of its vertices connected, as this would create a plane, not a 3D shape.\n    # Hence the maximum number of edges that can be achieved while still having a 3D shape is 27.\n    # We need to count the permutations of edges (choosing 11 from 27) that will form a 3D shape.\n    # This is a combinatorial problem, where we use combinations to calculate.\n    count = 0\n    edges = [i for i in range(1, 28)]\n    for combo in permutations(edges, 11):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, gill = symbols('andrew gill')\n    \n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_in_first = 0.35 * 20\n    fruit_juice_in_second = 0.60 * 30\n    total_fruit_juice = fruit_juice_in_first + fruit_juice_in_second\n    concentration_percent = (total_fruit_juice / total_volume) * 100\n    return concentration_percent\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of badges made initially be x\n    badges_initial = symbols('badges_initial')\n\n    # She sold 5/7 of x on the first day\n    # Remaining badges after first day = x - 5/7 * x = 2/7 * x\n    # She sold 1/3 of the remaining badges on the second day\n    # Badges remaining after second day = 2/7 * x - 1/3 * 2/7 * x = 2/7 * x - 2/21 * x = 4/21 * x\n    # She made an additional 354 badges\n    # Total badges after making more = 4/21 * x + 354\n    # In the end, she had 3 times the number of badges she made at first\n    # Final equation: 3 * x = 4/21 * x + 354\n\n    equation = Eq(3 * badges_initial, 4/21 * badges_initial + 354)\n    solution = solve(equation, badges_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # There are 4 people in a knockout tournament.\n    # In each round, half of the players are eliminated.\n    # For 4 people, the number of rounds will be log2(4) = 2.\n    # It's exactly the same as the binary representation digit of the players.\n    \n    from math import log2\n    \n    players = 4\n    rounds = log2(players)\n    \n    return int(rounds)\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    devil = \"Devil\"\n    password = \"\"\n\n    for char in devil:\n        if char in angel_to_number:\n            password += angel_to_number[char]\n        else:\n            return False  # If any char in 'Devil' is not in 'Angel', Andy cannot unlock it\n\n    return password\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    smallest_number = None\n    # The smallest digit to consider is 3 since 7 - 4 = 3\n    # The largest digit to consider is 7 since we are looking for the smallest number with 7\n    for digit1 in range(3, 8):\n        for digit2 in range(3, 8):\n            for digit3 in range(3, 8):\n                num = f\"{digit1}{digit2}{digit3}\"\n                digits = [int(num[0]), int(num[1]), int(num[2])]\n                if 7 in digits and all(abs(d1 - d2) <= 4 for d1 in digits for d2 in digits):\n                    current_number = int(num)\n                    if smallest_number is None or current_number < smallest_number:\n                        smallest_number = current_number\n    return smallest_number\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_A = 266 \n    not_B = 178\n    both_A_and_B = (not_A + not_B) - total_exhibits\n    return both_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, skirt = symbols('blouse skirt')\n\n    equation1 = Eq(skirt, blouse + 14)\n    equation2 = Eq(3 * skirt + 2 * blouse, 317)\n\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Since he needs to pick at least one ball of each colour,\n    # the worst-case scenario would be if he picks all balls of a single colour\n    # before getting to the next colour.\n    max_same_color_balls = max(8, 10, 13)  # Max number of balls of the same colour\n    # To ensure he gets at least one ball of each colour, he must pick at least:\n    # (Maximum number of balls of the same colour - 1) of that colour + 1 of the second colour + 1 of the third colour\n    balls_needed = (max_same_color_balls - 1) + 1 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem to solve the congruences\n    # x ≡ 3 (mod 6), x ≡ 3 (mod 7), x ≡ 5 (mod 11)\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    x, _ = solve_congruence(*congruences)\n    \n    # Find the smallest number within the range that satisfies the conditions\n    while x < 200 or x >= 300:\n        x += 6 * 7 * 11  # Increment by the product of the moduli\n    \n    return x\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    loss_percentage = 0.10  # Loss of 10%\n\n    # Calculate the original price\n    original_price = last_year_value / 1.10\n\n    # Calculate the value after loss\n    value_after_loss = last_year_value * (1 - loss_percentage)\n\n    # Calculate profit or loss\n    profit_or_loss = value_after_loss - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    for A in range(2, 100):  # Assuming a reasonable range for prime numbers\n        if all(A % i != 0 for i in range(2, A)):  # Check if A is prime\n            for B in range(2, 100):  # Similarly, assuming the range for B\n                if all(B % i != 0 for i in range(2, B)):  # Check if B is prime\n                    if (8 * A - 3 * B) % 3 == 0:\n                        return A\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    multiple_of = 1 * 2 * 3 * 4 * 5 * 6\n    factor_of = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n\n    potential_values = set()\n\n    for m in range(multiple_of, factor_of + 1):\n        if m % multiple_of == 0 and factor_of % m == 0:\n            potential_values.add(m)\n\n    return len(potential_values)\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    total_types = 3  # roses, jasmines, daisy \n    ways_to_arrange_types = factorial(total_types)\n\n    roses_variation = factorial(3)\n    jasmines_variation = factorial(4)\n    daisy_variation = factorial(1)\n\n    total_ways = ways_to_arrange_types * roses_variation * jasmines_variation * daisy_variation\n    \n    return total_ways\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # The strategy here is to use the smallest positive integers starting from 1\n    # As we want to maximize the number of different positive integers\n    # We start from 1, 2, 3, ... until we reach or exceed 60\n    current_sum = 0\n    number = 0\n    while current_sum + (number + 1) <= 60:\n        number += 1\n        current_sum += number\n    \n    return number\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 10000):  # we assume a reasonable upper limit for pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:  # pies - 3 should be divisible by 5, pies + 2 by 6\n            return pies  # first number that satisfies both conditions is the answer\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_ml_per_min = 20\n    minutes_per_hour = 60\n    ml_to_liters = 1000\n\n    water_leaked_ml = leak_rate_ml_per_min * minutes_per_hour\n    water_leaked_liters = water_leaked_ml / ml_to_liters\n\n    return water_leaked_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "import itertools\n\ndef solution():\n    for perm in itertools.permutations('0123456789', 3):\n        s, e, _ = perm\n        see = int(s + e + e)\n        if s != '0' and see == (int(e) + int(e) + int(s)):\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if (age % 2 == 1) and (age % 3 == 1) and (age % 4 == 1) and (age % 6 == 1) and (age % 7 == 0):\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Since there are 3 different colors, by drawing one more than three times the number of colors\n    # we ensure at least one pair of the same color based on the Pigeonhole Principle\n    number_of_colors = 3\n    socks_needed_for_one_pair = (number_of_colors * 1) + 1\n    return socks_needed_for_one_pair\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces = 16\n    cut_pieces = 0\n    \n    for i in range(original_pieces):\n        if original_pieces - i + i * 3 == total_pieces:\n            cut_pieces = i\n            break\n            \n    return cut_pieces\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # The worst case scenario following the Pigeonhole Principle would be to pick one apple of each color\n    # before being forced to pick a second apple of the same color. This would take 3 picks: one red,\n    # one green, and one more of any color to ensure having two of the same color.\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    ans = 20000 - 20\n    return ans\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We are to find the value of x^8 * y^6 * z^2\n    # 243 is 3^5, therefore, each of x, y, and z must be a power of 3.\n    # Specifically, (3^(5/20))^20 * (3^(5/15))^15 * (3^(5/5))^5 = 3^5\n    # Thus, x = 3^(5/20), y = 3^(5/15), z = 3^(5/5)\n    x = 3**(5/20)\n    y = 3**(5/15)\n    z = 3**(5/5)\n    # Now we calculate x^8 * y^6 * z^2\n    ans = x**8 * y**6 * z**2\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = (35 / 5 + 1) / 6\n    return c\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    # This sequence is a sum of pairs where each pair is formed by a positive even number, \n    # followed by a negative odd number. The sum of each pair is 1 (e.g., 46-45 = 1, 44-43 = 1, etc.).\n    # The first pair starts with the number 2 (which is the 1st even number), \n    # and the last pair ends with the number 1 (which is the 46th odd number).\n    # Hence, there are 46/2 = 23 pairs in total.\n    # Now, since the sum of each pair is 1, and there are 23 such pairs, \n    # the total sum is simply the number of pairs.\n    \n    num_pairs = 46 // 2\n    total_sum = num_pairs * 1\n\n    return total_sum\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n    \n    # Equation 1: 2*book_price + 3*pencil_box_price = 42\n    # Equation 2: 2*book_price + 6*pencil_box_price = 60\n    \n    equation1 = Eq(2*book + 3*pencil_box, 42)\n    equation2 = Eq(2*book + 6*pencil_box, 60)\n    \n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:\n            product //= 10\n    return str(product)[-1]\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Generate sequence based on the given pattern\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    # Sorting the sequence isn't necessary since the pattern assures it's sorted\n\n    # Find the median\n    n = len(sequence)\n    mid = n // 2\n\n    # Check if the sequence length is odd or even to determine how to find the median\n    if n % 2 == 0:\n        median = (sequence[mid - 1] + sequence[mid]) / 2\n    else:\n        median = sequence[mid]\n\n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    volume_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * volume_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    from math import comb\n    num_handshakes = comb(10, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    road_length = 500\n    meters_per_day = 50\n\n    days_needed = road_length / meters_per_day\n\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n    \n    # For the first condition\n    x = (42**2) / 42\n    \n    # For the second condition\n    factors = factorint(42*42)\n    y = 1\n    for base, exp in factors.items():\n        if exp > 1:\n            y *= base\n    \n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    fodder_per_day_per_cattle = 10\n    number_of_cattles = 8\n    number_of_days = 4\n\n    total_fodder = fodder_per_day_per_cattle * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # Number of chickens that weigh as much as 1 rabbit\n    chickens_per_rabbit = 2\n    # Number of rabbits that weigh as much as 1 dog\n    rabbits_per_dog = 8\n\n    # Total number of chickens that weigh as much as 1 dog\n    chickens_per_dog = chickens_per_rabbit * rabbits_per_dog\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let's denote the original number of marbles as 'm'.\n    \n    # According to the problem statement:\n    # (5/12) * m marbles to Mark\n    # 30 marbles to Nate\n    # 26 marbles to Ollie\n    # He had 35 marbles left.\n    # Forming the equation: (5/12) * m + 30 + 26 + 35 = m\n    \n    # Lets simplify the equation to solve for m.\n    m = symbols('m')\n    equation = Eq((5/12) * m + 30 + 26 + 35, m)\n    solution = solve(equation, m)\n    \n    # We expect a single solution for the number of marbles.\n    return solution[0]\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Jess and Jill current sweets\n    jess, jill = symbols('jess jill')\n    \n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # After Jill gives eight sweets to Jess, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Calculate the total number of sweets after substituting the solutions\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution in grams\n    concentration = 0.22  # Sugar concentration of the solution (22%)\n\n    sugar_weight = total_weight * concentration  # Weight of the sugar in the solution\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for i in range(1, 100):\n        total += sum(int(digit) for digit in str(i))\n    return total\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pies and cakes\n    pies, cakes = symbols('pies cakes')\n\n    # Ratio of money: 15x from pies, 7x from cakes\n    # Total money is the sum of these, which is $1848\n    # Let x be the cost of one pie, then one cake costs x + $13\n    # So from the ratio of pies to cakes being 4:1, we get the equation 4*pies = cakes\n\n    # Equations based on the given ratios and total money collected\n    money_pies = 15 * pies\n    money_cakes = 7 * (pies / 4 + 13)\n\n    # total money equation 15x + 7(x + 13) = 1848\n    equation1 = Eq(money_pies + money_cakes, 1848)\n\n    # Equation based on the ratio of the number of pies to cakes\n    equation2 = Eq(4 * cakes, pies)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pies, cakes))\n\n    return solutions[cakes]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    money_given = total_money * (1/4)\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) * 3 == int(str(i) + '1'):\n            return i\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    \n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    for money in range(1, 1000):  # Reasonable range for Hanson's initial money\n        after_CDs = money - money / 4 - 3\n        after_batteries = after_CDs - 3 * after_CDs / 5 - 6\n        if after_batteries == 24:\n            return money\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    today = datetime.now()\n    fred_age_years = 38\n    fred_age_months = 6\n    fred_birth_month = today.month - fred_age_months if today.month > fred_age_months else 12 + today.month - fred_age_months\n    fred_birth_year = today.year - fred_age_years if today.month > fred_age_months else today.year - fred_age_years - 1\n\n    return fred_birth_year\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']  # Digits to be used\n    # List of even digits, as the last digit needs to be even for the number to be even\n    even_digits = ['0', '6', '8']  \n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':  # Check if it's a valid four-digit even number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            return beads\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # 9^2015 + 9^2016 can be expressed as 9^2015(1 + 9)\n    # the units digit of 9^2015 does not affect the multiplication by 10 (1 + 9)\n    # we only need to find the units digit of 9^2015\n    \n    units_digit_9_pow = [9**i % 10 for i in range(4)] # 9^0, 9^1, 9^2, 9^3\n    # the units digit of 9 to the power of any number cycles every 4, becasue 9^4 = 6561\n    # so to find the units digit of 9^i we can use i % 4 to get the index\n    \n    units_digit = units_digit_9_pow[2015 % 4] # get the units digit of 9^2015\n    # multiply by 10 due to (9^2015 * 10) and take the units digit\n    ans = (units_digit * 10) % 10\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways to arrange 5 men in a row\n    men_arrangements = factorial(5)\n\n    # Calculate the number of positions where 3 women can be placed in between 5 men\n    # There are 6 possible positions for the first woman (before and after each man),\n    # then 5 for the second (after one woman is placed), and 4 for the last woman.\n    women_positions = factorial(6) // factorial(6 - 3)\n\n    # Multiply the number of men arrangements with the\n    # number of possible positions for the women\n    total_arrangements = men_arrangements * women_positions\n\n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    length_one = 45\n    length_two = 30\n\n    max_piece_length = gcd(length_one, length_two)\n\n    is_candy_correct = (max_piece_length == 180)\n\n    return max_piece_length, is_candy_correct\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # The distance is the same for both Qiqi and Weiling\n    # Qiqi's speed = 60 m/min\n    # Weiling's speed = 72 m/min\n    # Weiling starts 2 minutes later than Qiqi\n    # Weiling arrives 4 minutes earlier than Qiqi\n    # Let's denote time taken by Qiqi as t. Then Weiling takes (t - 6) minutes since Weiling starts 2 mins later and arrives 4 mins earlier\n    # The distance covered by both should be the same. So, distance = speed * time\n    # Setting the two distances equal gives us an equation: 60 * t = 72 * (t - 6)\n\n    # Solving for t\n    from sympy import symbols, Eq, solve\n    \n    t = symbols('t')\n    equation = Eq(60 * t, 72 * (t - 6))\n\n    # Solve the equation for t\n    time_Qiqi = solve(equation, t)[0]\n\n    # Calculate the distance using the time for Qiqi\n    distance = 60 * time_Qiqi\n    return distance\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_current_minutes = (11 * 60) + 50 - 15  # Convert Marc's current time to minutes and adjust for slowness\n    george_current_minutes = marc_current_minutes + 7  # Adjust for George's watch being fast\n\n    half_an_hour_later_minutes = george_current_minutes + 30  # Add half an hour\n    \n    # Calculate the hour and minute to be displayed on George's watch\n    hour = half_an_hour_later_minutes // 60\n    minute = half_an_hour_later_minutes % 60\n\n    # Format the time to be displayed on George's watch, adjusting if hour is greater than 12\n    georges_time = f\"{hour if hour <= 12 else hour - 12}:{str(minute).zfill(2)}{'a.m.' if hour < 12 else 'p.m.'}\"\n    \n    return georges_time\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    total_amount = 540\n    ans = percentage * total_amount\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    h = symbols('h')\n    \n    equation = Eq(2 * h, 25 + h)\n    \n    solution = solve(equation, h)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_first_30000 = T/100 * 30000\n    tax_above_30000 = (T + 3)/100 * (income - 30000)\n    total_tax = tax_first_30000 + tax_above_30000\n\n    # Total tax paid is (T + 1)% of the annual income\n    tax_paid = (T + 1)/100 * income\n\n    # Setting up the equation total_tax = tax_paid\n    equation = Eq(total_tax, tax_paid)\n\n    # Since the tax above 30000 applies only if the income is greater than 30000\n    # we must consider two cases: income <= 30000 and income > 30000\n    # Case 1: income <= 30000\n    case1_solution = solve(Eq(T/100 * income, (T + 1)/100 * income), (T, income))\n    if case1_solution[income] <= 30000:\n        return case1_solution[income]\n\n    # Case 2: income > 30000\n    case2_solution = solve((equation, income > 30000), (T, income))\n    return case2_solution[income]\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    total_marks = 90\n    correct_marks = 5\n    wrong_marks = -1\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + wrong_answers * wrong_marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n    combined_rate = A_rate + B_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    fall_down_after_3_jumps = 2\n    net_progress_per_3_jumps = (jump_up * 3) - fall_down_after_3_jumps\n\n    # The squirrel will be able to reach the top before falling down on the set of 3 jumps that \n    # brings it to or above the height of the tree.\n    # Calculate the number of sets of 3 jumps needed to get within 3 meters from the top\n    \n    # the squirrel falls on every third jump so we should consider the jump before the last set of 3 jumps\n    distance_before_last_jump = total_distance - jump_up\n    sets_of_3_jumps = distance_before_last_jump // net_progress_per_3_jumps\n    # Calculate the total number of jumps including the last set of 3 jumps\n    total_jumps = sets_of_3_jumps * 3\n    \n    # if there is a remainder after dividing, we need to consider extra jumps\n    extra_distance_needed = distance_before_last_jump % net_progress_per_3_jumps\n    if extra_distance_needed > 0:\n        total_jumps += 3  # the squirrel will make it to the top on the third jump of the last set\n    else:\n        total_jumps += 2  # the squirrel will make it to the top on the second jump of the last set\n    return total_jumps\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Draw all marbles of one color first, then all of another, then one of the next.\n    # This would give us just two colors with maximum number of marbles drawn.\n    # To ensure the fourth color, draw one more marble.\n    # The worst case scenario is drawing all reds, all blues and all yellows, \n    # then one more of any color ensures the fourth color.\n    \n    marbles_drawn = 12 + 9 + 8 + 1  # All reds, all blues, all yellows, and one more for the fourth color\n    return marbles_drawn\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for number in range(1, 101):\n        if number % 3 == 0 and number % 7 == 0 and (number - 2) % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_birth_year = 2002 - 45\n    jenny_birth_year = 1995 - 22\n    \n    gigi_age_when_jenny_born = jenny_birth_year - gigi_birth_year\n    \n    age_jenny_when_gigi_22 = 22 - gigi_age_when_jenny_born\n    \n    return age_jenny_when_gigi_22\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # Digit sum for 20190406A to be divisible by 9 must be divisible by 9\n    digits_sum = sum(map(int, \"20190406\"))\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    # Start with the smallest common multiple of 3 and 8 and increment by that multiple until we find a number ending in 2\n    common_multiple = 3 * 8\n    num = common_multiple\n    while True:\n        if str(num)[-1] == '2':\n            return num\n        num += common_multiple\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    last_term = 0  # We need to find the last positive term which will be >= 1.\n\n    # Calculate the number of terms using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # where n is the number of terms\n    # Rearrange the formula to solve for n:\n    # n = (last_term - first_term) / difference + 1\n    # Considering the last term is the last positive number (greater than 0), let's find n:\n    n = (last_term - first_term) / difference + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    return 2.5 * 7 * 4\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        num = int('451' + str(last_digit))\n        if num % 3 == 0 and num % 5 != 0 and num % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    ways = 0\n    \n    # We use only half of total_apples to avoid repeating the same combinations\n    # with different order (since there are only two groups, ordering doesn't matter)\n    for i in range(1, total_apples // 2 + 1):\n        ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_of_ship_in_still_water = 25\n    speed_of_current = 3\n    total_speed_downstream = speed_of_ship_in_still_water + speed_of_current\n    distance = 140\n\n    time = distance / total_speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15\n    sale_price = original_price * (1 - discount_percent / 100)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -2\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_correct + wrong * points_wrong == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    first_light = 0.5  # in minutes\n    second_light = 0.75  # in minutes\n    third_light_min = 0.5  # Min time for the third light in minutes (30 seconds)\n\n    # Convert time when all lights are green to minutes\n    all_green_time = 9  \n\n    # Since the first two traffic lights and the all-green time are given,\n    # we need to find the LCM of the first two and then find the multiple\n    # for the third light that makes it fall into the 9 minutes interval.\n    lcm_first_second = lcm(int(first_light*60), int(second_light*60)) / 60  # Lowest Common Multiple in minutes\n\n    # Now find the smallest multiple of the third light duration that is more than or equal to the lcm of the first two and less than or equal to 9 minutes\n    third_light = lcm_first_second\n    while third_light < third_light_min or third_light > all_green_time:\n        if third_light >= third_light_min:\n            # Must be a multiple of lcm_first_second, but not exceed all_green_time\n            third_light += lcm_first_second\n        else:\n            # Below the minimum, increase to the minimum and continue checking\n            third_light = third_light_min\n\n        if third_light > all_green_time:\n            # Exceeded the 9 minutes interval, no valid time can be found in this case.\n            return None\n\n    return third_light\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Each bus seats 36 people\n    bus_capacity = 36\n    members_a_plus_11 = bus_capacity  # Last bus has 36 passengers with 11 from group A\n    \n    # Let x be the number of people in group A and y be the number of people in group B\n    # x - 11 (from group A without the last bus) is a multiple of 36 (filled buses)\n    # y must be 36 - 11 because they fill up the remaining seats in the last bus\n    members_b_remaining = bus_capacity - 11\n    \n    # Now we need to find the number of possible values for x such that (x - 11) is a multiple of 36\n    # The total number of photographs taken is x * (36 - 11)\n    total_pictures = members_a_plus_11 * members_b_remaining\n\n    # Find the remainder of pictures when dividing by the roll capacity\n    remainder_pictures = total_pictures % bus_capacity\n    \n    # The last roll of film can take 36 - remainder\n    additional_pictures = bus_capacity - remainder_pictures\n    \n    return additional_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20-8, 31-20, 41-31, 50-41]\n    second_diffs = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    next_diff = differences[-1] + second_diffs[-1]\n    next_number = 50 + next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    target_mean = 5\n\n    sum_of_known = sum(known_numbers)\n    total_sum_needed = target_mean * total_numbers\n    missing_number = total_sum_needed - sum_of_known\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since A must receive the ball back in the final pass and there are 3 passes,\n    # we need to find the number of ways the second pass can happen, \n    # since the first pass is done by A to any of the other 3 players,\n    # and the third (last) pass must be done by one of the remaining 2 players back to A.\n\n    # Total number of ways the second pass can happen:\n    # A passes to one of 3 others (3 choices), then that player passes \n    # to one of the other 2 players (2 choices)\n    total_ways = 3 * 2\n\n    return total_ways\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n\n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    total_weight_g = 25 * 250\n    total_weight_kg = total_weight_g / 1000\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # total length of people when they just finish crossing the first bridge\n    total_length_first_bridge = 3 + 9  # people's line + bridge length\n    # time to cross the first bridge entirely\n    time_first_bridge = 8  # in seconds\n    \n    # speed of the line of people (same speed across both bridges)\n    speed = total_length_first_bridge / time_first_bridge  # speed = distance / time\n\n    # time to cross the second bridge entirely\n    time_second_bridge = 10  # in seconds\n    \n    # total length of people and the second bridge when they cross it entirely\n    total_length_second_bridge = speed * time_second_bridge\n    \n    # length of the second bridge\n    length_second_bridge = total_length_second_bridge - 3  # minus the people's line length\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - 2 * i) ** 2 - (998 - 2 * i) ** 2 for i in range(0, 497, 2))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    cube_root = int(2688 ** (1/3))\n    for i in range(cube_root, 1, -1):\n        if 2688 % i == 0 and (2688 // i) % (i + 2) == 0:\n            return i + 2 + 2\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"11:55 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"1:40 PM\", \"%I:%M %p\")\n    \n    duration = end_time - start_time\n    minutes_played = duration.total_seconds() / 60\n    \n    return int(minutes_played)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_side = 11\n    right_side = 7\n    # Crystal is in both rows, so we do not count her twice.\n    total_people = left_side + right_side + 1  # Crystal herself\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 3 == 0 and number % 11 == 0:\n            if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    ways = 0\n    for group1 in range(1, 10):\n        for group2 in range(1, 10):\n            if group1 != group2 and group1 + group2 == 10:\n                ways += 1\n    return ways // 2  # dividing by 2 because each distribution is counted twice\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    number = 224\n    prime_factors = {}\n    i = 2\n\n    while i * i <= number:\n        while (number % i) == 0:\n            number //= i\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n        i += 1\n\n    if number > 1:\n        prime_factors[number] = prime_factors.get(number, 0) + 1\n\n    factors_count = 1\n    for prime, power in prime_factors.items():\n        factors_count *= power + 1\n\n    return factors_count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import timedelta, time\n\n    start_time = time(8, 30)\n    three_lessons = timedelta(minutes=45 * 3)\n    two_moving_periods = timedelta(minutes=5 * 2)\n\n    break_start_time = (datetime.combine(date.today(), start_time) + three_lessons + two_moving_periods).time()\n\n    return break_start_time\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # The hundreds digit must be in [1, 9] to form a 3-digit number\n        for b in range(0, 10):  # The tens digit must be in [0, 9]\n            for c in range(0, 10):  # The ones digit must be in [0, 9]\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    ans = a * 100 + b * 10 + c\n                    return ans\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    \n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n    \n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n    \n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins_initially = solutions[troy] + solutions[adam]\n\n    return int(total_coins_initially)\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $5 and $10 notes before spending\n    num_5_notes, num_10_notes = symbols('num_5_notes num_10_notes')\n\n    # Define equations based on the problem statement\n    total_notes_eq = Eq(num_5_notes + num_10_notes, 57)\n    spent_10_notes_eq = Eq(0.6 * num_10_notes, 2 * 0.25 * num_5_notes)\n    remaining_notes_eq = Eq(num_10_notes - 0.6 * num_10_notes, 2 * (num_5_notes - 0.25 * num_5_notes))\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_10_notes_eq, remaining_notes_eq), (num_5_notes, num_10_notes))\n\n    # Calculate the cost of the bag based on the number of notes spent\n    cost_of_bag = 0.6 * solutions[num_10_notes] * 10 + 0.25 * solutions[num_5_notes] * 5\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the money Hanson had at first\n    x = symbols('x')\n    \n    # After spending 1/4 of his money and an additional $3, Hanson is left with 3/4 of his money minus $3\n    money_after_CDs = (3/4) * x - 3\n    \n    # Then, he spends 3/5 of the remaining money on batteries, leaving him with 2/5 of the money he had after buying CDs minus $6\n    money_after_batteries = (2/5) * money_after_CDs - 6\n    \n    # He is left with $24, we set up the equation and solve for x\n    equation = Eq(money_after_batteries, 24)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        product = 1\n        for digit in str(num):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [i for i in range(10)]\n    even_digits = [i for i in range(0,10,2)]\n    count = 0\n\n    for perm in permutations(digits, 3):\n        if sum(perm) == 8 and perm[-1] in even_digits and perm[0] != 0:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Darrell could possibly draw all blue and white beads before getting 5 green beads\n    blue_beads = 5\n    white_beads = 6\n    # Do not count the 5 green beads that Darrell wants\n    green_beads = 8 - 5\n    \n    # Applying the worst-case scenario using the Pigeonhole Principle\n    # Darrell must pick all other beads before getting the required 5 green beads\n    min_beads_required = blue_beads + white_beads + green_beads + 5\n    return min_beads_required\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 / (1/2)\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Group stage games: In each group with 4 people playing round-robin, each person plays 3 games.\n    # There are 4 groups, so total games in group stage: 4 groups * (4 people * 3 games) / 2\n    # We divide by 2 because in round-robin, each game is counted twice (once for each contestant).\n    group_stage_games = 4 * (4 * 3) // 2\n\n    # Knockout stage games: The top 8, top 4, top 2 and then the final and third-place match.\n    # That would be 8/2 + 4/2 + 2/2 + the final + third-place = 4 + 2 + 1 + 1 + 1 games = 9 games\n    knockout_stage_games = 4 + 2 + 1 + 1 + 1\n\n    # Total games played throughout the contest is the sum of group stage and knockout stage games.\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # A's work rate is twice as good as B's\n    # Let x be the time B takes to finish the job\n    # A will finish the job in x/2 days\n    # A finishes 12 days before B: x - x/2 = 12 -> x = 24\n\n    # A's work rate per day = 1 / (x/2)\n    # B's work rate per day = 1 / x\n    # If A and B work together, their combined work rate is 1 / (x/2) + 1 / x per day\n    # Time taken to complete the job together = 1 / (combined work rate)\n\n    x = symbols('x')\n    A_rate = 1 / (x / 2)\n    B_rate = 1 / x\n    combined_rate = A_rate + B_rate\n\n    # Equation of the combined work\n    equation = Eq(1 / combined_rate, x)\n    \n    # Solve for B's time to finish the job alone (x), which should be 24 based on the problem\n    time_B_alone = solve(equation.subs(x, 24), x)[0]\n\n    # Use the found time for B to calculate the days they can complete the job together\n    days_together = 1 / (1 / (time_B_alone/2) + 1 / time_B_alone)\n\n    return days_together\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n    \n    # Number of ways to arrange 4 out of 9 plants is given by 9P4 (Permutation)\n    ways_to_arrange = factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_bought + stickers_given\n    return stickers_start\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pineapple, apple = symbols('pineapple apple')\n    \n    equation1 = Eq(pineapple, apple + 650)  # pineapple weighs 650g more than an apple\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)  # altogether weigh 5450g\n    \n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import gcd\n\n    # Since 15 and 21 are two factors of the number, the number must be a multiple of their LCM.\n    lcm_15_21 = (15 * 21) // gcd(15, 21)\n    \n    # Now we know that lcm_15_21 is a multiple of the integer, \n    # we start to look for the integer as a multiple of lcm_15_21 with exactly 8 factors.\n    num = lcm_15_21\n    while True:\n        factors_count = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors_count += 1\n                if i != num // i:\n                    factors_count += 1\n        if factors_count == 8:\n            break\n        num += lcm_15_21\n    \n    # Once we have the number, calculate the sum of all factors.\n    sum_of_factors = sum(set(i + num//i for i in range(1, int(num ** 0.5) + 1) if num % i == 0))\n    \n    return sum_of_factors\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "def solution():\n    from itertools import permutations\n\n    digits = '0123456789'\n    for perm in permutations(digits):\n        if perm[0] == '8':\n            if int(''.join(perm[0:1])) % 1 == 0 and \\\n               int(''.join(perm[0:2])) % 2 == 0 and \\\n               int(''.join(perm[0:3])) % 3 == 0 and \\\n               int(''.join(perm[0:4])) % 4 == 0 and \\\n               int('''.join(perm[0:5])) % 5 == 0 and \\\n               int(''.join(perm[0:6])) % 6 == 0 and \\\n               int(''.join(perm[0:7])) % 7 == 0 and \\\n               int(''.join(perm[0:8])) % 8 == 0 and \\\n               int(''.join(perm[0:9])) % 9 == 0 and \\\n               int(''.join(perm[0:10])) % 10 == 0:\n                return int(''.join(perm))\n    return None\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n    matthew_tomatoes = belinda_tomatoes - tomatoes_given\n    \n    return matthew_tomatoes - tomatoes_given\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_efficiency_rate = original_rate + (original_rate * 50 / 100)\n    return increased_efficiency_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # Find the greatest common divisor (GCD) of the difference of the two numbers\n    from math import gcd\n    difference = abs(2012 - 1274)\n    D = gcd(2012, 1274)  # The largest possible D is their GCD\n    \n    # Since R is the same for both numbers when divided by D,\n    # we can use the following formula to find R: R = N mod D\n    R = 2012 % D\n    \n    # Return the largest possible value of D - R\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Let r be the number of rabbits and d be the number of ducks\n    # Since there are 7 animals in total we have r + d = 7\n    # Rabbits have 4 legs and ducks have 2 legs, and the total number of legs is 20\n    # So we have the equation 4r + 2d = 20\n    # We can solve for r using these two equations\n    \n    for r in range(8): # Since there cannot be more than 7 rabbits, we range from 0 to 7\n        d = 7 - r\n        if 4 * r + 2 * d == 20:\n            return r\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_juice = 630\n    juice_to_grace = (5/7) * initial_juice\n    remaining_juice = initial_juice - juice_to_grace\n    juice_to_evelyn = (1/9) * remaining_juice\n    juice_left = remaining_juice - juice_to_evelyn\n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Last digit of powers of 4 form a cycle: 4, 6, 4, 6, ...\n    # Since the cycle is of length 2, we can find the last digit of 4^(odd number) is 4\n    last_digit_4_power = 4\n\n    # Last digit of powers of 6 is always 6 since 6^1 = 6, 6^2 = 36, 6^3 = 216, ...\n    # and it does not depend on the power since last digit of 36 (6*6) is 6\n    last_digit_6_power = 6\n\n    # Add the last digits of the two numbers we're interested in\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n    return ans\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # The idea is to leave the opponent with a state from which\n    # they can only make moves that allow us to win.\n    # Let's find a number \"n\" in the range 1 to 52 such that when \"n\" numbers\n    # are left, no matter if the opponent takes 1, 3, 4, or 6, we can always take\n    # the rest and win.\n    # We are looking for a \"losing\" position for our opponent.\n    \n    # Since the numbers we can subtract are (1, 3, 4, 6), the \"losing\" position\n    # must be 2 more than the biggest number we can subtract.\n    lose_positions = set(range(1, 53))\n    for x in (1, 3, 4, 6):\n        lose_positions -= {i + x + 2 for i in range(0, 53)}\n\n    # Since we want Betty to win and the first lose position is number 2,\n    # she needs to make sure that after her turn, the number left on the\n    # board is in the set of lose positions.\n\n    lose_positions = sorted(lose_positions)\n    \n    # Betty should go first. Her strategy will be to always take a number \n    # such that she leaves Abby a number from the lose_positions. \n    # The initial move will depend on which numbers are in lose_positions, \n    # and for Betty to win, she should leave 1 after her move if it's possible,\n    # as that would be a losing position for Abby.\n\n    # Let's find Betty's initial move\n    initial_moves = [i for i in lose_positions if i + 1 not in lose_positions]\n\n    # Since 2 is a losing position, we want to go first and leave the opponent with 2\n    betty_initial_move = None\n    if 2 in initial_moves:\n        betty_initial_move = 2\n    else:\n        for pos in initial_moves:\n            if any(pos - x in (1, 3, 4, 6) for x in (1, 3, 4, 6)):\n                betty_initial_move = pos\n                break\n\n    if betty_initial_move is not None:\n        # Betty goes first and ensures to leave a losing position for Abby\n        betty_strategy = f\"Betty should go first and write {betty_initial_move} to win\"\n        return betty_strategy\n    else:\n        # Otherwise, if no such move is possible, Betty goes second\n        return \"Betty should go second\"\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    total_weight = 63\n    ans = 0\n    \n    # Maximum number of 5-gram weights possible\n    max_five_grams = total_weight // 5\n    \n    for x in range(max_five_grams + 1):\n        remaining_weight = total_weight - (x * 5)\n        if remaining_weight % 2 == 0:\n            # If the remaining weight is divisible by 2, we can make it with 2-gram weights\n            ans += 1\n            \n    return ans\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # We have two equations from the given information\n    # Sum of first n terms of an arithmetic sequence is given by: S_n = n/2 * (2a + (n-1)d),\n    # where a is the first term, and d is the common difference\n    # S8 = 32 => 8/2 * (2a + 7d) = 32\n    # S22 = 44 => 22/2 * (2a + 21d) = 44\n    # We need to find S15\n    \n    # From S8 = 32, we get the equation: 4 * (2a + 7d) = 32\n    # From S22 = 44, we get the equation: 11 * (2a + 21d) = 44\n    # Simplifying both equations:\n    # 8a + 28d = 32 => 8a + 28d - 32 = 0     ...(1)\n    # 22a + 231d = 44 => 22a + 231d - 44 = 0  ...(2)\n    \n    # Now, use sympy library to solve the simultaneous equations:\n    from sympy import symbols, solve, Eq\n\n    a, d = symbols('a d')\n    eq1 = Eq(8 * a + 28 * d, 32)\n    eq2 = Eq(22 * a + 231 * d, 44)\n\n    solutions = solve((eq1, eq2), (a, d))\n\n    # Now that we have a and d, let's find S15 using the formula S_n = n/2 * (2a + (n-1)d)\n    # S15 = 15/2 * (2a + 14d)\n    a_val = solutions[a]\n    d_val = solutions[d]\n    S15 = (15/2) * (2 * a_val + 14 * d_val)\n\n    return S15\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the capacity of the pool in tons\n    # We are given that B's rate is twice A's rate, and C's rate is a constant.\n    # We also know that the total amount of water from A and B when combined with C is x tons.\n    A, B, C, x = symbols('A B C x')\n    \n    # Equation for when A and C are turned on: x = A + 18 + C\n    equation1 = Eq(A + 18 + C, x)\n    \n    # Equation for when B and C are turned on: x = B + 27 + C\n    equation2 = Eq(B + 27 + C, x)\n    \n    # Equation for the rate of A compared to B: B = 2A\n    equation3 = Eq(B, 2 * A)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C, x))\n    \n    # The capacity of the pool is the solved value for x\n    return solutions[x]\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    questions_attempted = total_questions - 1\n    \n    # Let x be the number of correct answers Rex had.\n    # The number of incorrect answers would then be (questions_attempted - x).\n    \n    # The total score is the sum of points from correct and incorrect answers.\n    # 4x + (-2)(questions_attempted - x) = rex_score\n    # Simplify the equation: 4x - 2 * questions_attempted + 2x = rex_score\n    # Further simplify: 6x - 2 * questions_attempted = rex_score\n    # Thus, x = (rex_score + 2 * questions_attempted) / 6\n    \n    x = (rex_score + 2 * questions_attempted) / 6\n    return int(x)\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    series_sum = sum(range(1, 21)) + sum(range(1, 20))\n    return series_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from itertools import permutations\n\n    colors = ['red', 'yellow', 'blue', 'green', 'purple']\n    all_permutations = list(permutations(colors, 4))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age must be between 10 and 99 as she has two digits\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if (reversed_age + 1) * 2 == age:  # Check if the condition is met\n            return age  # Return Alberta's age if the condition is satisfied\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Let's assume every student gets 'x' meatballs.\n    # Initially, after distribution, there are 20 meatballs left.\n    # After one more student comes, there are 10 meatballs left and he/she gets 'x' meatballs.\n    # The total amount of meatballs can be expressed as m = nx + 20, where n is the number of students before the last one comes.\n    # After the last student comes, the total amount becomes m = (n+1)x + 10.\n    # Therefore, we can equate to get: nx + 20 = (n+1)x + 10, simplifying it we get x = 10.\n    \n    return 10\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_amount * increase_fraction\n    final_amount = original_amount + increase_amount\n    return final_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day1 = symbols('remaining_after_day1')\n    total_questions = symbols('total_questions')\n\n    # Equations based on the problem statement\n    equation1 = Eq(total_questions / 2 + 7 + remaining_after_day1, total_questions)\n    equation2 = Eq(remaining_after_day1 / 2 - 5 + 23, remaining_after_day1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_questions, remaining_after_day1))\n\n    return solutions[total_questions]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    frac_value = 4 / 25\n    decimal_value = 0.17\n    \n    if frac_value > decimal_value:\n        ans = \"4/25 is larger\"\n    elif frac_value < decimal_value:\n        ans = \"0.17 is larger\"\n    else:\n        ans = \"They are equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_volume_milliliters = 1000\n    cup_volume_milliliters = 200\n    total_cups = 3\n\n    water_used = cup_volume_milliliters * total_cups\n    water_left = jug_volume_milliliters - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Calculate the common difference by using the given terms\n    tenth_term = 23\n    fifteenth_term = 38\n    position_diff = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_diff\n    \n    # Calculate the 12th term based on the 10th term and the common difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    return sum(1 for i in range(1, 251) if i**0.5 == int(i**0.5))\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of roses, and y be the original number of daisies.\n    # Since the total number of flowers is constant (300), we get:\n    # x + y = 300\n    \n    # Let m be the number of same roses and daisies planted each month.\n    # After a few months, the number of roses and daisies becomes 280 and 180 respectively.\n    # Thus, we can write the system of equations as:\n    # x + m = 280\n    # y + m = 180\n\n    # Now, since x + y = 300, we can substitute y = 300 - x into the second equation:\n    # (300 - x) + m = 180\n    # And simplify it to find m in terms of x:\n    # m = 180 - (300 - x) = 180 - 300 + x = x - 120\n\n    # Using the first equation, we substitute the expression for m back to find x:\n    # x + (x - 120) = 280\n\n    # Variable for the original number of roses\n    x = symbols('x')\n\n    # Solve the system of equations\n    equation = Eq(x + (x - 120), 280)\n    original_roses = solve(equation, x)[0]\n\n    return original_roses\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = (20 / 100 * 10) + (80 / 100 * 20) + (90 / 100 * 30)\n    overall_percentage = (total_correct / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for cost per bottle of water (water) and cost per bag of fruit (fruit)\n    water, fruit = symbols('water fruit')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)       # Total cost equation\n    equation2 = Eq(water, fruit + 0.15)                # Cost relation equation\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    # Return cost of a bag of fruit\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = '134578'\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    girls_more_than_boys = 30\n\n    # Let the number of boys be b, then the number of girls is b + 30.\n    # According to the problem b + (b + 30) = 500\n    # We have 2b + 30 = 500, so we solve for b.\n    b = (total_pupils - girls_more_than_boys) / 2\n\n    # Now we can find out the number of girls, which is b + 30\n    girls = b + girls_more_than_boys\n    return int(girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\nans = not solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "from math import log10\n\ndef solution():\n    # Number of digits of A is one more than the floor of the logarithm (base 10) of A\n    # log(A) = log(4^2018 * 25^2018) = 2018 * (log(4) + log(25))\n    logA = 2018 * (log10(4) + log10(25))\n    num_digits = int(logA) + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A_length = 10\n    ribbon_B_length = 5 * ribbon_A_length\n    total_length = ribbon_A_length + ribbon_B_length\n    return total_length\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0 # Initialization of the total number of students\n    layer = 0 # Starting layer index\n\n    # Try squares of different sizes until the difference in boys and girls matches the given number (31)\n    while True:\n        boys = (layer * 2 + 1)**2\n        girls = (layer * 2)**2 if layer > 0 else 0\n        diff = boys - girls\n        \n        # If we reach the correct difference, calculate the total number of students and break\n        if diff == 31:\n            total_students = boys + girls\n            break\n        \n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # The area of the living room in square decimeters for 80 bricks\n    area_per_brick_dm2 = 6 * 6\n    total_area_dm2 = area_per_brick_dm2 * 80\n    \n    # Convert the area of one 64 cm^2 brick to square decimeters\n    area_per_brick_cm2 = 64\n    area_per_brick_dm2 = area_per_brick_cm2 / 100 # 1 dm^2 = 100 cm^2\n    \n    # Calculate the number of 64 cm^2 bricks needed\n    num_bricks = total_area_dm2 / area_per_brick_dm2\n    \n    return int(num_bricks)\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    num_teams = comb(total_players, team_size)\n\n    return num_teams\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n\n    cost_price = selling_price / (1 + (profit_percent / 100))\n    alternative_profit = 5000\n\n    alternative_selling_price = cost_price + alternative_profit\n    alternative_profit_percent = (alternative_profit / cost_price) * 100\n\n    return alternative_profit_percent\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the total number of apples Mr. Aziz had initially.\n    a = symbols('a')\n\n    # Equation based on the given problem\n    equation = Eq(a - (1/5 * a) - 80, 0.30 * a)\n\n    # Solve the equation\n    total_apples = solve(equation, a)\n\n    # Mr. Aziz was left with 30% of the apples he had at first.\n    left_apples = 0.30 * total_apples[0]\n\n    return left_apples\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            for x3 in range(x2+1, 14):\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n\n    return total_people\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since every pile should have at least 1 ball, start distributing by giving 1 ball to each pile.\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 != x2:\n                x3 = 10 - x1 - x2\n                if x3 > x2 and x3 > x1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n\n    length_each_piece = total_length / number_of_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first term of the consecutive even numbers be x.\n    # Then, the seven consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10, and x+12.\n    # The fourth number (x+6) is larger than one-third of the sum of the first and seventh numbers by 6.\n    # Hence, x+6 = 1/3 * (x + x+12) + 6, or x+6 = 1/3 * (2*x + 12) + 6.\n    \n    # Solving for x\n    # x+6 = 2/3*x + 4 + 6\n    # x - 2/3*x = 4 + 6 - 6\n    # 1/3*x = 4\n    x = 4 * 3  # Multiply both sides by 3 to isolate x\n    \n    # The sum of the seven consecutive even numbers is x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) + (x+12).\n    sum_seven_numbers = x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) + (x+12)\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_m_conversion_factor = 1000\n    distance_in_km = 1.5\n    distance_in_meters = distance_in_km * km_to_m_conversion_factor\n    return distance_in_meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    sum_remaining = total_sum - 180\n    average_remaining = sum_remaining / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of each color orchid\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    # Ben has twice as many purple orchids as yellow orchids\n    equation1 = Eq(purple, 2 * yellow)\n    # 3 times as many yellow orchids as white orchids\n    equation2 = Eq(yellow, 3 * white)\n    # There are 38 red and white orchids\n    equation3 = Eq(red + white, 38)\n    # There are 28 red orchids\n    equation4 = Eq(red, 28)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n    \n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends of the highway, the number of trees\n    # on one side is the floor division of length by distance plus one.\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n\n    # The trees are planted on both sides of the highway.\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    term = 2 * 20 - 1\n    return term\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mikes_future_age = eddie_future_age + age_difference\n    return mikes_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_cost = lily_book_price + amy_book_price\n    return total_cost\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    sum_of_interior_angles = (num_sides - 2) * 180\n    interior_angle = sum_of_interior_angles / num_sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_four_digits = sum(int('5' * i) for i in range(1, 21)) % 10000\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    work_per_man_day = 1 / (2 * 3)  # work done by one man in one day\n    total_work_for_x_walls = work_per_man_day * x  # total work for x walls\n    days_for_y_men = total_work_for_x_walls / y  # days required for y men to build x walls\n\n    return days_for_y_men\n\nans = solution(x, y)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25 / 100\n    women_fraction = 1 / 5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let checked_shirts be the number of checked shirts sold\n    # white_shirts is 7 times the number of checked shirts\n    # Sum of checked_shirts and white_shirts is 72\n    \n    # Therefore, checked_shirts + 7 * checked_shirts = 72\n    # 8 * checked_shirts = 72\n    # checked_shirts = 72 / 8\n    checked_shirts = 72 // 8\n    white_shirts = 7 * checked_shirts\n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # Greatest 3-digit number divisible by 9 with the ones digit being odd is 999 - 9 (to make it odd) = 990\n    greatest_num = 999 - 9\n    while greatest_num > 100:\n        # Check if the number is divisible by 9 and if the tens digit is divisible by 4\n        if greatest_num % 9 == 0 and (greatest_num // 10 % 10) % 4 == 0:\n            return greatest_num\n        # Decrease by 18 to ensure the number stays odd and divisible by 9\n        greatest_num -= 18\n    return None\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages_in_nine_days = pages_per_day * 9\n    return total_pages_in_nine_days\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # It's impossible to solve the problem without the picture of the pattern.\n    # Please provide the pattern or describe it in detail for a correct solution.\n    pass\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # We have 3 colors of balls, to ensure we draw 2 balls of the same color,\n    # we can use the Pigeonhole Principle.\n    # In the worst case scenario, we draw one of each color first.\n    \n    # Draw one white, one red, and one green\n    draws = 3\n    \n    # Next draw must be of the same color of any of the previously drawn balls\n    draws += 1\n    \n    return draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, 390)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    \n    # Solve the Chinese remainder theorem\n    num, _ = solve_congruence(*congruences)\n\n    # Find the smallest number that satisfies all conditions\n    while num < 60:\n        return num\n        num += 4*5*6  # Increment by the product of the moduli\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(int(digit) for digit in str(m)) == 5 * sum(int(digit) for digit in str(m + 1)):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # January to April (4 months)\n    jan_to_apr = 300 * 4\n    \n    # May to July (3 months)\n    may_to_jul = 250 * 3\n    \n    # August and September (2 months)\n    aug_to_sep = 750\n    \n    # October to December (3 months)\n    oct_to_dec = 300 * 3\n    \n    # Total amount spent\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Average per month from January to December (12 months)\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    fruit_per_five_days = 24\n    days = 8.5\n    rate_per_day = fruit_per_five_days / 5\n    total_fruit = rate_per_day * days\n    return total_fruit\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # 2% less water than the start of the hour\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    drop_in_temperature = temperature_bottom - temperature_top\n\n    return drop_in_temperature\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n    \n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('07:35', '%H:%M')\n    train_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + train_duration + walk_duration\n    return arrival_time.time().strftime('%H:%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    # Search through all possible values less than 200\n    ans = []\n    for n in range(200):\n        # Convert to different bases and calculate digit sum\n        if sum(int(d) for d in format(n, 'b4')) == 5 and \\\n           sum(int(d) for d in format(n, 'b6')) == 8 and \\\n           sum(int(d) for d in format(n, 'b8')) == 9:\n            ans.append(n)\n\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    options_for_first_digit = 2  # Can be 2 or 3, but not 0\n    options_for_second_digit = 3  # Can be 0, 2, or 3\n    options_for_third_digit = 3  # Can be 0, 2, or 3\n\n    total_numbers = options_for_first_digit * options_for_second_digit * options_for_third_digit\n\n    return total_numbers\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_hotdogs = 12\n    cost_per_hotdog = cost_per_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money_in_pence = 200  # converting £2 to pence\n    ans = total_money_in_pence // price_per_bag\n    return ans\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"63{digit}25\")\n        if num % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let x be the number of acorns Chip had originally\n    # Then Dale had total_acorns - x\n    # After giving 14 acorns, Chip has x - 14\n    # And Dale has (total_acorns - x) + 14\n    # Since they have the same number after the exchange:\n    # x - 14 = (total_acorns - x) + 14\n    # Solving for x:\n    x = (total_acorns + 14 * 2) // 2\n    return x\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # Number of ways to arrange the books using formula for permutations of identical items:\n    # n! / (n1! * n2! * ... * nk!), where n is the total number of items, and n1, n2, ..., nk are the counts of identical items\n    ans = factorial(total_books) / (factorial(fiction_books) * factorial(comic_books))\n\n    return int(ans)\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(2, 100, 2):\n        if number % 4 == 0 and number % 3 == 0 and (number**0.5).is_integer():\n            return number\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    primes_sum = 0\n    count = 0\n\n    # iterate from the largest prime number less than 51\n    for prime in reversed(primes):\n        while primes_sum + prime <= 51:\n            primes_sum += prime\n            count += 1\n\n        if primes_sum == 51:\n            break\n\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 41))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_kg = 2.5\n    pie_kg = 750 / 1000\n    juice_kg = 1025 / 1000\n\n    remaining_kg = total_kg - pie_kg - juice_kg\n\n    return remaining_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    \n    total_people = people_in_front_of_amy + amy_position_from_back\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    duration_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / duration_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Worst case: drawing all balls of one color (5) and then another color (5)\n    # And then we draw one more ball to ensure we have the third color.\n    worst_case = 5 + 5 + 1\n    return worst_case\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    total_books = 13 + 6  # 13 books to the left of the favorite book and 6 to the right\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n    \nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins = symbols('gigi lily coins')\n\n    equation1 = Eq(gigi + coins, 3 * (lily + coins))     # Gigi has 3 times the coins of Lily after class\n    equation2 = Eq(gigi, 120)                            # Gigi had 120 coins before class\n    equation3 = Eq(lily, 24)                             # Lily had 24 coins before class\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins))\n\n    return solutions[coins]\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two pieces of the ribbon\n    shorter_piece, longer_piece = symbols('shorter_piece longer_piece')\n    \n    # Equation representing that one piece is twice as long as the other\n    equation1 = Eq(longer_piece, 2 * shorter_piece)\n    \n    # Equation representing the total length of the ribbon\n    equation2 = Eq(shorter_piece + longer_piece, 12.75)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shorter_piece, longer_piece))\n    \n    return solutions[longer_piece]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if not isprime(num):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    father_age_at_brian_14 = 41\n    brian_age_at_brian_14 = 14\n    age_difference = father_age_at_brian_14 - brian_age_at_brian_14\n\n    for i in range(1, age_difference):\n        brian_future_age = brian_age_at_brian_14 + i\n        father_future_age = father_age_at_brian_14 + i\n        if str(brian_future_age).zfill(2) == str(father_future_age)[::-1]:\n            return brian_future_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # since it's a 3-digit number, hundreds can't be 0\n        for tens in range(10):  # tens can be anything from 0 to 9\n            for ones in range(1, 10, 2):  # ones digit of an odd number must be odd\n                if hundreds + tens + ones == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since it takes 5 minutes to boil an egg,\n    # and assuming we have only one pot to boil the eggs,\n    # we can boil the eggs one after another taking 5 minutes for each egg.\n    # Thus, for 3 eggs, it will take 3 times 5 minutes.\n    \n    time_per_egg = 5\n    total_eggs = 3\n\n    total_time = time_per_egg * total_eggs\n\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = -(-students // cabin_capacity)\n    return cabins_needed\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16  # Dough in kg\n    dough_per_cookie_g = 45    # Dough per cookie in g\n    dough_per_brownie_g = 150  # Dough per brownie in g\n    num_cookies = 240          # Number of cookies\n    num_brownies = 2           # Number of brownies\n\n    initial_dough_g = initial_dough_kg * 1000  # Convert kg to g\n    total_dough_used_g = (dough_per_cookie_g * num_cookies) + (dough_per_brownie_g * num_brownies)\n    remaining_dough_g = initial_dough_g - total_dough_used_g\n\n    remaining_dough_kg = remaining_dough_g / 1000  # Convert g to kg\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # Dan took in 1000 calories yesterday.\n    yesterday_calories = 1000\n    # To take in less calories today, the number of calories has to be strictly less than yesterday.\n    # Represented by an inequality: today_calories < yesterday_calories\n    today_calories = yesterday_calories - 1  # This ensures today's intake is less\n    return today_calories\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    biscuits_left_after_first_day = 10 * 2 + 2\n    total_biscuits = (biscuits_left_after_first_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, d = symbols('n a1 d')\n    # Sum of first four numbers: a1 + (a1 + d) + (a1 + 2d) + (a1 + 3d)\n    eq1 = Eq(a1 * 4 + 6 * d, 124)\n    # Sum of last four numbers: (a1 + (n - 4)d) + ... + (a1 + (n - 1)d)\n    eq2 = Eq(4 * a1 + (4 * n - 10) * d, 156)\n    # Sum of all the numbers: n/2 * (2*a1 + (n - 1)*d)\n    eq3 = Eq(n / 2 * (2 * a1 + (n - 1) * d), 210)\n\n    solutions = solve((eq1, eq2, eq3), (n, a1, d))\n    # We filter for the positive integer solution since the sequence length can't be negative or non-integer\n    ans = [s[0] for s in solutions if s[0] > 0 and s[0].is_integer]\n    return ans[0]\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_money = 100\n    days_passed = 15\n    for day in range(1, days_passed + 1):\n        if day % 2 == 1:  # deposit day\n            total_money += 5\n        else:  # spend day\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n\n    # The 1004th number's position in the pattern\n    position = (1004 % pattern_length) - 1  # -1 to account for zero-based indexing\n\n    # If position is -1, that means it is the last number of the pattern\n    if position == -1:\n        position = pattern_length - 1\n\n    # Return the number at the calculated position\n    return pattern[position]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    difference = 3\n    last_term = 298\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    # Given that the summation happens between every third number from 102 to 999\n    # we can calculate the total number of terms that will be included in the \n    # summation with the following formula: \n    # number of terms = ((last_term - first_term) / step) + 1\n    first_term = 102\n    last_term = 999\n    step = 3\n    num_terms = ((last_term - first_term) // step) + 1\n\n    # Now we can calculate the sum of an arithmetic series using the formula:\n    # sum = (num_terms / 2) * (first_term + last_term)\n    ans = (num_terms / 2) * (first_term + last_term)\n    \n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    equation1 = Eq(18*friends + 41, chocolates)\n    equation2 = Eq(23*friends, chocolates + 34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    remaining_chocolates = solutions[chocolates] - 20*solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    from itertools import combinations\n    from math import sqrt\n\n    # Define the conditions given by students A, B, C, D, and E\n    conditions = [\n        lambda x: x % 27 == 0,  # A's condition\n        lambda x: x % 7 == 0,   # B's condition\n        lambda x: sum(int(d) for d in str(x)) == 17,  # C's condition\n        lambda x: sqrt(x).is_integer(),               # D's condition\n        lambda x: 89100 % x == 0                      # E's condition\n    ]\n\n    # Check all 3-digit numbers\n    ans = None\n    for num in range(100, 1000):\n        # Determine which conditions each number meets and store as True/False\n        meets_conditions = [cond(num) for cond in conditions]\n\n        # Check all possible combinations of three conditions being true\n        for true_conditions in combinations(meets_conditions, 3):\n            if sum(true_conditions) == 3 and sum(meets_conditions) == 3:\n                ans = num\n                break  # We have found the number, no need to check further\n\n        if ans:  # Break out of the outer loop if the number is found\n            break\n\n    return ans\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n\n    spent_on_book = 0.15 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n\n    spent_on_dvd = 0.30 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    result = 5992 // 7\n    return result\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Mulan can do more push-ups than the best boy soldier, who can do 50 push-ups\n    mulan_pushups = 'Mulan > 50'\n    return mulan_pushups\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n    balloons_remaining = total_balloons_needed - (balloons_blown_up - balloons_burst)\n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1\n    games_played = 24\n    remaining_games = total_games - games_played\n    return remaining_games\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    candies = 88\n    children = 8\n    min_candies_for_most = 1\n\n    while True:\n        # Allocate at least one candy to each child and increase\n        # the count for the child with the most candies\n        allocated_candies = sum(range(min_candies_for_most - (children - 1), min_candies_for_most + 1))\n        if allocated_candies <= candies:\n            # There are enough candies left for distribution\n            min_candies_for_most += 1\n        else:\n            # The child with the most candies received their max possible\n            break\n\n    # The last increment went over the limit, so subtract one to get the correct count\n    ans = min_candies_for_most - 1\n    return ans\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B\n    stones_in_A = 20\n    stones_in_B = 20 - 4\n\n    # To win, Jerry must leave both stacks with the same number of stones\n    # because from that point on, whatever Tom takes, Jerry can take the same\n    # amount from the other stack, thus ensuring Jerry wins.\n    stones_to_take = stones_in_B - stones_in_A\n\n    # If stones_to_take is negative, Jerry must take stones from stack A\n    # else from stack B, to make both stacks even\n    stack = 'A' if stones_to_take > 0 else 'B'\n    stones_to_take = abs(stones_to_take)\n\n    return f'Jerry must take {stones_to_take} stone(s) from Stack {stack}.'\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) // 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x\n    # Let the number of boys be 9x\n    # There are 16 more boys than girls, so 9x - 7x = 16\n    # Solve for x\n    x = 16 / 2\n    \n    # Calculate the total number of students in class 1A\n    total_students = 7*x + 9*x\n    return int(total_students)\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    number_of_trees = circumference // interval\n    return number_of_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = 37 / 2 * (1 + 1 + 3 * (37 - 1))  # Sum of the arithmetic sequence without the mistake\n    mistake_difference = correct_sum - 2011  # The difference between the correct sum and the actual sum\n    mistake_position = (mistake_difference + 3) / 6  # The position of the pupil who made the mistake\n\n    return int(mistake_position)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since we are dealing with consecutive natural numbers and have to find the one with the most balls,\n    # we can setup an equation by considering the 5 consecutive numbers as (x - 2), (x - 1), x, (x + 1), (x + 2)\n    # Their sum should be 160.\n    # (x - 2) + (x - 1) + x + (x + 1) + (x + 2) = 160\n    # 5x = 160\n    # x = 160 / 5\n    x = 160 // 5\n    \n    # The student with the most balls has (x + 2) balls\n    most_balls = x + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for s in range(1, 9 + 1):\n        for h in range(1, 9 + 1):\n            m = 100*h + s\n            if m == 67 * (h + s):\n                reversed_m = 10*h + s*100\n                return reversed_m // (h + s)\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    power = 30\n    cycle = [base**i % 10 for i in range(1, 5)]  # Calculate the last digit for the first four powers of 8\n    ans = cycle[(power % 4) - 1]  # Since the pattern repeats every four powers, we use modulo 4\n\n    return ans\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    \n    num_days = total_pages / pages_per_day\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n    total_score = 52\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * points_correct) + (incorrect_answers * points_incorrect)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while True:\n        total_peaches = sum(range(1, days + 1))\n        if total_peaches >= 100:\n            break\n        days += 1\n    return days - 1  # Subtract 1 because we overshoot the 100 peaches\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    common_difference = 5\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 2 * 100  # Convert 2 meters to centimeters\n    piece_length_cm = 6  # Each piece is 6 cm\n\n    # Calculate how many pieces can be cut from the stick\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    result = (0.3 * 100) / 150\n    return result\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # let x be the number of trees boys planted\n    x = Symbol('x')\n\n    # girls planted 12 more trees than boys\n    equation = Eq(x + (x + 12), 100)\n\n    # solve for x\n    boys_trees = solve(equation, x)\n\n    return boys_trees[0]\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    num_ways = comb(total_balls, balls_to_select)\n\n    return num_ways\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = 0\n    for n in range(1, 21):\n        if n % 6 == 1:\n            sum_of_numbers += n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.48\n    \n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Starting with the given complex fraction and breaking it down:\n    # 13/10 = 1 + 1 / (a + 1 / (b + 1 / c))\n    # This implies that:\n    # (13/10) - 1 = 1 / (a + 1 / (b + 1 / c))\n    # 3/10 = 1 / (a + 1 / (b + 1 / c))\n    # By taking the reciprocal, we get:\n    # a + 1 / (b + 1 / c) = 10 / 3\n    # a + (1 / (10 / 3 - a)) = 10 / 3\n    # Since a, b, and c are whole numbers, we can iteratively find values for them\n    # that will satisfy the equation, beginning with 'a'.\n\n    # Start with the right-hand side of the equation\n    rhs = 13 / 10 - 1\n\n    # Since 'a' is a whole number and the denominator after subtracting 1 should be a whole number too\n    # we can find 'a' by taking the reciprocal of rhs minus 1 and then taking the floor of it.\n    a = int(1 / rhs)\n    \n    # Now update rhs for the next part by subtracting 'a' and taking the reciprocal.\n    rhs = 1 / (rhs - a)\n\n    # Repeat the process for 'b'\n    b = int(1 / rhs)\n    rhs = 1 / (rhs - b)\n\n    # And finally 'c'\n    c = int(rhs)\n\n    # Now calculate and return the final answer\n    answer = a + 2 * b + 3 * c\n    return answer\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Since the dwarfs were born in consecutive years, their ages form an arithmetic sequence.\n    # Let the age of the youngest be x. Then the ages are x, x+1, x+2, ..., x+6 (7 terms).\n    # The sum of the ages of the youngest three is 42: x + (x+1) + (x+2) = 42\n    sum_youngest_three = 42\n    # Calculate x, the age of the youngest dwarf\n    x = (sum_youngest_three - 3) // 3\n\n    # The sum of the ages of the oldest three is: (x+4) + (x+5) + (x+6)\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each digit\n    a, b, c, d = symbols('a b c d')\n\n    # Equation representing the problem\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    # Solve the equation for the variables\n    solutions = solve(equation, (a, b, c, d))\n\n    # Find the value of \"abcd\"\n    abcd = 1000*solutions[a] + 100*solutions[b] + 10*solutions[c] + solutions[d]\n\n    return abcd\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    terms = [19, 199, 1999, 19999, 199999]\n    fractional_part = 4/5\n    total_fractional_part = fractional_part * len(terms)\n    fractional_sum = int(total_fractional_part)\n    fractional_remainder = total_fractional_part - fractional_sum\n\n    total_whole_part = sum(terms) + fractional_sum\n    \n    ans = total_whole_part + fractional_remainder\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    return (5 / 8) * 408\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    total_current_age = janice_age + sister_age\n    total_future_age = 35\n    years_needed = total_future_age - total_current_age\n\n    return years_needed\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, n+1)) for n in range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the different types of sweets\n    fruit_drops, milk_chocolates, total_sweets = symbols('fruit_drops milk_chocolates total_sweets')\n\n    # Given condition equations\n    equation1 = Eq(fruit_drops, 6)\n    equation2 = Eq(fruit_drops, 2/7 * milk_chocolates)\n    equation3 = Eq(milk_chocolates, 3/4 * total_sweets)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (fruit_drops, milk_chocolates, total_sweets))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Dad's age was 5 times the son's age 6 years ago\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    # The sum of the dad's and son's current age is 78\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let f be the price of one football and v be the price of one volleyball.\n    from sympy import symbols, Eq, solve\n\n    f, v = symbols('f v')\n    # The first condition states that 1 football and 2 volleyballs cost $60.\n    equation1 = Eq(f + 2 * v, 60)\n    # The second condition states that 2 footballs cost $60 - $16.\n    equation2 = Eq(2 * f, 60 - 16)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (f, v))\n\n    return solutions[v]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    # Since the mode is 7, there must be at least two members with this age.\n    # The mean age is 9, which means the sum of their ages is 5 * 9 = 45.\n    # The median age is 8 means the middle number when the ages are sorted is 8.\n    # The range of their ages is 6, so the maximum age is the mode age 7 plus the range, i.e., 7 + 6 = 13.\n\n    # Let's assign the ages to the members, with at least two members being 7 years old.\n    # Let the ages be [a, 7, 8, 7, b] where a is the youngest and b is the oldest, as the mode is 7.\n\n    # Since the sum of the ages is 45, we have a + 7 + 8 + 7 + b = 45.\n    # This simplifies to a + b = 23.\n\n    # Given that the range is 6, and the largest age is 13 (7 + 6), we have two possibilities for a and b:\n    # a = 7 and b = 13 (as 13 - 7 = 6)\n    # a = 10 and b = 13 (since b must be 13 to have a range of 6)\n\n    # Since there should be three different averages and the mode is 7, we should not have a as 7,\n    # because it will increase the count of age 7 and we will not have three different averages if a is 7.\n    # The ages sorted will be [7, 7, 8, 10, 13]\n\n    return 10  # So the second oldest member is 10 years old.\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Digits guessed and John's replies\n    guesses = [\"1703\", \"2745\", \"3541\"]\n    # Correct solutions based on John's replies\n    correct_positions = [\"xx0x\", \"----\", \"----\"]\n    wrong_positions = [\"----\", \"2x4x\", \"3541\"]\n    \n    # Initialize possible digits for each position\n    possibles = [set(range(10)) for _ in range(4)]\n    \n    # Exclude possibilities based on correct positions\n    for i, digits in enumerate(correct_positions):\n        for pos, digit in enumerate(digits):\n            if digit != 'x' and digit != '-':\n                # Set the possible digit if the position is correct\n                possibles[pos] = {int(digit)}\n            elif digit == '-':\n                # Eliminate the digit if the position is known to be incorrect\n                possibles[pos].discard(int(guesses[i][pos]))\n    \n    # Exclude possibilities based on wrong positions\n    for i, digits in enumerate(wrong_positions):\n        for pos, digit in enumerate(digits):\n            if digit not in ['x', '-']:\n                # The digit is correct but in the wrong position, \n                # it can be anywhere except the current position\n                for k in range(4):\n                    if k != pos:\n                        possibles[k].add(int(digit))\n                possibles[pos].discard(int(digit))\n                \n    # The final number will be a string with the unique possibility for each position\n    ans = ''.join(str(possibles[i].pop()) for i in range(4))\n    return ans\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    total_number = 1000\n    less_number = 630\n    ans = total_number - less_number\n    \n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = sum([i ** 3 for i in range(1, n + 1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    # The series is an arithmetic progression with a common difference of 2,\n    # starting with the first term as 1 and the last term as 49.\n    first_term = 1\n    last_term = 49\n    common_difference = 2\n\n    # Number of terms can be calculated as ((last - first) / difference) + 1\n    num_terms = ((last_term - first_term) / common_difference) + 1\n\n    # Sum of arithmetic series is given by n/2 * (first_term + last_term)\n    sum_series = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_series)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n    num_books = 3\n    arrangements = factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from math import factorial\n\ndef solution():\n    # Since A cannot stand on the first or the last, there are only 3 positions available for A\n    positions_for_A = 3\n    # For every position that A takes, the remaining 4 people can be arranged in 4! ways\n    arrangements_for_others = factorial(4)\n    # Total arrangements is the product of the two possibilities\n    total_arrangements = positions_for_A * arrangements_for_others\n    return total_arrangements\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "import math\n\ndef solution():\n    num_people = 16\n    num_rounds = math.ceil(math.log2(num_people))\n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Given values in the problem statement\n    pink_flowers = 3\n    yellow_to_pink_difference = 7\n    red_multiplier = 3\n\n    # Calculate the number of yellow flowers\n    yellow_flowers = pink_flowers + yellow_to_pink_difference\n\n    # Calculate the number of red flowers\n    red_flowers = red_multiplier * yellow_flowers\n\n    # Calculate the total number of red and yellow flowers\n    total_red_and_yellow = red_flowers + yellow_flowers\n\n    return total_red_and_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of girls in the morning\n    g = symbols('g') \n    # In the morning, the number of boys is 1.5 times the number of girls\n    b = 1.5 * g\n    \n    # In the afternoon, 12 boys and 12 girls join\n    new_b = b + 12\n    new_g = g + 12\n    \n    # The new ratio of boys to girls is 19 to 14\n    ratio_equation = Eq(new_b / new_g, 19 / 14)\n    \n    # Solve the equation to find the original number of girls\n    original_girls = solve(ratio_equation, g)\n    \n    # Calculate the original number of boys using the original number of girls\n    original_boys = 1.5 * original_girls[0]\n    \n    # Calculate the total number of children in the afternoon\n    total_children = (original_boys + original_girls[0]) + 24\n    \n    return int(total_children)\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit: from 1 to 9\n        for tens in range(0, 10):  # Tens digit: from 0 to 9\n            for units in range(1, 10):  # Units digit: from 1 to 9\n                if tens < hundreds and tens < units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    max_pencils = 48 // 9  # The maximum possible boxes of pencils she could buy\n    for pencils in range(max_pencils + 1):\n        notebooks = 10 - pencils  # The rest are notebooks\n        total_cost = notebooks * 3 + pencils * 9\n        if total_cost == 48:\n            return pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_rows = 9\n    first_floor_seats_per_row = 36\n    total_students = 500\n\n    first_floor_capacity = first_floor_rows * first_floor_seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    # Sequence follows a pattern of multiplying by 2 each time\n    previous_term = 56\n    next_term = previous_term * 2\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Variables for the sequence\n    n = 6  # We have 6 numbers\n    total_sum = 510  # The sum of the numbers\n    \n    # Mean calculation: total sum divided by the number of terms\n    mean = total_sum / n\n    \n    # Median: In a sequence of 6 consecutive even numbers, the median is the average of the 3rd and 4th numbers.\n    # Define the first number of the sequence as x. Then the numbers are x, x+2, x+4, x+6, x+8, x+10.\n    # The sum is x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) = 6x + 30.\n    # We know that the sum is 510, so we can solve for x.\n    x = (total_sum - 30) / n\n    \n    # Calculate the median\n    third_number = x + 4\n    fourth_number = x + 6\n    median = (third_number + fourth_number) / 2\n    \n    # Difference between the mean and the median\n    difference = abs(mean - median)\n    \n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        i = factor\n        while n // i:\n            count += n // i\n            i *= factor\n        return count\n    \n    zeros_2 = count_factors(50, 2)\n    zeros_5 = count_factors(50, 5)\n    \n    ans = min(zeros_2, zeros_5)\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of rounds they played\n    # Helen's new number of cards is 18 + x\n    # Oliver's new number of cards is 22 - x\n    # Since Helen has 10 more cards than Oliver, we can write the equation\n    # 18 + x = (22 - x) + 10\n    # Simplify the equation to solve for x\n    # 18 + x = 22 - x + 10\n    # 2x = 22 + 10 - 18\n    # 2x = 14\n    # x = 7\n\n    # So they played 7 rounds, and Helen won all of them, so she has 18 + 7 cards now.\n    return 18 + 7\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    start_height = 12\n    climb_up1 = 23\n    climb_down = 31\n    climb_up2 = 17\n\n    final_height = start_height + climb_up1 - climb_down + climb_up2\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes - strawberries, 448)  # mangoes is 448g more than strawberries\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))  # after giving away 900g, strawberries is twice the mangoes\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n    \n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    for i in range(1, 40):\n        if i + (i + 1) + (i + 2) + (i + 3) + (i + 4) == 40:\n            return i\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    result = solve(equation, x)\n    return result[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Subtract the prime numbers and 1 (since 1 is neither prime nor composite)\n    composite_numbers = total_numbers - prime_numbers - 1\n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef is_divisible_by_9(num):\n    return sum(int(digit) for digit in num) % 9 == 0\n\ndef solution():\n    digits = '0134689'\n    all_five_digit_numbers = [''.join(p) for p in permutations(digits) if p[0] != '0']\n    divisible_by_9 = [int(num) for num in all_five_digit_numbers if is_divisible_by_9(num)]\n    max_difference = max(divisible_by_9) - min(divisible_by_9)\n    return max_difference // 9\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n = 12  # position of the given term in the sequence\n    a_n = 57  # the nth term\n    m = 4  # position of the other given term\n    a_m = 39  # the mth term\n    \n    # Formula for nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # a_n - a_m = (n-m)d -> d = (a_n - a_m)/(n-m) (where d is the common difference)\n    d = (a_n - a_m) / (n - m)\n    \n    # Now find the first term a_1 using the formula: a_n = a_1 + (n-1)d\n    # Rearrange the formula to find a_1: a_1 = a_n - (n-1)d\n    a_1 = a_n - (n - 1) * d\n    \n    return a_1\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    max_number = int(''.join(sorted(map(str, digits), reverse=True)))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4000404\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_in_30_percent_solution = 30 * 0.30\n    salt_in_20_percent_solution = 20 * 0.20\n    total_salt = salt_in_30_percent_solution + salt_in_20_percent_solution\n\n    total_solution_weight = 30 + 20  # without additional water\n    water_needed = total_salt / 0.10 - total_solution_weight\n\n    return water_needed\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n    difference = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declare a single symbol since all boxes contain the same integer\n    x = symbols('x')\n    \n    # Define the equation based on the given puzzle\n    equation = Eq(x * x + x, 380)\n    \n    # Solve for x\n    solutions = solve(equation, x)\n    \n    # Filter out the non-integer solutions (since we're looking for an integer)\n    integer_solution = [s for s in solutions if s.is_integer]\n    \n    # There should only be one integer solution\n    return integer_solution[0]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # meters per minute\n    vicky_speed = 250  # meters per minute\n    race_distance = 3000  # meters\n\n    time_johnson = race_distance / johnson_speed\n    time_vicky = race_distance / vicky_speed\n    difference_in_time = time_vicky - time_johnson\n\n    return difference_in_time\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee 29 balls of one color, \n    # we must take all balls of other colors plus one more ball.\n    \n    # To make sure we get 29 balls of one color, we need to take all the balls\n    # of the other colors (since we have maximum 29 - 1 = 28 balls of the other colors).\n    all_other_colors = 80 + 40 # Since 30 is the least and we are ensuring the worst case.\n    \n    # Now, we want to make sure we have 28 of another color, we must take all the balls\n    # of the last color (since we have maximum 28 - 1 = 27 balls of the last color).\n    last_color = 30 # Since 30 is the least number of balls of a single color.\n    \n    # Finally, to make sure we have 10 balls of the last color, we do not need to consider\n    # this in isolation as we have already taken all the balls of the other colors.\n    \n    # The minimum number of balls we need to pick to satisfy the condition is therefore:\n    min_balls = all_other_colors + last_color + 1 # Plus one to ensure we get the 29th ball\n    \n    return min_balls\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # In the worst case, we draw two cards from each number (26 cards) without getting three of any number.\n    # At this point, drawing one more card must give us a third card of some number.\n    total_drawn = 26 + 1  # two of each number + 1\n    \n    return total_drawn\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n    \n    proportion = len(prime_numbers) / total_numbers\n    \n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n\n    # Sum of known numbers\n    total_known_sum = sum(known_numbers)\n    # Total sum of all numbers based on their mean\n    total_sum = mean_value * total_numbers\n    # Missing number is the difference between the calculated total sum and the known sum\n    missing_number = total_sum - total_known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of lime solution transferred from each container\n    x = symbols('x')\n\n    # Initial amounts of lime in each bottle\n    lime_in_A = 0.10 * 5 \n    lime_in_B = 0.20 * 3 \n\n    # Amount of lime in each bottle after x liters are transferred\n    lime_in_A_after = lime_in_A - (0.10 * x) + (0.20 * x)\n    lime_in_B_after = lime_in_B - (0.20 * x) + (0.10 * x)\n\n    # Total volume of solution in each bottle after the transfer\n    volume_A_after = 5 - x + x\n    volume_B_after = 3 - x + x\n\n    # Setting up the equation: concentration in A after = concentration in B after\n    equation = Eq(lime_in_A_after / volume_A_after, lime_in_B_after / volume_B_after)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    return 1275 - 1 + 51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFGH', 8):\n        if perm.index('C') in range(perm.index('A') + 1, perm.index('B')) or \\\n           perm.index('C') in range(perm.index('B') + 1, perm.index('A')):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    # Define the prices for notebooks and calendars\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n\n    # Initialize a set to store unique price combinations\n    unique_price_combinations = set()\n\n    # Iterate through all possible combinations of notebook and calendar prices\n    for notebook in notebook_prices:\n        for calendar in calendar_prices:\n            # Calculate the total price and add it to the set of unique combinations\n            total_price = notebook + calendar\n            unique_price_combinations.add(total_price)\n\n    # The number of unique total prices is the number of different combinations\n    return len(unique_price_combinations)\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    sequence_str = \"123\"\n    sum_expression = 0\n\n    for i in range(1, 124):\n        sum_expression += int(sequence_str * i)\n    \n    return (sum_expression // 100) % 10\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    original_length = 90\n    new_length = original_length - 70.5\n    length_ratio = 5\n    breadth_ratio = 2\n\n    new_breadth = (new_length * breadth_ratio) / length_ratio\n    max_breadth_size = int(new_breadth)\n\n    return max_breadth_size\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total = sum(coins)\n    for coin in coins:\n        if total - coin == 2 * (total - coin - coin):\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan finished 200 meters\n    jaan_speed = 8  # Jaan's speed in meters per second\n    kane_distance = 200 - 12.5  # Kane was 12.5 meters behind\n    \n    # Time taken by Jaan to finish the race\n    jaan_time = jaan_distance / jaan_speed\n    \n    # Kane's speed is distance divided by Jaan's time to cover that distance\n    kane_speed = kane_distance / jaan_time\n    \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10  # 110p is £1.10\n\n    total_price = cake_price + milk_price\n    actual_pay = total_price - voucher\n    \n    return actual_pay\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time in hours John takes to paint the house alone\n    # Let y be the time in hours Raj takes to paint the house alone\n    # Let z be the time in hours Pete takes to paint the house alone\n    x, y, z = symbols('x y z')\n\n    # According to the problem, the rates of work being done add up to the work done together\n    equation1 = Eq(1/x + 1/y + 1/z, 1)  # Together they finish the job in 1 hour\n\n    # John and Raj finish the job in 1 hour and 12 minutes -> 1.2 hours\n    equation2 = Eq(1/x + 1/y, 1/1.2)\n\n    # Raj and Pete finish the job in 1 hour and 30 minutes -> 1.5 hours\n    equation3 = Eq(1/y + 1/z, 1/1.5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Convert Raj's time to finish the job alone to minutes\n    raj_minutes = solutions[y]*60\n\n    return raj_minutes\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1 + 1/4\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n    \n    # Earnings for normal hours\n    earnings_normal_hours = normal_hours * normal_rate\n    \n    # Earnings for overtime hours\n    earnings_overtime_hours = overtime_hours * normal_rate * overtime_multiplier\n    \n    # Total earnings\n    total_earnings = earnings_normal_hours + earnings_overtime_hours\n    \n    return total_earnings\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    # The sum of the current ages of both brothers\n    equation1 = Eq(elder + younger, 42)\n\n    # A few years ago, elder's age was the same as current younger's age, and\n    # the younger was half of elder's current age\n    equation2 = Eq(younger - (elder - younger), elder/2)\n    \n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):    # Check two-digit numbers\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Since the number is 99 digits long and the repeating section \"928\" has 3 digits, \n    # it means the repeating section occurs 99 // 3 = 33 times.\n    repeating_section = '928'\n    num_repeats = 99 // len(repeating_section)\n\n    # The 99-digit number can be considered as \"928\" repeated 33 times.\n    full_number = repeating_section * num_repeats\n\n    # Convert the string to an integer\n    num = int(full_number)\n\n    # Calculate remainder when divided by 9 using modulo operator\n    remainder = num % 9\n\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Taking out 8 white + 7 blue + 5 green guarantees having at least 3 of each color\n    # But we want at least 3 of the SAME color, so we need to take one more to ensure that\n    # Hence, we need one more ball to guarantee at least 3 of the same colour\n\n    return 8 + 7 + 5 + 1\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number / 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams we are trying to find\n    n = symbols('n')\n    \n    # Each team plays each of the others twice, so the total matches are n * (n-1)\n    # However, since this counts each match twice (once for each team), we divide by 2\n    # Therefore, the equation is n * (n - 1) / 2 = total matches, where total matches is given as 30\n    equation = Eq(n * (n - 1) / 2, 30)\n    \n    # Solve for n\n    solutions = solve(equation, n)\n    \n    # We will have two solutions, one positive and one negative, we only care for the positive integer solution\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_needed = (total_kg * boxes_for_14kg) / 14\n\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 40.\n    # Since every year, both George and his sister grow older by 1 year,\n    # after x years, the total increase in their ages will be 2 * x.\n    # Thus, their current sum of ages (34 years) plus the total increase in age (2 * x years)\n    # should be equal to 40 years after x years.\n    # This leads to the equation: 34 + 2 * x = 40.\n    \n    # Solving for x:\n    x = (40 - 34) / 2\n\n    return x\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    participants_per_country_to_guarantee = 5\n\n    # According to the Pigeonhole Principle:\n    # (Number of countries - 1) * participants_per_country_to_guarantee + 1\n\n    ans = (countries - 1) * (participants_per_country_to_guarantee - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    ans = solutions[x] + solutions[y] + solutions[z]\n    return ans\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = -(-students // tables_per_row)  # Ceiling division\n\n    return rows_needed\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of the rope and y be the circumference of the tree.\n    # We have two equations based on the problem statement:\n    # 10y - x = 3 (10 turns around the tree left 3 meters)\n    # 12y - x = -3 (12 turns is missing another 3 meters)\n\n    # We can solve this system of equations for y (circumference of the tree).\n    # Subtracting the first equation from the second gives us:\n    # (12y - x) - (10y - x) = -3 - 3\n    # 2y = -6\n    # y = -6 / 2\n    y = -3\n\n    # Now, we use the value of y to find the length of the rope (x) using the first equation.\n    # 10y - x = 3\n    # 10 * (-3) - x = 3\n    # -30 - x = 3\n    # x = -30 - 3\n    x = -33\n\n    # Finally, we find how many meters of the rope are left after 8 turns:\n    # 8 turns would wrap 8y meters, so the length left is x - 8y.\n    # x - 8y = -33 - 8 * (-3)\n    # x - 8y = -33 + 24\n    # x - 8y = -9\n    ans = -9\n\n    return ans\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and B != 0:\n            num1 = A * 1000 + B * 100 + B * 10 + A\n            num2 = B * 1000 + C * 100 + D * 10 + B\n            num3 = C * 1000 + B * 100 + D * 10 + D\n            if num1 + num2 == num3:\n                return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1999 - 1000 + 1\n    numbers_greater_than_1499 = 1999 - 1499\n    \n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the total amount of money Mary initially had is 'x'.\n    x = symbols('x')\n\n    # Mary spent 3/7 of her money on a bag.\n    spent_on_bag = (3/7) * x\n\n    # The amount not used is 4/7 of her money, as 1 - 3/7 = 4/7.\n    not_used = (4/7) * x\n\n    # The difference between the amount spent and not used is £12.\n    equation = Eq(spent_on_bag - not_used, -12)\n\n    # Solve the equation for x to find out the total amount.\n    total_money = solve(equation, x)\n\n    # Finally, calculate how much Mary spent on the bag.\n    amount_spent_on_bag = (3/7) * total_money[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    final_number = 28\n    initial_number = (final_number - 6) / 2\n    return initial_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let x be the age of the fourth dwarf (the middle one in the sequence)\n    # Then the ages of the youngest three are (x-3), (x-2), (x-1)\n    # Their sum is 42: (x-3) + (x-2) + (x-1) = 42\n    # Simplify the equation: 3x - 6 = 42\n    # Solve for x: x = (42 + 6) / 3\n    \n    x = (42 + 6) / 3\n    \n    # The ages of the oldest three are (x+1), (x+2), (x+3)\n    # Their sum is: (x+1) + (x+2) + (x+3)\n    sum_oldest_three = (x + 1) + (x + 2) + (x + 3)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    n = 111\n    k = 7\n    ans = n - sum(range(1, k))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    # The given formula for the sum of squares of the first n natural numbers is:\n    # 1² + 2² + 3² + ... + n² = (1/6)*n*(n+1)*(2n+1)\n    # We use this formula to calculate the sum of squares of numbers from 1 to n,\n    # then subtract the sum of squares of numbers from 1 to (m-1) where m is the starting number 5.\n    \n    # Our sequence starts at 5 and goes up to 100 in steps of 5, so we divide by 5 to get the equivalent natural number sequence.\n    n = 100 // 5\n    m = 5 // 5\n    \n    # Calculate the sum of squares for 1 to n using the formula:\n    sum_squares_n = (1/6) * n * (n + 1) * (2 * n + 1)\n    \n    # Calculate the sum of squares for 1 to (m-1)\n    sum_squares_m_minus_1 = (1/6) * (m - 1) * m * (2 * (m - 1) + 1)\n    \n    # Since our sequence is in steps of 5, we need to multiply by 5^2 to adjust for the scale.\n    scale_factor = 5 ** 2\n    \n    # Calculate the final answer by taking the difference and scaling\n    ans = (sum_squares_n - sum_squares_m_minus_1) * scale_factor\n    \n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let a, b, c be the number of toys made by Factory A, B, and C.\n\n    # Total toys made by all factories is 659\n    total_toys = 659\n\n    # Toys made by A and B is 447\n    a_plus_b = 447\n\n    # Toys made by B and C is 335\n    b_plus_c = 335\n\n    # We can calculate toys made by Factory A as (toys by A and B) - (toys by B and C) + total toys\n    # This simplifies to toys by A = total_toys - toys by B and C (since Factory B's count is included twice in the calculation)\n    a = total_toys - b_plus_c\n\n    # Now we can find out how many toys Factory B made by subtracting Factory A's production from the sum of A and B's production\n    b = a_plus_b - a\n\n    return b\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months = debt / monthly_salary\n    return months\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    girls = (total_pupils + difference) // 2\n\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    file, storybook = symbols('file storybook')\n    \n    equation1 = Eq(7*file + 4*storybook, 108)\n    equation2 = Eq(5*file + 3*storybook, 80)\n    \n    solutions = solve((equation1, equation2), (file, storybook))\n    \n    total_cost = solutions[file] + solutions[storybook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_average = 13\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_average\n    total_trays = initial_trays + 1\n    new_total_sausages = total_initial_sausages + additional_sausages\n    new_average = new_total_sausages / total_trays\n\n    return new_average\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10):\n                if hundreds > tens and units > tens and hundreds != units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    mixed_number = 3 + 1/2\n    divisor = 1/4\n\n    ans = mixed_number / divisor\n\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    train_length = 137\n    first_bridge_length = 263\n    first_bridge_time = 20  # seconds\n    second_bridge_time = 27  # seconds\n\n    # Total distance covered by train on the first bridge\n    total_first_distance = train_length + first_bridge_length\n    # Train's speed (distance/time)\n    train_speed = total_first_distance / first_bridge_time\n\n    # Total distance covered by train on the second bridge\n    # Since the speed is the same, we can use the same speed to calculate the second distance\n    total_second_distance = train_speed * second_bridge_time\n    # Length of the second bridge\n    second_bridge_length = total_second_distance - train_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    average = total / 2\n    amount_to_give = brenda - average\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue + red, 125)  # Total number of balls\n    equation2 = Eq(2/5 * blue, 3/5 * red)  # The proportion condition\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial as fact\n\ndef solution():\n    ways = 0\n    # Assign at least one book to each student\n    for i in range(1, 6):  # Student A gets 1 to 5 books\n        for j in range(1, 7 - i):  # Student B gets at least 1 book, but we leave at least one for Student C\n            k = 7 - i - j  # The rest of the books go to Student C\n            # i, j, k now represent the distribution of books between the 3 students\n            # We multiply the possibilities for each student\n            ways += (fact(7) // (fact(i) * fact(j) * fact(k)))\n\n    return ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n    \n    # Equations based on the given problem\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solving the equations for the price of the watch and handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculating the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # Start with the minimum number of candies each child can get\n    min_candies = 1\n    # Initialize the sum of candies starting from the minimum for each child\n    # Assuming 1, 2, 3, ..., 8 as the starting point\n    sum_candies = sum(range(min_candies, min_candies + 8))\n    # Calculate the number of candies remaining after giving out the minimum\n    remaining_candies = 88 - sum_candies\n\n    # The least amount the child with the most can get is the starting point plus remaining\n    least_candies_for_max = (min_candies + 7) + remaining_candies\n    return least_candies_for_max\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n    years_between_1996_and_2008 = 2008 - 1996\n    daughter_age_2008 = daughter_age_1996 + years_between_1996_and_2008\n\n    grandmother_age_when_daughter_was_born = grandmother_age_2008 - daughter_age_2008\n    return grandmother_age_when_daughter_was_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 players other than A who can receive the first pass.\n    first_pass_options = 3\n    \n    # For each player who receives the first pass, there are 2 players (other than A and the first receiver) who can receive the second pass.\n    second_pass_options = 2\n    \n    # For each second pass receiver, there is only 1 player who can receive the third pass and give it back to A (the player who hasn't received the ball yet).\n    third_pass_options = 1\n    \n    # The number of different methods is the product of the options for each pass.\n    number_of_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return number_of_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial as fact\n\n    # Total ways without any restrictions is 8!\n    total_ways = fact(8)\n\n    # A and B want to stand next to each other.\n    # Consider them a single unit AB, so we have 7 units to arrange.\n    ways_with_AB_together = fact(7)\n\n    # Now we need to consider the arrangements of A and B within their unit.\n    # There are 2! ways to arrange A and B within the unit.\n    arrangements_AB = fact(2)\n\n    # So the total ways with A and B together is 7! * 2!\n    total_ways_AB_together = ways_with_AB_together * arrangements_AB\n\n    # Now, considering when C and D are standing next to each other.\n    # Consider them a single unit CD, so we have 7 units to arrange.\n    # This is similar to A and B being together, which we already calculated.\n    total_ways_CD_together = ways_with_AB_together * arrangements_AB\n\n    # The total ways with A and B together but C and D not together is the difference between\n    # the total ways with A and B together and total ways with C and D together.\n    total_ways_AB_together_CD_not_together = total_ways_AB_together - total_ways_CD_together\n\n    return total_ways_AB_together_CD_not_together\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    result = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1.0\n    return result\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200 * 0.35\n    lenny_solution = 300 * 0.50\n    mixed_solution = 200 + 300\n    mixed_concentration = (leroy_solution + lenny_solution) / mixed_solution\n\n    return mixed_concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    candies_total = 36\n    difference = 22 - 6\n    valeria_candies_now = (candies_total + difference) / 2\n    return valeria_candies_now\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    from sympy import symbols, solve, log\n\n    # Let's denote the 50 times 12-power result as A and the 75 times k-power result as B.\n    # Our goal is to find the largest whole number k such that A > B.\n    A = 12**50\n    k = symbols('k', integer=True)\n\n    # To find k, we solve the inequality A > k**75.\n    # Taking the 75th root of both sides, we get (A ** (1/75)) > k.\n    # We take the log base 10 of A, divide it by 75 to find log(k), and then take 10 to the power of the result.\n    k_value = 10**(log(A, 10)/75)\n\n    # We must round down to ensure we find the largest whole number\n    k_value = int(k_value)\n\n    return k_value\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_oranges = 133\n    thrown_away_oranges = 34\n    bought_oranges = 25\n\n    initial_oranges = final_oranges - bought_oranges + thrown_away_oranges\n\n    return initial_oranges\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    ans = psi(psi(14, 13), 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    num_digits = sum(len(str(i)) for i in range(1, 20))\n    return num_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    # Total students = 36, so boys = 36 - girls\n    boys = 36 - girls\n\n    # Total average score = 89, total score = 36 * 89\n    total_score = 36 * 89\n\n    # Girls' total score = 88 * girls\n    # Boys' total score = 91 * boys = 91 * (36 - girls)\n    equation = Eq(88 * girls + 91 * (36 - girls), total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Define the number of legs each animal has\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Define the given number of each animal (except birds, which we need to find out)\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Define the total number of legs shared by the non-bird pets\n    total_legs_non_birds = (num_cats * cat_legs) + (num_dogs * dog_legs) + (num_rabbits * rabbit_legs)\n\n    # Total number of legs for all pets\n    total_legs = 28\n\n    # Calculate the number of legs that the birds could have (total legs minus legs of non-bird pets)\n    remaining_legs_for_birds = total_legs - total_legs_non_birds\n\n    # Calculate the number of birds by dividing the remaining legs by the number of legs per bird\n    num_birds = remaining_legs_for_birds / bird_legs\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_flight = 12 / 4  # Time taken to walk one floor flight\n    flights_in_30_mins = 30 / time_for_one_flight  # Number of flights in 30 mins\n    \n    return int(flights_in_30_mins)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # The total work to paint the original fence is represented by 'work_units'\n    work_units = 5 * 6\n    \n    # The neighbor's fence is twice as long, hence it requires twice the work\n    required_work_units = work_units * 2\n    \n    # To find the minimum number of people to finish the work in less than 5 hours,\n    # we need to find the smallest number of people such that people * hours < required_work_units\n    # while hours is fixed at 5.\n    # Hence we'll have to ceil the division outcome\n    hours = 5\n    min_people = required_work_units // hours\n    if required_work_units % hours != 0:\n        min_people += 1\n    \n    return min_people\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_per_cookie = 8 / 50\n    num_cookies = 21.6 / butter_per_cookie\n    return int(num_cookies)\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    N_octal = '12345654321'\n    N_decimal = int(N_octal, 8)\n\n    remainder_7 = N_decimal % 7\n    remainder_9 = N_decimal % 9\n\n    sum_of_remainders = remainder_7 + remainder_9\n\n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    handbag, wallet, belt = symbols('handbag wallet belt')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    age_three_years_ago = 7\n    age_increase_over_seven_years = 3 + 4\n    combined_age_in_four_years = age_three_years_ago + (2 * age_increase_over_seven_years)\n    \n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for price of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = (1/6)*n*(n+1)*(n+2)\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import sympy as sp\n    \n    # Prime factorize 2016\n    prime_factors = sp.factorint(2016)\n    \n    # The powers of the prime factors, incremented by 1 and halved, are used to determine\n    # the number of divisors that are perfect squares (since the exponents in the prime\n    # factorization of a square number must be even)\n    ans = 1\n    for _, exponent in prime_factors.items():\n        ans *= (exponent // 2) + 1\n        \n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Sum of an arithmetic sequence is given by the formula: sum = n/2 * (first_term + last_term)\n    # Here, we know sum = 60 and n = 3 (since we want three consecutive numbers)\n    # Let's assume the first term (smallest number) is x.\n    # Then the second term will be x + 1, and the third (largest number) will be x + 2\n    # We can set up the equation:  (3/2 * (x + (x + 2))) = 60\n    \n    # Let's solve for x, the smallest number\n    x = symbols('x')\n    equation = Eq((3/2 * (x + (x + 2))), 60)\n    solution = solve(equation, x)\n    \n    # Once we have the smallest number, we can find the largest by adding 2\n    largest_number = solution[0] + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3*big_pail + 4*small_pail, 68)\n    equation2 = Eq(4*big_pail + 2*small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        a, b, c, d = perm\n        if a == 0 or c == 0:  # A and C cannot be zero as they are the hundreds digit\n            continue\n        num1 = a*100 + b*10 + a\n        num2 = c*100 + d*10 + c\n        if num1 + num2 == 726:\n            return a + b + c + d\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Worst case: Annabella takes out all shirts of the other colors \n    # (orange, pink, and brown) without getting a yellow. \n    # She takes out one more shirt and it must be yellow.\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown shirts\n    must_take_out_to_get_yellow = non_yellow_shirts + 1  # one more for a guaranteed yellow shirt\n\n    return must_take_out_to_get_yellow\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    ans = 249 * 31\n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    result = 9*(4/5) + 99*(4/5) + 199*(4/5) + 2999*(4/5) + 39999*(4/5) + 1\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    difference = (80 - 73) + (73 - 66)\n    middle_number = 94 - difference // 2\n    return middle_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if age % 2 == 1 and age % 3 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    \n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    \n    total_ml_sold = (wine_glasses_sold * wine_glass_ml) + (tumblers_sold * tumbler_ml)\n    \n    cartons_needed = total_ml_sold / 1000  # Dividing by 1000 to convert milliliters to liters\n    \n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    bruno_position_from_front = 9\n\n    bruno_position_from_end = total_people - bruno_position_from_front + 1\n\n    return bruno_position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since the last digit of powers of 2 follows a cycle of {2, 4, 8, 6}\n    # and this cycle repeats every 4 powers, we just need to find the\n    # remainder of 859433 when divided by 4\n    remainder = 859433 % 4\n\n    # Create a mapping for the cycle based on the remainder\n    cycle = {1: 2, 2: 4, 3: 8, 0: 6}\n\n    # The last digit is the one corresponding to the remainder in the cycle\n    last_digit = cycle[remainder]\n\n    return last_digit\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, p, l be the number of avocados, peaches and lemons initialy\n    a, p, l = symbols('a p l')\n\n    # Given initial ratio 2:9:8 for avocados to peaches to lemons\n    equation1 = Eq(a, 2/19 * (a + p + l))\n    equation2 = Eq(p, 9/19 * (a + p + l))\n    equation3 = Eq(l, 8/19 * (a + p + l))\n\n    # Sold quantities\n    sold_a = 52\n    sold_p = 12\n    sold_l = 60\n\n    # After selling, the ratio of the number of peaches to that of the lemons became 6:5\n    equation4 = Eq((p - sold_p) / (l - sold_l), 6/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, p, l))\n\n    # Total number of fruits left\n    total_left = solutions[a] - sold_a + solutions[p] - sold_p + solutions[l] - sold_l\n\n    return total_left\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students = 60\n    multiples_of_3 = set(range(3, students + 1, 3))\n    multiples_of_5 = set(range(5, students + 1, 5))\n\n    # Students who turned around for both multiples of 3 and 5\n    both_multiples = multiples_of_3.intersection(multiples_of_5)\n    \n    # Applying Inclusion-Exclusion Principle\n    facing_away = len(multiples_of_3) + len(multiples_of_5) - len(both_multiples)\n    \n    # Students facing the teacher will be total students minus those facing away\n    facing_teacher = students - facing_away\n\n    return facing_teacher\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    max_divisible_number = 0\n\n    # Generate all permutations of digit cards\n    for num_digits in range(1, 8):\n        for digits in permutations(range(1, 8), num_digits):\n            number = int(''.join(map(str, digits)))\n            if all(number % d == 0 for d in digits):\n                max_divisible_number = max(max_divisible_number, number)\n\n    return max_divisible_number\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n\n    # Calculating the least common multiple of 2, 4, and 6\n    l = lcm(2, 4, 6)\n\n    # Starting from the LCM, check the ages which satisfy the condition for division by 7\n    age = l\n    while True:\n        if (age % 7) == 5:\n            break\n        age += l\n\n    return age + 1  # Adding 1 because when Peter's age is divided by 2, 4, or 6 the remainder is 1\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jess_sweets and jill_sweets be the number of sweets Jess and Jill have originally.\n    jess_sweets, jill_sweets = symbols('jess_sweets jill_sweets')\n\n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill_sweets, 6/5 * jess_sweets)\n    \n    # After transaction:\n    # jill_sweets - 8 : jess_sweets + 8 = 4 : 7\n    equation2 = Eq((jill_sweets - 8) / (jess_sweets + 8), 4/7)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (jess_sweets, jill_sweets))\n\n    # Calculate the total number of sweets they have altogether.\n    total_sweets = solutions[jess_sweets] + solutions[jill_sweets]\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for length in range(1, 900+1):\n        # For an arithmetic sequence of odd numbers, the common difference is 2, \n        # and we can write the sequence as (a, a+2, a+4, ..., a+(length-1)*2)\n        # The sum of this sequence can be represented as length/2 * (first_term + last_term)\n        # Since it is consecutive and odd, the middle term has to be an odd divisor of 900\n\n        # The sum of the sequence is 900, 900 = length * middle term\n        # if middle term is a divisor of 900, we check if 900/length is odd and a divisor\n        if 900 % length == 0:\n            middle_term = 900 // length\n            if middle_term % 2 != 0:\n                max_length = length  # Update if a longer valid sequence is found\n    return max_length\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a, b, and c represent the weights of Adam, Ben, and Carl, respectively.\n    # According to the problem, we have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n    # To find the total weight, we need to sum Adam, Ben, and Carl's weights: a + b + c.\n    # We can add all three equations to get:\n    # 2 * (a + b + c) = 102 + 97 + 93\n    # Now we solve for the total weight:\n    total_weight_twice = 102 + 97 + 93\n    total_weight = total_weight_twice / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = 120\n    \n    while True:\n        smallest_number += 1\n        if smallest_number % divisor == remainder:\n            return smallest_number\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm = 2\n    height_total = height_m + height_cm / 100\n    return height_total\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * (1 + 25/100)\n    third_test = second_test * (1 - 20/100)\n    \n    total_marks = first_test + second_test + third_test\n    \n    return int(total_marks)\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    pupils = symbols('pupils')\n    \n    # If he gives each of his pupils 4 bookmarks, he will have 8 bookmarks left.\n    equation1 = Eq(4 * pupils + 8, 6 * pupils - 10)\n    \n    # Solving for number of pupils\n    num_pupils = solve(equation1, pupils)[0]\n    \n    # Total bookmarks when giving 4 bookmarks each\n    total_bookmarks = 4 * num_pupils + 8\n    \n    return total_bookmarks\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    total_savings = january_savings + february_savings + march_savings\n    mean_savings = total_savings / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f'{hour:02d}{minute:02d}'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return round(sum_of_money, 2)\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    prime_numbers = list(primerange(130, 151))\n    return len(prime_numbers)\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    return 233 in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    # This is a sum of squares of an arithmetic sequence starting at 7 with a common difference of 7\n    # Formula for sum of squares of arithmetic series: n/6*(2a+(n-1)d)*(2a+2(n-1)d+d)\n    # where n is the number of terms, a is the first term, and d is the common difference\n    a = 7\n    d = 7\n    last_term = 105\n    n = (last_term - a) / d + 1  # Finding the number of terms\n\n    sum_of_squares = (n / 6) * (2 * a + (n - 1) * d) * (2 * a + 2 * (n - 1) * d + d)\n    ans = int(sum_of_squares)\n    return ans\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Find the first and last multiples of 4 in the given range\n    first_multiple = (56 + 3) // 4 * 4\n    last_multiple = 92 // 4 * 4\n    \n    # Count the number of multiples by taking the difference\n    # between the first and last multiples and dividing by 4,\n    # then adding 1 to include both the first and last terms in the count\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    # Sam's mistake was that he used 56 and 92 for division\n    # instead of finding the actual first and last multiples within the range.\n    # He also assumed that there are always '4' multiples of '4' from 1 to a given number,\n    # which is also incorrect.\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # distance between Magic Town and Super Town\n    distance = 144\n    # ship's speed in still water\n    still_speed = 15\n    # travel time downstream\n    time_downstream = 8\n\n    # speed of the river current\n    # speed_downstream = (distance / time_downstream)\n    # speed_current = speed_downstream - still_speed\n    speed_current = (distance / time_downstream) - still_speed\n\n    # time taken to come back upstream\n    # time_upstream = distance / (still_speed - speed_current)\n    time_upstream = distance / (still_speed - speed_current)\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    select_students = 2\n    ways_to_select = comb(total_students, select_students)\n    \n    return ways_to_select\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    given_time = datetime.strptime('15:15', '%H:%M')\n    wait_duration = timedelta(hours=1, minutes=25)\n    meet_time = given_time + wait_duration\n    return meet_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1,2), (2,3), (3,4), (4,5), (5,6)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "from fractions import Fraction\n\ndef solution():\n    ans = sum(Fraction(i, j) for i in range(1, 20) for j in range(i+1, 21))\n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the food (in kilograms) the kangaroo eats per day\n    x = symbols('x')\n    \n    # The hippo eats 45 kilograms more food than the kangaroo per day\n    # so it eats x + 45 kilograms per day\n    \n    # After 20 days, the total food the hippo eats is 20 * (x + 45)\n    # After 20 days, the total food the kangaroo eats is 20 * x\n    # According to the problem, the hippo has consumed 10 times as much food as the kangaroo in total\n    # So we have: 20 * (x + 45) = 10 * (20 * x)\n    \n    # Set up the equation and solve for x\n    equation = Eq(20 * (x + 45), 10 * (20 * x))\n    solution = solve(equation, x)\n    \n    # Now that we have x, we can find out how much food the hippo has consumed in these 20 days\n    # which is 20 * (x + 45)\n    hippo_food = 20 * (solution[x] + 45)\n    \n    return hippo_food\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rates of A and B\n    A_rate = 1 / 15\n    B_rate = 1 / 20\n\n    # Total work done by A and B in 2 days    \n    work_done = 2 * (A_rate + B_rate)\n    \n    # Remaining work\n    remaining_work = 1 - work_done\n    \n    # Time for A to finish the remaining work\n    A_time_remaining = remaining_work / A_rate\n    \n    return A_time_remaining\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # If you take one ball of each color, you are not guaranteed to have two balls of the same color.\n    # Therefore, we must take an additional ball to ensure that at least two balls of the same color are taken.\n    # The worst-case scenario is taking one green ball and one blue ball initially (2 balls in total).\n    # The third ball taken, no matter the color, will ensure that at least two balls of the same color are taken.\n    return 2 + 1\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # There are 12 zodiac signs and we want at least 11 students to share the same zodiac sign.\n    # According to the pigeonhole principle, in the worst-case scenario when every zodiac sign would\n    # be represented by equal number of students, we would have 10 students for each of the 12 zodiac signs.\n    # To guarantee that there is an 11th student for any one of the zodiac signs, we must add one more student.\n    num_zodiac_signs = 12\n    students_per_sign = 10  # One less than the desired 11.\n    \n    # Total students needed = (students_per_sign * num_zodiac_signs) + 1 to guarantee 11 students for one sign.\n    total_students = (students_per_sign * num_zodiac_signs) + 1\n    \n    return total_students\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_valid_combinations(perm):\n    # Convert the permutation into a string for simple checks\n    perm_str = ''.join(perm)\n    \n    # Check if student A is between B and C\n    if (perm_str.index('B') < perm_str.index('A') < perm_str.index('C')) or \\\n       (perm_str.index('C') < perm_str.index('A') < perm_str.index('B')):\n        # Check if D and E are together\n        if 'DE' in perm_str or 'ED' in perm_str:\n            # Check if F and G are not adjacent\n            if 'FG' not in perm_str and 'GF' not in perm_str:\n                return 1\n    return 0\n\ndef solution():\n    students = 'ABCDEFG'\n    count = 0\n    for perm in permutations(students):\n        count += count_valid_combinations(perm)\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Using the Pigeonhole Principle worst case scenario\n    # To ensure Ada gets 10 balls of the same color, she would need to go through the worst case of taking all balls of one color without getting 10 of the same color, and then taking one more.\n    \n    # If she takes all yellow and all white without getting 10 of any, she would've taken 5 yellow + 15 white = 20 balls. \n    # Since she could now take any of the black balls and must have 10 of the same color, we add 9 (since 1 black ball would be the 10th ball of the same color).\n    \n    least_balls = 20 + 9\n    return least_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    total_children = 9\n\n    last_child_seat = (total_candies - 1 + starting_seat) % total_children\n\n    # If last_child_seat is 0, it means the last candy goes to the 9th child.\n    ans = last_child_seat if last_child_seat != 0 else total_children\n\n    return ans\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * common_difference\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    lcm = 7 * 3 // math.gcd(7, 3)\n    return 2 + lcm\n\nimport math\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the Inclusion-Exclusion Principle\n    both_cats_and_dogs = (children_with_dogs + children_with_cats) - total_children\n\n    return both_cats_and_dogs\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n\n    total_saving = monthly_saving * total_months\n\n    return total_saving\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated by the formula:\n    # sum = n/2 * (first_term + last_term), where n is the number of terms.\n    \n    # The table looks like this, which is an arithmetic sequence:\n    # 1, 2, 3, ..., 10 in the first row\n    # 2, 3, 4, ..., 11 in the second row\n    # ...\n    # 10, 11, ..., 19 in the 10th row\n\n    # We will calculate the sum for each row and then add them together.\n    total_sum = 0\n    for first_term in range(1, 11):\n        last_term = first_term + 9 # because there are 10 numbers in each row\n        n = 10 # each row contains 10 terms\n        sum_row = n/2 * (first_term + last_term)\n        total_sum += sum_row\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = material_length // cloak_length\n    cloaks_from_width = material_width // cloak_width\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    shirts, skirts = symbols('shirts skirts')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(shirts, skirts - 36)                    # shirts = skirts - 36\n    equation2 = Eq(2/3 * shirts + 5/6 * skirts, 72)        # 2/3 shirts + 5/6 skirts = 72\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences from the problem statement\n    congruences = (\n        (1, 5),  # x ≡ 1 (mod 5)\n        (2, 6),  # x ≡ 2 (mod 6)\n        (7, 11)  # x ≡ 7 (mod 11)\n    )\n\n    # Solve the system of congruences\n    biscuit_count, _ = solve_congruence(*congruences)\n\n    # Since the number of biscuits is between 400 and 800:\n    while biscuit_count < 400:\n        biscuit_count += 5 * 6 * 11\n\n    ans = biscuit_count\n    return ans\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    # Count the number of digits for numbers 1 to 9\n    ones_count = 9\n    \n    # Count the number of digits for numbers 10 to 34\n    # Each of these numbers has two digits\n    tens_count = (34 - 9) * 2\n    \n    # Sum the counts\n    total_digits = ones_count + tens_count\n    \n    return total_digits\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Given data\n    speed_to = 20  # speed to the place in mph\n    distance = 120  # distance in miles\n    average_speed_expected = 30  # expected average speed in mph\n\n    # Calculate the time taken to go to the place\n    time_to = distance / speed_to\n\n    # Calculate the total time for the round trip at the expected average speed\n    total_time_expected = (2 * distance) / average_speed_expected\n\n    # Calculate the time taken to return\n    time_return = total_time_expected - time_to\n\n    # Calculate the speed needed on return to meet the expected average speed\n    speed_return = distance / time_return\n\n    return speed_return\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # He needs one cut to divide the rod into two pieces.\n    # To divide the rod into five pieces, he needs four cuts.\n    # Since one cut takes 2 minutes, four cuts take 8 minutes.\n    \n    minutes_per_cut = 2\n    number_of_cuts_needed = 5 - 1  # 5 pieces require 4 cuts\n    total_minutes = minutes_per_cut * number_of_cuts_needed\n    return total_minutes\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    average_initial = 120\n    average_final = 110\n    num_numbers_initial = 3\n    \n    total_initial = average_initial * num_numbers_initial\n    total_final = average_final * (num_numbers_initial + 1)\n    \n    number_to_add = total_final - total_initial\n    \n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    # Equation 1: Jovan has twice as many marbles as Sean\n    equation1 = Eq(jovan, 2 * sean)\n\n    # Equation 2: Heman has 3 times as many marbles as Jovan\n    equation2 = Eq(heman, 3 * jovan)\n\n    # Equation 3: Jovan has 240 fewer marbles than Heman\n    equation3 = Eq(jovan, heman - 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    # Sum the number of marbles they have altogether\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    days = (12 * 15) / 20\n    return days\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = total_meters / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote John's mass as J, Andy's mass as A and Charles' mass as C\n    J, A, C = symbols('J A C')\n\n    # We are given the following equations\n    equation1 = Eq(J + A, 105)  # The total mass of John and Andy\n    equation2 = Eq(C + J, 67)    # The total mass of Charles and John\n    equation3 = Eq(A, 3 * C)    # Andy's mass is 3 times Charles' mass\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (J, A, C))\n\n    # The total mass of the three boys\n    total_mass = solutions[J] + solutions[A] + solutions[C]\n\n    return total_mass\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median, mode\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # We iterate over all possible 4-digit combinations\n    for i in range(1000, 10000):  # All possible 4-digit numbers\n        original = str(i)\n        modified = original[-1] + original[1:-1] + original[0]\n        if int(modified) - i == 5877:\n            return i\n        \nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # Number of individual shoes needed for the alien and his 5 brothers\n    shoes_needed = 6 * 5  # 6 aliens * 5 legs each\n\n    # Number of pairs of socks needed, assuming one pair per leg\n    sock_pairs_needed = shoes_needed / 2  # each pair contains 2 socks\n\n    # Total cost calculation\n    total_shoe_cost = shoes_needed * 78\n    total_sock_cost = sock_pairs_needed * 12\n\n    # Calculate total cost\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return int(total_cost)\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    candy_combinations = combinations(cards, 2)\n    candice_combinations = combinations(cards, 3)\n    product_map = {}\n\n    for combo in candy_combinations:\n        product = combo[0] * combo[1]\n        product_map[product] = product_map.get(product, []) + [combo]\n\n    for combo in candice_combinations:\n        product = combo[0] * combo[1] * combo[2]\n        if product in product_map:\n            all_chosen = set(combo + product_map[product][0])\n            not_chosen = set(cards) - all_chosen\n            return not_chosen.pop()\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    # Let's define the variables\n    # x = number of $0.50 cookies David had\n    # y = number of $0.50 cookies Jeremy had\n    # z = number of $0.10 cookies Jeremy had\n\n    # From the problem statement, we have the following equations:\n    # Equation 1: David's cookies cost 3 times the cost of Jeremy's cookies\n    # => 0.50 * x = 3 * (0.50 * y + 0.10 * z)\n    # Since David had only $0.50 cookies, and it's given that x = 1 (since it's singular - \"David had only $0.50 cookie\")\n    # => 0.50 = 3 * (0.50 * y + 0.10 * z)\n    # => 1 = 3 * (y + 0.2 * z)\n\n    # Equation 2: Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    # => y = (3/5) * z\n\n    # Equation 3: There were 60 fewer $0.10 cookies than $0.50 cookies\n    # => z = y + 60\n\n    # Substitute equation 2 into equation 3\n    # => z = (3/5) * z + 60\n    # => z - (3/5) * z = 60\n    # => (2/5) * z = 60\n    # Solve for z\n    z = 60 * (5/2)\n\n    # Now substitute the value of z back into equation 2 to get y\n    y = (3/5) * z\n\n    # Finally, calculate the cost of Jeremy's cookies\n    jeremy_cookies_cost = 0.50 * y + 0.10 * z\n    return jeremy_cookies_cost\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = []\n    for option in [49, 80, 32, 66, 8, 58]:\n        if option % 7 == 4:\n            possible_totals.append(option)\n    return possible_totals[0] if possible_totals else None\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between each tree is the distance between the first and fifth tree divided by 4 (since there are 4 intervals between 5 trees)\n    interval_distance = 20 / 4\n\n    # The number of intervals along the whole 200m is the total length divided by the interval distance\n    num_intervals = 200 / interval_distance\n\n    # The number of trees is 1 more than the number of intervals (since we start with a tree at position 0)\n    num_trees = num_intervals + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from math import comb\n\n    total_oranges = 13\n    total_kids = 3\n    \n    # Since someone might not get any orange, we can think of it as distributing \n    # (total_oranges + total_kids - 1) oranges to total_kids kids where each kid gets at least one \n    # Then we subtract the ones where all the oranges go to one kid\n    # Using stars and bars method, (n+k-1 choose k-1) \n    ans = comb(total_oranges + total_kids - 1, total_kids - 1)\n    return ans\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # The rate at which both taps fill the tank\n    time_to_half_fill = (1/2) / combined_rate  # Time to fill half the tank\n    return time_to_half_fill\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    number_apples = total_fruit * fraction_apples\n    number_pears = total_fruit - number_apples\n\n    return int(number_pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    side_length_with_girls = 1\n    while True:\n        total_people = side_length_with_girls ** 2\n        boys = total_people - girls - (2 * side_length_with_girls - 1)\n        if int(boys ** 0.5) ** 2 == boys:\n            break\n        side_length_with_girls += 1\n    ans = boys\n    return ans\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Initial expression\n    initial_expression = (36 * 21) / (6 * 7)\n    \n    # Jason's mistake is in the associative property he applies incorrectly\n    # The mistake is in the second step:\n    # (36 * 21) / (6 * 7) should be equal to (36 / 6) * (21 / 7), not 36 * 21 / 6 * 7\n    \n    # Correct calculation after identifying the mistake\n    correct_expression = (36 / 6) * (21 / 7)\n    \n    # Return the correct final result\n    ans = correct_expression\n    return ans\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    # Ann is the 8th person in the queue.\n    ann_position = 8\n    # There are 3 people between Ann and David.\n    people_between = 3\n    # Since David is second last, we need two positions after David.\n    david_position = ann_position + people_between + 1\n\n    # The total number of people in the queue is the position of David + 1 (the last person).\n    total_people = david_position + 1\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_height = 9\n    climb_rate = 3\n    slide_rate = 1\n    net_climb = climb_rate - slide_rate\n    net_height = 0\n    days = 0\n    \n    while net_height < total_height:\n        days += 1\n        net_height += climb_rate\n        if net_height >= total_height:\n            break\n        net_height -= slide_rate\n    \n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal_amount = 800\n    interest_rate = 0.08  # 8%\n    time_years = 3\n\n    simple_interest = principal_amount * interest_rate * time_years\n    \n    return simple_interest\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Calculate the number of picks required\n    # Picking the worst-case scenario number of balls from the two largest sets of balls (80 blue + 40 red)\n    # and then picking one more to ensure we get 29 of the same color\n    picks_to_ensure_29 = 80 + 40 - 1\n    \n    # To ensure we get 28 of another color, we pick from the two largest remaining quantities (80 blue + 30 white)\n    picks_to_ensure_28 = 80 + 30 - 1\n    \n    # To ensure we get 10 of the last color, since we have only red balls and white balls left\n    # we pick 9 balls of one color, which leaves us with one color only.\n    # To then ensure 10 of that last color, we need to pick 9(red) + 10\n    picks_to_ensure_10 = 9 + 10\n    \n    # The total number of picks to ensure the minimum requirement for each color is the max of the\n    # respective worst-case scenarios\n    total_picks = max(picks_to_ensure_29, picks_to_ensure_28, picks_to_ensure_10)\n    \n    return total_picks\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleeps = 8\n    mary_sleeps = lucy_sleeps + 2\n    return mary_sleeps\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6 * 1.5 + 4 * x - 19\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england = 978\n    height_world = 8848\n\n    difference = height_world - height_england\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(10, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any number factorial greater than 9! will have a last digit of 0 because it incorporates the factor 10 (2*5)\n    # Therefore, the last digit of 2014! is 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    # Prime factorization of the product\n    product = 2*2*3*8*5*5*5\n    prime_factors = {}\n    for prime in [2, 5]:\n        count = 0\n        while product % prime == 0:\n            product //= prime\n            count += 1\n        prime_factors[prime] = count\n    \n    # Number of 0s is determined by the minimum of either 2's or 5's\n    ans = min(prime_factors[2], prime_factors[5])\n    return ans\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(alicia / 2 + beth - 60 + casey - 3 * (alicia / 2), 900)\n    equation2 = Eq(alicia - alicia / 2, beth - 60)\n    equation3 = Eq(beth - 60, casey - 3 * (alicia / 2))\n\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_numerator = 6\n    original_denominator = 20\n    \n    ans = (numerator * original_denominator) / original_numerator\n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    final_result = 1\n    add_back = final_result + 8\n    multiply_back = add_back * 8\n    divide_back = multiply_back / 3\n    original_number = divide_back - 6\n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    eq = Eq(original_number + 10 * original_number, 253)\n    solved_value = solve(eq, original_number)\n    return solved_value[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # let x be the number of cookies he ate on the first day\n    # then for each subsequent day, he ate x+6, x+12, x+18, x+24 more cookies\n    # the sum of an arithmetic sequence is given by (n/2) * (first_term + last_term)\n    # where n is the number of terms\n    # so we have the equation (5/2) * (2*x + 4*6) = 100,\n    # which simplifies to 5x + 60 = 100\n    \n    total_cookies = 100\n    days = 5\n    increase_per_day = 6\n    # sum of arithmetic sequence is (n/2) times (first_term + last_term)\n    # i.e., (5/2) * (x + (x + 4*6)) = 100\n    # solve for x to find the number of cookies he ate on the first day\n    first_day_cookies = (total_cookies - (days * (days - 1) / 2 * increase_per_day)) / days\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0:\n            prime_candidate = num + 1\n            is_prime = True\n            for i in range(2, int(prime_candidate ** 0.5) + 1):\n                if prime_candidate % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and prime_candidate - 1 == num:\n                return num\n    return None\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    result = 18 / 100 * 250\n    return result\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    final_seashells = (initial_seashells - given_to_sister - given_to_friend + picked_seashells)\n    seashells_per_box = final_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of questions each student completed\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    # Define the system of equations based on the problem statement\n    equation1 = Eq(cayden, sicheng + 6)  # Cayden completed 6 more questions than Sicheng\n    equation2 = Eq(yixuan, 2 * cayden)   # Yixuan completed 2 times as many questions as Cayden\n    equation3 = Eq(yixuan, sicheng + 22) # Yixuan completed 22 more questions than Sicheng\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    # Calculate the total number of questions completed by the three students\n    total_questions = sum(solutions.values())\n\n    return total_questions\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    men_ways = factorial(4) # ways to arrange 4 men\n    women_ways = factorial(4) # ways to arrange 4 women\n    return men_ways * women_ways * 2 # men can start or women can start\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    # Count the frequency of each letter in HAPPY\n    frequency = {'H': 1, 'A': 1, 'P': 2, 'Y': 1}\n\n    # Total number of letters\n    total_letters = sum(frequency.values())\n\n    # Calculate the number of permutations\n    permutations = factorial(total_letters)\n\n    # Divide by the factorial of the frequency of each letter\n    for letter, freq in frequency.items():\n        permutations //= factorial(freq)\n\n    return permutations\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_girls = 12\n    fraction_boys = 2 / 5\n    fraction_girls = 1 - fraction_boys\n    total_children = total_girls / fraction_girls\n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(96)\n    total_factors = 1\n    for power in factors.values():\n        total_factors *= (power + 1)\n    \n    return total_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n    \n    return total_people\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12 # 12 noon in 24-hour format\n    flight_duration = 4 # Flight duration of 4 hours\n    time_difference = 3 # Time difference between England and St Petersburg\n\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):  # N cannot be 0 as it's a two-digit number\n        for O in range(10):\n            if N != O:  # N and O have to be different digits\n                NO = int(f'{N}{O}')\n                ON = int(f'{O}{N}')\n                if 2 * NO == ON:\n                    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    result = sum([i if i % 4 == 2 else -i for i in range(32, 51, 2)])\n    return result\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 colors, to ensure we get a pair, \n    # we need to consider the worst case scenario where Cindy picks socks of different colors.\n    # After picking 3 different colors, the next one must create a pair.\n    socks_picked = 3 + 1  # One for each color and one extra for the pair\n\n    return socks_picked\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    kg = 2.5\n\n    ans = kg * kg_to_grams\n\n    return ans\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let's say the total number of children is 'c'\n    # Then number of boys is (3/8)c and number of girls is (5/8)c\n    # Total sweets given out = sweets_per_boy * boys + sweets_per_girl * girls\n    # 360 = 4*(3/8)c + 12*(5/8)c\n    # Solving for 'c':\n    c = total_sweets / (sweets_per_boy * fraction_boys + sweets_per_girl * (1 - fraction_boys))\n    \n    # Since we need the number of girls, we calculate (5/8)c\n    girls = (1 - fraction_boys) * c\n    \n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_factor = 1 / 5  # 1 km on the ground is represented by 5 cm on the map\n    distance_on_map_cm = 12  # distance on map in cm\n    distance_on_ground_km = distance_on_map_cm * scale_factor\n\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    n = symbols('n')\n    \n    # Equations based on the remainders mentioned\n    eq1 = Eq(n % 7, 5)   \n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n\n    # Sum of quotients when divided by 6, 7, and 8\n    sum_of_quotients = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    solutions = solve((eq1, eq2, eq3, sum_of_quotients))\n\n    for solution in solutions:\n        if solution[n] > 0:\n            return solution[n]\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    time_seconds = 24\n    \n    # Convert speed to meters per second (1 km/h = 1000 m/3600 s)\n    speed_mps = speed_kmh * (1000 / 3600)\n    \n    # Distance = Speed * Time\n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for the carrots each rabbit ate\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    # Jimmy's statement: jimmy = jack + 7\n    equation1 = Eq(jimmy, jack + 7)\n    # Tommy's statement: tommy = 3 * jimmy\n    equation2 = Eq(tommy, 3 * jimmy)\n    # Jack's statement: jack + jimmy + tommy = 43\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    # number of carrots Tommy ate\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # The statement is not fully correct, because 1 is a positive integer that is neither prime nor composite.\n    # So, we must check for this exception.\n    if 1 not in set_prime_numbers and 1 not in set_composite_numbers:\n        ans = False\n    else:\n        ans = True\n\n    return ans\n\n# Given sets for demonstration. In reality, these sets could be defined based on prime and composite definitions.\n# For the sake of example, let's assume we have these sets.\nset_prime_numbers = {2, 3, 5, 7, 11} # This is an incomplete example set of primes\nset_composite_numbers = {4, 6, 8, 9, 10} # This is an incomplete example set of composites\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    foreign_language_students = 54\n\n    both_classes_students = math_students + foreign_language_students - total_students\n\n    only_math_students = math_students - both_classes_students\n\n    return only_math_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                for x4 in range(1, 10):\n                    if x1 + x2 + x3 + x4 == 12 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    friends_share = (total_sweets - kasia_keeps) / 2\n    \n    lucie_gives_to_joan = 2 / 7 * friends_share\n    lucie_keeps = friends_share - lucie_gives_to_joan\n    \n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Define the total difference between boys and girls\n    difference = 52\n    \n    # Initialize total students count\n    total_students = 0\n    \n    # Initialize the side of the square\n    side_length = 1  # The side length of the square array\n\n    # Loop over possible side lengths until we find the correct one\n    while True:\n        # Calculate the number of boys and girls for the current side length\n        if side_length % 2 == 0:\n            boys = (side_length * 4 - 4) // 2\n            girls = (side_length - 2) * (side_length - 2)\n        else:\n            boys = ((side_length + 1) // 2) ** 2\n            girls = (side_length // 2) ** 2\n\n        # Check if the difference between boys and girls is 52\n        if boys - girls == difference:\n            total_students = boys + girls\n            break\n        \n        # Increment the side length for the next iteration\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Initially, granddad has his full pension, which we consider as 1 (or 100%).\n    # On Friday, he spends 1/4 of his pension.\n    # So, the remaining pension after Friday is (1 - 1/4) = 3/4.\n\n    remaining_after_friday = 3 / 4\n\n    # On Saturday, he spends 1/3 of the remaining pension after Friday night.\n    # So, the remaining pension after Saturday is (3/4) - (1/3)*(3/4).\n\n    remaining_after_saturday = remaining_after_friday - (1 / 3) * remaining_after_friday\n    \n    # Simplify the fraction to get the final answer\n    remaining_after_saturday = remaining_after_saturday.simplify()\n\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the number of litres needed to fill the fish tank.\n    # Using a 5-litre pail results in 4 litres overflow, so the tank capacity is x = 5L - 4L.\n    # Using a 3-litre pail and needing 4 more means he fills the tank with 5 pails,\n    # so the tank capacity is also x = 3L * 5 = 15L.\n    # Hence, the tank can hold 15 litres of water.\n\n    return 15\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4  # Sum of the ratio 1:4\n    number_of_adults = (1 / ratio_sum) * total_people\n    return int(number_of_adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    num_combinations = num_school_bags * num_pencil_boxes\n\n    return num_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of apples and y be the number of pears initially\n    x, y = symbols('x y')\n\n    # Equation 1: The original ratio of apples to pears (x/y = 3/4)\n    equation1 = Eq(x/y, 3/4)\n\n    # Equation 2: After replacing 36 pears with 36 apples, (x+36) becomes 1.5*(y-36)\n    equation2 = Eq(x + 36, 1.5 * (y - 36))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of apples initially\n    return solutions[x]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    decimal_part = '6129043'\n    length = len(decimal_part)\n    \n    full_repeats = 212 // length\n    remainder = 212 % length\n    \n    sum_full_repeats = sum(int(digit) for digit in decimal_part) * full_repeats\n    sum_remainder = sum(int(decimal_part[i]) for i in range(remainder))\n    \n    total_sum = sum_full_repeats + sum_remainder\n    \n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for n in range(1, 100):  # Assume a reasonable upper limit for the size of the array\n        if (n + 1) * (n + 1) == n * n + 31:\n            total_soldiers = (n + 1) * (n + 1)\n            return total_soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    percent_value = 36\n    total_value = 50\n\n    ans = (percent_value / 100) * total_value\n\n    return ans\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    total_amount = 729\n    fraction = 2 / 3\n    \n    ans = total_amount * fraction\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n = 12  # number of people in the room\n    # Handshakes is the combination of 2 people out of n, which is \"n choose 2\"\n    # This is because each handshake involves 2 people, and order does not matter\n    handshakes = n * (n - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    from math import factorial, log\n\n    def trailing_zeroes(n):\n        five_count = 0\n        while n >= 5:\n            n //= 5\n            five_count += n\n        return five_count\n\n    n = 1\n    while trailing_zeroes(n) < 28:\n        n += 1\n\n    return n - 1\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    total_lemonade_price = lemonade_price * 5\n    total_chocolate_bar_price = chocolate_bar_price * 6\n    total_cost = total_lemonade_price + total_chocolate_bar_price\n    ten_pound_note = 10\n    change = ten_pound_note - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam = symbols('sam')\n\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    solutions = solve(equation, sam)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    vowels = 3\n    consonants = total_letters - vowels\n\n    # Calculate all possible arrangements of the word RAINBOW\n    total_arrangements = factorial(total_letters)\n    \n    # Calculate all possible arrangements where vowels are together\n    # As vowels are considered a single entity, we have 5 entities (4 consonants + 1 vowel group)\n    vowel_together_arrangements = factorial(consonants + 1) * factorial(vowels)\n    \n    # Calculate the number of arrangements where vowels are never together\n    arrangements_with_vowels_never_together = total_arrangements - vowel_together_arrangements\n\n    return arrangements_with_vowels_never_together\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations of the digits\n    digits = ['3', '7', '2', '8']\n    all_permutations = permutations(digits)\n    \n    # Filter out permutations that start with '0' as they wouldn't be valid numbers\n    valid_permutations = [int(''.join(p)) for p in all_permutations if p[0] != '0']\n    \n    # Find the smallest odd number\n    valid_odd_permutations = [num for num in valid_permutations if num % 2 != 0]\n    n = min(valid_odd_permutations)\n    \n    return n\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # There are 5 colors, so to guarantee that Daniel grabs at least one pair of matching socks, \n    # he would need to pick 6 socks because with 5 socks he could have one of each color, not forming a pair.\n    # To guarantee a second pair, since he might have gotten all 5 different colors in the first 5 picks,\n    # he could pick the same color as one he already has, so he needs another pick, in the worst case of different colors.\n    # Since green and white socks are identical, he can't have two pairs of them until he picks all of them.\n    # Therefore, he has to pick all green and all white socks first.\n    # Total socks picked = 5 (for the first five colors) + 1 (for the first pair) \n    #                     + 7 (all green socks) + 4 (all white socks) \n    # Since in the worst case scenario, the first pair could be either yellow, red or black (only one black sock is available, so it must be a pair of the other color)\n    # Total picks = 5 + 1 + 7 + 4 = 17 socks to ensure two pairs of the same color\n    \n    return 17\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Find the multiples of 4 between 10 and 20\n    multiples_of_4 = [i for i in range(10, 21) if i % 4 == 0]\n    \n    # Find the factors of 36\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n    \n    # Find the common numbers that are multiples of 4 and factors of 36\n    common_numbers = [num for num in multiples_of_4 if num in factors_of_36]\n    \n    # Assuming the prompt implies there is only one such number\n    ans = common_numbers[0] if common_numbers else None\n    \n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let's denote the first term as a and common difference as d.\n    # Then we can use the formula S_n = n/2 * (2a + (n-1)d)\n    # where S_n is the sum of first n terms.\n\n    # We have two equations:\n    # S_10 = 10/2 * (2a + (10-1)d) = 20\n    # S_30 = 30/2 * (2a + (30-1)d) = 90\n    \n    # Let's simplify these equations to find the common difference d.\n    # Equations become:\n    # 5 * (2a + 9d) = 20\n    # 15 * (2a + 29d) = 90\n    \n    # Dividing both equations by the coefficients before the brackets to isolate the bracketed terms:\n    # 2a + 9d = 4\n    # 2a + 29d = 6\n    \n    # Now, let's subtract the first equation from the second to solve for d.\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 29d - 9d = 2\n    # 20d = 2\n\n    # Divide both sides by 20 to get the common difference d.\n    d = 2 / 20\n\n    return d\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # 3 times the number of his chickens is 5 times the number of his cows\n    equation1 = Eq(3 * chickens, 5 * cows)\n    # 2 times the number of goats is 10 times the number of his cows\n    equation2 = Eq(2 * goats, 10 * cows)\n    # He has 40 chickens and goats combined\n    equation3 = Eq(chickens + goats, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    \n    # Extract the number of each animal from the solution\n    number_of_chickens = solutions[chickens]\n    number_of_goats = solutions[goats]\n    number_of_cows = solutions[cows]\n    \n    # Calculate the total number of animal feet:\n    # chickens have 2 feet, cows and goats each have 4 feet\n    total_feet = 2 * number_of_chickens + 4 * (number_of_goats + number_of_cows)\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_stickers = (total_stickers * 4) / ratio_sum\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_per_day = 9\n    days = 6\n\n    words_per_day = words_per_minute * minutes_per_day\n    total_words = words_per_day * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hour = 3.6\n    time_seconds = 300\n\n    # Convert speed to meters per second (1 km = 1000 m)\n    speed_meters_per_second = speed_km_per_hour * (1000 / 3600)\n\n    # Calculate distance walked in meters\n    distance_walked = speed_meters_per_second * time_seconds\n\n    return distance_walked\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let total_apples be the total number of apples Jack has.\n    # We know that Jack brought 1/2 of all his apples yesterday, and he sold 4/7 of the apples he brought.\n    # So, 4/7 * 1/2 * total_apples = 40\n    # We can solve for total_apples with this equation.\n    \n    total_apples = (40 * 7 * 2) / 4\n    \n    return total_apples\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    min_difference = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(num - 2978)\n        if diff < min_difference:\n            min_difference = diff\n            closest_num = num\n    \n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n + 1) // 6\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    # The sequence of the number of seats is an arithmetic sequence\n    first_term = 48  # number of seats in the first row\n    last_term = 80   # number of seats in the last row\n    difference = 4   # common difference, each row has 4 more seats than the previous one\n\n    # Calculate the number of terms (rows) using the formula: n = (last_term - first_term) / difference + 1\n    num_rows = (last_term - first_term) // difference + 1\n\n    # Calculate the sum of an arithmetic series using the formula: S_n = n/2 * (first_term + last_term)\n    total_seats = num_rows * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d.\n    \n    # The average of the first two numbers (a and b) is 10.\n    # So, (a + b) / 2 = 10 => a + b = 20\n    a_plus_b = 20\n    \n    # The average of the last two numbers (c and d) is 22.\n    # So, (c + d) / 2 = 22 => c + d = 44\n    c_plus_d = 44\n    \n    # The average of the first and last numbers (a and d) is 14.\n    # So, (a + d) / 2 = 14 => a + d = 28\n    a_plus_d = 28\n    \n    # Now, we need to find the average of the two middle numbers, b and c.\n    # Since we have a + b, c + d, and a + d, we can find b + c by:\n    # (a + b) + (c + d) - (a + d) = b + c\n    b_plus_c = (a_plus_b + c_plus_d) - a_plus_d\n    \n    # Now, we divide by 2 to get the average of b and c.\n    average_middle = b_plus_c / 2\n    \n    return average_middle\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result_after_operations = 50\n    number_after_multiplication = result_after_operations + 10  # Inverse of subtraction\n    original_number = number_after_multiplication / 2           # Inverse of multiplication\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    C = 19\n    # The sum of A and B is twice the average since the average is sum/2\n    sum_ab = 2 * average_ab\n    # The sum of A, B, and C is sum_ab + C\n    sum_abc = sum_ab + C\n    # The average of A, B, and C is the total sum divided by 3\n    average_abc = sum_abc / 3\n    return average_abc\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Perform prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    \n    # Since the number should be a 2-digit multiple of 7, we look for two factors that are multiples of 7 and whose \n    # product is 7007. Since 7 is a prime number, it will appear in its prime factors. We need to find two factors \n    # which when multiplied give 7007 and are greater than or equal to 14 (smallest 2-digit multiple of 7) and \n    # less than 100 (as they need to be 2-digit numbers)\n    valid_factors = [f for f in factors if 14 <= f*7 < 100]\n\n    # Check pairs of factors to see their product is 7007, then get their sum\n    for i in range(len(valid_factors)):\n        for j in range(i + 1, len(valid_factors)):\n            if valid_factors[i] * valid_factors[j] * 49 == 7007:  # Multiplied by 49, as we divided the factors by 7\n                return valid_factors[i] * 7 + valid_factors[j] * 7  # Multiplying by 7 to get the original two-digit multiples\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the average age for Chinese teachers be C, for English teachers be E, and for Mathematics teachers be M.\n    # According to the given data:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n\n    # Now using the Inclusion-Exclusion Principle to solve for the average age of the three subject teachers.\n    # Sum of the averages given individually for each pair of subjects:\n    sum_of_averages = 68 + 72 + 88\n\n    # The sum of all individual average ages will be counted twice according to the Inclusion-Exclusion Principle.\n    # So, we divide by 2 to find the total average age for all three teachers.\n    total_average_age = sum_of_averages / 2\n\n    # To find the average, we must divide by the number of subjects, which is 3.\n    average_age_of_3_teachers = total_average_age / 3\n\n    return average_age_of_3_teachers\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    age = death_date.year - birth_date.year\n    \n    # If the death month is before birth month or it's the same month but death day is before birth day\n    if (death_date.month < birth_date.month) or \\\n       (death_date.month == birth_date.month and death_date.day < birth_date.day):\n        age -= 1  # Subtract one year from the age\n\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using Pigeonhole Principle\n    most_cakes_in_a_layer = (total_cakes + total_layers - 1) // total_layers\n\n    return most_cakes_in_a_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = int(23 ** 0.5)  # The biggest possible whole number side length of the square\n    rope_to_cut = 23 - side_length ** 2  # The length of the rope that must be cut\n\n    return rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = (21 + 1) * 7\n    part2 = 20 + (1 * 7)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        total += fractional_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Arithmetic progression sum formula: n/2 * (first_term + last_term)\n    # where n is the number of terms, first_term is the first term in the sequence,\n    # last_term is the last term in the sequence.\n    # Here, n = 10, S = 425, a1 = 11\n    # We need to find the common difference d.\n    # Using the sum formula for arithmetic progression:\n    # S = n/2 * (2a1 + (n-1)d)\n    # 425 = 10/2 * (2*11 + 9d)\n    # 425 = 5 * (22 + 9d)\n    # 85 = 22 + 9d\n    # 63 = 9d\n    # d = 7\n\n    d = (425 - (10/2 * 2 * 11)) / (10/2 * 9)\n\n    return int(d)\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, benson = symbols('chelsia benson')\n    \n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n    \n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Since we have 7 consecutive odd numbers and their sum is 357,\n    # we denote these numbers as a, a+2, a+4, a+6, a+8, a+10, a+12\n    # The sum of these numbers is 7a + (2+4+6+8+10+12) = 7a + 42\n    # We set up the equation: 7a + 42 = 357\n    a = (357 - 42) / 7\n    \n    # The smallest of these numbers is 'a', which is the first number in the sequence\n    return int(a)\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    # Total numbers to arrange: 5 (1, 1, 2, 3, 4)\n    total_numbers = factorial(5)\n    # There are two '1's, so we divide the total arrangements by 2! to handle repeating '1's\n    repeated_ones = factorial(2)\n    # Calculate the number of different five-digit numbers\n    num_different_numbers = total_numbers // repeated_ones\n\n    return num_different_numbers\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one chair and one table\n    chair, table = symbols('chair table')\n    \n    # Create equations based on the given information\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all(num % 3 == 2,\n               num % 4 == 2,\n               num % 5 == 2,\n               num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    \n    # Time ratio is inversely proportional to speed ratio\n    equation = Eq(martin_speed / carter_speed, 13 / 9)\n    # Martin's speed is 20 m/min faster than Carter's\n    speed_difference = Eq(martin_speed, carter_speed + 20)\n\n    speeds = solve((equation, speed_difference), (martin_speed, carter_speed))\n\n    return speeds[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    ans = 2  # 2 is the only even prime number\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the time George takes to paint the room on his own\n    f, g = symbols('f g')\n    # Fred and George's combined rate is the sum of their individual rates\n    equation = Eq(1/6, 1/9 + 1/g)\n    \n    # Solve for g\n    george_time = solve(equation, g)\n    \n    return george_time[g]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(x)  # Replace 'x' with the actual amount of cloth used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # According to the pigeonhole principle,\n    # if there are n pigeons and m pigeonholes and n > m,\n    # then at least one pigeonhole must contain more than one pigeon.\n\n    # In this case, the \"pigeonholes\" are the colors of the apples (red and yellow),\n    # and the \"pigeons\" are the apples themselves.\n\n    # We need to find out the maximum number of apples that can be taken out one by one\n    # without getting two apples of the same color, which is by taking\n    # one apple of each color alternately. So that's 1 for red, 1 for yellow, and so on.\n    # The maximum number without guaranteeing two of the same color is the smaller number of apples (14 red).\n\n    # So for the worst-case scenario, we need to take out an additional apple to ensure\n    # we have two of the same color. Therefore, we would take out 14 red + 1 more apple.\n\n    num_apples = 14 + 1  # 14 from red apples, 1 for guaranteeing a matching pair\n    return num_apples\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the number of red pens sold be x\n    # Since there were 20 red pens left and the sold number is equal, initial red pens = 20 + x\n    # The initial ratio of red pens to black pens was 3:7, so the initial black pens = (7/3) * (20 + x)\n    # After selling x black pens as well, the number of black pens left = (7/3) * (20 + x) - x\n    \n    # According to the new ratio which is 5:13, we have the equation:\n    # (20) / ((7/3) * (20 + x) - x) = 5/13\n    # Solving this equation for x will give us the number of red pens sold\n    \n    # Now let's solve the equation\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((20) / (((7/3) * (20 + x)) - x), 5/13)\n\n    # Solve the equation for x\n    sold_pens = solve(equation, x)[0]\n\n    return sold_pens\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132 + 68) * (520 - 506)\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Number of each type of pet\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n    # we need to find out the number of birds, let's denote it as num_birds\n\n    # Total number of legs without birds\n    total_legs_without_birds = (num_cats * legs_per_cat +\n                                num_dogs * legs_per_dog +\n                                num_rabbits * legs_per_rabbit)\n    \n    # Total number of legs\n    total_legs = 28\n\n    # Calculate the number of birds based on remaining legs\n    num_birds = (total_legs - total_legs_without_birds) / legs_per_bird\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n\n    return entrances ** people\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = round(2.42 * 1.6, 2)\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # The value of the house after the first year is £10,500\n    value_after_first_year = 10500\n    \n    # The increase was 5%, so the original price was 100% of the original value\n    original_price = value_after_first_year / 1.05\n    \n    # The house loses 5% of its value in the second year\n    value_after_second_year = value_after_first_year * 0.95\n    \n    # Now calculate the profit or loss compared with the original price\n    profit_or_loss = value_after_second_year - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_both = 200 // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_both\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    third_of_number = 27\n    number = third_of_number * 3\n    return number\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(11, 20) if 42 % i == 0]\n    return factors_of_42[0] if factors_of_42 else None\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average_required = 6\n    total_count = 4\n    \n    sum_current = sum(numbers)\n    sum_required = average_required * total_count\n    missing_number = sum_required - sum_current\n    \n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price = symbols('pen_price')\n    ruler_price = pen_price + 0.90\n\n    equation = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n\n    solution = solve(equation, pen_price)[0]\n\n    ruler_cost = solution + 0.90\n\n    return ruler_cost\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return int(num_bags) if num_bags.is_integer() else int(num_bags) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if ((((((month * 4) + 6) * 5) - 20) * 5) + day) - 50 == result:\n                return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(10, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        n1 = int(''.join(perm[0:3]))\n        n2 = int(''.join(perm[3:5]))\n        n3 = int(''.join(perm[5:7]))\n        \n        if n2 == 2 * n1 and n3 == 4 * n1:\n            return n3\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the sequence from 4 to 400 with a common difference of 4\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    # Since the sequence repeats itself in reverse, we double the sum and subtract the\n    # middle term (400) as it is counted twice.\n    sum_total = 2 * sum_sequence - last_term\n    \n    return sum_total\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    # Price of the first cup\n    first_cup_price = 5\n    # Refill price\n    refill_price = 1\n    # Richard's total money\n    total_money = 10\n    \n    # Buy the first cup\n    cups = 1\n    total_money -= first_cup_price\n    \n    # Buy refills with the remaining money\n    refills = total_money // refill_price\n    cups += refills\n    \n    return cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_for_3_monkeys = 96\n    days_for_3_monkeys = 2\n    peaches_per_monkey_per_day = total_peaches_for_3_monkeys / (3 * days_for_3_monkeys)\n\n    monkeys = 5\n    days = 4\n    total_peaches_for_5_monkeys = peaches_per_monkey_per_day * monkeys * days\n\n    return total_peaches_for_5_monkeys\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the groups: story, comic, science\n    group_arrangements = factorial(3)\n    \n    # Number of ways to arrange books within their respective groups\n    story_arrangements = factorial(2)\n    comic_arrangements = factorial(3)\n    science_arrangements = factorial(4)\n    \n    # Total arrangements is the product of group arrangements\n    # and arrangements within each group\n    total_arrangements = group_arrangements * story_arrangements * comic_arrangements * science_arrangements\n\n    return total_arrangements\n  \nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    tax_on_first_50k = 0.06 * 50000\n    tax_on_rest = (0.06 + T / 100) * (120000 - 50000)\n    equation = Eq(tax_on_first_50k + tax_on_rest, 10000)\n    T_value = solve(equation, T)\n\n    return float(T_value[0])\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # From January to March (3 months)\n    jan_to_mar = 450 * 3\n    # From April to July (4 months)\n    apr_to_jul = 350 * 4\n    # From August to October (3 months)\n    aug_to_oct = 1250 # in total\n    # From November to December (2 months)\n    nov_to_dec = 400 * 2\n\n    # Total amount spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # There are 12 months in a year\n    average_spent_per_month = total_spent / 12\n\n    return average_spent_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Let the distance to the library be d meters.\n    # Time taken to walk to the library: t_walk = d / walking_speed\n    # Time taken to cycle back from the library: t_cycle = d / cycling_speed\n    \n    # Total time for the trip: t_total = t_walk + t_cycle\n    # Total distance for the trip: d_total = 2 * d (to the library and back)\n    # Average speed = total distance / total time\n\n    # Since d cancels out, we don't actually need to know the distance.\n    # We can write the average speed in terms of walking and cycling speeds.\n    \n    average_speed = 2 * walking_speed * cycling_speed / (walking_speed + cycling_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend must get at least one ice-cream,\n    # we subtract 3 ice-creams from the total, guaranteeing each friend has one.\n    remaining_ice_creams = 5 - 3\n\n    # Now we need to distribute the remaining ice-creams to 3 friends,\n    # which is a problem of distributing indistinguishable objects into distinguishable boxes.\n    # This can be solved using combination with repetition.\n    \n    # The formula for combination with repetition is (n + r - 1) choose r,\n    # where n is the number of types to be chosen from (here it's the remaining ice-creams + 1),\n    # and r is the number of choices being made (here it's the number of friends).\n    \n    # We use the formula (r + n - 1)! / (r! * (n - 1)!)\n    # where n is remaining_ice_creams and r is the number of friends (3)\n\n    from math import factorial as fact\n\n    # Calculating the number of ways\n    ways = fact(remaining_ice_creams + 3 - 1) // (fact(3 - 1) * fact(remaining_ice_creams))\n\n    return ways\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    solutions = solve(equation, x)\n\n    return solutions[0]  # Assuming we want the first solution if there are multiple\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Initialize count for possible values of M\n    count = 0\n    # Try all possible one-digit numbers for M to make 127M divisible by 25 without remainder\n    for M in range(10):\n        # Construct the number 127M\n        total_sweets = int(f\"127{M}\")\n        # Check if 127M is divisible by 25\n        if total_sweets % 25 == 0:\n            # If divisible, increment the count and store the value\n            count += 1\n            sweets_per_bag = total_sweets // 25\n    # Check if there's only one solution\n    if count == 1:\n        return sweets_per_bag\n    # If no solution or multiple solutions, return some indication (e.g., -1)\n    return -1\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    y_value_when_x_equals_3 = solve(equation.subs(x, 3), y)[0]\n\n    return \"inverse\", y_value_when_x_equals_3\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n    all_permutations = permutations(['2', '3', '5', '6'])\n    odd_numbers = [int(''.join(p)) for p in all_permutations if int(p[-1]) % 2 != 0]\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To make sure we have at least two of the same color, we need to consider the worst-case scenario.\n    # We take one of each color first, which would result in 1 green and 1 blue.\n    # The next ball we take, no matter what color, will ensure we have two of the same color.\n    # So we need 1 (green) + 1 (blue) + 1 (either color) = 3 balls.\n    return 3\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her\n\n    # The cost of 3 servings of ice cream is (x - 0.30)\n    # The cost of 5 servings of ice cream is (x + 2.30)\n    # The cost per serving is the same, so the difference in cost\n    # should equal the difference in price for two servings\n    # Thus, (x + 2.30) - (x - 0.30) = Cost of 2 servings\n\n    cost_of_two_servings = (x + 2.30) - (x - 0.30)  # Simplifies to 2.60\n    cost_per_serving = cost_of_two_servings / 2      # Cost of one serving\n\n    # The cost of 3 servings is the amount she spent, so\n    # Cost of 3 servings = x - 0.30\n    cost_of_three_servings = 3 * cost_per_serving    # This is actually (x - 0.30)\n\n    # Now we can find x\n    x = cost_of_three_servings + 0.30\n\n    return round(x, 2)  # Since it's money, we round to two decimal places\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we start with is x.\n    x = symbols('x')\n    # Following the operations mentioned in the question.\n    result = (((((x + 3) * 2) - 2) + 10) / 2) - x\n    # Simplifying the resulting expression.\n    simplified_result = simplify(result)\n    # Since the final number doesn't depend on the number we started with,\n    # we'll evaluate the simplified result for x=0 to get the number that is left.\n    ans = simplified_result.subs(x, 0)\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let x be the total number of bracelets Felicia originally had\n    # According to the problem, Janice originally had 96 bracelets\n    # Felicia sold (3/5)x of her bracelets\n    # Janice bought (2/5)(3/5)x = (6/25)x of the bracelets Felicia sold\n    # After the transaction, Felicia has (1 - 3/5)x = (2/5)x bracelets left\n    # After the transaction, Janice has 96 + (6/25)x bracelets\n    # The new ratio of the number of Felicia's bracelets to the number of Janice's bracelets is 5:7\n    # So, (2/5)x / (96 + (6/25)x) = 5/7\n    # Solving for x gives us the original number of bracelets Felicia had\n    # Then we calculate the number of bracelets Janice bought from Felicia, which is (6/25)x\n\n    # Let's calculate it\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((2/5)*x / (96 + (6/25)*x), 5/7)\n    solution = solve(equation, x)\n    x_value = solution[0]\n    \n    # Calculate the number of bracelets Janice bought\n    bracelets_bought = (6/25) * x_value\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 20 + 10 + 20\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 100))\n    ans = len(primes)\n    \n    return ans\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    # First, consider numbers with exactly two sevens\n    for i in range(1, 10):  # For the non-seven digit (in hundreds place)\n        if i != 7:\n            count += 1  # two sevens can only be in tens and ones place\n        for j in range(0, 10):  # For the non-seven digit (in tens place)\n            if j != 7:\n                count += 1  # one seven in hundreds, one in ones place\n            if j == 7:  # if tens place is seven, then only one possibility for non-seven digit in ones\n                continue\n        for k in range(0, 10):  # For the non-seven digit (in ones place)\n            if k != 7:\n                count += 1  # one seven in hundreds, one in tens place\n            if k == 7:  # if ones place is seven, then only one possibility for non-seven digit in tens\n                continue\n    \n    # Then, consider numbers with exactly three sevens\n    count += 1  # There's only one: 777\n    \n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, (2 / 7) * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    saving = (individual_packet_cost * 15) - multipack_cost\n    return saving\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    amount = principal * (1 + interest_rate * time_years)\n\n    return amount\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Number of shirts that are not yellow\n    non_yellow = 6 + 4 + 12  # orange + pink + brown\n    # To ensure getting 1 yellow shirt, one must take out all non-yellow shirts plus one more (which will be yellow for sure)\n    shirts_to_take = non_yellow + 1\n    return shirts_to_take\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    missing_number = 3 * (3/4) - 1\n    return int(missing_number * 4)\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # Number of terms in the arithmetic progression\n    n = 20\n    # Sum of all terms in the arithmetic progression\n    total_sum = 560\n    # Common difference in the arithmetic progression\n    d = 2\n\n    # The formula for the sum of an arithmetic progression is (n/2)*(2*a + (n-1)*d)\n    # where \"a\" is the first term. From this formula, we can express \"a\" as follows:\n    # total_sum = (n/2)*(2*a + (n-1)*d)\n    # 2*a = (total_sum * 2 / n) - (n-1)*d\n    # a = ((total_sum * 2 / n) - (n-1)*d) / 2\n    a = ((total_sum * 2 / n) - (n-1)*d) / 2\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    net_distance = climb_distance - slip_distance\n    day_count = 0\n    \n    while total_distance > 0:\n        day_count += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slip_distance\n    \n    return day_count\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Total pages read in the first four days\n    first_period_pages = 25 * 4\n    # Total pages read in the following six days\n    second_period_pages = 40 * 6\n    # Total pages read in the last five days\n    third_period_pages = 80\n    \n    # Total pages read over all days\n    total_pages_read = first_period_pages + second_period_pages + third_period_pages\n    # Total number of days\n    total_days = 4 + 6 + 5\n    \n    # Average pages per day\n    average_pages_per_day = total_pages_read / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_remaining = 14\n    brother_after_gift = 12\n    difference_before_gift = 10\n\n    brother_original = brother_after_gift - difference_before_gift\n\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences is:\n    # x ≡ 3 (mod 4)\n    # x ≡ 3 (mod 5)\n    # x ≡ 5 (mod 7)\n    # x ≡ 9 (mod 11)\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reverse_age = int(str(age)[::-1])  # Get the reversed age\n        if reverse_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    num_terms = 50\n    first_term = 1\n    last_term = 50\n    \n    series_sum = (num_terms * (first_term + last_term)) // 2\n    \n    return series_sum\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # The maximum number of cards Tom can draw without having 4 cards of the same suit\n    # can occur when he draws cards in such a way that he has 3 cards from each suit,\n    # ensuring not to have 4 of any suit. That's 3 cards * 4 suits = 12 cards.\n    max_without_same_suit = 3 * 4\n\n    # As per the pigeonhole principle, to guarantee that he has 4 cards of the same suit,\n    # he needs to draw just one more card after having 3 cards of each suit.\n    ans = max_without_same_suit + 1\n\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    sold_percentage = 60 / 100\n    unsold_tickets = 28\n\n    total_capacity = unsold_tickets / (1 - sold_percentage)\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols to represent the amount spent by Hayden and Mitchell.\n    amount_spent = symbols('amount_spent')\n\n    # Create equations based on the problem statement.\n    # Hayden saves $1420 and Mitchell saves $505. After spending an equal amount,\n    # Hayden has 4 times as much money as Mitchell.\n    equation = Eq((1420 - amount_spent), 4 * (505 - amount_spent))\n\n    # Solve the equation to find the amount spent by each.\n    solutions = solve(equation, amount_spent)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of people at the party\n    x = symbols('x')\n\n    # 3/7 of the people are adults, so the rest 4/7 are children\n    # 3/8 of the children are boys, so the rest 5/8 are girls\n    # According to the problem, there are 45 girls\n    equation = Eq((4/7) * (5/8) * x, 45)\n\n    # Solve the equation for x\n    total_people = solve(equation, x)[0]\n    \n    return total_people\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    total_two_dollar_notes = two_dollar_notes * 2\n    total_fifty_cent_coins = fifty_cent_coins * 0.50\n\n    initial_total = total_two_dollar_notes + total_fifty_cent_coins\n    remaining_money = initial_total - file_cost\n\n    return remaining_money\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_distance\n\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n    \n    total_pupils = 18\n    pupils_to_seat = 3\n    \n    ways = factorial(total_pupils) // factorial(total_pupils - pupils_to_seat)\n    \n    return ways\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between_two_ginkgo = 2\n    \n    # Total willow trees are (ginkgo_trees - 1) times the willow_trees_between_two_ginkgo\n    total_willow_trees = (ginkgo_trees - 1) * willow_trees_between_two_ginkgo\n    \n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28  # speed of the ship in still water in km/h\n    speed_of_current = 3  # speed of the current in km/h\n    distance_upstream = 150  # distance to travel upstream in km\n\n    speed_upstream = speed_in_still_water - speed_of_current  # speed against the current in km/h\n    time_upstream = distance_upstream / speed_upstream  # time to travel upstream in hours\n\n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define variables for each boy\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(andrew + brian, 40)\n    eq2 = Eq(andrew + christopher, 37)\n    eq3 = Eq(christopher + brian, 25)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (andrew, brian, christopher))\n\n    # Calculate the total amount of money all boys have together\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's denote:\n    # A = Adam's weight\n    # B = Ben's weight\n    # C = Carl's weight\n    \n    # According to the question, we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To find the total weight, we need to calculate the sum of A, B, and C.\n    # By adding all three equations, we get:\n    # 2*A + 2*B + 2*C = 102 + 97 + 93\n    # Dividing both sides by 2 gives us their total weight.\n    \n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_kg = 500 / 1000  # Convert grams to kilograms\n    cheese_cost_per_kg = 7.48\n    apple_cost_each = 0.12  # Convert pence to pounds\n    yoghurt_cost_each = 0.46  # Convert pence to pounds\n    number_of_apples = 8\n    number_of_yoghurts = 2\n    note_value = 10  # £10 note\n\n    # Calculate costs\n    total_cheese_cost = cheese_weight_kg * cheese_cost_per_kg\n    total_apple_cost = number_of_apples * apple_cost_each\n    total_yoghurt_cost = number_of_yoghurts * yoghurt_cost_each\n\n    # Calculate total cost\n    total_cost = total_cheese_cost + total_apple_cost + total_yoghurt_cost\n\n    # Calculate change from a £10 note\n    change = note_value - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Zack's rate of selling aircrafts per hour\n    zack_rate = 150\n\n    # Total hours Andy and Zack work together\n    total_hours_together = 6\n\n    # Total aircrafts to be sold\n    total_aircrafts = 1200\n\n    # Total rate of selling aircrafts per hour when Andy and Zack work together\n    total_rate_together = total_aircrafts / total_hours_together\n\n    # Andy's rate of selling aircrafts per hour\n    andy_rate = total_rate_together - zack_rate\n\n    # Time it takes for Andy to sell all aircrafts by himself\n    time_for_andy = total_aircrafts / andy_rate\n\n    return time_for_andy\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Starting from n = 1 and incrementing, where n represents the size of the square\n    for n in range(1, 100):  # 100 is an arbitrary upper bound to find the solution\n        if n % 2 == 0:  # If n is even, there are more teachers\n            students = ((n // 2) * (n // 2)) * 4\n            teachers = (((n // 2) - 1) * ((n // 2) - 1)) * 4\n        else:  # If n is odd, there are more students\n            students = (((n // 2) + 1) ** 2) * 4 - 4\n            teachers = ((n // 2) ** 2) * 4\n\n        if students - teachers == 80:\n            total_people = students + teachers\n            return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    smaller, bigger = symbols('smaller bigger')\n\n    # The sum of the two numbers is 528\n    equation1 = Eq(smaller + bigger, 528)\n\n    # The bigger number is three times the smaller number\n    equation2 = Eq(bigger, 3 * smaller)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (smaller, bigger))\n\n    return solutions[bigger]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_money = 20\n    saved_money = 1 * 7  # Saving $1 each day for a week\n    lent_money = 5\n    spent_money = 3\n    \n    total_money_left = original_money + saved_money - lent_money - spent_money\n    return total_money_left\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variables for the original amounts of Steve, Mark, and Ryan be s, m, and r respectively\n    s, m, r, cost = symbols('s m r cost')\n\n    # Steve had $40 more than Mark\n    eq1 = Eq(s, m + 40)\n\n    # Steve paid for the meal\n    # After paying, their money left is in the ratio of 3:8:9\n    eq2 = Eq((s - cost) / (m) / (r), 3 / 8 / 9)\n\n    # Ryan paid for the meal\n    # After paying, their money left is in the ratio of 5:4:1\n    eq3 = Eq((s) / (m) / (r - cost), 5 / 4 / 1)\n\n    # Mark paid for the meal\n    # After paying, their money left is in the ratio of 10:1:9\n    eq4 = Eq((s) / (m - cost) / (r), 10 / 1 / 9)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (s, m, r, cost))\n\n    # Return the cost of the meal\n    return solutions[cost]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_owed_to_mum = 10.50\n    remaining_after_repayment = total_money - money_owed_to_mum\n    spent_on_magazines = remaining_after_repayment / 2\n    left_over = remaining_after_repayment - spent_on_magazines\n    return left_over\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # Let the cube number be n^3, and so we have 44000/q = n^3\n    # q must be a factor of 44000 that makes 44000/q a perfect cube\n    cube_roots = []\n    for i in range(1, 44001):\n        if 44000 % i == 0:\n            potential_cube = 44000 // i\n            cube_root = round(potential_cube ** (1/3))\n            if cube_root ** 3 == potential_cube:\n                cube_roots.append(i)\n    # Since we need to find the value of q, we return the largest factor\n    ans = max(cube_roots)\n    return ans\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the width, and l be the length\n    w = symbols('width')\n    l = 2 * w  # Length is twice the width\n\n    # Perimeter of a rectangle is 2*(length + width)\n    perimeter_equation = Eq(2 * (l + w), 72)\n\n    # Solve the equation for width\n    width_solution = solve(perimeter_equation, w)\n\n    # Since there may be two solutions (positive and negative), we take the positive one\n    width = width_solution[0]\n\n    # Calculate the length using the relationship between length and width\n    length = 2 * width\n\n    return length\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # applied force in N\n\n    # Calculate the maximum static friction force\n    max_static_friction_force = mass * 9.8 * coefficient_of_static_friction\n\n    # The actual static friction force is the minimum of the applied force and the maximum static friction force\n    static_friction_force = min(applied_force, max_static_friction_force)\n\n    return static_friction_force\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution\n    nick_salt = 300 * 0.12\n    # Nicole's solution\n    nicole_salt = 500 * 0.28\n    # Total salt\n    total_salt = nick_salt + nicole_salt\n    # Total solution weight\n    total_solution = 300 + 500\n    # Concentration of resulting solution\n    concentration = total_salt / total_solution\n    # Result in percentage\n    concentration_percent = concentration * 100\n\n    return concentration_percent\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    a, b = symbols('a b')\n\n    # Equation 1: B scored 50 points less than A\n    equation1 = Eq(b, a - 50)\n    \n    # Equation 2: If B gives A 25 points, then A's score is 5 times B's new score\n    equation2 = Eq(a + 25, 5 * (b - 25))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Return the solution for A's score\n    return solutions[a]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    num = 1\n    while True:\n        cube = num**3\n        square = int((cube + 1)**0.5)\n        if square**2 == cube + 1:\n            return square**2\n        num += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina_buttons in range(1, 24):\n        james_buttons = 24 - nina_buttons\n        if james_buttons + 6 == nina_buttons - 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_hours * total_workers)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_distance = 5\n    night_distance = -3\n    net_distance_each_day = day_distance + night_distance\n    total_distance = 16\n    days = 0\n    current_distance = 0\n\n    # Loop until the snail climbs out of the well\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        # Check if the snail can climb out during the day\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n        \n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given in the question, the tax charged (y) is $0.05 times the number of bags used (x)\n    y = 0.05 * x\n\n    return y\n\nx = symbols('x')  # Create a symbolic variable 'x' to represent the number of bags\nans = solution()   # Call the function to get the equation\n\n# Since the question only asks for the equation, we assign 'ans' to be the equation itself\nans = Eq(y, 0.05 * x)"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n\n    ans = fraction if fraction > decimal else decimal\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_cost = 275\n    \n    # Calculate cost for 5 days or less\n    for days in range(1, 6):\n        cost = flat_fee + (days * daily_fee_short)\n        if cost == total_cost:\n            return days\n            \n    # If more than 5 days, calculate additional days\n    cost_for_5_days = flat_fee + (5 * daily_fee_short)\n    additional_days = (total_cost - cost_for_5_days) // daily_fee_long\n    total_days = 5 + additional_days\n    return total_days\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit_ratio = 8\n    rabbit_to_chicken_ratio = 2\n    dog_to_chicken_ratio = dog_to_rabbit_ratio * rabbit_to_chicken_ratio\n    return dog_to_chicken_ratio\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(51-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270  # Starting height\n    rebound_ratio = 0.1   # Ratio of rebound to previous height\n    total_distance = initial_height  # The first drop from the initial height\n    \n    while initial_height * rebound_ratio > 0:\n        # Distance traveled upwards\n        total_distance += initial_height * rebound_ratio\n        # The ball goes up and then comes back down the same distance\n        total_distance += initial_height * rebound_ratio\n        # Next height is 10% of the previous height\n        initial_height *= rebound_ratio\n    \n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    total_sheets = 0\n    for sheet in range(1, 58):\n        page1 = 2 * sheet - 1\n        page2 = page1 + 1\n        page3 = 58 - page2\n        page4 = page3 + 1\n        if page1 + page2 + page3 + page4 == 58:\n            total_sheets = sheet\n            break\n    return total_sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    equation1 = Eq(green - 60, yellow - 14)\n    equation2 = Eq(green - 60, 3 * (yellow - 14))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n    \n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # Buck's speed in metres per minute\n    elephant_speed = 250  # Elephant's speed in metres per minute\n    race_distance = 3000  # Total race distance in metres\n\n    # Time taken by buck to finish the race (time = distance / speed)\n    buck_time = race_distance / buck_speed\n    # Time taken by elephant to finish the race\n    elephant_time = race_distance / elephant_speed\n\n    # Difference in time\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the first half of the sequence 4+8+12+...+400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_first_half = (first_term + last_term) * num_terms // 2\n    \n    # The sequence is symmetric, so the sum of the second half is the same as the first half\n    sum_second_half = sum_first_half\n    \n    # Since the sequence is the same forward and backward, we can just double the sum of the first half\n    ans = sum_first_half + sum_second_half\n    \n    return ans\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 0.15\n\n    bad_apples = total_apples * percentage_bad\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # Cost of one pencil\n    cost_of_one_pencil = cost_of_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7 : 3\n    # So, cost of one pen\n    cost_of_one_pen = (7/3) * cost_of_one_pencil\n    # Cost of 5 pens\n    cost_of_5_pens = 5 * cost_of_one_pen\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = num_terms * (first_term + last_term) // 2\n    return total_sum\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for time\n    t = symbols('t', positive=True, real=True)  # t is time after 6:10 pm in hours\n\n    # Equations based on the problem\n    equation1 = Eq(80 * t, 60 * t + 15)  # Simon catches up with his wife\n\n    # Solve for t\n    time_solution = solve(equation1, t)\n    time_to_overtake = time_solution[0]\n\n    # Calculate the real time when Simon overtook his wife\n    overtaking_time_in_minutes = time_to_overtake * 60\n    initial_time_in_minutes = 6 * 60 + 10  # Convert 6:10 pm to minutes\n\n    # Total time in minutes when Simon overtakes his wife\n    final_time_in_minutes = initial_time_in_minutes + overtaking_time_in_minutes\n\n    # Convert back to hours and minutes\n    hours = final_time_in_minutes // 60\n    minutes = final_time_in_minutes % 60\n\n    # Format the hours and minutes to get the final answer\n    overtaking_time = f\"{int(hours)}:{int(minutes):02d}\"\n    \n    return overtaking_time\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee and milk\n    foods = 3  # hamburgers, burritos, bagels\n    total_combinations = drinks * foods\n\n    return total_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initially all lockers are unlocked\n    lockers = [False] * 100  # False represents unlocked, True represents locked\n\n    # Boys with locker numbers divisible by 3 change their lockers to locked\n    for i in range(2, 100, 3):\n        lockers[i] = not lockers[i]\n\n    # Boys with locker numbers divisible by 5 toggle the state of their lockers\n    for i in range(4, 100, 5):\n        lockers[i] = not lockers[i]\n\n    # Counting how many lockers are unlocked at the end\n    num_unlocked = sum(not locker for locker in lockers)\n\n    return num_unlocked\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Ways to reach the 5th step: 1+1+1+1+1 or 1+1+1+2 (two ways)\n    ways_to_5th = 2\n    # From step 5 to step 10: This is identical to 5 steps since he must step on the 5th.\n    # It can be calculated as the number of combinations of taking 1 or 2 steps.\n    # Essentially it is the sum of combinations for all possible ways of taking 1- and 2-steps.\n    \n    ways_from_5_to_10 = 0\n    # n is the total steps from 5th to 10th\n    n = 5\n    # k is the number of 2-steps taken from the 5th to the 10th step\n    for k in range(n // 2 + 1):\n        # (n - k) is the total number of steps considering 2-steps as a single step\n        ways_from_5_to_10 += combinations(n - k, k)\n\n    return ways_to_5th * ways_from_5_to_10\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Time taken by each person to cross the river.\n    times = [5, 5, 9, 7]\n    \n    # Sort the list in ascending order for optimal pairing.\n    times.sort()\n    \n    total_time = 0\n    \n    # While there are more than 2 people on the starting side\n    while len(times) > 3:\n        # Two fastest cross together, fastest returns.\n        total_time += times[1] + times[0]\n        # Two slowest cross together, second fastest returns.\n        total_time += times[-1] + times[1]\n        # Remove the two slowest who have crossed.\n        times = times[:-2]\n    \n    # Last three people cross like this: two fastest cross, fastest returns, all cross.\n    total_time += sum(times)\n    \n    return total_time - times[1]  # Subtract the time of the second person who returns.\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of road in meters\n    total_days = 5      # total days to pave 500-meter road\n    length_per_day = total_length / total_days  # meters paved in one day\n    return length_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    participants_same_country = 9\n\n    ans = countries * (participants_same_country - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    n = 53\n    total = 2014\n    average = total / n\n    largest_number = average + (n - 1) / 2\n    return int(largest_number)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # From the incorrect calculation 88/A = 22, we deduce that A = 88 / 22\n    incorrect_A = 88 / 22\n    \n    # Now we use the correct number to find the correct answer: 98 / A\n    correct_answer = 98 / incorrect_A\n    \n    # The function returns the incorrect A value and the corrected answer\n    return incorrect_A, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four_calculators = 32\n    cost_per_calculator = cost_of_four_calculators / 4\n    cost_of_twelve_calculators = cost_per_calculator * 12\n    return cost_of_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6       # laps per minute\n    miller_speed = 5 / 10     # laps per minute\n    relative_speed = lucas_speed - miller_speed\n    \n    # Time it takes for Lucas to complete one more lap than Miller, i.e., overtake\n    time_to_overtake = 1 / relative_speed\n    \n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_value = 1670\n    greatest_possible_value = rounded_value + 4\n    return greatest_possible_value\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    ans = hours * minutes_per_hour\n    return ans\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children_visitors = (3/5) * total_visitors\n    remaining_visitors = total_visitors - children_visitors\n    men_visitors = (1/4) * remaining_visitors\n\n    equation = Eq(children_visitors - men_visitors, 120)\n\n    total = solve(equation, total_visitors)\n\n    return total[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # base rate in cents for up to 15 minutes\n    additional_rate = 5  # rate in cents for each additional minute\n    total_cost_cents = 140  # total cost in cents\n\n    # Calculate the cost of additional minutes beyond the base rate\n    additional_minutes_cost = total_cost_cents - base_rate\n    \n    # Calculate the number of additional minutes\n    additional_minutes = additional_minutes_cost // additional_rate\n    \n    # Total duration of the call\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_current_age = 8\n    \n    # Let the mother's current age be x years.\n    # When Tim is x years old, his mother will be 54 years old.\n    # Tim would need (x - tim_current_age) years to reach his mother's current age.\n    # So, in (x - tim_current_age) years, his mother's age would x + (x - tim_current_age).\n    # Set up the equation: x + (x - tim_current_age) = 54\n    \n    # Solving the equation\n    # 2x - tim_current_age = 54\n    # 2x = 54 + tim_current_age\n    # x = (54 + tim_current_age) / 2\n    mothers_current_age = (54 + tim_current_age) / 2\n\n    return int(mothers_current_age)\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of orange string in metres\n    purple_length_m = orange_length_m / 9.2  # length of purple string in metres\n    green_length_m = purple_length_m + 24.9 / 100  # length of green string in metres\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Define the equation as a string, considering the nature of the puzzle\n    equation = \"A + 13 * B / C + D + 12 * E - F - 11 + G * H / I - 10 = 66\"\n\n    # Since A to I are from 1 to 9 and they are all unique, use itertools.permutations\n    from itertools import permutations\n\n    for perm in permutations(range(1, 10)):\n        # Map A, B, C, D, E, F, G, H, I to the permutation values\n        A, B, C, D, E, F, G, H, I = perm\n\n        # Check if the equation holds true for the current permutation\n        if A + 13 * B / C + D + 12 * E - F - 11 + G * H / I - 10 == 66:\n            # If the equation is true, return the value of A\n            return A\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_work_per_day = 1 / 24\n    kevin_work_per_day = 1 / 20\n    total_days = 18\n\n    # Total work done by Ivy in 18 days\n    ivy_work = ivy_work_per_day * total_days\n\n    # Remaining work to be done by Kevin\n    remaining_work = 1 - ivy_work\n\n    # Days Kevin actually worked\n    kevin_work_days = remaining_work / kevin_work_per_day\n\n    # Days Kevin took off\n    kevin_days_off = total_days - kevin_work_days\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two pieces of the rope\n    x, y = symbols('x y')\n    \n    # Equation 1: The sum of the lengths of the two pieces is 49.5\n    equation1 = Eq(x + y, 49.5)\n    \n    # Equation 2: One piece is 5 times as long as the other\n    equation2 = Eq(x, 5 * y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The length of the longer piece (x) rounded to 1 decimal place\n    longer_piece_length = round(solutions[x], 1)\n    \n    return longer_piece_length\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n\n    # Money given on Monday, Tuesday, and Wednesday\n    total_money = (money_from_mum + money_from_dad) * 3\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_volume = 36\n    apple_ratio = 4\n    total_ratio = apple_ratio + 5  # 4:5 so total is 4 + 5\n    apple_volume = (total_volume * apple_ratio) / total_ratio\n    return apple_volume\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    climb_distance = 4\n    slide_distance = 1\n    net_distance_per_day = climb_distance - slide_distance\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_distance\n        \n    return days\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to complete the book alone\n    t = symbols('t')\n\n    # Nancy's rate of writing is 1 book per 6 days\n    nancy_rate = 1 / 6\n\n    # Tim's rate of writing is 1 book per t days\n    tim_rate = 1 / t\n\n    # Together, their combined rate is 1 book per 4 days\n    combined_rate = 1 / 4\n\n    # Equation representing combined work: 1/nancy_rate + 1/tim_rate = 1/combined_rate\n    equation = Eq((1 / 6) + (1 / t), 1 / 4)\n\n    # Solve for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 5\n    spend_amount = 8\n    cycle_days = 2\n    \n    cycles_completed = total_days // cycle_days\n    remaining_days = total_days % cycle_days\n    \n    money_after_cycles = initial_amount + (deposit_amount - spend_amount) * cycles_completed\n    \n    if remaining_days > 0:\n        money_after_cycles += deposit_amount  # Bob deposits £5 on the first day of the new cycle\n    \n    return money_after_cycles\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    final_count = 400  # Number of pupils left at school\n    final_percentage_y7 = 0.1  # Final proportion of Year 7 pupils (10%)\n    initial_percentage_y7 = 0.2  # Initial proportion of Year 7 pupils (20%)\n\n    # Calculate number of Year 7 pupils left at school\n    y7_left_at_school = final_percentage_y7 * final_count\n    # Calculate initial number of Year 7 pupils\n    initial_y7 = y7_left_at_school / initial_percentage_y7\n    # Calculate initial total number of pupils\n    total_initial = final_count / (1 - initial_percentage_y7 + final_percentage_y7)\n\n    return int(total_initial)\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    # Set the initial height of the squirrel and the jump count\n    height, jumps = 0, 0\n\n    while height < 31:\n        # The squirrel jumps three times\n        for _ in range(3):\n            if height < 31:\n                height += 3\n                jumps += 1\n            else:\n                break\n        # The squirrel slips back 2 meters after every 3 jumps if it hasn't reached the top yet\n        if height < 31:\n            height -= 2\n\n    return jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # Define a function to generate the nth term's denominator start\n    def nth_term_start(n):\n        return (n-1)**2 + 1\n\n    # Initialize the sum\n    total_sum = 0\n\n    # Calculate each term and add it to the total sum\n    for i in range(1, 7):\n        start = nth_term_start(i)\n        end = nth_term_start(i+1)\n        total_sum += i / (start * end)\n\n    # Add the last term\n    total_sum += 1 / nth_term_start(7)\n\n    return total_sum\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_amount = remaining_after_dress / (2/3)\n    return initial_amount\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from sympy import factorial\n\ndef count_trailing_zeros(n):\n    count = 0\n    while n % 10 == 0:\n        n //= 10\n        count += 1\n    return count\n\ndef solution():\n    num_zeros = count_trailing_zeros(factorial(999) // factorial(300))\n    return num_zeros\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The number of students on the outermost layer of a square formation is equal to the perimeter \n    # divided by 4, since a square has 4 equal sides.\n    # perimeter = 4 * side_length\n    # So for the outermost layer: 60 = 4 * side_length\n    # We solve for side_length\n    side_length = 60 // 4\n    \n    # The total number of students will be the square of the side_length, \n    # since students formed a square.\n    total_students = side_length ** 2\n    \n    # However, we need to count all the layers of the square inward.\n    # The next inner layer will be (side_length - 2) per side (excluding the corners),\n    # and so on until the side_length becomes zero or negative.\n    while side_length > 0:\n        total_students += (side_length - 2) * 4\n        side_length -= 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n'))  # Assume total is an even number 2n\n\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries, symbols('n')))\n    \n    # Filter out the solutions where the total number of vehicles is less than 100\n    valid_solutions = [(c, b, l) for c, b, l, n in solutions if c + b + l < 100 and c > 0 and b > 0 and l > 0]\n\n    return valid_solutions[0] if valid_solutions else None\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a, b, added = symbols('a b added')\n\n    # Equations based on the problem statement\n    equation1 = Eq(a - b, 64)              # A has 64 more buttons than B initially\n    equation2 = Eq(b - 2 * added, b - 28)  # B has 28 fewer buttons after removing 2 per added to A\n    equation3 = Eq(a + added + (b - 2 * added), 4 * (b - 2 * added))  # Ratio 4:1 of total vs B's buttons\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, added))\n\n    # Return the number of buttons in box A initially\n    return solutions[a]\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    ans = 764 * 7\n    return ans\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    n = 1  # Initialize n, assuming that the outermost layer is 1 tile wide\n    total_tiles = 0  # Initialize the total number of tiles\n\n    # Count the number of layers and total tiles until total_tiles exceed or equal to 400\n    while True:\n        layer_tiles = (2 * n - 1) ** 2  # Calculate the number of tiles in the current nth layer (odd layers are red, even are green)\n        if total_tiles + layer_tiles > 400:\n            break\n        total_tiles += layer_tiles\n        n += 1\n\n    remaining_tiles = 400 - total_tiles  # Calculate the remaining tiles after the last complete layer\n    if n % 2 == 0:\n        green_tiles = total_tiles + remaining_tiles  # If n is even, the remaining tiles are green\n        red_tiles = 400 - green_tiles  # The red tiles are the rest\n    else:\n        red_tiles = total_tiles + remaining_tiles  # If n is odd, the remaining tiles are red\n        green_tiles = 400 - red_tiles  # The green tiles are the rest\n\n    if red_tiles > green_tiles:\n        color = 'red'\n        difference = red_tiles - green_tiles\n    else:\n        color = 'green'\n        difference = green_tiles - red_tiles\n\n    return color, difference\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_gain = 24\n    rounds_played = 12\n    cards_per_win = 4\n    cards_per_loss = -2  # Negative since she loses cards\n    \n    # Let's denote the number of rounds won as w and the rounds lost as l.\n    # We have two expressions:\n    # w + l = rounds_played\n    # (cards_per_win) * w + (cards_per_loss) * l = total_gain\n    \n    # From the first expression we get:\n    # l = rounds_played - w\n    \n    # Now we plug this into the second expression and solve for w:\n    # (cards_per_win) * w + (cards_per_loss) * (rounds_played - w) = total_gain\n    \n    # Solving for w gives us:\n    w = (total_gain - (cards_per_loss * rounds_played)) / (cards_per_win - cards_per_loss)\n    \n    # We can find the number of rounds lost (l) by subtracting the number of wins from the total rounds played\n    l = rounds_played - w\n    \n    # The result should be an integer since it represents the number of rounds\n    return int(l)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    total_length = 300\n    interval = 10\n    \n    # Number of intervals is one less than the number of litter bins\n    num_intervals = total_length // interval\n    \n    # Total bins is number of intervals plus one (since bins are on both ends)\n    total_bins = num_intervals + 1\n    \n    return total_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # Divisibility rule for 3: Sum of the digits of the number must be divisible by 3\n    # Divisibility rule for 11: The difference between the sum of digits in odd places and\n    # the sum of digits in even places must be divisible by 11\n\n    # Initialize variables\n    base_sum = 2 + 6 + 2 + 7  # Sum of the non-repeating digits\n    repeating_sum = 2 + 0 + 1 + 1  # Sum of the digits in one block of 2011\n    min_n = 0\n    \n    # Loop through possible n values to find the minimum n that satisfies both divisibility rules\n    while True:\n        total_sum = base_sum + repeating_sum * min_n\n        odd_even_diff = abs((2 + 7 + min_n * (0 + 1)) - (6 + 2 + min_n * (2 + 1)))\n        \n        if total_sum % 3 == 0 and odd_even_diff % 11 == 0:\n            break\n        min_n += 1\n\n    return min_n\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, discard, rounds = 20, 19, 18, 0, 0\n    while min(x, y, z) > 0:\n        rounds += 1\n        if x >= y and x >= z:\n            x -= 2\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n        discard += 1\n    return rounds\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    common_difference = 4\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    count = 0\n    # Including 0 to consider empty plates\n    for x1 in range(0, 8):\n        for x2 in range(0, 8):\n            for x3 in range(0, 8):\n                if x1 + x2 + x3 == 7:\n                    count += 1\n    # Since the plates are identical, we need to divide by the factorial\n    # of the number of plates to eliminate overcounting due to permutations\n    # Note: this is equivalent to the stars and bars combinatorial method\n    return count // 6  # factorial of the number of plates (3)\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob takes 3 minutes to make 3 cuts to get 4 pieces\n    # To calculate minutes per cut\n    minutes_per_cut = 3 / 3\n    \n    # To get 8 pieces, Bob will need 7 cuts\n    total_cuts_for_8_pieces = 8 - 1\n    \n    # Now, we calculate the total minutes needed for 7 cuts\n    total_minutes = minutes_per_cut * total_cuts_for_8_pieces\n    \n    return total_minutes\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_spent = rasidah * (3/5)\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = chai_seng * (6/7)\n    \n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng - chai_seng_spent, (rasidah - rasidah_spent) / 2)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    current_collection = initial_cards - duplicates + new_cards\n    return current_collection\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Amy and Judy sitting together can be treated as a single entity, with 6 other people to arrange.\n    # Hence, there are 7 \"entities\" to arrange in a circle.\n    # The number of arrangements of n distinct objects in a circle is (n-1)!.\n    num_arrangements_circle = factorial(7 - 1)\n\n    # Amy and Judy can switch places with each other, which accounts for 2! arrangements.\n    amy_judy_arrangements = factorial(2)\n\n    # Multiplying the number of circular arrangements with the number of ways Amy and Judy can arrange themselves.\n    num_ways = num_arrangements_circle * amy_judy_arrangements\n    return num_ways\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote andy's initial number of cookies as a\n    # and ben's initial number of cookies as b\n    a, b = symbols('a b')\n    \n    # From the problem description, we have two equations:\n    # Andy had 84 fewer cookies than Ben initially: a = b - 84\n    equation1 = Eq(a, b - 84)\n    \n    # After purchasing, Andy had 1/3 more cookies, and Ben had 1/5 more cookies:\n    # Andy's new amount is a + (a/3) and Ben's new amount is b + (b/5)\n    # Andy then had 1/3 as many cookies as Ben:\n    # a + (a/3) = 1/3 * (b + (b/5))\n    equation2 = Eq(a + (a/3), (1/3) * (b + (b/5)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # From the solutions dictionary, we get the number of Andy's cookies in the end\n    # which is his initial amount plus 1/3 of that amount.\n    andy_cookies_end = solutions[a] + (solutions[a] / 3)\n\n    return andy_cookies_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total = sum(1/i for i in range(1, 8))\n    return int(total)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n    years = 0\n\n    while principal < final_amount:\n        principal *= (1 + rate)\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    return 0.7 + 0.04 + 1.006\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since we don't know the exact number Mr. Tan wrote on the slip of paper,\n    # we can't solve this problem directly. But we can infer from the problem that\n    # 1. Four students were certain about their divisibility status in the first round.\n    # 2. Six students were certain about their divisibility status in the second round.\n    # 3. Tom raised his hand in both rounds, so his number is divisible by 24.\n    # Since Tom was certain in the first round, the number on the slip must also be a factor\n    # of 24, otherwise Tom wouldn't be certain. This means the number on the slip is 1, 2,\n    # 3, 4, 6, 8, 12, or 24.\n\n    # If Tom's number is divisible by 24 it must be one of these {24, 48, 72, 96}\n    # Since there are 9 different two-digit numbers and Tom's number is one of the\n    # four given above, the rest of the numbers must be selected from two-digit numbers\n    # excluding Tom's number and its multiples or divisors of 24.\n    # Hence, the possible numbers are 1-99 excluding {24,48,72,96} and their\n    # multiples/divisors like {12,36,60,84}, etc. We don't need to know the exact number,\n    # we need to find the sum of these numbers excluding Tom's number.\n\n    # Since Tom's number is divisible by 24 and his friends' numbers are all different,\n    # his friends' numbers cannot be divisible by 24. So, we exclude multiples of 24 from\n    # the sum of the numbers 10-99 (since we need two-digit numbers).\n    all_numbers_sum = sum(range(10, 100))\n    excluded_multiples_sum = sum(range(24, 100, 24))\n    return all_numbers_sum - excluded_multiples_sum\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    n = 20\n    difference = 1\n    negative_difference = -1\n    while True:\n        n += negative_difference\n        if n == -15:\n            break\n        n += difference\n    n += difference\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    equivalent_fraction = 6 / 20\n    numerator = 12\n    denominator = numerator / equivalent_fraction\n    return int(denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of students who passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Individual test pass counts\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # To find the maximum number who passed all three tests,\n    # we should first assume that the overlap between any two tests is minimal.\n    # The maximum number passing all three tests will be when the remaining\n    # students after accounting for those who passed exactly one test have all passed all tests.\n\n    # Calculate the maximum possible number of students passing all three tests\n    max_passed_all_three = (passed_math + passed_science + passed_english) - total_passed_at_least_one\n\n    # Since a student cannot pass more than one test more than once,\n    # we need to ensure that the maximum number does not exceed the number of students.\n    # The minimum value to pick to satisfy the condition would be 0\n    max_passed_all_three = max(0, max_passed_all_three)\n    \n    return max_passed_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Ahmad's speed\n    speed_ahmad = 80  # meters per minute\n    # Younger brother's speed\n    speed_brother = 50  # meters per minute\n\n    # Distance from the school when Ahmad meets his younger brother\n    meeting_distance = 210  # meters\n\n    # Let x be the distance between school and home\n    # Ahmad travels distance x to the school and x - meeting_distance on the way back\n    # Younger brother travels distance (school - meeting_distance) which is x - 210\n\n    # Time for Ahmad to meet his brother is the same for both, so we can set their travel times equal:\n    # Time = Distance / Speed\n    # Ahmad's time to meet = (x + (x - 210)) / 80\n    # Brother's time to meet = (x - 210) / 50\n    # Set them equal and solve for x:\n    # (x + (x - 210)) / 80 = (x - 210) / 50\n    # 50 * (x + x - 210) = 80 * (x - 210)\n    # 50x + 50x - 50*210 = 80x - 80*210\n    # 100x - 50*210 = 80x - 80*210\n    # 20x = 30*210\n    # x = 30*210 / 20\n    \n    distance_home_to_school = (30 * 210) / 20\n\n    return distance_home_to_school\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the four numbers\n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    # a > b > c > d (> 0 for being positive whole numbers)\n    \n    # We have the system of equations based on the two given conditions:\n    # d + (a + b + c) / 3 = 39\n    # a + (b + c + d) / 3 = 51\n    # We need to find the largest possible value of 'a'.\n    \n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n    \n    # Since a is the largest number and we want to maximize it, let's solve the system for a:\n    solution = solve((equation1, equation2), (a, b, c, d), dict=True)\n    \n    # Since we want the largest possible value of the largest number 'a' with distinct positive whole numbers,\n    # and the numbers are arranged in descending order, we will look for the solution with the largest 'a'.\n    \n    max_a = 0\n    for sol in solution:\n        a_val = sol[a]\n        b_val = sol[b]\n        c_val = sol[c]\n        d_val = sol[d]\n        \n        # Check if the numbers are distinct and positive\n        if len(set([a_val, b_val, c_val, d_val])) == 4 and min(a_val, b_val, c_val, d_val) > 0:\n            max_a = max(max_a, a_val)\n\n    return max_a\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical and the pencil cases are different, \n    # we must subtract each case from the total number of ways to divide 6 pens.\n    # This is a problem of distributing n identical items into r distinct groups, \n    # such that no group is empty. According to the stars and bars theorem,\n    # the number of ways is given by: C(n - 1, r - 1), where C is the combination.\n    # In this case, n = 6 pens and r = 3 pencil cases.\n    from math import comb\n\n    n = 6  # total identical items\n    r = 3  # distinct groups\n    ans = comb(n - 1, r - 1)\n\n    return ans\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n\n    # Evaluating the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator1 = Fraction(2, 25)\n    complex_fraction1 = numerator1 / denominator1\n\n    # Evaluating the second complex fraction\n    numerator2 = Fraction(2) - Fraction(2, 3)\n    denominator2 = Fraction(8, 3)\n    complex_fraction2 = numerator2 / denominator2\n\n    # Adding the two complex fractions\n    result = complex_fraction1 + complex_fraction2\n\n    # Converting to a simple fraction (optional, for precise representation)\n    ans = result.limit_denominator()\n\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    # The first 8 is in the thousands place, which means it has a place value of 8 * 1000\n    first_eight_value = 8 * 1000\n    # The second 8 is in the hundreds place, which means it has a place value of 8 * 100\n    second_eight_value = 8 * 100\n    # The difference between the place values\n    difference = first_eight_value - second_eight_value\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    largest_palindrome = 0\n    smallest_palindrome = 99999\n\n    for i in range(999, 99, -1):\n        pal_str = str(i) + str(i)[::-1]\n        pal_num = int(pal_str)\n        \n        if pal_num % 45 == 0:\n            largest_palindrome = max(largest_palindrome, pal_num)\n            smallest_palindrome = min(smallest_palindrome, pal_num)\n            \n    ans = largest_palindrome - smallest_palindrome\n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(0, 10):\n        if (10 * 2 + A) % 4 == 0 and A % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    supplements = (1, 2, 7)\n    \n    # Step 2: Find the LCM of all the divisors\n    divisors = (5, 6, 11)\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    congruences = [(supplements[i], divisors[i]) for i in range(3)]\n    _, lcm_remainder = solve_congruence(*congruences)\n\n    return lcm_remainder\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    \n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            break\n\n    return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length1 = 16\n    length2 = 24\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind_luna = 4\n\n    total_sheep = luna_position_from_front + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mean_all = symbols('mean_all')\n\n    # The top 3 students have a mean of 92\n    total_top_3 = 3 * 92\n\n    # The last 7 students have a mean that is 6 less than the mean of all 10 students\n    # mean_all - 6 is the mean of the last 7 students\n    total_last_7 = 7 * (mean_all - 6)\n\n    # The sum of the top 3 and the last 7 is the total of all 10 students: 10 * mean_all\n    equation = Eq(total_top_3 + total_last_7, 10 * mean_all)\n\n    # Solve for the mean of all 10 students\n    mean_score_all_students = solve(equation, mean_all)[0]\n    \n    return mean_score_all_students\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            perm = permutations(digits, 4)\n            for p in perm:\n                num = int(''.join(p))\n                if num == year:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        other_bags = [x for x in bags if x != red_marbles]\n        # Try all possible combinations for Jaslin's bags\n        for i in range(5):\n            for j in range(i+1, 5):\n                for k in range(j+1, 5):\n                    jaslin_bags = [other_bags[i], other_bags[j], other_bags[k]]\n                    george_bags = [x for x in other_bags if x not in jaslin_bags]\n                    if sum(jaslin_bags) == 2 * sum(george_bags):\n                        return red_marbles\n    return None\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of sweets Andre has before the teacher gave them more.\n    # Let b be the number of sweets Beth has before the teacher gave them more.\n\n    a, b = symbols('a b')\n\n    # They both have a total of 24 sweets before receiving more.\n    equation1 = Eq(a + b, 24)\n\n    # After receiving 4 sweets each, Andre has 6 sweets more than Beth.\n    equation2 = Eq(a + 4 - (b + 4), 6)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Beth now has b + 4 sweets.\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the five consecutive even numbers can be represented as x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is x + (x+2) + (x+4) + (x+6) + (x+8) = 5x + 20\n    # This sum is equal to 100, so we can write the equation 5x + 20 = 100\n    # Solving for x gives us x = (100 - 20) / 5\n    \n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550  # distance in km\n    time_initial = 5  # time in hours initially\n    time_final = 3  # time in hours for the new journey\n\n    # Calculate the speed of the car\n    speed = distance / time_initial\n\n    # Calculate the distance traveled in 3 hours\n    distance_final = speed * time_final\n\n    return distance_final\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2/5\n    fraction_remaining = 1 - fraction_sold  # fraction of the apples that are left\n\n    initial_apples = remaining_apples / fraction_remaining  # total number of apples before selling\n\n    return int(initial_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from sympy import Rational\nfrom math import factorial\n\ndef solution():\n    # Total number of arrangements without any restrictions (12 blocks: 2 of each color)\n    total_ways = factorial(12) // (factorial(2)**6)\n    \n    # Number of ways to arrange one color with an even number of blocks between them\n    # 5 spots, choose 2: (B _ _ _ _ B), divide by 2! because blocks are indistinguishable\n    even_ways_one_color = factorial(5) // factorial(2)\n    \n    # Number of ways for all colors to be arranged evenly\n    even_ways_all_colors = even_ways_one_color ** 6\n    \n    # Calculate probability\n    prob = Rational(even_ways_all_colors, total_ways)\n    \n    # Return the sum of the numerator and the denominator\n    return prob.numerator + prob.denominator\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    jump_distance = 3\n    num_jumps = 15 - 1  # Number of jumps is one less than the number of posts\n\n    total_distance = jump_distance * num_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    apples = 36\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries + apples\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Inlet A fills the pool in 36 minutes, so it fills 1/36 of the pool per minute\n    inlet_A_rate = 1 / 36\n    # Inlet B fills the pool in 48 minutes, so it fills 1/48 of the pool per minute\n    inlet_B_rate = 1 / 48\n\n    # Initialize variables to keep track of the total filled pool and the time\n    filled_pool = 0\n    time = 0\n\n    # Continue looping while the pool is not yet full\n    while filled_pool < 1:\n        # Follow the sequence: A for 1 min, B for 2 mins, A for 2 mins, B for 1 min.\n        # Check for each step in the sequence to avoid overfilling the pool.\n        if filled_pool + inlet_A_rate <= 1:\n            filled_pool += inlet_A_rate\n            time += 1\n        else:\n            break  # The pool is full\n\n        if filled_pool + 2 * inlet_B_rate <= 1:\n            filled_pool += 2 * inlet_B_rate\n            time += 2\n        else:\n            break  # The pool is full\n\n        if filled_pool + 2 * inlet_A_rate <= 1:\n            filled_pool += 2 * inlet_A_rate\n            time += 2\n        else:\n            break  # The pool is full\n\n        if filled_pool + inlet_B_rate <= 1:\n            filled_pool += inlet_B_rate\n            time += 1\n        else:\n            break  # The pool is full\n\n    # Return the nearest minute\n    return round(time)\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    alan_and_bob_rate = 1 / 4\n    bob_rate = 1 / 6\n    \n    alan_rate = alan_and_bob_rate - bob_rate\n    alan_time = 1 / alan_rate\n    \n    return alan_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_rain_neither_day = (1 - prob_rain_saturday) * (1 - prob_rain_sunday)\n    prob_rain_at_least_one_day = 1 - prob_rain_neither_day\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_lost_per_incorrect = 3\n    total_questions = 10\n    \n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if (correct * points_per_correct) - (incorrect * points_lost_per_incorrect) == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    factor_5_count = 0\n\n    while True:\n        m = n\n        while m % 5 == 0:\n            factor_5_count += 1\n            m //= 5\n\n        if factor_5_count >= 28:\n            break\n        \n        n += 1\n        \n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bought_bottles = 10\n    lend_bottles = 1\n    total_bottles = bought_bottles + lend_bottles\n    drunk_bottles = 0\n    \n    while total_bottles >= 2:\n        exchange = total_bottles // 2\n        drunk_bottles += exchange\n        total_bottles = total_bottles % 2 + exchange\n    \n    # Returning the lent bottle.\n    if total_bottles == 1 and lend_bottles == 1:\n        drunk_bottles -= 1\n\n    return drunk_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    height_ratio = 3\n\n    # Equation representing when the height in A is 3 times that of B\n    equation = Eq((10 - t) / 10, height_ratio*((6 - t) / 6))\n\n    # Solve for t\n    t_solution = solve(equation, t)\n\n    return t_solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2*x - 2), 21)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n    \n    andrea_position_from_front = total_children - andrea_position_from_back + 1\n    \n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    initial_sweets = 320\n    new_sweets_weekly = 30\n    final_sweets = 348\n\n    # Total sweets acquired after 7 weeks\n    total_sweets_acquired = initial_sweets + total_weeks * new_sweets_weekly\n    \n    # Sweets eaten weekly\n    sweets_eaten_weekly = (total_sweets_acquired - final_sweets) / total_weeks\n\n    return sweets_eaten_weekly\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5 / 6\n    fenced_length = 2 / 3\n    unfenced_length = path_length - fenced_length\n\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1  # Max spent one hour less than Louise\n    sally_time = 3 * louise_time  # Sally spent 3 times the amount of Louise at home\n    return sally_time\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Initially, Chenxi = Yue Ying + 5\n    # Chenxi gives Yue Ying 10 sweets\n    # Now, Chenxi = (Yue Ying + 5) - 10\n    # And Yue Ying = Yue Ying + 10\n    # The difference is: Chenxi - Yue Ying = ((Yue Ying + 5) - 10) - (Yue Ying + 10)\n    return (5 - 10) - 10\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    return 1\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    speed1 = 3  # Speed in km/h for being late\n    speed2 = 7  # Speed in km/h for being early\n    time_diff = (12 + 8) / 60  # Total time difference in hours (20 min converted to hours)\n\n    # As per the inverse proportion rule: speed1/speed2 = (time taken for speed2) / (time taken for speed1)\n    # Let the distance be 'd' and time taken at speed1 be 't'. Then, time taken at speed2 is 't - time_diff'.\n    # Therefore, the equation becomes speed1/speed2 = (t - time_diff) / t\n    # Solving for 'd' using the relation speed = distance/time, we get the following two equations:\n    # d = speed1 * t and d = speed2 * (t - time_diff)\n\n    # From both equations, we can extract 't' and equate them:\n    # speed1 * t = speed2 * (t - time_diff)\n    # t = time_diff * speed2 / (speed2 - speed1)\n\n    t = time_diff * speed2 / (speed2 - speed1)\n\n    # Now, we substitute 't' in the equation d = speed1 * t to find the distance\n    d = speed1 * t\n\n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 69))\n\n    for i in primes:\n        if 69 - i in primes:\n            return abs(i - (69 - i))\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let school A have 'a' students and school B have 'b' students initially.\n    a, b = symbols('a b')\n\n    # Initial total number of students in school A and school B is 1050.\n    equation1 = Eq(a + b, 1050)\n\n    # After transferring 20 students from A to B, A has 10 more students than B\n    # Which can be represented as (A - 20) = (B + 20) + 10\n    equation2 = Eq(a - 20, b + 20 + 10)\n\n    # Solving the two equations simultaneously for a and b.\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from itertools import permutations\n\ndef calculate_expression(a, b, c, d):\n    return 15 + a * (5 * b * (5 + c) + 15) - d * 6 + 7\n\ndef solution():\n    results = []\n    # Generate all possible permutations of bracket pairs\n    for p in permutations([1, -1], 4):\n        # Calculate the expression for each permutation\n        results.append(calculate_expression(*p))\n    return max(results)\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 10 - incorrect * 5\n        if score == 70:\n            return correct\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_for_five = 54 * 5\n    total_for_first_two = 48 * 2\n    \n    total_for_last_three = total_for_five - total_for_first_two\n    average_for_last_three = total_for_last_three / 3\n\n    return average_for_last_three\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    # Digits from Judy's birthday: 0, 8, 7, 2, 0, 0, 3\n    # Unique digits (excluding duplicates and zero): 8, 7, 2, 3\n    unique_digits = [8, 7, 2, 3]\n\n    # Generate sorted list of numbers from unique digits less than 50\n    possible_numbers = [int(str(a) + str(b)) for a in unique_digits for b in unique_digits if int(str(a) + str(b)) < 50]\n    possible_numbers = sorted(set(possible_numbers), reverse=True)\n\n    # Find the largest prime number from the list\n    for number in possible_numbers:\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Define the ratios for each group\n    adults_ratio = 2/7\n    boys_ratio_of_remainder = 4/5\n    \n    # Calculate girls ratio of the remaining audience\n    girls_ratio_of_remainder = 1 - boys_ratio_of_remainder\n    \n    # Calculate girls ratio of the total audience\n    girls_ratio = girls_ratio_of_remainder * (1 - adults_ratio)\n\n    # Define the difference between number of adults and girls is 80\n    difference = 80\n\n    # Find the total number of people based on the difference\n    # (2/7)T - (2/35)T = 80 -> Solve for T (Total people)\n    total_people = difference / (adults_ratio - girls_ratio)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    cuts = 4\n    max_slices = sum(range(1, cuts + 2))  # +2 to include the 4th cut in the series\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n    rabbit_position_left_to_right = elephant_position + toys_between + 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = sum(sum_of_digits(i) for i in range(1, 110))\n    return total_sum\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_classes_students = 10\n\n    # Calculate only writing class students using inclusion-exclusion principle\n    only_writing_students = total_students - math_students - neither_classes_students + both_classes_students\n\n    return only_writing_students\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = 48 / (11 + 1)\n    return int(pink)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # Area of triangle = 1/2 * base * height\n    # height = (2 * Area) / base\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    # Let teddy's current age be t and father's current age be f.\n    # From the problem statement when Teddy was 5, thus current age of Teddy be t = 5.\n    # Father's age was 7 times Teddy's age when Teddy was 5.\n    # f - (t - 5) = 7 * 5\n    \n    # When father is 40 years old, we need to find Teddy's age.\n    # Let's denote Teddy's age when father is 40 by t_future.\n    # Since father is currently f years old, the time it takes for father to reach 40 is 40 - f.\n    # In that time, Teddy will also get older by the same number of years.\n    # So, t_future = t + (40 - f)\n    \n    # Using the first equation:\n    f = 7 * 5 + 5  # Father's age when Teddy was 5 + Teddy's age at that time\n    \n    # Using the second equation to find Teddy's future age when his father is 40:\n    t_future = 5 + (40 - f)  # Adding the same number of years to Teddy's current age\n    \n    return t_future\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_of_squares\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since we want to find the remainder when 2^2019 is divided by 4^982 - 2^1963 modulo 5,\n    # we can simplify using properties of exponents and modulo operations.\n\n    # 4^982 can be rewritten as (2^2)^982 = 2^1964, and we can subtract 2^1963 from it:\n    divisor = (2**1964 - 2**1963) % 5\n    \n    # Now, we find the remainder when 2^2019 is divided by the divisor modulo 5\n    # We can use the fact that 2^4 = 16, which is congruent to 1 modulo 5.\n    # Hence, 2^2019 is congruent to 2^3 modulo 5, since 2019 mod 4 = 3.\n    remainder = (2**3) % divisor\n    \n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    equation1 = Eq(chairs - 42, tables)\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    percentage = 35 / 100\n    amount = 700\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_to_left_of_candy = 4\n    cabinets_to_right_of_candy = 7\n    candy_own_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_to_left_of_candy + candy_own_cabinet + cabinets_to_right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n\n    total_books = first_day_books + second_day_books\n\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 7 and ones % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):  # Since Y is a single digit, it ranges from 0 to 9.\n        number = int(f\"106{Y}\")\n        if number % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    cookies_eaten = 6\n    remaining_cookies = initial_cookies - cookies_eaten\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    classes = 5\n    total_boxes = boxes_per_class * classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # To be divisible by 5, the last digit must be 0 or 5.\n    # Since we want the largest number, we will choose 0 for the last digit.\n    last_digit = 0\n\n    # To be divisible by 2, the number must be even. Since the last digit is 0,\n    # it is already even, so this condition is satisfied.\n\n    # We want the number to be divisible by 3 as well.\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # Since the sum of the first two digits (4 + 9) is 13, we need to find a digit\n    # for the tens place such that (13 + ten_digit + last_digit) is divisible by 3.\n    # Since last_digit is 0, we look for a ten_digit from 9 to 0 that\n    # makes the sum divisible by 3 and gives us the largest number.\n\n    for ten_digit in range(9, -1, -1):\n        if (13 + ten_digit) % 3 == 0:\n            # once a suitable ten_digit is found, we build the final number\n            ans = int(f\"49{ten_digit}{last_digit}\")\n            return ans\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Equation 1: motorcycles + cars + lorries = 27 (total vehicles)\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n\n    # Equation 2: 2*motorcycles + 4*cars + 6*lorries = 96 (total wheels)\n    equation2 = Eq(2*motorcycles + 4*cars + 6*lorries, 96)\n\n    # Equation 3: cars = lorries (number of cars is equal to number of lorries)\n    equation3 = Eq(cars, lorries)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Calculate the sum of first 100 natural numbers\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # Calculate the square of the sum of numbers\n    square_of_sum = sum_of_numbers ** 2\n    \n    # Since 1^3 + 2^3 + 3^3 + ... + n^3 = (1 + 2 + 3 + ... + n)^2,\n    # we already have the numerator as square_of_sum\n    \n    # Result is just a division of the square_of_sum by sum_of_numbers\n    ans = square_of_sum / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the empty jar\n    # Let y be the mass of one chocolate\n\n    # According to the problem we have two equations\n    # x + 5y = 185\n    # x + 17y = 317\n\n    # We can solve these linear equations for x and y\n    # Using the elimination method by subtracting the two equations we get\n    # 12y = 317 - 185\n    # y = (317 - 185) / 12\n\n    y = (317 - 185) / 12\n\n    # We can now use either of the two initial equations to solve for x\n    # Let's use the first equation: x + 5y = 185\n    x = 185 - 5 * y\n\n    # We need to find the mass of the mass of the jar with 10 chocolates\n    # This would be x + 10y\n    ans = x + 10 * y\n    return int(ans)\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    return solutions[kristoff] - solutions[ana]\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols: total number of apples (a), pears (p), and mangoes (m)\n    a, p, m = symbols('a p m')\n\n    # Given ratios for the money John spent on apples:pears and pears:mangoes\n    cost_apples_per_unit = 0.60  # Cost of each apple\n\n    # Express pears and mangoes in terms of apples based on their quantities\n    p = Eq(p, (4 / 5) * a)\n    m = Eq(m, (2 / 5) * a)\n\n    # Express the cost relationships using the ratios given\n    # Let's calculate total cost using the ratios and the known cost of an apple\n    cost_ratio_apples_pears = 3 / 2\n    cost_ratio_pears_mangoes = 1 / 5\n\n    # Thus, cost of pears (c_p) is cost of apples (0.60a) times the ratio of costs\n    # And, cost of mangoes (c_m) is cost of pears (c_p) times the ratio of their costs\n    c_p = Eq((0.60 * a) * cost_ratio_apples_pears, (0.60 * 4 / 5) * a)\n    c_m = Eq((0.60 * 4 / 5) * a, ((0.60 * 4 / 5) * a) * cost_ratio_pears_mangoes)\n\n    # Now that we have the cost equations set up, we need to combine them with the total cost:\n    total_cost = Eq((0.60 * a) + (0.60 * 4 / 5) * a + ((0.60 * 4 / 5) * a) * cost_ratio_pears_mangoes, 150)\n\n    # Solve for the number of apples (a)\n    solution = solve((p, m, c_p, c_m, total_cost), (a, p, m))\n\n    total_fruits = solution[a] + solution[p] + solution[m]\n\n    return total_fruits\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # in grams\n    sugar_concentration = 0.32   # 32% concentration\n    sugar_weight = total_solution_weight * sugar_concentration  # in grams\n    \n    water_weight = total_solution_weight - sugar_weight  # in grams\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # A seven-digit number 1992xxx is divisible by 2, 3, 5, and 11.\n\n    # Initialize the smallest seven-digit number with '1992000' which is the base for the given pattern\n    base_number = 1992000\n\n    # Divisibility by 2: It is already satisfied as the last digit is 0.\n\n    # Divisibility by 5: It is already satisfied as the last digit is 0.\n\n    # Divisibility by 3: \n    # For a number to be divisible by 3, the sum of its digits must be a multiple of 3.\n    # We already have sum of digits = 1 + 9 + 9 + 2 = 21. So we need the sum of the three unknown digits to be a multiple of 3.\n    # Starting from 0 to find the smallest number.\n    for x in range(1000):\n        current_number = base_number + x\n        sum_of_digits = sum([int(digit) for digit in str(current_number)])\n        if sum_of_digits % 3 == 0:\n            # Check divisibility by 11:\n            # For a number to be divisible by 11, the difference between the sum of its digits in odd positions and the sum of its digits in even positions is a multiple of 11 or 0.\n            even_digits_sum = sum([int(str(current_number)[i]) for i in [1, 3, 5]])\n            odd_digits_sum = sum([int(str(current_number)[i]) for i in [0, 2, 4, 6]])\n            if (odd_digits_sum - even_digits_sum) % 11 == 0:\n                return current_number\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800  # Total length of the road in meters\n    num_trees = 21      # Total number of trees to be planted\n\n    # One less interval than the number of trees\n    num_intervals = num_trees - 1 \n\n    # Distance between trees is total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n    \n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    # First half of the year savings\n    first_half_savings = 366\n    # Number of months in the first half of the year\n    first_half_months = 6\n    \n    # Average monthly savings in the second half of the year\n    second_half_average = 65\n    # Number of months in the second half of the year\n    second_half_months = 6\n    \n    # Total savings in the second half of the year\n    second_half_savings = second_half_average * second_half_months\n    \n    # Total savings for the year\n    total_savings = first_half_savings + second_half_savings\n    \n    # Total number of months in the year\n    total_months = first_half_months + second_half_months\n    \n    # Average savings per month for the whole year\n    average_savings = total_savings / total_months\n    \n    return average_savings\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = (last_term - first_term) + 1\n    sum_of_terms = (first_term + last_term) * number_of_terms // 2\n  \n    return sum_of_terms\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    avg_total = 92  # Average after six assignments\n    avg_first_five = 94  # Average of the first five assignments\n    num_assignments = 6  # Total number of assignments\n\n    # Calculate the total score for the first five assignments\n    total_score_first_five = avg_first_five * (num_assignments - 1)\n    \n    # Calculate the total score after six assignments\n    total_score_after_six = avg_total * num_assignments\n\n    # Calculate the score of the sixth assignment\n    score_sixth_assignment = total_score_after_six - total_score_first_five\n\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    profit_per_pair = selling_price - cost_price\n    total_profit = 440\n    initial_pairs = (total_profit / profit_per_pair) + remaining_pairs\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n    \n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    final_cars = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    initial_cars = final_cars - cars_entered + cars_exited\n    \n    return initial_cars\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((((x*2)/4)**2 - 4)/10, 6)\n\n    solutions = solve(equation, x)\n\n    # Return the positive solution because a negative number when squared gives a positive number\n    # and it is the number we are originally thinking about, assuming it's a real-world quantity.\n    return max(solutions)\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    filled_per_day = 10 - 3\n    total_liters = 59\n    current_liters = 3\n    days_passed = 1\n    \n    while current_liters < total_liters:\n        days_passed += 1\n        current_liters += filled_per_day\n        \n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "from math import lcm\n\ndef solution():\n    amy_period = 24\n    ginny_period = 36\n    \n    return lcm(amy_period, ginny_period)\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour in seconds\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_number = len(str(current_number))\n        if digits_written + digits_in_number > total_seconds:\n            break\n        digits_written += digits_in_number\n        current_number += 1\n\n    ans = current_number - 1\n    return ans\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30, \n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    ans = max(amounts) - min(amounts)\n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    start_time = end_time - timedelta(minutes=225)\n    ans = start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\n    return ans\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    blue = 5\n    white = 9\n    black = 2\n    green = 8\n\n    # Darrell has to pick all non-green marbles to make sure the next one is green\n    must_draw = blue + white + black \n\n    # The next draw should be a green one, so we add 1 to the count\n    must_draw += 1\n\n    return must_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    ans = comb(num_teams, 2)\n    return ans\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance_climbed = 6 * 6 + 2  # 6 days * 6 metres + 2 metres on the 7th day\n    total_distance_after_sliding = 20 - 2  # 20 metres well - 2 metres climbed out on 7th day\n    nightly_slide = (total_distance_climbed - total_distance_after_sliding) / 6  # average nightly slide\n\n    return nightly_slide\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        # First, the population triples\n        initial_rabbits *= 3  \n        # Then, half of the rabbits die\n        initial_rabbits //= 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy_speed, ivy_speed = symbols('candy_speed ivy_speed')\n\n    # Set the equation Ivy's and Candy's speed\n    ivy_speed_eq = Eq(ivy_speed, candy_speed + 20)\n\n    # Ivy walks for 6 (waiting time) + 12 minutes until they meet\n    # Candy walks for 12 minutes until they meet\n    # They meet at the same point, so distances should add up to 1200 meters\n    distance_eq = Eq((6 + 12) * ivy_speed + 12 * candy_speed, 1200)\n\n    # Solve the equations\n    solutions = solve((ivy_speed_eq, distance_eq), (candy_speed, ivy_speed))\n\n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    num_players = 8\n    # In a single round-robin tournament, everyone plays with everyone once.\n    # So, each player plays (num_players - 1) matches.\n    matches_per_player = num_players - 1\n\n    # Since every player has a different number of wins, and there are no draws\n    # in Ping-Pong, we distribute wins in a way that the player with the most\n    # wins has (num_players - 1) wins, the next one has (num_players - 2) wins,\n    # and so on, until the last player has 0 wins.\n    # Therefore, the champion, with the most number of wins, will have \n    # (num_players - 1) wins.\n    wins_for_champion = matches_per_player\n\n    return wins_for_champion\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    mass_metal1 = 6\n    mass_metal2 = 14\n    nickel_pct1 = 45 / 100\n    nickel_pct2 = 60 / 100\n    \n    total_mass = mass_metal1 + mass_metal2\n    total_nickel = (mass_metal1 * nickel_pct1) + (mass_metal2 * nickel_pct2)\n    \n    concentration_nickel = (total_nickel / total_mass) * 100\n    \n    return concentration_nickel\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from math import prod\n\ndef solution():\n    max_product = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                for x4 in range(1, 13):\n                    if x1 + x2 + x3 + x4 == 13:\n                        current_product = prod([x1, x2, x3, x4])\n                        if current_product > max_product:\n                            max_product = current_product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        if mother_age == 3 * edward_age:\n            break\n        edward_age += 1\n        mother_age += 1\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1cm represents 6m in reality\n    plan_length_cm = 5  # playground length on the plan in cm\n\n    real_length_m = plan_length_cm * scale_ratio  # real length in meters\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    fraction = 3 / 5\n    number = 35\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 10000):  # Presumably the number of students will be less than 10000\n        if (n + 11) % (n**0.5) == 0:  # Check if n+11 is a perfect square\n            m = n + 11  # m is the total number with the surplus\n            m_root = int(m**0.5)  # the side of the square array\n            if (m + 2*m_root + 1 + 12) == (m_root + 1)**2:  # after adding a row and a column\n                return n\n    return -1  # In case no solution is found\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n    number_of_boxes = total_money // cost_per_box\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    average_apples = 26\n    \n    # Let g be the number of girls\n    # g * 20 (each girl picks 20 apples) + boys * boys_apples = (boys + g) * average_apples\n    # g * 20 + boys * boys_apples = (boys + g) * average_apples\n    # g * 20 = (boys + g) * average_apples - boys * boys_apples\n    # g * 20 = boys * average_apples + g * average_apples - boys * boys_apples\n    # g * 20 - g * average_apples = boys * average_apples - boys * boys_apples\n    # g * (20 - average_apples) = boys * (average_apples - boys_apples)\n    # g = boys * (average_apples - boys_apples) / (20 - average_apples)\n    girls = boys * (average_apples - boys_apples) // (20 - average_apples)\n    \n    return girls\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n\n    # Equation for the total cost\n    equation1 = Eq(pen + pencil, 4.5)\n    # Equation for the price difference\n    equation2 = Eq(pencil, pen - 0.5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    oil_in_tank_B = oil_in_tank_A + 56\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    basketball_cost = 30\n    volleyball_cost = 25\n\n    # Assume the school bought all basketballs first, then replace with volleyballs one by one\n    max_basketballs = total_cost // basketball_cost  # Maximum number of basketballs possible\n    for basketballs in range(max_basketballs + 1):\n        volleyballs = total_items - basketballs\n        if basketballs * basketball_cost + volleyballs * volleyball_cost == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    remaining_after_bounty = remaining_after_thrifty - bounty_share\n    archie_share = remaining_after_bounty\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total mass of all 3 containers\n    total_mass = 1371\n\n    # mint ratio stays the same, assume mint = x for all containers\n    mint = symbols('mint')\n\n    # strawberry ratio is different for each container, but mint and chocolate make up the rest\n    # container 1: strawberry = 2/5, rest (mint + chocolate) = 3/5\n    # container 2: strawberry = 2/7, rest (mint + chocolate) = 5/7\n    # container 3: strawberry = 2/9, rest (mint + chocolate) = 7/9\n\n    # Let's denote the total mass of containers as c1, c2, c3 respectively\n    c1, c2, c3 = symbols('c1 c2 c3')\n\n    # Equations based on strawberry ratio\n    eq1 = Eq(c1 * 2/5, c2 * 2/7) # strawberry ratio of c1 is to c2\n    eq2 = Eq(c1 * 2/5, c3 * 2/9) # strawberry ratio of c1 is to c3\n\n    # Mint chocolate ratio is the same in all\n    # c1 * 3/5 = mint + chocolate\n    # c2 * 5/7 = mint + chocolate\n    # c3 * 7/9 = mint + chocolate\n    eq3 = Eq(c1 * 3/5, mint)\n    eq4 = Eq(c2 * 5/7, mint)\n    eq5 = Eq(c3 * 7/9, mint)\n\n    # Total mass equation\n    eq6 = Eq(c1 + c2 + c3, total_mass)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (c1, c2, c3, mint))\n\n    # calculate mass of strawberries in each container\n    strawberry_mass_1 = solutions[c1] * 2/5\n    strawberry_mass_2 = solutions[c2] * 2/7\n    strawberry_mass_3 = solutions[c3] * 2/9\n\n    # sum the mass of strawberries from all containers\n    total_strawberry_mass = strawberry_mass_1 + strawberry_mass_2 + strawberry_mass_3\n\n    return total_strawberry_mass\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = 3/4 * total_candy\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = 1/3 * remaining_candy\n    final_candy_count = remaining_candy - candy_given_to_brother\n    return final_candy_count\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/n for k in range(1, n)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    friday = symbols('friday')\n    \n    saturday = friday + 27\n    sunday = friday - 14\n    \n    equation = Eq(friday + saturday + sunday, 475)\n    \n    solution = solve(equation, friday)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money Roy and Dennis have.\n    roy, dennis = symbols('roy dennis')\n\n    # The initial equation representing the total amount of money.\n    equation1 = Eq(roy + dennis, 340)\n\n    # After spending their money, Dennis has twice as much as Roy.\n    equation2 = Eq(dennis - dennis/4, 2*(roy - 2*roy/3))\n\n    # Solve the equations for Roy and Dennis' money.\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Find the amount of money Dennis has in the end.\n    dennis_end = solutions[dennis] - solutions[dennis]/4\n\n    return dennis_end\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_used = 0\n    page_number = 0\n\n    while digits_used < 300:\n        page_number += 1\n        digits_used += len(str(page_number))\n\n    if digits_used > 300:\n        page_number -= 1\n\n    return page_number\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    num_balls = 8\n    num_hula_hoops = 6\n\n    total_ball_cost = ball_cost * num_balls\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    cost_per_hula_hoop = total_hula_hoop_cost / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(693)\n    \n    # For the product to be a perfect square, \n    # each prime factor must have an even power\n    product = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            product *= prime\n    \n    return product\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # liters\n    drunk_volume = 9  # liters\n    container_volume = 5  # liters\n\n    total_volume = total_cartons * volume_per_carton\n    remaining_volume = total_volume - drunk_volume\n\n    containers_needed = -(-remaining_volume // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable we want to solve for\n    A = symbols('A')\n\n    # Write the equation in the form of an equation object\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    # Solve the equation for A\n    solution = solve(equation, A)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of each term\n    # The unit digit of 13^242 can be found by looking at the pattern in the powers of 3\n    unit_digit_13 = (3 ** (242 % 4)) % 10  # The power cycle of 3 repeats every 4\n\n    # The unit digit of 17^379 can be found by looking at the pattern in the powers of 7\n    unit_digit_17 = (7 ** (379 % 4)) % 10  # The power cycle of 7 repeats every 4\n\n    # The unit digit of 4^2012 is 6 since the units digit of powers of 4 cycles: 4, 6, 4, 6, ... every 2\n    unit_digit_4 = (4 ** (2012 % 2)) % 10  # The power cycle of 4 repeats every 2\n\n    # Now, find the unit digit of the product of 17^379 and 4^2012\n    unit_digit_17_4 = (unit_digit_17 * unit_digit_4) % 10\n\n    # Finally, find the unit digit of the sum of 13^242 and the product computed above\n    unit_digit_sum = (unit_digit_13 + unit_digit_17_4) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    weight_of_steak = 3 + 1/2  # 3 and a half kg of steak\n    cost_per_kg = 7.50\n    total_cost = weight_of_steak * cost_per_kg\n    amount_paid = 20\n\n    amount_more_needed = total_cost - amount_paid\n    return amount_more_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n    position_from_end = total_people - eddie_position + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of stickers each person originally had.\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Given conditions.\n    equation1 = Eq(mary, (7/5) * alexis)  # Mary had 7/5 as many stickers as Alexis.\n    equation2 = Eq(mary - 0.20 * mary, charlotte + 0.80 * charlotte + 20)  # After giving 20% of their stickers, Mary had 20 more stickers than Charlotte.\n    equation3 = Eq(alexis - 0.20 * alexis, charlotte + 0.80 * charlotte)  # After giving 20% of their stickers, Alexis has the same amount as Charlotte.\n\n    # Solve for the number of stickers Alexis had originally.\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n    \n    # Set up the equation where 6 times the mass of a light bowling ball\n    # plus 6 times the mass of a heavy bowling ball (which is 2x) equals 65.7\n    equation = Eq(6 * x + 6 * (2 * x), 65.7)\n    \n    # Solve for x\n    solved = solve(equation, x)\n    \n    # Return the mass of a light bowling ball to the nearest kg\n    return round(solved[0])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    # Benson have benson - calculator_price after buying the calculator\n    # Clive have clive - racket_price after buying the badminton racket\n    # They then had the same amount of money left\n    equation1 = Eq((benson - calculator_price), (clive - racket_price))\n    # Benson and Clive had a total of $705\n    equation2 = Eq(benson + clive, total_money)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # first digit cannot be 0\n        for j in range(0, 10):  # second digit can be 0-9\n            # The third digit must be the same as the second, and the fourth the same as the first\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # Let A, B, and C represent the individual values of A, B, and C.\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Since the average of A and B is 50, (A + B) / 2 = 50.\n    # Multiplying both sides by 2 gives us: A + B = 100\n    equation1 = Eq((A + B) / 2, 50)\n\n    # Since the average of B and C is 43, (B + C) / 2 = 43.\n    # Multiplying both sides by 2 gives us: B + C = 86\n    equation2 = Eq((B + C) / 2, 43)\n\n    # Since the average of A and C is 45, (A + C) / 2 = 45.\n    # Multiplying both sides by 2 gives us: A + C = 90\n    equation3 = Eq((A + C) / 2, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the average of A, B, and C\n    avg_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return avg_ABC\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let the number of pens Denise has be x\n    # Hence, the number of pens Jay has is 6x\n    # According to the problem, x + 6x = 126\n    # Summing up the terms, we get 7x = 126\n    # Solving for x gives us the number of pens Denise has\n    x = 126 // 7\n    return x\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the total number of balls\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    # Equation representing the total number of children\n    equation2 = Eq(boys + girls, 650)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the price of one cookie\n    cost_per_chocolate = 1.26\n    total_cost_chocolates = 5 * cost_per_chocolate\n    cost_per_cookie = total_cost_chocolates / 6\n    # Calculate the total cost of 4 cookies\n    total_cost_cookies = 4 * cost_per_cookie\n    # Calculate the remaining money\n    initial_amount = 9.05\n    remaining_money = initial_amount - total_cost_cookies\n    return remaining_money\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1, 100):\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys initially in the classroom\n    g, b = symbols('g b')\n\n    # After 25 girls go outside, the number of girls in the classroom is g - 25.\n    # This number is 2/3 of the number of boys, so we have the equation: g - 25 = 2/3 * b.\n\n    # After 15 boys go outside to play soccer, there are b - 15 boys left.\n    # At this point, the number of boys is equal to the number of girls, so we have: g - 25 = b - 15.\n\n    # We have two equations now:\n    # g - 25 = 2/3 * b\n    # g - 25 = b - 15\n\n    # Solving these equations will give us the initial numbers of girls and boys.\n    equations = (Eq(g - 25, 2/3 * b), Eq(g - 25, b - 15))\n    solutions = solve(equations, (g, b))\n\n    # The total number of students initially is the sum of the number of girls and boys.\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # Square base area\n    hole_area = 3 * 3  # Square hole area\n    solid_area = base_area - hole_area  # Remaining solid area in the base\n    height = 320 / solid_area  # Volume divided by the base's solid area\n    return height\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # We set variables for the value of the coins\n    ten_cent_value = 0.10\n    fifty_cent_value = 0.50\n    \n    # The given total value of all coins\n    total_value = 75.90\n    \n    # The ratio given for the number of 10-cent coins to 50-cent coins\n    ratio_ten = 8\n    ratio_fifty = 3\n    \n    # Since we have the total value and we know the value of coins are in the ratio of 8 to 3,\n    # we can set up a system of equations to solve for the number of 10-cent and 50-cent coins respectively.\n    # Let's denote the number of 10-cent coins as x and 50-cent coins as y.\n    # We have 2 equations:\n    # ten_cent_value * x + fifty_cent_value * y = total_value\n    # x / y = ratio_ten / ratio_fifty\n    \n    # Rearranging the second equation we get y = (ratio_fifty / ratio_ten) * x\n    # Substituting y in the total value equation with the above expression, we get an equation in a single variable x:\n    # ten_cent_value * x + fifty_cent_value * (ratio_fifty / ratio_ten) * x = total_value\n    # then we solve for x to get the number of 10-cent coins.\n\n    # Now we solve for the value of y:\n    # 0.10 * x + (0.50 * 3/8) * x = 75.90\n    # 0.10 * x + 0.1875 * x = 75.90\n    # 0.2875 * x = 75.90\n    # x = 75.90 / 0.2875\n\n    x = total_value / (ten_cent_value + (fifty_cent_value * ratio_fifty / ratio_ten))\n\n    # Now, we calculate the number of 50-cent coins using the ratio.\n    y = (ratio_fifty / ratio_ten) * x\n\n    # We calculate the total value of the 50-cent coins.\n    value_fifty_cent_coins = fifty_cent_value * y\n\n    return value_fifty_cent_coins\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so we have 7 entities to arrange\n    entities = 7\n    arrangements = factorial(entities)\n\n    # Amy and Judy can switch places, that introduces another 2 arrangements\n    switch_places = 2\n\n    # Multiply the arrangements of the entities with the internal switch\n    total_arrangements = arrangements * switch_places\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    triangle_side_length = 1\n    sum_of_numbers = 0\n    while True:\n        sum_of_numbers += triangle_side_length\n        if sum_of_numbers >= 2008:\n            break\n        triangle_side_length += 1\n    \n    remaining_numbers = sum_of_numbers - 2008\n    position_in_triangle = triangle_side_length - remaining_numbers\n    return position_in_triangle\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    balance_equation = 3 * x_weight / 10\n    y_weight = balance_equation\n    \n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    result = 35 * 24\n    return result\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    terms = [6, 10, 14, 18, 22, 26]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    decrease_temperature = 12\n\n    midnight_temperature = midday_temperature - decrease_temperature\n\n    return midnight_temperature\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    from itertools import permutations\n    \n    all_possible_numbers = list(permutations(digits, 3))\n    \n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    # Generate all combinations with replacement of three non-negative integers that sum up to 5\n    for combo in combinations_with_replacement(range(6), 3):\n        if sum(combo) == 5:\n            digits = list(combo)\n            # Ensure the first digit is not zero, because we want a three-digit number\n            if digits[0] != 0:\n                # Count permutations without duplicates (since there can be repeating digits)\n                if digits[0] == digits[1] == digits[2]:\n                    count += 1  # Only 1 way to permute three identical digits\n                elif digits[0] == digits[1] or digits[1] == digits[2] or digits[0] == digits[2]:\n                    count += 3  # Three ways to permute a double\n                else:\n                    count += 6  # Six ways to permute three unique digits\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_numbers = sum(range(2, 101, 5))\n    return sum_numbers\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_bags = total_bags - given_to_avril\n    return remaining_bags\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # If Chris takes 1 match, then there will be 6 matches left.\n    # In the next best scenario for Dylan, he can take 2 matches away, leaving 4 matches.\n    # Chris can then take away 1 match, which will leave 3 matches,\n    # Dylan can again take 2 matches, leaving 1 match for Chris to win.\n    \n    # If Chris takes 2 matches, then there will be 5 matches left.\n    # No matter how Dylan plays (taking 1 or 2 matches),\n    # Chris can always leave 1 match in the final round (Chris can always make the total remaining\n    # matches fall into a scenario where it's Dylan's turn with 3 total matches left).\n    \n    # Therefore, to ensure victory, Chris must take away 2 matches in the first turn.\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        if p[0] != 0:\n            # Assuming ABC is a 3-digit number formed by p[0], p[1], p[2]\n            ABC = p[0] * 100 + p[1] * 10 + p[2]\n            return ABC\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Since the bat eats 6 more each night and on the 16th night it ate 100\n    # we can work backwards to find the first term\n    # a_n = a_1 + (n - 1)d\n    # 100 = a_1 + (16 - 1)*6\n    # 100 = a_1 + 90\n    # a_1 = 100 - 90\n    a_1 = 10\n    \n    # The common difference d is given as 6\n    d = 6\n    \n    # We know the last term will be the 31st term\n    # a_n = a_1 + (n - 1)d\n    # a_31 = a_1 + (31 - 1)*d\n    a_31 = a_1 + (31 - 1)*d\n    \n    # Sum of the first n terms of an arithmetic sequence\n    # S_n = (n/2)(2a_1 + (n - 1)d)\n    # S_31 = (31/2)(2a_1 + (31 - 1)d)\n    S_31 = (31 / 2) * (2 * a_1 + (31 - 1) * d)\n\n    return int(S_31)\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        ABAC = A*1000 + B*100 + A*10 + C\n        DBEC = D*1000 + B*100 + E*10 + C\n        ACEDC = A*10000 + C*1000 + E*100 + D*10 + C\n        \n        if A != 0 and D != 0 and ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"9:23 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"1:06 PM\", \"%I:%M %p\")\n    difference = end_time - start_time\n    minutes = difference.total_seconds() / 60\n    return int(minutes)\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    choices = 5 * 4 * 3 * 2 * 1  # Assuming there are 5 restaurants to choose from\n    return choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(1, 9))\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = (53-50) + (47-44) + (41-38) + (35-32) + (29-26) + 23\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48  # distance to the wet market in meters\n    speed = 8      # walking speed in meters per minute\n    time_taken = distance // speed  # time taken in minutes using integer division\n\n    # Check if Auntie Lina's calculation is correct\n    correct_time = distance / speed  # actual time needed\n\n    # If Auntie Lina's answer is not correct, return the correct answer\n    return correct_time if time_taken != 5 else time_taken\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25\n    harry = 14\n    mom = 36\n    sister = 10\n    dad = total_age - (harry + mom + sister)\n\n    return dad\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # We assume the standard height of a classroom door to be around 2 meters.\n    standard_height_meters = 2  # in meters\n    measurements_meters = [83, 200 / 100, 8 / 100, 1/2]  # Converting all to meters\n\n    closest_measurement = min(measurements_meters, key=lambda x: abs(x - standard_height_meters))\n    return closest_measurement\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    # Iterate over possible digits for A and E, noting that they must be different\n    for A in range(1, 10):  # A cannot be 0 as it is the leftmost digit\n        for E in range(0, 10):\n            if A != E:\n                # Construct the number based on the description\n                num = int(f\"{A}{E}{E}{A}\")\n                # Check if the second digit is twice the first\n                if 2 * (num // 1000) == (num // 100) % 10:  # Compare A and E\n                    # Check if the third digit is three times the first\n                    if 3 * (num // 1000) == (num // 10) % 10:  # Compare A and second E\n                        return num  # This is the correct value\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits = 450\n    total_pages = 0\n    digits_used = 0\n\n    for n in range(1, digits+1):\n        if n < 10: # 1-digit numbers\n            digits_used += 1\n        elif n < 100: # 2-digit numbers\n            digits_used += 2\n        elif n < 1000: # 3-digit numbers\n            digits_used += 3\n\n        if digits_used > digits:\n            total_pages = n - 1\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12\n    remaining_after_dinner = 1 - 2/7\n    \n    remaining_money = 45\n    initial_money = remaining_money / (remaining_after_lunch * remaining_after_dinner)\n    \n    return initial_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    pages = 0\n    digit_count = 0\n    \n    while digit_count < total_digits:\n        pages += 1\n        digit_count += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * (5 - 1) // 2  # Total games played in the tournament (C(5, 2))\n    won_games = 2 + 1 + 4 + 3  # Total games won by Lily, Eva, Tina, and Emma\n    gina_won = total_games - won_games  # Games won by Gina\n\n    return gina_won\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = avril_points + 15\n        if avril_points + eddie_points == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n\n    # Marcus's method\n    group_price = shirt_price * 4 + bag_price\n    num_groups = total_spent // group_price\n    num_shirts_marcus = num_groups * 4  # Marcus incorrectly multiplied by 1 instead of 4\n\n    # Correction\n    num_bags = num_groups\n    num_shirts = num_groups * 4\n    \n    # Check if the number of shirts and bags adds up to the total spent\n    sally_total_spent = (num_shirts * shirt_price) + (num_bags * bag_price)\n    if sally_total_spent == total_spent:\n        return num_shirts\n    else:\n        return \"Error: The calculated spending does not match the total amount spent.\"\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = math.radians(20)  # convert degrees to radians for calculations\n    distance = 400  # distance along the slope in meters\n    friction_coefficient = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Calculate the acceleration\n    # Components of gravitational force along the slope: g * sin(angle)\n    # Force of friction acting against the motion: -friction_coefficient * g * cos(angle)\n    # The net force along the incline is the component of gravity minus friction\n    # Using F = m * a => a = F/m, and since m (mass) is in both sides of the equation, it cancels out\n    acceleration = g * math.sin(angle) - friction_coefficient * g * math.cos(angle)\n\n    # Using the kinematic equation: v^2 = u^2 + 2 * a * d\n    # Initial velocity (u) is 0 because the skier starts from rest\n    final_velocity = math.sqrt(2 * acceleration * distance)\n\n    return final_velocity\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls initially\n    b, g = symbols('b g')\n\n    # Equation 1: Initially, there were thrice as many boys as girls\n    equation1 = Eq(b, 3 * g)\n\n    # Equation 2: After 12 boys left and 20 girls joined, the number of boys and girls became equal\n    equation2 = Eq(b - 12, g + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the three types of coffee beans\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n\n    # Calculate the greatest common divisor of the three weights\n    greatest_common_mass = gcd(gcd(weight_A, weight_B), weight_C)\n\n    return greatest_common_mass\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men can complete the job in 5 days\n    # So, 1 man can complete the job in 6*5 = 30 days\n    man_days = 6 * 5\n    \n    # 5 women can complete the job in 6 days\n    # So, 1 woman can complete the job in 5*6 = 30 days\n    woman_days = 5 * 6\n    \n    # 1 man's 1 day work = 1/30\n    # 1 woman's 1 day work = 1/30\n    man_work_per_day = 1 / man_days\n    woman_work_per_day = 1 / woman_days\n    \n    # 10 men and 5 women will work together\n    # 10 men's 1 day work = 10 * (1/30)\n    # 5 women's 1 day work = 5 * (1/30)\n    total_work_per_day = 10 * man_work_per_day + 5 * woman_work_per_day\n    \n    # Total days required = 1 / (total_work_per_day)\n    total_days = 1 / total_work_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    number = 35\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let's denote the number of apples, bananas, and oranges as A, B, and O, respectively.\n    # According to the problem statement, we have the following relations:\n    # B = 2*A (two bananas per apple)\n    # O = 3*A (three oranges per apple)\n    # And the total number of fruits is 24: A + B + O = 24\n\n    # We can substitute the expressions for B and O in terms of A into the total:\n    # A + 2*A + 3*A = 24\n    # 6*A = 24\n    # A = 24 / 6\n    # A = 4 (apples)\n\n    # Now we can solve for bananas:\n    # B = 2*A = 2*4 = 8 (bananas)\n\n    return 8\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n\n    solutions = solve(equation, years)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # length of short ribbon in cm\n    short_ribbon_length = 40\n    # length of long ribbon in cm\n    long_ribbon_length = 70\n    \n    # May's total length of ribbon in cm\n    may_total_length = 7 * short_ribbon_length + 240\n    \n    # Nancy's total length of ribbons\n    nancy_total_length = 18 * long_ribbon_length\n    \n    # Since May and Nancy have equal number of pieces of ribbon,\n    # let's denote the total number of pieces of ribbon by x.\n    # May has 7 short pieces, so she must have (x - 7) long pieces.\n    # Nancy has 18 long pieces, so she must have (x - 18) short pieces.\n    # Therefore, the equation representing their total lengths is:\n    # (7 * short_length) + ((x - 7) * long_length) + 240 = (18 * long_length) + ((x - 18) * short_length)\n    \n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(7 * short_ribbon_length + (x - 7) * long_ribbon_length + 240, 18 * long_ribbon_length + (x - 18) * short_ribbon_length)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Each chicken has 2 legs and each rabbit has 4 legs.\n    total_animals = 12\n    total_legs = 34\n    # Let x be the number of rabbits, then (total_animals - x) is the number of chickens.\n    for rabbits in range(total_animals + 1):\n        chickens = total_animals - rabbits\n        if (rabbits * 4 + chickens * 2) == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return result\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1  # Total parts (red: 3, blue: 1)\n    total_paint = 1  # Total litres of paint required\n\n    # Calculate the amount of red paint based on the ratio\n    red_paint = (total_paint * 3) / total_ratio\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    ans = 345 * 67\n    return ans\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n\n    # Each child gets at least one apple.\n    min_apples = 1\n    remaining_apples = apples - children * min_apples\n\n    # Calculate the smallest number of apples the kid with the most can get.\n    # Since we want to find the smallest number for the kid with the most,\n    # we should try to distribute remaining apples as evenly as possible first.\n    # That means giving each child except one (remaining_apples // (children - 1))\n    # apples and the rest to the last child.\n    max_for_others = remaining_apples // (children - 1)\n    most_apples = remaining_apples - max_for_others * (children - 1) + min_apples\n\n    return most_apples\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    sum_of_numbers = mean_value * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    initial_amount = 68\n    quarter_amount = initial_amount / 4\n    remaining_amount = initial_amount - quarter_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Start from the hypothetical scenario where the distribution is as equal as possible\n    # All children would get an equal number of apples, then we will modify the distribution\n    # to satisfy the 'different number of apples' condition, aiming to find the minimum\n    # number for the kid with the most apples.\n    \n    min_apples = 50 // 8 + 1  # At least 1 apple more than equal distribution to be the maximum\n    apples_left = 50 - (min_apples * 8)\n    extra = 7  # Start from the second most to the least to distribute remaining apples\n    \n    # Distribute remaining apples to ensure differences\n    while apples_left > 0 and extra > 0:\n        min_apples += 1\n        apples_left -= extra\n        extra -= 1\n    \n    return min_apples\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # The amount of grass needed to feed one cow for one day is a constant.\n    # If the pasture can feed 8 cows for 10 days, it can feed 1 cow for 80 days (8 * 10).\n    # Similarly, if the pasture can feed 4 cows for 15 days, it can feed 1 cow for 60 days (4 * 15).\n    # Therefore, the total amount of grass in the pasture can be assumed to feed 1 cow for 80 days or 60 days.\n    # Both these should equal the same total amount of grass, so we can find the total by multiplying cows * days.\n    total_grass_8_cows_10_days = 8 * 10\n    total_grass_4_cows_15_days = 4 * 15\n\n    # Since both are equal to the total amount of grass available, we can equate them and solve for total_grass.\n    total_grass = total_grass_8_cows_10_days  # Which is also equal to total_grass_4_cows_15_days\n\n    # Now, if we want to find out how many cows the pasture can feed for 5 days,\n    # we divide the total grass by the number of days to find out how much grass is needed for 1 day.\n    grass_for_one_day = total_grass / 5\n\n    # Then the answer would be the total grass for one day divided by \n    # the amount of grass one cow consumes in a day, which we found out is\n    # the total amount of grass divided by 80 (As 1 cow can last for 80 days)\n    number_of_cows = grass_for_one_day / (total_grass / 80)\n\n    return number_of_cows\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_per_packet = 1.02 / 12\n    total_mass = mass_per_packet * 4\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    tape_price = 9\n    total_price = 83\n    num_tapes = 3\n    num_cds = 4\n\n    total_tape_price = tape_price * num_tapes\n    total_cd_price = total_price - total_tape_price\n    cd_price = total_cd_price / num_cds\n\n    return cd_price\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # Let x be the true result.\n    # Since the divisor is 1.22 and we're forgetting to put the decimal point,\n    # the wrong divisor becomes 122.\n    # Wrong result is x\n    # True result is x + 99.396\n    # Therefore, (x + 99.396) * 1.22 = x * 122\n    # Solve for x\n    x = (99.396 * 1.22) / (122 - 1.22)\n    return x\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let's denote the number of cards Hisham has as h.\n    # Then Melissa has 2h cards.\n    # Together they have h + 2h = 876 cards.\n    h = total_cards / 3  # Dividing by 3 to find how many cards Hisham has.\n    \n    # Now, to have the same number of cards,\n    # Melissa should give Hisham (2h - h)/2 = h/2 cards.\n    cards_to_give = h / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Let the number Tasha thought of be x.\n    # According to the problem, 3x + 8 = 35\n    # We need to find x by solving the equation\n    \n    # Subtract 8 from both sides of the equation\n    result = 35 - 8\n    \n    # Divide by 3 to isolate x\n    x = result / 3\n    \n    return x\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_number_of_groups = gcd(boys, girls)\n\n    return greatest_number_of_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Since there are 1000 millilitres in 1 litre\n    return n\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Assuming x1, x2 are the first two numbers, we have the following:\n    # x3 = x1 + x2\n    # x4 = x2 + x3 = 6\n    # x5 = x3 + x4\n    # x6 = x4 + x5 = 15\n    # x7 = x5 + x6 (We need to solve for this)\n\n    # From x4 and x6, we can establish two equations:\n    # x2 + (x1 + x2) = 6 => x1 + 2*x2 = 6 ... (1)\n    # (x2 + (x1 + x2)) + ((x1 + x2) + (x2 + (x1 + x2))) = 15 => 3*x1 + 5*x2 = 15 ... (2)\n\n    # We solve the linear system of equations:\n    # x1 = (6 - 2*x2) from (1)\n    # Substitute x1 in (2) => 3*(6 - 2*x2) + 5*x2 = 15 => 18 - 6*x2 + 5*x2 = 15\n    # -x2 = -3 => x2 = 3\n    # Substitute x2 in (1) => x1 + 6 = 6 => x1 = 0\n    \n    # Now we have x1 = 0 and x2 = 3, we can find the rest of the numbers\n    # x3 = x1 + x2 = 0 + 3 = 3\n    # x4 = x2 + x3 = 3 + 3 = 6 (consistent with the fourth number)\n    # x5 = x3 + x4 = 3 + 6 = 9\n    # x6 = x4 + x5 = 6 + 9 = 15 (consistent with the sixth number)\n    # x7 = x5 + x6 = 9 + 15\n\n    x2 = 3\n    x3 = 0 + x2\n    x5 = x3 + 6\n    x7 = x5 + 15\n\n    return x7\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    total_sum = 0\n    for i in range(7):\n        numerator = 1\n        denominator = (1 + 5 * i) * (6 + 5 * i)\n        total_sum += numerator / denominator\n    ans = 36 * total_sum\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    min_odd_number = float('inf')\n\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 1:  # Check if the last digit is odd to ensure the whole number is odd\n            number = int(''.join(map(str, perm)))\n            if 10000 <= number < min_odd_number:  # Check if it's a 5-digit number\n                min_odd_number = number\n\n    return min_odd_number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Men's work rate\n    men_rate = 1 / (24 * 16)\n    # Women's work rate\n    women_rate = 1 / (16 * 24)\n\n    # Combined rate of 10 men and 6 women\n    combined_rate = 10 * men_rate + 6 * women_rate\n\n    # Time to complete the job with combined rate\n    time_to_complete = 1 / combined_rate\n\n    return time_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # The maximum number of regions formed by n identical rectangles can be determined by the formula:\n    # Number of regions = n^2 + n + 1\n    # For 4 rectangles:\n    n = 4\n    num_regions = n**2 + n + 1\n    return num_regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Julie, Marion, and Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Calculate the total earning together\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    exclude_positions_for_eddie = 1\n\n    # Calculate the ways to put Eddie in any position except the middle one\n    ways_to_place_eddie = total_people - exclude_positions_for_eddie\n\n    # Calculate the ways to place the remaining people\n    ways_for_remaining_people = factorial(total_people - 1)\n\n    # Total arrangements would be the product of the two calculations\n    total_ways = ways_to_place_eddie * ways_for_remaining_people\n\n    return total_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    first_term = 96\n    second_term_unknown = None\n    third_term = 24\n    fourth_term = 12\n    fifth_term = 6\n\n    common_ratio = fourth_term / third_term\n\n    second_term_unknown = first_term / common_ratio\n\n    return second_term_unknown\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total sum of money Hamid had initially\n    initial_sum = symbols('initial_sum')\n\n    # Equation based on the problem statement\n    # 1/3 of initial sum spent on a watch + $56 spent on a tie = initial sum - 3/8 of initial sum\n    equation = Eq((1/3)*initial_sum + 56, initial_sum - (3/8)*initial_sum)\n\n    # Solve the equation to find the initial sum of money\n    solved_initial_sum = solve(equation, initial_sum)[0]\n\n    # Calculate the total amount spent based on the initial sum found\n    total_spent = (1/3)*solved_initial_sum + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789'):\n        num = int(''.join(p))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # Relative speed is the sum of Eddie's speed and Train's speed\n    relative_speed = eddie_speed + train_speed\n\n    # Length of the train = relative speed * time taken to pass\n    length_of_train = relative_speed * time_to_pass\n  \n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    for signs in product(['+', '*'], repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    total_questions = 12\n    marks_correct = 8\n    marks_incorrect = -3\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * marks_correct + incorrect_answers * marks_incorrect == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # in meters per minute\n\n    total_distance = train_length + bridge_length  # total distance to cover\n    time = total_distance / speed  # time = distance/speed\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Starting values for the first two integers in the sequence\n    a = 3\n    b = 10\n\n    # Using modular arithmetic to find the pattern of remainders when divided by 3\n    # as it's enough for our purpose\n    for _ in range(1997-2):\n        a, b = b, (a + b) % 3\n    \n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    sam, peter = symbols('sam peter')\n    \n    # Initial condition: Sam had 40 stickers more than Peter\n    initial_condition = Eq(sam, peter + 40)\n    \n    # Sam gives 20% of his stickers to Peter, and Peter gives 25% of his stickers to Sam\n    # After the exchange\n    sam_after = sam - 0.20 * sam + 0.25 * (peter - 0.20 * sam)\n    peter_after = peter + 0.20 * sam - 0.25 * (peter - 0.20 * sam)\n    \n    # Final condition: Sam had 96 stickers more than Peter\n    final_condition = Eq(sam_after, peter_after + 96)\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n\n    # According to the problem, we have two equations\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age\n    equation2 = Eq(mom_current + 18, 3 * (hazel_current + 18))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    # Mom's current age\n    mom_age_now = solutions[mom_current]\n\n    return mom_age_now\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    first_5_sum = 10\n    last_5_sum = 120\n    total_terms = 60\n\n    # Sum of first n terms of an arithmetic sequence formula: S_n = n/2 * (a_1 + a_n)\n    # Let's assume the first term is a and the common difference is d.\n    # a_1 = a\n    # a_5 = a + 4d\n    # a_56 = a + 55d\n    # a_60 = a + 59d\n\n    # Sum of the first 5 numbers (a to a + 4d):\n    # 10 = 5/2 * (a + (a + 4d))\n    \n    # Sum of the last 5 numbers (a + 55d to a + 59d):\n    # 120 = 5/2 * ((a + 55d) + (a + 59d))\n\n    # Solve the two equations to find a and d:\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n    equation1 = Eq(5 / 2 * (2 * a + 4 * d), first_5_sum)\n    equation2 = Eq(5 / 2 * (2 * a + 114 * d), last_5_sum)\n\n    solution = solve((equation1, equation2), (a, d))\n\n    # Now we have the first term a and common difference d\n    a = solution[a]\n    d = solution[d]\n\n    # The sum of all 60 numbers:\n    # S_60 = 60/2 * (a + (a + 59d))\n    sum_all_numbers = total_terms / 2 * (2 * a + (total_terms - 1) * d)\n    \n    return sum_all_numbers\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        \n        if peter_age == (pip_age + pit_age):\n            break\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers and each number has 4 cards with different patterns\n    # If we draw one card of each number, we will have 13 cards but no guarantee of consecutive numbers\n    # To ensure we get at least 2 consecutive numbers, we need to draw one more card\n    # The pigeonhole principle dictates that we will have at least 2 cards with consecutive numbers\n    # after drawing one more than the total number of distinct single-digit numbers, which is 13 + 1\n    \n    ans = 13 + 1\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    back_page_num = 36\n    sheet_num = 5\n    pages_per_sheet = 4\n\n    # Calculate the first page number for the specific sheet\n    first_page_num = (sheet_num - 1) * pages_per_sheet + 1\n    # Opposite page numbers in a sheet sum up to one more than the total number of pages\n    # because a sheet has a front and back with two pages on each side.\n    opposite_page_sum = back_page_num + 1\n\n    # There are two pairs on one sheet, front and back.\n    sum_of_pages = opposite_page_sum * 2 - first_page_num\n    # Correct the sum by adding the missing page number.\n    sum_of_pages += first_page_num\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    x = symbols('x')\n    c = symbols('c')  # Original cost of each laptop\n\n    # Initial profit\n    initial_profit = 60000\n\n    # Selling price per laptop\n    selling_price = 2000\n\n    # Decrease in cost per laptop\n    cost_decrease = c / 5\n\n    # New cost per laptop\n    new_cost = c - cost_decrease\n\n    # 30% increase in profit\n    new_profit = initial_profit * 1.3\n\n    # Relations\n    # Original cost 'c' times the number of laptops 'x' plus the initial profit equals selling price '2000' times 'x'\n    equation1 = Eq(c * x + initial_profit, selling_price * x)\n    # New cost 'new_cost' times the number of laptops 'x' plus the new profit equals selling price '2000' times 'x'\n    equation2 = Eq(new_cost * x + new_profit, selling_price * x)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (c, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    original_number = 10 * 2\n    return original_number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import symbols, Eq, solve, lcm\n    \n    # Define the variable for the common difference of the arithmetic sequence\n    d = symbols('d', integer=True, positive=True)\n    \n    # Define the sequence of remainders, since they are increasing and form an arithmetic pattern\n    remainders = [d, 2*d, 3*d, 4*d]\n    \n    # The possible values for 'a' should be at least greater than 3*d to make it increasing and positive\n    a_values = range(int(3*d)+1, 28)\n\n    # Find the smallest M by iterating through possible 'a' values\n    # and checking if the arithmetic sequence of remainders satisfies the division property for each divisor\n    # This is by making sure that for those 'a', (M % a) gives us 3*d, which is the third term in our remainder's sequence\n    M = None\n    for a in a_values:\n        if M is not None:\n            break\n\n        # To find such a number M, since it leaves remainder d when divided by 7, its form will be 7k+d\n        # Similarly for 9 and 28 as well. Solving the equations simultaneously gives us M\n        # We will solve for k1, k2, k3 and k4 to get to M\n        k1, k2, k3, k4 = symbols('k1 k2 k3 k4', integer=True)\n        \n        # Define the equations for M based on remainders given by different divisors\n        equations = [\n            Eq(7*k1 + d, 9*k2 + 2*d),\n            Eq(9*k2 + 2*d, a*k3 + 3*d),\n            Eq(a*k3 + 3*d, 28*k4 + 4*d),\n        ]\n\n        # Solve the equations for positive integers\n        k_values = solve(equations, (k1, k2, k3, k4), dict=True)\n\n        # Iterate through solutions to find a valid set of k's, which should be non-negative integers\n        for solution in k_values:\n            potential_M = 28*solution[k4] + 4*d\n            \n            # Check for M divisible by a\n            if (potential_M % a) == 3*d:\n                if M is None or potential_M < M:\n                    M = potential_M\n                break\n\n    return int(M)\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    # The front row has 48 seats, and each other row has 4 more seats than the row in front.\n    # There are 80 seats in the last row.\n    # This is an arithmetic sequence.\n    \n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Using the formula for the nth term of an arithmetic sequence to find the number of rows:\n    # last_term = first_term + (n - 1) * difference\n    n = ((last_term - first_term) / difference) + 1\n    \n    # Using the formula for the sum of an arithmetic sequence:\n    # sum = n/2 * (first_term + last_term)\n    sum_seats = n/2 * (first_term + last_term)\n    \n    return int(sum_seats)\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Count the number of digits in each range\n    count = 0\n    # Numbers 1-9 have 1 digit each, total of 9 numbers\n    count += 1 * 9\n    # Numbers 10-99 have 2 digits each, total of 90 numbers\n    count += 2 * 90\n    # Numbers 100-129 have 3 digits each, total of 30 numbers\n    count += 3 * 30\n\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    diff = 36\n    total_students = 0\n    \n    # Starting from an initial guess where at least the difference could be met, i.e., one boy in the outer layer\n    # and then reducing the layers one by one\n    side_length = 0\n    while True:\n        boys = (side_length*4) if side_length > 0 else 1  # Boys form the perimeter or just 1\n        girls = total_students - boys  # The rest are girls\n        if boys - girls == diff:\n            break\n        side_length += 2  # Increase side length for odd square side lengths, which alternate boy/girl layers\n        total_students = side_length ** 2  # Total students in square arrangement\n    \n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Assume each man digs the same amount each day.\n    # Three men take two days to dig 120 metres.\n    # Therefore, one man would take three times longer to dig the same trench,\n    # which means one man would take 6 days to dig 120 metres.\n    \n    # The rate at which one man digs is 120 metres in 6 days,\n    # which means he digs 20 metres per day.\n    man_rate = 120 / (3 * 2)\n    \n    # Now we need to find out how long it would take for four men to dig 880 metres.\n    # The combined rate of four men is 4 times the rate of one man,\n    # which means four men can dig 80 metres per day together.\n    combined_rate_4_men = 4 * man_rate\n    \n    # To find the number of days it would take,\n    # we divide the total length of the trench by the combined rate of four men.\n    days_needed = 880 / combined_rate_4_men\n    \n    return days_needed\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n\n    # total work done by Ellie in 4 weeks\n    work_done_by_ellie = ellie_rate * combined_weeks\n\n    # remaining work that has to be done by Gloria and Ellie together in 4 weeks\n    remaining_work = total_people - work_done_by_ellie\n\n    # Gloria's rate per week\n    gloria_rate = remaining_work / combined_weeks \n\n    # How many weeks it will take Gloria to finish interviewing everyone by herself\n    weeks_for_gloria = total_people / gloria_rate\n\n    return weeks_for_gloria\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = (2 * 15) / 5\n    return int(numerator)\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let the number of books moved from the first shelf to the second be x\n    \n    # After moving x books, the first shelf will have 18 - x books\n    # and the second shelf will have 24 + x books\n    \n    # We want the second shelf to have twice as many books as the first shelf\n    # So, we can set up the equation: \n    # 24 + x = 2 * (18 - x)\n    \n    # Solving for x, we have\n    # x = (2 * 18 - 24) / (1 + 2)\n    x = (36 - 24) / 3\n    \n    return x\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    num1 = 285 * 7 + 6\n    num2 = 181 * 11 + 10\n    num3 = 153 * 13 + 12\n\n    den1 = 7\n    den2 = 11\n    den3 = 13\n\n    # Add the numerators and common denominator for the fraction addition in the numerator of the final equation\n    numerator_sum = (num1 * den2 * den3) + (num2 * den1 * den3) + (num3 * den1 * den2)\n    numerator_common_den = den1 * den2 * den3\n\n    # Invert the denominators to add for the denominator of the final equation\n    denom_sum = (den2 * den3) + (den1 * den3) + (den1 * den2)\n\n    # Combine the results to find the final answer\n    ans = (numerator_sum * denom_sum) / (numerator_common_den * numerator_common_den)\n    \n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of pupils in the class\n    pupils = symbols('pupils')\n\n    # Equations based on the problem\n    band = 5\n    # 3/4 of the remaining pupils, which is (pupils - 5)\n    choir = (3/4) * (pupils - 5)\n    # 2/9 of the class are neither in the band nor the choir\n    neither = (2/9) * pupils\n\n    # Total pupils in the class is the sum of band, choir and neither\n    total_pupils_eq = Eq(band + choir + neither, pupils)\n\n    # Solve the equation\n    solution = solve(total_pupils_eq, pupils)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # in seconds\n    distance = 300  # in meters\n\n    speed = distance / time  # speed = distance / time\n\n    return speed  # in meters per second\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Start with the number of lollipops left when divided by 4\n    lollipops = 32\n    while True:\n        # Check if when divided by 7, the last box has 3 lollipops\n        if (lollipops - 3) % 7 == 0:\n            return lollipops\n        # Add 4 to lollipops for the next iteration to maintain the remainder when divided by 4\n        lollipops += 4\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # Since we need to know the number of long tubes, we iterate over possible numbers of long tubes\n    for long_tubes in range(total_balls // long_tube_capacity + 1):\n        # Calculate the remaining balls after using long tubes\n        remaining_balls = total_balls - (long_tube_capacity * long_tubes)\n        # Check if remaining balls can be perfectly divided by the short tube's capacity\n        if remaining_balls % short_tube_capacity == 0:\n            # Return the number of long tubes used\n            return long_tubes\n\n    # If no solution is found (which theoretically should not happen for this problem), return None\n    return None\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    difference = (ninth_term - third_term) / (9 - 3)\n    first_term = third_term - 2 * difference\n\n    eleventh_term = first_term + (n - 1) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the original number of bracelets Felicia had\n    f = symbols('f')\n    \n    # Janice initially has 96 bracelets\n    j_initial = 96\n    \n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = 3 * f / 5\n    \n    # Janice bought 2/5 of the bracelets Felicia sold\n    janice_bought = 2 * felicia_sold / 5\n    \n    # After selling, Felicia has 2/5 of her original number of bracelets\n    felicia_remain = 2 * f / 5\n    \n    # After buying, Janice has her initial bracelets plus the bought ones\n    janice_remain = j_initial + janice_bought\n    \n    # The ratio of Felicia's to Janice's bracelets became 5:7\n    ratio_equation = Eq(felicia_remain / janice_remain, 5 / 7)\n    \n    # Solve for f\n    felicia_original = solve(ratio_equation, f)[0]\n    \n    # Find the number of bracelets Janice bought from Felicia\n    janice_bought_number = 2 * (3 * felicia_original / 5) / 5\n\n    return janice_bought_number\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    cube_sum = sum(i**3 for i in range(1, 15) if i % 3 != 0)\n    return cube_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percent = 15\n    discount_amount = original_price * (discount_percent / 100)\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    true_result = symbols('true_result')\n    error = 2138.4\n    decimal_shifted = 432  # Multiplication without decimal places leads to this value\n    \n    # Equation representing the error introduced by forgetting the decimal point\n    equation = Eq(true_result * decimal_shifted, true_result + error)\n    \n    # Solve for the true result\n    true_result_value = solve(equation, true_result)\n    \n    return float(true_result_value[0])\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Find the differences between the numbers\n    diff1 = 2758 - 2017  # difference between second and first number\n    diff2 = 3670 - 2758  # difference between third and second number\n    \n    # Find the greatest common divisor of the differences\n    from math import gcd\n    candidate_A = gcd(diff1, diff2)\n    \n    # Find the possible values of A\n    possible_values = [i for i in range(2, candidate_A + 1) if candidate_A % i == 0]\n    \n    # Return the sum of the possible values\n    return sum(possible_values)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(boys * 5 + girls * 3, 448)\n    equation2 = Eq(girls, boys + 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of milk candy and fruit candy\n    milk, fruit = symbols('milk fruit')\n\n    # Original ratio\n    equation1 = Eq(milk / fruit, 7 / 9)\n    \n    # New ratio after eating 8 milk candies\n    equation2 = Eq((milk - 8) / fruit, 2 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1  # Start with the remainder when divided by 3\n    while True:\n        if B % 5 == 2:  # Check if remainder when divided by 5 is 2\n            return B\n        B += 3  # Increment by 3 to maintain the remainder when divided by 3\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n\n    # Calculate the year when Mum was born by subtracting her age from the year.\n    year_mum_born = 1996 - mum_age_1996\n\n    # Calculate the year difference between 2008 and the year Mum was born.\n    year_difference = 2008 - year_mum_born\n\n    # Grandmother's age when Mum was born is the difference between her age in 2008 and the year difference.\n    grandmother_age_when_mum_born = grandmother_age_2008 - year_difference\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of lemonade bottles, y be the number of \"1000 Plus\" bottles\n    x, y = symbols('x y')\n    \n    # Create the equations based on the problem statement\n    # Equation for the total number of bottles\n    total_bottles_eq = Eq(x + y, 350)\n    # Equation for the total income\n    total_income_eq = Eq(4*x + 7*y, 2012)\n    \n    # Use sympy to solve the system of equations\n    solutions = solve((total_bottles_eq, total_income_eq), (x, y))\n    \n    # Since we need the minimum number of \"1000 Plus\" bottles (which are more expensive)\n    # We should find the solution with the maximum number of lemonade bottles and minimum \"1000 Plus\"\n    lemonade_bottles_sold = max(solutions, key=lambda k: k[0])[0]\n    minimum_1000_plus_bottles_sold = 350 - lemonade_bottles_sold\n\n    return minimum_1000_plus_bottles_sold\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    total_apples_initial = 60\n    apples_per_friend_initial = 4\n    \n    num_friends = total_apples_initial // apples_per_friend_initial\n    apples_per_friend_new = apples_per_friend_initial + 1\n    \n    total_apples_needed = num_friends * apples_per_friend_new\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # In the worst case, Yohan could pick all red and black socks\n    red_socks = 10\n    black_socks = 10\n    # He needs to pick at least 1 white sock to start getting a pair\n    white_socks_needed_for_a_pair = 2\n\n    # Total socks he must take to guarantee a pair of white socks\n    max_socks = red_socks + black_socks + white_socks_needed_for_a_pair\n\n    return max_socks\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    ans = 546 + 287\n    return ans\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    total_marks = sum(marks)\n    num_tests = len(marks)\n    mean_mark = total_marks / num_tests\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        if 4*groups_of_4 + 6*groups_of_6 == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    average_final = 90\n    number_of_initial_numbers = 3\n\n    sum_initial = average_initial * number_of_initial_numbers\n    sum_final = average_final * (number_of_initial_numbers + 1)\n\n    fourth_number = sum_final - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and A != C and B != C:\n                    ABC = 100 * A + 10 * B + C\n                    return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    wheat_needed = 8\n    fish_needed = wheat_needed / fish_to_wheat_ratio\n    \n    return int(fish_needed)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the original price of the purse before the discount\n    p = symbols('p')\n\n    # Alicia got a $121 discount in total\n    handbag_discount = 428 * (20 / 100)  # 20% discount on the handbag\n    purse_discount = p * (28 / 100)  # 28% discount on the purse\n    total_discount = Eq(handbag_discount + purse_discount, 121)\n\n    # Solve the equation for the original price of the purse\n    original_price = solve(total_discount, p)\n\n    return original_price[0]\n\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    # Factors of 2 and 5 will contribute to zeros at the end of the product\n    # Count factors of 5 in the product as they are less than 2\n    n = 25\n    count_5 = 0\n    for i in range(1, n + 1):\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n\n    return count_5\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since there are two digits in the recurring pattern and the sum of first 20 digits is 80,\n    # one recurring cycle is A2. Hence, there are 10 complete cycles of A2 in the first 20 digits.\n    sum_per_cycle = 2  # '2' is clearly visible in the recurring cycle\n    \n    # To get the total sum of 80, we should consider the sum of A over 10 cycles.\n    # We add the sum_per_cycle * number_of_cycles to the equation.\n    number_of_cycles = 20 // 2  # 20 digits / 2 digits per cycle\n    sum_of_A_over_cycles = 80 - (sum_per_cycle * number_of_cycles)\n    \n    # Since this sum is over 10 cycles, divide it by the number of cycles to get A\n    A = sum_of_A_over_cycles // number_of_cycles\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    day_climb = 4\n    night_slide = 1\n    total_climbed = 0\n    day = 0\n    \n    while total_climbed < well_height:\n        day += 1\n        total_climbed += day_climb\n        if total_climbed >= well_height:\n            break\n        total_climbed -= night_slide\n    \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n    total_dances = dances_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    jogging_time = 0.5  # time from 6:30 AM to 7:00 AM (in hours)\n    walking_time = 1.0  # time from 7:00 AM to 8:00 AM (in hours)\n\n    jogging_speed = 6  # jogging speed in miles per hour\n    walking_speed = 5  # walking speed in miles per hour\n\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let the original amount of money be x\n    # According to the problem, Elvin spent $120 on a chair\n    # So the remainder is x - $120\n    # He then spent 40% of the remainder on a jacket\n    # This means he spent 0.4 * (x - $120) on the jacket\n    # Afterwards, he had 30% of the original amount of money left\n    # This means he has 0.3 * x left after shopping for both items\n    \n    # Forming the equation based on the situation:\n    # 0.3 * x = (x - $120) - 0.4 * (x - $120)\n    # Simplify the equation:\n    # 0.3 * x = x - $120 - 0.4 * x + $48\n    # 0.3 * x = 0.6 * x - $120 + $48\n    # Combine like terms\n    # 0.3 * x - 0.6 * x = -$120 + $48\n    # -0.3 * x = -$72\n    # Multiply both sides by -1\n    # 0.3 * x = $72\n    # Divide both sides by 0.3\n    # x = $72 / 0.3\n    # x = $240\n    # So Elvin originally had $240\n    \n    x = 72 / 0.3\n    return x\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a, b = 6, 10\n\n    lcm = (a * b) // gcd(a, b)\n\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_most_layer = (total_books + layers - 1) // layers\n    \n    return min_books_most_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books Ahmad originally bought\n    x = symbols('x')\n    original_total_price = 3.5 * x  # The total price of the original books\n    \n    # Add the price of the 2 additional books\n    new_total_price = original_total_price + 2 * 6\n    \n    # The new average price after buying the 2 additional books\n    new_average_price = Eq((new_total_price) / (x + 2), 4)\n    \n    # Solve for x\n    number_of_original_books = solve(new_average_price, x)[0]\n    \n    # Total number of books is the original number of books plus the 2 new books\n    total_books = number_of_original_books + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 4):  # The hundreds place can only be 1, 2, or 3 (cannot start with zero)\n        for tens in range(0, 4):\n            for ones in range(0, 4):\n                # Check if all digits are unique\n                if len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = -4  # 46 - 50\n\n    # The nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # To find the first negative term, set a_n < 0 and solve for n:\n    # 50 + (n-1)(-4) < 0\n    # -4n + 54 < 0\n    # -4n < -54\n    # n > 13.5\n    # Since n must be an integer, the smallest integer greater than 13.5 is 14\n    # But we're looking for the number of terms before the first negative,\n    # so the answer would be 14 - 1 = 13\n\n    n = 13\n\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of candy, they would have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If both eat 8 pieces, Rachel has 3 times as many pieces as Alice\n    equation2 = Eq((rachel - 8)*3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_in_grams = 1200  # 1.2kg in grams\n    piece_weight = 30  # weight of one piece in grams\n    num_pieces = total_weight_in_grams / piece_weight\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is approximately 1.056688 quarts\n    coke_in_liters = 2.5\n    cup_capacity_quarts = 0.5\n\n    coke_in_quarts = coke_in_liters * 1.056688\n    number_of_cups = coke_in_quarts / cup_capacity_quarts\n\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    return 748 - 189\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for B in [2]:  # given B is 2\n            for C in range(10):\n                for D in [0]:  # given D is 0\n                    for E in range(10):\n                        for F in range(10):\n                            if len(set([A, B, C, D, E, F])) == 6:  # all different numbers\n                                ABCDEF = A * 100000 + B * 10000 + C * 1000 + D * 100 + E * 10 + F\n                                EFABCD = E * 100000 + F * 10000 + A * 1000 + B * 100 + C * 10 + D\n                                if 5 * ABCDEF == 6 * EFABCD:\n                                    return (F*1000 + A*100 + C*10 + E)\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return int(18 / 3)\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Star jogs from 6:30 am to 7:30 am, i.e., for 1 hour at a speed of 6 miles per hour\n    jogging_distance = 1 * 6\n\n    # Star walks from 7:30 am to 9:30 am, i.e., for 2 hours at a speed of 5 miles per hour\n    walking_distance = 2 * 5\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of sweet wrappers Belle had be x\n    angel, belle = symbols('angel belle')\n    \n    # According to the problem, Angel initially had 5/6 as many wrappers as Belle\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After throwing away 58 wrappers, Angel had 75% as many wrappers as Belle\n    # 75% is 3/4 in fractional form\n    equation2 = Eq(angel - 58, 3/4 * belle)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (angel, belle))\n    \n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    # Let's denote the dad's current age as D and the son's current age as S.\n    from sympy import symbols, Eq, solve\n\n    D, S = symbols('D S')\n    # 6 years ago, dad's age was 5 times the son's age.\n    equation1 = Eq(D - 6, 5 * (S - 6))\n    # The sum of the ages of dad and son is 78 this year.\n    equation2 = Eq(D + S, 78)\n\n    # Solving the simultaneous equations.\n    solutions = solve((equation1, equation2), (D, S))\n\n    # Returning dad's current age.\n    return solutions[D]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4/9) * 36\n    return result\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, amount = symbols('children amount')\n\n    # If there was 20p more, each child would receive 70p\n    equation1 = Eq(amount + 20, children * 70)\n\n    # If each child was to receive 60p, 2.10 GBP would be left\n    equation2 = Eq(amount - children * 60, 210)\n\n    solutions = solve((equation1, equation2), (children, amount))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    \n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of the vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment_received = 120.75\n    final_amount = initial_amount + payment_received\n    return final_amount\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    date_start = datetime.strptime(\"2nd March\", \"%dth %B\")\n    date_end = datetime.strptime(\"15th April\", \"%dth %B\")\n\n    num_days = (date_end - date_start).days\n\n    # Adjusting for the year, assuming it's not a leap year\n    # Adding 1 day because the end date is inclusive\n    return num_days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for number in range(10, 10000):  # Let's assume the number has less than 5 digits\n        if str(number)[-1] == '9':   # Check if the unit's place is 9\n            new_number = int('9' + str(number)[:-1])  # Remove the 9 and place it at the start\n            if new_number == 4 * number:  # Check if the new number is four times the special number\n                return number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is fixed on the left end\n    # Avril should be next to Eddie, so there are 2 possibilities (left or right)\n    avril_positions = 2\n\n    # The remaining 5 students can be arranged in any order, which is 5! ways\n    rest_permutations = factorial(5)\n\n    # Apply the principle of multiplication\n    total_ways = avril_positions * rest_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Initial count of gloves\n    blue_gloves = 1 + 3  # Left blue + Right blue\n    green_gloves = 2 + 4  # Left green + Right green\n\n    # Since Dilly can only distinguish by color, we must consider the worst case for each color.\n    # For blue gloves, Dilly would have to take all 4 of them to ensure a pair, because there could be 3 of one hand and 1 of the other.\n    # For green gloves, taking 3 could still result in 2 left-hand and 1 right-hand (or vice versa). Therefore, we need to take all 6 to guarantee a pair.\n    # In total, Dilly would have to take 4 + 6 = 10 gloves to ensure a matching pair.\n\n    return blue_gloves + green_gloves  # 10 gloves\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_price = 200\n    increase_percentage = 0.45\n    new_price = initial_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean = 6\n    total_count = 8\n    total_sum = total_count * mean\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Given data\n    circumference = 300\n    initial_interval = 3\n    new_interval = 5\n    holes_dug = 30\n\n    # Calculate the position of the 30th hole\n    position_30th_hole = initial_interval * holes_dug\n\n    # Remaining circumference after the 30th hole\n    remaining_circumference = circumference - position_30th_hole\n\n    # Calculate the number of new holes that can be dug at 5m intervals\n    additional_holes = remaining_circumference // new_interval\n\n    # Check if there's remaining space for one more hole if the last hole isn't exactly at the end of the circumference\n    if remaining_circumference % new_interval > 0:\n        additional_holes += 1\n\n    return int(additional_holes)\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Two scenarios: Nelson hits the 5th step on his first pass, or on his second pass (i.e., stepping on the 4th then 5th)\n    # We calculate the number of ways to get to the 5th step and from the 5th to the 10th step separately for both scenarios.\n    \n    # Scenario 1: Getting to the 5th step directly implies having 4 steps to cover with 1 or 2 steps at a time.\n    # Scenario 2: Getting to the 5th step by stepping on the 4th first implies having 3 steps to cover initially.\n    \n    # Number of ways to cover n steps is given by the (n+1)th Fibonacci number.\n    # Therefore, the number of ways to reach the 5th step directly is Fib(5) and for the second scenario Fib(4).\n    # After reaching the 5th step, there are 5 more steps to cover in both scenarios.\n    # Number of ways to climb the remaining steps is Fib(6), since it's a 5 step count after the 5th step already covered.\n\n    # Define a function to compute Fibonacci numbers\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Calculate the number of ways for each scenario\n    ways_to_5_direct = fib(5)   # First pass to reach 5th step\n    ways_to_5_second_pass = fib(4)  # Second pass to reach 5th step\n    ways_after_5 = fib(6)  # From 5th to 10th step for both scenarios\n\n    # Total number of ways is the product of ways to reach the 5th step and to proceed from the 5th to the 10th\n    total_ways = (ways_to_5_direct + ways_to_5_second_pass) * ways_after_5\n\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_types = 2\n    sauce_types = 3\n    topping_types = 2\n\n    combinations = pasta_types * sauce_types * topping_types\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    num_cookies = 1\n    while not (num_cookies % 3 == 1 and num_cookies % 4 == 3 and num_cookies % 5 == 4):\n        num_cookies += 1\n    return num_cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_numbers = [number for number in range(1, 51) if '3' in str(number)]\n    return sum(erased_numbers)\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from sympy import *\n\ndef solution():\n    # We will create an expression for each possible way of inserting two pairs of brackets\n    # and evaluate each expression to determine which one gives the largest result.\n    \n    expressions = [\n        '((15+5)*5)+(15-(6+7))',  # ((15+5)*5)+15-(6+7)\n        '(15+(5*5))+(15-(6+7))',  # (15+(5*5))+15-(6+7)\n        '((15+5)*5)+(15-6)+7',    # ((15+5)*5)+(15-6)+7\n        '(15+(5*5))+(15-6)+7',    # (15+(5*5))+(15-6)+7\n        '15+(5*(5+(15-6)))+7',    # 15+(5*(5+(15-6)))+7\n        '15+(5*(5+15))-(6+7)',    # 15+(5*(5+15))-(6+7)\n        '15+(5*(5+15)-6)+7'       # 15+(5*(5+15)-6)+7\n    ]\n\n    # Evaluate each expression and keep track of the maximum result\n    max_result = -float('inf')\n    max_expression = ''\n    for expr in expressions:\n        result = eval(expr)\n        if result > max_result:\n            max_result = result\n            max_expression = expr\n            \n    return max_result, max_expression\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    pages = 0\n    digits_used = 0\n    \n    for n in range(1, total_digits + 1):\n        if n < 10:  # 1-9\n            digits = 1\n        elif n < 100:  # 10-99\n            digits = 2\n        elif n < 1000:  # 100-999\n            digits = 3\n        else:\n            break\n\n        if digits_used + digits > total_digits:\n            break\n        else:\n            digits_used += digits\n            pages += 1\n\n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_target_avg = 80 + 10\n    billy_target_total = billy_target_avg * 5\n\n    score_needed = billy_target_total - billy_total\n\n    return score_needed\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n\n    num_pipes = pipe_length // each_pipe_length\n    if pipe_length % each_pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    sum_required = 1000\n    # Since the order matters, every pair is unique (1+999, 999+1 are different pairs)\n    # Therefore, we can add whole numbers starting from 1 up to (1000 - 1)\n    num_ways = sum_required - 1\n\n    return num_ways\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given the 7th, 8th and 9th term of an arithmetic sequence\n    a7 = 39  # 7th term\n    a8 = 44  # 8th term\n\n    # The common difference 'd' can be found by subtracting the 7th term from the 8th term\n    d = a8 - a7\n\n    # The nth term of an arithmetic sequence can be calculated by: a_n = a_1 + (n-1)*d\n    # We need to find a_1 to calculate the 100th term\n    # a_7 = a_1 + (7-1)*d => a_1 = a_7 - 6*d\n    a1 = a7 - 6 * d\n\n    # Now we find the 100th term using the nth term formula\n    a100 = a1 + (100 - 1) * d\n\n    return a100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 1260 into its prime factors\n    factors = factorint(1260)\n    \n    # A number is a perfect square if in its prime factorization,\n    # all exponents are even.\n    # To make 1260m a perfect square, m must have prime factors\n    # that make all exponents in the factorization of 1260m even.\n    \n    # Initializing m to be a perfect square itself\n    m = 1\n    \n    # Iterate over the factors and their exponents\n    for prime, exponent in factors.items():\n        # If the exponent is odd, multiply m by the prime\n        if exponent % 2 == 1:\n            m *= prime\n            \n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 2 * peaches + 5\n\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):  # Start from 1 since 0 cards left is not the case we want\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11 # The least common multiple of 8 and 11\n    for num in range(10, 100): # The range for two-digit numbers\n        if num % 8 == 6 and num % 11 == 6:\n            return num\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    last_digit_sequence = [9**i % 10 for i in range(1, 5)]\n    last_digit_index = 99 % len(last_digit_sequence) - 1\n    \n    ans = last_digit_sequence[last_digit_index]\n    \n    return ans\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n    total_cost = table_cost + chair_cost\n    return total_cost\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total value of the five other ponies\n    x = symbols('x')\n    \n    # Before Rein Beau moves, the average value in the small stable is (x + 250000) / 3\n    # and the average value in the large stable is x / 3.\n    # After Rein Beau moves, the average value in each stable increases by 10000, so we have\n    # the average value in the small stable as x / 2\n    # and the average value in the large stable is (x + 250000) / 4.\n    \n    # Set up the equation based on the problem statement\n    equation = Eq((x / 2) - ((x + 250000) / 3), 10000)\n    \n    # Solve the equation for the total value of the five other ponies\n    total_value_of_other_ponies = solve(equation, x)[0]\n    \n    # Total value of all six ponies is the value of Rein Beau plus the total value of the other ponies\n    total_value_all_ponies = total_value_of_other_ponies + 250000\n    \n    return total_value_all_ponies\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    for month in range(1, 13):  # Assuming birthday month is between January (1) and December (12)\n        for day in range(1, 32):  # Assuming birthday day can be at a maximum of 31\n            step1 = month * 4\n            step2 = step1 + 1\n            step3 = step2 * 50\n            step4 = step3 + day * 2\n            step5 = step4 - 50\n            if step5 == 1234:\n                return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015) % 3\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # There are 5 \"objects\" to arrange: the group of 4 pupils as one and the other 4 individual pupils.\n    total_objects = 5\n    \n    # Arrange the 5 \"objects\" in a row.\n    arrangements_of_groups = factorial(total_objects)\n    \n    # Arrange the 4 pupils within their own group.\n    arrangements_within_group = factorial(4)\n    \n    # The total arrangement possibilities is the product of the two factors above.\n    total_arrangements = arrangements_of_groups * arrangements_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7.0\n    water = 21.0\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the first number be x, second number be x+1, and third number be x+2\n    # The sum of these numbers is 3x + 3\n    # Given that their sum is 60, we have the equation 3x + 3 = 60\n    # Solving for x we get x = (60 - 3) / 3\n\n    x = (60 - 3) / 3\n\n    # The largest number is x + 2\n    largest_number = x + 2\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g represent the number of gold medals\n    # Let s represent the number of silver medals\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n\n    # From the second equation, s = 80 - g\n    # Substituting s in the first equation:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11\n\n    g = 331 - 320  # Calculate the number of gold medals\n    return g\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    \n    lamb_quantity = 7\n    beef_quantity = 30\n    \n    total_cost = (lamb_price_per_kg * lamb_quantity) + (beef_price_per_kg * beef_quantity)\n    \n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Let total_spectators be the total number of spectators\n    # If 1/3 are children, then 2/3 are not children (remainder).\n    # Out of these, 5/8 are men, and therefore, 3/8 are women.\n    # So, we have (2/3) * (3/8) * total_spectators = women.\n    # Simplify the equation to find total_spectators\n    total_spectators = women / ((2/3) * (3/8))\n    return int(total_spectators)\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work rate of one master per day\n    # Let a be the work rate of one apprentice per day\n    m, a = symbols('m a')\n\n    # The total work done is the same in both cases, denoted as 1 (full task)\n    # 1 master and 3 apprentices working for 4 days to complete 1 task\n    equation1 = Eq(1*m*4 + 3*a*4, 1)\n    # 2 masters and 1 apprentice working for 3 days to complete 1 task\n    equation2 = Eq(2*m*3 + 1*a*3, 1)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    work_rate_apprentice = solutions[a]\n\n    # Time taken for 1 apprentice to complete the task alone\n    time_for_apprentice = 1 / work_rate_apprentice\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the given results, let's try to find the pattern for the new operation ★\n    # 5★2 = 8 (5 + 2 = 7, but the result is 8 which is 5 + 2 + 1 where 1 is the count of numbers between 5 and 2)\n    # 2★5 = 5 (2 + 5 = 7, but since 2 < 5, the result is the larger number)\n    # 6★3 = 15 (6 + 3 = 9, and 15 is 9 + (6 - 3) which is the difference)\n    # 8★2 = 14 (8 + 2 = 10 and 14 is 10 + (8 - 2) which is the difference)\n\n    # So the operation ★ seems to be defined as follows:\n    # a ★ b = a + b + (a - b) if a > b\n    # a ★ b = b if a < b\n\n    def star_operation(a, b):\n        if a > b:\n            return a + b + (a - b)\n        else:\n            return b\n\n    # Using our defined operation, calculate the value of 11★10\n    return star_operation(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_pos = 10\n    rabbit_pos = 9\n    dolls_between = 5\n\n    total_dolls = elephant_pos + dolls_between + rabbit_pos \n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * ((11 / 52) / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n\n    for girls in range(1000):  # Assuming a max of 1000 girls for a realistic upper bound\n        boys = girls + boys_more_than_girls\n        # Total students in the square array is given by (2*side_length - 1) ** 2\n        # because this represents an odd square pattern\n        # where side_length represents layers of boys and girls\n        side_length = (boys // 2) + 1\n        if (2 * side_length - 1) ** 2 == boys + girls:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of roses be r, and original number of daisies be d.\n    r, d = symbols('r d')\n\n    # The total number of flowers currently is the sum of roses and daisies already there. \n    # We're told it's 300.\n    equation1 = Eq(r + d, 300)\n\n    # The number of roses and daisies in the park in the future would still be the same total\n    # But roses will be 280 and daisies will be 180\n    # The difference between the future and now should be the same for roses and daisies\n    equation2 = Eq((280 - r) - (d - 180), 0)\n\n    solutions = solve((equation1, equation2), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 61))  # 61 is exclusive\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given values\n    n_10 = 23\n    n_15 = 38\n    position_10 = 10\n    position_15 = 15\n    \n    # Calculate the common difference\n    common_difference = (n_15 - n_10) / (position_15 - position_10)\n    \n    # Calculate the first term using common difference and 10th term\n    first_term = n_10 - (position_10 - 1) * common_difference\n    \n    # Calculate the 102nd term\n    position_102 = 102\n    n_102 = first_term + (position_102 - 1) * common_difference\n    \n    return int(n_102)\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    rest_books = total_books - english_books\n    \n    # Let x be the number of comics\n    # Then the number of Chinese books is 2 * x\n    # Chinese books + Comics = rest_books\n    # 2 * x + x = rest_books\n    # 3 * x = rest_books\n    # x = rest_books / 3\n    comics = rest_books // 3\n    \n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    total_ratio = coffee_ratio + milk_ratio\n\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    \n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_missed_score = missed_shots * 0\n    \n    total_shots = accurate_shots + missed_shots\n    total_score = total_accurate_score + total_missed_score\n    \n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start with the minimum distribution with each getting unique amount of apples\n    min_distribution = [i for i in range(1, 8 + 1)]  # 1 to 8 apples for each child\n    \n    # Remaining apples after the minimum distribution\n    remaining_apples = 50 - sum(min_distribution)\n    \n    # Distribute the remaining apples to the child who gets the most apples\n    most_apples = min_distribution[-1] + remaining_apples\n    \n    return most_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "from fractions import Fraction\n\ndef solution():\n    expression1 = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25)\n    expression2 = (2 - Fraction(2, 3)) / Fraction(8, 3)\n    ans = expression1 + expression2\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # Calculate the number of partitions of the integer 8\n    # Minus 1 because we exclude the number itself, which is a partition into just one part\n    def partitions(n):\n        # Initialize the ways array with zeros\n        ways = [0] * (n + 1)\n        # There is one way to partition 0\n        ways[0] = 1\n\n        # Iterate through all numbers to build up the ways\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                ways[j] += ways[j - i]\n\n        # The last element is the number of partitions of n\n        return ways[n]\n\n    num_ways = partitions(8) - 1  # Subtract one for the trivial partition (8 itself)\n    return num_ways\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kilograms = 0.6\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed \n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for the mass of one apple and one orange\n    a, o = symbols('a o')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(3 * a + 5 * o, 270) # 3 apples and 5 oranges weigh 270g\n    equation2 = Eq(3 * a + 7 * o, 342) # 3 apples and 7 oranges weigh 342g\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    # Total distance for the entire train to be in the tunnel is the length of the train plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n    \n    # Duration for the entire train to be in the tunnel, using the formula time = distance/speed\n    duration = total_distance / speed\n    \n    return duration\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n    \n    # Maximum number of men that do not wear both items\n    max_without_both = total_men - max(bow_ties, spectacles)\n\n    return max_without_both\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    percentage_1 = 50 / 100\n    percentage_2 = 20 / 100\n    amount = 350\n\n    result = percentage_1 * percentage_2 * amount\n\n    return result\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    total = blue + red + green\n\n    equation = Eq(total, 112)\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1/3) * 414\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Start with 1 apple for each child as minimum\n    min_apples = 1\n    # Initialize the count of distributed apples\n    distributed_apples = min_apples * 5\n    remaining_apples = 19 - distributed_apples\n    # Sort the remaining apples in increasing order for 4 children\n    # The 5th child will get any leftover, which will be the maximum\n    max_apples_for_5th_child = remaining_apples + min_apples\n\n    # Since the distribution needs to be unique for each child\n    # we subtract the difference from the remaining apples\n    # to ensure each child gets a different amount\n    for i in range(1, 4):\n        max_apples_for_5th_child -= i\n\n    return max_apples_for_5th_child + 1  # +1 to include the initial apple\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n\n    # Since Ali and Bala must stand together, we can treat them as a single person.\n    # Let's call this single entity \"AB\".\n    # We now have \"AB\", Charles, Ella, and Dan to arrange, but Dan must stand at the furthest left.\n    # This reduces our problem to arranging \"AB\", Charles, and Ella, which is 3! ways.\n    # However, Ali and Bala can switch places within \"AB\", which gives us an additional 2! arrangements.\n    # Total arrangements = Arrangements of \"AB\", Charles, and Ella * Arrangements of Ali and Bala within \"AB\".\n\n    total_arrangements = factorial(3) * factorial(2)\n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen the fisher trades 3 fishes for 2 rabbits.\n    # This means 1 rabbit = 3/2 fishes.\n    \n    # Oscar the hunter trades 3 rabbits for 4 packs of wheat.\n    # This means 1 pack of wheat = 3/4 rabbits.\n\n    # We want to find out how many fishes for 8 packs of wheat.\n    # First, find out how many rabbits for 8 packs of wheat.\n    rabbits_for_8_wheat = 8 * (3/4)\n\n    # Then convert the number of rabbits to the number of fishes.\n    fishes_for_8_wheat = rabbits_for_8_wheat * (3/2)\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    # Pages 1-9, 9 pages with 1 digit each\n    total_digits += 1 * 9\n    # Pages 10-99, 90 pages with 2 digits each\n    total_digits += 2 * 90\n    # Pages 100-140, 41 pages with 3 digits each\n    total_digits += 3 * (140 - 99)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    correct_subtrahend_tens = 3\n    correct_subtrahend_ones = 2\n\n    incorrect_subtrahend_tens = 5\n    incorrect_subtrahend_ones = 3\n\n    correct_subtrahend = correct_subtrahend_tens * 10 + correct_subtrahend_ones\n    incorrect_subtrahend = incorrect_subtrahend_tens * 10 + incorrect_subtrahend_ones\n    \n    incorrect_difference = 36\n    actual_minuend = incorrect_difference + incorrect_subtrahend\n    correct_difference = actual_minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Maximum number of balls we can draw without having all three colors:\n    # We can draw all 9 white balls and one color entirely (15 red or 6 yellow)\n    # To ensure we get the third color, we need to draw at least one more ball.\n    \n    max_without_all_colors = 9 + max(15, 6)\n    \n    # Since the next ball will definitely be the third color, we add one.\n    ans = max_without_all_colors + 1\n    return ans\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [n for n in range(2, 36, 3)]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    fence_length = 3.2\n    wood_length = 6.5\n    remaining_length = total_length - fence_length - wood_length\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]  # Given digits\n    perm = permutations(digits, 3)  # Get all permutations of 3 digits\n    count = len(list(perm))  # Count the number of permutations\n\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Ellen's and Lenny's sweets\n    ellen, lenny = symbols('ellen lenny')\n\n    # Write the equations based on the problem statement\n    # If Ellen gives away 12 sweets, she has 13/24 of the total\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    # If Lenny gives away 12 sweets, he has 3/8 of the total\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    # Total number of sweets\n    total_sweets = solutions[ellen] + solutions[lenny]\n\n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    income = 120000\n    base_tax = 0.06 * 50000\n    additional_income = income - 50000\n    total_tax_paid = 10000\n    \n    # Let T be the percentage in decimal form\n    T = (total_tax_paid - base_tax) / additional_income - 0.06\n    return T * 100  # Convert T to percentage\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    smallest_diff = float('inf')\n    for perm in permutations(digits):\n        num1 = int(''.join(perm[:5]))\n        num2 = int(''.join(perm[5:]))\n        current_diff = abs(num1 - num2)\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            if smallest_diff == 1:  # The smallest difference possible is 1\n                break\n    \n    return smallest_diff\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    presents = 7\n    children = 5\n    ways = 0\n\n    # Calculate all permutations of presents given to children\n    for p in permutations(range(presents), children):\n        # Check if Richard and Kevin get either the toy car (0) or the puzzle (1) and calculator (2)\n        if (0 in p[:2] or 1 in p[:2]) and (0 in p[:2] or 2 in p[:2]):\n            ways += 1\n            \n    # Duplicate presents since two presents (car and puzzle/calculator) can be swapped\n    ways *= 2 \n\n    return ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    # The total distance is the length of the train plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time taken to pass the entire tunnel is the distance divided by the speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n    amount_paid = 100  # paid amount in pence (1 pound = 100 pence)\n\n    change = amount_paid - total_cost  # change in pence\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1  # Start with the smallest positive integer\n    while True:\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1  # Increase n by 1 and check again\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of the first rabbit\n    first_rabbit = symbols('first_rabbit')\n\n    # Set up the equations based on the problem statement\n    second_rabbit = first_rabbit + 2  # Second rabbit costs £2 more than the first\n    third_rabbit = second_rabbit - 0.8  # Third rabbit costs 80p less than the second\n\n    # The sum of the costs of all three rabbits is £19.70\n    total_cost_eq = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)\n\n    # Solve the equation for the cost of the first rabbit\n    solution = solve(total_cost_eq, first_rabbit)\n\n    # Return the cost of the first rabbit\n    return solution[0]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_solution_weight = 200\n    sugar_concentration = 0.15\n\n    sugar_weight = total_solution_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15  # Jack's speed in km/h\n    speed_rose = 10  # Rose's speed in km/h\n    time = 10  # time they travel before meeting in hours\n\n    # Relative speed of Jack with respect to Rose\n    relative_speed = speed_jack - speed_rose\n\n    # Distance between A and B is the relative speed multiplied by the time\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2 * i) ** 2 - (2 * i - 2) ** 2 for i in range(1, 1011))\n\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    max_number = 5000\n    multiple_of_7 = max_number // 7\n    multiple_of_13 = max_number // 13\n    multiple_of_7_and_13 = max_number // (7 * 13)\n\n    return multiple_of_7 + multiple_of_13 - multiple_of_7_and_13\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"SUCCESS\")) // (factorial(\"SUCCESS\".count('S')) * factorial(\"SUCCESS\".count('C')) * factorial(\"SUCCESS\".count('U')) * factorial(\"SUCCESS\".count('E')))\n    forbidden_permutations = 0\n    \n    for perm in permutations(\"SUCCESS\"):\n        str_perm = \"\".join(perm)\n        if \"SS\" in str_perm:\n            forbidden_permutations += 1\n\n    forbidden_permutations //= factorial(\"SUCCESS\".count('S') - 1) * factorial(\"SUCCESS\".count('C')) * factorial(\"SUCCESS\".count('U')) * factorial(\"SUCCESS\".count('E'))\n\n    return total_permutations - forbidden_permutations\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')\n    david_rate = 1 / 10\n    emma_rate = 1 / 18\n\n    # David worked for (14 - emma_days) days\n    equation = Eq((14 - emma_days) * david_rate + emma_days * emma_rate, 1)\n\n    solutions = solve(equation, emma_days)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Number of T-shirts Josephine could have bought\n    total_tshirts = 145\n    \n    # Number of T-shirts Josephine actually bought\n    bought_tshirts = 138\n    \n    # Amount of money left after buying the T-shirts\n    money_left = 56\n    \n    # The price of each T-shirt can be calculated\n    # by dividing the left over money by the difference in T-shirts\n    price_per_tshirt = money_left / (total_tshirts - bought_tshirts)\n    \n    # Total money Josephine had initially\n    total_money = (bought_tshirts * price_per_tshirt) + money_left\n    \n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) // 4\n    sum_of_numbers = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    average = 119\n\n    # total sum of the 14 consecutive even numbers\n    total_sum = total_numbers * average\n\n    # middle number in the sequence of even numbers\n    # Since there are 14 numbers, the middle two will be the 7th and 8th numbers, and the average lies between them\n    middle_number = average - 1  # subtract 1 because the average isn't part of the sequence and the numbers are even\n\n    # smallest number in the sequence\n    smallest_number = middle_number - (total_numbers // 2 - 1) * 2\n\n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    # Implement divisibility rule for 11:\n    # A number is divisible by 11 if the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions is a\n    # multiple of 11 (including 0).\n    \n    # In the number 1a2a3a4a5a, the digits in the odd positions are 1, 2, 3, 4, 5\n    # and the digits in the even positions are a, a, a, a (four times).\n    \n    # Let's write down the condition based on the divisibility rule.\n    # Sum of odd position digits: 1 + 2 + 3 + 4 + 5\n    # Sum of even position digits: a + a + a + a = 4a\n    \n    # The difference should be multiple of 11:\n    # |(1 + 2 + 3 + 4 + 5) - 4a| = 11k where k is an integer\n    \n    # Calculate the sum of digits at odd positions\n    sum_of_odd = 1 + 2 + 3 + 4 + 5\n    \n    # Find the value of 'a' \n    # Iterate over the possible single digit values of 'a' (0 through 9)\n    for a in range(10):\n        if abs(sum_of_odd - 4*a) % 11 == 0:\n            return a\n            \nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    total_heights = 132 - 124 + 1  # number of different heights possible\n    # In the worst case scenario, we have 3 of each height before we need to add a 4th of the same height\n    # to satisfy the condition that at least 4 students are of the same height.\n    max_students_with_unique_heights = (total_heights - 1) * 3\n    class_size = max_students_with_unique_heights + 4  # Now we add the 4 students of the same height\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12 / 100\n\n    new_pay = original_pay + (original_pay * increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Rachel takes 12 minutes to cut a piece of wood into 5 sections.\n    # This implies there are 4 cuts since the first cut creates 2 sections.\n    cuts_needed_for_5_sections = 4\n    \n    # The time it takes to make one cut\n    time_per_cut = 12 / cuts_needed_for_5_sections\n    \n    # If the cutting speed remains the same,\n    # the time needed to make 5 cuts (to cut the wood 5 times) would be:\n    time_for_5_cuts = time_per_cut * 5\n    \n    # This is the answer we return\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_pennies = 126  # Convert pounds to pennies\n    \n    # Since there are equal number of 2p and 5p coins,\n    # Let the number of each type of coin be x\n    # The total value in pennies would be 2x (from 2p) + 5x (from 5p)\n    # The equation is 2x + 5x = total_pennies\n    # Therefore, 7x = total_pennies\n    \n    # We find x by dividing total_pennies by 7\n    x = total_pennies // 7\n    \n    # The total number of coins is the sum of the number of 2p and 5p coins,\n    # which is 2x since each contributes x coins\n    total_coins = 2 * x\n    \n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we are only interested in the ones digit we can look at the pattern\n    # of the last digit of powers of 3\n    # The pattern is 3, 9, 7, 1 and then it repeats every 4 powers\n    # Therefore, we just need to find the position of 2009 in this cycle\n    \n    cycle_position = 2009 % 4  # this will give us the position in the cycle\n    \n    if cycle_position == 1:\n        return 3\n    elif cycle_position == 2:\n        return 9\n    elif cycle_position == 3:\n        return 7\n    else:  # cycle_position == 0, we return the last element in the cycle which is 1\n        return 1\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5 / 9\n    adults_fraction = 2 / 5\n\n    # Let 'p' be the total number of people at the party\n    # According to the problem, (1 - 2/5) * (5/9) * p = 36\n    # Simplifying the equation: (5/5 - 2/5) * (5/9) * p = 36\n    # (3/5) * (5/9) * p = 36\n    # (1/3) * p = 36\n    # Therefore, the total number of people 'p' is:\n    p = 36 * 3\n\n    return p\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2 * 5\n    while True:\n        if (num ** 0.5).is_integer() and num % 2 == 0 and num % 5 == 0:\n            return num\n        num += 2 * 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_cost = 30\n    senior_discount = 0.20\n    \n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import comb\n    \n    # There are (n + k - 1) choose (k - 1) ways to distribute n indistinguishable items to k recipients.\n    n_books = 20\n    k_kids = 4\n    ans = comb(n_books + k_kids - 1, k_kids - 1)\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    # Number of men originally working\n    men_original = 3\n    # Number of days it takes them to build a house\n    days_original = 30\n    # Number of men now working\n    men_new = 2\n    \n    # Calculate total man-days for the original scenario\n    total_man_days = men_original * days_original\n    \n    # Now calculate how many days it will take for the new number of men\n    # We assume that every man works at the same rate\n    days_new = total_man_days / men_new\n    \n    return days_new\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'will_age' be Will's current age\n    will_age = symbols('will_age')\n\n    # Will's age in 8 years will be 'will_age + 8'\n    # Will's age 4 years ago was 'will_age - 4'\n    # According to Will, 'will_age + 8' equals 4 times of 'will_age - 4'\n\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    will_current_age = solve(equation, will_age)[0]\n\n    return will_current_age\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways_to_go = trains + cars + boats\n\n    return ways_to_go\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_needed = total_pages / pages_per_day\n    return int(days_needed)  # using int to return the full days read, assuming Mike doesn't read partial pages\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each kid gets at least two books, so we give out 2 books to each kid first\n    # That leaves us with 30 - 2*5 = 20 books to distribute\n    \n    # Now we need to find the number of ways to distribute 20 books to 5 kids\n    # This is a problem of distributing identical items into distinct groups, without any restrictions\n    # The formula for this is comb(n + k - 1, k - 1) where n is the number of items and k is the number of groups\n    \n    n = 20  # number of books left to distribute\n    k = 5   # number of kids\n    # Using stars and bars method (n + k - 1 choose k - 1)\n    ways = comb(n + k - 1, k - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 0.40 * mike)\n    equation3 = Eq(mason, mike - 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000  # converting ml to litres\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    years = 2\n\n    balance = principal * (1 + interest_rate) ** years\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    # Applying the inclusion-exclusion principle\n    like_either_or = like_one_direction + like_the_vamps - like_both\n    like_neither = total_girls - like_either_or\n\n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operators = ['+', '-', '*', '/']\n    max_sum = -float('inf')\n    second_largest_term = None\n\n    for perm in permutations(operators, 4):\n        term1 = eval(f\"(Fraction(1, 2) {perm[0]} Fraction(1, 9))\")\n        term2 = eval(f\"(Fraction(1, 3) {perm[1]} Fraction(1, 8))\")\n        term3 = eval(f\"(Fraction(1, 4) {perm[2]} Fraction(1, 7))\")\n        term4 = eval(f\"(Fraction(1, 5) {perm[3]} Fraction(1, 6))\")\n        \n        current_sum = term1 + term2 + term3 + term4\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = sorted([term1, term2, term3, term4])[-2]\n\n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    \n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the cost of one jug and 'c' be the cost of one cup\n    j, c = symbols('j c')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations for the cost of one jug and one cup\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK Coin denominations in pence\n    coin_denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Cost of the bus fare in pence\n    bus_fare = 44\n    \n    # Start with zero coins\n    coin_count = 0\n    amount_paid = 0\n    \n    # Traverse the denominations to pay the fare using the minimum number of coins\n    for coin in coin_denominations:\n        while amount_paid + coin <= 240:  # since Susan needs change, she pays no more than 240p (£2.40)\n            amount_paid += coin\n            coin_count += 1\n            if amount_paid == bus_fare:\n                return coin_count  # No change needed\n            elif amount_paid > bus_fare:\n                return coin_count + 1  # Susan receives exactly one coin as change\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    inequality = (x + 3) / (2 * x + 5) > 0.505\n    solution_set = solve(inequality, x)\n    \n    # We need to find the largest integer solution, so we take the floor of the upper bound\n    ans = int(solution_set[0].end.evalf() - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(-i if i % 2 else i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # Number of ways to choose 3 points out of 12 to form a triangle\n    total_triangles = comb(12, 3)\n    \n    # Number of ways to form a right angled triangle\n    # Since it's a regular 12-sided polygon (dodecagon), a right triangle is\n    # formed by choosing a pair of points that are next to each other and \n    # another point that is 3 or 4 points away (e.g., points 1, 2 and 4 or 5).\n    # There are 12 options for the first point, and then 2 options for the third\n    # point (either 3 steps away or 4 steps away in either direction).\n    \n    # For every starting point, we have 2 right triangles we can form\n    # (e.g., with the first point chosen, (1,2,5) and (1,2,8) are the two options).\n    # Since we have 12 starting points, we have a total of 12 * 2 right triangles.\n    right_triangles = 12 * 2\n    \n    # Subtract the number of right angled triangles from the total number of triangles\n    ans = total_triangles - right_triangles\n    \n    return ans\n\nfrom math import comb\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Indices of given numbers in the sequence\n    idx_10th = 10\n    idx_15th = 15\n\n    # Given numbers in the sequence\n    num_10th = 23\n    num_15th = 38\n\n    # Calculate the common difference of the sequence\n    common_difference = (num_15th - num_10th) / (idx_15th - idx_10th)\n\n    # Calculate the 12th number using the common difference and the 10th number\n    num_12th = num_10th + common_difference * (12 - idx_10th)\n\n    return num_12th\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # Define a function to generate denominators according to the pattern\n    def generate_denominator(n):\n        return n * (n + 1) if n > 1 else 1\n\n    # Initialize the sum\n    ans = 0\n    numerator = 1\n    start = 1\n\n    # Add the terms one by one\n    while True:\n        denominator = generate_denominator(start)\n        if start > 1:\n            ans += numerator / (denominator - start)\n            numerator += 1\n        else:\n            # For the last term where n = 29, which breaks the pattern\n            ans += 1 / denominator\n            break  # Exit the loop\n        \n        start += 3  # The step between the denominators is 3\n\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    num_students_A = 24\n    num_students_B = 36\n    num_students_C = 42\n    \n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum(4 * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    cost_per_day = 4.36\n    days = 5\n\n    total_cost = children * cost_per_day * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_for_correct = 5\n    points_for_wrong = -3\n    total_points = 76\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_for_correct + wrong * points_for_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3 / 8) * 16\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the cost price of the product be cp.\n    cp = symbols('cp')\n    \n    # The product is marked up 20% above the cost price.\n    marked_price = cp * 1.20\n    \n    # It is then sold at 90% of the marked price.\n    selling_price = marked_price * 0.90\n    \n    # The profit is given as $120.\n    profit = selling_price - cp\n    \n    # Creating the equation for the profit.\n    profit_equation = Eq(profit, 120)\n    \n    # Solving for the cost price.\n    cost_price_solution = solve(profit_equation, cp)\n    \n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep_fraction = 5/8\n    white_sheep_fraction = 1/4\n\n    black_sheep = total_sheep * black_sheep_fraction\n    white_sheep = total_sheep * white_sheep_fraction\n\n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    num_people = 38\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    solutions = solve(equation, x)\n    \n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange 4 different colored socks\n    ways_with_4_diff_socks = factorial(4)\n    \n    # The number of ways to arrange 2 pairs of different colored socks\n    ways_with_2_pairs = factorial(4) // (factorial(2) * factorial(2))\n    \n    return (ways_with_4_diff_socks, ways_with_2_pairs)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's the hundreds place in aab\n        for b in range(0, 10):\n            ab = int(f\"{a}{b}\")\n            ba = int(f\"{b}{a}\")\n            aab = int(f\"{a}{a}{b}\")\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    return comb(num_points, 3)\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # It's a nim-like strategy game, to ensure winning, Anthea should leave a multiple of 4 apples after her turn.\n    # This forces Ben to always leave a non-multiple of 4 to Anthea, allowing her to return to a multiple of 4 after her turn.\n    # Eventually, Ben will have to leave 4 apples, and Anthea can win by taking all 4.\n    # To find out how many Anthea should take, we subtract the nearest smaller multiple of 4 from the total number of apples.\n\n    apples = 18\n    nearest_multiple_of_4 = (apples // 4) * 4\n    apples_to_take = apples - nearest_multiple_of_4\n\n    # If apples_to_take is within 1, 2, or 3 then it's the correct number of apples that Anthea should take\n    # If it's 0, it means the apples are already at a multiple of 4, so Anthea should take 1 to get to the nearest smaller multiple of 4\n    if apples_to_take == 0:\n        apples_to_take = 1\n\n    return apples_to_take\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the mass of a chair and t be the mass of a table\n    c, t = symbols('c t')\n\n    # According to the problem, the mass of a table is 2 kg heavier than a chair\n    # So we can express the mass of a table (t) in terms of the mass of a chair (c)\n    table_mass_eq = Eq(t, c + 2)\n\n    # The total mass of 3 tables is the same as the total mass of 4 chairs\n    # So the equation would be 3*t = 4*c\n    total_mass_eq = Eq(3 * t, 4 * c)\n\n    # Now we can solve the system of equations to find the mass of the table\n    solutions = solve((table_mass_eq, total_mass_eq), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_men_taller_than_180 = 4500\n    men_taller_than_190 = 750\n    men_between_180_and_190 = total_men_taller_than_180 - men_taller_than_190\n    return men_between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "from math import factorial\n\ndef solution():\n    # Judy has 2 choices for which end to stand on\n    judy_options = 2\n    # The remaining 5 friends can be arranged in any order\n    friends_permutations = factorial(5)\n    \n    # The total number of ways they can perform\n    total_ways = judy_options * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Andre and Beth's original number of sweets\n    andre, beth = symbols('andre beth')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(andre + beth, 24)  # Andre and Beth have a total of 24 sweets initially\n    equation2 = Eq(andre + 4, beth + 4 + 6)  # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    # Get the amount of sweets Beth has now (after receiving 4 more sweets)\n    beth_now = solutions[beth] + 4\n    \n    return beth_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((x - 6) / 12, 2)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of minutes spent by each sister on each subject\n    math_elder, english_elder, math_younger, english_younger = symbols('math_elder english_elder math_younger english_younger')\n\n    # Given: elder sister spent 10 minutes more on math than the younger sister\n    equation1 = Eq(math_elder, math_younger + 10)\n\n    # Given: younger sister spent 4 minutes more on English\n    equation2 = Eq(english_younger, english_elder + 4)\n\n    # Given: elder sister spent a total of 88 minutes on her homework\n    equation3 = Eq(math_elder + english_elder, 88)\n\n    # Given: younger sister spent 12 minutes less on her math homework than on her English homework\n    equation4 = Eq(math_younger, english_younger - 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (math_elder, english_elder, math_younger, english_younger))\n\n    return solutions[english_younger]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4\n    sum_without_one_number = 110 * 3\n    number_removed = total_sum - sum_without_one_number\n    return number_removed\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from sympy import lcm\n\n    first_light_time = 1  # in minutes\n    second_light_time = 1.5  # in minutes\n    three_lights_time = 9  # in minutes\n\n    # Convert minutes to seconds\n    first_light_seconds = first_light_time * 60\n    second_light_seconds = second_light_time * 60\n    three_lights_seconds = three_lights_time * 60\n\n    # Calculating the LCM of the first two traffic lights\n    lcm_two_lights = lcm(first_light_seconds, int(second_light_seconds))\n\n    # The third traffic light must have a time change greater than or equal to 30 seconds\n    # We find the smallest multiple of lcm_two_lights that is also a multiple of 30 (since we are given that it must be at least 30 seconds or longer)\n    # and less than or equal to three_lights_seconds (9 minutes)\n    third_light_seconds = 30\n    while third_light_seconds < three_lights_seconds:\n        if three_lights_seconds % third_light_seconds == 0 and lcm_two_lights % third_light_seconds == 0:\n            return third_light_seconds\n        third_light_seconds += 30\n\n    return third_light_seconds\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure Leo's victory, he should play optimally.\n    # This is a typical problem of Nim game where the remaining apples must not\n    # be a multiple of 3 when it is Mia's turn. This is because if it is,\n    # Mia can always take away 1 or 2 apples to again force a multiple of 3 upon Leo.\n    # Since the pile is already not a multiple of 3, Leo should make a move that results\n    # in a multiple of 3 for Mia.\n    # We calculate the initial move:\n\n    # For the given problem, we can simplify the strategy:\n    # If the total number of apples is 14, Leo should leave 13 on the table, \n    # because no matter whether Mia takes 1 or 2 apples, the number of apples\n    # will no longer be a multiple of 3 when it's Leo's turn. So, his move is:\n    \n    total_apples = 14\n    # Find the number of apples to leave on the table after Leo's turn\n    # such that it's a multiple of 3\n    leo_take = total_apples % 3\n\n    return leo_take\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon and y be the value of one gold ring.\n    # According to the question, 12 silver spoons have three quarters the value of 6 gold rings.\n    # Therefore, we have the equation: 12x = (3/4) * 6y\n    # Simplifying the equation: 12x = 4.5y\n    # We need to find the number of silver spoons that have the same value as 3 gold rings.\n    # So we need to solve for x in terms of y, then find how many x are equivalent to 3y.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(12 * x, (3 / 4) * 6 * y)\n    \n    # Solving the equation for x in terms of y\n    solution = solve(equation, x)\n    \n    # Now we can find how many silver spoons (x) have the same value as 3 gold rings (3y).\n    spoons_for_3_rings = 3 * y / solution[x]\n    \n    return spoons_for_3_rings\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_more = 55\n    total_students = 0\n    for girls in range(10000): # Assuming a max of 10000 girls to ensure not to run an infinite loop\n        # Calculate boys based on girls and the difference given\n        boys = girls + boys_more\n        # The number of students in layers is determined by the square of odd numbers for boys\n        # and even numbers for girls. So we test if both boys and girls can be represented\n        # as a sum of consecutive squares of odd and even numbers respectively\n        if (boys % 4 == 0) and (girls % 2 == 0):\n            boys_layer = boys // 4\n            girls_layer = girls // 2\n            # Check if they form consecutive squares starting from 1 and 2 respectively\n            if (int(boys_layer**0.5))**2 == boys_layer and \\\n                (int(girls_layer**0.5) + 1)**2 == girls_layer:\n                total_students = boys + girls\n                break  # We found the solution, break the loop\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the cost of one pencil and m be the cost of one marker\n    p, m = symbols('p m')\n\n    # Create two equations based on given information\n    equation1 = Eq(3 * p + 2 * m, 13)\n    equation2 = Eq(2 * p + 3 * m, 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (p, m))\n\n    # Calculate the total cost of 7 pencils and 7 markers using the solutions obtained\n    total_cost = 7 * solutions[p] + 7 * solutions[m]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    cost_marker = 3\n    cost_brush = 1\n\n    # Assume all items are paintbrushes\n    cost_assumed_brushes = total_items * cost_brush\n    remaining_cost = total_cost - cost_assumed_brushes\n\n    # Find the price difference between a marker and a brush\n    price_difference = cost_marker - cost_brush\n\n    # Number of markers is the remaining cost divided by the price difference\n    markers = remaining_cost / price_difference\n\n    return int(markers)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    total_avg_weight = 65\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n    \n    # total weight of all teachers\n    total_weight = total_avg_weight * (male_teachers + 1)  # +1 for the additional female teacher needed to be found\n    \n    # total weight of all male teachers\n    total_male_weight = male_teachers * male_avg_weight\n    \n    # weight that the female teachers contribute, starting with 0 additional female teachers\n    female_weight_contrib = total_weight - total_male_weight\n    \n    # find the number of female teachers by dividing the female contribution by the average female weight\n    female_teachers = female_weight_contrib / female_avg_weight\n    \n    return female_teachers - 1  # subtracting 1 because we added 1 to the total number of teachers at the beginning\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position from the front plus her position from the back minus one gives the total number of rows\n    total_rows = 5 + 7 - 1\n    # Cora's position from the left plus her position from the right minus one gives the total number of columns\n    total_columns = 2 + 4 - 1\n    # The total number of students is the number of rows times the number of columns\n    total_students = total_rows * total_columns\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the given product (excluding m) to find its prime factors\n    factors_33_55 = factorint(33 * 55)\n    \n    # For the product to be a square number, all exponents in its prime factorization must be even\n    # Initially, the product 33 * 55 = 3^1 * 5^1 * 11^2\n    # We need an additional 3 and 5 to make their exponents even (i.e., m must be at least 3 * 5 = 15)\n    # Note: 11 is already squared, so we don't need to consider it for m\n    m = 1\n    for factor, exponent in factors_33_55.items():\n        if exponent % 2 != 0:\n            m *= factor\n    \n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since there must be at least 2 pieces on each plate,\n    # we can first give each plate 2 pieces and then distribute the remaining 2\n    # among the three plates. \n\n    # Now, it's a problem of partitioning 2 identical items into 3 parts.\n    # This is equivalent to adding up to 2 with 3 non-negative numbers,\n    # where the order doesn't matter. In other words, it's finding the number\n    # of solutions to the equation: x + y + z = 2 where x, y, z are non-negative integers.\n    # We can use the stars and bars combinatorial method (n + k - 1 choose k - 1)\n    # where n is the number of items to distribute and k is the number of containers.\n\n    # In this case, n = 2 (the two pieces of candy left) and k = 3 (the three plates).\n    ways = math.comb(2 + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    # Since Star must be the first runner, the remaining 4 teammates can be arranged\n    # in any order, and the number of arrangements for 4 people is 4! (4 factorial).\n    num_ways = factorial(4)\n\n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    from itertools import permutations\n\n    # Search through all permutations of 4 different digits\n    for digits in permutations('0123456789', 4):\n        # If the digits are already in increasing order\n        if digits == tuple(sorted(digits)):\n            # Create the three numbers from the permutations of the digits\n            num1 = int(''.join(digits))\n            num2 = int(''.join(digits[::-1]))\n            # The third number can be any permutation excluding the original and the reverse\n            perms = list(permutations(digits, 4))\n            perms.remove(digits)\n            perms.remove(digits[::-1])\n\n            # Check if any of the permutations satisfy the condition\n            for perm in perms:\n                num3 = int(''.join(perm))\n                if num1 + num2 + num3 == 26352:\n                    return num1\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def otimes(a, b):\n        return a * (b + a - 1)\n\n    ans = otimes(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    initial_segments = 31\n    initial_time = 60  # minutes\n\n    # To get 31 segments, we need to make 30 cuts. \n    # So the cutting time for one segment is the total time divided by the number of cuts.\n    time_per_cut = initial_time / (initial_segments - 1)\n\n    final_segments = 50\n    final_cuts = final_segments - 1\n    final_time = time_per_cut * final_cuts\n\n    return final_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = ((1, 3), (3, 5), (5, 7))\n    ans = solve_congruence(*congruences)\n\n    return next(num for num in ans if 100 <= num <= 200)\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    num = 210 / (1 - 0.30)\n    return num\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002  # Start from the year 2002\n    while True:\n        year += 1  # Check the next year\n        if str(year) == str(year)[::-1]:  # Check if the year is a palindrome\n            break\n    return year - 2002  # Return the difference between 2002 and the next palindrome year\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy, flowers_given = symbols('candy nancy flowers_given')\n    \n    initial_candy = 11\n    initial_nancy = 9\n\n    equation1 = Eq(candy, initial_candy - flowers_given)\n    equation2 = Eq(nancy, initial_nancy + flowers_given)\n    equation3 = Eq(nancy, candy + 8)\n\n    solutions = solve((equation1, equation2, equation3), (candy, nancy, flowers_given))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ARRANGE')  # count of all letters\n    a_count = 'ARRANGE'.count('A')  # count of A\n    r_count = 'ARRANGE'.count('R')  # count of R\n    n_count = 'ARRANGE'.count('N')  # we need to count N, as it appears only once (no need for G and E as they also appears once)\n    \n    # Calculate the number of arrangements using the formula for permutations of a multiset:\n    # total! / (n1! * n2! * ... * nk!)\n    ans = factorial(total_letters) // (factorial(a_count) * factorial(r_count) * factorial(n_count))\n    \n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 0.45\n    final_cost = initial_cost * (1 + increase_percentage)\n    return final_cost\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    # Mike's total earning for each day from Mum and Dad\n    daily_earning = 60 + 40\n\n    # Total money given by Mum and Dad for 3 days (Monday, Tuesday, Wednesday)\n    total_money = daily_earning * 3\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    while term <= 50:\n        increment += 1\n        term += increment\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185  # Convert £1.85 to pence\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n    \n    total_paid_p = 1000  # Convert £10 to pence\n    change_p = total_paid_p - total_cost_p\n    \n    return change_p / 100  # Convert back to pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    sibel_place_from_back = 14\n\n    # Total people = people in front of Sibel + Sibel herself + people behind Sibel\n    total_people = people_in_front + 1 + (sibel_place_from_back - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # Population of St. Petersburg as of the knowledge cutoff in 2023 is approx. 5.4 million\n    population_st_petersburg = 5400000\n    return population_st_petersburg\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousands in range(5, 10):\n        for hundreds in range(1, 10):\n            for tens in range(1, 10):\n                for ones in range(1, 10):\n                    if (thousands % hundreds == 0) and (thousands % tens == 0) and (thousands % ones == 0):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(1, 10))  # Generate a small range of prime numbers\n    third_prime = primes[2]  # Indexing starts at 0, so the 3rd prime number has index 2\n    \n    return third_prime\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Initialize possible digits for each position based on the information given\n    possible_digits = [set(range(10)) for _ in range(4)]\n\n    # Process the information that all digits in 1258 are wrong\n    for i, digit in enumerate('1258'):\n        if int(digit) in possible_digits[i]:\n            possible_digits[i].remove(int(digit))\n\n    # Process the information from other combinations\n    combinations = ['5648', '3628', '3147', '5629']\n    for combo in combinations:\n        wrong_digits = [int(digit) for digit in combo]\n        # Two digits are wrong, so remove these digits from other positions\n        for i in range(4):\n            # The current position should not contain the wrong digit\n            if wrong_digits[i] in possible_digits[i]:\n                possible_digits[i].remove(wrong_digits[i])\n            # The correct digits should be in other positions\n            for j in range(4):\n                if i != j and wrong_digits[i] not in possible_digits[j]:\n                    possible_digits[j].add(wrong_digits[i])\n\n    # Deduce the correct combination by finding the intersection of all possible sets\n    correct_combination = ''\n    for digit_set in possible_digits:\n        # There should exactly be one possible digit for each position\n        assert len(digit_set) == 1\n        correct_combination += str(digit_set.pop())\n\n    return correct_combination\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tilde = symbols('tilde')\n\n    equation = Eq((tilde + 7) / 9, 9)\n    solution = solve(equation, tilde)\n\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    num_weeks = 10\n\n    last_term = first_term + (num_weeks - 1) * common_difference\n    total_coins = (first_term + last_term) * num_weeks // 2\n    \n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2  # Gina has half as many dresses as Lily\n    fiona_dresses = gina_dresses // 4  # Fiona has a quarter as many dresses as Gina\n    \n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    result = 0.8 * 3 * 10\n    return result\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marks of A, B, C, D, and E\n    A, B, C, D, E = symbols('A B C D E')\n    \n    # Equations based on the given problem description\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, and C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, and D\n    equation3 = Eq(E, 96)                # E's mark\n    equation4 = Eq(B, D)                 # B and D have the same score\n\n    # Additional information: The marks are above 91, A has the highest mark, E is second (96)\n    # So A > 96, B > 91, C > 91, D > 91\n    # Since A has the highest mark, and E the second with 96, A must be strictly greater than 96.\n\n    # Use Sympy's solve function to solve these equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    # From the possible solutions, find the one that meets the condition of A > 96\n    for sol in solutions:\n        if sol[A] > 96:\n            return sol[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    increment_per_year = principal * interest_rate\n\n    years = (final_amount - principal) / increment_per_year\n\n    return int(years) != 5, int(years)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # total_weight = average_weight * total_number_of_teachers\n    # total_weight = male_teachers_weight + female_teachers_weight\n    # male_teachers_weight = average_male_weight * number_of_male_teachers\n    # female_teachers_weight = average_female_weight * number_of_female_teachers\n    # average_weight * (number_of_male_teachers + x) = average_male_weight * number_of_male_teachers + average_female_weight * x\n    # 65 * (3 + x) = 75 * 3 + 60 * x\n    # solving for x gives us the number of female teachers\n\n    average_weight = 65\n    average_male_weight = 75\n    number_of_male_teachers = 3\n    average_female_weight = 60\n\n    # 65 * (3 + x) = 75 * 3 + 60 * x\n    x = (average_male_weight * number_of_male_teachers - average_weight * number_of_male_teachers) / (average_weight - average_female_weight)\n\n    return int(x)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarter_full_mass = 350\n    one_quarter_full_mass = 250\n    mass_difference = three_quarter_full_mass - one_quarter_full_mass\n    # The difference in mass is due to the mass of half of the Marmite,\n    # so the empty jar mass is one quarter full mass - half of the Marmite mass.\n    empty_jar_mass = one_quarter_full_mass - (mass_difference / 2)\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda = 13.15  # Total amount of soda in liters\n    bottle_fraction = 1/7\n    bottle_capacity = 9.1\n    cup_capacity = 350 * 4 / 1000  # Four cups capacity in liters\n\n    soda_for_bottle = bottle_fraction * bottle_capacity\n    remaining_soda_after_bottle = total_soda - soda_for_bottle\n    remaining_soda_after_cups = remaining_soda_after_bottle - cup_capacity\n\n    return remaining_soda_after_cups\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n    \n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(father_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    from math import pi, sqrt\n\n    # Given values\n    m = 2.0  # Mass in kg\n    k = 500  # Spring constant in N/m\n    A = 0.08  # Amplitude in meters\n    \n    # Total energy is constant and equivalent to the potential energy at maximum displacement (amplitude)\n    E = (1/2) * k * A**2\n    \n    # Maximum speed at equilibrium can be found from the total energy\n    v_max = sqrt((2 * E) / m)\n    \n    # Position where speed is required\n    x = 0.04  # meters from equilibrium\n    \n    # At position x, total energy is distributed between potential and kinetic energy\n    # E = E_potential + E_kinetic\n    # E_kinetic = E_total - E_potential_at_x\n    E_potential_at_x = (1/2) * k * x**2\n    E_kinetic = E - E_potential_at_x\n    \n    # v = sqrt((2 * E_kinetic) / m)\n    v = sqrt((2 * E_kinetic) / m)\n\n    return E, v\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    total_marbles = 14\n\n    # If Rose takes 1 marble, there will be 13 left, which is not a multiple of 3.\n    # On the other hand, if Rose takes 2 marbles, there will be 12 left, which is a multiple of 3.\n    # To win the game, Rose will need to make sure that the number of marbles left is always a multiple of 3 after her turn.\n    # This ensures that she can always pick the last marble regardless of Kylie's moves.\n\n    # Calculate how many marbles Rose must take in the first turn\n    for first_move in [1, 2]:\n        if (total_marbles - first_move) % 3 == 0:\n            return first_move\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    # Since a and b are square roots of 2023, we have a^2 = 2023 and b^2 = 2023\n    # We are asked to find a + b - ab\n\n    # Let's calculate the square root of 2023 first\n    a = 2023 ** 0.5\n    b = a  # Since both a and b are square roots of 2023, they have the same value\n\n    # Now we calculate the expression a + b - ab\n    ans = a + b - a * b\n\n    # However, we know that since a and b are both sqrt(2023), ab would just be 2023\n    # So, a correct simplification without even calculating the square root would be:\n    # a + b - ab = a + b - 2023\n\n    # Since a and b are both sqrt(2023), let's denote this as sqrt_val\n    sqrt_val = 2023 ** 0.5\n\n    # Now, we substitute the sqrt_val for a and b\n    ans = sqrt_val + sqrt_val - 2023\n\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_money_in_pence = 45 * 100  # Convert pounds to pence\n    value_of_each_coin_in_pence = 5\n    number_of_coins = total_money_in_pence / value_of_each_coin_in_pence\n    return int(number_of_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    # total distance covered by Pip in 3 minutes\n    total_pip = 3 * pip_per_minute\n    # total distance covered by Bud in 3 minutes\n    total_bud = 3 * bud_per_minute\n    # together they run 540 meters\n    equation1 = Eq(total_pip + total_bud, 540)\n    # each minute Pip runs 20 meters more than Bud\n    equation2 = Eq(pip_per_minute, bud_per_minute + 20)\n\n    solutions = solve((equation1, equation2), (pip_per_minute, bud_per_minute))\n\n    # return the distance Pip has run in 3 minutes\n    return 3 * solutions[pip_per_minute]\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a, 4 * b)\n    equation2 = Eq(c + 0.06 * a + 0.20 * b, 1220)\n    equation3 = Eq(c + 0.22 * c, 1220)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Before Sally bought more bottles of tea, 60% were coffee.\n    # Therefore, 40% were tea.\n    # After purchasing more tea, 40% were coffee, which means 60% were tea.\n    \n    # Let's denote the original total number of bottled drinks as T.\n    # Let's denote the original number of bottles of tea as tea_original.\n    # Let's denote the new total number of bottled drinks as T_new.\n    # Let's denote the new number of bottles of tea as tea_new.\n    \n    # Initially,\n    # tea_original = 40% * T\n    \n    # After purchasing more tea,\n    # tea_new = 60% * T_new\n    # and the number of coffee bottles remains the same so,\n    # T_new = T + (tea_new - tea_original)\n    \n    # Since the number of coffee bottles remains the same,\n    # we have 60% * T = 40% * T_new\n    # Which simplifies to:\n    # 0.6 * T = 0.4 * T_new\n    \n    # Solving the above equation for T_new, we get:\n    # T_new = T * (0.6 / 0.4)\n    \n    # Now we calculate the original number of tea and new tea:\n    # tea_original = 40% * T\n    # tea_new = 60% * T_new = 60% * T * (0.6 / 0.4)\n    # tea_new = 90% * T\n    \n    # The percentage increase in the number of bottles of tea is calculated by:\n    # percentage_increase = ((tea_new - tea_original) / tea_original) * 100%\n    \n    # Substitute the values we have:\n    # percentage_increase = ((90% * T - 40% * T) / (40% * T)) * 100%\n    \n    # Simplify the equation:\n    # percentage_increase = ((50% * T) / (40% * T)) * 100%\n    # percentage_increase = 125%\n    \n    # So the percentage increase in the number of bottles of tea is 125%.\n    percentage_increase = 125\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_sum = int('2A3', 16) + int('17B', 16)\n    return hex(hex_sum)[2:].upper()\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = (25 / 100) * (30 / 100) * (40 / 100) * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n\n    average_price = total_price / total_flowers\n    \n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n\n    equation1 = Eq(tricycles + cars, 24)  # Total number of tricycles and cars\n    equation2 = Eq(3 * tricycles + 4 * cars, 86)  # Total number of wheels\n\n    solutions = solve((equation1, equation2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    return 1 + 3 + 4 + 1\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_p = 1.10 * 100  # converting pounds to pence\n    total_money_p = lewis_money_p + james_money_p\n    return total_money_p / 100  # converting back to pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('WINNING')\n    count_w = 'WINNING'.count('W')\n    count_i = 'WINNING'.count('I')\n    count_n = 'WINNING'.count('N')\n    count_g = 'WINNING'.count('G')\n\n    # Calculate permutations of letters\n    permutations = factorial(total_letters) // (factorial(count_w) * factorial(count_i) * factorial(count_n) * factorial(count_g))\n\n    return permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    # Start by considering the constraint that each stack must have at least 3 books.\n    # The minimum number of books in each stack is 3, so we start with 3 books in each stack, \n    # leaving us with 13 - 3*3 = 4 books to distribute.\n    available_books = 13 - 3*3\n    \n    # Now we need to count the ways to distribute these 4 books among the 3 stacks.\n    count = 0\n    for x1 in range(0, available_books + 1):\n        for x2 in range(0, available_books - x1 + 1):\n            # The third stack will have the remaining books\n            x3 = available_books - x1 - x2\n            # Since the books are identical, we just need to count the different distributions\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    \n    def D(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        return (n - 1) * (D(n - 1) + D(n - 2))\n\n    ans = D(6)\n    return ans\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from sympy import factorint\n\n    # Initialize a list to represent the 13 papers with numbers 1 to 13\n    papers = list(range(1, 14))\n    \n    # Initialize a list of possible products\n    possible_products = []\n    \n    # Find numbers with a unique count of factors since two students raised their hands\n    unique_factors = {}\n    for paper in papers:\n        # Count the factors using sympy's factorint function\n        factors = factorint(paper)\n        num_factors = sum(factors.values()) + 1  # Adding 1 to include 1 as a factor\n        if num_factors not in unique_factors:\n            unique_factors[num_factors] = [paper]\n        else:\n            unique_factors[num_factors].append(paper)\n    \n    # Filter out the counts with more than one number\n    unique_factor_numbers = {k: v for k, v in unique_factors.items() if len(v) == 1}\n    \n    # Try each combination where two students might know their number\n    for num1 in unique_factor_numbers.values():\n        for num2 in unique_factor_numbers.values():\n            if num1 != num2:\n                remaining_papers = [p for p in papers if p not in (num1 + num2)]\n                \n                # Assume Alice knows she has an odd number\n                for alice_number in remaining_papers:\n                    if alice_number % 2 != 0:\n                        # May's number is smaller than Alice's by 2\n                        may_number = alice_number - 2\n                        # Mark's number is smaller than May's by 1\n                        mark_number = may_number - 1\n                        \n                        # If May's number and Mark's number are within the remaining papers,\n                        # And not the same as what we assume Alice and students with raised hands have\n                        if may_number in remaining_papers and mark_number in remaining_papers:\n                            # Remove the numbers that are known\n                            for known in [alice_number, may_number, mark_number]:\n                                remaining_papers.remove(known)\n                            \n                            # Save the possible product\n                            possible_products.append(remaining_papers)\n    \n    # There should only be one unique solution\n    unique_product = set([eval('*'.join(map(str, x))) for x in possible_products])\n    assert len(unique_product) == 1\n    \n    # Return the product\n    return unique_product.pop()\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Setting the maximum possible number of bottles sold of each type\n    max_lemonade = 2012 // 4  # since each lemonade sells for $4\n    max_plus = 2012 // 7  # since each plus sells for $7\n\n    # Initialize the answer with the maximum number of \"1000 Plus\" bottles to find minimum\n    min_plus_bottles = max_plus\n    \n    for plus in range(max_plus + 1):\n        # for each possible number of \"1000 Plus\" bottles sold,\n        # calculate the remaining total income that must come from lemonade\n        remaining_income = 2012 - (plus * 7)\n        # calculate how many lemonade bottles could account for this remaining income\n        lemonade_bottles = remaining_income // 4\n\n        # Verify if the total number of bottles does not exceed the initial amount\n        if lemonade_bottles + plus <= 350:\n            # Check if the current number of \"1000 Plus\" is the minimum found so far\n            if plus < min_plus_bottles:\n                min_plus_bottles = plus  # update the minimum plus bottles sold\n                \n    return min_plus_bottles\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Original ratio of blue pens to red pens is 3:5\n    # Total pens initially is 96\n    # Let's find the initial number of blue and red pens\n    total_blue_and_red = 96\n    ratio_blue = 3\n    ratio_red = 5\n    total_ratio = ratio_blue + ratio_red\n    \n    # Calculate the number of blue pens initially\n    initial_blue = (ratio_blue / total_ratio) * total_blue_and_red\n    initial_red = (ratio_red / total_ratio) * total_blue_and_red\n\n    # 60 red pens added\n    new_red = initial_red + 60\n    \n    # After addition, 40% are blue pens, so 60% are red pens\n    # Lets find the total pens after addition\n    total_after_addition = new_red / 0.6\n    \n    # Calculate the number of added blue pens\n    added_blue = total_after_addition - total_blue_and_red\n    \n    # Since we want only the number of additional blue pens\n    # subtract the initial blue pens from the added blue to get additional blue pens\n    additional_blue = added_blue - initial_blue\n    \n    return int(additional_blue)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kilograms\n    final_velocity = 8  # in meters per second\n    time = 4  # in seconds\n\n    # Using the formula: force = mass * acceleration,\n    # and acceleration = change in velocity / time\n    acceleration = final_velocity / time\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for number in range(101):\n        if (number % 4 == 0) and (number % 7 == 6) and (number % 5 == 0):\n            return number\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Since we're looking for the Frobenius number for 2 numbers (which is solvable),\n    # we can use the formula for finding the largest number that cannot be obtained with\n    # two coprime numbers a and b: (a-1)(b-1)-1.\n    # Note: 3 and 7 are coprime.\n\n    a = 3\n    b = 7\n    ans = (a - 1) * (b - 1) - 1\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    # Let x be the number of incorrect answers\n    # Then the number of correct answers is 12 + 3x\n    # Each correct answer gives 5 points and each incorrect or unanswered question subtracts 2 points\n    # The total number of questions is the sum of correct and incorrect answers: x + (12 + 3x)\n    # The total points scored is 5 * (12 + 3x) - 2 * x\n    # This equals 151, so we set up the equation: 5 * (12 + 3x) - 2 * x = 151\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (12 + 3 * x) - 2 * x, 151)\n    solutions = solve(equation, x)\n\n    # Calculate the number of correct answers, which is 12 + 3 * number of incorrect answers\n    correct_answers = 12 + 3 * solutions[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, add them and convert back to base 7\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    sum_base10 = num1 + num2\n    ans = ''\n    \n    # Convert sum from base 10 back to base 7\n    while sum_base10:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return int(ans)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    total_matches = sum(range(1, 8))  # Total matches if each player plays with every other player once\n    matches_played = 4 + 6 + 2 + 1 + 3 + 5  # Sum matches played by A, B, C, D, E, G\n    f_matches = total_matches * 2 - matches_played  # Each match counts for two players\n    return f_matches\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Iterate over pairs of consecutive numbers from 1 to 20\n    for i in range(1, 20):\n        divisors = set(range(1, 21)) - {i, i+1}\n        lcm = 1\n        for d in divisors:\n            lcm = lcm * d // math.gcd(lcm, d)\n        # lcm now is the least common multiple of the divisors\n        # Check if it is also divisible by i or i+1 to confirm they are the missing divisors\n        if lcm % i != 0 and lcm % (i + 1) != 0:\n            return i + (i + 1)\n    return -1  # If not found, return a placeholder value (should not happen in this case)\n\nimport math\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_numbers = 0\n    for n in range(161, 15*16):  # n must be less than 15*16 since after that the quotient will change.\n        if n % 15 == (n // 15):  # The same quotient and remainder condition.\n            sum_numbers += n\n    return sum_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (first_term + last_term) * num_terms // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Given ratio of Jamie's to Natasha's stamps is 5:3\n    # Let's assume the number of stamps Natasha has is 3x\n    # Therefore, the number of stamps Jamie-Anne has is 5x\n    # The difference given is 18, which is equal to 5x - 3x\n\n    # Set up the equation based on the difference\n    x = 18 / (5 - 3)  # solving for x in the equation 5x - 3x = 18\n\n    # Now calculate the total number of stamps\n    total_stamps = (5 * x) + (3 * x)  # total stamps are Jamie's plus Natasha's\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent Cici's age when she was born (which is 0), and l represent Linda's age at the same time.\n    c, l = symbols('c l')\n\n    # From problem statement:\n    # At Cici's birth: l = c + 11 (as Linda was 11 years older than Cici)\n    # Sum of their ages 4 years later: (c + 4) + (l + 4) = 37\n    equation1 = Eq(l, c + 11)\n    equation2 = Eq(c + 4 + l + 4, 37)\n\n    # Solve the system of equations for l (Linda's age when Cici was born)\n    solutions = solve((equation1, equation2), (c, l))\n\n    # Find Linda's age 3 years later (from her age at Cici's birth)\n    linda_age_3_years_later = solutions[l] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # First number is between 5 and 8 inclusive\n    # Second number is between 2 and 10 inclusive\n    # The least possible value of the sum is when both are at their minimum\n    first_number = 5\n    second_number = 2\n    sum_of_numbers = first_number + second_number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    entrances = 5\n    people = 4\n    ways = entrances ** people\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # Calculate the time taken to go uphill\n    distance_uphill = 300\n    speed_uphill = 10\n    time_uphill = distance_uphill / speed_uphill\n\n    # Calculate the time taken to go downhill\n    distance_downhill = 300\n    speed_downhill = 30\n    time_downhill = distance_downhill / speed_downhill\n\n    # Calculate the total distance and total time\n    total_distance = distance_uphill + distance_downhill\n    total_time = time_uphill + time_downhill\n\n    # Calculate the average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n    \n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n    \n    students = gcd(gcd(apples, pears), oranges)\n    \n    return students\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "from math import factorial\n\ndef solution():\n    # Judy can be either at the first place or the last place\n    judy_positions = 2\n    # The rest of the five friends can be in any order\n    friends_permutations = factorial(5)\n    # According to the multiplication principle\n    total_ways = judy_positions * friends_permutations\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number1 = 6\n    lcm = 12 \n\n    # Since the only common factors are 1 and 2, and 6 already includes the 2, \n    # the second number must be a number that when multiplied with 6 gives 12;\n    # therefore, it must be 12 divided by 6.\n    number2 = lcm // number1\n\n    return number2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    current_digit_count = 0\n    i = 1\n    \n    while True:\n        number_of_digits = len(str(i))\n        current_digit_count += number_of_digits\n        \n        if current_digit_count >= 200:\n            return int(str(i)[number_of_digits - (current_digit_count - 200) - 1])\n        i += 1\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Assume all televisions are qualified\n    total_tvs = 500 * 4\n    total_points_if_all_qualified = total_tvs * 5\n    # Calculate the deficit in points from the ideal scenario\n    point_deficit = total_points_if_all_qualified - 9931\n    # Calculate how many unqualified products must exist to account for the deficit\n    unqualified_tvs = point_deficit / 18\n    # Calculate the number of qualified products by subtracting the unqualified from total\n    qualified_tvs = total_tvs - unqualified_tvs\n\n    return int(qualified_tvs)\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbol for the cost\n    cost = symbols('cost')\n    \n    # Price = cost + 40\n    # Sale price = Price - 20% of Price = 0.8 * Price\n    # Profit = Sale price - Cost = 0.8 * (cost + 40) - cost\n    # According to the problem Profit = 12\n    equation = Eq(0.8 * (cost + 40) - cost, 12)\n    \n    # Solving the equation for the cost\n    solution = solve(equation, cost)\n    \n    # Return the solution\n    return solution[0]\n\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven = 7 * 12\n    total_for_eight = 8 * 11\n    eighth_number = total_for_eight - total_for_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sum_sequence = sum(range(1, 9)) + sum(range(7, 0, -1)) + sum(range(1, 3))\n    return sum_sequence\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n    position = 2021\n    index_in_sequence = (position - 1) % len(recurring_sequence)\n    digit = recurring_sequence[index_in_sequence]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    original_distance = 1800  # The original distance between P and Q\n    meet_distance_from_Q = 800  # The distance they met from Q\n    \n    # At the meeting point, the total distance April covered is 1800 (P to Q) + 1000 (Q to meeting point)\n    # The total distance Baye covered is 1800 - 800 = 1000 meters (P to meeting point)\n    # Since they walk for the same amount of time and April runs at 4 times her walking speed to the meeting point,\n    # the distance she covered when they meet is 4 times the distance Baye covered.\n    # Therefore, April's walking speed is to Baye's walking speed as 1:4\n\n    # When April arrives back at P, Baye will have walked the same distance April ran back.\n    # April ran 1000 meters back to P (4 times the walking speed), so Baye walked another 1000 meters.\n    \n    # Distance Baye is away from Q when April arrives at P:\n    distance_baye_away_from_Q = original_distance - (meet_distance_from_Q + 1000)\n    \n    return distance_baye_away_from_Q\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # range for 2-digit palindromic numbers (11 to 99)\n    for i in range(1, 10):\n        count += 1  # every number from 1 to 9 will form a 2-digit palindrome (11 to 99)\n\n    # for 3-digit palindromic numbers (101 to 999) \n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # i and j will form a 3-digit palindrome i.e (101, 111, ... 919, 929)\n\n    return count\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n    # initial condition\n    equation1 = Eq(hens, 6 * roosters)\n    # after the increase\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    first_expression = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_expression = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_expression - second_expression\n    return ans\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 2/5\n    total_cost = 132\n\n    # Let's assume the total amount Bud had is x\n    # According to the question (1/3)x + (2/5)x = 132\n    # We solve for x\n    x = (total_cost * 1) / (book_fraction + bag_fraction)\n\n    return x\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell may pick all blue and white beads first\n    max_non_green = 5 + 6\n    # To get 5 green beads for sure, he needs to pick one more after all non-green\n    beads_needed = max_non_green + 5\n    return beads_needed\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the masses of the parcels\n    A, B, C = symbols('A B C')\n    \n    # Equation1: Mass of Parcel A is 5 times the mass of Parcel B\n    equation1 = Eq(A, 5 * B)\n    \n    # Equation2: Mass of Parcel C is 75g less than the mass of Parcel B\n    equation2 = Eq(C, B - 75)\n    \n    # Equation3: Total mass of the three parcels is 835g\n    equation3 = Eq(A + B + C, 835)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_both = 105 // (5 * 7)\n\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    # Initialize a counter for the number of digits\n    digits_count = 0\n\n    # Loop through each page number from 1 to 215\n    for page in range(1, 216):\n        # Convert the page number to a string and count its digits\n        digits_count += len(str(page))\n\n    return digits_count\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(\"1\" + str(i)) * 3 == int(str(i) + \"1\"):\n            return i\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    # 1-9 pages will use 1 digit each\n    total_digits += 9 * 1\n    # 10-81 pages will use 2 digits each\n    total_digits += (81 - 9) * 2\n\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    first_to_fourth_time = 12\n    first_to_eighth_time = first_to_fourth_time * (8 - 1) / (4 - 1)\n    \n    return first_to_eighth_time\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    # As the baskets are identical, we just need to find the number \n    # of solutions to the equation x1 + x2 + x3 = 6 where x1, x2, and x3 \n    # are the number of apples in each basket.\n    for x1 in range(7):\n        for x2 in range(7):\n            x3 = 6 - x1 - x2\n            # Since order doesn't matter in identical baskets, we avoid overcounting by ensuring\n            # x1 is always the greatest or tied for greatest number of apples among the baskets\n            if x1 >= x2 and x1 >= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # initial ratio of birds to squirrels is 8 : 5\n    initial_birds = 8\n    initial_squirrels = 5\n    total_initial = initial_birds + initial_squirrels\n\n    # the number of squirrels increased by 20%\n    new_squirrels = initial_squirrels * 1.20\n\n    # since the total number remains the same, the new number of birds is\n    new_birds = total_initial - new_squirrels\n\n    # calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((initial_birds - new_birds) / initial_birds) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = (5*a) - (2*b)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    num_months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * num_months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Total days = (last_day_pages - first_day_pages) / difference + 1\n    total_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(total_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3\n    remaining_juice = total_juice - 9\n    containers_needed = -(-remaining_juice // 5) # Use ceiling division to get required number of containers\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Observing the pattern in the provided examples:\n    # 4◈7 = (4 + 7) - (4/2) = 11 - 2 = 9 but it's 21 given, so there's an error in patter recognition\n    # Looks like there is a pattern of multiplying the second number by the first digit of the first number\n    # Let's test this with the given examples\n    # 4◈7 should equal 4 * 7 = 28, but provided answer is 21, there's a 7 difference\n    # Similarly for 6◈22, it should be 6 * 2 = 12, but given is 20, there's an 8 difference\n    # For 8◈30, 8 * 3 = 24, but given is 26, there's a 2 difference\n    # Now let's try to find a pattern in differences:\n    # 7 (difference) for 4, 8 (difference) for 6, 2 (difference) for 8\n    # Looks like the difference relates inversely to the first number, let's guess\n    # When the first number is 4, the difference is 7 (4 + 3)\n    # When the first number is 6, the difference is 8 (6 + 2)\n    # When the first number is 8, the difference is 2 (8 - 6)\n    # So if we follow the same pattern for 9:\n    # The expected result for 9◈20 would be 20 * 9 - (9 - 1) = 180 - 8\n    \n    result = (20 * 9) - (9 - 1)\n    return result\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(10, 81):  # A must be an integer greater than 9 to satisfy 9/A < 1\n        if (5/9) < (9/A):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for all variables\n    D, A, R, T, C = symbols('D A R T C', integer=True)\n    \n    # Define the equations based on the puzzle\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n    \n    # Each letter represents a different non-zero integer\n    # Since there are only 5 variables and 3 equations, \n    # we have to iterate over the entire range and check all possible combinations\n    \n    max_ART = 0\n    for d in range(1, 10):\n        for a in range(1, 10):\n            for r in range(1, 10):\n                for t in range(1, 10):\n                    for c in range(1, 10):\n                        if len(set([d, a, r, t, c])) == 5:\n                            sol_set = solve((equation1.subs({D: d, A: a, R: r, T: t}),\n                                             equation2.subs({D: d, A: a, R: r, T: t}),\n                                             equation3.subs({C: c, A: a, R: r, T: t})), \n                                             (D, A, R, T, C), dict=True)\n\n                            if sol_set:\n                                max_ART = max(max_ART, sol_set[0][A] + sol_set[0][R] + sol_set[0][T])\n    \n    return max_ART\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to all the other friends\n    # so we can think of it as a complete graph without self-loops, which is a handshake problem\n    cards_sent = friends * (friends - 1)\n    return cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    # Equation representing 1/4 of boys is equal to 2/5 of girls\n    equation1 = Eq((1/4) * boys, (2/5) * girls)\n    # Equation representing total number of students\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    more_boys = solutions[boys] - solutions[girls]\n\n    return more_boys\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_tanya = 3\n    right_of_tanya = 5\n    tanya = 1\n\n    total_members = left_of_tanya + tanya + right_of_tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Iterate through 4-digit prime numbers in descending order\n    for prime in sorted(list(primerange(1000, 10000)), reverse=True):\n        if 87878 % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    max_load_per_van = 12\n    total_crates = 24\n\n    total_weight_needed = crate_weight * total_crates\n    vans_needed = -(-total_weight_needed // max_load_per_van)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)  # Total race distance minus the first two segments\n    \n    # Time taken for each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time taken for the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Equation representing the final quantity of stickers for Daniel and Patrick\n    equation1 = Eq(daniel - 24, patrick + 10)\n\n    # Equation representing that Patrick has twice as many stickers as Daniel at the end\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    ways = [0] * (5 + 1)\n    ways[0] = 1\n\n    for i in range(1, 5 + 1):\n        for j in range(i, 5 + 1):\n            ways[j] += ways[j - i]\n\n    return ways[5]\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Whale is 82 meters below sea level, hence negative.\n    plane_height = 569  # Plane is 569 meters above sea level.\n\n    vertical_distance = plane_height - whale_depth  # Subtract whale's depth from plane's height.\n    \n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum possible number of left-handed girls (if all boys are right-handed)\n    max_left_handed_girls = total_pupils - right_handed\n\n    # Minimum number of right-handed girls (maximum left-handed girls subtracted from total girls)\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return max(0, min_right_handed_girls)  # Ensure the answer is not negative\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_difference = float('inf')\n    digits = '123456789'\n    \n    from itertools import permutations\n    for number1 in permutations(digits):\n        for number2 in permutations(digits):\n            num1 = int(''.join(number1))\n            num2 = int(''.join(number2))\n            if num1 != num2:\n                smallest_difference = min(smallest_difference, abs(num1 - num2))\n    \n    return smallest_difference\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum([(skirts_per_day) * (worker) for worker in range(1, 10)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    # Define the equation for total fruits based on the number of lemons (x)\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    total_fruits = x + (2/3 * x + 12) + (1/9 * x)\n    \n    # Create the equation based on the description\n    equation = Eq((2/3 * x + 12) - x, 12)\n    \n    # Solve the equation to find the value of x\n    lemons = solve(equation, x)\n    \n    return lemons[0]\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n\n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    taps = 5\n    time_for_1_litre = 2 # minutes\n    volume_of_jug = 0.5 # 500 ml is 0.5 litres\n\n    # Calculate the rate of one tap\n    rate_per_tap = 1 / (taps * time_for_1_litre) # litre per minute per tap\n\n    # Calculate the time taken for one tap to fill a 500ml jug\n    time_for_500ml_one_tap = volume_of_jug / rate_per_tap\n    \n    return time_for_500ml_one_tap\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    brother_erasers = (total_erasers - difference) // 2\n\n    return brother_erasers\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # cm\n    difference = 20   # cm, Ben is shorter than Sally by this amount\n    sally_height = ben_height + difference  # Sally's height is the sum of Ben's height and the difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/2 * remaining\n\n    equation = Eq(children - men, 140)\n\n    total_visitors = solve(equation, visitors)[0]\n\n    return total_visitors\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    # Generating all possible permutations of the three-digit numbers\n    digits = [1, 3, 4, 6, 7, 8]\n    three_digit_perms = permutations(digits, 3)\n    \n    # Initialize maximum sum\n    max_sum = 0\n    \n    # Explore all pairs of permutations and calculate their sum\n    for perm1 in three_digit_perms:\n        # Remaining digits for the second number after choosing the first number\n        remaining_digits = [d for d in digits if d not in perm1]\n        \n        # Get the maximum permutation of the remaining digits\n        perm2 = max(permutations(remaining_digits, 3))\n        \n        # Convert tuple of digits to the actual number\n        num1 = perm1[0]*100 + perm1[1]*10 + perm1[2]\n        num2 = perm2[0]*100 + perm2[1]*10 + perm2[2]\n        \n        # Calculate the sum and update maximum sum if current sum is greater\n        current_sum = num1 + num2\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    numerator = 360\n    denominator = 70 - (4 * 16)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # 2 liters in millilitres\n    volume_drank_ml = 350   # Volume drank in millilitres\n    remaining_volume_ml = total_volume_ml - volume_drank_ml\n\n    return remaining_volume_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    avg_goals = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals * num_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Observing the pattern:\n    # after first term, each even index has 7 added (8 to 16 to 23 to ...) \n    # while each odd index after first is the previous odd-indexed term multiplied by 2 (1 to 8 to 46 to ...)\n\n    # Define the initial terms\n    terms = [1, 8, 16, 23, 46, 53]\n    \n    # Since the pattern alternates, let's find the next term based on the last two:\n    # If the length of terms is even, the next operation should be multiplication by 2\n    # If the length is odd, the next operation should be addition of 7\n    if len(terms) % 2 == 0:\n        next_term = terms[-2] * 2\n    else:\n        next_term = terms[-1] + 7\n    \n    return next_term\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_weight = 8\n\n    cost_per_kilogram = total_cost / total_weight\n    \n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    # Given the operation \"☀\" is a summation of odd numbers starting at the first operand\n    # and the length of the sequence is determined by the second operand.\n    start_number = 1\n    length_of_sequence = 10\n\n    # Generating the odd numbers sequence\n    sequence = [start_number + 2 * i for i in range(length_of_sequence)]\n\n    # Calculating the sum of the odd numbers sequence\n    ans = sum(sequence)\n\n    return ans\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let the flow rate of A be represented by the variable 'a'\n    # let the flow rate of B be represented by the variable 'b'\n    # let the flow rate of C be represented by the variable 'c'\n    # let the capacity of the pool be 'cap'\n    a, c, cap = symbols('a c cap')\n\n    # only A and C are turned on, and A contributes 18 tons\n    # equation1: a + c = cap, equation2: 18a = 18c\n    equation1 = Eq(a + c, cap)\n    equation2 = Eq(18 * a, cap)\n\n    # only B and C are turned on, and B contributes 27 tons\n    # B's flow rate is twice that of A, so b = 2a\n    # equation3: 2a + c = cap, equation4: 27(2a) = 27c\n    equation3 = Eq(2 * a + c, cap)\n    equation4 = Eq(27 * 2 * a, cap)\n\n    # solving for a, b, and cap\n    solutions = solve((equation1, equation2, equation3, equation4), (a, c, cap))\n\n    # returning the capacity of the pool which is the total number of tons of water\n    return solutions[cap]\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    for M in range(1, 10):\n        for A in range(10):\n            for T in range(10):\n                for H in range(10):\n                    if len({M, A, T, H}) == 4:\n                        MATH = M * 1000 + A * 100 + T * 10 + H\n                        HTAM = H * 1000 + T * 100 + A * 10 + M\n                        if MATH + HTAM == 12221:\n                            return A + M + T + H\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer and his 2 children can be seen as a block and we have 2! ways to arrange the children around him\n    spencer_and_children = 2 * factorial(2)\n    \n    # Now we have a total of 4 entities: the block (Mr. Spencer and his children) and the 3 other people.\n    # These 4 entities can be arranged in 4! ways.\n    others = factorial(4)\n    \n    # The total number of different possible seating arrangements is the product of\n    # arrangements of Mr. Spencer and his children and arrangements of the other people.\n    total_arrangements = spencer_and_children * others\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Define constants based on the information given\n    horses_to_sheep_ratio = 4  # 1 horse eats as much as 4 sheep\n\n    # 20 horses eat all grass in 12 days\n    # Hence, daily grass consumption by one horse is 1/20 of the grass per day\n    horse_grass_consumption = 1 / (20 * 12)\n\n    # 60 sheep eat all grass in 24 days\n    # Hence, daily grass consumption by one sheep is 1/60 of the grass per day\n    sheep_grass_consumption = 1 / (60 * 24)\n\n    # Calculate the daily grass consumption rate for sheep in terms of horses \n    # Since 1 horse = 4 sheep, consume grass\n    sheep_in_horse_units = sheep_grass_consumption * horses_to_sheep_ratio\n\n    # Check if the consumption rates are equal\n    if horse_grass_consumption != sheep_in_horse_units:\n        raise ValueError(\"The consumption rates do not match!\")\n\n    # Calculate grass consumption for 12 horses and 88 sheep\n    total_consumption = (12 * horse_grass_consumption) + (88 * sheep_grass_consumption)\n\n    # Calculate the number of days 12 horses and 88 sheep can eat all grass\n    # Grass for 1 day is 1, so we divide 1 by the total_consumption to find the days\n    days_to_eat_all_grass = 1 / total_consumption\n\n    return days_to_eat_all_grass\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes initially.\n    x, y = symbols('x y')\n\n    # Cindy spends 1/3 of $2 notes, which means she has (2/3)*x left\n    # She receives 8 more $5 notes, so now she has y + 8\n    # The number of $5 notes she has is 3/7 of the remaining number of notes\n    equation1 = Eq(y + 8, (3/7) * ((2/3)*x + y + 8))\n\n    # Total initial number of notes is x + y = 55\n    equation2 = Eq(x + y, 55)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The amount of money Cindy had at first is 2*x + 5*y\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # The distance to the friend's house in meters\n    speed = 7      # Running speed in meters per minute\n    \n    # Time taken is distance divided by speed\n    time_taken = distance / speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Consider group ABC as a single element and also EF\n    # We have now 6 elements to arrange: ABC, D, G, H, I, EF\n    arrangements_6 = factorial(6)\n\n    # ABC can be arranged in 3! different ways\n    arrangements_ABC = factorial(3)\n\n    # EF can be arranged in 2! different ways\n    arrangements_EF = factorial(2)\n\n    # Total arrangements is product of all possible arrangements\n    total_arrangements = arrangements_6 * arrangements_ABC * arrangements_EF\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_52 = [i for i in range(1, 53) if 52 % i == 0]\n    \n    common_factors = set(factors_24).intersection(factors_52)\n    smallest_sum = None\n    \n    for B in common_factors:\n        A = 24 // B\n        C = 52 // B\n        if smallest_sum is None or (A + C) < smallest_sum:\n            smallest_sum = A + C\n\n    return smallest_sum\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    first_odd_number = 1\n    difference = 2  # Difference between each odd number\n\n    # For arithmetic sequence the n-th term is given by: a + (n-1)*d\n    # where 'a' is the first term and 'd' is the common difference\n\n    nth_term = first_odd_number + (20 - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scarfs_per_day = symbols('scarfs_per_day')\n    total_scarfs = symbols('total_scarfs')\n\n    equation1 = Eq(total_scarfs, scarfs_per_day * 6)\n    equation2 = Eq(total_scarfs, (scarfs_per_day + 24) * (6 - 2))\n\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n    \n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let the number of students be x and the total number of sweets be y\n    # According to the first condition:\n    # y = 6x - 26 (1)\n    # According to the second condition:\n    # y = 5x - 5  (2)\n    \n    # Equating both expressions for y gives:\n    # 6x - 26 = 5x - 5\n    # which simplifies to:\n    # x = 21 (number of students)\n    \n    # Replacing x in (1) or (2) to find y:\n    y = 6 * 21 - 26 # using equation (1)\n    \n    return y\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    initial_ratio = Eq(boys/girls, 5/3)\n    new_ratio = Eq((boys - 15)/girls, 5/6)\n\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 into its prime factors\n    factors = factorint(675)\n    # To make the product a square, each prime factor's power needs to be even\n    # Double any odd powers to make them even, the smallest B is the product of these adjustments\n    b = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            b *= prime\n    return b\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  # cost of multipack in pence\n    single_can_cost_pence = 65  # cost of a single can in pence\n    cost_for_12_individual_cans = 12 * single_can_cost_pence\n    savings = cost_for_12_individual_cans - multipack_cost_pence\n\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total = 0\n    \n    # Count for four-digit numbers starting with '3'\n    # Possible digits are (2, 4, 5, 6) for the three remaining positions\n    total += len(set(itertools.permutations('12456', 3)))\n    \n    # Count for four-digit numbers starting with '4'\n    # Possible digits are (1, 2, 3, 5, 6) for the three remaining positions\n    total += len(set(itertools.permutations('12356', 3)))\n    \n    # Count for four-digit numbers starting with '5'\n    # For numbers from 5000 to 5120, the hundreds place can only be '0' or '1', \n    # while the tens and ones places can be any of the remaining digits\n    # There is special handling needed for numbers in the range 5100 - 5120, \n    # so we treat them separately\n    # For numbers 5000 - 5099:\n    total += len(set(itertools.permutations('12346', 2))) * 2  # hundreds place '0' or '1'\n    # For numbers 5100 - 5120, the tens place can only be '0', '1', or '2',\n    # and the ones place can be any of the remaining four digits\n    total += 3 * 4  # tens place can be '0', '1', '2', ones place has 4 options\n    \n    return total\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Assuming Adam's weight is a, Ben's weight is b, and Carl's weight is c\n\n    # Adding the pairs of weights together:\n    # Adam + Ben = 102kg\n    # Ben + Carl = 97kg\n    # Adam + Carl = 93kg\n    # Adding all three equations together (Adam + Ben) + (Ben + Carl) + (Adam + Carl)\n    total_double_weight = 102 + 97 + 93  # Adam + Ben + Carl counted twice\n\n    # To find the total actual weight, we need to divide total_double_weight by 2\n    total_weight = total_double_weight / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    apple, banana = symbols('apple banana')\n\n    # Define two equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for Alan's and Bob's rates of working\n    alan_rate, bob_rate = symbols('alan_rate bob_rate')\n\n    # We can work with their rates (rooms per hour), so Alan and Bob's combined rate is 1/4\n    equation1 = Eq(alan_rate + bob_rate, 1/4)\n\n    # Bob's rate is 1/6 as given\n    equation2 = Eq(bob_rate, 1/6)\n\n    # Solving the two equations for Alan's rate\n    alan_rate_solution = solve((equation1, equation2), (alan_rate, bob_rate))[alan_rate]\n\n    # The time taken by Alan would be the inverse of his rate of working\n    alan_time = 1 / alan_rate_solution\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    value = 80\n    ans = (percentage / 100) * value\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    account_balance = principal * (1 + rate) ** time\n\n    return account_balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stamps each person has\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Create equations based on the problem statement\n    eq1 = Eq(shaun, 2 * kim)  # Shaun has twice as many stamps as Kim\n    eq2 = Eq(andrew, shaun - 24) # Andrew has 24 less stamps than Shaun\n    eq3 = Eq(andrew + kim + shaun, 256)  # Total number of stamps\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (andrew, kim, shaun))\n\n    # Return the number of stamps Andrew has\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10024\n    number2 = 3968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    weeks = 26\n\n    total_food = weekly_food * weeks\n\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    \n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    solution = solve(equation, original_score)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_so_far = 22 + 27 + 35\n    remaining_votes = total_votes - votes_so_far\n    peter_current_votes = 35\n\n    # Peter needs to have 1 more vote than half of the total votes to win without fail.\n    # Calculate half of the total votes\n    half_votes = total_votes // 2\n\n    # Calculate additional votes needed for Peter\n    additional_votes_needed = half_votes - peter_current_votes + 1\n    \n    # If additional votes needed is more than the remaining votes, then it's impossible for him to win without fail\n    # Otherwise, return the additional_votes_needed.\n    if additional_votes_needed <= remaining_votes:\n        return additional_votes_needed\n    else:\n        return \"Impossible for Peter to win without fail\"\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of money Alex and Nicholas have\n    alex, nicholas = symbols('alex nicholas')\n\n    # Create an equation representing that after spending money, Nicholas has 6 times Alex's amount\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n\n    # Create an equation representing that they originally had the same amount of money\n    equation2 = Eq(alex, nicholas)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    # Since both had the same amount, we just need one of them and multiply by 2\n    return 2 * solutions[alex]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for num_sweets in range(1, 30):\n        if (num_sweets % 3 == 0) and \\\n           (num_sweets % 2 == 1) and \\\n           (num_sweets % 4 == 1) and \\\n           (num_sweets % 5 == 1):\n            return num_sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    result = 250 - (6 * 6) - (8 * 6)\n    return result\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    remainder = days_later % days_in_week\n\n    # Since today is Monday and there's no remainder after 28 days,\n    # it will be Monday again after 28 days.\n    # Using the format specified: Monday -> 0001\n    return '0001'\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600 \n    remaining_flour = 21 \n    used_flour = initial_flour - remaining_flour \n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    return 9 ** (3/2)\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 6 * 0.001\n    return position_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    pole_interval = 12\n\n    # Since no poles at either end, adjust the road length\n    effective_length = road_length - (2 * pole_interval)\n    num_poles = effective_length // pole_interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    rulers = symbols('rulers')\n    pencils = rulers + 10\n    equation = Eq(pencils + rulers, 52)\n    rulers_num = solve(equation, rulers)\n    return rulers_num[0]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_count = len(numbers) + 1  # including the unknown x\n\n    sum_of_known_numbers = sum(numbers)\n    sum_of_all_numbers = mean_value * total_count\n\n    x = sum_of_all_numbers - sum_of_known_numbers\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # Assign values to the digits of the number 67379 based on their place\n    first_7_value = 7 * 1000  # The first 7 is in the thousands place\n    second_7_value = 7 * 10   # The second 7 is in the tens place\n    \n    # Calculate the difference between the values of the two 7s\n    difference = first_7_value - second_7_value\n    \n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    \n    # blue dress costs two times as much as a red dress\n    equation1 = Eq(blue, 2 * red)\n    # yellow dress costs $2.40 more than a blue dress\n    equation2 = Eq(yellow, blue + 2.40)\n    # total cost for blue, red and yellow dress\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n    \n    # returning the cost of blue dress\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure 4 marbles of the same color, we need to consider the worst-case scenario\n    # Worst-case scenario: Picking 3 marbles of each color and still not having 4 of the same color\n    # Therefore, we pick 3 red, 3 yellow, and 3 blue marbles\n    \n    worst_case_red = 3\n    worst_case_yellow = 3\n    worst_case_blue = 3\n    \n    # After picking 3 marbles of each color, the next marble we pick will guarantee we have 4 of the same color\n    # So we add 1 to the sum of the worst-case scenario marbles\n    marbles_needed = worst_case_red + worst_case_yellow + worst_case_blue + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n\n    girls = (boys / boys_ratio) * girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.333... repeating\n    # The sum of the first 1000 digits from the right of the decimal point will therefore be 3 * 1000\n    return 3 * 1000\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    amount = 29\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the concentration of the solution in percentage that we put into container A\n    x = symbols('x')\n\n    # The amount of solute in the original solution put into A\n    solute_in_A = 0.1 * x\n    \n    # The concentration of solute after putting the solution into A (it now has 40g of water)\n    concentration_in_A = solute_in_A / 0.4\n    \n    # The amount of solute taken from A and put into B\n    solute_in_B_from_A = concentration_in_A * 0.1\n    \n    # Final mixture in B has 50g of water\n    concentration_in_B = solute_in_B_from_A / 0.5\n    \n    # The amount of solute taken from B and put into C\n    solute_in_C_from_B = concentration_in_B * 0.1\n    \n    # Final mixture in C has 60g of water and the concentration is 0.5%\n    # 0.5% is the same as 0.005 in decimal\n    concentration_in_C = solute_in_C_from_B / 0.6\n    \n    # Creating an equation based on the final concentration in C and solving it\n    equation = Eq(concentration_in_C, 0.005)\n    original_concentration = solve(equation, x)\n    \n    # Get the concentration in percentage\n    return original_concentration[0]\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start_number = 2\n    end_number = 100\n    step = 2\n\n    ans = (end_number - start_number) // step + 1\n\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation\n    equation = Eq(4 * x - 13, 55)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    return fraction + percentage + decimal\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "from math import factorial\n\ndef solution():\n    # Calculate the ways five people can line up.\n    total_ways = factorial(5)\n    \n    # Since two people want to stand next to each other,\n    # treat them as a single unit. Now we have four units to arrange.\n    # Then, multiply by 2, as the two people can switch places.\n    adjacent_ways = factorial(4) * 2\n    \n    return adjacent_ways\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    weight_metal2 = 13\n    nickel_concentration_metal1 = 0.40\n    nickel_concentration_metal2 = 0.60\n\n    total_nickel = (weight_metal1 * nickel_concentration_metal1) + (weight_metal2 * nickel_concentration_metal2)\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_percent = (total_nickel / total_weight) * 100\n    \n    return nickel_percent\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n\n    # 2016 prime factorization: 2^5 * 3^2 * 7\n    # 1377 prime factorization: 3^2 * 7 * 11\n    # We know each cousin's age is a factor of both 2016 and 1377\n    # and differences between ages from the last years are either 1 or 0.\n\n    # Get sorted divisors of 2016 and 1377\n    divisors_2016 = sorted(divisors(2016))\n    divisors_1377 = sorted(divisors(1377))\n\n    # Common divisors of both numbers give possible ages from the current year\n    possible_ages = [d for d in divisors_2016 if d in divisors_1377]\n\n    # Iterate over the triplets of possible ages to see which ones satisfy the condition\n    for i in range(len(possible_ages)):\n        for j in range(i+1, len(possible_ages)):\n            for k in range(j+1, len(possible_ages)):\n                age1, age2, age3 = possible_ages[i], possible_ages[j], possible_ages[k]\n                \n                # Multiply the ages from last year to check if it's 1377\n                if (age1 - 1) * (age2 - 1) * (age3 - 1) == 1377:\n                    # Return ages multiplied from two years ago\n                    return (age1 - 2) * (age2 - 2) * (age3 - 2)\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    halfway = (-3 + 8) / 2\n    return halfway\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # There are eight players in a single round-robin tournament.\n    # Each player plays every other player once.\n    # Hence, each player plays 7 matches.\n    # Since there are no ties, each match results in a win for one player.\n    # Since everyone has a different number of wins, the wins must be distributed as\n    # 0, 1, 2, 3, 4, 5, 6, 7 wins, for each player respectively.\n    # The player with the highest number of wins is the champion.\n    # So, the champion has 7 wins, as that is the highest unique win count possible.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1 / 7\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    sum_of_n = 3405\n    n = 1\n\n    while (n * (n + 1)) // 2 < sum_of_n:\n        n += 1\n    \n    correct_sum = (n * (n + 1)) // 2\n    double_counted_number = sum_of_n - correct_sum\n    \n    return double_counted_number\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the initial number of chickens in each pen.\n    # Let y be the total number of chickens.\n    # We have two situations:\n    # Initially: 24 pens with x chickens in each, total chickens y = 24 * x\n    # Afterwards: 30 pens with (x - 6) chickens in each, still with total chickens y = 30 * (x - 6)\n    # Equating the two expressions for total chickens gives us:\n    # 24 * x = 30 * (x - 6)\n    # Solving for x we get x = 30\n    # Therefore, the total number of chickens is y = 24 * x = 24 * 30\n    y = 24 * 30\n    return y\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    divisor_dividend_quotient_sum = 40 - 3  # Remove the fixed remainder from the total sum\n    possible_values = set()\n\n    # Iterate over possible divisors\n    for divisor in range(1, divisor_dividend_quotient_sum):\n        # The dividend is the product of the divisor and quotient plus the remainder\n        for quotient in range(1, divisor_dividend_quotient_sum // divisor):\n            dividend = divisor * quotient + 3\n            if divisor + dividend + quotient + 3 == 40:\n                # Add the ratio of dividend to quotient to set of possible values\n                possible_values.add(dividend // quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    ratio_math_to_history = 8 / 7\n    total_history_club = total_math_club / ratio_math_to_history\n    return int(total_history_club)\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given the sum of the first 6 terms (S6) and the first 12 terms (S12)\n    S6 = 64\n    S12 = 156\n\n    # The sum of an arithmetic sequence can be calculated using formula: Sn = n/2 * (a1 + an)\n    # Where Sn is the sum of the first n terms, a1 is the first term, and an is the nth term.\n    # Also, an = a1 + (n-1)d, where d is the common difference.\n\n    # We know that S6 = 6/2 * (a1 + a6) = 3 * (a1 + a1 + 5d) = 6a1 + 15d\n    # And S12 = 12/2 * (a1 + a12) = 6 * (a1 + a1 + 11d) = 12a1 + 66d\n    \n    # Thus we have two equations:\n    # 6a1 + 15d = 64    (1)\n    # 12a1 + 66d = 156  (2)\n\n    # Solving equations (1) and (2) to find a1 and d\n    # From (1) a1 = (64 - 15d) / 6\n\n    # Substituting a1 from (1) into (2) we get:\n    # 12 * ((64 - 15d) / 6) + 66d = 156\n    # 2 * (64 - 15d) + 66d = 156\n    # 128 - 30d + 66d = 156\n    # 36d = 28\n    # d = 28 / 36\n    d = 28 / 36\n\n    # Now find a1 using (1)\n    # a1 = (64 - 15d) / 6\n    a1 = (64 - 15 * d) / 6\n\n    # Now we want to find the sum of the first 18 terms (S18)\n    # S18 = 18/2 * (a1 + a18) = 9 * (a1 + a1 + 17d) = 9 * (2a1 + 17d)\n\n    # a18 = a1 + 17d\n    a18 = a1 + 17 * d\n\n    # Calculate S18\n    S18 = 9 * (a1 + a18)\n\n    return S18\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # First, reverse the numbers as they are on planet Zog\n    reversed_num1 = int(str(729)[::-1]) # This will reverse the string representation of the number\n    reversed_num2 = int(str(26)[::-1])\n\n    # Perform the subtraction\n    subtracted_value = reversed_num1 - reversed_num2\n    \n    # Reverse the result to get the number as it would be written on planet Zog\n    ans = int(str(subtracted_value)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    num1 = 45\n    num2 = 60\n\n    ans = gcd(num1, num2)\n\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    train_length = 160  # meters\n    time_to_pass = 30  # seconds\n\n    # Distance covered to completely pass the bridge is the length of train plus the length of the bridge\n    # Distance = Speed * Time\n    distance_covered = train_speed * time_to_pass\n\n    # Length of the bridge = Distance covered - Length of the train\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 possibilities for the first digit (it can't be 0)\n    first_digit_options = 2  # 3 or 4\n\n    # There are 3 possibilities for the second and third digits (0, 3, 4)\n    second_digit_options = 3\n    third_digit_options = 3\n\n    # The total number of different three-digit numbers\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    won = symbols('won')\n    lost = symbols('lost')\n    \n    equation1 = Eq(won, 2 * lost)\n    equation2 = Eq(won + lost, 63)\n    \n    solutions = solve((equation1, equation2), (won, lost))\n    \n    return solutions[lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return common_factor * (55 - 44)\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total number of animals\n    # Let g be the initial number of goats\n    # Since 65% are cows, then the initial number of cows is 0.65x\n    # The initial number of goats is x - 0.65x = 0.35x\n    x, g = symbols('x g')\n\n    # Equation based on the initial percentage of cows and goats\n    equation1 = Eq(g, 0.35 * x)\n\n    # After adding 240 animals, the total number becomes x + 240\n    # If the percentage of cows increased by 20%, the new percentage of cows is 65% + 20% = 85%\n    # So the new number of cows is 0.85 * (x + 240)\n    # The number of goats doubled, so it's 2 * g\n    # The new total number of goats is then x + 240 - number of cows\n    equation2 = Eq(2 * g, x + 240 - 0.85 * (x + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, g))\n\n    # Returning initial number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of a triangle is given by the formula: area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # where s is the semiperimeter of the triangle and a, b, c are the lengths of the sides.\n    # For both Triangle X and Triangle Y, all sides are equal (equilateral triangle), so the formula simplifies to:\n    # area = (s * (s - a) ** 3) ** 0.5\n\n    # For Triangle X, a = 3 cm\n    side_x = 3\n    semiperimeter_x = (3 * side_x) / 2\n    area_x = (semiperimeter_x * (semiperimeter_x - side_x) ** 3) ** 0.5\n\n    # For Triangle Y, a = 9 cm\n    side_y = 9\n    semiperimeter_y = (3 * side_y) / 2\n    area_y = (semiperimeter_y * (semiperimeter_y - side_y) ** 3) ** 0.5\n\n    # The number of times Triangle X fits into Triangle Y is the ratio of their areas\n    num_times = area_y / area_x\n\n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for number in range(100, 1000):\n        if all(number % divisor == 4 for divisor in [7, 8, 9]):\n            return number\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Star jogs from 6:30 a.m. to 7:00 a.m., which is 0.5 hours\n    jog_time = 0.5\n    jog_speed = 9 # in km per hour\n\n    # Distance jogged\n    distance_jogged = jog_time * jog_speed\n\n    # Star walks from 7:00 a.m. to 8:00 a.m., which is 1 hour\n    walk_time = 1\n    walk_speed = 7.5 # in km per hour\n\n    # Distance walked\n    distance_walked = walk_time * walk_speed\n\n    # Total distance covered\n    total_distance = distance_jogged + distance_walked\n\n    return total_distance\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5*x*12 + 3*x*5, 120)\n    x_value = solve(total_cost, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n    \n    ans = comb(total_students, students_to_choose)\n    \n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    difference = product1 - product2\n\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ -3 (mod 8) and x ≡ -1 (mod 9).\n    # We convert them to standard form:\n    # x ≡ 5 (mod 8) and x ≡ 8 (mod 9)\n    congruences = ((5, 8), (8, 9))\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    crt_solution = solve_congruence(*congruences)\n\n    # Loop through the solutions to find one within the desired range\n    ans, modulo = crt_solution\n    while ans <= 100:\n        ans += modulo\n\n    return ans\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of blue balls be x\n    blue_balls = symbols('blue_balls')\n\n    # Total balls in the bag is 4 red + x blue\n    total_balls = 4 + blue_balls\n\n    # The probability of both balls being red is the probability of picking one red ball\n    # and then another red ball without replacement\n    # P(both red) = (4/total) * (3/(total-1))\n    probability_both_red = (4 / total_balls) * (3 / (total_balls - 1))\n\n    # Set up the equation based on the given probability fraction\n    equation = Eq(probability_both_red, 2/7)\n\n    # Solve the equation for the number of blue balls\n    solution = solve(equation, blue_balls)\n\n    # Return the number of blue balls (as an integer, since we can't have a fraction of a ball)\n    return int(solution[0])\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial as fact\n    \n    # Calculate the factorial of a number\n    def factorial(n):\n        return fact(n)\n    \n    # Calculate permutations\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # There are 3 girls, so we treat them as a single entity first.\n    # Together with 3 teachers, we have 4 entities to arrange.\n    entities = 4\n\n    # There are 3 boys to arrange between the girls and teachers.\n    # Since no two boys can stand adjacent, we have 5 possible positions.\n    # (B represents possible boy positions in the arrangement)\n    # Example: GGG_T_T_T -> _GGG_T_T_T_ -> B_GGG_B_T_B_T_\n    boy_positions = entities + 1\n    \n    # Boys can be permuted in 3! ways.\n    # Girls can be permuted in 3! ways.\n    # Teachers can be permuted in 3! ways.\n    # The entity that contains the 3 girls can be placed in 4! places.\n    ans = permutations(boy_positions, 3) * factorial(3) * factorial(3) * factorial(3)\n    \n    return ans\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    sequence = [6, 11, 16, 21, 26, 31, 36, 41]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # We have the following relationships:\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # To find out how many chickens weigh as much as 1 dog,\n    # we just need to multiply the number of rabbits equivalent to a dog\n    # by the number of chickens equivalent to a rabbit.\n    chickens_per_rabbit = 2\n    rabbits_per_dog = 8\n    \n    # Calculate the number of chickens that weigh as much as 1 dog\n    chickens_per_dog = chickens_per_rabbit * rabbits_per_dog\n    return chickens_per_dog\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let's assume the total number of slices in the cake be x.\n    # According to the problem, 3/5 of the cake is eaten, so 2/5 is left.\n    # From the 2/5 of the cake, Terry gave 2 slices to her friends and then there were 4 slices left.\n    # This means that 2/5 of the cake is equal to 2 (slices given to friends) + 4 (slices left) = 6 slices.\n    # Therefore, 2/5 * x = 6.\n    # Solving for x we get x = 6 / (2/5) = 6 * (5/2) = 15.\n    # Terry had 15 slices of cake at first.\n\n    # Number of slices given to friends and left.\n    slices_given_and_left = 2 + 4\n\n    # Fraction of the cake left.\n    fraction_left = 2 / 5\n\n    # Total slices of the cake.\n    total_slices = slices_given_and_left / fraction_left\n\n    return int(total_slices)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for rates of work for Mike and Danny\n    mike, danny = symbols('mike danny')\n\n    # Equation representing both Mike and Danny finishing the job together in 10 hours\n    equation1 = Eq(mike + danny, 1 / 10)\n    \n    # Mike works for 8 hours and danny works for 13 hours\n    equation2 = Eq(mike * 8 + danny * 13, 1)\n\n    # Solving both equations to find the rates of work for Danny and Mike\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    # The time for Danny to finish the job by himself is the reciprocal of his rate of work\n    time_for_danny = 1 / solutions[danny]\n\n    return time_for_danny\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_options = 2  # 1 soup + 1 no soup option\n    dessert_options = 3  # 2 desserts + 1 no dessert option\n\n    combinations = appetisers * main_courses * soup_options * dessert_options\n\n    return combinations\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef solution():\n    # The prime factorization of 2^27 is just 2 repeated 27 times.\n    # We need to distribute these 27 \"2\"s into 10 digits, such that each digit is non-zero.\n    \n    # We can distribute these \"2\"s to 9 digits first, since the last digit can be calculated \n    # from the multiplication of other 9 digits.\n    \n    # For distributing k identical items into n distinct boxes, we can use the formula of\n    # combinations with repetitions, which is C(n+k-1, k) = (n+k-1)! / (k! * (n-1)!)\n    \n    # To get a 10-digit number, none of the digits can be zero and the digits can only\n    # be 1, 2, 4, or 8, corresponding to factors of 2^0, 2^1, 2^2, or 2^3 respectively.\n    # The 10th digit is fixed once the first nine are chosen.\n    \n    # Let's distribute the 27 \"2\"s to 9 slots (since we can compute the 10th slot), \n    # we are basically putting 27 indistinguishable balls into 9 distinguishable boxes, \n    # where each box can hold from 0 to 27 balls.\n    # This gives us C(27+9-1, 27) = C(35, 27) = C(35, 8) since C(n, k) = C(n, n-k)\n    \n    # C(35, 8) = 35! / (8! * (35-8)!) = 35! / (8! * 27!)\n    \n    # We use this formula to calculate the combinations\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    count = combinations(35, 8)\n    \n    # But we must also consider the cases where we put more than three \"2\"s in a single digit, which \n    # is impossible because the digit can't be greater than 9. So we need to exclude cases with 2^4 (16)\n    # or more \"2\"s in a single place.\n    \n    # We can exclude cases by subtracting combinations where one digit takes 4 or more \"2\"s.\n    # For example, having a digit with a factor of 2^4 means that now we need to distribute\n    # the remaining 23 \"2\"s to 9 digits, but one of those digits now has a minimum of 2^4.\n    # To correct for this, we can force one digit to be at least 2^4, thereby choosing 8 positions from\n    # remaining 27 \"2\"s to be distributed leading to C(27+8-1, 27) = C(34, 27) = C(34, 7).\n    \n    # After forcing one digit to be at least 2^4, the rest of the digits cannot be 8, because it would \n    # exceed the value of 9, so we can only distribute 27 \"2\"s into 1s, 2s, and 4s (3 options).\n    \n    # Since this is a multi-step correction, we need to consider that we have 9 options for which digit to\n    # hold the 2^4, and the remaining places to distribute the 27 \"2\"s:\n    # So we need to subtract the cases where at least one digit holds a factor of 2^4 or higher.\n    \n    # We need to consider these corrections for 2^4, 2^5, 2^6, and 2^7 (digits being 16, 32, 64, 128).\n    for power in range(4, 8):\n        invalid_combinations = combinations(27 - power + 8 - 1, 27 - power)\n        count -= invalid_combinations * combinations(9, 1)  # For each power, choose 1 digit out of 9 \n    \n    return count\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    numbers = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    return sum(numbers)\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    min_pencils_in_a_case = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils_in_a_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # define the new operation according to the problem statement\n    def new_operation(a, b):\n        # calculate the sum from a to (a + b) inclusive\n        return sum(range(a, a + b + 1))\n\n    # find the value of m such that m ⊕ 10 = 66\n    # we need to check each value of m until the condition is satisfied\n    # since m ⊕ 10 = 66, we start checking from 1, as m can't be negative\n    m = 1\n    while True:\n        if new_operation(m, 10) == 66:\n            return m\n        m += 1\n\n# Get answer by calling solution function\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The common difference is negative\n\n    # The sequence becomes negative when the nth term is less than 0.\n    # a_n = a_1 + (n - 1) * d, a_n < 0\n    # 50 + (n - 1) * (-4) < 0\n    n = (0 - first_term) / common_difference + 1\n\n    return int(n) - 1  # Subtract 1 since we want the term before the first negative\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    cost_of_folder = 2.89\n    money_received = 4/5\n\n    remaining_money = initial_amount - cost_of_folder + money_received\n    \n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # The smallest 4-digit square root is 32, and the largest is 99\n        number = i**2\n        str_num = str(number)\n        if len(str_num) == 4 and str_num[0] == str_num[1] and str_num[2] == str_num[3]:\n            return number\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    factor_5 = 0\n    while True:\n        n += 1\n        current = n\n        while current % 5 == 0:\n            factor_5 += 1\n            current //= 5\n        if factor_5 == 28:\n            break\n    return n\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    # Place value of the first 3 (from left to right) is in the tens of thousands place (10,000)\n    first_3_place_value = 3 * 10000  \n    \n    # Place value of the second 3 is in the hundreds place (100)\n    second_3_place_value = 3 * 100  \n\n    # Calculate the difference between two place values\n    place_value_difference = abs(first_3_place_value - second_3_place_value)  \n\n    return place_value_difference\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance = 3\n    # subtract corners because they are counted twice when calculating per side\n    return (side_length // distance) * 4 - 4\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # They are approaching each other at the sum of their speeds\n    combined_speed = tim_speed + bob_speed\n\n    # Distance covered until there are 130km between them\n    distance_covered = initial_distance - remaining_distance\n\n    # Time taken to cover that distance\n    time_taken = distance_covered / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Each digit can appear at most 4 times to avoid painting the squares red.\n    max_appearance = 4\n\n    # With 10 digits 0-9, to minimize the red squares,\n    # we want to use the maximum appearances for as many digits as possible.\n    # Since we have 100 squares, and each digit can appear 4 times without painting,\n    # we use 4 appearances for 9 digits to fill 36 squares.\n    used_squares = max_appearance * 9\n\n    # The remaining squares after using 9 digits 4 times each\n    remaining_squares = 100 - used_squares\n\n    # The remaining squares will be painted red regardless of the digit we choose\n    # because we will have to use at least one digit 5 or more times.\n    red_squares = remaining_squares\n\n    return red_squares\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    # Define the distance climbed per day and the slide back at night\n    climb_day = 3\n    slide_night = 1\n    daily_progress = climb_day - slide_night\n    burrow_height = 11\n    days = 0\n    total_climbed = 0\n\n    while True:\n        days += 1  # Increment the day\n        total_climbed += climb_day  # Snail climbs during the day\n\n        # Check if the snail has climbed out of the burrow\n        if total_climbed >= burrow_height:\n            break  # Snail has made it out, exit loop\n\n        total_climbed -= slide_night  # Snail slides down at night\n\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    ans = lcm(akon_cycle, ben_cycle, cris_cycle)\n    \n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                sequence = list(perm)\n                sequence.sort()\n                if all(int(sequence[i])+1 == int(sequence[i+1]) for i in range(len(sequence)-1)):\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_part = [8, 3, 5, 4]\n    sum_of_digits = 0\n\n    for i in range(84):\n        sum_of_digits += recurring_part[i % 4]\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie_ran = 15\n    jenny_ran = 10\n    jason_ran = 8\n\n    total_distance = eddie_ran + jenny_ran + jason_ran\n    number_of_people = 3\n\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Each interval between strikes takes 43 seconds minus 18 seconds (6 * 3 for each strike)\n    # divided by 5 (because there are 5 intervals between 6 strikes)\n    interval = (43 - (6 * 3)) / (6 - 1)\n    \n    # The total time for 12 strikes would be the duration of 11 intervals plus the duration of the 12 strikes\n    total_time = (12 - 1) * interval + (12 * 3)\n    \n    return int(total_time)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    for m in range(1, 1000):  # Set a reasonable upper limit for search\n        original_students = m ** 2 + 5  # Number of students before 18 joined\n        n = (original_students + 18) ** 0.5  # Check for perfect square after 18 joined\n        \n        # Check if n is an integer, meaning we found a perfect square\n        if n.is_integer() and n - m == 1:\n            return original_students  # If so, we have found the original number of students\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # Total pens minus one pen for each kid to ensure they get at least one\n    pens_left = 20 - 6\n    # The problem is equivalent to placing 5 dividers between pens to split them\n    dividers = 5\n    \n    # The number of ways to arrange the pens and dividers\n    ways = factorial(pens_left + dividers) // (factorial(pens_left) * factorial(dividers))\n    \n    return ways\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * (len(numbers) + 1)\n    fifth_number = total_sum - sum(numbers)\n\n    return fifth_number\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # If six people can build a bridge in 15 hours,\n    # then it takes six people 15 hours to build a bridge.\n    work_done_by_six_people = 6 * 15  # This is the total work done by six people in 15 hours\n\n    # To find out how many people are needed to build the bridge in 2 hours,\n    # we assume that number to be x and equate the total work done.\n    # x people * 2 hours = 6 people * 15 hours\n    # Therefore, x = (6 * 15) / 2\n\n    num_people_needed = work_done_by_six_people / 2  # Number of people needed to build the bridge in 2 hours\n\n    return num_people_needed\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    minutes_per_quiz = 30\n    quizzes_total = 4\n\n    total_minutes = minutes_per_quiz * quizzes_total\n    hours = total_minutes / 60\n\n    return hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit = 9 * 10 * 10  # all possible three-digit numbers\n    no_zero = 9 * 9 * 8  # three-digit numbers with no zeros\n    \n    at_least_one_zero = total_three_digit - no_zero\n    \n    return at_least_one_zero\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 300:\n        return number\n        number += 5 * 6 * 7\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Ones place - greatest odd number less than 10 is 9\n    ones = 9\n    \n    # The sum of the digits in the hundreds place and tens place is 13.\n    # To create the smallest 4-digit number, we want the smallest digit in the thousands place.\n    # As all digits are different and we already have 9, we'll start checking from 1 onwards.\n    for thousands in range(1, 10):\n        if thousands == ones:  # Thousands place cannot be 9 as it is taken by ones.\n            continue\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                # Check if all digits are different and the sum of hundreds and tens equals 13\n                if thousands != hundreds and thousands != tens and ones != hundreds and ones != tens and hundreds != tens:\n                    if hundreds + tens == 13:\n                        # Found the smallest 4-digit number with the given conditions\n                        return int(str(thousands) + str(hundreds) + str(tens) + str(ones))\n                        \n# The final number has to be returned using the variable 'ans'\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let Jerry's speed be x and Kevin's speed is 1.5x\n    # Total time taken by both to meet is the same\n    # Let the distance covered by Jerry be d_jerry and by Kevin be d_kevin\n    # Since the total distance is 225 miles, d_jerry + d_kevin = 225\n    # The time taken by Jerry to cover d_jerry is d_jerry / x\n    # The time take by Kevin to cover d_kevin is d_kevin / (1.5x)\n    # Since both time are equal, we have the equation: d_jerry / x = d_kevin / (1.5x)\n    # Simplify it, we get: 1.5 * d_jerry = d_kevin\n    \n    # Substitute d_kevin in terms of d_jerry into the total distance equation\n    # d_jerry + 1.5 * d_jerry = 225\n    # 2.5 * d_jerry = 225\n    # d_jerry = 225 / 2.5\n    d_jerry = 225 / 2.5\n\n    return d_jerry\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30   # in meters per second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age_now = 10\n    uncle_age_future = 40\n    age_difference = uncle_age_future - doris_age_now\n    uncle_age_now = doris_age_now + age_difference\n    \n    return uncle_age_now\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, a = symbols('banana apple')\n\n    equation1 = Eq(2*b + 3*a, 1.50)\n    equation2 = Eq(3*b + 2*a, 1.45)\n\n    solutions = solve((equation1, equation2), (b, a))\n\n    return float(solutions[b] + solutions[a])\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n    \n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    # Amanda has 4 times as many stickers as Belinda\n    equation1 = Eq(amanda, 4 * belinda)\n    # Lisa has 11 less stickers than Amanda\n    equation2 = Eq(lisa, amanda - 11)\n    # 3 girls have 43 stickers in total\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n\n    space_between_pictures = (total_width - (number_of_pictures * picture_width)) / (number_of_pictures - 1)\n    distance_from_center = (space_between_pictures + picture_width) / 2\n\n    return distance_from_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 100  # Assume the original height is 100% to simplify\n    current_height = initial_height\n    bounce_count = 0\n    target_height = initial_height * 25 / 100  # Target height is 25% of the initial height\n\n    while current_height >= target_height:\n        current_height *= 75 / 100\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for number in range(1, 16):\n        if number < 8 and 8 + number == 15:\n            return number\n    return None\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    start_num = 5\n    end_num = 20\n\n    total_numbers = end_num - start_num - 1\n\n    return total_numbers\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    # Setup the equation based on the given information\n    equation = Eq(original_money - 200 - (2/7) * (original_money - 200), (1/3) * original_money)\n\n    # Solve the equation\n    solutions = solve(equation, original_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "from math import factorial\n\ndef solution():\n    # Treat Tom and Harry as one person since they must stand together\n    remaining_students = 5  # 7 - 1 (Tom and Harry) - 1 (Ronda)\n\n    # Now we have 6 \"entities\": 5 individual students + (Tom and Harry)\n    # The number of ways to arrange these 6 entities is 6!\n    arrangement_entities = factorial(remaining_students + 1)\n\n    # But within the (Tom and Harry) entity, Tom and Harry can be arranged in 2! ways\n    arrangement_tom_harry = factorial(2)\n\n    # Ronda must stand at the furthest right, so it doesn't change the number of arrangements\n\n    # Total arrangements is the product of the arrangements of entities and Tom and Harry's internal arrangement\n    total_arrangements = arrangement_entities * arrangement_tom_harry\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 0.05\n    second_interest_rate = 0.08\n    first_period = 3\n    second_period = 2\n    \n    # Calculate the investment amount after the first period\n    after_first_period = initial_investment * (1 + first_interest_rate) ** first_period\n    \n    # Calculate the investment amount after the second period\n    total_amount = after_first_period * (1 + second_interest_rate) ** second_period\n    \n    # Round the result to the nearest tenth\n    ans = round(total_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    # If a number is rounded to the nearest 100, its last two digits should be '00'\n    # The highest price that still rounds down to $125,000 would end in '49'\n    # So we find the number just before that which ends in '50'\n    highest_before_round = (rounded_price - 1) - 49\n    return highest_before_round\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let 's' be the usual speed (km/h), 'd' be the distance (km), and 't' be the usual time (h)\n    s, d, t = symbols('s d t')\n    \n    # usual time to cover the distance\n    eq1 = Eq(d, s * t)\n    \n    # time taken when speed is increased by 20% (which is s * 1.2) and reaches 1 hour earlier (t - 1)\n    eq2 = Eq(d, s * 1.2 * (t - 1))\n    \n    # time taken to travel first 200 km at usual speed s\n    eq3 = Eq(200, s * (200 / s))\n    \n    # remaining distance is (d - 200) km, and remaining time is (t - 200/s)\n    # for the remaining distance, the speed is increased by 25% (which is s * 1.25) \n    # and reaches 12 minutes (1/5 hour) earlier\n    eq4 = Eq(d - 200, s * 1.25 * (t - 200/s - 1/5))\n    \n    # solve the equations for 'd'\n    solutions = solve((eq1, eq2, eq3, eq4), (s, d, t))\n    \n    # 'd' is the distance between city P to city Q\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total_score = 4 * 89\n    target_average = 95\n\n    extra_tests = 0\n    while True:\n        extra_tests += 1\n        new_total_tests = 4 + extra_tests\n        new_total_score = new_total_tests * target_average\n        if new_total_score >= current_total_score + extra_tests * 100:\n            break\n    return extra_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - (distance1 + distance2)\n    \n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    # Let's assume the uncle's current age is x.\n    # By the time Doris reaches her uncle's current age (x),\n    # her uncle will be 40 years old.\n    # We know that the difference in age between Doris and her uncle\n    # will remain the same, so we use that difference (x - doris_age)\n    # to determine the uncle's age when Doris is x years old (x + (x - doris_age)).\n    # We can set up the equation as:\n    # x + (x - doris_age) = uncle_future_age\n    uncle_age = (uncle_future_age + doris_age) // 2\n    return uncle_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    # Original ratio of sheep to cows\n    equation1 = Eq(sheep, (5/7) * cows)\n\n    # Situation after adding 21 sheep and removing 7 cows\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    hours_diff = 9 - 8\n    minutes_diff = 25 - 30\n\n    n = (hours_diff * 60) + minutes_diff\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 1 / 6\n    b_efficiency = a_efficiency / 2\n    combined_efficiency = a_efficiency + b_efficiency\n    total_days = 1 / combined_efficiency\n    return total_days\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum = 22\n    target_sum = 30\n    years_until_target = target_sum - current_sum\n    return years_until_target\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    cost_haribo = 50\n    cost_mamee = cost_haribo - 30\n    cost_big_jelly = 6 * cost_mamee\n    return cost_big_jelly / 100\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    anna_fraction = 3 / 8\n    belle_fraction = 1 / 4\n    anna_belle_more = 90\n\n    # Anna and Belle total fraction\n    anna_belle_total_fraction = anna_fraction + belle_fraction\n    # Cathy and Dawn total fraction\n    cathy_dawn_total_fraction = 1 - anna_belle_total_fraction\n\n    # Equation representing the difference between Anna and Belle's candies and Cathy and Dawn's candies\n    equation = Eq(anna_belle_total_fraction * total_candies - cathy_dawn_total_fraction * total_candies, anna_belle_more)\n\n    # Solve the equation\n    solution = solve(equation, total_candies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18\n    denominator_original = 36\n    denominator_new = 32\n\n    # Since 18/36 simplifies to 1/2, we want to find what number gives us this same ratio with a denominator of 32\n    # 1/2 = x/32 -> x = 32/2\n    ans = (numerator / denominator_original) * denominator_new\n\n    return int(ans)\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n\n    # Let's start from the end and work our way to the beginning, using inverse operations\n\n    # Joel removes 2 less than half of the remaining plants, so we do the inverse\n    remaining_plants = (remaining_plants + 2) * 2\n\n    # Valerie removes 3 less than half of the remaining plants, inverse operation again\n    remaining_plants = (remaining_plants + 3) * 2\n\n    # Ethan removes 1 less than half of the plants, inverse operation\n    remaining_plants = (remaining_plants + 1) * 2\n\n    # Now remaining_plants holds the initial number of plants\n    return remaining_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fishballs = symbols('initial_fishballs')\n\n    sold_in_morning = 3/4 * initial_fishballs\n    remaining_after_morning = initial_fishballs - sold_in_morning\n    sold_in_afternoon = 1/3 * remaining_after_morning\n    remaining_after_afternoon = remaining_after_morning - sold_in_afternoon\n\n    made_more = 506\n\n    equation = Eq(remaining_after_afternoon + made_more, 2 * initial_fishballs)\n\n    result = solve(equation, initial_fishballs)\n\n    return result[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - 2 * vanilla / 3) + (blueberry - 7 * blueberry / 9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_cupcakes_sold = solutions[chocolate] / 6\n\n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) / 2\n    return int(books_to_give)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boy_to_girl_ratio = 2 / 7\n    girls = boys / boy_to_girl_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, mod = solve_congruence(*congruences)\n    \n    # Since we have a modulo of 3*5*7=105 for the solution, we find the smallest number in the range that satisfies this\n    ans = num\n    while ans < 400:\n        ans += mod\n    if ans > 500:\n        raise ValueError(\"No solution in the range [400, 500]\")\n\n    return ans\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(36)\n    return len(factors)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_apples = (green_apples_per_pig + red_apples_per_two_pigs) * pigs\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * 1/4\n    grown_seeds = total_seeds - died_seeds\n    return grown_seeds\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    cycle = 2  # It takes 2 days for one complete deposit-spend cycle\n    daily_deposit = 10\n    daily_spend = 8\n\n    # Calculate how many complete cycles occur in 15 days\n    complete_cycles = days // cycle\n\n    # Calculate the remaining days after complete cycles\n    remaining_days = days % cycle\n\n    # Calculate the pocket money after complete cycles\n    money_after_cycles = initial_amount + (daily_deposit - daily_spend) * complete_cycles\n\n    # If there are remaining days, account for the final deposit (if it exists)\n    money_after_all_days = money_after_cycles\n    if remaining_days > 0:\n        money_after_all_days += daily_deposit\n\n    return money_after_all_days\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    pencils, _ = solve_congruence(*congruences)\n\n    return pencils\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    # Let the number Michael thought of be x\n    # According to the problem: (2x + 178) / 4 = 54\n    # Solving for x will give us the original number\n    final_answer = 54 * 4 - 178\n    ans = final_answer / 2\n    return ans\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    number_of_students = 5\n    average_apples = total_apples / number_of_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_orig, charlotte_final = symbols('marry alexis charlotte_orig charlotte_final')\n\n    equation1 = Eq(marry, 7/5 * alexis)\n    equation2 = Eq(charlotte_final, charlotte_orig + 0.2 * (marry + alexis))\n    equation3 = Eq(charlotte_final, 1.8 * charlotte_orig)\n    equation4 = Eq(marry - 0.2 * marry, charlotte_final + 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_orig, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # Total ways without restriction\n    opposite_ways = 2 * 1 * 2 * 1  # Ways where Claire and Tony sit opposite\n\n    # Subtract the opposite ways from total ways to get the desired answer\n    ans = total_ways - opposite_ways\n    return ans\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    fifth_number = all_numbers[4]\n    return fifth_number\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's transaction: 1 banana + 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n\n    # Emily's transaction: 1 banana + 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    # We need to find the smallest number of test tubes that can test 1000 bottles\n    # by creating a combination of bottles in each test tube so that the poison bottle \n    # can be identified by which test tubes show a color change after 6 hours.\n\n    # This is a binary representation problem where each bottle can be either 0(no poison) or 1(poison).\n    # We are looking for the minimum number of binary digits(bits) needed to uniquely identify each bottle.\n    # The number of unique combinations from n bits is 2^n.\n\n    # We will use logarithm to find the minimum number of bits needed to represent 1000 unique states(bottles).\n    from math import log, ceil\n\n    # Calculate the minimum number of bits 2^n >= 1000.\n    num_test_tubes = ceil(log(1000, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36  # Total distance covered by the chairs\n    num_chairs_initial = 10  # Initial number of chairs\n    num_chairs_final = 7  # Final number of chairs after removing 3\n\n    # The distance between each chair initially\n    distance_between_chairs_initial = total_distance / (num_chairs_initial - 1)\n\n    # The distance between each chair after removing 3 chairs\n    distance_between_chairs_final = distance_between_chairs_initial * \\\n                                    (num_chairs_initial - 1) / (num_chairs_final - 1)\n\n    return distance_between_chairs_final\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Each brother has at least two books, so we start from 2 books for each and distribute the remaining 4 books\n    for brother1 in range(2, 9): # Brother1 can have from 2 to 8 books\n        for brother2 in range(2, 9): # Brother2 can have from 2 to 8 books\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2: # Make sure Brother3 also has at least two books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Define a recursive function to calculate the ways to climb n steps\n    def count_ways(n, avoid_step):\n        # Base cases\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == avoid_step:\n            return 0\n\n        # Recursive call\n        return count_ways(n-1, avoid_step) + count_ways(n-2, avoid_step) + count_ways(n-3, avoid_step)\n    \n    # Number of steps to avoid (5th step is muddy)\n    avoid_step = 5\n    # Total number of steps (10 steps in the problem)\n    total_steps = 10\n    \n    ans = count_ways(total_steps, avoid_step)\n    return ans\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    \n    original_speed = distance / 8\n    increased_speed = distance / 7\n\n    equation = Eq(increased_speed, original_speed + 5)\n\n    solutions = solve(equation, distance)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    res = 768 / 3\n    return res\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    return min_boxes\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n\n    median_index = len(sequence) // 2\n    # For an odd-length sorted list, the median is the middle element\n    if len(sequence) % 2 != 0:\n        ans = sequence[median_index]\n    else:\n        # For an even-length sorted list, the median is the average of the two middle elements\n        ans = (sequence[median_index - 1] + sequence[median_index]) / 2\n        \n    return ans\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorization of 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    # The prime factors of 7007 are now stored in the list 'prime_factors'\n    \n    # Finding 2-digit multiples of 7 from the prime factors\n    first_multiple = None\n    second_multiple = None\n    for i in range(len(prime_factors)):\n        for j in range(i+1, len(prime_factors)):\n            potential_multiple = prime_factors[i] * prime_factors[j]\n            if 10 <= potential_multiple <= 99:  # Check if it's a 2-digit number\n                if first_multiple is None:\n                    first_multiple = potential_multiple\n                else:\n                    # Since a multiple of 7 multiplied by another multiple of 7 is \n                    # also a multiple of 7, we should ensure both numbers are multiples of 7\n                    if potential_multiple % 7 == 0:\n                        second_multiple = potential_multiple\n                        break\n\n    # If two valid multiples were found, calculate their sum\n    if first_multiple and second_multiple:\n        return first_multiple + second_multiple\n    else:\n        return None\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    # Given equation: (x + 6) / 3 = 5\n    # Multiplying both sides of equation by 3 to get rid of the denominator\n    # x + 6 = 5 * 3\n    ans = (5 * 3) - 6\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the fourth angle be x\n    # Then one of the other angles is 5x\n    # Two angles are right angles (90 degrees each)\n    # Sum of angles in a quadrilateral is 360 degrees\n    x = symbols('x')\n    equation = Eq(90 + 90 + 5*x + x, 360)\n\n    # Solve for x\n    angle_fourth = solve(equation, x)[0]\n    largest_angle = 5 * angle_fourth\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    checkin_per_entrance_per_minute = 25\n    \n    # With one entrance\n    entrance = 1\n    no_line_time_single = 16\n    visitors_checked_single = no_line_time_single * checkin_per_entrance_per_minute * entrance\n    \n    # With two entrances\n    entrance = 2\n    visitors_checked_double = checkin_per_entrance_per_minute * entrance\n    no_line_time_double = visitors_checked_single / visitors_checked_double\n    \n    return int(no_line_time_double)\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    speed_miles_per_hour = 65\n    time_hours = 15 / 60  # converting 15 minutes to hours\n    distance_miles = speed_miles_per_hour * time_hours\n    miles_to_km_factor = 1.60934  # conversion factor from miles to kilometers\n\n    distance_km = distance_miles * miles_to_km_factor\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of frogs at the beginning be 'f' and the number of dragonflies be 'd'\n    f, d = symbols('f d')\n\n    # The initial amount of frogs is 9 more than that of dragonflies\n    equation1 = Eq(f, d + 9)\n\n    # After the magic show, there are 11 frogs and 10 dragonflies\n    equation2 = Eq(f - d, 11 - 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    total_distance = 16\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies / cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # Number of cookies is 24 more than the number of muffins\n    equation1 = Eq(cookies, muffins + 24)\n\n    # Sold 3/4 of her muffins\n    muffins_left = muffins - 3/4 * muffins\n\n    # Sold 5/8 of her cookies\n    cookies_left = cookies - 5/8 * cookies\n\n    # She had 74 cookies and muffins left in total\n    equation2 = Eq(muffins_left + cookies_left, 74)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    # Return the number of cookies she baked at first\n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    max_val = 999  # Greatest number with 3 digits\n    ans = max_val - (max_val % 25)  # Greatest multiple of 25 less than or equal to 999\n    return ans\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    met_ticket_price = 4\n    coffee_price = 3\n    entry_fee = 8\n    \n    # Total cost per person (including Richard)\n    total_cost_per_person = met_ticket_price * 2 + coffee_price + entry_fee\n    \n    # Calculate how many people can go with $40 including Richard\n    number_of_people = 40 // total_cost_per_person\n    \n    # Number of friends Richard can treat (excluding himself)\n    number_of_friends = number_of_people - 1 \n    \n    return number_of_friends\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    speed_ratio_driver_to_cyclist = 13 / 2\n    extra_time_cyclist = 143\n\n    # Since time = distance/speed, and the distance is constant for both,\n    # the time taken by the cyclist will be (13/2) times that of the driver.\n    # Let's denote the time taken by the driver as 't'.\n    # So time taken by the cyclist will be 't + 143 minutes'.\n\n    # The ratio of times taken (cyclist's time / driver's time) will be reverse of the speed ratio.\n    # time_cyclist / time_driver = 2 / 13\n    # (t + 143) / t = 2 / 13\n\n    # Now, we solve for 't':\n    time_driver = (143 * 13) / (2 - 13) # Rearranging the above equation\n\n    return abs(time_driver) # Since time can't be negative, we take the absolute value\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Sum of cubes of first n natural numbers formula: (1 + 2 + ... + n)^2 \n    n = 12\n    sum_of_naturals = n * (n + 1) // 2\n    sum_of_cubes = sum_of_naturals ** 2\n\n    # Calculate only cubes from 2 to 12\n    sum_of_cubes_2_to_12 = sum_of_cubes - 1**3\n\n    return sum_of_cubes_2_to_12\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = (48 - 47) + (46 - 45) + (44 - 43) + (42 - 41) + 40\n    return ans\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must be divisible by 9.\n    # Additionally, since the number is even and not divisible by 5, A cannot be 5 or any other odd digit.\n    \n    # Let's calculate the fixed sum of the digits excluding the variable A.\n    fixed_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    \n    # Now we check for A in the range of valid even digits.\n    for A in range(0, 10, 2):  # A needs to be even, start at 0, end at 8, step by 2.\n        if (fixed_sum + 3 * A) % 9 == 0:\n            # If the sum including A is divisible by 9, we've found our A.\n            return A\n    return None\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    cost_sausage_rolls = 4 * 24\n    cost_hotdogs = 5 * 81\n    cost_drinks = 7 * 20\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is true, then all statements including statement 3 would be true, but that contradicts statement 1.\n    # Moreover, if any of the statements from 2 to 5 were true, then more than one statement would be true,\n    # which again would contradict the premises that only one statement is true.\n    # If statement 5 is correct, then statement 2 would also be correct, as both would imply that none of the other statements are correct.\n\n    # Hence, if we assume that only one statement is true, the only statement that can be true without causing a contradiction is statement 3.\n    return 3\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n    # Before flipping any coins, a quarter of them are showing heads\n    # After flipping two coins, a third of them are showing heads\n    equation = Eq(1/4*x + 2, 1/3*x)\n\n    # Solve for x\n    num_coins = solve(equation, x)\n\n    return num_coins[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3  # total number of shows\n    # calculate the permutations of all shows treating the comedy shows\n    # as one unit (since they cannot be consecutive). So we have 5 singing\n    # shows + 1 comedy unit.\n    total_permutations = factorial(total_shows - 2)\n\n    # calculate the permutations of comedy shows amongst themselves.\n    # This will be used to subtract the unwanted scenarios where comedy shows are\n    # consecutive.\n    comedy_permutations = factorial(3)\n\n    # The number of ways the comedy shows can be consecutive is the number\n    # of permutations of 2 consecutive comedy shows with the rest.\n    consecutive_permutations = factorial(total_shows - 1)\n\n    # The final answer is total permutations of all shows minus the permutations\n    # where comedy shows are consecutive.\n    ans = total_permutations - consecutive_permutations\n\n    return ans\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    total_ways = trains + cars + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 36)\n\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    meters_per_day = total_length / total_days\n    return meters_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_value = values[len(values)//2]\n    return middle_value\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let's denote the original number as x.\n    # According to the problem, we have: (x / 2) - 9 = 12\n    # Now, we just need to solve for x.\n\n    # Rearrange the equation: x / 2 = 12 + 9\n    x_over_two = 12 + 9\n\n    # Multiply both sides by 2 to get x\n    x = x_over_two * 2\n\n    return x\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Each recurring decimal consists of a repeating single digit\n    # after a certain number of zeros (1 to 5 repeated digits)\n\n    # Digit repetitions and the sum for each complete set\n    # 2       -> sum 2\n    # 03      -> sum 3\n    # 004     -> sum 4\n    # 00005   -> sum 5\n    # 000006  -> sum 6\n    # Total sum of one full cycle = 20\n    # There are 15 digits in a full cycle\n    full_cycle_sum = 20\n    full_cycle_length = 15\n\n    # The number of complete cycles in 2100 digits\n    complete_cycles = 2100 // full_cycle_length\n\n    # Sum of all complete cycles\n    total_sum = complete_cycles * full_cycle_sum\n\n    # Now, we need to calculate the sum of the remaining digits\n    remaining_digits = 2100 % full_cycle_length\n\n    # We create a string of the repeating pattern '203040506'\n    repeating_pattern = \"203040506\"\n    repeated_sequence = \"\"\n\n    # We repeat the pattern to ensure it covers the remaining digits\n    while len(repeated_sequence) < remaining_digits:\n        repeated_sequence += repeating_pattern\n\n    # We only consider up to the remaining digits\n    # and sum the ASCII values converted to integers\n    for digit in repeated_sequence[:remaining_digits]:\n        total_sum += int(digit)\n\n    return total_sum\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people to arrange and the table is circular,\n    # so we fix one person's position and arrange the remaining 5.\n    ans = factorial(5)  # 5! since one person's position is fixed (5 seats to arrange).\n\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    min_even = float('inf')  # Start with a very large number\n    for perm in permutations(digits):\n        number = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        if perm[3] % 2 == 0 and number < min_even:  # Check for even and smallest\n            min_even = number\n    return min_even\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    \n    quarters_in_total_dollars = total_dollars * quarters_in_one_dollar\n    \n    return int(quarters_in_total_dollars)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    total_spent = (10 - 3.88) * 100  # Convert pounds to pence\n    chocolate_cost = 72\n    balloon_cost = 20\n\n    # Total amount spent on balloons\n    spent_on_balloons = total_spent - chocolate_cost\n\n    # Number of balloons\n    num_balloons = spent_on_balloons // balloon_cost\n\n    return int(num_balloons)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_meters = 2000\n\n    percentage_of_total = (percentage / 100) * total_meters\n\n    return percentage_of_total\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    total_students = 17\n    kayak_capacity = 4\n\n    num_kayaks = -(-total_students // kayak_capacity)  # Ceiling division\n\n    return num_kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n\n    # Let the cost of one cupcake be x\n    # Let the cost of one slice of pizza be y\n    # 3y = 2x => y = (2/3)x\n    # He bought 5 cupcakes and 6 slices of pizza\n    # 5x + 6(2/3)x = money_spent\n    # (5 + 4)x = money_spent\n    # 9x = money_spent\n    # x = money_spent / 9\n\n    cost_per_cupcake = money_spent / 9\n    cupcakes_bought_with_leftover = money_left // cost_per_cupcake\n\n    return int(cupcakes_bought_with_leftover)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4*sqrt(3)\n    x = symbols('x')\n    equation = Eq(3*a, sqrt(3*x))\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    expression1 = (4 + 2) * 13\n    expression2 = 4 + (2 * 13)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Since the youngest three have ages that add up to 42 and they were\n    # born in consecutive years, we treat their ages as an arithmetic sequence\n    # with a common difference of 1 year. If we call the age of the youngest dwarf y,\n    # then the ages are y, y+1, and y+2. Their sum is 3y + 3.\n\n    # Sum of the youngest three dwarfs' ages is given to be 42\n    sum_youngest_three = 42\n\n    # Since the dwarfs are born in consecutive years, the terms of their ages\n    # will be in an arithmetic progression. The age of the fourth dwarf in this\n    # progression will be the middle term, which is the average of the youngest\n    # three and the oldest three.\n\n    # Calculate the middle term (age of the fourth dwarf)\n    middle_term = sum_youngest_three / 3\n\n    # So, ages of the oldest three can be represented as\n    # (middle_term + 1), (middle_term + 2), and (middle_term + 3)\n\n    # Now calculate the sum of the oldest three dwarfs' ages\n    sum_oldest_three = (middle_term + 1) + (middle_term + 2) + (middle_term + 3)\n\n    # Simplify the sum to get the answer\n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):  # 199+1 to ensure 199 is included\n        num_str = str(i)\n        if len(set(num_str)) == len(num_str):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) / difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let the total number of steps of the escalator be x.\n    # Let the speed of the escalator be s steps per second.\n\n    # When Peter walks at 1 step per second, he reaches the top in 10 steps.\n    # Therefore, the escalator moves 10s steps in the same time.\n    # We can express this as: x = 10 + 10s ... (1)\n\n    # When Peter walks at 2 steps per second, he reaches the top in 16 steps.\n    # Therefore, the escalator moves 16s steps in the same time.\n    # We can express this as: x = 16 + 16s/2\n    # This simplifies to: x = 16 + 8s ... (2)\n\n    # By equating (1) and (2), we get:\n    # 10 + 10s = 16 + 8s\n    # Simplify to get the value of s:\n    # 2s = 6 -> s = 3\n\n    # Plug the value of s into equation (1) to find x:\n    # x = 10 + 10*3\n    x = 10 + 10*3\n    \n    return x\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    count = 0\n    num = 2\n    while True:\n        # construct the number `num`\n        str_num = '2' + '5' * count\n        int_num = int(str_num)\n        # check if it is a perfect square\n        if (int_num ** 0.5).is_integer():\n            num += 1\n        # break when the number exceeds 25555\n        if int_num > 25555:\n            break\n        count += 1\n    return num - 2  # subtract the initial value and the last increment\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Let x be the number of papers that were cut into three parts\n    # Initially, we have 10 pieces of paper\n    # Each paper that is cut adds 2 more pieces (3 parts - 1 original piece = 2 additional pieces)\n    # We have a total of 16 pieces after cutting\n    \n    # Set up an equation: initial papers + 2 * number of papers cut = final papers\n    # 10 + 2 * x = 16\n    # Solve for x\n    \n    x = (16 - 10) / 2\n    return int(x)\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Calculate the rate per worker\n    rate_per_worker_per_minute = 120 / (6 * 4)\n    \n    # Calculate the number of parts 3 workers can produce in 10 minutes\n    parts_produced_by_3_workers = 3 * rate_per_worker_per_minute * 10\n    \n    return parts_produced_by_3_workers\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Filter out the divisors which when 2240 is divided gives a square number\n    for d in divs:\n        if is_square(2240 // d):\n            return d\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = 0.7 * total_pupils\n    girls_swim = 200\n\n    # Let x be the number of boys\n    boys_cannot_swim_percent = 0.4\n    x = (swim_pupils - girls_swim) / (1 - boys_cannot_swim_percent)\n    girls = total_pupils - x\n\n    return int(girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples / 4\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    percentage_increase = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_series = (n * (n + 1) // 2) ** 2  # Formula for the sum of cubes of first n natural numbers\n    return sum_of_series\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')  # The amount of 10% sugar water needed\n\n    # Equation for the total amount of sugar from both solutions\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solve for x\n    amount_10_percent = solve(equation, x)[0]\n\n    return amount_10_percent\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let's denote the mass of the empty jar as J, and the mass of one chocolate as C.\n    # According to the given, we have two equations:\n    # J + 5C = 185 (1)\n    # J + 17C = 317 (2)\n\n    # By subtracting (1) from (2), we can find the mass of 12 chocolates (17C - 5C):\n    # (J + 17C) - (J + 5C) = 317 - 185\n    # 12C = 317 - 185\n\n    mass_of_12_chocolates = 317 - 185\n\n    # Now we find the mass of one chocolate C by dividing by 12:\n    C = mass_of_12_chocolates / 12\n\n    # We can now use the mass of one chocolate to find the total mass for 10 chocolates:\n    # J + 10C = 185 + (10 - 5) * C\n    # J + 10C = 185 + 5C\n    mass_of_10_chocolates = 185 + 5 * C\n\n    return mass_of_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    number = 200\n    count = 0\n    # We start with divisor 2 (since 1 would imply only one way which is the number itself)\n    # And we check until half of the number\n    for divisor in range(2, number // 2 + 1):\n        if number % divisor == 0:\n            # If the remainder is 0, it means it's a valid way to express the number\n            # as a sum of equal parts.\n            count += 1\n    # Add one more for the number itself (200=200)\n    count += 1\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def otimes(a, b):\n        return a * b - a - b + 1\n\n    return otimes(otimes(2, 3), 4)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n    \n    # Subtract the 4 corner wheat plants which are counted in both dimensions\n    total_wheat_adjusted = total_wheat - 4\n    perimeter = 2 * (length + width)\n\n    # The number of gaps between the wheat plants is the number of plants minus one per side\n    # Since the wheat is spread evenly along the perimeter, we divide the perimeter by the number of gaps\n    num_gaps = total_wheat_adjusted\n    \n    distance_between_wheat = perimeter/num_gaps\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lana, mark = symbols('lana mark')\n    \n    equation1 = Eq(lana + mark, 674)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n\n    solutions = solve((equation1, equation2), (lana, mark))\n    \n    difference = solutions[lana] - solutions[mark]\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    total_stickers_dorothy = 96\n    stickers_ratio_dorothy_timmy = 8\n    extra_stickers_kevin = 45\n\n    stickers_timmy = total_stickers_dorothy // stickers_ratio_dorothy_timmy\n    stickers_kevin = stickers_timmy + extra_stickers_kevin\n\n    return stickers_kevin\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    total_days = 4  # days spent at a friend's house\n    summer_camp = 2 * 7  # 2 weeks for summer camp in days\n\n    remaining_time = total_days + summer_camp\n    total_time_before_camp_and_visit = remaining_time * 2  # because he spent half of the remaining time reading and relaxing\n\n    holiday = total_time_before_camp_and_visit * 2  # because he spent half of it working\n\n    return holiday\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_fish_per_cat = 10  # each cat takes 10 minutes to catch one fish\n    num_cats = 5                # number of cats\n    num_fish = 5                # number of fish to catch\n\n    # Assuming all cats catch fish simultaneously, the time to catch one fish is not affected by the number of cats.\n    # Thus, the time to catch five fish is the same as the time for one cat to catch one fish.\n    time_to_catch_five_fish = time_per_fish_per_cat  # the time doesn't change with the number of cats\n\n    return time_to_catch_five_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    total_length = 2 * (144 + 204) - 4  # Subtract corners\n    number_of_gaps = 116 - 4  # Subtract corners\n    \n    distance = total_length / number_of_gaps\n\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    divided_by_nine = result / 9\n    multiplied_by_four = divided_by_nine * 4\n    subtract_three = multiplied_by_four - 3\n    \n    return subtract_three\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    return more_bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for Gloria and Ellie's rates\n    gloria_rate = symbols('gloria_rate')\n\n    # Equation based on the information provided\n    # Ellie's rate + Gloria's rate = Total work done in 1 week\n    # Ellie can interview 40 people per week, and they finish 200 people in 4 weeks together\n    equation = Eq(40 + gloria_rate, 200 / 4)\n\n    # Solve for Gloria's rate\n    gloria_rate_value = solve(equation, gloria_rate)[0]\n\n    # Calculate the time it would take for Gloria to finish interviewing by herself\n    time_gloria = 200 / gloria_rate_value\n\n    return time_gloria\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, C, E, F = perm\n        if A == 0 or E == 0: # skip if the numbers do not form a valid 6-digit number\n            continue\n        ABCDEF = 100000 * A + 10000 * 2 + 1000 * C + 100 * 0 + 10 * E + F\n        EFABCD = 100000 * E + 10000 * F + 1000 * A + 100 * 2 + 10 * 0 + C\n        if 5 * ABCDEF == 6 * EFABCD:\n            return 1000 * F + 100 * A + 10 * C + E\n        \nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3 / 8\n    whole_number = 48\n\n    answer = fraction * whole_number\n\n    return answer\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    rice_in_A = 15 * 0.40\n    rice_in_mixture = total_weight * 0.28\n    rice_in_B = rice_in_mixture - rice_in_A\n    percent_rice_in_B = (rice_in_B / 60) * 100\n    return percent_rice_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leakage_rate_per_minute = 15  # in milliliters\n    time_in_minutes = 2 * 60      # 2 hours into minutes\n    \n    total_leakage_milliliters = leakage_rate_per_minute * time_in_minutes\n    total_leakage_liters = total_leakage_milliliters / 1000  # Convert milliliters to liters\n    \n    return total_leakage_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Define the variables for speed\n    barbara_speed = 60  # in metres per minute\n    catherine_speed = 45  # in metres per minute\n    catherine_behind = 60  # in metres\n\n    # Since Barbara has reached the shopping mall and Catherine has 60m to go,\n    # they have been walking for the same amount of time.\n    # Let's denote the time they both have been walking as t (in minutes)\n    # Distance = Speed * Time\n    # Barbara's distance = barbara_speed * t\n    # Catherine's distance + 60 = catherine_speed * t (since Catherine is 60m behind)\n    # We can set up an equation:\n    # barbara_speed * t = catherine_speed * t + 60\n\n    # Now we solve for t\n    t = catherine_behind / (barbara_speed - catherine_speed)\n\n    # Now we can find the distance Barbara walked, which is the same as the distance to the shopping mall\n    distance_to_mall = barbara_speed * t\n    return distance_to_mall\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    a = symbols('a')\n    # Let x4 be the largest number, and x1 be the smallest number\n    # x2 and x3 are the second and third numbers respectively\n    # Since x4 > x3 > x2 > x1, their average will be (x1 + x2 + x3 + x4) / 4\n    # Given: x1 + (x2 + x3 + x4) / 3 = 39 and x4 + (x1 + x2 + x3) / 3 = 51\n    \n    # From x1 + (x2 + x3 + x4) / 3 = 39, we get 3x1 + x2 + x3 + x4 = 117\n    # From x4 + (x1 + x2 + x3) / 3 = 51, we get x1 + x2 + x3 + 3x4 = 153\n    \n    # Now, we add both to eliminate x1, x2, and x3\n    # 4x1 + 4x2 + 4x3 + 4x4 = 270, simplifying to x1 + x2 + x3 + x4 = 270 / 4\n    # Therefore, x1 + x2 + x3 + x4 = 67.5, but since these are whole numbers, x4 must be an integer greater than 67.5/4\n    # Let's assume x1 = 1 (smallest whole number), then x4 max = 67.5 - 1 - x2 - x3 must also be a whole number\n\n    # Solving for the maximum possible value of x4 given x1 = 1 (smallest possible value)\n    # We can also assume x2 and x3 are the next consecutive integers after x1, so x2=2 and x3=3 for the largest x4\n    equation = Eq(1 + 2 + 3 + a, 67.5)\n\n    # Solving for 'a', which is x4 (the largest number)\n    solutions = solve(equation, a)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2*book + 1*pen, 12)\n    equation2 = Eq(1*book + 2*pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n\n    total_change = (ten_dollar_notes * 10) + (five_dollar_notes * 5) + (twenty_cent_coins * 0.2)\n    amount_spent = 100 - total_change\n\n    return amount_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A + B + C, 200)      # The sum of A, B, and C's total\n    equation2 = Eq(A, B * 4/3)          # The ratio of A to B is 4:3\n    equation3 = Eq(A, C + 20)           # A has £20 more than C\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Nini's age and Nini's dad's age.\n    nini, dad = symbols('nini dad')\n\n    # Equation 1: Dad is 25 years older than Nini.\n    equation1 = Eq(dad, nini + 25)\n\n    # Equation 2: After 5 years, Dad's age will be 8 less than two times Nini's age.\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    # Solve the system of equations to find Nini's age.\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 == 0:\n            continue\n        if i % 6 == 0:\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    pears_sold_first_day = (2 / 5) * total_pears\n    remaining_pears = total_pears - pears_sold_first_day\n    pears_sold_second_day = (7 / 9) * remaining_pears\n\n    return int(pears_sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):  # two-digit numbers range from 10 to 99\n        if isprime(num):\n            reversed_num = int(str(num)[::-1])\n            if reversed_num != num and isprime(reversed_num):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # we can subtract these 3 apples from the total to simplify the problem\n    remaining_apples = 29 - 3\n    \n    # Using the Pigeonhole Principle, after giving 1 apple to each student\n    # we will distribute the remaining apples one by one.\n    # The minimum number of students required is achieved when all remaining apples are distributed.\n    # Hence, one student will have 3 apples and the rest will have 1 apple each.\n    class_size = remaining_apples + 1  # +1 for the student who receives 3 apples\n\n    return class_size\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of green balls and b the number of blue balls\n    g, b = symbols('g b')\n\n    # After removal of balls\n    removed_blue = (2 / 5) * b\n    removed_green = 28\n\n    # Establish equations based on the problem statement\n    equation1 = Eq(g + b, 140)                          # There were a total of 140 green and blue balls\n    equation2 = Eq(g - removed_green, b - removed_blue)  # Equal number of each color left\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # If the alcoholic is not at two of the bars,\n    # then they must be at the third bar.\n    # The events are mutually exclusive and exhaustive.\n    probability = 1.0\n\n    return probability\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n    # In 4 years' time Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # Cousin's age in 4 years\n    cousins_age_then = solutions[cousin] + 4\n\n    return cousins_age_then\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # Number of marked fish in the second catch\n    marked_fish_second_catch = 16\n    # Total fish caught in the second catch\n    total_fish_second_catch = 100\n    # Total fish caught and marked in the first catch\n    total_fish_first_catch = 100\n    \n    # Using the capture-recapture method to estimate the total number of fish\n    estimated_total_fish = (total_fish_first_catch * total_fish_second_catch) / marked_fish_second_catch\n    \n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the distance Nancy walks and r be the distance Randy walks\n    n, r = symbols('n r')\n\n    # Equation based on the proportion of their walking distances\n    equation1 = Eq(n / 2, r / 3)\n    \n    # When they meet, Randy walks 10 meters more than Nancy\n    equation2 = Eq(r, n + 10)\n    \n    # Solve the system of equations for n and r\n    solutions = solve((equation1, equation2), (n, r))\n\n    # The total distance is the sum of the distances both walk\n    total_distance = solutions[n] + solutions[r]\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed fractions to improper fractions and sum up each part\n    numerator = (1 * 99 + 3) / 99 + (3 * 33 + 3) / 33 + (9 * 11 + 3) / 11\n    denominator = (1 * 99 + 1) / 99 + (3 * 33 + 1) / 33 + (9 * 11 + 1) / 11\n\n    # Calculate the result of the division\n    ans = Fraction(numerator).limit_denominator() / Fraction(denominator).limit_denominator()\n\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Convert repeating decimal to fraction\n    repeating_decimal = '2014'  # The repeating part of the decimal\n    non_repeating_decimal = '20'  # The non-repeating part of the decimal\n    total_length = len(non_repeating_decimal + repeating_decimal)\n    \n    # The value of the repeating decimal is given by (non_repeat + repeat / (10^repeat_length - 1))\n    numerator = int(non_repeating_decimal + repeating_decimal)\n    denominator = 10**len(repeating_decimal) - 1  # Denominator for the repeating part\n    non_repeating_part = int(non_repeating_decimal) * (10**len(repeating_decimal))\n    \n    # Adjusting for the non-repeating part\n    numerator = numerator + non_repeating_part\n    denominator *= 10**len(non_repeating_decimal)\n    \n    # Multiply by 9900 to find x\n    x = numerator * (9900 / denominator)\n    \n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles each person has\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    # Create the equations based on the given information\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)  # Ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation2 = Eq(bronson, 2 * ali)  # Bronson has twice as many marbles as Ali\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    # Return the number of marbles Charlie has\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sequence1 = sum(range(10, 21, 2))\n    sequence2 = sum(range(9, 20, 2))\n    ans = sequence1 - sequence2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for units in range(10):\n                if hundreds + tens + units == 8 and hundreds != tens and tens != units and hundreds != units:\n                    if units % 2 == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = int(str(i) + '2')\n        new_number = int('2' + str(i))\n        if new_number == original_number // 3:\n            return original_number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n    \n    pass_only_first_exam = pass_first_exam - (total_students - fail_second_exam - pass_second_fail_first)\n    \n    return pass_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    # Find the smallest number within the range that fits the conditions\n    while number < 500:\n        number += 5 * 8 * 9\n    \n    return number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    bars_left = total_bars % people\n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit a, b, c will appear in each position (hundreds, tens, ones) twice\n    # For example: abc, acb, bac, bca, cab, cba\n    # Sum for one position (e.g. hundreds) is: 2*(a + b + c)\n    # Since we have three positions and each position has a value multiplier (hundreds=100, tens=10, ones=1)\n    # Total sum for all numbers is: 2*(a + b + c) * (100 + 10 + 1)\n    total_sum = 2 * (a + b + c) * (100 + 10 + 1)\n\n    return total_sum\n\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    # Start checking from the smallest 2-digit number\n    for ab in range(10, 100):\n        ba = int(str(ab)[::-1])  # reverse the number\n        result = ab * ba\n        if str(result)[1] == '0' and str(result)[2] == '0':\n            return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    small_sack, large_sack = symbols('small_sack large_sack')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)  # large sack holds 20% more potatoes than the small sack\n    equation2 = Eq(large_sack + small_sack, 77)  # together they contain 77 potatoes\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Equation representing the initial quantity of fruits\n    total_fruits_eq = Eq(oranges + apples, 125)\n\n    # Equation after selling the fruits\n    fruits_sold_eq = Eq((apples / 2) + oranges - 35, (oranges - 35) + (apples / 2))\n\n    # Solve the system of equations\n    solutions = solve((total_fruits_eq, fruits_sold_eq), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first digit must be 1,\n    # and the last must be the same as the first)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (all digits are 9)\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference\n    diff = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return diff\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    num_cabins = -(-students // cabin_capacity)\n    return num_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = 0\n    for i in range(1, 59):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    count = 0  # Counts the total number of digits\n    number = 1200  # We start from the last number and move backwards\n\n    while count < 2011:\n        count += len(str(number))  # Add the length of the current number to the count\n        if count < 2011:  # If count still less than 2011, decrement the number\n            number -= 1\n\n    # When the loop ends, `number` is part of the sequence where the 2011th digit from the right is located\n    # The position of the digit in the string representation of `number` is the excessive count over 2011\n    position = count - 2011\n    digit_str = str(number)  # Convert to string to find the specific digit\n    ans = int(digit_str[-position - 1])  # Get the digit in the position\n\n    return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n    \n    # Original situation: 1/4 * x coins are heads\n    # After flipping 2 coins: (1/4 * x + 2) / x = 1/3\n    equation = Eq((1/4)*x + 2, (1/3)*x)\n    \n    # Solve for x\n    num_coins = solve(equation, x)[0]\n    \n    return num_coins\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    n = 50 // 5\n    sum_multiples = n * (5 + (n * 5)) // 2\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes ago\n\n    # The total distance apart 5 minutes ago is the sum of the distances\n    # each planet traveled in that time.\n    distance_planet1 = speed_planet1 * time\n    distance_planet2 = speed_planet2 * time\n\n    # Since both planets are moving toward each other, the total distance apart\n    # is the sum of the individual distances.\n    total_distance_apart = distance_planet1 + distance_planet2\n\n    return total_distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let x be the number of cars and y be the number of motorbikes\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # x cars have 4x tyres, y motorbikes have 2y tyres.\n    # The total number of vehicles is the sum of cars and motorbikes (x + y = 140).\n    # The total number of tyres is the sum of car tyres and motorbike tyres (4x + 2y = 490).\n    \n    # Since each motorbike removes 2 tyres from being a car (4 tyres - 2 tyres = 2 tyres),\n    # We can convert the total tyre equation by substituting y = 140 - x into the second equation:\n    # 4x + 2(140 - x) = 490\n    # 4x + 280 - 2x = 490\n    # 2x = 490 - 280\n    # 2x = 210\n    # x = 210 / 2\n    # x = 105\n    \n    # Therefore, there are 105 cars.\n    return 105\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    tens_place_options = 5  # excluding the option 0, since a two-digit number can't start with 0\n    units_place_options = 6  # including 0, since a two-digit number can have 0 as the second digit\n\n    total_combinations = tens_place_options * units_place_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20  # 20%\n\n    original_price = paid_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, n = symbols('a n', integer=True)\n    equations = [\n        190 % n - a,\n        137 % n - (a + 4),\n        101 % n - (a + 6),\n    ]\n\n    sol = solve(equations, (a, n))\n\n    remainder = 299 % sol[n]\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    days = (total_distance - distance_per_day) // effective_distance_per_day + 1\n    if (total_distance - distance_per_day) % effective_distance_per_day != 0:\n        days += 1\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kg = 960\n    per_box_kg = 8\n\n    num_boxes = total_kg // per_box_kg\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n    original_number = (result - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    # To find the smallest number that leaves a remainder of 1 when divided by 2 and by 13,\n    # we are looking for a number that is 1 more than a common multiple of 2 and 13.\n    # A common multiple of 2 and 13 is their least common multiple (LCM).\n    # Since 2 and 13 are coprime, their LCM is simply their product.\n    # Therefore, the number we are looking for is 1 more than the product of 2 and 13.\n    \n    lcm = 2 * 13\n    ans = lcm + 1\n    return ans\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import symbols, Eq, solve, isprime\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    eq = Eq(x * (2 + y), 200 + y)\n    largest_sum = 0\n\n    for potential_y in range(2, 200, 2):  # Since x is prime, y must be odd, and less than 200\n        if not isprime(potential_y):\n            continue\n        potential_x, remainder = divmod((200 + potential_y), (2 + potential_y))\n\n        if remainder == 0 and isprime(potential_x) and potential_x != potential_y:\n            current_sum = potential_x + potential_y\n            if current_sum > largest_sum:\n                largest_sum = current_sum\n    \n    return largest_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repeat_2 = 2\n    repeat_3 = 2\n    unique_digits = total_digits - repeat_2 - repeat_3\n\n    # Calculate permutations accounting for the repetitions\n    permutations = factorial(total_digits) // (factorial(repeat_2) * factorial(repeat_3))\n\n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Given that Bud spends 2p which is one-quarter of her money\n    # Let's represent the total money Bud had with x\n    # One-quarter of x is (1/4) * x\n    # According to the question, (1/4) * x = 2p\n    # Solving for x to find the total money Bud had initially\n    x = 2 * 4\n    \n    return x\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sleepy, sneezy, bashful, grumpy = symbols('doc happy dopey sleepy sneezy bashful grumpy')\n\n    equation1 = Eq(doc, happy + 10)    # Doc is 10cm taller than Happy.\n    equation2 = Eq(happy, dopey + 10)  # Happy is 10cm taller than Dopey.\n    equation3 = Eq(dopey, sneezy)      # Dopey and Sneezy are the same height.\n    equation4 = Eq(dopey, bashful)     # Dopey and Bashful are the same height.\n    equation5 = Eq(dopey, grumpy)      # Dopey and Grumpy are the same height.\n    equation6 = Eq(sleepy, 80)         # Sleepy is 80cm tall.\n    equation7 = Eq(doc + sleepy, dopey + sneezy)  # Doc and Sleepy have the same combined height as Dopey and Sneezy.\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sleepy, sneezy, bashful, grumpy))\n\n    total_height = solutions[doc] + solutions[happy] + 4*solutions[dopey] + solutions[sleepy]\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    # In a round-robin, each team plays against every other team once\n    # Total rounds = (number of teams choose 2) because each game is between 2 teams\n    total_rounds = teams * (teams - 1) // 2\n\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    result = a * 3 + b - 4\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    first_num = (5 * 6 + 1) / 6\n    second_num = (6 * 5 + 1) / 5\n\n    # Calculate the sum of the numerators\n    numerator_sum = first_num + second_num\n\n    # Calculate the denominator sum (common denominator is 30)\n    denominator_sum = (1 / 6) + (1 / 5)\n\n    # Perform the division of the sums\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    permuted_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n\n    fifth_number = permuted_numbers[4]\n    return fifth_number\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    rate_per_day = 1000 / 5  # meters per day\n    total_days = 2600 / rate_per_day\n    return total_days\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time = 5\n    speed = distance / time  # speed in miles per hour\n\n    travel_time = 3\n    travel_distance = speed * travel_time\n\n    return travel_distance\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    \n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Number of terms in the sequence\n    num_terms = 90 - 12 + 1\n\n    # If the number of terms is even, the sum will be even because we are adding an odd number of odd numbers.\n    # If the number of terms is odd, the sum will be odd because we are adding an even number of odd numbers.\n    # Since 12 is even and 90 is even, there are an odd number of terms, hence the sum is odd.\n    if num_terms % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the numbers on each person's hat\n    qiang, rory, sophia = symbols('qiang rory sophia')\n\n    # Each individual sums the numbers on the other two hats\n    equation1 = Eq(qiang + rory, 22)\n    equation2 = Eq(qiang + sophia, 17)\n    equation3 = Eq(rory + sophia, 11)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n\n    # The largest number on a hat is the maximum of the solutions\n    return max(solutions.values())\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_between_trees = 5  # in meters\n    # Since the first tree is at the beginning, we only count the gaps between the trees.\n    # There is one fewer gap than there are trees.\n    length_of_road = (number_of_trees - 1) * distance_between_trees\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    result = 1\n    for i in range(2, 10):\n        result *= Fraction(1, 1) + Fraction(1, i)\n    \n    ans = result\n    return ans\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for x\n    x = symbols('x')\n    \n    # Setup the equations based on the problem statement\n    # Distance = Speed * Time, converting minutes to hours for the time\n    \n    # The total distance driven is the sum of the distances in each of the three 30-minute intervals\n    # First 30 minutes: x mph\n    equation1 = Eq(x * (30/60), 70 / 3)\n    \n    # Second 30 minutes: (x-20) mph\n    equation2 = Eq((x - 20) * (30/60), 70 / 3)\n\n    # Last 30 minutes: (x+10) mph\n    equation3 = Eq((x + 10) * (30/60), 70 / 3)\n\n    # Total distance driven should be 70 miles, equal to the sum of the three distances\n    equation_total = Eq(equation1.rhs + equation2.rhs + equation3.rhs, 70)\n    \n    # Solve the equations\n    solution = solve(equation_total, x)\n    \n    # Return the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    digits = 0\n    \n    # Pages 1-9 have 1 digit each, so 9 pages\n    digits += 1 * 9\n    \n    # Pages 10-99 have 2 digits each, so 90 pages\n    digits += 2 * (99 - 10 + 1)\n    \n    # Pages 100-345 have 3 digits each\n    digits += 3 * (345 - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    \n    if total_people % bus_capacity == 0:\n        buses_needed = total_people // bus_capacity\n    else:\n        buses_needed = (total_people // bus_capacity) + 1\n    \n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n\n    denise_single = total_prize / 5\n    denise_double = total_prize / 15\n\n    equation = Eq(denise_single + denise_double, 360)\n\n    solution = solve(equation, total_prize)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 6 players left (excluding the coach)\n    # The coach fixed position divides the team into two parts: left (2 people) and right (3 people)\n    # The captain has to be next to the coach, so we have to count the captain's possible positions\n\n    # Choose a place for the captain (2 ways, at the left or right of the coach)\n    captain_choices = 2\n\n    # Permute the remaining players. 5 players left; 2 on the coach's left and 3 on the right\n    # Permute 2 people on left (2!)\n    left_permutations = factorial(2)\n    # Permute 3 people on right (3!)\n    right_permutations = factorial(3)\n\n    # Using the principle of multiplication to find the total combinations\n    total_ways = captain_choices * left_permutations * right_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    n = 1  # Starting from the smallest possible arrangement with a difference of 20 students\n    while True:\n        # Calculate the total boys and girls according to the arrangement\n        total_boys = (2 * n + 1) ** 2 // 2 + (2 * n + 1) // 2\n        total_girls = (2 * n + 1) ** 2 - total_boys\n        # Check if the difference between boys and girls is 20\n        if total_boys - total_girls == 20:\n            return total_boys + total_girls  # Return the total number of students\n        n += 1  # Increment n to check the next possible arrangement\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    penguins = symbols('penguins')\n    fish = 3 * penguins + 25\n    equation = Eq(6 * (penguins - 1) + 1, fish)\n    number_of_penguins = solve(equation, penguins)\n    return number_of_penguins[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512)**(1/3)\n    square = (-1.2)**2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    # Initialize variables\n    term_count = 0\n    term_sum = 0\n    num = 1\n    \n    while term_count < 30:\n        for i in range(num):\n            if term_count < 30:\n                term_sum += num\n                term_count += 1\n            else:\n                break\n        num += 1\n\n    return term_sum\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    sum_of_parts = 0.25 * 20 + (1/5) * 30 + (2/3) * 18\n    return sum_of_parts\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    cindy_votes = 47\n    highest_other_votes = max(31, 41)\n    \n    votes_needed = highest_other_votes - cindy_votes + 1\n\n    return votes_needed\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Expression 1: 7 / -3.3333... / (-0.027)^(1/3)\n    expr1 = 7 / (-10/3) / (-0.027 ** (1/3))\n\n    # Expression 2: 2^3 / 4^2 / (0.125 * (1.8 - (0.2 * 7)))\n    expr2 = 2**3 / 4**2 / (0.125 * (1.8 - (0.2 * 7)))\n\n    # Expression 3: 0.1 / 0.142857... + (2 * 0.3)\n    expr3 = 0.1 / (1/7) + (2 * 0.3)\n\n    # Final Expression\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_age_2005 = 50\n    james_age_1997 = 20\n    years_between = 2005 - 1997\n    james_birth_year = 1997 - james_age_1997\n    gina_age_when_james_born = gina_age_2005 - years_between - james_age_1997\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    base_salary = 2500\n    salary_july = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    commission_breakpoint = 25000\n\n    extra_salary = salary_july - base_salary\n\n    # If extra_salary were all from the first commission rate, calculate the corresponding sales\n    if extra_salary <= commission_breakpoint * commission_1_rate:\n        sales_july = extra_salary / commission_1_rate\n    else:\n        # Calculate sales from the first commission rate\n        sales_july = commission_breakpoint\n        # Subtract the commission earned from the first bracket\n        extra_salary -= commission_breakpoint * commission_1_rate\n        # Calculate the rest of sales using the second commission rate\n        sales_july += extra_salary / commission_2_rate\n\n    return sales_july\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two unknowns\n    ryan, audrey = symbols('ryan audrey')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    # Return the number of marbles Audrey had at first\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_of_other_two = total_height_for_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p1 = 0.4\n    \n    # Probability of failing the first attempt and passing on the second\n    p2 = (1 - p1) * 0.5\n    \n    # Probability of failing the first two attempts and passing on the third\n    p3 = (1 - p1) * (1 - 0.5) * 0.3\n    \n    # Sum the probabilities of passing on the 1st, 2nd or 3rd attempt\n    total_probability = p1 + p2 + p3\n    \n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digit_counter = 0\n    while digit_counter < total_digits:\n        pages += 1\n        digit_counter += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_A_to_B = 2\n    routes_B_to_C = 3\n    total_routes = routes_A_to_B * routes_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    sum_of_terms = (num_terms / 2) * (2 * first_term + (num_terms - 1) * common_difference)\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n    time_needed = total_pieces / rate_per_hour\n    return time_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factor = 1\n    for i in range(1, 16):\n        factor *= i\n    \n    zero_count = 0\n    while factor % 10 == 0:\n        zero_count += 1\n        factor //= 10\n    \n    return zero_count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq((age / 4) + 32, age - 22)\n\n    solved_age = solve(equation, age)\n\n    return solved_age[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    total_diff = 44\n    total_students = 0\n    # Since we have more boys than girls, and boys occupy the outer layer,\n    # we know the square must be of odd dimension, let the side length of the square\n    # be (2n+1), hence, there will be n layers of boys and n layers of girls, along with a center of boys.\n    for n in range(1, 100):  # Iterate to find the correct n value\n        boys = 2 * (2*n+1) * n + 1  # Boys around periphery + center\n        girls = 2 * n * (n + 1)  # Girls in the internal layers\n        if boys - girls == total_diff:\n            side_length = 2 * n + 1  # Total side length of square\n            total_students = side_length ** 2  # Total students in square\n            break\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total distance needed to climb\n    total_distance = 18\n\n    # Distance climbed during the day\n    daily_climb = 7\n\n    # Special climb on the 6th day\n    day_six_climb = 3\n\n    # Calculate the total distance climbed until the end of day 5 (one day before the special climb)\n    distance_by_day_five = daily_climb * 5\n\n    # Since day 6 is special, we include it's climb to see if we reach or exceed the total distance by the end of day 6\n    total_climb_by_day_six = distance_by_day_five + day_six_climb\n\n    # If by the end of the 6th day the snail has climbed or exceeded the total distance, slide is irrelevant\n    if total_climb_by_day_six >= total_distance:\n        nightly_slide = 0\n    else:\n        # After the 6th day, if the snail hasn't climbed out yet, it will reach the top on the 7th day\n        # Hence, the daily climb (7 meters) minus the remaining distance to climb after the 6th day gives the nightly slide\n        nightly_slide = daily_climb - (total_distance - total_climb_by_day_six)\n\n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Let's denote the number of apples each student gets as a, b, c, d\n    # They are all positive integers and different from each other\n    # Also, a+b+c+d=48 with a, b, c, d being different integers\n    # We want to maximize b, so we minimize a, c, and d\n    # Assuming a < b < c < d, a can start at 1 (minimum possible value)\n    \n    max_apples_for_second_student = 0  # Initialize variable to track the max value for the second student\n    \n    for b in range(1, 48):  # Go through all possible values for b (second student)\n        for c in range(b + 1, 48):  # c must be bigger than b\n            for d in range(c + 1, 48):  # d must be bigger than c\n                a = 48 - (b + c + d)  # Calculate what a must be given b, c, and d\n                if a <= 0 or b <= a:  # Check if a is positive and less than b\n                    continue  # If not, this setup doesn't work, we skip\n                if b > max_apples_for_second_student:\n                    # If this value of b is larger than previous maximums, update max value\n                    max_apples_for_second_student = b\n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Define the times it takes each person to cross the river\n    times = [1, 2, 5, 10]\n    \n    # Calculate the minimum time to cross the river\n    # - Eddie (1 min) and Jack (2 min) cross, Eddie (1 min) goes back: 2 + 1 minutes\n    # - Rose (5 min) and Mary (10 min) cross, Jack (2 min) goes back: 10 + 2 minutes\n    # - Eddie (1 min) and Jack (2 min) cross again: 2 minutes\n    # Total time = 1 + 2 + 5 + 10 + 2 = 20 minutes\n    \n    # Since Eddie is the fastest, he will always row the boat back.\n    # There might be more efficient strategies. However, this is an optimal solution.\n    total_time = sum(times) - max(times[1:]) # Account for the fact that the two slowest crossing once is enough\n\n    return total_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let x be the length of the original rectangle\n    # Let y be the width of the original rectangle\n    # If we increase the length by 12, the new length will be x + 12\n    # The perimeter of the new rectangle is given to be 38\n    # The perimeter of a rectangle is given by P = 2(length + width)\n    # So, for the new rectangle, 38 = 2(x + 12 + y)\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    \n    # Equation for the new rectangle's perimeter\n    eq_new_perimeter = Eq(2 * (x + 12 + y), 38)\n    \n    # Solve the equation for x in terms of y\n    solution_x = solve(eq_new_perimeter, x)[0]\n    \n    # Now we have x in terms of y. We can express the original perimeter in terms of y\n    # Original perimeter (P_original) = 2(x + y)\n    P_original = 2 * (solution_x + y)\n    \n    # Since we know the new perimeter is 38, we can now express the original perimeter in terms of y\n    # Original perimeter (P_original) = 38 - 2 * 12 (since we increased the length by 12cm)\n    P_original_final = 38 - 2 * 12\n    \n    return P_original_final\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((-1)**(i-1) * i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    num = 2**19 - 1\n    remainder = num % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    return math.factorial(4)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Chocolate = C, Peaches = P, Strawberries = S\n    # Day 1: Chocolate (C)\n    # Day 2: Peaches (P) or Strawberries (S), cannot be Chocolate (Not C)\n    # Day 3: Options depend on Day 2\n    # If Day 2 is Peaches (P), Day 3 can be Chocolate (C) or Strawberries (S)\n    # If Day 2 is Strawberries (S), Day 3 can be Chocolate (C) or Peaches (P)\n\n    # Possible combinations:\n    # C-P-C, C-P-S, C-S-C, C-S-P\n    count = 4  # The number of possible combinations listed above\n\n    return count\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # The sum of two positive numbers equals 8 can represented as \n    # 8 = n + (8 - n) for n in range 1 to 7 (as n should be less than 8)\n    # We only consider half of the range because n + (8 - n) is the same as (8 - n) + n.\n    # Therefore, we start at 1 and go to 8 // 2 to avoid double-counting pairs.\n    \n    return 8 // 2\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Almaz's total salary\n    salary = symbols('salary')\n\n    # Almaz spent 5/9 of her salary on a television\n    television_expense = (5/9) * salary\n\n    # Then she spent 3/4 of the remainder on a table\n    remainder = salary - television_expense\n    table_expense = (3/4) * remainder\n\n    # She had $160 left\n    left_amount = 160\n\n    # Equation based on the information provided\n    equation = Eq(television_expense + table_expense + left_amount, salary)\n\n    # Solve the equation to find the total salary\n    total_salary = solve(equation, salary)[0]\n\n    # Calculate how much the television cost\n    television_cost = (5/9) * total_salary\n\n    return television_cost.evalf()\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular, we fix one person and arrange the rest\n    # This is because rotating the table doesn't change the order\n    num_people = 7\n    num_seats = 8\n\n    # Number of ways to arrange the remaining n-1 people\n    num_ways = factorial(num_people - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5/3)\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john_age, emma_age = symbols('john_age emma_age')\n    \n    # In 3 years' time, the sum of John and Emma's ages will be 27 years.\n    equation1 = Eq(john_age + emma_age + 3 + 3, 27)  # adding 3 years to both John's and Emma's current ages\n    \n    # Emma's age is the difference between her own and John's ages (Emma = John - Emma)\n    equation2 = Eq(emma_age, john_age - emma_age)\n    \n    # Now we solve the system of equations\n    solution = solve((equation1, equation2), (john_age, emma_age))\n    \n    # We get Emma's age\n    return solution[emma_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    num_working_days = 6 # From Monday to Saturday\n\n    total_earnings = average_daily_earnings * num_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_vertices = 3\n    return comb(num_points, num_vertices)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h and Jack's speed is 50 km/h\n    tom_speed = 48\n    jack_speed = 50\n    \n    # Jack left 3 hours later, so Tom has already driven 3 * tom_speed km\n    tom_lead = 3 * tom_speed\n    \n    # Total relative speed when both drive towards each other is the sum of their speeds\n    relative_speed = tom_speed + jack_speed\n    \n    # After another 5 hours, their relative distance covered would be 5 * relative_speed\n    # At this point, they are 15 km away from each other\n    \n    # Since they are 15 km away after 5 hours of Jack's driving (and 8 hours of Tom's driving)\n    # We can write the equation for the remaining distance to be covered by them\n    # tom_lead + 5 * relative_speed + 15 = total_distance\n    # Solve for total_distance\n    total_distance = tom_lead + 5 * relative_speed + 15\n\n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # The water section is 36 degrees,\n    # which means 36/360 = 1/10 of the total people chose water.\n    water_fraction = 1 / 10\n\n    # If cola is 30%, then it takes up 30/100 * 360 = 108 degrees on the pie chart.\n    cola_fraction = 30 / 100\n    cola_degrees = cola_fraction * 360\n\n    # The remaining is for tea which is a quarter (1/4) and coffee (7 people).\n    # 1 - (cola fraction + water fraction) = tea fraction\n    tea_fraction = 1 / 4\n    coffee_people = 7\n\n    # Total degrees taken up by tea and coffee\n    tea_coffee_degrees = 360 - cola_degrees - 36\n\n    # Degrees per person for tea is then\n    tea_degrees_per_person = (tea_coffee_degrees / 4)\n\n    # Total number of people is the coffee people + tea people + cola people + water people\n    total_people = coffee_people + tea_coffee_degrees / tea_degrees_per_person + cola_degrees / ((cola_fraction * 360) / cola_fraction) + water_fraction * (360 / 36)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the number of children be 'c'.\n    c = Symbol('c')\n\n    # Each child has 2 legs, each dog has 4 legs, and there are 3 times as many dogs as children.\n    # Total legs equation: 2c + 4(3c) = 56.\n\n    # Solving the equation for c.\n    number_of_children = solve(2*c + 4*3*c - 56, c)[0]\n    return number_of_children\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) // 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present = 18\n    absent_fraction = 2 / 5\n    present_fraction = 1 - absent_fraction\n\n    total = present / present_fraction\n    \n    return int(total)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    num = 10**5\n    den = 5**5\n    ans = num // den\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5) * 7 // 7\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    sum_result = 5.2 + 6.7 + 4.8\n\n    return sum_result\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Count trees along the length (and subtract the corner tree from one side to avoid double counting)\n    trees_length = (length // distance) * 2 - 1\n    # Count trees along the width (no need to subtract corner tree because it was removed from length count)\n    trees_width = (width // distance) * 2\n\n    # Total number of trees is the sum of trees along the length and width\n    total_trees = trees_length + trees_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36\n    height_cm = height_m * 100\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    tax_rate = 0.03\n    tax_amount = initial_amount * tax_rate\n    final_amount = initial_amount - tax_amount\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # prices\n    adult_price = 20\n    children_price = 15\n    \n    # total charge\n    total_charge = 110\n    \n    # there were at least two adults\n    # let's find the maximum number of children possible\n    # For maximum children, minimize adults. Since there's at least 2 adults...\n    min_adults = 2\n    \n    # Calculate remaining amount after minimum adults\n    remaining_after_min_adults = total_charge - (min_adults * adult_price)\n    \n    # Number of children is the remaining amount divided by children's price\n    children = remaining_after_min_adults // children_price\n    \n    return children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_each = total_sweets // people\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**8):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_mixture_volume = 750 * (1 + 9)\n    one_litre = 1000  # millilitres in 1 litre\n    num_bottles = total_mixture_volume // one_litre\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    ans = 180 / left_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # We are looking for 'initial_money', which is the full amount before spending.\n    # She first spent 1/3 of her initial money, so she's left with 2/3 of her initial money.\n    # Then she spent 1/2 of the remainder (which is 1/2 * 2/3 = 1/3 of initial money) on a bag.\n    # The total amount spent is the sum of the book and bag: 1/3 (book) + 1/3 (bag) = 2/3 of the initial money.\n    # Therefore, 2/3 of the initial_money is equal to the total_cost (132).\n    # We can set up the equation: 2/3 * initial_money = 132.\n    # To find the initial_money, we solve for initial_money = 132 * 3/2.\n    initial_money = total_cost * 3 / 2\n\n    return initial_money\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Last two digits are essentially the remainder when divided by 100\n    result = (pow(6, 2015, 100) + (2015 * 6) + pow(2015, 6, 100)) % 100\n    return result\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n\n    # Loop through all permutations of remaining four digits after fixing B and D\n    for perm in permutations('13456789', 4):\n        A, C, E, F = perm\n        ABCDEF = int(f'2{A}0{C}{E}{F}')\n        EFABCD = int(f'{E}{F}2{A}0{C}')\n\n        # Check if the given condition is satisfied\n        if 5 * ABCDEF == 6 * EFABCD:\n            FACE = int(f'{F}{A}{C}{E}')\n            return FACE\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since 1 is a factor of every number, we can ignore it.\n    # Among the given factors, 7 is a prime number and is only divisible by 1 and itself.\n    # So, 7 must be a prime factor of the number.\n    # The other factors given hint at a power of 2, because 2 and 4 are powers of 2, and 8 is 2^3.\n    # To have exactly 8 factors, the number must be in the form of p^3 * q, where p and q are primes,\n    # Since we have 2^3 already, and 7 is a prime, the number is 2^3 * 7 = 8 * 7 = 56\n    \n    return 56\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cows as c and the initial number of goats as g.\n    c, g = symbols('c g')\n\n    # We set up the equation based on the information given:\n    # Initially, 65% of the animals were cows.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 cows and goats, the number of cows became 85% of the total.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # The number of goats doubled after adding 240 cows and goats.\n    equation3 = Eq(2 * g, g + 240 - (c - g))\n\n    # We can solve the system of equations for c and g.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # We are interested in the initial number of goats, which is g.\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    cookies_sold_month1 = 1680\n    fraction_more_month2 = 7 / 20\n    decrease_kept_fraction = 3 / 20\n    \n    cookies_sold_month2 = cookies_sold_month1 + cookies_sold_month1 * fraction_more_month2\n    cookies_kept_month2 = cookies_sold_month1 - (cookies_sold_month1 * decrease_kept_fraction)\n\n    total_cookies = (cookies_sold_month2 * 20) / 17\n\n    return int(total_cookies)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene's position from the front: 6th\n    jolene_front = 6\n    # Amy's position from the back: 8th\n    amy_back = 8\n    \n    # Amy is directly behind Jolene, so Amy's position from the front is Jolene's + 1\n    amy_front = jolene_front + 1\n    \n    # Total number of children in queue is Amy's position from the front + Amy's position from the back - 1\n    total_children = amy_front + amy_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    climb_up = 5\n    slide_down = 3\n    effective_jump = climb_up * 2 - slide_down\n    jumps = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height:\n        jumps += 2\n        height_after_jumps += effective_jump\n        if height_after_jumps >= total_height:\n            break\n        height_after_jumps -= climb_up  # because the monkey slides after every 2 jumps\n\n    if height_after_jumps < total_height:\n        jumps += 1  # final jump to reach or surpass the top of the tree\n\n    return jumps\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    remainder = pow(base, exponent, divisor)\n    return remainder\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * side_length\n\n    # Calculate the number of sunflowers along the sides,\n    # excluding the corner sunflowers which are counted separately\n    sunflowers_along_sides = (perimeter // distance_apart) - 5\n\n    # Include the corner sunflowers\n    total_sunflowers = sunflowers_along_sides + 5\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    cost_per_stamp = 46  # cost of one stamp in pence\n    total_money_pence = 300  # £3 converted to pence\n    num_stamps = total_money_pence // cost_per_stamp  # number of stamps that can be bought\n\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2\n    \n    trips = (adventurers - 1) // (boat_capacity - 1) * 2 - 1\n    \n    time_taken = trips * trip_time\n    \n    return time_taken\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    usual_speed = 45\n    traffic_speed = 30\n    delay = 2\n\n    # distance = speed * time\n    # distance remains the same, so we can equate the two expressions.\n    # usual_speed * time = traffic_speed * (time + delay)\n    # Solving for time gives us the time Ryan drives at his usual speed\n\n    # time * usual_speed = (time + delay) * traffic_speed\n    # time * usual_speed = time * traffic_speed + delay * traffic_speed\n    # (time * usual_speed) - (time * traffic_speed) = delay * traffic_speed\n    # time * (usual_speed - traffic_speed) = delay * traffic_speed\n    # time = (delay * traffic_speed) / (usual_speed - traffic_speed)\n\n    time = (delay * traffic_speed) / (usual_speed - traffic_speed)\n    return time\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    \n    return factorial(100) // factorial(98)\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Create a list for the ascending part of the sequence\n    ascending = list(range(3, 11))\n    # Create a list for the descending part of the sequence\n    descending = list(range(10, 2, -1))\n    # Combine both parts to form the full pyramid sequence\n    full_sequence = ascending + descending\n    # Calculate the sum of the full pyramid sequence\n    sum_of_sequence = sum(full_sequence)\n    return sum_of_sequence\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        elif n < 0 or max_value == 0:\n            return 0\n        else:\n            with_max = count_partitions(n - max_value, max_value)\n            without_max = count_partitions(n, max_value - 1)\n            return with_max + without_max\n    \n    ans = count_partitions(5, 5) - 1 # subtract the count of 5 itself\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    # Initialize the first two terms of the sequence\n    a, b = 3, 10\n    \n    # Iterate through the sequence, storing only the remainder when divided by 3\n    for i in range(3, 1997 + 1):\n        a, b = b, (a + b) % 3  # Only store the remainder to prevent large number calculations\n    \n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let's denote x as the number of sweets and y as the number of students.\n\n    # Based on the given conditions:\n    # x = 6y - 26 (if each student gets 6 sweets, Mr. Lim is short of 26 sweets)\n    # x = 5y - 5 (if each student gets 5 sweets, Mr. Lim is short of 5 sweets)\n\n    # Equating the two expressions for x gives us:\n    # 6y - 26 = 5y - 5\n    # Simplify the equation:\n    # y = 21 (number of students)\n\n    # Now we can find the number of sweets (x) using one of the two original equations:\n    # x = 6y - 26 => x = 6 * 21 - 26\n\n    # Calculate the number of sweets:\n    y = 21\n    x = 6 * y - 26\n    return x\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Since the difference in the number of fruits between two neighbouring trees is 1,\n    # the number of fruits on the trees forms an arithmetic sequence.\n\n    # The sum of an arithmetic sequence is given by\n    # Sum = n/2 * (first_term + last_term), where n is the number of terms.\n\n    # For 8 trees, the sum S can be expressed as follows:\n    # S = 8/2 * (first_term + last_term) = 4 * (first_term + last_term)\n\n    # Given that the sum S is 225, we can look for two numbers a and b such that\n    # 4 * (a + b) = 225.\n\n    # However, since 225 is odd and 4 is even, their product must also be even.\n    # Therefore, it is impossible for the sum of the fruits on 8 trees to be 225,\n    # because the sum of an arithmetic sequence with an even number of terms is always even.\n\n    # So the answer is no, it is not possible.\n\n    return False  # Indicating that it is not possible to have a sum of 225\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n    return mary\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    \n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Leo's current age and his son's current age\n    leo, son = symbols('leo son')\n\n    # Two equations based on the problem statement\n    # When Leo was as old as his son is now, his son was 4 years old\n    # So the difference in their ages is son - 4\n    equation1 = Eq(leo - son, son - 4)\n\n    # When the son reaches Leo's current age, Leo will be 70.\n    # So the difference in their ages is again the same.\n    equation2 = Eq(leo + (leo - son), 70)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (leo, son))\n\n    # Return Leo's current age\n    return solution[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange singing performances S and spaces for dancing performances D: S S _ S _ S _\n    # There are 5 spaces for the 3 dance performances to fit into, which is a combination problem (5 choose 3)\n    spaces_for_dances = factorial(5) // (factorial(3) * factorial(5 - 3))\n    \n    # Calculate the number of ways to arrange the singing performances themselves (4 singing performances)\n    arrangements_of_singing = factorial(4)\n    \n    # Multiply the two together to get the total number of different ways to arrange the performances\n    total_arrangements = spaces_for_dances * arrangements_of_singing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years_later = 0\n\n    while True:\n        if dad_age == 4 * heidi_age:\n            break\n        heidi_age += 1\n        dad_age += 1\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # The sum of the first three numbers\n    sum_of_first_three = 3 * 120\n    \n    # The sum of all four numbers\n    sum_of_four = 4 * 150\n    \n    # The fourth number is the difference between the sum of four numbers and the sum of first three\n    fourth_number = sum_of_four - sum_of_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    # equation is box * 15 = 11 * 14 + 26\n    # we need to find the value for box which we call x\n    right_side = 11 * 14 + 26\n    x = right_side / 15\n    return int(x)\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    # To count the number of zeros at the end of a product,\n    # we need only to count the occurrence of the pair of prime factors 2 and 5 in the factorization.\n    # Every such pair will result in the product ending with a zero.\n    # We only need to count the amount of 5s, as there will be more 2s than 5s\n\n    num_fives = 0\n    for i in range(1, 61):\n        j = i\n        while j % 5 == 0:\n            num_fives += 1\n            j /= 5\n\n    return num_fives\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    ans = (3 / 13) * 52\n    return ans\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slide = 3\n    effective_daily_climb = daily_climb - nightly_slide\n    days_to_climb = 9\n\n    # Since the snail climbs out on the 9th day after climbing 8m,\n    # we need to calculate the depth it reached at the end of the 8th night,\n    # not the end of the 9th day.\n    depth_by_end_of_eighth_night = effective_daily_climb * (days_to_climb - 1)\n\n    # The snail climbs out on the 9th day, so we add the full climb of the 9th day\n    well_depth = daily_climb + depth_by_end_of_eighth_night\n\n    return well_depth\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    divisor = remainder + 1  # The smallest divisor greater than the remainder\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    teachers_know_french = 75\n    teachers_know_japanese = 45\n\n    # As some teachers know both, at minimum, the count for both should not exceed total teachers\n    teachers_know_both = teachers_know_french + teachers_know_japanese - total_teachers\n\n    # Teachers who only know French\n    teachers_know_only_french = teachers_know_french - teachers_know_both\n\n    return teachers_know_only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, drink = symbols('sweets drink')\n\n    equation1 = Eq(3 * sweets + 5 * drink, 4.90)\n    equation2 = Eq(sweets + 3 * drink, 2.70)\n\n    solutions = solve((equation1, equation2), (sweets, drink))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    r = symbols('r')\n    equation = Eq(r, (1 / 216) * (x ** 2) for x in range(1, 216*216 + 1) if (x ** 2) % 216 == 0)\n\n    solutions = [sol.evalf() for sol in solve(equation, r) if sol.is_real and sol > 0]\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)  # Total ways without restriction\n    ways_with_teddy_on_left = factorial(5)  # Ways with Teddy on furthest left\n\n    # Subtract the ways with Teddy on the left from the total ways\n    return total_ways - ways_with_teddy_on_left\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return int(result)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if (i // 10 + i % 10) % 7 == 0:  # Check if sum of digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # let the first number of the seven consecutive numbers be n\n    # then the seven numbers are n, n+1, n+2, n+3, n+4, n+5, n+6\n    # the sum of these numbers is 7n + 21 (because 1+2+3+4+5+6 = 21)\n    # according to the question, the sum is 280\n    # so we have the equation 7n + 21 = 280\n    # solving for n gives us n = (280 - 21) / 7\n\n    n = (280 - 21) // 7\n    # the largest number is, therefore, n + 6\n\n    largest_number = n + 6\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def difference_of_squares(a, b):\n        return a**2 - b**2\n\n    ans = (difference_of_squares(1000, 990) + \n           difference_of_squares(980, 970) + \n           difference_of_squares(20, 10))\n    \n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Defining the symbols for the two numbers\n\n    equation1 = Eq(x + y, 49)  # The sum of the two numbers is 49\n    equation2 = Eq(x - y, 9)   # The difference of the two numbers is 9\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]  # Returning the bigger number\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    # Initialize maximum sum\n    max_sum = 0\n    \n    # HCF is known to be 75, so both A and B are multiples of 75\n    # For 3-digit numbers, we must multiply 75 by numbers between 2 and 13\n    # (because 75*1 = 75 which is not a 3-digit number and 75*14 = 1050 which is not a 3-digit number).\n    for multiple in range(2, 14):\n        A = 75 * multiple\n        \n        # Checking if A has two equal digits by converting it to a string and comparing characters\n        strA = str(A)\n        if not (strA[0] == strA[1] or strA[0] == strA[2] or strA[1] == strA[2]):\n            continue  # Skip if A does not have two equal digits\n        \n        # Starting from multiple + 1 to ensure B is larger than A (since they are distinct) and B does not exceed 999\n        for multiple_b in range(multiple + 1, 14):\n            B = 75 * multiple_b\n            \n            # Checking if B has two equal digits\n            strB = str(B)\n            if not (strB[0] == strB[1] or strB[0] == strB[2] or strB[1] == strB[2]):\n                continue  # Skip if B does not have two equal digits\n            \n            # Check if the current sum of A and B is greater than max_sum\n            if A + B > max_sum:\n                max_sum = A + B\n    \n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(20, 1, -2):\n        total += sign * i\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # This is a sum of a sequence that follows a particular pattern.\n    # We can see that the nth term of the sequence can be represented as (n + 1)^3 - (n + 1)\n    # Thus, we can create a list of the terms using list comprehension and sum them up.\n    \n    terms = [(n + 1)**3 - (n + 1) for n in range(1, 10)]  # 1 to 9 because the sequence begins with n + 1\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return float(solutions[angel])\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Total ways to arrange 5 magazines (M) - permutation of 5 items\n    total_magazines = factorial(5)\n    \n    # Total ways to insert 5 storybooks into the 6 possible positions in the magazines arrangement\n    # (Before M1, between M1 and M2, ... , after M5): C(6, 5)\n    positions_for_storybooks = factorial(6) // (factorial(5) * factorial(6-5))\n    \n    # Multiply both possibilities    \n    total_ways = total_magazines * positions_for_storybooks\n    \n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in throws:\n        if skip_next:\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n\n    ans = max(position, 1)  # Ensure the position does not go below 1\n    return ans\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    # Total amount of money after Alex gives $65 to Brayden\n    total_after_giving = 756 - 65\n    \n    # System of equations based on the problem statement\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    # Solving the system of equations to find the amount of money Brayden had at first\n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Let's check for a reasonable upper bound\n        if (gums - 2) % 3 == 0 and ((gums - 2) * 2 // 3) % 4 == 0:\n            return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    total = kate + james\n    each_share = total / 2\n\n    james_gives = james - each_share\n\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10  # Average of 10 numbers is 10, so the total sum is 10 times 10\n    remaining_sum = 9 * 9  # Average of remainging 9 numbers is 9, total of remaining is 9 times 9\n    removed_number = total_sum - remaining_sum  # The removed number is the difference between the two sums\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # Convert speed to meters per second\n    time_seconds = 300  # Time in seconds\n    distance_meters = speed_mps * time_seconds  # Distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total amount of money as 'total', and the amount each sibling receives as 'each'.\n    total, each = symbols('total each')\n\n    # As per the problem, if the money is shared among the four siblings, each gets 'each'.\n    # So, the equation is total = 4 * each.\n\n    # If the money were shared among only the three brothers, each brother gets an additional £20.\n    # So the equation becomes total = 3 * (each + 20).\n\n    # Setting up the equations based on the description above.\n    equation1 = Eq(total, 4 * each)\n    equation2 = Eq(total, 3 * (each + 20))\n\n    # Solving the two equations to find the value of 'total' and 'each'.\n    solutions = solve((equation1, equation2), (total, each))\n\n    # We are interested in the original total sum of money.\n    return solutions[total]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Use the sum of cubes formula: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    # First, calculate the sum of the sequence 1, 3, 5, ... 21 (odd numbers only)\n    # The sum of the first n odd numbers is n^2\n    # There are (21 + 1) / 2 = 11 terms in this sequence\n\n    n_terms = (21 + 1) // 2\n    sum_of_sequence = n_terms ** 2\n\n    # Now, calculate the square of this sum to get the final answer\n    ans = sum_of_sequence ** 2\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for red, green, and blue beads left\n    red, green, blue = symbols('red green blue')\n\n    # Since the number of blue beads left is 50 fewer than the red beads left\n    equation1 = Eq(blue, red - 50)\n\n    # And there are 2 times as many red beads as green beads\n    equation2 = Eq(red, 2 * green)\n\n    # After giving away the beads, Lauren has 350 beads left\n    equation3 = Eq(red + green + blue, 350)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Calculate the original number of blue beads\n    original_blue = solutions[blue] + 112\n\n    return original_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Let the five numbers be a, b, c, d, and e, and let e be the largest number.\n\n    # For a set of four numbers (excluding e) to have the given averages,\n    # the sum of the four numbers must be four times the average.\n\n    sum_a_b_c_d = 4 * 36\n    sum_a_b_c_e = 4 * 38\n    sum_a_b_d_e = 4 * 39\n    sum_a_c_d_e = 4 * 45\n    sum_b_c_d_e = 4 * 49\n\n    # The total sum of all five numbers is the sum of the totals for the four numbers plus e.\n    total_sum = sum_a_b_c_d + sum_a_b_c_e + sum_a_b_d_e + sum_a_c_d_e + sum_b_c_d_e\n    # Since sum_a_b_c_d is counted 4 times but only exists once,\n    # we need to subtract 3 times this value to find the actual total sum.\n    total_sum -= 3 * sum_a_b_c_d\n\n    # Now, we can find e by subtracting the sum of four numbers (except e) from the total sum.\n    largest_number = total_sum - sum_a_b_c_d\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    from fractions import Fraction\n\n    art_books = 360\n    science_books_fraction = Fraction(4, 5)\n    art_books_fraction = Fraction(1, 3)\n\n    science_books = (art_books / art_books_fraction) * science_books_fraction\n\n    return science_books\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Define the ratio for Katelyn and Jared\n    katelyn_ratio = 2\n    jared_ratio = 5\n\n    # The difference in the ratio is equal to the difference in the number of stickers\n    ratio_difference = jared_ratio - katelyn_ratio\n    \n    # Jared has 60 more stickers than Katelyn, which corresponds to the ratio difference\n    stickers_per_ratio_unit = 60 / ratio_difference\n\n    # Calculate the total number of stickers for Katelyn and Jared based on the ratio\n    total_stickers = stickers_per_ratio_unit * (katelyn_ratio + jared_ratio)\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    sausages = 16\n    people = 24\n    cuts = 0\n\n    while sausages < people:\n        sausages *= 2\n        cuts += 1\n\n    ans = cuts\n    return ans\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    chinese_books = 42\n    math_books = 63\n    nature_books = 28\n\n    # Finding the greatest common divisor (gcd) for the number of textbooks\n    gcd_books = gcd(chinese_books, gcd(math_books, nature_books))\n\n    return gcd_books\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    # Calculate the value after first 3 years with 5% yearly interest\n    value_after_3_years = initial_investment * (1.05 ** 3)\n    # Calculate the value after last 2 years with 10% yearly interest\n    final_value = value_after_3_years * (1.10 ** 2)\n    # Round the result to the nearest tenth\n    ans = round(final_value, 1)\n    return ans\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between the library and the school\n    d = symbols('d')\n\n    # Qiqi's speed is 60 m/min and travels for t minutes\n    # Weiling's speed is 72 m/min and travels for t - 6 minutes (2 minutes late start and 4 minutes early arrival)\n    equation = Eq(60 * (d / 60), 72 * (d / 72 + 6))\n\n    # Solve the equation for d\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # s = rate at which Star completes the job per hour\n    # n = rate at which Nini completes the job per hour\n    s, n = symbols('s n')\n\n    equation1 = Eq(5 * s + 20 * n, 1)\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Nini's rate is the whole job (1) divided by her time\n    nini_time_to_finish_job = 1 / solutions[n]\n\n    return nini_time_to_finish_job\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Number of companies is inversely proportional to the\n    # days needed to build an expressway given the length is constant.\n    # The days needed is directly proportional to the length of the expressway\n    # given the number of companies is constant.\n    # So, work done is proportionate to (companies * days) / length\n\n    # If 4 companies can build 900m in 5 days,\n    # then 1 company can build 900m in 4 * 5 days.\n    days_for_900m = 4 * 5\n\n    # If 1 company can build 900m in 4 * 5 days,\n    # it will take (4 * 5) / 900 * 2700m days to build 2700m.\n    days_for_2700m = days_for_900m * (2700 / 900)\n\n    return days_for_2700m\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    # St Petersburg is 3 hours ahead of Manchester. \n    time_difference = timedelta(hours=3)\n    # Richard meets the plane at 12:00 noon St Petersburg time.\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    # Calculate the departure time from Manchester\n    manchester_departure_time = st_petersburg_time - time_difference\n    return manchester_departure_time.time()\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    ans = kg * kg_to_lbs\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n\n    ben_height = jane_height - difference\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_front = 6\n    frank_back = 9\n    between_ben_frank = 10\n\n    total_people = (ben_front - 1) + between_ben_frank + (frank_back - 1) + 1 # +1 for Ben's position\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    # Given ratio of coffee to milk is 3:8\n    coffee_ratio = 3\n    milk_ratio = 8\n    \n    # Given amount of coffee used is 6 litres\n    coffee_amount = 6\n    \n    # Find the total ratio units\n    total_ratio_units = coffee_ratio + milk_ratio\n    \n    # Calculate one ratio unit in litres\n    ratio_unit_in_litres = coffee_amount / coffee_ratio\n    \n    # Calculate the total amount of Latte made\n    total_latte_amount = ratio_unit_in_litres * total_ratio_units\n    \n    return total_latte_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 8 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(32, 1, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    ans = (72 / 100) * 140\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let the total number of marbles be 'x'.\n    # According to the problem, we have the following fraction for red and green:\n    # (2/5)x for red marbles, (1/3)x for green marbles, and 96 for yellow marbles.\n    # Therefore, the equation is (2/5)x + (1/3)x + 96 = x\n    # To solve for 'x', we find a common denominator and then combine the fractions.\n    # The common denominator for 5 and 3 is 15.\n    # The equation becomes (6/15)x + (5/15)x + 96 = x\n\n    # Subtract the sum of fractions from both sides of the equation.\n    # 96 = x - (6/15)x - (5/15)x\n    # 96 = (4/15)x\n    # Finally, solve for 'x':\n    x = 96 * (15/4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663 ** 2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total_sum = 0\n    for i in range(2015):\n        total_sum += int('1'*(i+1))\n    ans = total_sum % 10000\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if (hundreds + tens + ones == 8) and ((hundreds * 100 + tens * 10 + ones) % 2 == 0):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # For the unit digit of 13^242, we only care about the unit digit of powers of 3.\n    # The unit digit of powers of 3 follows a cycle: 3, 9, 7, 1\n    cycle_3 = [3, 9, 7, 1]\n    unit_digit_13 = cycle_3[242 % 4 - 1]\n\n    # For the unit digit of 17^379, we only care about the unit digit of powers of 7.\n    # The unit digit of powers of 7 follows a cycle: 7, 9, 3, 1\n    cycle_7 = [7, 9, 3, 1]\n    unit_digit_17 = cycle_7[379 % 4 - 1]\n\n    # For the unit digit of 4^2012, since 4^2 ends in 6 and subsequent powers of 4^2n will end in 6,\n    # i.e., 16, 256, ..., we know that the unit digit is 6\n    unit_digit_4_powered = 6\n\n    # Multiply the unit digit of 17^379 by the unit digit of 4^2012\n    unit_digit_17_times_4_pow = (unit_digit_17 * unit_digit_4_powered) % 10\n\n    # Add the unit digits of both parts to find the final unit digit\n    final_unit_digit = (unit_digit_13 + unit_digit_17_times_4_pow) % 10\n    \n    return final_unit_digit\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If we take one marble of each color, we have two marbles but not necessarily of the same colour.\n    # To ensure we have 2 marbles of the same colour, we need to take one more.\n    # This is because once we have one blue and one yellow, the next marble we take,\n    # no matter the color, will give us a pair of the same colour.\n    # This is an application of the pigeonhole principle, which implies we need 3 marbles.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congs = [(2, 4), (3, 5), (3, 11)]\n    num, _ = solve_congruence(*congs)\n    return num\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize the counter for the number of possibilities\n    possibilities = []\n\n    # Loop through possible ages for John (the father)\n    for john_age in range(1, 45):  # Age limited by the product condition\n        mary_age = john_age - 1  # Mary is one year younger than John\n\n        # Check if the product of their ages this year is less than 2019\n        if john_age * mary_age < 2019:\n            # Check if the product of their ages next year is greater than 2020\n            if (john_age + 1) * (mary_age + 1) > 2020:\n                # Loop through possible ages for the oldest child\n                for oldest_child_age in range(1, 20):  # Limited by a reasonable age for a child\n                    # Define the ages of the other two children\n                    middle_child_age = oldest_child_age - 2\n                    youngest_child_age = oldest_child_age - 4\n\n                    # Check if all children are old enough\n                    if youngest_child_age > 0:\n                        # Check if the product of their ages this year is less than 2019\n                        if (oldest_child_age * middle_child_age * youngest_child_age) < 2019:\n                            # Check if the product of their ages next year is greater than 2020\n                            if ((oldest_child_age + 1) * (middle_child_age + 1) * (youngest_child_age + 1)) > 2020:\n                                # Store the possibility\n                                total_age = john_age + mary_age + oldest_child_age + middle_child_age + youngest_child_age\n                                possibilities.append(total_age)\n\n    # Select the smallest total age since the product needs to be less than 2019\n    ans = min(possibilities)\n    return ans\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    nth_term = first_term + (7 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote x as the original sum of money Mrs. Chen had.\n    # She spent $36 on plates, so she had x - 36 left.\n    # Then she spent 3/4 of the remaining money on cups. \n    # This means she spent 3/4 * (x - 36) on cups.\n    # According to the problem, she has 1/6 of the original sum left.\n    # So, 1/6 of x is what remained after buying cups and plates.\n    # We can write the equation as: 1/6 * x = x - 36 - 3/4 * (x - 36)\n    # Now we solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/6 * x, x - 36 - 3/4 * (x - 36))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = p\n        total = (a*100 + b*10 + c) + (b*100 + c*10 + d) + (c*100 + d*10 + e) \\\n              + (d*100 + e*10 + f) + (e*100 + f*10 + g) + (f*100 + g*10 + h) \\\n              + (g*100 + h*10 + i)\n        max_sum = max(max_sum, total)\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert time to travel 1 mile to hours\n    time_to_travel_one_mile_in_hours = (2 + 30 / 60) / 60\n    \n    # Total time available is 1 hour\n    total_time_in_hours = 1\n    \n    # Calculate the distance the bicyclist will travel in 1 hour\n    distance_travelled_in_one_hour = total_time_in_hours / time_to_travel_one_mile_in_hours\n    \n    return distance_travelled_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    number = 8\n    while count < 2012:\n        if str(number)[0] == '8':\n            count += 1\n        if count == 2012:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # We are told that there are 5 students with consecutive natural numbers of balls\n    # Let x be the number of balls the middle student has\n    # Then the total number of balls is (x-2) + (x-1) + x + (x+1) + (x+2) = 5x\n    # This is equal to 160 balls\n    # So we solve 5x = 160 to find the number of balls the middle student has\n    # And then add 2 to find the number of balls the student with the most balls has\n    \n    total_balls = 160\n    middle_student_balls = total_balls // 5\n    most_balls = middle_student_balls + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from math import comb\n\ndef solution():\n    total_envelopes = 15\n    remaining_envelopes = total_envelopes - 2 - 4 - 3  # At least 2 for A, 4 for B, and 3 for C\n    # Now we distribute the remaining envelopes to 4 boxes, including D which has no restrictions.\n    ways = 0\n    for d in range(remaining_envelopes + 1):  # ranging from 0 to remaining_envelopes for box D\n        for a in range(remaining_envelopes - d + 1):  # the rest for box A\n            for b in range(remaining_envelopes - d - a + 1):  # then distribute to B what's left\n                c = remaining_envelopes - d - a - b  # whatever is left goes to box C\n                ways += comb(d + a, a) * comb(b + c, c)  # Calculate combinations for each distribution\n\n    return ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total_amount = 80\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    tax_amount = 7000\n    first_segment_tax_rate = 0.15\n    second_segment_tax_rate = 0.20\n    first_segment_income = 20000\n    first_segment_tax = first_segment_income * first_segment_tax_rate\n\n    if tax_amount <= first_segment_tax:\n        income = tax_amount / first_segment_tax_rate\n    else:\n        additional_tax = tax_amount - first_segment_tax\n        additional_income = additional_tax / second_segment_tax_rate\n        income = first_segment_income + additional_income\n\n    return income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal_part = str(1 / 13)[2:]  # Get the decimal part as string, excluding '0.'\n    length_cycle = len(decimal_part)  # Length of the recurring cycle\n\n    # Since the decimal part repeats, find the corresponding digit in the cycle\n    digit_in_cycle = (2022 - 1) % length_cycle\n\n    # Find the digit at the corresponding place in the cycle\n    ans = int(decimal_part[digit_in_cycle])\n\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Calculate the greatest common divisor (GCD)\n    gcd_two_ropes = gcd(rope1, rope2)\n    ans = gcd(gcd_two_ropes, rope3)\n\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    # Let x be the number of chickens and y be the number of rabbits.\n    # We have two equations based on the problem statement:\n    # x + y = 40 (total number of animals)\n    # 2x + 4y = 100 (total number of legs, chickens have 2 legs and rabbits have 4 legs)\n    \n    # By solving these equations, we can find the number of chickens (x).\n    \n    # From the first equation, we can express y in terms of x: y = 40 - x.\n    # Substituting y in the second equation, we get: 2x + 4(40 - x) = 100.\n    # Simplifying the above equation gives us the number of chickens (x).\n    \n    x = (100 - 4*40) // (2 - 4)\n    return x\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of packs in stores A and B\n    x = symbols('x')\n\n    # After A sold 290 packs, store A has (x - 290) packs\n    # Store B is untouched and still has x packs\n    # B has 3 times as many packs as A\n    equation = Eq(x, 3 * (x - 290))\n\n    # Solve the equation\n    original_packs = solve(equation, x)[0]\n\n    # Both stores had x packs each at first, so in total they had 2*x packs\n    total_packs = 2 * original_packs\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    girls_packed_lunch = girls - girls_school_lunch - girls_home_lunch\n\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_cost = 20 * 6\n    total_milk_chocolate_cost = 20 * 5\n    total_strawberry_chocolate_cost = 20 * 4\n\n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_strawberry_chocolate_cost\n    total_chocolates = 20 + 20 + 20\n\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n\n    # Calculate the daily rate of production\n    daily_production_rate = sets_made_in_5_days / 5\n\n    # Calculate the total number of days needed to complete the order at the current rate\n    total_days_needed = total_sets_needed / daily_production_rate\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for x in range(1, int(number**0.5) + 1):\n        if number % x == 0:\n            factors.add(x)\n            factors.add(number // x)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    # The arithmetic sequence we are considering is 12, 24, 36, ..., 96.\n    # This is because 96 is the largest multiple of 12 that is less than 100.\n    # To count how many terms are in this arithmetic sequence,\n    # we can use the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n-1)*d, where an is the nth term, a1 is the first term, and d is the common difference.\n    # In this case, a1 = 12 and d = 12.\n    # We solve for n when an < 100\n    # 12 + (n-1)*12 < 100\n    # (n-1)*12 < 88\n    # n-1 < 88 / 12\n    # n-1 < 7.333...\n    # n < 8.333...\n    # Since n must be an integer, n <= 8\n    # hence there are 8 numbers less than 100 that are divisible by 12.\n    return 8\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # Speed of the train in meters per second\n    time = 19   # Time taken to pass the tree in seconds\n\n    length = speed * time  # Distance formula: distance = speed * time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # The rate of work for the man is 1 barrel/15 days\n    man_rate = 1 / 15\n    \n    # The combined rate of work for the man and his wife is 1 barrel/12 days\n    combined_rate = 1 / 12\n    \n    # The rate of work for the wife can be found by subtracting the man's rate from the combined rate\n    wife_rate = combined_rate - man_rate\n    \n    # The wife's time to finish the barrel on her own is the reciprocal of her rate\n    wife_time = 1 / wife_rate\n    \n    return wife_time\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    product = 2017\n    for i in range(2, 2018):\n        product *= (1 - 1/i)\n    return product\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    num_friends = 6\n\n    fruits_per_friend = (total_pears + total_strawberries + total_chocolates) // num_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    discount_quantity = 3\n    free_books_with_discount = 1\n    books_wanted = 5\n\n    # Calculate the number of discounts Subhan can use\n    discounts = books_wanted // (discount_quantity + free_books_with_discount)\n    \n    # Calculate the number of books Subhan has to pay for\n    books_to_pay = books_wanted - discounts * free_books_with_discount\n\n    # Calculate the total price\n    total_price = book_price * books_to_pay\n    \n    return total_price\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    children = symbols('children')\n    \n    # According to problem, we have the following relations\n    women_fraction = 2/5\n    men_to_children_ratio = 3\n    women_to_children_difference = 190\n    \n    # Calculate number of women based on fraction\n    women = women_fraction * total_people\n    \n    # Calculate number of men based on children and given ratio\n    men = men_to_children_ratio * children\n    \n    # The relation between number of women and children according to the problem\n    women_eq = Eq(women, children + women_to_children_difference)\n    \n    # Since the total number of people is equal to sum of men, women, and children\n    total_eq = Eq(total_people, men + women + children)\n    \n    # Substituting number of women from the first equation into the total equation\n    substituted_eq = total_eq.subs(women, children + women_to_children_difference)\n    \n    # Solving the equation for the total number of people\n    solution = solve((women_eq, substituted_eq), (children, total_people))\n    \n    return solution[total_people]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 6, 3*x - 3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    total_boys_pencils = 20 * boys\n    total_girls_pencils = 60 * girls\n    \n    average_pencils = Eq((total_boys_pencils + total_girls_pencils) / (boys + girls), 35)\n    total_students = Eq(boys + girls, 40)\n    \n    solutions = solve((average_pencils, total_students), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        total_sum += int(\"1\" * i)  # Creating the number with i number of 1's and adding to total_sum\n\n    ans = total_sum % 100  # Taking the last two digits\n    return ans\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let a be the price of one apple and b be the price of one banana\n    a, b = symbols('a b')\n\n    # first option: 6a + 7b = total money Einstein has\n    # second option: 8a + 4b = total money Einstein has\n    option1 = Eq(6*a + 7*b)\n    option2 = Eq(8*a + 4*b)\n    \n    # solve the system of equations\n    prices = solve((option1 - option2, option1), (a, b))\n\n    # since we now know the price of a banana, we divide the total money Einstein has (from either option as they are equal) by the price of a banana to find out how many bananas he could afford\n    bananas = (6*prices[a] + 7*prices[b]) / prices[b]\n\n    return int(bananas)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n\n    total_students = coding_only + math_only + both\n\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    for A in range(2, 16):\n        for B in range(4, 16):\n            for C in range(3, 16):\n                D = 15 - (A + B + C)\n                if D >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # Let x be the dividend and y be the divisor\n    # If Leo forgets the decimal point in the divisor, the erroneous divisor becomes 211 instead of 2.11\n    # According to the question, the erroneous result is (x/211)\n    # The correct result should be (x/2.11)\n    # The error in the result is given as 98.01, which means: (x/2.11) - (x/211) = 98.01\n    \n    # Let's set up and solve the equation\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Equation represents the difference between the incorrect division and the correct one equal to the error 98.01\n    equation = Eq((x / 2.11) - (x / 211), 98.01)\n\n    # Solve the equation for the dividend x\n    x_value = solve(equation, x)[0]\n\n    # Once we have the dividend, we can find the correct result (true result)\n    true_result = x_value / 2.11\n    \n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n    equation = Eq(john - 30, 4 * (choon_mui - 150))\n    solutions = solve((equation, Eq(john, choon_mui)))\n\n    john_left = solutions[john] - 30\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    f, m = symbols('f m')  # f for females, m for males\n    # m = f + 450 on the first day\n    equation1 = Eq(m, f + 450)\n    # f increases by 15% on the second day -> f * 115%\n    # m decreases by 18% on the second day -> m * 82%\n    # total for second day is 1354\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_eggs_second = remaining_eggs * 2 + 4\n    remaining_after_first_sale = sold_eggs_second + remaining_eggs\n    initial_eggs = (remaining_after_first_sale - 5) * 2\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    # Speed in miles per hour\n    speed_mph = 65\n    # Time in minutes\n    time_minutes = 15\n    # Convert time to hours\n    time_hours = time_minutes / 60\n    # Convert speed to kilometers per hour (1 mile = 1.60934 kilometers)\n    speed_kph = speed_mph * 1.60934\n    # Distance travelled in kilometers\n    distance_km = speed_kph * time_hours\n\n    return distance_km\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100\n\n    increased_amount = original_amount * (1 + percentage_increase)\n    \n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    real_length_m = 8  # Real length of the yacht in meters\n    scale_ratio = 1 / 20  # Scale ratio\n    model_length_m = real_length_m * scale_ratio  # Length of the model yacht in meters\n    model_length_cm = model_length_m * 100  # Convert meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # This problem is essentially asking for the number of derangements of 4 elements,\n    # also known as the subfactorial or !n of 4.\n    # The formula for derangements is !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n / n!)\n    # For n = 4, we have:\n    \n    n = 4\n    derangements = factorial(n) * (1 - 1/factorial(1) + 1/factorial(2) - 1/factorial(3) + 1/factorial(4))\n    \n    return int(derangements)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    advance = 3\n    retreat = 1\n    net_advance = advance - retreat\n    day = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        day += 1\n        distance_covered += advance\n\n        if distance_covered < total_distance:\n            distance_covered -= retreat\n\n    return day\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(0.95 * x - 2/5 * x, 55)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate John's hourly wage\n    hourly_wage = 78 / 6.5\n\n    # Calculate John's earnings in a week working 8 hours per day\n    earnings_per_week = hourly_wage * 8 * 5  # 5 working days in a week\n\n    # Calculate the remaining debt after paying off as much as possible\n    remaining_debt = 700 - earnings_per_week\n\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if A != ((A + 3) % 10):\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        # Count numbers with exactly one zero digit\n        str_num = str(i)\n        if str_num.count('0') == 1 and '00' not in str_num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # Arjun's haircut period in days (2 weeks)\n    yahya_period = 10  # Yahya's haircut period in days\n\n    ans = lcm(arjun_period, yahya_period)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate time for each section of the race\n    time_first_section = 280 / 7  # distance / speed\n    time_middle_section = 400 / 5\n    time_last_section = (800 - 280 - 400) / 8\n\n    # Calculate total time\n    total_time = time_first_section + time_middle_section + time_last_section\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    # Divisible by 5 condition\n    # The last digit must be 0 or 5. But since it's a four-digit number,\n    # the last digit must be 5 (because if it were 0, it would be a three-digit number)\n    last_digit = 5\n\n    # We replace the first square position with all digits from 0 to 9\n    # and check divisibility by 3 (sum of digits must be divisible by 3)\n    for digit in range(10):\n        # Create the number with the current digit in the tens place\n        number = 2000 + digit*100 + 90 + last_digit\n\n        # Check the divisibility by 3 by summing the digits\n        if (2 + digit + 9 + last_digit) % 3 == 0:\n            sum_of_numbers += number\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    \n    number_of_spaces = (highway_length // tree_spacing) - 1\n    number_of_trees = number_of_spaces\n\n    return number_of_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_end = 34\n    stamps_bought = 11\n    stamps_used = 2\n    stamps_given = 14\n\n    stamps_initial = stamps_end + stamps_used + stamps_given - stamps_bought\n\n    return stamps_initial\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    lucas_loss = cost_of_shoes + fake_note\n    return lucas_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    ans = number_of_terms * (first_term + last_term) // 2\n    return ans\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    fraction = 5 / 7\n    total = 112\n\n    result = fraction * total\n    return result\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, and C as a single unit since they must always be next to each other\n    # Now we have 8 units to arrange (the ABC unit and the other 7 students)\n    units = factorial(8)\n  \n    # A, B, and C can be arranged among themselves in 3! ways\n    abc_arrangements = factorial(3)\n    \n    # Total arrangements is the product of the two\n    total_arrangements = units * abc_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Construct the initial long number by concatenating numbers from 1 to 30 as strings\n    long_number = ''.join(str(i) for i in range(1, 31))\n\n    # Since we want the smallest number after removing 46 characters,\n    # we want to remove digits starting from the most significant digit (left)\n    # but to keep the number non-zero we must leave the first non-zero digit\n    # which is '1' in this case.\n    # Then, we remove the next 46 digits to get the smallest number.\n    new_number = long_number[0] + long_number[47:]\n\n    return new_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, we have to consider the worst-case scenario,\n    # which is picking all blue balls first.\n    blue_balls = 6\n    \n    # Since we have to guarantee a white ball, the next pick after all blue balls\n    # guarantees a white ball.\n    picks_to_guarantee_white = blue_balls + 1\n    \n    return picks_to_guarantee_white\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20\n    overlap_length = 3\n    # When tying 3 rulers, there will be 2 overlaps\n    num_overlaps = 2\n    \n    # Total length calculation\n    total_length = (short_ruler_length * 3) - (overlap_length * num_overlaps)\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1\n    jogging_speed = 6 # miles per hour\n\n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2\n    walking_speed = 5 # miles per hour\n\n    # Total distance is the sum of jogging distance and walking distance\n    total_distance = (jogging_time * jogging_speed) + (walking_time * walking_speed)\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n\n    while used_cups >= 7:\n        # Make new cups from used ones\n        made_now = used_cups // 7\n        new_cups += made_now\n        # Update the count of used cups by subtracting the ones just used\n        # and adding the newly created cups (as they will eventually be used too)\n        used_cups = used_cups - made_now * 7 + made_now\n    \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    ans = 2000 - 222\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    total_length_cm = 23 * 100  # Convert plot length from meters to cm\n    spacing_cm = 15  # Spacing between each cauliflower in cm\n    offset_cm = 20  # Distance from start to the first cauliflower in cm\n    cauliflower_width_cm = 45  # Width of a cauliflower plant in cm\n\n    remaining_length_cm = total_length_cm - offset_cm\n    # Calculate space used by each cauliflower plant including the space between them\n    space_per_cauliflower_cm = cauliflower_width_cm + spacing_cm\n    # Calculate the number of cauliflowers that can be planted\n    num_cauliflowers = remaining_length_cm // space_per_cauliflower_cm\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average = total_pages / days\n    return average\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Calculate the greatest common divisor (GCD) of the three class sizes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton, bowling = symbols('badminton bowling')\n    \n    # Badminton Club had thrice as many members as the Bowling Club\n    equation1 = Eq(badminton, 3 * bowling)\n    \n    # After 36 members left the Badminton Club and 4 members left the Bowling Club\n    # the two clubs had the same number of members\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    solutions = solve((equation1, equation2), (badminton, bowling))\n    \n    # We need to know how many members each of the clubs have in the end.\n    # Which is the members left after subtraction\n    badminton_end = solutions[badminton] - 36\n    bowling_end = solutions[bowling] - 4\n    \n    return badminton_end, bowling_end\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # meters\n\n    time_taken = distance / speed_of_sound  # time = distance / speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    ans = 1\n    for i in range(2, n+1):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        ans *= (count + 1)\n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    return number1 - number2\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    \n    num_cards = total_sum // average\n    difference = 6\n    \n    # The greatest number G and smallest number S\n    # Since the difference is 6, G = S + 6\n\n    # Average = (G + S) / 2\n    # 126 = (S + 6 + S) / 2\n    # 126 = (2S + 6) / 2\n    # Solving for S gives us the smallest number\n    S = (average * 2 - difference) // 2\n    \n    return S\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        return count\n\n    def prime_factors_in_range(start, end, prime):\n        count = 0\n        for i in range(start, end + 1):\n            count += count_factors(i, prime)\n        return count\n\n    twos = prime_factors_in_range(301, 999, 2)\n    fives = prime_factors_in_range(301, 999, 5)\n\n    ans = min(twos, fives)\n    \n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum(1 / i for i in range(10, 20))\n    return int(sum_fraction)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, sw_girls, nsw_girls, sw_boys, nsw_boys = symbols('boys girls sw_girls nsw_girls sw_boys nsw_boys')\n    total_students = 1690\n\n    # Equations\n    eq1 = Eq(boys - girls, 90)\n    eq2 = Eq(sw_girls + nsw_girls, girls)\n    eq3 = Eq(31 * nsw_girls, 49 * sw_girls)\n    eq4 = Eq(sw_boys, nsw_boys - 120)\n    eq5 = Eq(sw_boys + nsw_boys, boys)\n    eq6 = Eq(girls + boys, total_students)\n\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (boys, girls, sw_girls, nsw_girls, sw_boys, nsw_boys))\n\n    # Answer (Boys who can not swim) + (Girls who can not swim)\n    ans = solutions[nsw_boys] + solutions[nsw_girls]\n\n    return ans\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n\n    # Time spent by rabbit sleeping\n    rabbit_sleep_time = 215  # min\n\n    # Time until the rabbit sleeps\n    time_until_sleep = 10  # min\n\n    # Distance covered by both before rabbit sleeps\n    rabbit_distance_before_sleep = time_until_sleep * rabbit_speed\n    turtle_distance_before_sleep = time_until_sleep * turtle_speed\n\n    # Distance covered by the turtle during rabbit's sleep\n    turtle_distance_during_rabbit_sleep = rabbit_sleep_time * turtle_speed\n\n    # Total distance covered by turtle when rabbit wakes up\n    turtle_total_distance = turtle_distance_before_sleep + turtle_distance_during_rabbit_sleep\n\n    # The race is finished if turtle has already crossed the finish line\n    if turtle_total_distance >= 6990:\n        return 'turtle', turtle_total_distance - 6990\n\n    # Remaining distance for rabbit and turtle to finish the race when rabbit wakes up\n    rabbit_remaining_distance = 6990 - rabbit_distance_before_sleep\n    turtle_remaining_distance = 6990 - turtle_total_distance\n\n    # Time required for rabbit and turtle to finish the race from now\n    rabbit_time_to_finish = rabbit_remaining_distance / rabbit_speed\n    turtle_time_to_finish = turtle_remaining_distance / turtle_speed\n\n    # Who reaches the finish line first and what is the distance between them\n    if rabbit_time_to_finish < turtle_time_to_finish:\n        winner = 'rabbit'\n        distance_difference = turtle_speed * rabbit_time_to_finish\n    else:\n        winner = 'turtle'\n        # Since turtle is the winner, the rabbit would not have reached the finish line\n        # thus distance difference is the remaining distance for rabbit when turtle finishes\n        distance_difference = rabbit_remaining_distance\n\n    return winner, distance_difference\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n    \n    # Bolt has run 1656 metres more than Boris\n    equation1 = Eq(bolt, boris + 1656)\n    # The distance Bolt has finished is 280 metres more than 5 times that of Boris\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    # Calculate the total distance they have run\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    pocket_money_2020 = 484\n    increase_rate = 0.10  # 10% increase each year\n    # Calculate pocket money for 2019 (1 year before 2020)\n    pocket_money_2019 = pocket_money_2020 / (1 + increase_rate)\n    # Calculate pocket money for 2018 (1 additional year before 2019)\n    pocket_money_2018 = pocket_money_2019 / (1 + increase_rate)\n    return pocket_money_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial as fact\n    \n    # First, calculate the permutations for all 7 people: 7!\n    total_permutations = fact(7)\n    \n    # Now, calculate permutations where 3 specific people are next to each other\n    # Treat the 3 people who don't want to stand next to each other as a single unit\n    # We have now 5 units to arrange: (3 people as 1 unit + 4 individuals) = 5!\n    group_permutations = fact(5)\n    \n    # Within this unit of 3, the 3 people can arrange themselves in 3! ways\n    arrangements_within_group = fact(3)\n    \n    # The total number of permutations where the 3 specific people are next to each other\n    unwanted_permutations = group_permutations * arrangements_within_group\n    \n    # The total number of acceptable permutations\n    acceptable_permutations = total_permutations - unwanted_permutations\n    \n    return acceptable_permutations\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (num_rows - 1) * difference\n\n    total_athletes = (num_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio = 1 / 2  # Ratio of boys to girls\n    girls = boys / ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    from sympy import factorial, primefactors\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    factorial_789 = factorial(789)\n    ans = count_trailing_zeros(789)\n\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Given average score and number of students for both teams, we can set up the equation:\n    # (average_score_A * number_of_students_A + average_score_B * x) / (number_of_students_A + x) = combined_average_score\n    # Plug in the given numbers:\n    # (76 * 20 + 67 * x) / (20 + x) = 70\n    # Solve for x.\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    number_of_students_A = 20\n    average_score_A = 76\n    average_score_B = 67\n    combined_average_score = 70\n\n    equation = Eq((average_score_A * number_of_students_A + average_score_B * x) / (number_of_students_A + x), combined_average_score)\n\n    number_of_students_B = solve(equation, x)[0]\n\n    return number_of_students_B\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    minimum_participants_per_school = 4\n\n    # By the pigeonhole principle, to guarantee that the school with the most participants\n    # has at least 4 participants, we divide the total number by 3 (since if there were\n    # one more school, it would mean that one of the schools could have less than 4 participants)\n    max_schools = participants // (minimum_participants_per_school - 1)\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_spent = number_of_cakes * cost_per_cake\n    return total_spent\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(0, 24):\n        for minute in range(0, 60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 3)\n    products = []\n\n    for p1 in perms:\n        remaining_digits = [d for d in digits if d not in p1]\n        for p2 in permutations(remaining_digits, 3):\n            num1 = int(''.join(map(str, p1)))\n            num2 = int(''.join(map(str, p2)))\n            products.append(num1 * num2)\n\n    ans = min(products)\n    return ans\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)\n    max_prod = 0\n    min_prod = float('inf')\n\n    for perm in permutations(digits, 7):\n        ABCD = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]\n        EFG = perm[4]*100 + perm[5]*10 + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_prod = max(max_prod, product)\n            min_prod = min(min_prod, product)\n\n    return max_prod - min_prod\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = 50\n\n    num_terms = ((first_term - last_term) // difference) + 1\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):  # 2-digit numbers start from 10\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_climb_per_hour = 40 - 10\n    final_climb = 40\n    depth = 220\n    hours = 0\n    \n    while depth > final_climb:\n        depth -= total_climb_per_hour\n        hours += 1\n    hours += 1  # for the final climb without slipping back\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(29, 0, -1):\n        if isprime(i):\n            return i\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total_sum = 3989\n    given_numbers_sum = 3000 + 80 + 9\n    missing_number = total_sum - given_numbers_sum\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    words_original = 6000\n    time_original_minutes = 20\n    \n    words_needed = 9000\n    sick_typists = 2\n    working_typists = original_typists - sick_typists\n    \n    # Calculate words per minute for one typist\n    words_per_minute_per_typist = words_original / (time_original_minutes * original_typists)\n    \n    # Calculate the time needed for the remaining typists to type out 9000 words\n    total_time_needed = words_needed / (words_per_minute_per_typist * working_typists)\n    \n    return total_time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_cost = 0.96 * 8\n    price_per_lettuce = total_cost / 6\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    shoes_price = 97\n    saved_money = total_money - shoes_price\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    total_plants_initial = 11\n    removed_plants = 8\n    remaining_plants = total_plants_initial - removed_plants\n\n    initial_intervals = total_distance / (total_plants_initial - 1)\n    new_intervals = initial_intervals * (remaining_plants - 1)\n\n    return new_intervals\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13*60 + 52\n    end_time = 14*60 + 5\n    duration_in_minutes = end_time - start_time\n    cost_per_minute = 14\n    total_cost = duration_in_minutes * cost_per_minute\n    return total_cost\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for combo in product('23', repeat=3):\n        if '2' in combo and '3' in combo:\n            count += 1\n    return count\n    \nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_cost = pen_price + ruler_price\n    return total_cost\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 10, 17)  # assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    sundays_count = 0\n\n    # find the first Sunday after start_date\n    days_until_sunday = (6 - start_date.weekday() + 7) % 7\n    current_date = start_date + timedelta(days=days_until_sunday)\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=7)  # add one week\n    \n    return sundays_count\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # Maximum number a regular die can roll is 6\n    max_roll = 6\n    \n    # Final position Sam wants to reach\n    final_position = 25\n    \n    # Calculate minimum rolls required\n    # If we divide the final position by the max roll, we get a quotient \n    # (number of full sets of rolls) and possibly a remainder (an incomplete set of rolls, which would add 1 to the roll count)\n    min_rolls, remainder = divmod(final_position - 1, max_roll)  # Subtract 1 because Sam starts at position 1\n\n    # If there is a remainder, we need one more roll to complete the sequence\n    if remainder:\n        min_rolls += 1\n\n    return min_rolls\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of an apple and a peach\n    apple, peach = symbols('apple peach')\n    \n    # Define the equations based on the given information\n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (apple, peach))\n    \n    # Return the price of an apple\n    return solution[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of apple tarts and 's' be the number of strawberry tarts\n    a, s = symbols('a s')\n    # Given that she bought twice as many apple tarts as strawberry tarts\n    equation1 = Eq(a, 2 * s)\n    # The price difference between the tarts\n    price_diff = 0.40\n    # She spent an equal amount on apple tarts and strawberry tarts, \n    # so the total cost for apple tarts is equal to the total cost for strawberry tarts\n    equation2 = Eq(a * (s * price_diff), s * (a * price_diff))\n    # She paid a total of $40\n    equation3 = Eq((a * price_diff + s * price_diff + a * s), 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, s))\n\n    # Calculate the total number of tarts\n    total_tarts = solutions[a] + solutions[s]\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert times to seconds\n    light1_time = 30  # half a minute in seconds\n    light2_time = 45  # 0.75 minutes in seconds\n    light3_min_time = 30  # at least 30 seconds\n\n    # Common time for all three lights in seconds is 9 minutes, which is 540 seconds\n    common_time = 540\n\n    # Find least common multiple of first two light times\n    lcm_light12 = lcm(light1_time, light2_time)\n\n    # Third light change time must be a divisor of the common time (9 minutes)\n    # and must also be greater than or equal to light3_min_time (30 seconds)\n    for third_light_time in range(light3_min_time, common_time + 1):\n        if common_time % third_light_time == 0 and lcm(lcm_light12, third_light_time) == common_time:\n            return third_light_time\n\n    # If no time is found (which shouldn't happen), return None\n    return None\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    children_before_henry = henry_position_from_left - 1\n    children_after_tony = total_children - tony_position_from_right\n\n    children_between_henry_tony = total_children - (children_before_henry + children_after_tony + 2)\n\n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_in_one_metre = 1000\n    metres = 2\n    \n    return millimetres_in_one_metre * metres\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    sum_factors = sum(divisors(20))\n\n    return sum_factors\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_pieces = symbols('total_pieces')\n    \n    # On the first day, he fits 20% of the pieces\n    # On the second day, he fits another 60 pieces\n    # After fitting those, the fitted to unfitted ratio is 2:5, we can express this as 2 * (unfitted) = 5 * (fitted)\n    # Let's denote fitted pieces as 'fitted' and unfitted pieces as 'unfitted'\n    # The number of fitted pieces after the second day is 0.2 * total_pieces + 60\n    # The number of unfitted pieces after the second day is total_pieces - (0.2 * total_pieces + 60)\n    # Now we can set up the equation based on the condition 2 * unfitted = 5 * fitted\n    \n    fitted = 0.2 * total_pieces + 60\n    unfitted = total_pieces - fitted\n    equation = Eq(2 * unfitted, 5 * fitted)\n    \n    # Solve the equation for total_pieces\n    solution = solve(equation, total_pieces)\n    \n    return int(solution[0])\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    \n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment_percent = 30 / 100\n    repayment_amount = initial_loan * repayment_percent\n    remaining_debt = initial_loan - repayment_amount\n    return remaining_debt\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    meeting_time = 10  # hours\n\n    distance = (jack_speed + rose_speed) * meeting_time\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Define the number of legs each animal has\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Define the number of each animal, except birds\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculate the total legs of cats, dogs, and rabbits\n    total_legs = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n    \n    # Subtract the total legs of cats, dogs, and rabbits from 28 to find the bird legs count\n    bird_leg_count = 28 - total_legs\n    \n    # Calculate the number of birds by dividing the bird leg count by the number of legs per bird\n    birds = bird_leg_count // bird_legs\n\n    return birds\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    # Define the number to find the odd factors\n    number = 24\n    # Calculate the sum of the odd factors\n    n = sum(factor for factor in range(1, number + 1) if number % factor == 0 and factor % 2 != 0)\n    # Return the result\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    # Let's use variables for the entitlements of cards after each round\n    # Originally Melvin starts with 40 cards\n    original_cards_melvin = 40\n\n    # Melvin gains 5/8 more than his original number of cards from Nelson\n    gained_from_nelson = (5 / 8) * original_cards_melvin\n    melvin_after_first_round = original_cards_melvin + gained_from_nelson\n\n    # Melvin and Nelson each lose 1/4 of Melvin's original number of cards to Oliver\n    lost_to_oliver = (1 / 4) * original_cards_melvin\n    melvin_after_second_round = melvin_after_first_round - lost_to_oliver\n    nelson_after_second_round = -gained_from_nelson - lost_to_oliver\n\n    # Melvin gains 1/8 of his original number of cards from Nelson\n    gained_from_nelson_final = (1 / 8) * original_cards_melvin\n    melvin_final = melvin_after_second_round + gained_from_nelson_final\n    nelson_final = nelson_after_second_round - gained_from_nelson_final\n\n    # Now, Melvin, Nelson, and Oliver each have the same number of cards\n    # Thus, Oliver must have also ended up with the same number as Melvin and Nelson at final count\n    oliver_final = melvin_final\n    \n    # Since we know how many cards Melvin has we can deduce Nelson and Oliver's original number of cards\n    nelson_original_cards = melvin_final - nelson_final\n    oliver_original_cards = melvin_final - oliver_final\n\n    # The total number of cards they had at first\n    total_original_cards = original_cards_melvin + nelson_original_cards + oliver_original_cards\n\n    return total_original_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    cards = [6, 12, 35, 175, 245, 300]\n    combos_2 = list(combinations(cards, 2))\n    combos_3 = list(combinations(cards, 3))\n\n    products_2 = {prod(combo) for combo in combos_2}\n    products_3 = {prod(combo) for combo in combos_3}\n\n    common_product = products_2.intersection(products_3).pop()\n\n    # Find the cards not selected by either girl\n    not_picked = next(card for card in cards if common_product % card != 0)\n\n    return not_picked\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    return (2 * 5 + 1 * 5) == ((2 + 1) * 5)\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    polly_age = 20  # Polly's age when the first child was born\n    child_ages_sum = 0\n\n    # Increment Polly's age and calculate children's ages sum until Polly's age equals the sum\n    while polly_age != child_ages_sum:\n        polly_age += 1\n        child_ages_sum = (polly_age - 20) + (polly_age - 22) + (polly_age - 24)\n\n    return polly_age\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20 * 5\n    present_weight = 20\n    weight_without_presents = total_weight_with_presents - present_weight\n    return weight_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - big_boxes * 6) // 4\n        if big_boxes * 6 + small_boxes * 4 == 50 and big_boxes + small_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Let's denote the current combined age of 2 dogs as x.\n    # Four years ago, their combined age was x - 8 (because we take away four years for each dog)\n    # According to the problem, four years ago their combined age was 10.\n    # So x - 8 = 10 -> x = 18 (Current combined age of the 2 dogs)\n\n    # Now we need to determine their combined age in 2 years.\n    # If the current combined age is 18, in 2 years, the combined age will be 18 + 2*2 (2 years for each dog)\n    combined_age_in_2_years = 18 + 4\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5*4 + 6*8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    eq = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n\n    solution = solve(eq, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x, the larger number be y\n    # So we have two equations:\n    # x - y = -39 (difference between the two numbers)\n    # x + y = 59 (sum of the two numbers)\n\n    # By solving the two linear equations:\n    # x = (59 - 39) / 2\n    # y = (59 + 39) / 2\n\n    x = (59 - 39) / 2\n    return int(x)\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    product_ABC = 30 * 35 * 42  # A*B*C*C*B*A = A^2 * B^2 * C^2\n\n    # Since A*B*C*C*B*A is the product of squares, we need to take the square root to get A*B*C\n    ABC = int(product_ABC ** 0.5)\n\n    # Knowing that A * B = 30, B * C = 35, and C * A = 42, we can find A, B, and C by dividing ABC by each product\n    A = ABC // (30 * 35) * 30\n    B = ABC // (30 * 42) * 35\n    C = ABC // (35 * 42) * 42\n\n    # Sum up A, B, and C to get the answer\n    ans = A + B + C\n    return ans\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution(0, 0)  # Replace 0, 0 with any values for x and y to get a specific answer."
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    import math\n    ans = math.factorial(10)\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n    \n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    \n    solutions = solve((equation1,), (cora, qingle))\n    \n    difference = abs(solutions[cora] - solutions[qingle])\n    \n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10):  # a can't be 0 as it's the hundredth place digit\n        for b in range(10):  # b can be 0-9\n            for c in range(10):  # c can be 0-9\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0\n    b = 0\n    \n    # It also passes through (4,8), so we can find the slope m by rise over run\n    m = 8 / 4  # y2 - y1 / x2 - x1\n    \n    # The linear equation y = mx + b can now be written with the values for m and b\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    jane, eric = symbols('jane eric')\n    \n    # Initial ratio of Jane's to Eric's seashells\n    ratio_initial = Eq(jane, (5/7) * eric)\n    \n    # New ratio after Eric gives Jane 6 seashells\n    ratio_after = Eq(jane + 6, (11/13) * (eric - 6))\n    \n    # Solve the system of equations\n    solutions = solve((ratio_initial, ratio_after), (jane, eric))\n    \n    # Total number of seashells they have\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    # Initialize variables\n    largest_number = 0\n    warren_add = 20\n    naida_subtract = 1\n    current_number = 0\n\n    # Loop to find the largest number\n    while warren_add > 0:\n        # Warren adds to the number\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n\n        # Naida subtracts from the number\n        current_number -= naida_subtract\n\n        # Update the add and subtract values\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate  # 3 times faster\n\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    \n    time_to_fill = 1 / total_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    primes = [48, 925, 38, 435]\n    two_count = 0\n    five_count = 0\n\n    for prime in primes:\n        while prime % 2 == 0:\n            prime = prime // 2\n            two_count += 1\n        while prime % 5 == 0:\n            prime = prime // 5\n            five_count += 1\n\n    return min(two_count, five_count)\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [5, 3, 9, 4, 8]\n    min_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0 and number < min_even_number:\n            min_even_number = number\n\n    return min_even_number\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin_pupils = piano_pupils // 4\n\n    pupils_who_play_an_instrument = (piano_pupils + violin_pupils) - piano_and_violin_pupils\n    pupils_who_play_neither = total_pupils - pupils_who_play_an_instrument\n\n    return pupils_who_play_neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    years = 11\n\n    total_amount = principal * (1 + interest_rate * years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, integrate, sqrt\n\n    # Define the symbol for integration\n    x = symbols('x')\n\n    # The integrand is the length of the line segment from the right-angle vertex\n    # Since it's an isosceles right triangle, y = x creates a line dividing the triangle\n    # The condition that the distance must be less than 1 from the right-angle vertex\n    # is captured by a quarter circle with radius 1, between x=0 and x=1\n    prob_area = integrate(sqrt(1 - x**2), (x, 0, 1))\n    \n    # The area of the whole triangle is (base * height) / 2\n    total_area = (2 * 2) / 2\n\n    # The probability is the ratio of the desired area to the total area\n    probability = prob_area / total_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for D in range(1, 10):  # D can't be 0 because it's the last digit\n        for A in range(1, 10):  # A can't be 0 because it's the first digit\n            for B in range(0, 10):\n                for C in range(0, 10):\n                    if A == D / 4 and B == A - 1 and len(set([A, B, C, D])) == 4:\n                        ABCD = 1000 * A + 100 * B + 10 * C + D\n                        DCBA = 1000 * D + 100 * C + 10 * B + A\n                        if ABCD * 4 == DCBA:\n                            return ABCD\n                        \nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    maths_a = 10\n    english_a = 15\n    both_a = 2\n\n    either_a = maths_a + english_a - both_a\n\n    return either_a\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Hannah left school\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    # Hannah caught the bus\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    # Hannah got off the bus\n    bus_trip = timedelta(minutes=18)\n    get_off_bus = catch_bus + bus_trip\n    # Hannah got home\n    get_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate total walking time\n    first_walk = catch_bus - leave_school\n    second_walk = get_home - get_off_bus\n    total_walk = first_walk + second_walk\n\n    return total_walk.seconds // 60  # convert timedelta seconds to minutes\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 200):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    freddie_number = symbols('freddie_number')\n\n    equation = Eq(freddie_number / 3 + 10, 25)\n    \n    result = solve(equation, freddie_number)\n\n    return result[0]\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    # Given numbers excluding a are: 2, 3, 8, 4, 7, 6\n    # Mean is given to be 5\n    # Mean formula is: mean = sum_of_elements / number_of_elements\n    \n    given_numbers_sum = 2 + 3 + 8 + 4 + 7 + 6  # Sum of the given numbers excluding a\n    mean = 5\n    total_elements = 6 + 1  # Including the unknown 'a'\n\n    # To find total sum including 'a', we multiply mean with total number of elements\n    total_sum_including_a = mean * total_elements\n    \n    # Now to find 'a', we subtract the sum of given numbers from the total sum including 'a'\n    a = total_sum_including_a - given_numbers_sum\n    \n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    return (2030452 - 30000 - 452) // 2\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    num_pieces = 2\n    length_per_piece_m = (total_length_cm / num_pieces) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Lina is incorrect because she might pick a sock of the third color in the third draw.\n    # To ensure at least one pair of the same color, Lina needs to consider the worst case scenario with pigeonhole principle.\n    # If Lina takes one sock of each color (white, grey, black), she still has no pair. \n    # But the next sock (4th sock) she takes out must match one of the colors she already has.\n    \n    # so at least 4 socks should be taken out to ensure a pair of the same color\n    return 4\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # Including Victoria herself\n    total_rows = 1 + 1 + 8  # Including Victoria's row\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # (x + 3)/4 * 9 = 81\n    equation = Eq(((x + 3) / 4) * 9, 81)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator = sum(1/(i*(20-i+1)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1/3)\n    remaining_candy = remaining_after_lily - given_to_brother\n    return remaining_candy\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for speed of Peter and the time it takes for the remaining distance\n    speed, time_to_reach = symbols('speed time_to_reach')\n    \n    # Create equations based on the information provided\n    distance_covered = 6300 - 1800  # Distance covered from 8.00 am to 8.30 am\n    equation1 = Eq(speed * 0.5, distance_covered)  # speed * time = distance\n    \n    # Solve the equation to find Peter's speed\n    speed_solution = solve(equation1, speed)\n    peter_speed = speed_solution[0]  # Peter's speed in m/min\n\n    # Calculate the time it takes to cover the remaining distance\n    remaining_distance = 1800  # Distance remaining at 8.30 am\n    equation2 = Eq(peter_speed * time_to_reach, remaining_distance)\n    \n    # Solve the equation to find the time to reach\n    time_to_reach_solution = solve(equation2, time_to_reach)\n    time_to_reach = time_to_reach_solution[0]  # Time to reach in minutes\n    \n    # Peter starts at 8:00 am and we already have 30 minutes past, so add the time\n    # it takes to reach the friend's house to 8:30 am\n    time_started = 8 * 60  # Convert 8.00 am to minutes\n    time_at_830am = time_started + 30  # Time at 8.30 am in minutes\n    arrival_time_in_minutes = time_at_830am + time_to_reach\n    \n    # Convert the time back to hours and minutes format\n    arrival_hour = int(arrival_time_in_minutes // 60)\n    arrival_minute = int(arrival_time_in_minutes % 60)\n    \n    return f\"{arrival_hour}:{arrival_minute:02d}\"\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_3_tests = 75 * 3\n    marks_two_tests = 172\n    marks_remaining_test = total_marks_3_tests - marks_two_tests\n\n    return marks_remaining_test\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    # Mr. Smith's mixture\n    mr_smith_sugar = 300 * 0.5 + 600 * 0.2\n    mr_smith_total_volume = 300 + 600\n    \n    # Calculate Mr. Smith's sugar percentage\n    mr_smith_sugar_percentage = mr_smith_sugar / mr_smith_total_volume\n    \n    # Mrs. Smith's mixture\n    # Let's denote the unknown sugar percentage as x in Mrs. Smith's 300mL drink\n    # So the amount of sugar in that drink is 300 * (x/100)\n    # The amount of sugar in Mrs. Smith's 700mL 10% sugar drink is 700 * 0.1\n    # Total amount of sugar in Mrs. Smith's mixture = 700 * 0.1 + 300 * (x/100)\n    # Total volume of Mrs. Smith's mixture = 700 + 300\n    mrs_smith_sugar = 700 * 0.1 + 300 * (x / 100)\n    mrs_smith_total_volume = 700 + 300\n    \n    # Set up the equation such that both sugar percentages are equal\n    # (700 * 0.1 + 300 * (x/100)) / (700 + 300) = mr_smith_sugar_percentage\n    # Solve for x\n    x = (mr_smith_sugar_percentage * (mrs_smith_total_volume) - 700 * 0.1) / 3\n    \n    # Return the value of x rounded to the nearest two decimal places\n    return round(x, 2)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age_when_10 = 10\n    may_current_age = 7\n    kenny_age_advantage_over_brother = 2\n\n    # let kenny's younger brother's age be x when May is 10\n    # then kenny's age when May is 10 would be x + kenny_age_advantage_over_brother\n    # according to the condition given: \n    # sum of kenny's and his brother's age when May is 10 is 3 times May's age when she is 10\n    # x + (x + kenny_age_advantage_over_brother) = 3 * may_age_when_10\n\n    # solving the equation for x\n    x = (3 * may_age_when_10 - kenny_age_advantage_over_brother) // 2\n    kenny_age_when_may_is_10 = x + kenny_age_advantage_over_brother\n\n    # difference between Kenny and May's age remains constant \n    # thus the age difference when May is 10 is the same as it is now\n    kenny_current_age = kenny_age_when_may_is_10 - (10 - may_current_age)\n    age_difference = kenny_current_age - may_current_age\n\n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Cost per unit for muffins and donuts\n    cost_muffin = 6 / 3\n    cost_donut = 10 / 7\n    \n    # Initially, we don't know how many of each was bought, but we're given the excess donuts count\n    # Let's call the number of muffins m, then donuts will be m + 54\n    # Amy spent half her money on donuts and half on muffins\n    # So, if x is total money Amy had, half of it 1/2 * x is spent on each\n    \n    # Money spent on muffins is equal to money spent on donuts\n    # muffins * cost_muffin = (muffins + 54) * cost_donut\n    # Let's solve this equation for muffins (m) given the price per muffin and per donut\n\n    m = 0\n    while True:\n        if m * cost_muffin == (m + 54) * cost_donut:\n            break\n        m += 1\n        \n    # Now that we have muffins, we find total money spent as m * cost_muffin (which equals donuts * cost_donut)\n    total_money_spent = m * cost_muffin\n    \n    # Amy had twice the amount she spent\n    total_money = total_money_spent * 2\n    \n    return total_money\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Total cost\n    total_cost = 10  # in pounds\n    total_cost_pence = total_cost * 100  # convert to pence\n    \n    # Amount of bags\n    weight_per_bag = 250  # in grams\n    total_weight = 5000  # in grams (5 kg)\n    num_bags = total_weight / weight_per_bag\n    \n    # Income per bag and total income\n    income_per_bag = 65  # in pence\n    total_income = num_bags * income_per_bag\n    \n    # Profit calculation\n    profit = total_income - total_cost_pence\n    \n    # Profit percentage calculation\n    profit_percentage = (profit / total_cost_pence) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Since there are 14 apples to be distributed,\n    # and there are 5 children that must get at least one apple each,\n    # we will first give each child one apple.\n    total_apples = 14\n    children_count = 5\n    apples_distributed = children_count  # one apple for each child\n\n    # Remaining apples to be distributed after each child has one\n    remaining_apples = total_apples - apples_distributed\n\n    # The child who gets the most apples will be the one who gets\n    # the remaining apples plus the initial apple already given.\n    max_apples_to_one_child = remaining_apples + 1\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between any two consecutive teeth is the same.\n    # If the distance between the 4th and 9th teeth is 30 mm,\n    # this means there are 9 - 4 = 5 gaps between them.\n    num_gaps = 9 - 4\n    \n    # Therefore, each gap is 30 mm / 5 gaps.\n    gap_distance_mm = 30 / num_gaps\n    \n    # To find the total length of the comb, we need the distance for\n    # 99 gaps (since there are 100 teeth and 99 gaps).\n    total_length_mm = gap_distance_mm * (100 - 1)\n    \n    # Convert the total length from millimeters to centimeters.\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # On 1st December 1996, mum was 40 years old\n    # Therefore, mum was born in 1956 (1996 - 40)\n    # On 1st December 2008, grandmother was 80 years old\n    # Therefore, grandmother was born in 1928 (2008 - 80)\n    # We need to find out how old grandmother was when mum was 25\n    # Mum was 25 years old in 1981 (1956 + 25)\n    # Grandmother's age in 1981 was 1981 - 1928\n    grandmother_age_when_mum_was_25 = 1981 - 1928\n    \n    return grandmother_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Number of ice-cream cones\n    total_cones = 5\n    # Number of friends\n    total_friends = 3\n    # Since each friend must get at least one ice-cream cone,\n    # we subtract three cones from the total (one for each friend)\n    remaining_cones = total_cones - total_friends\n\n    # Now we want to distribute the remaining 2 cones to 3 friends,\n    # which is a problem of distributing identical objects into distinct boxes.\n    # It's similar to the \"stars and bars\" combinatorial problem,\n    # where we need to calculate combinations with repetition:\n    # C(n+k-1, k), where n is the number of boxes and k is the number of identical items.\n\n    n = total_friends\n    k = remaining_cones\n\n    # Calculate the factorial of a number\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    # Calculate combinations using the factorial function\n    def combinations(n, k):\n        return factorial(n + k - 1) // (factorial(k) * factorial(n - 1))\n\n    # Calculate the number of ways to distribute the cones\n    num_ways = combinations(n, k)\n    return num_ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sold = total_vegetables * 2/3\n    tuesday_sold = (total_vegetables - monday_sold) * 2/5\n    total_sold = monday_sold + tuesday_sold\n    return total_sold\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n\n    # Total ways 5 people can line up\n    total_ways = factorial(5)\n    \n    # Ways in which the two people who refuse to stand next to each other can be arranged\n    # We consider them as a single unit, so we have 4 units to arrange,\n    # and this unit itself can be arranged in 2 ways (as the two people can switch places)\n    together_ways = factorial(4) * 2\n    \n    # Subtracting the invalid arrangements from the total arrangements\n    valid_ways = total_ways - together_ways\n    \n    return valid_ways\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Worst case: pick 15 balls of each of the first four colors + 12 balls of the fifth\n    # This way, we ensure that we haven't picked 16 balls of the same color or 13 balls of another color\n    worst_case_without_ensuring = (15 * 4) + 12 \n    # Now, we pick one more ball to ensure we have at least 16 of one color or 13 of another.\n    ans = worst_case_without_ensuring + 1 \n    return ans\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total_sum = sum(5 * i if i % 2 != 0 else -5 * i for i in range(1, 172))\n    return total_sum\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the amount of water in container P and q be the amount in Q\n    p, q = symbols('p q')\n\n    # Given that P has 4 times as much water as Q\n    equation1 = Eq(p, 4 * q)\n    # P contains 2700ml more water than Q\n    equation2 = Eq(p - q, 2700)\n\n    # Solve the system of equations for q\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits / 4\n    remaining_for_freddie = total_biscuits - given_to_sister\n    return remaining_for_freddie\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent / (1 - remaining_fraction)\n\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    total_coins = joann_coins + sana_coins + nancy_coins\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_speed_ratio = 3 / 5\n\n    lucas_walk = (total_distance - remaining_distance) * lucas_to_mother_speed_ratio / (1 + lucas_to_mother_speed_ratio)\n\n    return lucas_walk\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    n = 30  # Number of terms\n    a1 = 50  # First term\n    d = -1   # Common difference\n\n    # Sum of first n terms of an arithmetic sequence is given by: n/2 * (2a1 + (n-1)d)\n    sum_n = n / 2 * (2 * a1 + (n - 1) * d)\n    \n    return int(sum_n)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    pizzas_per_person = pizzas_initial / people_initial\n    pizzas_needed = pizzas_per_person * people_final\n\n    return round(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n    \n    while teams > 1:\n        teams /= 2\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n    return total_salary\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for n in range(1, 2017):\n        if math.sqrt(n * 72).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    # Each student in the big class receives 2 apples\n    # Each student in the small class receives 2 apples\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)\n\n    # Each student in the big class receives 3 oranges\n    # Each student in the small class receives 2 oranges\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem:\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7) -> because there's 1 child left, so total is one less than a multiple of 7\n    # x ≡ 7 (mod 8) -> because there's 1 child left, so total is one less than a multiple of 8\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    x, mod = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    \n    # Let Efron's current age be x years. \n    # Then Danny's current age will be x + 30 years.\n    # Given ratio of Danny's to Efron's age is 8:3.\n    # So, x + 30 = 8/3 * x\n    # Solve for x\n    x = solve(Eq(8/3 * symbols('x'), symbols('x') + 30))[0]\n    \n    # Calculate the future age of Danny and Efron\n    # after 'years' years when their ages are in the ratio 5:3.\n    equation = Eq((x + 30 + years) / (x + years), 5/3)\n\n    # Solve for the number of years until the age ratio will be 5:3\n    solution_years = solve(equation, years)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_and_ruler = pencils * rulers\n    pencil_and_pen = pencils * pens\n    ruler_and_pen = rulers * pens\n\n    ans = pencil_and_ruler + pencil_and_pen + ruler_and_pen\n\n    return ans\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage games calculation\n    teams_in_each_group = 4\n    games_per_group = (teams_in_each_group * (teams_in_each_group - 1)) // 2\n    total_groups = 8\n    group_stage_games = games_per_group * total_groups\n\n    # Knockout round games calculation\n    teams_in_knockout = 16\n    knockout_stage_games = teams_in_knockout - 1  # since every game eliminates one team\n\n    # Summing group stage and knockout round games\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10:  # make sure it's a valid digit\n            for third_digit in range(10):  # loop through possible values for third digit\n                total_sum = first_digit + second_digit + third_digit\n                if 9 < total_sum < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    n = symbols('n')\n    matches_eq = Eq(n*(n-1)/2, 15)\n    solutions = solve(matches_eq, n)\n    return max(solutions)\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import primefactors, factorint\n    \n    factors_dict = factorint(224)\n    num_factors = 1\n    for power in factors_dict.values():\n        num_factors *= (power + 1)\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    # Let's denote the original number as x.\n    # According to the problem statement:\n    # x - (30/100)*x = 210\n    # Which can be simplified to:\n    # x * (1 - 0.30) = 210\n    # So, we can calculate x using:\n    x = 210 / (1 - 0.30)\n    return int(x)\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    # Since all questions are answered, x + y = 10\n    # Points for correct answers: 6x\n    # Points for incorrect answers: -2y\n    # Total points: 6x - 2y = 44\n    # From the first equation we have y = 10 - x\n    # Substitute y in the second equation we get:\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x = 64\n    # x = 8\n\n    x = (44 + 20) // 8\n    return x\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of triangles as 't', quadrilaterals as 'q', and pentagons as 'p'.\n    t, q, p = symbols('t q p')\n\n    # We know the number of pentagons 'p' is 2\n    p = 2\n\n    # The number of quadrilaterals 'q' is 82 more than the number of triangles 't'\n    equation1 = Eq(q, t + 82)\n\n    # Total number of sides for all shapes is 394\n    # Triangles have 3 sides, Quadrilaterals have 4 sides, Pentagons have 5 sides\n    equation2 = Eq(3 * t + 4 * q + 5 * p, 394)\n\n    # Solve for 't' and 'q'\n    solutions = solve((equation1, equation2), (t, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    return sum(numbers)\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # Loop for tens digit (cannot be 0 for two-digit numbers)\n        for ones in range(0, 10):  # Loop for ones digit\n            if tens == ones + 3:  # Check tens place is larger than ones place by 3\n                count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n    third_term = second_term + difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # since there are 4 posts, there are 3 gaps between them\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5 and 7\n    for i in range(100, 1000):\n        if i % lcm == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    total_students = 150\n    teams_1_boy = 15\n    teams_2_or_more_boys = 27\n\n    # Calculate the number of all-boy teams\n    all_boy_teams = teams_2_or_more_boys - teams_1_boy\n    # The number of all-girl teams is half the number of all-boy teams\n    all_girl_teams = all_boy_teams // 2\n\n    # Total teams\n    total_teams = total_students // 3\n\n    # Teams with girls (1 or 2 girls)\n    teams_with_girls = total_teams - all_boy_teams\n\n    # Calculate the number of girls\n    # Every team with only 1 boy has 2 girls\n    girls_in_1_boy_teams = teams_1_boy * 2\n    # Every all-girl team has 3 girls\n    girls_in_all_girl_teams = all_girl_teams * 3\n    # Add them together to find the total number of girls\n    girls_total = girls_in_1_boy_teams + girls_in_all_girl_teams\n\n    return girls_total\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the base 10 numbers to base 7 strings\n    num_61_base7 = int('61', base=7)\n    num_34_base7 = int('34', base=7)\n\n    # Subtract the two numbers in base 10\n    difference_base10 = num_61_base7 - num_34_base7\n\n    # Convert the result back to base 7\n    ans = format(difference_base10, 'b7')\n\n    return ans\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the speed Ben needs to cycle to arrive at 9am\n    # Let 'd' be the distance from Town A to Town B\n    s, d = symbols('s d')\n\n    # If Ben cycles at 10 km/h, he takes more time to arrive at 10 am\n    # If he cycles at 15 km/h, he takes less time to arrive at 8 am\n    # Time difference between arriving at 10 am and 8 am is 2 hours\n    # Thus, distance d can be written as:\n    # d = 10 * (arriving_time_at_10kmph) = 10 * (arriving_time_at_s_km/h + 1)\n    # d = 15 * (arriving_time_at_15kmph) = 15 * (arriving_time_at_s_km/h - 1)\n\n    # Setting up the equations based on above comments\n    equation1 = Eq(d, 10 * (s + 1))\n    equation2 = Eq(d, 15 * (s - 1))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (s, d))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens,\n    # The weight of 1 dog can be converted to rabbits and then to chickens:\n    # 1 dog = 8 rabbits = 8 * 2 chickens = 16 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Since Dilly cannot distinguish between left and right,\n    # we only focus on the colors.\n    # Worst case scenario would be to pick all the blue gloves first, then the green.\n    # This is because there are more green gloves than blue gloves.\n    # If we pick all blue gloves (1 left-hand + 3 right-hand) that's 4 gloves,\n    # and still no guaranteed pair since they could be all left or right-handed.\n    # Once we pick one green glove, we might still not have a pair if it's left-handed\n    # (since we could have all the right blue gloves), so we pick another glove.\n    # In the worst case, we now have:\n    # 4 blue (all right or all left) + 2 green = 6 gloves\n    # And we are guaranteed to have at least one pair.\n\n    return 6\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_students_before = 5\n    candies_each_before = 12\n\n    total_candies = total_students_before * candies_each_before\n\n    total_students_after = total_students_before + 1  # 1 more student joins\n    candies_each_after = total_candies // total_students_after\n\n    return candies_each_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    \n    jacob_height = (raj_height + david_height) / 2\n    \n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    # We need to find the smallest number that gives a remainder of 3 when divided by 4,\n    # a remainder of 4 when divided by 5, and a remainder of 6 when divided by 7.\n    \n    # We will use the Chinese Remainder Theorem to solve this problem.\n    # However, since we don't have to implement the theorem from scratch,\n    # we can use the sympy library to find the solution easier.\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 4), x ≡ 4 (mod 5), and x ≡ 6 (mod 7)\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    result = solve_congruence(*congruences)\n    \n    # The result is a tuple where the first element is the smallest positive solution\n    return result[0]\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 1.20\n    depreciation_rate = 0.04\n    number_of_years = 5\n\n    value_after_years = initial_value * (1 - depreciation_rate)**number_of_years\n\n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Let n be the size of the square (number of students in one row or column)\n    # Since the outer layer consists of boys and the next layer of girls and so on,\n    # The number of boys will be: (n^2 + (n-2)^2 + (n-4)^2 + ...)\n    # The number of girls will be: ((n-1)^2 + (n-3)^2 + (n-5)^2 + ...)\n    # We need to find n such that boys - girls = 52\n\n    # Starting with an assumption that n is odd\n    # and incrementing by 2 to ensure alternate gender layers\n    n = 1\n    while True:\n        # Calculate the number of boys and girls up to n\n        boys = girls = 0\n        for i in range(n, 0, -2):\n            boys += i ** 2\n        for i in range(n-1, 0, -2):\n            girls += i ** 2\n        \n        # Check if the current configuration satisfies the condition\n        if boys - girls == 52:\n            # The total number of students is n^2\n            total_students = n**2\n            return total_students\n        \n        # Increase n to check the next possible configuration\n        n += 2\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Eugene and Yuna's pins\n    e, y = symbols('e y')\n    \n    # Eugene had 3 times as many pins as Yuna initially\n    equation1 = Eq(e, 3 * y)\n    \n    # After Yuna bought 76 pins, she had 7/9 as many pins as Eugene\n    equation2 = Eq(y + 76, (7/9) * e)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, y))\n    \n    return solutions[e]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {char: word.count(char) for char in set(word)}\n    total_ways = factorial(len(word))\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    return total_ways\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n    ans = hundreds * 100 + tens * 10 + ones\n    return ans\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percent = 35\n\n    sale_price = original_price * (1 - discount_percent / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # The sum of the digits divisible by 9 implies that the missing digit A must make the sum of all digits divisible by 9.\n    digit_sum = 1 + 2 + 3 + 4 + 5\n    A = 0  # We initialize A with 0 and increase if necessary\n\n    # We keep increasing A until the total sum is divisible by 9\n    while (digit_sum + A) % 9 != 0:\n        A += 1\n\n    # Now we need to figure out the remainder when the number is divided by 4.\n    # The last two digits of the six-digit number determine the remainder when divided by 4\n    \n    # Extract the last two digits (which are the 5 followed by our A)\n    last_two_digits = int('5' + str(A))\n\n    # The remainder when last_two_digits is divided by 4 gives us the answer\n    remainder_by_4 = last_two_digits % 4\n    \n    return remainder_by_4\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To win, Kelly must ensure that she leaves Dan with a number of matches\n    # that is multiple of 3 in his turn, so Kelly can always follow a strategy\n    # to keep the number of matches multiple of 3 after her turn.\n    # So she should try to leave 10 or 9 matches for Dan, which is not a multiple of 3.\n    # To leave 10 matches, she has to pick 1 match; to leave 9 matches, she has to pick 2 matches.\n    # Picking 2 is better for her as that is the only way to ensure that she can keep leaving a multiple of 3\n    \n    # Pick 2 matches in the first turn.\n    matches_to_pick = 2\n    return matches_to_pick\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # Let the total number of flowers be x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Equation based on the information given\n    equation = Eq(1/2 * x - 4/7 * (1/2 * x), 6)\n    # Solve the equation for x\n    flowers_total = solve(equation, x)\n    # Get the total number of flowers (it should be a list with one element)\n    return flowers_total[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = Fraction(5) + Fraction(1,7) + Fraction(3) + Fraction(3,11) + Fraction(1) + Fraction(13,23)\n    denominator = Fraction(3) + Fraction(3,7) + Fraction(2) + Fraction(2,11) + Fraction(1) + Fraction(1,23)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    number_of_kids = 3\n    # The number of different arrangements (permutations) of n objects is n!\n    ans = factorial(number_of_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solution = solve(equation, square)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    # Let's denote the number of cars as x and the number of motorcycles as y.\n    # Each car has 4 wheels and each motorcycle has 2 wheels.\n    # We have two equations:\n    # x + y = 27 (total vehicles)\n    # 4x + 2y = 78 (total wheels)\n    \n    # from the first equation, we can express y as y = 27 - x\n    \n    # Substituting the value of y from the first equation to the second equation:\n    # 4x + 2(27 - x) = 78\n    # 4x + 54 - 2x = 78\n    # 2x + 54 = 78\n    # 2x = 24\n    # x = 12\n    \n    # The number of cars x is:\n    x = (78 - 2*27) / 2\n    return x\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variables\n    jason, nicole = symbols('jason nicole')\n\n    # Jason started with 20 stickers\n    jason_initial = 20\n\n    # After Nicole gave Jason 18 stickers, Jason's new amount\n    jason_after = jason_initial + 18\n\n    # After giving away 18 stickers, Nicole had Jason's amount minus 5\n    nicole_after = jason_after - 5\n\n    # Nicole's initial amount was her amount after giving away 18 stickers, plus 18\n    nicole_initial = nicole_after + 18\n\n    # We know Jason had less stickers than Nicole initially, so set up the inequality\n    inequality = nicole > jason_initial\n\n    # Solve the equation to find the number of stickers Nicole started with\n    stickers_nicole_started_with = solve(Eq(nicole_initial, jason + 18), (jason, nicole))\n\n    # Nicole's initial sticker count is what we want\n    nicole_stickers_initial = stickers_nicole_started_with[nicole]\n\n    # Given Nicole had more stickers than Jason initially, let's find the correct solution\n    solutions = [nicole_stickers_initial for (jason, nicole) in stickers_nicole_started_with if inequality.subs(nicole, nicole_stickers_initial)]\n\n    # Return the correct solution - Nicole's initial sticker count\n    return solutions[0]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume is length * breadth * height (V_original = L * B * H)\n    # New volume is (1.1 * L) * (4/5 * B) * (11/10 * H) = 1.1 * 0.8 * 1.1 * V_original\n    new_volume_ratio = 1.1 * 0.8 * 1.1\n    \n    # Expressing the new volume as a percentage of the original volume\n    new_volume_percentage = new_volume_ratio * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n\n    # Convert total distance to meters\n    total_distance_m = total_distance_km * 1000\n\n    # The number of intervals is one less than the number of marshals\n    num_intervals = num_marshals - 1\n\n    # Distance between two marshals is the total distance divided by the number of intervals\n    distance_between_marshals = total_distance_m / num_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7  # Incorrect average times number of pupils\n    incorrect_total -= 81  # Subtracting the incorrect score\n    incorrect_total += 18  # Adding the correct score\n    correct_average = incorrect_total / 7  # Correct average\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    years = 2\n\n    # Formula for compound interest: A = P(1 + r/n)^(nt)\n    # Since interest is compounded yearly, n = 1.\n    # Calculate amount at the end of first year\n    amount_end_first_year = principal * (1 + rate)\n    \n    # Calculate interest at the end of second year\n    amount_end_second_year = amount_end_first_year * (1 + rate)\n    \n    # Interest earned in the second year  \n    interest_second_year = amount_end_second_year - amount_end_first_year\n\n    return interest_second_year\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # Time in minutes to paint one picture\n    total_time = 80  # Total time in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5) # Since 400 is a perfect square\n\n    red_tiles = green_tiles = 0\n\n    for layer in range(1, side_length // 2 + 1):\n        if layer % 2 == 1:  # Odd layers are red\n            red_tiles += (side_length - 2 * (layer - 1)) ** 2 - (side_length - 2 * layer) ** 2\n        else:  # Even layers are green\n            green_tiles += (side_length - 2 * (layer - 1)) ** 2 - (side_length - 2 * layer) ** 2\n\n    # Check the center tile if the side_length is odd\n    if side_length % 2 == 1:\n        red_tiles += 1\n\n    # Calculate the dominant color and the number of more tiles\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    fraction = 1 + 4/7\n    ans = round(fraction, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    index = (69 - 1) % len(recurring_sequence)\n    ans = int(recurring_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')  # Define the variable\n    remaining_sweets = y / 2  # Samantha gives half to her friend\n    return remaining_sweets\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 0.50\n    sales_day1 = 0.70\n    profit_day1 = 0.50\n    total_profit = 0.82 * planned_profit\n\n    # Let's denote the discount rate on the second day as 'discount'.\n    # We know that on the first day Ken made a 50% profit on 70% of goods.\n\n    profit_from_day1 = sales_day1 * profit_day1\n\n    # Remaining percentage of goods after the first day\n    remaining_goods = 1 - sales_day1\n\n    # Since the total profit is 82% of the planned 50% profit,\n    # we can write the second equation considering the remaining goods:\n    # (profit_from_day1 * sales_day1 + remaining_goods * (1 - discount)) = total_profit\n\n    # Solving for 'discount' gives us the discount rate for the second day.\n    discount = (profit_from_day1 + remaining_goods - total_profit) / remaining_goods\n\n    return discount * 100  # Converting to percentage\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    # Dylan's solution\n    mass_dylan = 300\n    concentration_dylan = 0.35\n    salt_dylan = mass_dylan * concentration_dylan\n    \n    # Daisy's solution\n    mass_daisy = 200\n    concentration_daisy = 0.50\n    salt_daisy = mass_daisy * concentration_daisy\n    \n    # Mix the solutions\n    total_salt = salt_dylan + salt_daisy\n    total_mass = mass_dylan + mass_daisy\n    concentration_mixed = total_salt / total_mass\n    \n    return concentration_mixed\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    initial_bottles = 48\n    total_bottles = initial_bottles\n    \n    empty_bottles = initial_bottles\n    borrowed_bottle = False\n\n    while empty_bottles >= 4 or (empty_bottles == 3 and not borrowed_bottle):\n        if empty_bottles < 4 and not borrowed_bottle:\n            empty_bottles += 1\n            borrowed_bottle = True\n        \n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles - new_bottles * 4 + new_bottles\n            \n    if borrowed_bottle:\n        total_bottles -= 1\n    \n    return total_bottles\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Vastco's sales increase from 2014 to 2015 is 32%\n    vastco_increase = 0.32\n    \n    # Vastco's sales were 68% more than Megacorp in 2014\n    ratio_2014 = 1.68\n    \n    # But only 44% more in 2015\n    ratio_2015 = 1.44\n    \n    # Let Megacorp's sales in 2014 be x, then Vastco's sales are 1.68x\n    # Megacorp's sales in 2015 will be y, we need to find the percentage increase from x to y\n    # Vastco's sales in 2015 will be 1.68x * (1 + 0.32) because of the 32% increase\n    # Since Vastco's 2015 sales are 1.44 times Megacorp's 2015 sales, we have 1.68x * (1 + 0.32) = y * 1.44\n\n    # We can solve this equation to find y in terms of x, which gives us the percentage increase for Megacorp\n    # y = (1.68x * (1 + 0.32)) / 1.44\n    y_over_x = (1.68 * (1 + vastco_increase)) / 1.44\n    \n    # The percentage increase for Megacorp is then (y/x - 1) * 100%\n    megacorp_increase_percentage = (y_over_x - 1) * 100\n    \n    return megacorp_increase_percentage\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits from 1 to 9\n    digits_1_9 = 9 * 1\n\n    # Calculate the number of digits from 10 to 99\n    digits_10_99 = (99 - 10 + 1) * 2  # Adding 1 because the range is inclusive\n\n    # Calculate the number of digits from 100 to 113\n    digits_100_113 = (113 - 100 + 1) * 3  # Adding 1 because the range is inclusive\n\n    # Sum all counts to find the total number of digits written\n    total_digits = digits_1_9 + digits_10_99 + digits_100_113\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number of pearls\n    pearls = symbols('pearls')\n\n    # Equations based on the problem statement\n    equation = Eq(1/2 * pearls + 1/4 * pearls + 1/6 * pearls + 3, pearls)\n\n    # Solve the equation to find the number of pearls\n    solutions = solve(equation, pearls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from math import factorial\n    C = factorial(4) # 4 people can enter the park in 4! ways\n    # Case 1: All four people enter through the same entrance (3 ways)\n    case1 = 3\n    # Case 2: Three people enter through one entrance and one through another (3 entrances pick 2 * 2 ways to choose which entrance has 1 person * 4 ways to select the person who enters alone)\n    case2 = 3 * 2 * 4\n    # Case 3: Two people enter through one entrance, and the other two each choose different entrances (3 ways to pick the entrance for the pair * 3 ways to arrange the remaining two people)\n    case3 = 3 * (factorial(3) // factorial(1)) * (factorial(2) // factorial(2))\n\n    return C - (case1 + case2 + case3)\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    black_rabbits, white_rabbits, grey_rabbits = symbols('black_rabbits white_rabbits grey_rabbits')\n\n    # Equations based on the problem statement\n    equation1 = Eq(black_rabbits, white_rabbits + 14)    # Black rabbits are 14 more than white rabbits\n    equation2 = Eq(grey_rabbits, white_rabbits - 2)      # Grey rabbits are 2 fewer than white rabbits\n    equation3 = Eq(black_rabbits + white_rabbits + grey_rabbits, 84) # The total number of rabbits\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (black_rabbits, white_rabbits, grey_rabbits))\n\n    # Return the number of white rabbits\n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the number of erasers John's brother have be x\n    x = Symbol('x')\n    \n    # John has x + 32 erasers\n    # The total is x + (x + 32) = 246\n    equation = x + (x + 32) - 246\n    \n    # Solve the equation for x\n    num_erasers_brother = solve(equation, x)[0]\n    \n    return num_erasers_brother\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Let x be the number of glasses broken by Peter\n    # Peter gets 1 dollar for each of the (100 - x) glasses delivered safely\n    # and pays 1 dollar for each of the x glasses broken\n    # The total amount Peter makes is therefore (100 - x) - x which is equal to 100 - 2x\n    # We know that Peter makes 92 dollars after delivering all glasses\n    # So, 100 - 2x = 92\n    # Therefore, 2x = 100 - 92\n    # Hence, x = (100 - 92) / 2\n    x = (100 - 92) // 2\n    return x\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Let x be the number Mayank thinks of\n    # According to the problem, 2*x + 4 = 40\n    # Now we perform inverse operations to find x\n\n    # Subtract 4 from both sides\n    result = 40 - 4\n\n    # Divide by 2 to get the original number\n    original_number = result / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change_from_12_pounds = (12 * 100) - total_cost  # convert £12 to pence\n    return change_from_12_pounds / 100  # convert pence back to pounds\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # A round-robin competition where each team plays every other team once means that\n    # the total number of matches is given by the combination of 'number of teams' taken 2 at a time\n    # nC2 = total_rounds, nC2 = n! / (2! * (n - 2)!)\n    # We need to find n such that nC2 = 45\n    # n*(n - 1) / 2 = 45\n    # n^2 - n - 90 = 0 (quadratic equation after simplification)\n    \n    # Define a function to solve the quadratic equation\n    def find_n(a, b, c):\n        # calculate the discriminant\n        d = b**2 - 4*a*c\n        # find two solutions\n        sol1 = (-b - d**0.5) / (2*a)\n        sol2 = (-b + d**0.5) / (2*a)\n        return sol1, sol2\n    \n    # Apply the quadratic formula to find n\n    n1, n2 = find_n(1, -1, -90)\n    \n    # The number of teams can only be positive, so we ignore negative or non-integer solutions\n    n = n2 if n2 > 0 and n2.is_integer() else n1\n    \n    return int(n)\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for x in range(1, 57, 2):\n        if x + (x + 2) + (x + 4) == 57:\n            return x\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Initialize the variables for possible divisors and the desired result\n    divisors = [2, 6, 1, 10, 5, 3]\n    result = 2\n\n    for divisor in divisors:\n        if divisor * result == 6:  # Check if the division leads to the desired result of 2\n            return divisor  # Return the correct divisor\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the initial number of boats, and y be the number of people per boat initially. \n    x, y = symbols('x y')\n    \n    # Equation 1: If the number of boats is (x - 1), each will take 9 people.\n    eq1 = (x - 1) * 9 - y * x\n    \n    # Equation 2: If the number of boats is (x + 1), each will take 6 people.\n    eq2 = (x + 1) * 6 - y * x\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculate the total number of people\n    total_people = solutions[x] * solutions[y]\n\n    return total_people\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # Dividing by 6 because the order of numbers doesn't matter\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, peter = symbols('john peter')\n    \n    # John had 180 more cookies than Peter\n    equation1 = Eq(john, peter + 180)\n    # After selling cookies, John had 1/2 as many cookies as Peter left\n    equation2 = Eq(john * (1 - 4/5), (peter * (1 - 3/10)) / 2)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, peter))\n    \n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    \n    # Generate all permutations of the 4 digits\n    perm = permutations(digits)\n    \n    min_sum = None\n    \n    # Go through each permutation to calculate the sum of the two 2-digit numbers\n    for p in perm:\n        num1 = p[0] * 10 + p[1]  # First 2-digit number\n        num2 = p[2] * 10 + p[3]  # Second 2-digit number\n        total = num1 + num2 \n        \n        # If min_sum is not set or the total is less than the current min_sum, update min_sum\n        if min_sum is None or total < min_sum:\n            min_sum = total\n    \n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    previous_total = 4 * 60  # Total percentage from first 4 tests\n    new_score = 70  # Score from the fifth test\n    new_average = (previous_total + new_score) / 5  # Average after including the fifth test\n    \n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horses_apples = total_horses * 20\n    pigs_apples = total_pigs * 15\n    rabbits_apples = total_rabbits * 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n    total_apples_eaten = horses_apples + pigs_apples + rabbits_apples\n\n    average_apples_eaten = total_apples_eaten / total_animals\n\n    return average_apples_eaten\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for x in range(100, 1000):  # Loop through all 3-digit numbers\n        str_x = str(x)\n        first_digit = int(str_x[0])\n        second_digit = int(str_x[1])\n        third_digit = int(str_x[2])\n        if first_digit + second_digit == third_digit:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    # original price for one cup of ice-cream\n    price_per_cup = 4\n    # total cups of ice-cream Pip wants to buy\n    total_cups = 6\n    # calculate the total price without any discount\n    total_price = price_per_cup * total_cups\n\n    # the two sale plans\n    # Plan A: Buy 3 cups and get a 50% discount on the 3 cups\n    plan_a_discount = 0.5\n    cups_for_plan_a = 3\n    plan_a_savings = cups_for_plan_a * price_per_cup * plan_a_discount\n\n    # Plan B: Buy 6 cups and save $5\n    plan_b_savings = 5\n\n    # check which plan gives more savings\n    if plan_a_savings > plan_b_savings:\n        # apply Plan A\n        total_price -= plan_a_savings\n    else:\n        # apply Plan B\n        total_price -= plan_b_savings\n\n    return total_price\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    class_A_students, class_B_students, peaches = symbols('class_A_students class_B_students peaches')\n    \n    # Equation 1: If all peaches are given to Class A, each student can get 5 peaches and there will be 10 peaches left\n    equation1 = Eq(peaches, 5 * class_A_students + 10)\n    \n    # Equation 2: If all peaches are given to Class B, each student can get 8 peaches, we will need 2 more peaches\n    equation2 = Eq(peaches + 2, 8 * class_B_students)\n    \n    # Equation 3: Class A has 3 more students than Class B\n    equation3 = Eq(class_A_students, class_B_students + 3)\n    \n    solutions = solve((equation1, equation2, equation3), (class_A_students, class_B_students, peaches))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    num = 3172\n    ans = round(num, -2)\n    return ans\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    benson_spent = 74\n    jayden_spent = 120\n    total_money = 590\n\n    # Let the amount Jayden had left be x.\n    # Then the amount Benson had left would be 3x.\n    # Benson's original amount would be 74 + 3x.\n    # Jayden's original amount would be 120 + x.\n    # The sum of their original amounts was 590.\n    # So, 74 + 3x + 120 + x = 590.\n    # Therefore, we solve for x, 4x + 194 = 590.\n\n    x = (total_money - benson_spent - jayden_spent) / 4\n\n    return x\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3 / 4\n    amount_water = total_drink * fraction_water\n\n    return amount_water\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    return metres * centimetres_per_metre\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let x be the speed of Betty in meters per minute\n    # Kevin has walked 150 meters in 6 minutes, so his speed is 25 meters per minute\n    kevin_speed = 150 / 6\n    \n    # When Kevin reaches the grocery store after 3 more minutes, he has walked 150 + 25 * 3 meters in total\n    kevin_distance_to_store = 150 + 25 * 3\n    \n    # Betty walks for 6 + 3 minutes until Kevin reaches the store\n    betty_time_to_store = 6 + 3\n    \n    # Since Betty is 900 meters away from the cinema when Kevin reaches the store,\n    # Betty has walked (kevin_distance_to_store + 900) meters in betty_time_to_store minutes\n    betty_speed = (kevin_distance_to_store + 900) / betty_time_to_store\n    \n    # The time it took for Betty to reach the grocery store is:\n    betty_time_to_grocery = 6\n    \n    # The time it took for Kevin to reach the grocery store is:\n    kevin_time_to_grocery = kevin_distance_to_store / kevin_speed\n    \n    # Difference in time when Betty leaves earlier than Kevin\n    time_difference = kevin_time_to_grocery - betty_time_to_grocery\n    \n    return time_difference\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n    \n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n    \n    return raspberry_volume\n\nans = solution()"
    ]
}