{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15  # Last term in the series\n    first_term = 5  # First term to consider in the specific sequence\n    sum_squares = (1/6)*n*(n+1)*(2*n+1) - (1/6)*(first_term-1)*first_term*(2*(first_term-1)+1)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27/103\n    finger_bones_fraction_of_hand = 14/27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9  # 9:00 in hours\n    end_time = 10   # 10:00 in hours\n\n    duration = end_time - start_time # Duration in hours\n\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remainder_after_bag = 90 / 0.6\n    original_amount = remainder_after_bag / (1 - 0.2)\n    return original_amount\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100): # We expect the number of students to be reasonable; iterate to find it\n        # initial square array has n^2 students with a surplus of 5\n        initial_students = n**2 + 5\n        # new square array with one more row and column has (n+1)^2 students\n        new_students = (n+1)**2\n        # we need 26 more students to complete the new array\n        if new_students - initial_students == 26:\n            ans = initial_students\n            return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    \n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    \n    # Let's denote x as the number of apples Amy gives to John.\n    # After giving x apples, Amy will have 37 - x apples and John will have 15 + x apples.\n    # We want Amy to have 4 more apples than John:\n    # (37 - x) - (15 + x) = 4\n    # Simplifying the equation gives us x = (37 - 4 - 15) / 2.\n\n    x = (amy_apples - 4 - john_apples) // 2\n\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    profit_percent = 10 / 100\n    loss_percent = 10 / 100\n\n    cost_price_profit = sale_price / (1 + profit_percent)\n    cost_price_loss = sale_price / (1 - loss_percent)\n\n    overall_profit_loss = (sale_price - cost_price_profit) + (sale_price - cost_price_loss)\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    plants = 9\n    arrangement = 4\n    # Calculating the permutation of 4 plants out of 9\n    ans = factorial(plants) // factorial(plants - arrangement)\n    return ans\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    blouse_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dads_age = 43\n    equation = Eq(4 * tom_age - 5, dads_age)\n\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_multipliers = 2 + 3 + 5\n\n    ans = common_factor * sum_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    return \"3/20\" if fraction_value > decimal_value else \"0.16\" if decimal_value > fraction_value else \"equal\"\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # An optimal strategy for such games involves ensuring the other player always faces a state from which they can't win.\n    # Since 15 - 4 = 11, if Fred ends his first turn with 11 oranges on the table, he can always win.\n    # This is because no matter how George plays (taking 1, 2, or 3 oranges), Fred can adjust his move to bring the count down to a multiple of 4.\n    # Therefore, Fred should take 15 - 11 = 4 oranges on his first turn.\n    # However, since the rules allow taking only up to 3 oranges, Fred cannot make 11 oranges left by taking 4.\n    # Thus, Fred should aim for the next multiple of 4, which is 7.\n    # To do this, he could take 15 - 12 = 3 oranges on his first turn.\n    # Then no matter how George plays next, Fred can always bring the total down to 8 on his next turn, and eventually get to 4 on the turn after, ensuring his victory.\n    # So Fred should remove 3 oranges on his first turn.\n\n    return 3\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            total_ways += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n\n    total_eggs = cupcakes * eggs_per_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    jogging_time = 2  # from 6:30 to 8:30\n    walking_time = 1  # from 8:30 to 9:30\n    jogging_speed = 8  # in km/h\n    walking_speed = jogging_speed / 2  # in km/h\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for notes in range(1, 280):\n        if 5 * notes + 10 * notes + 20 * notes == 280:\n            return notes * 3  # Total number of notes of all denominations\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2s = pow(2, 100, 10)\n    last_digit_7s = pow(7, 100, 10)\n    last_digit_9s = pow(9, 100, 10)\n    \n    ans = (last_digit_2s * last_digit_7s * last_digit_9s) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    # Define the new operations according to the question\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    # Calculate the result of (7 ◆ 6) □ 9 using the defined operations\n    result = square(diamond(7, 6), 9)\n\n    return result\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since we need the smallest possible number for the biggest pile and each pile must have different numbers\n    # We start by giving 1 marble to the first pile, 2 to the second, and so on.\n    # We then distribute the rest of the marbles to the biggest pile to keep it the smallest possible\n    total_marbles = 16\n    # Start by giving each pile one more marble than the previous one.\n    smallest_pile = 1\n    second_pile = smallest_pile + 1\n    third_pile = second_pile + 1\n    # The rest goes to the biggest pile\n    biggest_pile = total_marbles - (smallest_pile + second_pile + third_pile)\n    # Return the number of marbles in the biggest pile\n    return biggest_pile\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Start with the smallest prime number.\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    sum_fractions = sum(Fraction(1, d) for d in range(1, 6))\n    A = sum_fractions * 60\n    return A.numerator\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # since we're only considering odd squares, n = (19 + 1) / 2\n    ans = (n * (n + 1) * (2 * n + 1)) // 6  # using the formula for the sum of squares\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    minibus_capacity = 6\n    num_minibuses = -(-students // minibus_capacity) # Ceiling division\n\n    return num_minibuses\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Danny takes 12 minutes to go from the first to the fourth floor\n    # Assuming each floor-to-floor walk takes the same amount of time\n    # There are 3 intervals between the first and fourth floor (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    # Therefore, the time taken for each interval is 12 minutes / 3 intervals\n    time_per_interval = 12 / 3\n\n    # The time from the first to the second floor is just one interval\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    ans = sum((i**2 + (i+1)**2) / (i * (i+1)) for i in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_avg_height = 159\n    correct_avg_height = 163\n    incorrect_height_recorded = 126\n    correct_height = 162\n    # The change in average is caused by the incorrectly recorded height \n    # deducing less from the total sum than it should.\n    change_in_average = correct_avg_height - incorrect_avg_height\n    # The difference in individual height contributes to the total change in average \n    # which would be the change_in_average times the number of girls.\n    height_difference = correct_height - incorrect_height_recorded\n    # The number of girls can be found by dividing the total change contributed by \n    # the height difference by the change in average for one girl.\n    num_girls = height_difference / change_in_average\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = 24 * 25 / 100\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = (3**4) * (16//2)**(1+1) * 15\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # Since the question only involves odd numbers, we compute number of odd numbers from 1 to 13\n    # which is (n+1)/2 where n is the last number in the series if it's odd.\n\n    n = 13\n    num_odds = (n + 1) // 2\n\n    # Now we compute the sum of the first num_odds natural numbers\n\n    sum_natural_numbers = num_odds * (num_odds + 1) // 2\n    \n    # The sum of cubes of first num_odds natural numbers which are also odd is,\n    # (1³ + 2³ + 3³ + ...... + num_odds³) which is the square of the sum of these numbers.\n\n    ans = sum_natural_numbers ** 2\n\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    result = 200\n    for i in range(199, 0, -1):\n        result = hash_op(result, i)\n\n    return result\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= 1 + 1/i\n    return product\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n    \n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq((4/5) * beth, (2/5) * ken)\n    \n    solutions = solve((equation1, equation2), (ken, beth))\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n\n    containers_needed = (total_apples + per_container - 1) // per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Find the Greatest Common Divisor (GCD) of the three lengths\n    gcd_two_ribbons = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_two_ribbons, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Total number of notes is 40\n    equation1 = Eq(x + y, 40)\n\n    # After spending, he has 60% of $10 notes and 75% of $2 notes\n    equation2 = Eq((x*0.6)/(y*0.75), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the money spent\n    money_spent = solutions[x]*10*0.4 + solutions[y]*2*0.25\n\n    return money_spent\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(50):\n        cube = cube_root ** 3\n        square_candidate = cube - 2\n        square_root = int(square_candidate ** 0.5)\n        if square_root * square_root == square_candidate:\n            return square_candidate\n            \nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Each kid gets at least two oranges, so we subtract 6 (2 per kid)\n    # to ensure the minimum requirement.\n    remaining_oranges = 13 - 3 * 2\n    \n    # Now we distribute the remaining oranges to 3 kids,\n    # which is equivalent to placing two separators among the oranges.\n    # This is a classic stars and bars problem, where we have to distribute\n    # 'remaining_oranges' indistinguishable objects into 3 distinguishable bins.\n    # The number of ways to do this is C(remaining_oranges + 2, 2).\n    ans = comb(remaining_oranges + 2, 2)\n    return ans\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    # Let's denote the two original numbers as x and y\n    # We know that their sum is 11.63, so x + y = 11.63\n    # When Oliver shifts the decimal point one position to the left on one of the numbers, let's say y, \n    # the new number becomes y/10\n    # Now the sum he got is x + y/10 = 5.87\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for x and y\n    x, y = symbols('x y')\n\n    # Create two equations based on the given information\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the difference between the two numbers and multiply by 100\n    difference = solutions[x] - solutions[y]\n    \n    # Return one hundred times the difference\n    return abs(difference * 100)\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7 / 8) * 32\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # P cannot be zero because it's a 4-digit number\n            continue\n        # Recreate the 4-digit number from the digits\n        num = P * 1000 + A * 100 + S * 10 + O\n        if (P + A + S + O) == (P * A * S * O) % 10:\n            # Check if the sum of digits is equal to the last digit of product.\n            return num\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of water Harry and Liam have.\n    harry, liam = symbols('harry liam')\n\n    # Set up the equations based on the problem.\n    equation1 = Eq(harry + liam, 640)         # Total amount of water they have\n    equation2 = Eq(harry + 90, 3 * (liam - 90))  # If 90ml is transferred...\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    # Return the amount of water Harry originally had.\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Initial questions solved\n    initial_questions = 3\n    # Increment of questions per day\n    increment = 3\n    # Days from Monday to Sunday\n    days = 7\n    # Using the formula for the sum of an arithmetic sequence: n/2(2a1 + (n-1)d)\n    total_questions = days / 2 * (2 * initial_questions + (days - 1) * increment)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w represent the number of days it takes the wife to finish the juice on her own\n    w = symbols('w')\n\n    # Equation based on the rate of drinking the orange juice\n    # rate of man + rate of wife = rate of both together\n    equation = Eq((1 / 15) + (1 / w), 1 / 12)\n\n    # Solve the equation for w\n    solution = solve(equation, w)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    for white_left in range(3, 9):\n        for red_left in range(2, 6):\n            for black_left in range(0, 4):\n                # Number of balls taken of each color\n                white_taken = 9 - white_left\n                red_taken = 5 - red_left\n                black_taken = 6 - black_left\n                total_taken = white_taken + red_taken + black_taken\n                # Check if the number of balls taken matches the desired amount\n                if total_taken == 10:\n                    # Calculate the number of ways to take balls of each color\n                    ways = comb(9, white_taken) * comb(5, red_taken) * comb(6, black_taken)\n                    total_ways += ways\n    return total_ways\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The increment in the number of beans peeled each hour is constant, so we have an arithmetic sequence.\n    # The sequence starts at some unknown number of beans x, then follows with 20, 28, and 36 beans.\n\n    # We know the difference between successive terms is constant.\n    # diff1 is the difference between the beans peeled from 9 to 10 and 10 to 11 o'clock.\n    diff1 = 28 - 20\n    # diff2 is the difference between the beans peeled from 10 to 11 and 11 to 12 o'clock.\n    diff2 = 36 - 28\n\n    # Since the increments are the same (arithmetic sequence), diff1 should equal diff2.\n    # Therefore, we can assume that the difference between the number of beans peeled in the first hour\n    # and the number of beans peeled from 9 to 10 o'clock is also diff1.\n\n    # Let the number of beans peeled in the first hour be x, so:\n    # x + 2*diff1 = 20\n\n    # We calculate the number of beans peeled in the first hour (x).\n    x = 20 - 2 * diff1\n\n    return x\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    while True:\n        term = n * (n + 1) // 2\n        if term > 99:\n            break\n        n += 1\n    return (n - 1) * n // 2\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The arithmetic mean of the first three numbers\n    mean_three_numbers = 120\n    \n    # Total sum of the first three numbers\n    sum_three_numbers = mean_three_numbers * 3\n    \n    # New mean after adding the fourth number\n    new_mean_four_numbers = 150\n    \n    # Total sum of the four numbers\n    sum_four_numbers = new_mean_four_numbers * 4\n    \n    # The fourth number is the difference between the sum of four and three numbers\n    fourth_number = sum_four_numbers - sum_three_numbers\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Consecutive even numbers mean the numbers are 2 apart.\n    # The Chinese Remainder Theorem can be used here to solve the problem.\n    # The congruences are:\n    # number ≡ 0 (mod 7), number + 2 ≡ 0 (mod 8), number + 4 ≡ 0 (mod 9)\n    # Our goal is to find the smallest positive number that satisfies these congruences.\n    \n    congruences = [(0, 7), (-2, 8), (-4, 9)]\n\n    # Use Chinese Remainder Theorem to find such number.\n    number = solve_congruence(*congruences)\n\n    # Since `solve_congruence` returns a tuple of (solution, modulo),\n    # we take the first element which is the smallest number that satisfies the conditions.\n    smallest_number = number[0]\n\n    # The sum of the three consecutive even numbers will be 3 times the middle number.\n    # As the middle number is a multiple of 8, we can safely multiply it by 3\n    # to get the sum of the three numbers.\n    return smallest_number + (smallest_number + 2) + (smallest_number + 4)\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the original number of pearls as x.\n    # According to the problem statement:\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n\n    # The sum of all these should be the original number of pearls:\n    # x/2 + x/4 + x/6 + 3 = x\n    # To solve for x, we find a common denominator, which is 12 in this case, and express all terms with that denominator.\n    # 6/12*x + 3/12*x + 2/12*x + 3 = x\n    # Combine like terms to get:\n    # 11/12*x + 3 = x\n\n    # Isolate x on one side of the equation to solve for x:\n    # 11/12*x = x - 3\n    # 11/12*x = 1/1*x - 3\n    # x/12 = 3\n    # x = 3 * 12\n    x = 3 * 12\n    return x\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from front, so there are 5 people in front of Pip.\n    # Bud is 6th from back, so there are 5 people behind Bud.\n    # There are 5 children between Pip and Bud, including Bud but excluding Pip.\n    # To find the total number of children, we add the number of children in front of Pip,\n    # the number of children between Pip and Bud (including Bud), and the number of children behind Bud.\n    \n    total_children = 5 + 5 + 5 + 1  # +1 for Pip\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    n = 25\n    difference = (25 - 10) // (4 - 1)\n    last_term = first_term + (n - 1) * difference\n    total_athletes = (n * (first_term + last_term)) // 2\n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the parents and children\n    total_age_parents = symbols('total_age_parents')\n\n    # The average age of a family of six is 29, hence the total age\n    total_age_family = 6 * 29\n\n    # Given that the total age of the children is 64\n    total_age_children = 64\n\n    # The total age of the parents is the total age of the family minus the total age of the children\n    total_age_parents = total_age_family - total_age_children\n\n    # The average age of the parents 3 years ago\n    average_age_parents_3_years_ago = (total_age_parents - 3 * 2) / 2\n\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_spent = 5\n    target_total_paintings = 56\n    \n    paintings_per_day = total_paintings_done / total_days_spent\n    remaining_paintings = target_total_paintings - total_paintings_done\n    additional_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = total_sum // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves = total_papers // interval  # Leaves are inserted after every 3 pieces of paper\n\n    return leaves\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    times = [7, 9, 4, 10] # The time each person takes to row across\n\n    def cross_time(group1, group2, group3):\n        # Calculate total time for each crossing strategy\n        fastest_in_group1 = min(group1)\n        time_for_group1_to_cross = sum(group1) + fastest_in_group1\n        fastest_in_group1_and_group2 = min(fastest_in_group1, min(group2))\n        time_for_group2_to_return = fastest_in_group1 + group2[1]\n        time_for_group2_to_cross = sum(group2) + fastest_in_group1_and_group2\n        time_for_group3_to_return = min(group1 + group2)\n        total_time = time_for_group1_to_cross + time_for_group2_to_return + time_for_group3_to_cross + time_for_group3_to_return\n        return total_time\n\n    min_time = float('inf')\n    # all combinations for the first group of 2 to cross, remaining 2 will be in the next round\n    for group1 in combinations(times, 2):\n        remaining_after_group1 = [x for x in times if x not in group1]\n        # remaining people split into two groups: 1 to go back, 1 to cross finally\n        for group2 in combinations(remaining_after_group1, 1):\n            group3 = [x for x in remaining_after_group1 if x not in group2]\n            # Calculate total time for this crossing strategy\n            total_time = cross_time(group1, group2, group3)\n            # Update minimum time if this strategy is faster\n            min_time = min(min_time, total_time)\n    return min_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # the 5th term is 8 (a5)\n    # the 12th term is 50 (a12)\n    # a12 = a5 + 7d, where d is the common difference\n    a5 = 8\n    a12 = 50\n\n    # Calculate the common difference\n    d = (a12 - a5) / 7\n\n    return d\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    value = 95 * (37 + 42 + 21)\n    return value\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Initial first three terms of the arithmetic progression\n    a1 = 2\n    a2 = 5\n    a3 = 8\n    \n    # The common difference of the arithmetic progression\n    d = 3\n    \n    # Count the number of terms by checking when the progression will exceed 242\n    num_terms = 1\n    while a1 + (num_terms - 1) * d <= 242:\n        num_terms += 1\n\n    # Calculate the number of iterations to leave only 3 numbers on the board\n    iterations = (num_terms - 3) // 3\n\n    # The second number in the progression after the specified iterations\n    second_number = a2 + iterations * 3 * d  # Since every iteration increments by 3*d\n\n    return second_number\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of Pip, Bud, and Bob\n    Pip, Bud, Bob = symbols('Pip Bud Bob')\n\n    # Write the equations representing the average weights given in the problem\n    # Average weight of Pip and Bud\n    eq1 = Eq((Pip + Bud) / 2, 30)\n    # Average weight of Pip and Bob\n    eq2 = Eq((Pip + Bob) / 2, 33)\n    # Average weight of Bud and Bob\n    eq3 = Eq((Bud + Bob) / 2, 36)\n\n    # Solve the equations to find the weights of Pip, Bud, and Bob\n    solutions = solve((eq1, eq2, eq3), (Pip, Bud, Bob))\n\n    # Return the weight of Pip\n    return solutions[Pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    target = 0.1\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    family_children = jacob + sisters + brothers\n\n    return family_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    desired_days = 7\n\n    work_per_person = original_days / original_people\n    total_work = work_per_person * original_people\n\n    people_needed = total_work / desired_days\n    additional_people = people_needed - original_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in school A originally\n    # Let y be the number of students in school B originally\n    x, y = symbols('x y')\n\n    # Equation 1: Total students before transfer\n    equation1 = Eq(x + y, 1050)\n    \n    # Equation 2: School A has 20 students transferring to school B, and then has 10 more than school B\n    equation2 = Eq(x - 20, y + 20 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3\n    increase_per_hour = 2\n    hours_passed = 5.5\n\n    current_temperature = initial_temperature + increase_per_hour * hours_passed\n    return current_temperature\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total distance in meters, y be the reduced time spent running after the rain starts.\n    x, y = symbols('x y')\n    \n    # Usual speed is x / 30 minutes, after reducing speed by 20% it becomes 0.8 * (x / 30)\n    # It rains for y minutes, so in y minutes she covers 0.8 * (x / 30) * y distance\n    # The remaining distance to run after the rain is x - 2400 meters\n    # The time spent on the remaining distance at reduced speed is (x - 2400) / (0.8 * (x / 30))\n    # Total time should have been 30 minutes, but she is 5 minutes late, so total time is 35 minutes\n    # y + (x - 2400) / (0.8 * (x / 30)) = 35\n    \n    equation1 = Eq(y + (x - 2400) / (0.8 * (x / 30)), 35)\n    \n    # Solve the equation for x, we only look for positive results since distance cannot be negative\n    solutions = solve(equation1, (x, y), dict=True)\n    \n    # Filter the correct solution (positive value for x)\n    answer = [s[x] for s in solutions if s[x] > 0]\n    \n    # Return the length of the journey if there is a positive solution, otherwise None\n    return answer[0] if answer else None\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money_origin = symbols('money_origin')\n\n    money_after_A = money_origin / 2 - 1\n    money_after_B = money_after_A / 2 - 2\n    money_after_C = money_after_B - (money_after_B / 3 + 3)\n\n    equation = Eq(money_after_C, 49)\n\n    ans = solve(equation, money_origin)\n\n    return ans[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of books on the top shelf\n    x = symbols('x')\n\n    # The equation represents the total number of books\n    # The sum of an arithmetic sequence is n/2 * (first_term + last_term)\n    # where n is the number of terms, which is 7 in this case\n    equation = Eq(7/2 * (x + (x + 6*3)), 280)\n\n    # Solve the equation for x\n    books_on_top_shelf = solve(equation, x)[0]\n\n    return books_on_top_shelf\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    max_other_pencils = 3 + 3  # Max number of blue and white pencils\n    ans = max_other_pencils + 1  # To ensure getting at least 1 green pencil\n    return ans\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import isqrt\n\n    # 2240's factorization = 2^6 * 5 * 7\n    # To make 2240/n a square, n must include factors that will \n    # result in each prime factor having an even power\n    # The prime factors of 2240 are 2, 5, and 7\n    \n    # Possible values for n could then be 2^m * 5^n * 7^o where m, n, and o\n    # are chosen such that 2240/n is a perfect square\n    # m can be 0, 2, 4, or 6 since there are 6 factors of 2 in 2240\n    # n can be 0 or 1 since there is 1 factor of 5 in 2240\n    # o can be 0 or 1 since there is 1 factor of 7 in 2240\n    \n    # Start with the largest possible n (smallest divisor) with even powers:\n    # n = 2^0 * 5^1 * 7^1 = 5 * 7 = 35\n\n    n = 35\n\n    # Check if 2240/n is a perfect square\n    while 2240 % n != 0 or not is_square(2240 // n):\n        n += 1\n\n    return n\n\ndef is_square(integer):\n    root = isqrt(integer)\n    return integer == root * root\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    return lcm(3, 5, 9, 21)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies, kids * 18 - 12)\n    equation2 = Eq(candies, (kids + 2) * 15)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 311):\n        for digit in str(number):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n\n    expression = 16.7 - ((-4.56)**2 - (8.1)**3) / (7.2**3) / (-math.sqrt(6 + 3/4) + 30.15)**(1/3)\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Oliver's current age\n    oliver_age = 20\n    # Lin's current age\n    lin_age = 26\n    # The sum of their ages in the future we are looking for\n    target_sum_age = 48\n    \n    # Number of years later for the sum of their ages to be 48\n    years_later = (target_sum_age - (oliver_age + lin_age)) / 2\n    \n    return int(years_later)\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Speed ratio of Jayden to Carter\n    speed_ratio_jayden_carter = 7 / 4\n    \n    # Jayden and Carter meet each other\n    total_ratio = 7 + 4\n    distance_jayden_travels = (speed_ratio_jayden_carter / total_ratio) * 440\n    \n    # Jayden turns back and meets Carter again\n    # Let x be the distance from A where they meet the second time\n    # Jayden travels 440 + x meters, while Carter travels 440 - x meters\n    # The ratio of their speeds gives us the following equation:\n    # (440 + x) / (440 - x) = 7 / 4\n    # Solving for x, we get:\n    x = (440 * (speed_ratio_jayden_carter - 1)) / (speed_ratio_jayden_carter + 1)\n    \n    return x\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6 / 5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n    \n    # Set up the equations based on the problem statement.\n    # Sam and Peter's stickers are in the ratio 7:5.\n    equation1 = Eq(sam / peter, 7 / 5)\n\n    # Sam and Peter each gave 20% of their stickers to John, this means they are left with 80% of their stickers.\n    # John's stickers increased by 80%, which means his final amount is 180% of the initial amount.\n    equation2 = Eq(john_final, john_initial * 1.8)\n\n    # If Sam had 20 stickers more than John in the end, the equation is:\n    equation3 = Eq(sam * 0.8, john_final + 20)\n\n    # The number of stickers sam gave is 20% of his total\n    sam_gave = sam * 0.2\n\n    # The number of stickers peter gave is 20% of his total\n    peter_gave = peter * 0.2\n\n    # These amounts sum up to the difference in John's stickers.\n    equation4 = Eq(john_final - john_initial, sam_gave + peter_gave)\n\n    # Now solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # The total score of the 5 students is 5 * 87\n    total_score_5_students = 5 * 87\n    # If the average of all 6 students is 88, then the total score is 6 * 88\n    total_score_6_students = 6 * 88\n    # Jim's score is the difference between the total score of all 6 and the total score of 5\n    jim_score = total_score_6_students - total_score_5_students\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # given that one-fifth of the wood is 6 cm\n    full_length = one_fifth_length * 5  # calculating full length of the wood\n    one_third_length = full_length / 3  # calculating one-third of the full length\n\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    after_first_reduction = initial_price * 0.9\n    final_price = after_first_reduction * 0.8\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bats = symbols('bats')\n    purchase_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n    cost_price = purchase_price_per_bat * bats\n    proceeds = selling_price_per_bat * (bats - remaining_bats)\n    \n    # Writing the equation: cost_price + profit = proceeds\n    equation = Eq(cost_price + profit, proceeds)\n    # Solving for the number of bats\n    solution = solve(equation, bats)\n\n    return solution[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raja, kumar = symbols('raja kumar')\n    \n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    equation2 = Eq(raja, kumar)\n    \n    solutions = solve((equation1, equation2), (raja, kumar))\n    \n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = (boys + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for different shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square) # ▲ + ▲ = ■\n    equation2 = Eq(square + triangle, circle)   # ■ + ▲ = ●\n    equation3 = Eq(diamond, circle + square + triangle)  # ♦ = ● + ■ + ▲\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Calculate how many ▲s are equal to ♦\n    num_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair = symbols('chair')\n\n    # Equation representing the total cost\n    equation = Eq((chair + 160) + 5 * chair, 328)\n\n    # Solve for the cost of one chair\n    cost_of_chair = solve(equation, chair)\n\n    return cost_of_chair[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time (in minutes) it takes for the hot tap to fill the bath alone.\n    x = symbols('x')\n    # If the cold tap fills the bath twice as fast, it takes x/2 minutes to fill the bath alone.\n\n    # 1 bath filled by the hot tap in x minutes -> rate = 1/x\n    # 1 bath filled by the cold tap in x/2 minutes -> rate = 2/x\n\n    # Together they fill 1 bath in 10 minutes -> combined rate = 1/10\n    # The sum of individual rates is equal to the combined rate when they work together.\n    equation = Eq((1/x) + (2/x), 1/10)\n\n    # Solve for x to get the time it takes the hot tap to fill the bath alone.\n    time_hot_tap = solve(equation, x)\n\n    # The cold tap fills at twice the rate, so we just need the half of hot tap's time.\n    time_cold_tap = time_hot_tap[0] / 2\n\n    return time_cold_tap\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_mean = (total_sum - 4 * (1111 - 240)) / 6\n    return last_6_mean\n    \nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60 / 100  # Convert pence to pounds\n    bud_money = 1.10\n    total_money = pip_money + bud_money\n    return total_money\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Rachel, Alice = symbols('Rachel Alice')\n\n    equation1 = Eq(Rachel - 10, Alice + 10)\n    equation2 = Eq(Rachel + 10, 3 * (Alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (Rachel, Alice))\n\n    total_candy = solutions[Rachel] + solutions[Alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    I, S, P = symbols('I S P', integer=True)\n\n    # Setting the conditions for the variables:\n    # Each variable can only be a digit (0-9)\n    conditions = [\n        (I >= 0) & (I <= 9),\n        (S >= 0) & (S <= 9),\n        (P >= 0) & (P <= 9),\n        (I != S) & (I != P) & (S != P)  # different digits condition\n    ]\n\n    # Equation representing \"IS + IS + IS + IS = PI\"\n    equation = Eq(I * 10 * S * 4, P * 10 + I)\n\n    # Solving for I, S and P under the given conditions\n    solutions = solve((equation,) + tuple(conditions))\n\n    # Formatting the result to show the value of PI\n    for sol in solutions:\n        if sol[I] != 0 and sol[P] != 0:  # PI should not start with 0\n            ans = sol[P] * 10 + sol[I]\n            return ans\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "网络故障，请重试"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed_m_per_sec = 2  # Lori's speed is 2 meters per second\n    \n    # Calculate Joyce's speed based on the given ratio\n    joyce_speed_m_per_sec = (joyce_speed_ratio / lori_speed_ratio) * lori_speed_m_per_sec\n    \n    # Calculate the distance Joyce can run in 10 seconds\n    time_seconds = 10\n    distance_run_by_joyce = joyce_speed_m_per_sec * time_seconds\n    \n    return distance_run_by_joyce\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    bike_value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(bike_value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # Using the formula P(B|A) = P(A and B) / P(A) for conditional probability\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don walks at a speed of 60 meters per minute\n    distance_meet = 360  # They meet 360 meters from their house\n    distance_library = 780  # The library is 780 meters away from home\n    \n    # Time taken for Don to meet Danny\n    time = distance_meet / don_speed\n\n    # Distance Danny covers until he meets Don\n    danny_distance = distance_library - distance_meet\n\n    # Danny's speed\n    danny_speed = danny_distance / time\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    number_of_teams = 5\n    games_played = comb(number_of_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 0\n    page_number = 0\n\n    while total_digits > 0:\n        page_number += 1\n        if page_number < 10:\n            digits_per_page = 1\n        elif page_number < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n        total_digits -= digits_per_page\n    \n    return page_number\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1 * 1000 + 500) + (1 * 1000 + 200) + 900\n    weight_per_tin = total_weight_grams / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(1/(i+1) for i in range(10)) + sum(2/(i+2) for i in range(9)) +\\\n    sum(3/(i+3) for i in range(8)) + sum(4/(i+4) for i in range(7)) +\\\n    sum(5/(i+5) for i in range(6)) + sum(6/(i+6) for i in range(5)) +\\\n    sum(7/(i+7) for i in range(4)) + sum(8/(i+8) for i in range(3)) +\\\n    sum(9/(i+9) for i in range(2)) + 10/10\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "from itertools import permutations\n\ndef solution():\n    positions = ['A', 'B', 'C', 'D']\n    \n    count = 0\n    for perm in permutations(positions):\n        if perm[0] in ['A', 'B'] or perm[-1] in ['A', 'B']:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return int((20 / 30) * 27)\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Janice must pick marbles in the worst case scenario to ensure she gets 4 of the same color.\n    # Worst Case: She could pick 3 red, 3 blue, 3 green and still not have 4 of the same color.\n    # So, she needs to pick one more marble to ensure she gets 4 of the same color.\n\n    marbles_to_ensure_four_of_same_color = 3 + 3 + 3 + 1  # 3 of each color and 1 more to ensure fourth\n\n    return marbles_to_ensure_four_of_same_color\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    count = 0\n    \n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    min_even_digit = min([digit for digit in digits if digit % 2 == 0])\n    remaining_digits = sorted([digit for digit in digits if digit != min_even_digit])\n    smallest_number = int(str(remaining_digits[0]) + str(remaining_digits[1]) + str(remaining_digits[2]) + str(min_even_digit))\n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Start with the largest two-digit number and go down.\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    work_units = workers * days\n    days_for_one_worker = work_units / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables a and b\n    a, b = symbols('a b')\n\n    # Define the two equations given in the problem statement\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Return the value of b\n    return solutions[b]\n\n# Call the function and store the result in `ans`\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n    \n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                # This locker is touched an even number of times, so it remains unlocked.\n                unlocked_lockers += 1\n            else:\n                # This locker is touched only once by the number 3, so it is locked.\n                pass\n        else:\n            if i % 5 == 0:\n                # This locker is only touched once by the number 5, so it is locked.\n                pass\n            else:\n                # This locker is never touched since it's not divisible by 3 or 5, so it remains unlocked.\n                unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        if p.index('A') in range(p.index('B') + 1, p.index('C')) or p.index('A') in range(p.index('C') + 1, p.index('B')):\n            if abs(p.index('D') - p.index('E')) != 1:\n                if abs(p.index('F') - p.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_reached_level_4 = 4\n    yiding_reached_level_3 = 3\n\n    ratio = yiding_reached_level_3 / nicolas_reached_level_4\n    nicolas_target_level = 16\n    yiding_target_level = nicolas_target_level * ratio\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    cost_per_cake, borrowed_amount_10_cakes, borrowed_amount_13_cakes = symbols('cost_per_cake borrowed_amount_10_cakes borrowed_amount_13_cakes')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(10 * cost_per_cake + borrowed_amount_10_cakes, 0)\n    equation2 = Eq(13 * cost_per_cake + borrowed_amount_13_cakes, 0)\n    \n    # Now we know that borrowed_amount_13_cakes is actually 26, and borrowed_amount_10_cakes is 11\n    equation1 = equation1.subs(borrowed_amount_10_cakes, 11)\n    equation2 = equation2.subs(borrowed_amount_13_cakes, 26)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_per_cake))\n\n    return solutions[cost_per_cake]\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Equation according to the question: B = 6A + 25\n    # Where A = 10x + y and B = 20x + 2y (considering B = 2xy in place value terms)\n    # Therefore, we have 20x + 2y = 6(10x + y) + 25\n    # Simplifying the equation: 20x + 2y = 60x + 6y + 25\n    # This simplifies to -40x + 4y = 25\n    # Further simplification: -10x + y = 25 / 4\n    # But since x and y are digits, they must be integers, and the above equation does not yield integer solutions.\n    # Therefore, John made a mistake.\n    # Let's find the correct A using proper equations.\n    \n    # Based on the given, we set up the correct equation\n    # 6 * (10x + y) + 25 = 200x + 20y\n    # simplifying: 60x + 6y + 25 = 200x + 20y\n    for x in range(1, 10):  # x can be 1 to 9 for a two-digit number\n        for y in range(10):  # y can be 0 to 9 for a two-digit number\n            if (6 * (10 * x + y) + 25) == (200 * x + 20 * y):\n                ans = 10 * x + y\n                return ans\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the expression components\n    a, b, c, d, e = 285, 15, 5, 2, 2\n    # Define possible ways to insert brackets\n    expressions = [\n        (a + (b / c) - d) - e,\n        (a + (b / c)) - (d - e),\n        ((a + b) / c) - d - e,\n        (a + b) / (c - d - e),\n        a + ((b / c) - d) - e,\n        a + ((b / c) - (d - e)),\n        a + (b / (c - d) - e),\n        a + (b / (c - (d - e))),\n        (a + b / c - d) - e,\n        a + (b / c - d - e),\n        a + b / (c - d - e)\n    ]\n    \n    # Calculate and collect unique results\n    results = set()\n    for expr in expressions:\n        results.add(eval(str(expr)))\n        \n    return len(results)\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    total_children = 4 + 6\n    average_mass = total_mass / total_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    # Given fractions are of the form: (numerator) / (denominator - negative number)\n    # The value of each fraction can be calculated directly by performing the operation\n    # between the numerator and the denominator with the negative number\n    fraction1 = 1 / (2 - 3)\n    fraction2 = 4 / (5 - 6)\n    fraction3 = 7 / (8 - 9)\n\n    # Sum the values of the fractions\n    sum_of_fractions = fraction1 - fraction2 - fraction3\n\n    return sum_of_fractions\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    number1 = 4.6\n    number2 = 13.8\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    # Given scores of the cricketer in 4 matches\n    scores = [37, 53, 29, 41]\n    \n    # Given mean score\n    mean_score = 40\n    \n    # Total matches played\n    matches = 5\n    \n    # Total score would be the mean score multiplied by the number of matches\n    total_score = mean_score * matches\n    \n    # Calculate the score for the missing match (x)\n    x = total_score - sum(scores)\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    # Calculate the number of permutations of the letters, dividing by the\n    # factorials of the counts of each repeated letter to remove duplicates.\n    ans = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_numbers = 0\n    \n    # Case 1: The first two digits are 7 (77x)\n    total_numbers += 10  # x can be any digit from 0 to 9\n    \n    # Case 2: The last two digits are 7 (x77)\n    total_numbers += 9  # x can be any digit from 1 to 9 (can't be zero)\n    \n    # Case 3: The first and the last digits are 7 (7x7)\n    total_numbers += 10  # x can be any digit from 0 to 9\n    \n    # Now we need to subtract the cases where all three digits are 7 (777) since they have been counted three times\n    total_numbers -= 2  # The number 777 has been counted in each of the above three cases\n    \n    return total_numbers\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial total number of animals as 'total'\n    # Let's denote the initial number of goats as 'goats'\n    # Since 65% of the animals were cows, then the initial number of cows is '0.65 * total'\n    total, goats = symbols('total goats')\n\n    # We have two equations based on the problem:\n    # 1. The initial number of cows is 65% of the total, so goats are the remaining 35%.\n    equation1 = Eq(goats, 0.35 * total)\n\n    # 2. When 240 more animals are added, the cows become 85% of the new total (total + 240), and the goats doubled.\n    equation2 = Eq(0.85 * (total + 240), 0.65 * total + 240)\n\n    # Solve the equations for 'total' and 'goats'\n    solutions = solve((equation1, equation2), (total, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(100000, 999999):\n        if int(str(i)[1:] + '9') == 4 * i:\n            return i\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # Smallest possible non-zero divisor\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, jonathan = symbols('abigail jonathan')\n    \n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_rate = 1 / 40\n    bob_rate = 1 / 60\n    total_time = 27\n    \n    # Total work done by Bob in 27 days.\n    work_done_by_bob = bob_rate * total_time\n\n    # Remaining work to be done by Alice.\n    remaining_work = 1 - work_done_by_bob\n\n    # Time taken by Alice to do the remaining work.\n    time_taken_by_alice = remaining_work / alice_rate\n\n    # Days Alice takes off.\n    days_off = total_time - time_taken_by_alice\n    \n    return int(days_off)\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n    \n    result = custom_operation(4, 3) - custom_operation(3, 4)\n    \n    return result\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 4):\n        A, B, C, D = perm\n        A, B, C, D = int(A), int(B), int(C), int(D)\n        if A != 0 and C != 0 and ABA_plus_CDC(A, B, C, D) == 726:\n            return A + B + C + D\n\ndef ABA_plus_CDC(A, B, C, D):\n    return 100 * A + 10 * B + A + 100 * C + 10 * D + C\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # 3 apples and 2 bananas cost £1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    # 1 apple and 1 banana cost £0.48\n    equation2 = Eq(1 * apple + 1 * banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost for 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days given to finish the book\n    # Let p be the number of pages in the book\n    d, p = symbols('d p')\n\n    # Equation for reading 30 pages per day and finishing 2 days late\n    equation1 = Eq(30 * (d + 2), p)\n    # Equation for reading 39 pages per day and finishing 4 days early\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (d, p))\n\n    # Return the number of days and the number of pages as a tuple\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    # The pattern is 2020(3) -> the 3 denotes the number of 0's after the second 2.\n    pattern = [2, 0, 2, 0, 0]  # Initial pattern\n    total_digits = 535\n    pattern_length = len(pattern)\n    \n    # First, we count the number of complete patterns we have.\n    complete_patterns = total_digits // pattern_length\n    \n    # Then, we calculate the number of remaining digits after the complete patterns.\n    remaining_digits = total_digits % pattern_length\n    \n    # Now we count the number of 2's in a complete pattern.\n    twos_in_pattern = pattern.count(2)\n    \n    # The total number of 2's will be the number of complete patterns multiplied by\n    # the number of 2's in one pattern plus the number of 2's in the remaining part.\n    total_twos = complete_patterns * twos_in_pattern\n    \n    # We need to add the number of 2's present in the remaining digits.\n    for i in range(remaining_digits):\n        if pattern[i] == 2:\n            total_twos += 1\n    \n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = 1000 / 17 + 2000 / 17 + 2100 / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    total_cookies = 85 + 135\n    remaining_cookies = total_cookies - 55\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # let x be the number of fifty-cent coins Owen originally had\n    # and y be the number of one-dollar coins\n    # we know that 2/7 of his coins were fifty-cent coins, so 5/7 were one-dollar coins,\n    # which means x/y = 2/5\n    \n    # let's represent the total amount of fifty-cent coins after his mother gave him coins as x_f\n    # and the total amount of one-dollar coins as y_f\n    # according to the problem, he received 10 one-dollar coins and 5 dollars worth of fifty-cent coins\n    # this means he received 10 fifty-cent coins\n    # so, x_f = x + 10 and y_f = y + 10\n    \n    # in the end, he has twice as many one-dollar coins as fifty cent coins,\n    # that gives us the equation: y_f = 2*x_f\n    \n    # Now, let's replace x_f and y_f in the equation y_f = 2*x_f with the above relationships:\n    # (y + 10) = 2*(x + 10)\n    \n    # We also know that the ratio x/y = 2/5, so y = (5/2)*x\n    # We replace y with (5/2)*x in the above equation:\n    # ((5/2)*x + 10) = 2*(x + 10)\n    # now let's solve for x\n    \n    x = symbols('x')\n    equation = Eq((5/2)*x + 10, 2*(x + 10))\n    solution = solve(equation, x)\n    x = solution[0]\n    \n    # Since y = (5/2)*x, we can find the original number of one-dollar coins\n    y = (5/2)*x\n    \n    # The total number of coins Owen had at first would be x + y\n    total_coins = x + y\n    \n    return total_coins\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    return -solutions[dress] + solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person ends up with\n    anna_end, betsy_end, charlene_end = symbols('anna_end betsy_end charlene_end')\n\n    # Equation for the total number of marbles after sharing\n    total_marbles_eq = Eq(anna_end + betsy_end + charlene_end, 168)\n\n    # Equation for the ratio of the final number of marbles\n    ratio_eq = Eq(anna_end / betsy_end / charlene_end, 2 / 5 / 7)\n\n    # Use the given conditions to back-calculate the original number of marbles for Betsy\n    # Betsy gave 8 marbles to Anna, so Betsy ends with 8 fewer than she originally had\n    # Charlene gave 15 marbles to Betsy, so Betsy ends with 15 more than she originally had\n    betsy_start = betsy_end - 8 + 15\n\n    # The original distribution of marbles can be calculated based on the equations and ratios\n    solutions = solve((total_marbles_eq, ratio_eq), (anna_end, betsy_end, charlene_end))\n\n    # Substitute the solutions into the expression for Betsy's starting number of marbles\n    betsy_original = betsy_start.subs(solutions)\n\n    return betsy_original\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Look for a pattern in the given operations\n    # Let \"x Δ y\" be defined as \"f(x,y)\"\n    # From the examples given:\n    # 4 Δ 1 = 17, which implies f(4, 1) = 17\n    # 5 Δ 4 = 29, which implies f(5, 4) = 29\n    # 8 Δ 16 = 80, which implies f(8, 16) = 80\n    \n    # Now we look for a relationship between the inputs and the output\n    # We can start by guessing it could have something to do with\n    # multiplying the numbers and adding or subtracting something,\n    # since if we multiply x and y we get a number close to the result\n    \n    # We can observe that:\n    # f(4, 1) = 4 * 4 + 1 = 17\n    # f(5, 4) = 5 * 5 + 4 = 29\n    # f(8, 16) = 8 * 8 + 16 = 80\n    # This gives us a clue that the operation might be \"x*x + y\"\n    \n    # Let's define this as our operation and apply it to the last expression\n    x, y = 10, 9\n    ans = x*x + y\n    \n    return ans\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    brenda_daily_savings = 6\n    andy_total_savings = 378\n\n    days_andy_saved = andy_total_savings // andy_daily_savings\n    brenda_total_savings = days_andy_saved * brenda_daily_savings\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    # Define the total number of questions and total points Eddie got\n    total_questions = 10\n    total_points = 44\n\n    # Define points earned for correct answer and lost for wrong answer\n    points_correct = 6\n    points_wrong = -2\n\n    # Since Eddie answered all questions, use a single variable for correct answers\n    # Let x be the number of correct answers\n\n    # The number of wrong answers will be total_questions - x\n    # Creating an equation based on the total points Eddie got\n    # points_correct * x + points_wrong * (total_questions - x) = total_points\n\n    # We will solve this equation for x\n    # x is the number of correct answers Eddie answered\n\n    # points_correct * x - points_wrong * x = total_points - points_wrong * total_questions\n    # (points_correct - points_wrong) * x = total_points - points_wrong * total_questions\n    # x = (total_points - points_wrong * total_questions) / (points_correct - points_wrong)\n\n    x = (total_points - points_wrong * total_questions) / (points_correct - points_wrong)\n    return int(x)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # original volume = length * breadth * height\n    # new volume = (1.1 * length) * (4/5 * breadth) * (11/10 * height)\n    # new volume as percentage of original volume = (new volume / original volume) * 100\n\n    new_volume_percentage = (1.1 * 4/5 * 11/10) * 100\n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    import math\n    \n    total_contestants = 8\n    ans = math.perm(total_contestants, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_repeat = 30 + 40 + 50\n    repeats = 3\n    total_sum = sum_repeat * repeats\n    return total_sum\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = (360 / remaining_work_percentage) * 100\n    return total_masks\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Since there are 5 students, and all of them should solve at least one question,\n    # we will first distribute 1 question to each student. That leaves us with 40 - 5 = 35 questions.\n    remaining_questions = 40 - 5\n    \n    # Using the Pigeonhole Principle, after distributing the remaining questions to\n    # the four other classmates, Noa can get at most as many questions as all\n    # classmates combined plus one. To maximize Noa's share, the other four\n    # should get as few questions as possible but all different amounts.\n    # Starting from 1 (minimum), we can sequence the rest: 1, 2, 3, 4.\n    # The minimum amount the other classmates can have is 1 + 2 + 3 + 4 = 10.\n    \n    # Subtract the minimum amount from remaining to find out the maximum Noa can solve.\n    max_noa_questions = remaining_questions - 10\n\n    return max_noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Current age ratio\n    equation1 = Eq(scan/ted, 1/4)\n\n    # Age ratio 4 years from now\n    equation2 = Eq((scan + 4)/(ted + 4), 1/3)\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (scan, ted))\n\n    # Find the ages for Scan and Ted\n    scan_age = ages[scan]\n    ted_age = ages[ted]\n\n    # Equation for ratio 1:9 at some years ago (x years ago)\n    x = symbols('x')\n    equation3 = Eq((scan - x)/(ted - x), 1/9)\n\n    years_ago = solve(equation3.subs({scan: scan_age, ted: ted_age}), x)\n\n    return years_ago[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number / 10) * 10\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n\n    temperature_difference = hottest_temperature - coldest_temperature\n\n    return temperature_difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging in hours (from 6:30am to 7:30am)\n    time_jogging = 1\n    # Time spent walking in hours (from 7:30am to 9:30am)\n    time_walking = 2\n\n    # Speed of jogging in miles per hour\n    speed_jogging = 6.5\n    # Speed of walking in miles per hour\n    speed_walking = 4.5\n\n    # Distance traveled jogging\n    distance_jogging = time_jogging * speed_jogging\n    # Distance traveled walking\n    distance_walking = time_walking * speed_walking\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    return 9 * 100\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of foldable bicycles, n be the number of non-foldable bicycles\n    f, n = symbols('f n')\n\n    # The total number of bicycles is 476\n    equation1 = Eq(f + n, 476)\n\n    # After 208 bicycles were sold, the fractions of each type left in the shop are given:\n    # Therefore, the numbers of bicycles remaining are (5/9)*n for non-foldable and (4/7)*f for foldable\n    # since 208 bicycles were sold, we have (f - (4/7)*f) + (n - (5/9)*n) = 208\n    equation2 = Eq((f - (4/7)*f) + (n - (5/9)*n), 208)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, n))\n\n    # The number of foldable bicycles sold is the initial amount minus what's left, which is (3/7)*f\n    foldable_sold = (3/7) * solutions[f]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb = 10\n    slide = 0\n    current_height = 0\n    day = 0\n\n    while current_height < height:\n        day += 1\n        current_height += climb\n        if current_height >= height:\n            break\n        slide += 1\n        current_height -= slide\n    \n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let the number of guppies be g.\n    # Then, the number of goldfish will be 2 * g.\n    # And the number of mollies will be 2 times the number of goldfish, which is 2 * 2 * g = 4 * g.\n    # It is given that the number of mollies is 276.\n    # So, 4 * g = 276.\n    g = 276 // 4\n    \n    # The difference between the number of mollies and guppies is 276 - g.\n    more_mollies_than_guppies = 276 - g\n\n    return more_mollies_than_guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # 2 cm in the model represents 3 m in reality\n    real_tree_height = 12  # in meters\n    model_tree_height_in_cm = (real_tree_height * scale_ratio) * 100  # convert meters to cm in the model scale\n    return model_tree_height_in_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    students = 20\n    min_candy_per_student_to_get_at_least_3 = 3\n    \n    # According to the Pigeonhole Principle, to guarantee that there is always at least\n    # one kid who can get at least 3 pieces of candy, Valeria has to prepare candies\n    # such that even if 19 students get 2 pieces of candy, the last one can still get 3.\n    # So we calculate 19 students getting 2 candies each and add 3 for the last student.\n    \n    min_candies = (students - 1) * (min_candy_per_student_to_get_at_least_3 - 1) + min_candy_per_student_to_get_at_least_3\n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000  # grams\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n    original_flour = remaining_flour / remaining_fraction\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Maximum socks to take for the worst-case scenario before getting a pair of white socks:\n    # Take all 10 red socks and all 10 black socks, then finally take 2 white socks\n    max_socks = 10 + 10 + 2\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # 3 flowers between 2 lamp posts; when having 30 flowers total, we have 30/3 intervals\n    intervals = total_flowers // flowers_between_posts\n\n    # There is one more lamp post than there are intervals\n    total_lamp_posts = intervals + 1\n    road_length = 50\n    \n    # Calculate the distance between two lamp posts\n    distance_between_posts = road_length / intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum = 0\n    for i in range(1, 20, 2):\n        sum += i\n    return sum\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_marks = 8\n    wrong_deduction = 4\n    total_score = 100\n    \n    # Let's denote the number of correct questions as 'c'\n    # and the number of wrong questions as 'w'\n    # Since all questions are answered, we have\n    # c + w = total_questions\n    # and for the scores, we have\n    # correct_marks * c - wrong_deduction * w = total_score\n    \n    # From c + w = total_questions, we express w in terms of c:\n    # w = total_questions - c\n    \n    # Now substitute w into score equation:\n    # correct_marks * c - wrong_deduction * (total_questions - c) = total_score\n    # correct_marks * c - wrong_deduction * total_questions + wrong_deduction * c = total_score\n    # (correct_marks + wrong_deduction) * c = total_score + wrong_deduction * total_questions\n    \n    # Now solving for c:\n    c = (total_score + wrong_deduction * total_questions) / (correct_marks + wrong_deduction)\n    \n    return int(c)\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    temp_decrease = 17\n\n    final_temp = initial_temp - temp_decrease\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    # Since trees are planted at both ends of the road, we subtract the length of one tree space\n    # because we don't count the last space - only the tree at the beginning of that space.\n    num_trees = (road_length - distance_between_trees) // distance_between_trees + 1\n    \n    # We add 1 for the tree at the beginning of the road\n    return num_trees + 1\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 * (5/4)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "网络故障，请重试"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since there are 5 children and no two can have the same number of apples,\n    # and each must get at least one, we start by giving 1 apple to each child.\n    # This means there are 19 - 5 = 14 apples left to distribute.\n    \n    # Now, to maximize the number of apples for the child who gets the most,\n    # we should distribute the remaining apples in ascending order to the other children.\n    # This will ensure that the last child gets the largest share.\n    \n    # The least number of apples the first four children can get, with unique counts: 1, 2, 3, 4\n    # Hence, the total number of apples the first four children get: 1+2+3+4 = 10\n    # Subtract this from the total to find the number of apples the last child can get: 19 - 10 = 9\n    \n    # So, the largest possible number of apples the child who gets the most can have is 9.\n    return 9\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    edge_length = 12\n    distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    # Calculate the number of bushes along one side of the square by considering the usable length\n    usable_length = edge_length - 2 * distance_from_edge\n    number_bushes_one_side = usable_length // distance_between_bushes\n    \n    # Each side of the square will have the same number of bushes; the total number is four times this number\n    # Subtract the 4 corner bushes as they are counted twice in the above multiplication\n    total_bushes = 4 * number_bushes_one_side - 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    q_days = 8\n    q_hours_per_day = 10\n\n    # Calculate the work done by P and Q in one day\n    work_per_day_p = 1 / (p_days * p_hours_per_day)\n    work_per_day_q = 1 / (q_days * q_hours_per_day)\n\n    # Calculate the work done by P and Q together in one hour\n    combined_work_per_hour = work_per_day_p + work_per_day_q\n\n    # Calculate the total hours P and Q need to complete the job together\n    total_hours_needed = 1 / combined_work_per_hour\n\n    # Since they work 8 hours a day together, divide the total hours \n    # needed by 8 to find the number of days needed to complete the job\n    days_needed = total_hours_needed / 8\n\n    return days_needed\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132\n    speed_slow_van = 78\n    time_hours = 8\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60\n    total_masks = remaining_work / (1 - (completed_percentage / 100))\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    \n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    solution = solve(equation, original_score)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    n = 78\n    even_divisors = [i for i in range(2, n + 1, 2) if n % i == 0]\n    return len(even_divisors)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given exchange rates\n    rabbits_per_goat = 9 / 3\n    goats_per_cow = 2 / 4\n    \n    # Find the exchange rate of rabbits per cow by multiplying the individual rates\n    rabbits_per_cow = rabbits_per_goat * goats_per_cow\n\n    # Calculate how many rabbits can be exchanged for 2 cows\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score_for_correct = 4\n    score_for_incorrect = -1\n    total_score = 168\n\n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        if correct_answers * score_for_correct + incorrect_answers * score_for_incorrect == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let the number of pencils be 4x and the number of pens be 5x\n    # After taking out a pen and adding a pencil, the ratio becomes 7:8\n    # So, the number of pencils becomes 4x + 1, and the number of pens becomes 5x - 1\n    # The new ratio can be represented as (4x + 1):(5x - 1) = 7:8\n    \n    # Solving for x using the ratios 4x:5x = 4:5 and (4x + 1):(5x - 1) = 7:8\n    for x in range(1, 1000):  # We limit the range to a reasonable number to find an integer solution\n        if (4 * x + 1) * 8 == (5 * x - 1) * 7:\n            pencils = 4 * x\n            pens = 5 * x\n            total = pencils + pens\n            return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    result = custom_operation(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols we'll need to solve the problem\n    planned_profit = 0.6  # Planned profit is 60%\n    total_profit = 0.8 * planned_profit  # Total profit is 80% of the planned profit\n    first_day_sold = 0.7 # 70% of books sold on first day\n    first_day_profit = 0.6 # 60% profit on first day\n    remaining_books = 1 - first_day_sold  # Remaining books to be sold on second day\n    discount_rate = symbols('discount_rate')\n\n    # Equation derived from the total profit calculation\n    # (Profit from first day + Profit from second day) / Total cost = Total profit\n    # first_day_sold * first_day_profit + remaining_books * (-(discount_rate)) = total_profit\n    equation = Eq(first_day_sold * first_day_profit + remaining_books * (-(discount_rate)), total_profit)\n    \n    # Solve the equation to find the discount rate\n    discount_rate_solution = solve(equation, discount_rate)\n    \n    # Since we need to give the discount rate in percentage multiplying the solution by 100\n    return discount_rate_solution[0] * 100\n\n# Call the function and get the answer\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72  # Number of girls\n    boys_percentage = 40  # Percentage of boys\n    total_percentage = 100  # Total percentage for boys and girls\n    girls_percentage = total_percentage - boys_percentage  # Percentage of girls\n\n    # Calculate total number of children based on the percentage of girls\n    total_children = girls * total_percentage / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    strawberries_now = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return strawberries_now\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Each sheet has two pages, with one page number on the front and following page on the back\n    # last page number before the missing pages is 14, so the next page 15 is missing\n    # first page number after the missing pages is 35, so the previous page 34 is missing\n    # this implies that pages from 15 to 34 inclusive are missing\n    \n    # count the number of missing pages\n    missing_pages = 34 - 15 + 1\n\n    # since each sheet has two pages, divide the total missing pages by 2\n    missing_sheets = missing_pages // 2\n\n    return missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n    equation1 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n    equation2 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8] # Available digits\n    odd_numbers_count = 0\n    \n    for tens_digit in digits:\n        for ones_digit in [1, 3]: # Only 1 or 3 can be the last digit of an odd number\n            if tens_digit != ones_digit and tens_digit != 0:\n                odd_numbers_count += 1\n    \n    return odd_numbers_count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    for boys in range(38 + 1):\n        girls = 38 - boys\n        if boys * 2 + girls * 4 == 126:\n            return boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_num = 10\n    end_num = 25\n    return end_num - start_num + 1\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60  # Convert seconds to minutes\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c represent the original number of cows and g represent the original number of goats in the farm.\n    c, g = symbols('c g')\n    \n    # According to the problem, 65% of the animals in farm were cows and the rest were goats.\n    # We can say 65% of the total number of animals (c+g) were cows, so c = 0.65(c+g).\n    # When 240 more cows and goats were added, the number of cows became c + 240.\n    # The number of goats doubled, so the number of goats became 2 * g.\n    \n    # The percentage of cows increased by additional 20%, so now cows make up 85% (65%+20%).\n    # If we now have (c + 240) cows, they represent 85% of the total number which is now (c + g + 240).\n    \n    # Equation 1: The original number of cows were 65% of the total number of animals.\n    equation1 = Eq(c, 0.65 * (c + g))\n    \n    # Equation 2: After 240 additional animals were added, cows made up 85% of the total.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    \n    # Equation 3: The number of goats doubled \n    # No need to write an equation for this as it is not necessary for setting up our two equations system.\n    \n    # We can solve the two equations to find the values of c and g\n    solutions = solve((equation1, equation2), (c, g))\n    \n    # We need to find the initial number of goats, which is given by g\n    return solutions[g]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    ans = 1\n    for denominator in range(3, 21, 2):\n        ans *= (1 + (2 / denominator))\n    return ans\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_needed_cm = 400 * 85\n    roll_length_cm = 20 * 100  # converting meters to centimeters\n    rolls_needed = -(-string_length_needed_cm // roll_length_cm)  # Ceiling division\n    return int(rolls_needed)\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n\n    future_ages_sum = Eq(john + emma, 27 - 2 * 3) # Sum of ages in 3 years' time minus 3 years for both\n    john_age_difference = Eq(john, emma + 7)\n\n    solved_ages = solve((future_ages_sum, john_age_difference), (emma, john))\n\n    return solved_ages[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder_after_donation = salary - donation\n    spending_on_food = 5 * remainder_after_donation / 6\n    savings = remainder_after_donation - spending_on_food\n\n    equation = Eq(spending_on_food - donation, 78)\n\n    solution_salary = solve(equation, salary)\n\n    return solution_salary[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of powers of 2 cycles every 4 powers: 2, 4, 8, 6\n    power_of_2_cycle = [2, 4, 8, 6]\n    # The last digit of the first part (2 raised to the power of 2017)\n    last_digit_of_2 = power_of_2_cycle[(2017 - 1) % 4]\n    \n    # The last digit of powers of 3 cycles every 4 powers: 3, 9, 7, 1\n    power_of_3_cycle = [3, 9, 7, 1]\n    # The last digit of the second part (3 raised to the power of 2017)\n    last_digit_of_3 = power_of_3_cycle[(2017 - 1) % 4]\n    \n    # Final last digit is the product of the last digits of both parts, modulo 10\n    ans = (last_digit_of_2 * last_digit_of_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) David walks after increasing his speed.\n    # So, he walks for (t + 10) minutes in total.\n    t = symbols('t')\n    \n    # Equation for the distance walked at the first speed (150m/min for 10 minutes)\n    distance1 = 150 * 10\n    \n    # Equation for the distance walked at the second speed (200m/min for t minutes)\n    distance2 = 200 * t\n    \n    # The total distance walked is the sum of the two distances, which is 3700m.\n    # So, we set up the equation distance1 + distance2 = 3700.\n    equation = Eq(distance1 + distance2, 3700)\n    \n    # Solve for t\n    time_spent_walking_after_speed_increase = solve(equation, t)[0]\n    \n    # Calculate the total time spent walking\n    total_time_spent = time_spent_walking_after_speed_increase + 10\n    \n    return total_time_spent\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # 7th term is a + 6d = 57\n    # 15th term is a + 14d = 89\n    # Therefore, we can subtract the first equation from the second to find the common difference d\n    \n    # (a + 14d) - (a + 6d) = 89 - 57\n    # 8d = 32\n    # d = 32 / 8\n    common_difference = (89 - 57) / (15 - 7)\n    \n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n\n    while ans[0] < 400:\n        return ans[0]\n        ans = (ans[0] + ans[1], ans[1])\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    # The known digits sum up to 4 + 7 + 1 + 9 = 21\n    known_sum = 21\n    # The remaining digits A, B, and C must sum up to a number which, \n    # when added to 21, results in a multiple of 9.\n\n    # Initialize possible solutions\n    possible_solutions = []\n\n    # Check for all possible combinations of A, B, and C where A != B != C and none of {A, B, C}\n    # is among {4, 7, 1, 9} since all digits must be different\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and A != C and B != C and A != 4 and A != 7 and A != 1 and A != 9 and B != 4 and B != 7 and B != 1 and B != 9 and C != 4 and C != 7 and C != 1 and C != 9 and (known_sum + A + B + C) % 9 == 0:\n                    # Store valid solutions\n                    possible_solutions.append((A, B, C))\n\n    # If there are valid solutions, return the sum A + B + C of the first one\n    # and reconstruct the full seven-digit number for this solution,\n    # otherwise return an error message.\n    if possible_solutions:\n        A, B, C = possible_solutions[0]\n        return A + B + C, f'47{A}1{B}9{C}'\n    else:\n        return \"No valid solution found\"\n\nans, number = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, o = symbols('a o')  # a for apple, o for orange\n    eq1 = Eq(2*a + o, 40)  # Jessie's purchase\n    eq2 = Eq(a + 2*o, 35)  # Bella's purchase\n    \n    solutions = solve((eq1, eq2), (a, o))\n    \n    # Carrie's purchase: one apple and one orange\n    carrie_payment = solutions[a] + solutions[o]\n    \n    return carrie_payment\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digit_options = 3  # There are three digits: 5, 6, and 7\n    places = 3  # A three-digit number has three places: hundreds, tens, and units\n    \n    # Since each digit can be used more than once, we have three choices for each place\n    total_numbers = digit_options ** places\n\n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            # The condition each child gets at least 1 sweet is implicit since the least common multiple is \n            # bigger than 3, 4, 5, and 6 (the number of children).\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n    \n    both_classes = sport_class + reading_class - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    total_rackets = 2\n    ball_price = 1.5\n    total_budget = 140\n    \n    total_spent_on_rackets = racket_price * total_rackets\n    remaining_budget = total_budget - total_spent_on_rackets\n    number_of_balls = remaining_budget // ball_price\n    \n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case scenario, you could pick all purple balls first, then all white balls.\n    # You have to draw one more ball to ensure you get a red ball (different color).\n    # That's 4 (purple) + 4 (white) + 1 (red) = 9 balls.\n    \n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n\n    weeks = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        weeks += 1\n\n    return weeks\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Total number of ways to choose 3 points out of 12 to form a triangle.\n    total_combs = 12 * 11 * 10 // (3 * 2 * 1)\n\n    # Number of right angled triangles with the right angle at the center.\n    right_angle_at_center = 0  # Not possible to have right angle at the center\n\n    # Number of right angled triangles with the right angle at the circumference.\n    # This is only possible when the hypotenuse is a diameter of the circle and the right angle\n    # is formed between two radii of the circle. Since there are 12 points which form 6 diameters,\n    # we have 6 options for the hypotenuse. Each time we pick a diameter, there would be 10 remaining\n    # points to choose from for the right angle at the circumference. Hence 6 * 10 combinations.\n    right_angle_at_circumference = 6 * 10\n\n    # Subtract the right angle at the center which would not form a triangle\n    right_angled_triangles = total_combs - right_angle_at_center - right_angle_at_circumference\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n\n    return total_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples], solutions[oranges]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets = 240\n    sweets_left = 150\n    sweets_per_week = 45 - 60  # sweets bought minus sweets eaten\n    weeks = (sweets - sweets_left) // abs(sweets_per_week)\n\n    return weeks\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # As the tiger is the 11th from both the front and the back,\n    # there must be 10 animals in front of him and 10 animals behind him.\n    total_animals = 10 + 1 + 10  # 10 in front, tiger himself, 10 behind\n    \n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # First, find how many roses per vase in the first division\n    roses_in_first_division = 24\n    vases_in_first_division = 3\n    roses_per_vase_first_division = roses_in_first_division / vases_in_first_division\n    \n    # Now, knowing that the roses in new vases are equal in number to the ones in the first division\n    vases_in_second_division = 4\n    roses_per_vase_second_division = roses_per_vase_first_division\n    total_roses_in_second_division = roses_per_vase_second_division * vases_in_second_division\n    \n    # Total roses are the sum of first and second division\n    total_roses = roses_in_first_division + total_roses_in_second_division\n    \n    return int(total_roses)\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.5  # cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.3  # cost of a packet of Mamee is 30 cents less than Haribo\n    jelly_cost = 6 * mamee_cost  # a big packet of jelly costs 6 times as much as a packet of Mamee\n    return jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    from num2words import num2words\n    total = 2405 + 1827\n    return num2words(total)\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    return 2 + 7  # Sum of lemon and cherry flavored candies, excluding mint flavor as Will hates it.\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway = (-18 + (-2)) / 2\n    return halfway\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(0, 10), 4):\n        if p[0] == 0:  # Skip if the number doesn't start with a nonzero digit\n            continue\n\n        # Convert the tuple to integers\n        AB = p[0] * 10 + p[1]\n        BC = p[1] * 10 + p[2]\n        CD = p[2] * 10 + p[3]\n        ABC = p[0] * 100 + BC\n        BCD = p[1] * 100 + CD\n        ABCD = p[0] * 1000 + BCD\n\n        # Check the divisibility conditions\n        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n            return ABCD\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n\n    two_cheese_cakes = 2 * cheese_cake\n    return two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    while number < 80:\n        return number\n        number += 2 * 3 * 4 * 5\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    # In a single elimination tournament, the number of games played is always one less than the number of participants, since every game eliminates one participant until only the winner remains.\n    num_teachers = 16\n    num_games = num_teachers - 1\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the ages of the sons and daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n    \n    # Equation for the sum of their ages\n    sum_of_ages = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    \n    # Sons were born three years apart\n    sons_age_difference = Eq(younger_son - older_son, 3)\n    \n    # Daughters were born two years apart\n    daughters_age_difference = Eq(younger_daughter - older_daughter, 2)\n    \n    # Younger son is twice the age of the older daughter\n    son_daughter_age_relation = Eq(younger_son, 2 * older_daughter)\n    \n    # Solve the system of equations\n    solutions = solve((sum_of_ages, sons_age_difference, daughters_age_difference, son_daughter_age_relation), \n                      (older_son, younger_son, older_daughter, younger_daughter))\n    \n    youngest_child = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n    return youngest_child\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    add_terms = 20 + 19 + 18 + 17 + 16\n    subtract_terms = 15 + 14 + 13 + 12 + 11\n    ans = add_terms - subtract_terms\n    return ans\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Using symbols to denote the cost of wallet and watch.\n    wallet, watch = symbols('wallet watch')\n\n    # Formulating the equations based on the problem statement.\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solving the system of equations to find the cost of wallet and watch.\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = \"428571\"  # The recurring sequence of digits after the decimal point in 3/7\n    total_digits = 58\n    sum_of_digits = sum(int(recurring_sequence[i % len(recurring_sequence)]) for i in range(total_digits))\n    return sum_of_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    \n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    \n    # Calculate the factorial of the total number of books\n    total_permutations = factorial(total_books)\n    \n    # Calculate the number of permutations of each type of book\n    biography_permutations = factorial(3)\n    science_fiction_permutations = factorial(4)\n    magazine_permutations = factorial(2)\n    practice_books_permutations = factorial(2)\n    \n    # Divide the total permutations by the permutations of each type to account for indistinguishable objects\n    ans = total_permutations // (biography_permutations * science_fiction_permutations * magazine_permutations * practice_books_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey = 177 \n    jane = audrey + 32 \n    total = audrey + jane\n    return total\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x is the amount of solution to exchange\n    x = symbols('x')\n    \n    # Equation for the final concentration in bottle A\n    equation_a = Eq((50 * 0.11 + x * (0.47 - 0.11)) / 50, (50 * 0.47 - x * (0.47 - 0.11)) / 50)\n    \n    # Solve the equation\n    sol = solve(equation_a, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string = toms_string + 25\n    difference = nicks_string - toms_string\n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_of_plot_metres = 20\n    distance_apart_metres = 0.40\n    first_cauliflower_distance_metres = 0.20\n    \n    # Convert the length of the plot to centimeters\n    length_of_plot_centimetres = length_of_plot_metres * 100\n    \n    # Calculate the planting space used by the cauliflowers, subtracting space for the first cauliflower\n    planting_space = length_of_plot_centimetres - first_cauliflower_distance_metres\n    \n    # Calculate the number of cauliflowers that can be planted\n    number_of_cauliflowers = planting_space / distance_apart_metres\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # To find the number of different three-digit numbers that can be made with the cards having 1, 3, and 6,\n    # we need to count the permutations of these numbers taken 3 at a time since each digit needs to be used once.\n\n    from itertools import permutations\n\n    # Generate all permutations of the numbers 1, 3, and 6 of length 3\n    perm = permutations([1, 3, 6], 3)\n\n    # Convert the permutations to a set of numbers to remove duplicates and count them\n    numbers = {''.join(map(str, p)) for p in perm}\n    \n    return len(numbers)\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "from itertools import combinations\n\ndef solution():\n    candies = 15\n    number_of_piles = 4\n    ways = 0\n\n    for combo in combinations(range(1, candies), number_of_piles - 1):\n        if sum(combo) < candies:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    primes = []\n\n    for num in range(1, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            prime_count += 1\n            primes.append(num)\n\n    return prime_count, primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30 / 100\n    base_value = 250\n    ans = percentage * base_value\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100\n    subtract_metres = 2 + 7 / 100\n    ans = total_metres - subtract_metres\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:\n            return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    apple_fraction = 5/8\n    apples = total_fruits * apple_fraction\n    pears = total_fruits - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence where each term is 2 times the previous term\n    # The nth term in a geometric sequence is given by a*r^(n-1)\n    # where a is the first term and r is the common ratio\n    # In this sequence, a = 1 and r = 2\n\n    # 20th term would be 1*2^(20-1)\n    term_20 = 2**(20 - 1)\n\n    # 17th term would be 1*2^(17-1)\n    term_17 = 2**(17 - 1)\n\n    # The answer is term_20 / term_17\n    ans = term_20 / term_17\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n    for i in range(1, sum_of_numbers):\n        product = i * (sum_of_numbers - i)\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    num_days_worked = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * num_days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # The average number of books for Alice, Becky, and Crystal\n    average_ABC = 60\n\n    # The total number of books for Alice, Becky, and Crystal\n    total_ABC = average_ABC * 3\n\n    # The new average including Dennis\n    new_average_ABCD = average_ABC + 10\n\n    # The total number of books for Alice, Becky, Crystal, and Dennis\n    total_ABCD = new_average_ABCD * 4\n\n    # The number of books Dennis has\n    dennis_books = total_ABCD - total_ABC\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    snail_position = 0\n    day_count = 0\n    daily_climb = 5\n    nightly_slide = 3\n\n    while snail_position < 16:\n        day_count += 1\n        snail_position += daily_climb\n        if snail_position >= 16:\n            break\n        snail_position -= nightly_slide\n\n    return day_count\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 9**2  # The square of 9 is the largest two-digit square number (81)\n\n    product = smallest_two_digit_prime * largest_two_digit_square\n\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    num_intervals_1_to_4 = 3\n    num_intervals_1_to_9 = 8\n\n    distance_per_interval = distance_1_to_4 / num_intervals_1_to_4\n    distance_1_to_9 = distance_per_interval * num_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # To determine if the chocolate bars can be divided evenly among the students,\n    # we need to check if 233 is a prime number. If it is, Michael is correct,\n    # since a prime number cannot be divided evenly by any other number than 1 and itself.\n    \n    num = 233\n    if num > 1:  # Check for prime numbers greater than 1\n        # Check for factors other than 1 and the number itself\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False  # Number is not prime, thus can be divided evenly\n        else:\n            return True  # Number is prime, thus cannot be divided evenly\n    else:\n        # If number is less than or equal to 1, it's not prime\n        return False\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    number = 6 * 0.1 + 7 * 0.01 + 4\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_of_ship_in_still_water = 22\n    speed_of_current = 3\n    total_speed_downstream = speed_of_ship_in_still_water + speed_of_current\n    distance = 200\n    \n    time = distance / total_speed_downstream\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    equation1 = Eq((peaches - 10) / students_A, 5)\n    equation2 = Eq((peaches + 2) / students_B, 8)\n\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n\n    pencils_for_pen = cost_pen // cost_pencil\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # Since Justin answers all questions, x + y = 10\n    # Justin gets 6 points for a correct answer and loses 2 points for a wrong answer.\n    # The total points Justin gets is 6x - 2y = 36\n    # We have two equations:\n    # x + y = 10  (Equation 1)\n    # 6x - 2y = 36 (Equation 2)\n\n    # Let's use a simple approach by solving the equations.\n    \n    # From equation 1, we have y = 10 - x \n    # Substitute y into equation 2:\n    # 6x - 2(10 - x) = 36\n    # 6x - 20 + 2x = 36\n    # 8x = 56\n    # x = 7\n\n    # Justin answers 7 questions correctly.\n    correct_answers = 7\n    return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ways = trains + buses + flights\n    return ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    ans = product % 100\n    return ans\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "def solution():\n    from math import factorial as fact\n\n    # There can only be at most 2 sketch performances together [D S S] [D S S] D\n    # The arrangement of the sketch(S) acts as a delimiter to the dancing(D)\n    # It means we have 4 blocks of dancing performance DxxxxDxDxDxD\n    # Which is 7 dancing D going into 4 slots (with at least 1 in each slot)\n    # Therefore, it's a problem of distributing n identical items into r different boxes\n    # with each box having at least one item = C(n-1, r-1)\n    # Number of ways to distribute 7 Ds into 4 boxes = C(7-1, 4-1) = C(6, 3)\n    ways_to_distribute_dancing = fact(6) // (fact(3) * fact(6 - 3))\n\n    # Now we need to arrange the 3 sketch performances with the 4 blocks\n    # This is equivalent to arranging 3 S and 3 dividers (which represent the blocks)\n    # Total arrangements will be C(3+3, 3) = C(6, 3)\n    ways_to_arrange_sketch = fact(6) // (fact(3) * fact(6 - 3))\n\n    # Total arrangements = arrangements of D * arrangements of S\n    total_arrangements = ways_to_distribute_dancing * ways_to_arrange_sketch\n\n    return total_arrangements\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    h = 1\n    while True:\n        if (28512 / h) ** (1/3) == int((28512 / h) ** (1/3)):\n            return h\n        h += 1\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Start by taking one chip of each color, that's 3 chips in total.\n    taken_chips = 3\n    \n    # Now, to ensure two chips of different colors, we just need to take one more chip.\n    # This is because, even if this fourth chip is the same color as one already taken, \n    # we will still have at least two chips of different colors.\n    # So the answer is 3 (one of each color) + 1 (the extra chip to ensure two different colors) = 4\n    return taken_chips + 1\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "import math\n\ndef solution():\n    # This problem is an example of the derangement problem or subfactorial\n    n = 7\n    \n    # Using the formula for subfactorial: !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # We can use a loop to calculate the subfactorial\n    subfactorial = math.factorial(n)\n    \n    for i in range(n + 1):\n        if i % 2 == 0:\n            subfactorial += (-1)**i / math.factorial(i)\n        else:\n            subfactorial -= (-1)**i / math.factorial(i)\n    \n    subfactorial = int(round(subfactorial))  # Sometimes the calculation could end up with a float very close to an integer\n    return subfactorial\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # Each father shakes hands with 9 other fathers, 9 mothers, and 9 children\n    # from other families\n    handshakes_father = 10 * 9 * 3\n\n    # Each mother shakes hands with 9 fathers and 9 children from other families\n    # but not with other mothers\n    handshakes_mother = 10 * 9 * 2\n\n    # Each child shakes hands with 9 fathers and 9 mothers from other families\n    # but not with other children\n    handshakes_child = 10 * 9 * 2\n\n    # Total handshakes are the sum of all handshakes\n    total_handshakes = handshakes_father + handshakes_mother + handshakes_child\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415925\n    ans = a**2 - a*b\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_from_end\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9)\n    odd_digits = 5\n    # Each place in the 3-digit number can be filled by any of the odd digits\n    # The hundreds place cannot be 0, and it must be an odd digit\n    # Thus, we have 5 options for each of the three places\n    return odd_digits * odd_digits * odd_digits\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    sequence = \"85274\"\n    index = (79 - 1) % len(sequence)  # Subtract 1 because the sequence starts from the first decimal place\n    return int(sequence[index])\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    for i in range(999, 99, -1):\n        if (i + 2009) % (17 * 19) == 0:\n            max_number = i\n            break\n    return max_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    excess_payment = 82  # parking bill amount\n    free_hours = 40  # free parking hours\n    hourly_rate_40_to_50 = 5  # rate after free hours up to 50\n    hourly_rate_50_to_60 = 8  # rate from 50 to 60 hours\n    hourly_rate_after_60 = 15  # rate after 60 hours\n    \n    # Calculate the payment needed for parking 50 hours\n    payment_for_50_hours = (50 - free_hours) * hourly_rate_40_to_50\n    \n    if excess_payment <= payment_for_50_hours:\n        # Calculate hours if total payment is under the threshold of 50 hours\n        paid_hours = (excess_payment / hourly_rate_40_to_50)\n        total_hours = free_hours + paid_hours\n    else:\n        # Calculate additional payment beyond 50 hours\n        excess_payment -= payment_for_50_hours\n        \n        # Calculate the payment needed for parking 60 hours\n        payment_for_60_hours = (60 - 50) * hourly_rate_50_to_60\n        \n        if excess_payment <= payment_for_60_hours:\n            # Calculate hours if total payment is under the threshold of 60 hours\n            paid_hours = (excess_payment / hourly_rate_50_to_60)\n            total_hours = 50 + paid_hours\n        else:\n            # Calculate additional payment beyond 60 hours\n            excess_payment -= payment_for_60_hours\n            # Calculate rest of the hours with the rate of $15/hour\n            paid_hours = (excess_payment / hourly_rate_after_60)\n            total_hours = 60 + paid_hours\n\n    return round(total_hours)\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    expected_sum = (total_pages * (total_pages + 1)) // 2\n    actual_sum = 1939\n    missing_page = expected_sum - actual_sum\n    \n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Worst case scenario for picking marbles one by one until she gets all different colors\n    # She can pick all red marbles, all green marbles, all blue marbles in the worst case\n    # and then the next one has to be of the remaining color\n    max_red = 4\n    max_green = 7\n    max_blue = 6\n    # After picking all of one color, she would pick all of another color, and so on,\n    # until she has to pick one of the last remaining color\n    required_marbles = max_red + max_green + max_blue + 1  # +1 for the guarantee to get one orange\n\n    return required_marbles\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(999):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Function to calculate ways to reach a given step\n    def ways_to_step(step):\n        if step == 0:\n            return 1\n        elif step < 0:\n            return 0\n        return ways_to_step(step - 1) + ways_to_step(step - 2) + ways_to_step(step - 3)\n\n    # Calculate ways to reach the 4th and 9th step\n    # Jimmy can't step on 5th, so we consider steps before and after it\n    ways_to_4 = ways_to_step(4)\n    ways_to_9 = ways_to_step(9 - 5)  # 9th is 4 steps away from 5th\n\n    # Now multiply ways to step 4 with ways to step 9\n    # because these two segments are independent\n    # Then multiply by 1, as from 9th to 10th, there is only one way (one step)\n    total_ways = ways_to_4 * ways_to_9 * 1\n\n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    number_of_days = 7  # Monday to Sunday\n\n    total_earnings = average_earnings_per_day * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # As the numbers are different, positive odd numbers,\n    # the smallest sequence of odd numbers start from 1, 3, 5, 7, and 9.\n    # This sums up to 1+3+5+7+9 = 25.\n    # As we need the sum to be 85, and we are interested in the largest number,\n    # we would distribute the remaining 85-25 = 60 among the numbers in such a way that\n    # the last number remains the largest.\n    # As the numbers are odd and different, we add 2 to all the preceding numbers and add the rest to the last number.\n\n    base_sum = 1 + 3 + 5 + 7 + 9  # sum of the first 5 odd numbers\n    remaining_sum = 85 - base_sum  # remaining sum to distribute\n\n    # Add 2 to each of the first four numbers to maintain their odd property\n    remaining_sum -= 2 * 4\n\n    # The remaining sum will be added to the last largest number\n    largest_number = 9 + remaining_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    T, income = symbols('T income')\n\n    # The tax on the first $30,000\n    tax_first_30000 = T / 100 * 30000\n\n    # The tax on any amount above $30,000\n    tax_above_30000 = (T + 3) / 100 * (income - 30000)\n\n    # Total tax paid which is the sum of both taxes when income is above $30,000\n    total_tax = tax_first_30000 + tax_above_30000\n\n    # For incomes $30,000 or less, the total tax is equal to the tax on the first $30,000\n    total_tax_below_30000 = tax_first_30000\n\n    # Ryan noticed the total tax he paid is (T + 1)% of his income\n    tax_condition = Eq(total_tax, (T + 1) / 100 * income)\n\n    # The same condition applies for incomes $30,000 or less\n    tax_condition_below_30000 = Eq(total_tax_below_30000, (T + 1) / 100 * income)\n\n    # Attempt to solve for income above $30,000\n    solutions = solve((tax_condition, income > 30000), (T, income))\n\n    # If no solution for incomes above $30,000, attempt to solve for incomes $30,000 or less\n    if not solutions:\n        solutions = solve((tax_condition_below_30000, income <= 30000), (T, income))\n\n    # Assuming there is at least one solution, we take the first one\n    annual_income = solutions[0][1]\n\n    return annual_income\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    distance = 500\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    seconds_per_minute = 60\n    n = seconds_per_minute * 2.5\n    return int(n)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of 20-cent and 50-cent coins\n    num_20_cent, num_50_cent = symbols('num_20_cent num_50_cent')\n\n    # Equation 1: The total number of coins is 21\n    equation1 = Eq(num_20_cent + num_50_cent, 21)\n    \n    # Equation 2: The total value is $6.30 -> 20 cents * num_20_cent + 50 cents * num_50_cent = 630 cents\n    equation2 = Eq(20 * num_20_cent + 50 * num_50_cent, 630)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (num_20_cent, num_50_cent))\n\n    # We want the number of 50-cent coins\n    return solutions[num_50_cent]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let the speed of Alan be 'a' meters per minute\n    # Then, the speed of Phillip will be 'a + 15' meters per minute\n    # Alan takes '12 + 3' minutes to arrive at B, that is 15 minutes\n    # The distance covered by Phillip in 12 minutes will be the same distance Alan covers in 15 minutes\n\n    # Distance covered by Phillip = speed of Phillip * time taken by Phillip\n    # Distance covered by Alan = speed of Alan * time taken by Alan\n    # Therefore, (a + 15) * 12 = a * 15\n\n    # Let's solve for 'a'\n    a = symbols('a')\n    equation = Eq((a + 15) * 12, a * 15)\n    solution_a = solve(equation, a)[0]\n\n    # Now, find the distance between A and B using Phillip's speed and time\n    distance_AB = (solution_a + 15) * 12\n    \n    return distance_AB\n    \nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    num_ways_girls = comb(8, 4)\n    num_ways_boys = comb(12, 3)\n    num_ways_total = num_ways_girls * num_ways_boys\n    return num_ways_total\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    \n    # Initialize counting variable\n    count = 0\n    \n    # Loop through the numbers starting with the first one, adding a '5' each time\n    number = '2'\n    while len(number) <= 5:\n        # Convert the string to an integer\n        num = int(number)\n        \n        # Check if it is a perfect square by taking the square root and comparing it with its integer part\n        root = math.sqrt(num)\n        if root.is_integer():\n            count += 1\n            \n        # Append '5' to the number to get the next one\n        number += '5'\n    \n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_original, tom_original = symbols('alice_original tom_original')\n    \n    # Equation for the amount Alice had after spending $36\n    alice_after_spending = alice_original - 36\n    # Tom originally had $68.10\n    tom_original = 68.10\n    # Equation for the difference between Tom's money and Alice's money after she spent\n    equation = Eq(alice_after_spending + 25.40, tom_original)\n\n    # Solve for Alice's original amount of money\n    solutions = solve(equation, alice_original)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_of_five_numbers = 5 * 28\n    total_of_twelve_numbers = 12 * 11\n    combined_mean = (total_of_five_numbers + total_of_twelve_numbers) / (5 + 12)\n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 0.20\n\n    discount_amount = original_price * discount_percentage\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length_of_road = 74\n    space_between_benches = 7\n    number_of_gaps = 8  # Because there are 9 benches and so 8 gaps between them\n\n    total_length_of_benches = total_length_of_road - (space_between_benches * number_of_gaps)\n    length_of_each_bench = total_length_of_benches / 9\n\n    return length_of_each_bench\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in class B as 'b' and the number of candies as 'c'.\n    b, c = symbols('b c')\n\n    # Class A has twice the number of students as class B\n    a = 2 * b\n\n    # Equations based on the problem statement\n    eq1 = Eq(c - 4 * a, -20)\n    eq2 = Eq(c - 6 * b, 16)\n\n    # Substitute the expression for 'a' in the first equation\n    eq1_substituted = Eq(c - 4 * (2 * b), -20)\n\n    # Solve the system of equations\n    solutions = solve((eq1_substituted, eq2), (b, c))\n\n    # Extract the number of candies from the solutions\n    return solutions[c]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    regrowth = 5\n    # One new arm grows after every 5 cuts\n    regrowth_occurences = total_cuts // regrowth\n\n    # original_arms - total_cuts + regrowth_occurences = final_arms\n    # Since it's an octopus bugbear, final arms should be 8\n    final_arms = 8\n    original_arms = total_cuts - regrowth_occurences + final_arms\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # sum of the 10 different whole numbers\n    total_sum = 2021\n    \n    # 3rd greatest number\n    third_greatest_number = 246\n    \n    # to minimize the 4th greatest number,\n    # we need to maximize the sum of the first 3 greatest numbers\n    # so, let's assign the 1st greatest number as 247 (1 more than 246)\n    # and the 2nd greatest number as 248 (1 more than 247)\n    first_greatest_number = third_greatest_number + 1\n    second_greatest_number = first_greatest_number + 1\n    \n    # now, we need to minimize the sum of remaining 7 numbers\n    # in order to do that, we assign them the smallest unique whole numbers starting from 1\n    # since the numbers need to be distinct, we will have: 1, 2, 3, ..., 7\n    min_sum_of_seven_numbers = sum(range(1, 8))\n    \n    # now we can calculate the minimum value of the 4th greatest number\n    # by subtracting the sum we already have from the total\n    remaining_sum = total_sum - (first_greatest_number + second_greatest_number +\n                                 third_greatest_number + min_sum_of_seven_numbers)\n    \n    min_fourth_greatest_number = remaining_sum\n    \n    return min_fourth_greatest_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # We aim to get the worst-case scenario to ensure we have 2 different coloured coins.\n    # If we take 6 coins, they could all be of the same colour (either all gold or all silver).\n    # So we need to take out one more coin to ensure we have a different coloured coin.\n    # That would be 7 coins at a minimum: 6 coins could be the same color, and the 7th coin will be of a different color for sure. \n    return 7\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Distance from the 1st to the 5th tree is equal to distance for 4 intervals (5 - 1)\n    distance_per_interval = 20 / 4\n    \n    # Distance from the 8th to the 14th tree is equal to distance for 6 intervals (14 - 8)\n    ans = distance_per_interval * 6\n    return ans\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # A number can't be adjacent to any of its multiples or factors, this includes 1\n    # Since the multiples of any number covers its factors, excluding 1, we only need to focus on multiples\n    # Start with the largest number 24 and go downwards, excluding its multiples (which also excludes the factors)\n    \n    # keep track of excluded numbers\n    excluded = set()\n    # start with the largest number\n    for i in range(24, 0, -1):\n        if i not in excluded:\n            # Exclude all multiples of the current number within the range\n            for multiple in range(2*i, 25, i):\n                excluded.add(multiple)\n\n    # The remaining numbers are those that can be selected\n    selectable_numbers = set(range(1, 25)) - excluded\n\n    # The answer is the count of selectable numbers\n    return len(selectable_numbers)\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    \n    for i in range(1, 511):\n        count += str(i).count('5')\n\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jerry's age be j and Devi's age be d\n    j, d = symbols('j d')\n    \n    # Devi is 8 years older than Jerry\n    equation1 = Eq(d, j + 8)\n    \n    # In 4 years' time, the ratio of their age will be 5:7\n    equation2 = Eq((j + 4) / (d + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, d))\n\n    return solutions[j]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Grey's age and his father's age\n    grey_age, father_age = symbols('grey_age father_age')\n\n    # Equation 1: father_age - grey_age = 30 (When Grey was born, his father was 30 years old)\n    equation1 = Eq(father_age - grey_age, 30)\n\n    # Equation 2: father_age = 3 * grey_age (This year, his father is three times Grey's age)\n    equation2 = Eq(father_age, 3 * grey_age)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    \n    # Quantity of Bud's apples\n    buds_apples = 1\n    # Pip has 5 times the quantity of Bud's apples\n    pips_apples = 5 * buds_apples\n    \n    # Values for drawing the graph\n    labels = ['Bud', 'Pip']\n    sizes = [buds_apples, pips_apples]\n    colors = ['lightcoral', 'lightskyblue']\n    \n    # Plotting the \"parts\" graph, which will be a bar chart\n    plt.figure(figsize=(8, 6))\n    plt.bar(labels, sizes, color=colors)\n    plt.xlabel('Persons')\n    plt.ylabel('Number of Apples')\n    plt.title('Comparison of Apples between Bud and Pip')\n    plt.show()\n    \n    # Since we've drawn the graph, the function returns True to indicate success.\n    return True\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    value = 10 * (numerator / denominator)\n    return value\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    # Using the Pigeonhole Principle, the minimum number of books in the fullest layer\n    # is the result of the integer division of total books with layers plus one\n    min_books_in_fullest_layer = (total_books // layers) + 1 if total_books % layers != 0 else total_books // layers\n    \n    return min_books_in_fullest_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_seats = (num_terms * (first_term + last_term)) // 2\n    return total_seats\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # Number of choices for hundreds place (cannot be 0): 2 (1 or 2)\n    # Number of choices for tens place: 3 (0, 1, or 2, regardless of the hundreds choice)\n    # Number of choices for units place: 3 (0, 1, or 2, regardless of the tens and hundreds choices)\n    # HOWEVER, since we cannot repeat digits, the number of choices for tens and units place reduces by one each.\n    \n    choices_for_hundreds = 2  # Because 0 cannot be at hundreds place\n    choices_for_tens = 2      # After choosing hundreds place, one digit is used\n    choices_for_units = 1     # After choosing hundreds and tens, two digits are used\n\n    total_combinations = choices_for_hundreds * choices_for_tens * choices_for_units\n    \n    return total_combinations\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    value = solve_congruence(*congruences)\n\n    # Find least positive value within the range 100 to 200\n    while value[0] < 100:\n        value = (value[0] + value[1], value[1])\n\n    if value[0] > 200:\n        raise ValueError(\"No possible value within the given range\")\n\n    return value[0]\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The minimum divisor should always be greater than the remainder\n    divisor = remainder + 1\n    # The minimum dividend can be found by using the formula:\n    # dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hazel_now = symbols('hazel_now')\n    jessica_now = hazel_now - 3\n    hazel_future = hazel_now + 3\n    jessica_future = jessica_now + 1\n    hazel_next_year = hazel_future + 1\n    jessica_next_year = jessica_future + 1\n\n    total_age_next_year = hazel_next_year + jessica_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of cows and g represent the number of goats initially.\n    c, g = symbols('c g')\n    \n    # 65% of the animals were cows initially, so 35% were goats.\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n    \n    # When 240 more animals are added, the number of goats doubled.\n    # This means the number of goats initially plus the 240 is twice the initial number of goats.\n    equation3 = Eq(2 * g, g + 240)\n    \n    # After adding 240 animals, the percentage of cows is 65% + 20% = 85%\n    # So, the new number of cows (initial cows + 240) is 85% of the new total (initial cows + initial goats + 240)\n    equation4 = Eq(c + 240, 0.85 * (c + g + 240))\n    \n    # Solve the system of equations for c and g.\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Unit conversion: meters to centimeters, millimeters to centimeters\n    second_section_cm = 1.5 * 100  # 1.5m to cm\n    third_section_cm = 150 / 10    # 150mm to cm\n\n    # Sum of all sections in cm\n    total_width_cm = 30 + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    # The age difference will remain constant\n    age_difference = uncle_future_age - melanie_age\n    uncle_current_age = melanie_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    percentage = (pence / total_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count_facing_teacher = 0\n    for student_number in range(1, 51):\n        # If the number is a multiple of 4 or 6, the student will turn backwards initially\n        if student_number % 4 == 0 or student_number % 6 == 0:\n            continue  # Skip this student as they are facing backwards\n        # If not a multiple of either, the student is still facing the teacher\n        count_facing_teacher += 1\n    return count_facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('3:25 PM', '%I:%M %p')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations \n    \n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    \n    return len(list(perm))\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of the monomial -x^3*y^(2n) is the sum of the exponents of x and y.\n    # In this case, the degree is given as 5.\n\n    # degree of x is 3\n    degree_x = 3\n\n    # let the degree of y be 2n\n    # so, degree_x + degree_y = 5\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 1\n    n = (5 - degree_x) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    result = result.limit_denominator()  # Convert to simplest form\n    ans = result.numerator // result.denominator  # Integer part\n    numerator = result.numerator % result.denominator  # Numerator of the fractional part \n    return ans, Fraction(numerator, result.denominator)\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different ranks (1-10, J, Q, K)\n    # and 4 suits, to guarantee drawing at least two cards of the same rank,\n    # one must draw one more card than there are different ranks.\n    num_ranks = 13\n    cards_to_draw = num_ranks + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    ans = None\n    # Start with the smallest 3-digit even number and iterate\n    for num in range(100, 200, 2):\n        # Summing digits of the number\n        if sum(int(digit) for digit in str(num)) == 21:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    sum_fractions = 0\n    for numerator in range(1, 20):\n        for denominator in range(numerator + 1, 21):\n            sum_fractions += numerator / denominator\n    return sum_fractions\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    fraction = 3/5\n    whole = part / fraction\n    return whole\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):  # Smallest two-digit number is 10\n        if num % 3 == 0 and num % 7 == 0:  # Divisible by both 3 and 7\n            return num  # Return the first number that satisfies the condition\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')\n\n    cost_eq = Eq(2 * cacti + 7 * sunflowers, 156)\n    number_eq = Eq(cacti, sunflowers + 6)\n\n    solutions = solve((cost_eq, number_eq), (cacti, sunflowers))\n\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 40 / 100  # convert pence to pounds\n\n    # Sarah's payment\n    sarah_payment = 8 * book_price + 3 * pencil_price\n    # Rebecca's payment\n    rebecca_payment = 3 * book_price + 8 * pencil_price\n    # Sarah paid 1.00 pound more than Rebecca\n    equation = Eq(sarah_payment, rebecca_payment + 1.00)\n\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2 * i) ** 2 for i in range(1, 11)])\n    odd_squares = sum([(2 * i - 1) ** 2 for i in range(1, 11)])\n\n    ans = even_squares - odd_squares\n\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_water = 2\n    num_jugs = 6\n\n    water_used = jug_water * num_jugs\n    water_left = total_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of Liverpool fans at first\n    # then x + 1000 is the number of Manchester United fans at first\n    x = symbols('x')\n\n    # After 30 minutes,\n    # Liverpool fans become x + 472\n    # Manchester United fans become x + 1000 + 4836\n    # The number of Manchester United fans is 3 times that of Liverpool fans\n    equation = Eq(x + 1000 + 4836, 3 * (x + 472))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price, pencil_price = symbols('book_price pencil_price')\n    pencil_price = 0.4  # Since a pencil costs 40p which is £0.40\n    \n    # Equation: Sarah's total cost - Rebecca's total cost = 1\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n    \n    solution = solve(equation, book_price)\n    \n    return solution[book_price]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2\n    before_nini = remaining_after_mike * 2\n    before_bob = before_nini * 2\n    original_amount = before_bob * 2\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 3 * (x + 5), 45)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for number of peaches, students in class B and class A\n    p = symbols('p') # Total number of peaches\n    b = symbols('b') # Class B students\n    a = symbols('a') # Class A students\n\n    # Equations based on the problem statement\n    eq1 = Eq(a, b + 3)\n    eq2 = Eq(5*a + 10, p)\n    eq3 = Eq(8*b - 2, p)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3), (p, a, b))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n\n    while True:\n        current_num_str = str(current_number)\n        current_num_length = len(current_num_str)\n        \n        if digit_count + current_num_length < 2023:\n            digit_count += current_num_length\n            current_number += 1\n        else:\n            break\n\n    position_in_current_num = 2023 - digit_count - 1\n    ans = int(current_num_str[position_in_current_num])\n    \n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    t, c = symbols('t c')  # t: number of T-shirts, c: number of caps\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(t / c, 8 / 5)  # Ratio of T-shirts to caps\n    equation2 = Eq((t / 4) * 3 + (c / 5) * 5, 132)  # Total money collected from selling T-shirts and caps\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    # Since the problem asks for the number of T-shirts Siti had at first, we return t\n    return solutions[t]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 99 - 11  # Simple arithmetic to find the birth year\n    age_on_31_12_01 = 1 + 1 + (1 - birth_year)  # Incrementing age for each year\n\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '4625'\n    permutations_list = sorted(set([''.join(p) for p in permutations(digits)]))\n    \n    # Filter for odd numbers by checking if the last digit is odd\n    odd_numbers = [int(p) for p in permutations_list if int(p[-1]) % 2 != 0]\n    \n    # Return the smallest odd number\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    max_students_per_boat = 6\n    \n    # Calculate the number of full boat trips needed\n    full_trips = total_students // max_students_per_boat\n    \n    # Check if there are any remaining students after full trips\n    remaining_students = total_students % max_students_per_boat\n    \n    # If there are remaining students, they will require one more trip\n    if remaining_students > 0:\n        full_trips += 1\n\n    return full_trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    number_in_sequence = 36\n    \n    term_number = (number_in_sequence - first_term) // common_difference + 1\n\n    return term_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe, eric = symbols('joe eric')\n    equation1 = Eq(joe, 7 * eric)\n    equation2 = Eq(joe - eric, 168 * 2)\n\n    solutions = solve((equation1, equation2), (joe, eric))\n\n    joe_cards = solutions[joe]\n    cards_to_give = joe_cards - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:  # Tens digit must be prime and 2, 3, 5, 7 are the only single-digit primes\n        for ones_digit in [2, 3, 5, 7]:  # Ones digit must also be prime (same options)\n            N = tens_digit * 10 + ones_digit  # Construct the two-digit number\n            if isprime(N):  # Check if the number is prime\n                count += 1  # If it's prime, increment the count\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    library_catch = 9\n\n    ans = initial_catch - run_away + library_catch\n\n    return ans\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # minutes\n    num_pictures = total_time / time_per_picture\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for n in range(1, 100):  # Assuming the number of people is less than 100\n        if (6 + n // 2) % n == 19 % n:\n            return n\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        x2 = 10 - x1\n        if x1 != x2:\n            count += 1\n    return count // 2  # Each split is counted twice\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    return factorial(5)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n\n    # Anne gives Charlie 6 pears to have equal amounts\n    # This means Anne initially had 6 more pears than Charlie\n    # Let's denote Anne's initial pears as 'a' and Charlie's as 'a - 6'\n\n    # After giving 6 pears to Charlie, they both have (total_pears - 6 pears) / 2 each\n    equal_pears_each = (total_pears - 6) / 2\n    \n    # Anne's initial pears is what she has after giving away 6 pears, plus the 6 pears she gave away\n    annes_pears_initially = equal_pears_each + 6\n\n    return annes_pears_initially\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    more_times = amy_swimming - joanne_swimming\n    return more_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the digits as symbols\n    a, b, c, d = symbols('a b c d')\n\n    # Equation based on the place values\n    equation = Eq(a*1000 + b*100 + c*10 + d + a*100 + b*10 + c + a*10 + b + a, 1370)\n\n    # Solve the equation for the digits\n    solutions = solve(equation)\n\n    # Extract the solution for abcd\n    abcd = solutions[a]*1000 + solutions[b]*100 + solutions[c]*10 + solutions[d]\n\n    return abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n    equation1 = Eq(isaac, 5 * joseph)\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial_value = 1\n    for i in range(1, 30):\n        factorial_value *= i\n\n    zero_count = 0\n    while factorial_value % 10 == 0:\n        zero_count += 1\n        factorial_value //= 10\n\n    return zero_count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N_base8 = int(\"12345654321\", 8)\n    remainder_7 = N_base8 % 7\n    remainder_9 = N_base8 % 9\n    sum_remainders = remainder_7 + remainder_9\n    return sum_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    linda_speed_ratio = 3\n    ted_speed_ratio = 4\n    linda_distance = 1200\n\n    # Speed ratio is directly related to the distance covered when they meet.\n    total_distance = linda_distance * (ted_speed_ratio + linda_speed_ratio) / linda_speed_ratio\n    return total_distance\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # To find a 5-digit number divisible by 9, the sum of its digits must also be divisible by 9.\n    # For the number 2018A, the sum of the digits is already 2+0+1+8=11, so we need to find A such that\n    # 11 + A is divisible by 9. The smallest such A that makes 2018A a 5-digit number is 7 (11+7=18, which is divisible by 9).\n    A = 7\n\n    # Now we have the full number\n    full_number = int('2018' + str(A))\n\n    # To find the remainder when this number is divided by 8, we can just take the last 3 digits of the number\n    # because 1000 is divisible by 8, which won't affect the remainder\n    last_three_digits = full_number % 1000\n\n    # Now we find the remainder when the last three digits are divided by 8\n    remainder = last_three_digits % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_says = 5\n    elvis_says = 7\n    between_them = 1\n\n    total_squirrels = ryan_says + between_them + elvis_says + 2 # adding 2 for Ryan and Elvis themselves\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from sympy.utilities.iterables import permutations\n\n    def is_derangement(permutation):\n        return all(elem != i for i, elem in enumerate(permutation))\n\n    total_permutations = list(permutations(range(6)))\n    derangements = [perm for perm in total_permutations if is_derangement(perm)]\n    \n    return len(derangements)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return round(interest, 2)\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 0.25 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    total_amount = 45\n    percentage = 30/100\n    ans = total_amount * percentage\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(i for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Jack's current age\n    jack_current = symbols('jack_current')\n\n    # Equation representing the problem\n    equation = Eq((jack_current - 5), (jack_current + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    solutions = solve(equation, jack_current)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    percent_spent_on_bag = 70\n    remainder_fraction = 3/8\n    \n    percent_remainder = 100 - percent_spent_on_bag\n    percent_spent_on_purse = remainder_fraction * percent_remainder\n    \n    return percent_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = \"AEIOU\"\n    num_vowels = 0\n    num_consonants = 0\n    \n    for letter in word:\n        if letter in vowels:\n            num_vowels += 1\n        else:\n            num_consonants += 1\n    \n    # Total arrangements of letters\n    total_arrangements = factorial(len(word))\n    \n    # Total arrangements of vowels\n    vowel_arrangements = factorial(num_vowels)\n    \n    # Arrangements where vowels are together (consider all vowels as one entity)\n    vowels_together = vowel_arrangements * factorial(num_consonants + 1)\n    \n    # Subtract arrangements where vowels are together from total arrangements\n    arrangements_where_vowels_are_not_together = total_arrangements - vowels_together\n    \n    return arrangements_where_vowels_are_not_together\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let the initial number of pupils in School P be 2x and in School Q be 3x\n    # Adding 240 pupils to both schools\n    # New ratio is 3:4, which means (2x + 240) / (3x + 240) = 3/4\n    # Cross-multiplying to solve for x\n    # 4*(2x + 240) = 3*(3x + 240)\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (2 * x + 240), 3 * (3 * x + 240))\n\n    # Solving for x\n    solution_x = solve(equation, x)\n\n    # Initial number of pupils in School P (2x)\n    num_pupils_p = 2 * solution_x[0]\n\n    return num_pupils_p\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_student_count = 5 + 1\n    candies_per_student = total_candies // new_student_count\n    return candies_per_student\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.3*x + 0.7*(20-x), 20*0.54)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    wrappers = 11\n    sweets = 11\n\n    while wrappers >= 3:\n        new_sweets, wrappers = divmod(wrappers, 3)\n        sweets += new_sweets\n        wrappers += new_sweets\n\n    return sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    num = 10  # Smallest two-digit number\n    while True:\n        if (num % 5 == 4) and (num % 7 == 4):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Calculate cost and selling price per bag\n    cost_per_bag = 10 / (5 * 1000 / 250)  # Total cost divided by number of bags\n    selling_price_per_bag = 0.65  # Selling price for each bag in pounds\n    \n    # Calculate total cost and total selling price\n    total_cost = 10  # She paid £10 for the sweets\n    total_selling_price = (5 * 1000 / 250) * selling_price_per_bag  # Total income from selling all bags\n    \n    # Calculate profit and percentage profit\n    profit = total_selling_price - total_cost\n    percentage_profit = (profit / total_cost) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # The sum of angles in any triangle is always 180 degrees.\n    # Since BP bisects angle ABC and CP bisects angle ACB,\n    # each of these angles is split into two equal angles.\n\n    # We are given that angle BAC is 50 degrees.\n    # Thus, the sum of angles ABC and ACB is 180 - 50 = 130 degrees.\n    sum_ABC_and_ACB = 180 - 50\n\n    # Since BP bisects angle ABC and CP bisects angle ACB,\n    # each of these angles would be half of angles ABC and ACB respectively.\n    # So, the measure of angle ABP = angle PBC, and angle ACP = angle PCB.\n\n    # Let's say angle ABP = angle PBC = x, and angle ACP = angle PCB = y\n    # According to angle bisector theorem:\n    # angle ABC = 2x, and angle ACB = 2y\n\n    # As we have ABC + ACB = 2x + 2y = 130 degrees (the sum we calculated earlier)\n    # x + y = 130 / 2 = 65 degrees.\n\n    half_sum_ABC_and_ACB = sum_ABC_and_ACB / 2\n\n    # In triangle BPC, to find angle BPC, we subtract the sum of angles BPB and BPC from 180.\n    # angle BPC = 180 - (x + y)\n    # angle BPC = 180 - 65\n\n    angle_BPC = 180 - half_sum_ABC_and_ACB\n    \n    return angle_BPC\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # The number of ways from Ayton to Beeton to Ceeton to Deeton\n    ab_cd = 4 * 5 * 6\n    \n    # The number of direct ways from Ayton to Deeton\n    ad_direct = 3\n    \n    # Total number of ways from Ayton to Deeton\n    ans = ab_cd + ad_direct\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    two_tail, three_tail, six_tail, eight_tail = symbols('two_tail three_tail six_tail eight_tail')\n    \n    # the two-tailed bird (one head and two tails)\n    # the three-tailed bird (one head and 3 tails)\n    # the six-tailed bird (one head and six tails)\n    # the eight-tailed bird (two heads and eight tails)\n    \n    # The number of two-talied birds is 5 more than twice as many as the number of eight-tailed birds.\n    eq1 = Eq(two_tail, 2*eight_tail + 5)\n    \n    # The number of three-tailed birds is 2 more than half the number of six-talied birds.\n    eq2 = Eq(three_tail, six_tail/2 + 2)\n\n    # the total number of their tails is 2 less than four times as many as the total number of their heads\n    # total heads = two_tail + three_tail + six_tail + 2*eight_tail\n    # total tails = 2*two_tail + 3*three_tail + 6*six_tail + 8*eight_tail\n    eq3 = Eq(2*two_tail + 3*three_tail + 6*six_tail + 8*eight_tail, \n             4*(two_tail + three_tail + six_tail + 2*eight_tail) - 2)\n\n    # the difference between the total number of their heads and their tails is 241\n    eq4 = Eq((two_tail + three_tail + six_tail + 2*eight_tail) -\n             (2*two_tail + 3*three_tail + 6*six_tail + 8*eight_tail), -241)\n\n    # solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tail, three_tail, six_tail, eight_tail))\n\n    return solutions[three_tail]\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    from fractions import Fraction\n\n    fraction1 = Fraction(15, 20)\n    fraction2 = Fraction(3)\n\n    return fraction2.denominator * fraction1\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    n10 = 23\n    n15 = 38\n\n    common_difference = (n15 - n10) // (15 - 10)\n\n    n12 = n10 + common_difference * (12 - 10)\n    \n    return n12\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of money Joe had originally\n    joe_initial = symbols('joe_initial')\n\n    # Equation based on the given information\n    # Initial amount - amount spent on ice-cream for both = amount left\n    equation = Eq((3.75 - 2.50) + (joe_initial - 2.50), 5)\n\n    # Solve the equation for Joe's initial amount of money\n    solution = solve(equation, joe_initial)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    # total trees planted in the first 3 days\n    first_days_trees = 135 * 3\n    # total trees planted in the last 5 days\n    last_days_trees = 151 * 5\n    # total trees planted\n    total_trees = first_days_trees + last_days_trees\n    # number of days\n    total_days = 8 \n    # average number of trees planted per day\n    average_trees = total_trees / total_days\n    \n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Choose 2 out of 4 options\n    two_option_combinations = comb(4, 2)\n\n    # Possible choices for each combination of 2 options\n    choices = (comb(salads, 1) * comb(soups, 1)) + \\\n              (comb(salads, 1) * comb(vegetables, 1)) + \\\n              (comb(salads, 1) * comb(sandwiches, 1)) + \\\n              (comb(soups, 1) * comb(vegetables, 1)) + \\\n              (comb(soups, 1) * comb(sandwiches, 1)) + \\\n              (comb(vegetables, 1) * comb(sandwiches, 1))\n\n    # Multiply by the combinations of choosing 2 options\n    ans = two_option_combinations * choices\n    \n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 999 + 1):\n        if i % 2 == 0:\n            digits_sum = sum(int(digit) for digit in str(i))\n            if digits_sum == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((202 + x), 6 * (22 + x))\n\n    magic_number = solve(equation, x)\n\n    return magic_number[0]\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        red = number % 2 == 0\n        blue = number % 3 == 0\n        green = number % 4 == 0\n        \n        # A number is underlined exactly twice if and only if it is a multiple of\n        # two of the colors and not a multiple of the third one. Since every multiple\n        # of four is also a multiple of two, we only need to check for red and blue.\n        if red + blue + green == 2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_difference = 32\n    students = total_difference\n    layer = 1\n    while True:\n        boys = (layer * 2 + 1)**2 - layer**2\n        girls = layer**2 - (layer - 1)**2\n        diff = boys - girls\n        if diff == total_difference:\n            students += (layer * 2 + 1)**2 + layer**2\n            break\n        layer += 1\n    return students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    # start checking from the lowest possible odd prime (3),\n    # because even numbers cannot be prime (except for 2)\n    n = 3\n    while True:\n        # Check if all numbers n, n+2, n+4, n+106, n+308 are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            return n\n        # Skip even numbers to avoid unnecessary checks\n        n += 2\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mass of strawberries as s and the mass of mangoes as m.\n    s, m = symbols('s m')\n\n    # According to the problem we have two equations:\n    # 1. m = s + 448 (since there was 448g more mangoes than strawberries)\n    # 2. s = 2 * (m - 900) (after 900g of mangoes were given away, the mass of strawberries was twice as much as the mass of mangoes)\n    \n    # Now we can solve these two equations\n    equations = (\n        Eq(m, s + 448),\n        Eq(s, 2 * (m - 900))\n    )\n\n    # Solving the equations for s (the mass of strawberries at first)\n    solutions = solve(equations, (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of items\n    x = symbols('x')\n\n    # Number of apples is 2/3 of the total number\n    apples = 2/3 * x\n\n    # Number of bananas is 1/9 of the total number\n    bananas = 1/9 * x\n\n    # The rest are lemons\n    lemons = x - apples - bananas\n\n    # The number of apples is 12 more than the number of lemons\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation\n    items = solve(equation, x)\n\n    # Calculate the number of lemons\n    number_of_lemons = items[0] - (2/3 * items[0] + 1/9 * items[0])\n\n    return number_of_lemons\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    # Initial ratio when Max buys the chocolates\n    equation1 = Eq(2 * (anthony_money - 12), 5 * max_money)\n\n    # New ratio when Anthony buys the chocolates\n    equation2 = Eq(max_money, ((8/13) * (anthony_money - 12)))\n\n    # Solving the equations for Max's original money\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of red and blue stickers as 'r' and 'b'.\n    # Since the initial number of red and blue stickers is equal, we have r = b.\n\n    # After giving away 2/3 of her red stickers, Liz is left with 1/3 red stickers.\n    # Liz is left with 1/4 of her total stickers, so 1/3 * r + remaining blue stickers = 1/4 * 2r\n    # We need to find the remaining blue stickers as a fraction of the initial blue stickers.\n\n    # Let 'x' be the fraction of blue stickers that remain.\n    # Then (1 - x) will be the fraction of blue stickers that Liz gave away.\n    # Our equation will then be 1/3 * r + x * b = 1/4 * (r + b)\n    # Simplify the equation: 1/3 * r + x * r = 1/4 * (2 * r)\n    # Solve for x: 1/3 * r + x * r = r / 2\n    # The remaining fraction of blue stickers is x, so Liz gave away (1 - x) of her blue stickers.\n\n    r = symbols('r')\n    x = symbols('x')\n\n    equation = Eq(1/3 * r + x * r, r / 2)\n\n    solution = solve(equation, x)\n\n    # Liz gave away the following fraction of her blue stickers:\n    fraction_given_away = 1 - solution[0]\n\n    return fraction_given_away\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "def solution():\n    from math import factorial as fact\n\n    def combinations(n, k):\n        return fact(n) // (fact(k) * fact(n - k))\n\n    # We will use the stars and bars combinatorial method\n    # First, we give 1 pen to each kid so there will be 20 - 6 = 14 pens left\n    # Now we need to divide these 14 pens among 6 kids\n    # Using stars and bars, this is the same as choosing 5 (which is 6 - 1) dividers\n    # from 14 + 5 positions. \n    # So the answer is C(14 + 6 - 1, 6 - 1)\n\n    ans = combinations(14 + 6 - 1, 6 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Since we're interested in the unit digit of 444^2022, we can focus on the unit digit of 4^2022 instead.\n    # The powers of 4 repeat every 2 in terms of their unit digits:\n    # 4^1 = 4, 4^2 = 16, 4^3 = 64, 4^4 = 256, ... (notice the unit digits are 4, 6, 4, 6,...)\n\n    # Since 2022 is even, it will have the same unit digit as 4^2\n    unit_digit = (4 ** 2) % 10  # modulo 10 gives us the unit digit of 4 raised to any power\n\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # No pile can have 0 marbles since each pile must have a different number of marbles\n    # Let's start with the minimum number of marbles in the first three piles and find the smallest\n    # number for the fourth pile\n    for biggest_pile in range(1, 17):\n        for pile_2 in range(1, biggest_pile):\n            for pile_3 in range(1, pile_2):\n                for pile_1 in range(1, pile_3):\n                    total_marbles = pile_1 + pile_2 + pile_3 + biggest_pile\n                    if total_marbles == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimetres\n    lengths_mm = [\n        10,          # 10 millimetres\n        100 * 10,    # 100 centimetres\n        10 * 1000,   # 10 metres\n        2 * 1000000, # 2 kilometres\n        2800 * 10,   # 2800 centimetres\n        2500 * 1000, # 2500 metres\n        100,         # 100 millimetres\n        100 * 1000   # 100 metres\n    ]\n\n    # Find the smallest length\n    smallest_length = min(lengths_mm)\n    # Return the index of the smallest length representation\n    return lengths_mm.index(smallest_length) + 1 # Add 1 because index starts at 0\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the number of days it took to finish the book\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    # Calculate the total number of pages\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    difference = smallest_6_digit - largest_5_digit\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Calculate the number of possible three-digit numbers\n    # that have an odd unit digit (1, 3, or 5)\n    odd_digits = [1, 3, 5]\n    \n    # The first digit cannot be zero and must be distinct from the last digit\n    first_digit_choices = 5  # 1, 2, 3, 4, or 6, since zero is not allowed\n    \n    # The second digit must be distinct from the first and last digits\n    second_digit_choices = 4  # One digit is already used for the first position\n    \n    # The last digit must be odd, there are 3 odd digits\n    last_digit_choices = len(odd_digits)\n    \n    # Use the multiplication principle to get the total number of combinations\n    total_numbers = first_digit_choices * second_digit_choices * last_digit_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C - A, 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    # If he gives each of his pupils 4 bookmarks, he will have 8 bookmarks left.\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n\n    # If he gives each of his pupils 6 bookmarks instead, he will be short of 10 bookmarks.\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let the number of cows be 'c' and ducks be 'd'.\n    # Each cow has 4 legs and each duck has 2 legs.\n    # From the problem statement, we have two equations:\n    # c + d = 25 (total number of animals)\n    # 4c + 2d = 68 (total number of legs)\n\n    # We can solve this system of equations to find the number of ducks.\n    # Subtracting the first equation from the second one after multiplying it by 2 gives:\n    # 4c + 2d - 2c - 2d = 68 - 50\n    # 2c = 18\n    c = 18 / 2\n\n    # Now we can find d by subtracting c from the total number of animals.\n    d = 25 - c\n\n    return int(d)\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the average height of the girls, and b represent the average height of the boys\n    g, b = symbols('g b')\n\n    # Total number of children\n    total_children = 11 + 5\n\n    # The average height of the group of children (given)\n    avg_height_group = 122.5\n\n    # The average height of the girls is 3.2 cm more than the average height of the boys (given)\n    equation1 = Eq(g, b + 3.2)\n\n    # The total height is the sum of the girls' height and the boys' height, which should equal the average height times the number of children\n    equation2 = Eq((11 * g + 5 * b), total_children * avg_height_group)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # We are asked to find the average height of the girls\n    return solutions[g]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Using inductive reasoning to get the maximum number of regions r(n) \n    # with n lines (or n triangles in this case):\n    # r(n) = r(n - 1) + n\n    \n    # Starting with the base case, 1 triangle (3 lines) divides the plane into 4 regions.\n    r = 4\n    \n    # Since each of the triangles can be considered as 3 lines,\n    # and we already considered the first triangle, we continue from the second triangle (3 lines).\n    \n    # We have 5 triangles, so we calculate the remaining 4 triangles (12 additional lines).\n    for i in range(2, 6):\n        # Each triangle can be thought of as adding 3 lines, which will add \n        # a maximum of i * 3 new regions to the previous triangle count.\n        r += i * 3\n    \n    return r\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')  # Let the number of girls be a variable we're solving for\n    boys = 70 - girls  # The number of boys, dependent on the number of girls\n\n    # Equation representing the total average score\n    total_score_avg_eq = Eq((girls * 70 + boys * 63) / 70, 66)\n\n    # Solve for the number of girls\n    solutions = solve(total_score_avg_eq, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    total_numbers = 9\n    sum_all = 1503\n    avg = sum_all // total_numbers  # Since the numbers are consecutive and odd, the middle number will be the average\n    smallest_value = avg - 4 * 2  # Subtract the difference of each consecutive number times 4 (half the number of values minus 1)\n    return smallest_value\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    n_32 = 32\n    n_108 = 108\n\n    difference = (term_108 - term_32) / (n_108 - n_32)\n    first_term = term_32 - difference * (n_32 - 1)\n\n    return int(first_term)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 choices for the first pass (B, C, D)\n    # For the second pass, A can't receive it, and the passer can't pass back to themselves\n    # So there are 2 choices for the second pass\n    # For the third pass, only A can receive the ball, so there is 1 choice\n    num_ways = 3 * 2 * 1\n    return num_ways\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let J be the number of storybooks Jason has initially.\n    # Let A be the number of storybooks Anthea has initially.\n    # Given that J = 30, and if Jason gives 4 books to Anthea, they will have the same number.\n    # We have J - 4 = A + 4 after Jason gives 4 books to Anthea.\n    # Since they then have the same number of books, we can denote this common number as N.\n    # Then we have J - 4 = N and A + 4 = N.\n    # Combining the equalities, we have J - 4 = A + 4.\n\n    J = 30\n    # Since J - 4 = A + 4, rearranging the equation we get J - A = 4 + 4\n    difference = 4 + 4  # The difference of the number of storybooks between Jason and Anthea at first\n\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solve_puzzle():\n    # Generate all possible permutations of the digits 0-9.\n    for perm in permutations(range(10), 2):\n        # Assign Q and P from the permutation.\n        Q, P = perm\n        # Ensure that Q is not 0 as it's a two-digit number.\n        if Q != 0:\n            # Convert the Q and P to a two-digit number.\n            number = Q * 10 + P\n            # If the two-digit number satisfies the conditions, return it.\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:  # Divisible by 2, 3, and 5.\n                return number\n\ndef solution():\n    return solve_puzzle()\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    kate_left = 42\n\n    # Given that Kate ate 1/4 of the candies, this means that the 42 candies are 3/4 of what Jane gave her\n    # So we can calculate the total candies Jane gave to Kate\n    jane_to_kate = kate_left * 4 / 3\n\n    # Knowing that the 1/3 of the candies plus 4 candies were eaten by Jane, this means that jane_to_kate candies are 2/3 of what Donna gave away\n    # Now we can calculate the total candies Donna gave to Jane\n    donna_to_jane = (jane_to_kate + 4) * 3 / 2\n\n    # Knowing that Donna kept half of the candies plus 3\n    # This means that donna_to_jane candies are equal to the other half Donna had orginally\n    # Now we can calculate the total candies that Donna had at first\n    donna_original = (donna_to_jane + 3) * 2\n\n    return int(donna_original)\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm\n\n    face_mask = 4\n    mug = 10\n    ans = lcm(face_mask, mug)\n\n    return ans\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    numbers = [27, 28, 29, 30, 31, 32, 33]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    sum = 0.98 + 1.98 + 2.98 + 3.98\n    return sum\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_mps = 2  # William's speed in meters per second\n    time_min = 12  # Time in minutes\n    time_sec = time_min * 60  # Convert time to seconds\n    \n    distance = speed_mps * time_sec  # Calculate distance\n    \n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor = 4\n    term1 = (2020 * 68) / common_factor\n    term2 = (505 * 128) / common_factor\n    ans = (term1 + term2) * common_factor\n    return int(ans)\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    # Calculate the amount of sugar in each solution\n    sugar_xavier = 100 * 0.25\n    sugar_yelena = 500 * 0.55\n    sugar_carol = 400 * 0.35\n    \n    # Calculate the total weight of the mixed solution\n    total_weight = 100 + 500 + 400\n    \n    # Calculate the total amount of sugar in the mixed solution\n    total_sugar = sugar_xavier + sugar_yelena + sugar_carol\n    \n    # Calculate the concentration of sugar in the mixed solution\n    concentration = (total_sugar / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time B takes to complete the job alone\n    x = symbols('x')\n    \n    # A takes 12 days less than the time B takes\n    time_A = x - 12\n    \n    # A's efficiency is twice B's efficiency, so A can do 2 jobs in the time it takes B to do 1\n    rate_A = 2 / time_A\n    rate_B = 1 / x\n    \n    # The combined rate of A and B working together\n    combined_rate = rate_A + rate_B\n    \n    # The time it takes for A and B to complete the job together is 1 job divided by the combined rate\n    time_together = 1 / combined_rate\n    \n    # Solve for x in the equation\n    time_B = solve(Eq(time_A * 2, x), x)\n    \n    # Calculate the time it would take for them to complete the job together\n    ans = time_together.subs(x, time_B[0])\n    \n    return ans\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change_received = 4.83\n    newspaper_cost = 2.20\n\n    tissues_cost = total_paid - change_received - newspaper_cost\n\n    return tissues_cost\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours to keep units consistent\n    time_late = 12 / 60\n    time_early = 4 / 60\n\n    # Let the distance be d, and normal time to be t.\n    # When Mike travels at 3 km/h, the time taken is t + 1/5 (12 minutes late)\n    # When Mike travels at 5 km/h, the time taken is t - 1/15 (4 minutes early)\n\n    # Using the formula distance = speed * time:\n    # 3 * (t + 1/5) = distance\n    # 5 * (t - 1/15) = distance\n\n    # Since both expressions equal the distance, we can set them equal to each other:\n    # 3 * (t + 1/5) = 5 * (t - 1/15)\n\n    # Solving for t\n    t = (3/5 + 1/3) / (5/3 - 3/5)\n\n    # Using either equation for distance\n    d = 3 * (t + 1/5)\n    \n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_combinations = []\n\n    # Getting all permutations for each possible length (1 to len(digits))\n    for i in range(1, len(digits)+1):\n        all_combinations += [''.join(p) for p in permutations(digits, i)]\n\n    return len(all_combinations)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # Setup the equations based on the problem statement\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 4 + 3 * (alice - 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Let the initial number of boys and girls be 3x and 2x respectively\n    from sympy import symbols, Eq, solve\n\n    # Create variable x\n    x = symbols('x')\n\n    # Original proportions\n    original_boys = 3 * x\n    original_girls = 2 * x\n\n    # After 12 boys and girls joined\n    new_boys = original_boys + 12\n    new_girls = original_girls + 12\n\n    # New ratio\n    new_ratio = Eq((new_boys / new_girls), (19 / 14))\n\n    # Solve for x\n    x_value = solve(new_ratio, x)[0]\n\n    # Calculate the total number of children in the afternoon\n    total_children_afternoon = new_boys.subs(x, x_value) + new_girls.subs(x, x_value)\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = girls = symbols('boys girls')\n    \n    # Let the initial number of boys (and girls) be b\n    # After 3/5 of the boys left, (2/5)*b boys remained\n    # After 42 girls left, g - 42 girls remained\n    # We have the equation (2/5)*b - (g - 42) = 12\n    eq = Eq((2/5) * boys - (girls - 42), 12)\n    \n    # But we know b = g, because initially there were an equal number of boys and girls\n    eq_combined = Eq((2/5) * girls - (girls - 42), 12)\n    \n    # Now solve for girls\n    students_initially = solve(eq_combined, girls)[0]\n\n    # Since b = g, the total number of students at first is twice the number of girls\n    return 2*students_initially\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temperature = -8\n    today_temperature = 13\n    temperature_increase = today_temperature - last_night_temperature\n    return temperature_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # Part 1: Four different colored socks\n    ways_with_4_diff_socks = factorial(4)  # 4!\n\n    # Part 2: Two pairs of different colored socks\n    ways_with_2_pairs_socks = factorial(4) // factorial(2) // factorial(2)  # 4! / (2! * 2!)\n\n    return ways_with_4_diff_socks, ways_with_2_pairs_socks\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_per_room = total_pupils // 2\n    return pupils_per_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # Since the period T on Earth is 1s, we have T = 2π√(l/g) where l is the length of the pendulum\n    # and g is the acceleration due to gravity on Earth.\n    # We set T = 1s and g (on Earth) = 9.81 m/s^2.\n    T_earth = 1\n    g_earth = 9.81\n\n    # Calculate the length l of the pendulum using the period on Earth\n    l = (T_earth**2 * g_earth) / (4 * 3.141592653589793**2)\n\n    # On the Moon, acceleration due to gravity g_moon is one-sixth of g_earth\n    g_moon = g_earth / 6\n\n    # Calculate the period on the Moon using the formula T = 2π√(l/g_moon)\n    T_moon = 2 * 3.141592653589793 * sqrt(l / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    \n    # The square root of the total number of tiles gives the dimension of the square wall\n    # Since it's a perfect square (400 = 20^2), we do not have to check for non-integer roots\n    wall_side = int(total_tiles ** 0.5)\n\n    red_tiles = 0\n    green_tiles = 0\n\n    # Calculate the number of tiles in each layer\n    for layer in range(wall_side, 0, -2):\n        if layer == 1:\n            # Only the center tile remains, which will be red since we're starting from the outside\n            red_tiles += 1\n        else:\n            # Each layer, starting from the outside, consists of (layer * 4 - 4) tiles\n            # (forming a square ring), where the first (red) and second (green) layers alternate\n            tiles_in_layer = layer * 4 - 4\n            if wall_side % 2 == layer % 2:\n                red_tiles += tiles_in_layer\n            else:\n                green_tiles += tiles_in_layer\n\n    # Calculate which colour has more tiles and the difference\n    dominant_colour = 'red' if red_tiles > green_tiles else 'green'\n    colour_difference = abs(red_tiles - green_tiles)\n\n    return (dominant_colour, colour_difference)\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    welded_length = 3\n\n    total_length = length1 + length2 - welded_length\n\n    return total_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 24//6\n        total_correct = william_correct + justin_correct\n        total_points = william_correct * 6 - (10 - william_correct) * 2 + \\\n                       justin_correct * 6 - (10 - justin_correct) * 2\n        if total_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime as dt\n\n    start_date = dt.strptime('1/3/2023', '%d/%m/%Y')\n    end_date = dt.strptime('15/4/2023', '%d/%m/%Y')\n\n    difference = (end_date - start_date).days + 1  # including the first day\n\n    return difference\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared * x_squared\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Given that this is a numerical puzzle in vertical form, the value of A could be\n    # seen as a digit in a column that is part of a larger arithmetic operation, such\n    # as addition, subtraction, multiplication, or division. Normally, such a puzzle\n    # would provide more context or numbers to work with, but assuming a typical\n    # vertical form puzzle where numbers are stacked and added, we are looking for\n    # a digit that meets certain criteria, maybe causing carries, etc.\n\n    # Without further context, it is not possible to provide a unique solution\n    # because the value of A is completely undefined. A could be any digit from 0 to 9\n    # in this case without additional information. Here we can return `None` or raise\n    # an exception to indicate that there is not enough information.\n    \n    raise ValueError(\"Insufficient information to determine the value of A\")\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate is 1/15 job per day\n    # B's work rate is 1/10 job per day\n\n    # Combined work rate is 1/15 + 1/10 = (2 + 3) / 30 = 5/30 = 1/6 job per day\n    combined_rate = (1/15) + (1/10)\n    \n    # They work together for 3 days\n    work_done = 3 * combined_rate\n    \n    # Remaining job to do is 1 - work_done\n    remaining_job = 1 - work_done\n    \n    # B's rate is 1/10, so the time B needs to finish the remaining job is remaining_job / B's rate\n    b_time_remaining = remaining_job / (1/10)\n    \n    return b_time_remaining\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    from math import sqrt\n    \n    total_people = 100\n    side_length = int(sqrt(total_people))\n    \n    if side_length ** 2 == total_people:\n        perimeter = 4 * side_length - 4 # because we are counting corners twice\n    else:\n        additional_people = total_people - side_length ** 2\n        additional_sides = additional_people // side_length\n        remaining_people = additional_people % side_length\n        perimeter = (side_length * 2 - 2) + (additional_sides * 2) + remaining_people\n    \n    return perimeter\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n\n    # First negative term (n) is when the sequence goes below zero:\n    # a + (n-1)*d < 0\n    # 50 + (n-1)(-4) < 0\n    # (n-1) > 50/4\n    # n > 12.5\n    # Since n must be an integer, the first negative term is when n = 13\n    n = 13\n\n    return n\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The winning strategy for Tom is to make the number of cards in both piles identical\n    # after his turn because this is a \"Nim game\" type of problem. Having the same number\n    # of cards in both piles leaves an unavoidable winning position for the next player.\n    pile_a = 88\n    pile_b = 52\n\n    # To find the winning strategy, subtract the number of cards in pile B from pile A\n    # to find the number Tom should leave in pile A after his first turn to ensure\n    # the number of cards remaining in both piles is the same.\n    move = pile_a - pile_b\n\n    return move\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let's denote the original amount Hugo had as x.\n\n    # According to the problem, after giving (3/7) of his cash to his sister, he is left with (4/7) of his cash.\n    # Then, he gives (1/8) of the remaining cash to his mum, so he is left with (7/8) of the remaining cash, which totals $280.\n    \n    # The equation representing this situation is (4/7) * (7/8) * x = 280.\n    \n    # Solve for x to find the original amount of cash Hugo had.\n    x = 280 / ((4/7) * (7/8))\n\n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Since at least one student gets at least 3 apples, \n    # we can first give 3 apples to one student.\n    apples_to_distribute = 80 - 3\n    \n    # Use the Pigeonhole Principle to determine the size of the class.\n    # If each student gets at least 1 apple, then the size of the class\n    # is the number of apples left to distribute.\n    class_size = apples_to_distribute + 1  # +1 for the student who received 3 apples\n\n    return class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    diff = max(temperatures) - min(temperatures)\n    return diff\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    red, white, black, total = symbols('red white black total')\n    equation1 = Eq(red/white, 1/2)\n    equation2 = Eq(white/black, 3/4)\n    equation3 = Eq(red + white + black, 34)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one cheesecake (c) and one logcake (l)\n    c, l = symbols('c l')\n\n    # The provided equations:\n    # 6c + 7l = 1426\n    # 4c = 3l\n    equation1 = Eq(6 * c + 7 * l, 1426)\n    equation2 = Eq(4 * c, 3 * l)\n\n    # Solve the equations for c and l\n    solutions = solve((equation1, equation2), (c, l))\n\n    # Calculate the cost for 10 cheesecakes and 10 logcakes\n    total_cost = 10 * solutions[c] + 10 * solutions[l]\n\n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since the factorial of any number greater than or equal to 5\n    # will contain a factor of 10 (5 * 2), the last digit of such a factorial\n    # will always be 0.\n    ans = 0  # the last digit of 2014! is 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4/50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_side_length = 5 # cm\n    square_hole_size = 1 * 1 # cm^2\n    base_area = base_side_length**2 # cm^2\n    base_area_with_hole = base_area - square_hole_size # cm^2\n\n    volume_of_prism = 480 # cm^3\n    height = volume_of_prism / base_area_with_hole # cm\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2*i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # Price of one pencil\n    price_pencil = 5\n    # Price of one pen\n    price_pen = 15\n\n    # Number of pencils for one pen\n    pencils_for_pen = price_pen / price_pencil\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    sum_odd = sum(range(1, 1002, 2))\n    sum_even = sum(range(2, 1001, 2))\n    ans = sum_odd - sum_even\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(1, 14):\n            z = 13 - x - y\n            if z > 0 and z != x and z != y and x != y:\n                count += 1\n    return count // 6  # Divide by 6 for permutations of three numbers\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    sisters = 2\n    marbles_left_with_henry = 16\n\n    total_marbles = (marbles_given_to_brother + (marbles_given_to_each_sister * sisters) + marbles_left_with_henry)\n\n    return total_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # 2-digit palindromes\n    for i in range(1, 10):\n        count += 1  # All numbers 11, 22, ..., 99 are palindromic\n    \n    # 3-digit palindromes\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # All numbers 101, 111, ..., 191, 202, ..., 999 are palindromic\n    \n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum([(2 * i + 1) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n\n    # Finding total distance travelled by both before meeting\n    total_distance = (amy_speed + christen_speed) * meeting_time\n\n    # Time taken for Christen to reach Amy's starting point\n    time_for_christen = total_distance / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assign symbols to yellow and green beads before buying more\n    yellow, green = symbols('yellow green')\n    \n    # Initial ratio (yellow:green = 3:2)\n    equation1 = Eq(yellow/green, 3/2)\n    \n    # New ratio after buying more (green+20)/(yellow+5) = 2/3\n    equation2 = Eq((green + 20)/(yellow + 5), 3/2)\n    \n    # Solve the system of equations\n    solution_dict = solve((equation1, equation2), (yellow, green))\n    \n    # Sum the initial quantities of yellow and green beads\n    total_beads_initial = solution_dict[yellow] + solution_dict[green]\n    \n    return total_beads_initial\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct\n        if 4 * correct - wrong == 110:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    \n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    \n    # Let's assume the number of lemon cakes is 4 units and chocolate cakes is 5 units\n    # Then, 4x + 5x = remaining_cakes\n    # Solve for x\n    x = remaining_cakes / (4 + 5)\n    lemon_cakes = 4 * x\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    # Loop through hundreds, tens, and units digits\n    for hundreds in range(1, 10):  # Hundreds digit can be 1-9\n        for tens in range(0, 10):  # Tens digit can be 0-9\n            for units in range(0, 10):  # Units digit can be 0-9\n                # Create a set to check the number of unique digits\n                unique_digits = set([hundreds, tens, units])\n                # Check if there are exactly two different digits\n                if len(unique_digits) == 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily has and y be the number of books Judy has\n    x, y = symbols('x y')\n    # Let n be the number of books Lily sends to Judy\n    n = symbols('n')\n\n    # After sending n books, Lily and Judy will have the same amount\n    equation1 = Eq(x - n, y + n)\n\n    # We want to find the difference in the number of books (x - y)\n    # Since the problem does not provide specific numbers, we set x - y as the equation to solve for n\n    equation2 = Eq(x - y, 2 * n)\n\n    # Solve the system of equations to find the expression for n in terms of x and y\n    solutions = solve((equation1, equation2), (x, y, n))\n\n    # Since the problem asks for the difference between the number of books, that is x - y\n    ans = solutions[x] - solutions[y]\n\n    # We return the solution as the final answer\n    return ans\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 2 choices for Lily to pass (Cici or April)\n    # Then, for each of those choices, the receiver has 1 choice (the third person)\n    # Therefore, total passing ways = 2 choices * 1 choice\n    count = 2 * 1\n    return count\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    first_four_average = 89\n    num_assignments = 4\n    fifth_score = 94\n\n    total_score_first_four = first_four_average * num_assignments\n\n    new_average = (total_score_first_four + fifth_score) / (num_assignments + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * total_wibbles\n    remaining_arms = total_arms - total_wibble_arms\n    wobble_arms = 5\n\n    num_wobbles = remaining_arms // wobble_arms\n\n    return num_wobbles\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            tens = 2 * hundreds\n            if hundreds == ones + 1 and (hundreds + tens + ones) == 15:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction_of_time = 1/4 * 1/6 * 1/8 * minutes\n    seconds = fraction_of_time * 60  # convert minutes to seconds\n    return seconds\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def hash_op(a, b):\n        return a + b - (a * b / 910)\n\n    result = 1\n    for i in range(2, 2017):\n        result = hash_op(result, i)\n\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    for a in range(2, 179):\n        if is_prime(a):\n            b = (179 - 7 * a) // 9\n            if b > 0 and is_prime(b) and 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    smaller_number = (80 - 40) / 2\n    return smaller_number\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick = boys * girls\n    return ways_to_pick\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    for kid1 in range(1, 5):\n        for kid2 in range(1, 6 - kid1):\n            kid3 = 6 - kid1 - kid2\n            if kid3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    correct_marks = 5\n    incorrect_marks = -2\n    total_marks = 23\n    total_questions = 6\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if (correct * correct_marks + incorrect * incorrect_marks) == total_marks:\n            return correct\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Convert 24 minutes to hours since speeds are in km/h\n    minutes_to_catch_up = 24\n    hours_to_catch_up = minutes_to_catch_up / 60\n    \n    # Define speeds\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10     # km/h\n    \n    # Calculate the distance Maverick needs to travel to catch up\n    distance_to_catch_up = maverick_speed * hours_to_catch_up\n    \n    # Calculate the distance Kelvin travels in the time Maverick is catching up\n    kelvin_distance = kelvin_speed * hours_to_catch_up\n    \n    # Calculate the lead distance Kelvin still has when Maverick catches up\n    kelvin_lead = 10 - kelvin_distance  # Kelvin was 10 km ahead to start\n    \n    # Determine who is correct\n    if kelvin_lead > 0:\n        # Maverick did not catch up, Kelvin is correct\n        # Calculate the time it actually takes for Maverick to catch up\n        actual_catch_up_time = 10 / (maverick_speed - kelvin_speed)\n        return actual_catch_up_time * 60  # Convert hours to minutes\n    else:\n        # Maverick is correct, he did catch up in 24 minutes\n        return minutes_to_catch_up\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total length of the road with plum trees\n    total_length = (41 - 1) * 4  # distance = (number of intervals) * distance between trees\n\n    # Number of pine trees on the opposite side of the road\n    pine_trees = (total_length // 5) + 1  # total intervals of pine trees\n\n    return pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for their current ages\n    younger, older = symbols('younger older', positive=True, integer=True)\n    \n    # Create equations based on the given information\n    equation1 = Eq(older - younger, younger - 4)\n    equation2 = Eq(older - younger, 61 - younger)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger, older))\n    \n    # Return the younger person's current age\n    return solutions[younger]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    original_hours = 9\n    target_hours = 3\n    original_people = 10\n    \n    # Calculate work done by one person in the original timeframe\n    work_per_person_original = original_hours / original_people\n    # Calculate total work needed for one bridge\n    total_work = work_per_person_original * original_people\n    # Calculate people needed for the target timeframe\n    people_needed = total_work / target_hours\n    \n    return int(people_needed)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let the initial amount of money Bud had be x.\n    # Then she spent (1/3)x on a book.\n    # The remaining money is (2/3)x.\n    # Then she spent (2/5) of the remaining money on a bag: (2/5)*(2/3)x = (4/15)x.\n    # We know that the bag cost £120, so (4/15)x = 120.\n    # Therefore, x = 120 * (15/4).\n    \n    x = 120 * (15/4)\n    return x\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy = 30\n    nancy = candy - 4\n    return nancy\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    # Let the total number of watermelons initially be x.\n    # After selling 1/3 on the first day, 2/3 of x are left.\n    # Then, selling 60% of the remaining on the second day, 40% of (2/3)x are left.\n    # Finally, 48 watermelons are left after both days.\n\n    # Let's set up the equation as per the above explanation:\n    # (2/3)x * 40% = 48\n    # Convert 40% to a decimal for calculation\n    # (2/3)x * 0.4 = 48\n    # Solve for x:\n    \n    x = 48 / (2/3 * 0.4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n\n    sum_squares = (n * (n + 1) * (2 * n + 1)) / 6 - ((first_term - 1) * first_term * (2 * first_term - 1)) / 6\n\n    return int(sum_squares)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # 5 desks in front of Jessica\n    desks_in_front_of_Jessica = 5\n    \n    # Jessica's own desk\n    jessica_desk = 1 \n    \n    # Judy's own desk\n    judy_desk = 1\n\n    # 7 desks behind Judy\n    desks_behind_Judy = 7\n    \n    # Since Jessica sits in front of Judy, we add their desks as well\n    total_desks = desks_in_front_of_Jessica + jessica_desk + judy_desk + desks_behind_Judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(boys - boys/11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    # Solve for the number of boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = (2.5 + 5) / 0.75\n    return x\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    starting_amount = 1000\n    decrement = 11\n    amount = starting_amount\n    while amount >= 0:\n        amount -= decrement\n    return amount + decrement\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    num1 = 0.11\n    mid = 0.126\n    diff = mid - num1\n    num2 = mid + diff\n\n    return num2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio_toffees_to_chocolates = 7 / 12\n    toffees = chocolates * ratio_toffees_to_chocolates\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factorize(num)):\n            return num\n\ndef factorize(n):\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return factors\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_price_per_case = 56\n    mangoes_cases = 24\n    lychees_cases = 19\n    total_cost = 2826\n\n    lychees_price_per_case = (total_cost - (mangoes_cases * mangoes_price_per_case)) / lychees_cases\n    return lychees_price_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for a in coin_values:\n        for b in coin_values:\n            for c in coin_values:\n                unique_totals.add(a + b + c)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    from itertools import permutations\n\n    def check_multiplication(a, b, c):\n        upper = 100 * a + 10 * b + c\n        lower = 5 * c\n        result = str(upper * lower)\n\n        if len(result) == 6 and result[1] == str(a) and result[2] == str(b) and \\\n           result[3] == str(a) and result[4] == str(b) and result[5] == str(c):\n            return True\n        return False\n\n    # Since the last digit of the product of the multiplication is C, and C must yield a product\n    # with itself ending with the same digit (C), C must be 0, 1, 5, or 6\n    for perm in permutations([0, 1, 5, 6], 3):\n        a, b, c = perm\n        if check_multiplication(a, b, c):\n            return a + b + c\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    initial_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    future_value = initial_amount * ((1 + interest_rate) ** years)\n\n    return future_value\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    return 0.65 + 0.507 + 0.25\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    # Create a set to avoid duplications\n    unique_numbers = set()\n\n    # Generate permutations of 3 digits from the cards\n    card_permutations = permutations(['1', '1', '2', '2'], 3)\n\n    for perm in card_permutations:\n        # Join the digits to form a number and ensure it's a three-digit number (not starting with 0)\n        number = ''.join(perm)\n        if number[0] != '0':\n            unique_numbers.add(number)\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since the multiplication results in 5-digit number from a 3-digit and 2-digit number\n    # The only possibility is 4_ _ x _ _ = 4_ _ _ _\n\n    # Therefore, P must be 4\n    P = 4\n\n    # The possible combinations of two numbers that multiply and end with a 4 are:\n    # 2 * 2 = 4 and 8 * 8 = 64\n    # There is only a single possibility that Q * Q gives the last digit as a 4. So, Q = 8.\n\n    # Now for R, we only have the possibility R * 8 = _8\n    # This could be: 1*8=08, 3*8=24, 7*8=56, 9*8=72\n    # Since we already have an 8 from Q * Q = 64, we need the next multiple of 8 that ends in 8 without repeating digits\n    # Hence, R must be 1 because R * 8 must equal _8 and also must have space for carrying over. \n    # So, R = 1\n\n    Q = 8\n    R = 1\n\n    # The value of P+Q+R\n    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid £10 and y be the number of children who paid £15.\n    total_children = 50\n    total_amount_paid = 555\n    price_without_name = 10\n    price_with_name = 15\n    \n    # Since there are 50 children in total, we have:\n    # x + y = 50\n    # Since the total amount paid is £555,\n    # 10x + 15y = 555\n    \n    # We can solve the above system of equations to find the value of y\n    \n    # Rearrange the first equation to find x in terms of y:\n    # x = 50 - y\n    # Substitute x in the second equation:\n    # 10(50 - y) + 15y = 555\n    # Simplify the equation:\n    # 500 - 10y + 15y = 555\n    y = (555 - 500) // 5\n\n    return y\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs from 7:30 AM to 8:30 AM which is 1 hour\n    jog_time_hours = 1\n    \n    # Then she walks from 8:30 AM to 10:30 AM which is 2 hours\n    walk_time_hours = 2\n    \n    # Jogging speed is 5 miles per hour\n    jog_speed_mph = 5\n    \n    # Walking speed is 3 miles per hour\n    walk_speed_mph = 3\n    \n    # Distance traveled while jogging\n    jog_distance_miles = jog_speed_mph * jog_time_hours\n    \n    # Distance traveled while walking\n    walk_distance_miles = walk_speed_mph * walk_time_hours\n    \n    # Total distance is the sum of distances\n    total_distance_miles = jog_distance_miles + walk_distance_miles\n    \n    return total_distance_miles\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # Then the numbers are x, x+1, x+2, x+3, x+4\n    # The sum of these numbers is x + (x+1) + (x+2) + (x+3) + (x+4)\n    # Simplify the sum: 5x + 10\n    # The sum is given to be 100\n    # So, we have 5x + 10 = 100\n    # Solving for x gives us x = (100 - 10) / 5\n    x = (100 - 10) / 5\n    return x\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_numbers = [n**3 for n in range(1, 35)]  # generate cube numbers within a reasonable range\n    for cube in cube_numbers:\n        if 44000 % cube == 0:\n            q = 44000 // cube\n            return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # to ensure at least 3 cards have the same number, we consider the worst case scenario\n    # according to the pigeonhole principle\n    # worst case: drawing 2 cards of each number without getting 3 of the same number\n    cards_per_number = 2\n    max_unique_numbers = 13\n    # drawing 2 cards each from different numbers (2 x 13) would result in 26 cards\n    # one more draw guarantees at least 3 cards have the same number\n    cards_drawn = (cards_per_number * max_unique_numbers) + 1\n    return cards_drawn\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    number_of_trees = 21\n\n    distance_between_trees = total_length / (number_of_trees - 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    # Andy has initially 149 notebooks.\n    andy_initially = 149\n    # Andy gives 38 notebooks to his sister.\n    andy_gives = 38\n    # Andy and his sister have the same number after he gives the books.\n    andy_after = andy_initially - andy_gives\n    # Since both have the same amount, sister initially had:\n    sister_initially = andy_after\n    # Check Joey's solution:\n    joey_solution = 130\n    # Verify if Joey is correct or incorrect\n    is_joey_correct = (sister_initially == joey_solution)\n\n    # Correct answer calculated\n    correct_answer = sister_initially\n\n    return (is_joey_correct, correct_answer)\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    result = (3 / 4) * 28\n    return result\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_gaps = 9 + 1  # Since there are 9 trees, there would be 10 intervals (gaps)\n\n    distance_between_each_tree = distance_between_buildings / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    # The original number is 200.\n    original_number = '200'\n    count_primes = 0\n    \n    # The only possible prime numbers will have to change the last digit.\n    # The options for the unit digits of prime numbers are 1, 3, 7, 9\n    prime_endings = '1379'\n    \n    # Change only the last digit.\n    for digit in prime_endings:\n        new_number = int(original_number[:-1] + digit)\n        if isprime(new_number):\n            count_primes += 1\n\n    return count_primes\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n    \n    # Equation 1: The sum of the two numbers is 72\n    equation1 = Eq(x + y, 72)\n    \n    # Equation 2: One number is twice the other\n    equation2 = Eq(x, 2 * y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Since we are asking for the smaller number, return y\n    return solutions[y]\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Defining possible cards by suits and numbers\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n\n    # Combine suits and numbers to make complete cards for each suit\n    possible_cards = {\n        'spades': spades,\n        'hearts': hearts,\n        'diamonds': diamonds,\n        'clubs': clubs\n    }\n\n    # Eddie hears the suit and doesn't know the card\n    # If Eddie heard \"diamonds\" or \"clubs\", he would know the card because there is only one face card in each.\n    # So we can eliminate diamonds and clubs\n    possible_suits = {'spades', 'hearts'}\n\n    # Avril hears the number and doesn't know the card\n    # If Avril heard a number that was unique to one suit, she would know the card.\n    # Since she doesn't know which card it is, the card must have a number that appears in at least two of the possible suits.\n    possible_numbers = spades.intersection(hearts)\n\n    # After Eddie says he doesn't know the card, Avril figures out the card\n    # So the card must be the only card with its number in the remaining possible suits\n    # And since Avril now knows the card, it means that this number cannot be in the eliminated suits\n    # We can loop over the remaining numbers and check which one is unique within the possible suits\n    for number in possible_numbers:\n        suits_with_number = {suit for suit, numbers in possible_cards.items() if number in numbers}\n        if len(suits_with_number.intersection(possible_suits)) == 1:\n            final_suit = suits_with_number.intersection(possible_suits).pop()\n            final_number = number\n            break\n\n    # Convert the results to the final card\n    ans = (final_suit.capitalize(), final_number)\n    return ans\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    known_numbers_sum = sum([3, 4, 6, 10])\n    total_numbers = 5\n    desired_mean = 5\n    \n    total_sum = total_numbers * desired_mean\n    fifth_number = total_sum - known_numbers_sum\n    \n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1  # Danny is directly in front of Emily\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    single_cut_time = 12 / (4 - 1)  # Time for one cut, total cuts needed for 4 sections is 3\n    total_cuts_for_5_times = 5 * (5 - 1)  # Total cuts for 5 times with 4 sections each\n    total_time = total_cuts_for_5_times * single_cut_time\n    return total_time\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define our variables\n    # Let d be the number of days to finish the book \n    # Let p be the number of pages in the book\n    d, p = symbols('d p')\n\n    # Two equations based on the problem statement:\n    # If Vanessa reads 30 pages a day, she will finish reading in d+2 days\n    # If Vanessa reads 39 pages a day, she will finish reading in d-4 days\n\n    eq1 = Eq(30 * (d + 2), p)\n    eq2 = Eq(39 * (d - 4), p)\n\n    # Solving the system of equations for d and p\n    solutions = solve((eq1, eq2), (d, p))\n\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    # Initialize the count of '5's and the number of pages.\n    count_5s = 0\n    page_number = 0\n\n    # The loop continues until we count 30 occurrences of '5'.\n    while count_5s < 30:\n        page_number += 1\n        count_5s += str(page_number).count('5')\n\n    return page_number\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define the variable x\n    x = symbols('x')\n    \n    # Define the equation\n    equation = 13 - 2 * (2 * x - 3) - (5 - (x - 2))\n\n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Check if Celeste's solution is the same as the correct solution\n    celestes_solution = 4 / 3\n    \n    # Return the correct solution\n    if solution[0] == celestes_solution:\n        correct = True\n    else:\n        correct = False\n        celestes_solution = solution[0]\n    \n    return correct, celestes_solution\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    result = 7.298 / 0.2\n    return result\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    number_of_workers = 2\n\n    # Calculate total rooms painted by one worker in a day\n    total_rooms_per_day = rooms_per_day_per_worker * number_of_workers\n\n    # Divide the total number of rooms by the number of rooms painted per day\n    days_needed = total_rooms / total_rooms_per_day\n\n    return days_needed\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(1 * apple + 2 * orange, 48)\n    equation2 = Eq(1 * apple + 1 * orange, 31)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n    \n    # Week 1: 4 balls + 27p left\n    # Week 2: 2 balls + 151p left\n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + 151, pocket_money)\n    \n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)  # Pages Yola can read in one hour\n    seconds_per_hour = 3600  # Number of seconds in one hour\n    seconds_per_page = seconds_per_hour / pages_per_hour  # Time in seconds it takes Yola to read each page\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given_away = total_badges * (3/8)\n    badges_left = total_badges - badges_given_away\n    return int(badges_left)\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num.count('0') == 1 and '0' not in str_num[-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n    equation1 = Eq(elias - 88, aileen - 8)\n    equation2 = Eq(elias, 5 * aileen)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n    \n    return int(elias_final), int(aileen_final)\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Thomas and Gerald's unit ratios of cheese consumed\n    thomas, gerald = symbols('thomas gerald')\n\n    # Represent the relationship of the pieces of cheese they eat\n    equation = Eq(5 * thomas, 3 * gerald)\n\n    # Sum of pieces of cheese they eat together\n    total_cheese_eq = Eq(5 * thomas + 3 * gerald, 104)\n\n    # Solve the equations\n    solutions = solve((equation, total_cheese_eq), (thomas, gerald))\n\n    # Calculate the difference in the number of pieces of cheese between Thomas and Gerald\n    difference = 5 * solutions[thomas] - 3 * solutions[gerald]\n\n    return difference\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    sum_numbers = sum(numbers)\n    return sum_numbers\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the base 8 numbers to base 10, perform addition, then convert back to base 8\n    num1 = int(\"25\", 8)\n    num2 = int(\"37\", 8)\n    sum_base10 = num1 + num2\n    ans = oct(sum_base10)[2:]  # Remove the '0o' prefix that indicates an octal number\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults, children = symbols('boys girls adults children')\n\n    equation1 = Eq(boys, 2 / 7 * girls)\n    equation2 = Eq(adults, 2 / 3 * children)\n    equation3 = Eq(adults, boys + 1228)\n    equation4 = Eq(children, boys + girls)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (boys, girls, adults, children))\n\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let's denote the number of rackets originally purchased as x.\n    # Then the total cost price would be 150x.\n    # The proceeds when 8 rackets are left would be (x-8)*175.\n    # The equation to solve would be (x-8)*175 = 150x + 525.\n\n    # Rearranging the equation to solve for x:\n    # 150x + 525 = 175x - 1400\n    # 525 + 1400 = 175x - 150x\n    # 1925 = 25x\n    # x = 1925 / 25\n    x = (profit + remaining_rackets * selling_price_per_racket) / (selling_price_per_racket - cost_price_per_racket)\n\n    return int(x)\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, gordon = symbols('chloe gordon')\n    \n    # Define the equations based on the problem statement\n    # Since Chloe and Gordon had equal amounts initially, we have chloe = gordon\n    # Chloe spent $20 each day and has $157 left, Gordon spent $25 each day and has $82 left\n    # Let's assume they both spent money for 'd' days. Therefore, the equations would be:\n    # chloe - 20*d = 157\n    # gordon - 25*d = 82\n    # And since they had equal amounts at first, chloe = gordon, we have:\n    # gordon - 20*d = 157\n    # gordon - 25*d = 82\n\n    # We subtract the second equation from the first equation to solve for 'd'\n    d = symbols('d')\n    equation1 = Eq(gordon - 20*d, 157)\n    equation2 = Eq(gordon - 25*d, 82)\n    \n    # Get the solution for the system of equations\n    solutions = solve((equation1, equation2), (gordon, d))\n\n    return solutions[gordon]\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    ans = 813 * 72\n    return ans\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable we want to find\n    x = symbols('x')\n\n    # Create the equation based on the math question provided\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    # Solve the equation for the variable x\n    solution = solve(equation, x)\n\n    # Return the solution for the variable x\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let the total initial value of jewels in P be x and in Q be y\n    x = Symbol('x')\n    y = Symbol('y')\n    \n    # average value of jewels in P before transfer: x/3\n    # average value of jewels in Q before transfer: y/3\n    # After transferring a jewel worth £5000 from P to Q:\n    # average value of jewels in P after transfer: (x - 5000)/3\n    # average value of jewels in Q after transfer: (y + 5000)/3\n    \n    # According to the problem statement:\n    equations = [\n        (x - 5000)/2 - x/3 == 1000, # average increases by £1000 in P\n        (y + 5000)/4 - y/3 == 1000  # average increases by £1000 in Q\n    ]\n    \n    # Solve the system of equations\n    solution = solve(equations)\n    \n    # Total value of all 6 jewels is the sum of initial total values in P and Q\n    total_value = solution[x] + solution[y]\n    \n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    num_zeros = 0\n    factorial = 1\n\n    for i in range(1, 11):\n        factorial *= i\n        while factorial % 10 == 0:\n            num_zeros += 1\n            factorial //= 10\n\n    return num_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    selling_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    selling_price_total = selling_melons * selling_price_per_melon\n    profit = selling_price_total - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Calculate the greatest common divisor (GCD) of (150 - 17) and (100 - 5)\n    neighbors = gcd(150 - 17, 100 - 5)\n    \n    return neighbors\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # the length of the line in cm\n    cross_interval = 1  # the interval between crosses in cm\n    \n    # The number of crosses is the line length divided by the cross interval plus one for the cross at the beginning\n    num_crosses = line_length // cross_interval + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_balloons_in_pattern = 2\n    total_balloons = 75\n\n    full_patterns = total_balloons // pattern_length\n    remaining_balloons = total_balloons % pattern_length\n\n    total_green = full_patterns * green_balloons_in_pattern\n\n    if remaining_balloons >= 3:\n        total_green += 1\n    if remaining_balloons == 6:\n        total_green += 1\n\n    return total_green\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbolic variables for the number of marbles Sandra and Jessica originally had\n    sandra, jessica = symbols('sandra jessica')\n    \n    # Create equation based on the given condition after exchange\n    equation1 = Eq(sandra - 13, jessica + 13 - 6)\n    \n    # Define that Sandra had more marbles than Jessica originally\n    equation2 = Eq(sandra, jessica + 13)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sandra, jessica))\n    \n    # The answer is the difference in the number of marbles Sandra had more than Jessica originally\n    ans = solutions[sandra] - solutions[jessica]\n    \n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1st_and_6th = 60\n    number_of_intervals_1_to_6 = 6 - 1\n    distance_per_interval = distance_between_1st_and_6th / number_of_intervals_1_to_6\n\n    number_of_intervals_1_to_9 = 9 - 1\n    distance_between_1st_and_9th = distance_per_interval * number_of_intervals_1_to_9\n\n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize digit counts and N\n    digit_1_count, digit_2_count, N = 0, 0, 0\n    \n    # Loop until the digit count conditions are met\n    while digit_1_count < 15 or digit_2_count < 14:\n        N += 1\n        str_N = str(N)\n        \n        # Count the number of 1s and 2s in the string representation of N\n        digit_1_count += str_N.count('1')\n        digit_2_count += str_N.count('2')\n    \n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    friends = 7\n    pieces_each_friend = 26\n    pieces_left_with_kate = 22\n    \n    pieces_shared = friends * pieces_each_friend\n    pieces_before_school = pieces_shared + pieces_left_with_kate\n    \n    total_pieces = pieces_before_school * 3  # since she ate 1/3 at home, she brought 2/3 to school.\n\n    return total_pieces\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Andy's position: 9th floor\n    andy_current_floor = 9\n    # Andy's goal: 25th floor\n    andy_goal_floor = 25\n    # Bob's position when Andy is at the 9th floor: 5th floor\n    bob_current_floor = 5\n\n    # Calculate the ratio of Andy's progress to Bob's progress\n    rate = andy_current_floor / bob_current_floor\n\n    # Calculate Bob's position when Andy reaches the top floor\n    bob_goal_floor = andy_goal_floor / rate\n\n    return int(bob_goal_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the total number of words, and r be the rate at which James types.\n    w, r = symbols('w r')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(w, r * 3)             # original speed to finish work\n    equation2 = Eq(w, (r + 30) * 2)      # increased speed to finish work 1 minute earlier\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, r))\n\n    # Get the total number of words\n    return solutions[w]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Total lights in the classroom\n    total_lights = 10\n    \n    # Create a list to represent the state of lights, False for off, True for on\n    light_states = [False] * total_lights\n\n    # Ms. Lily presses each alternate switch starting from switch 1\n    for i in range(0, total_lights, 2):\n        light_states[i] = not light_states[i]\n    \n    # Sam presses each even numbered switch 7 times\n    for i in range(1, total_lights, 2):\n        # Pressing a switch odd number of times changes its state,\n        # pressing it even number of times doesn't\n        light_states[i] = not light_states[i] if 7 % 2 != 0 else light_states[i]\n    \n    # Count the number of True values in light_states which represent lights that are on\n    ans = light_states.count(True)\n\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the amount of water in A and B before transferring\n    A, B = symbols('A B')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(A, 2/3 * B)  # A has 2/3 as much water as B\n    equation2 = Eq(A + 4, 7/8 * (B - 4))  # A + 4L has 7/8 as much water as B - 4L\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n    \n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    day_climb = 3\n    night_slip = 2\n    current_position = 0\n    days = 0\n\n    while current_position < depth:\n        days += 1\n        current_position += day_climb\n        if current_position >= depth:\n            break\n        current_position -= night_slip\n    \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_sugar_content = 0.06\n    final_sugar_content = 0.10\n\n    initial_sugar = initial_volume * initial_sugar_content\n    final_sugar = initial_volume * final_sugar_content\n\n    sugar_to_add = final_sugar - initial_sugar\n\n    return sugar_to_add\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    # Already made spare parts\n    made_spare_parts = 20\n    \n    # Total needed spare parts\n    total_spare_parts = 100\n    \n    # Time spent for the made spare parts\n    time_spent = 2\n    \n    # Calculate spare parts made per hour\n    rate_per_hour = made_spare_parts / time_spent\n    \n    # Calculate the remaining spare parts to be made\n    remaining_spare_parts = total_spare_parts - made_spare_parts\n    \n    # Calculate time needed for the remaining spare parts\n    time_needed = remaining_spare_parts / rate_per_hour\n    \n    # Eddy's calculation checks\n    eddy_correct = (total_spare_parts / rate_per_hour) == time_needed + time_spent\n    \n    return time_needed if not eddy_correct else \"Eddy is correct\"\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    total_bars = 4\n\n    total_cost = cost_per_bar * total_bars\n\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Drawing all balls of one colour guarantees not getting all 3 different colours (5)\n    # Drawing all balls of two colours guarantees not getting all 3 different colours (5+5=10)\n    # Therefore, we must draw one more ball to ensure we have all three different colours.\n    return 10 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grade_4, grade_5, grade_6 = symbols('grade_4 grade_5 grade_6')\n\n    equation1 = Eq(grade_5, 2 * grade_4 + 4)\n    equation2 = Eq(grade_6, 3 * grade_4 + 8)\n    equation3 = Eq(grade_4 + grade_5 + grade_6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade_4, grade_5, grade_6))\n\n    return solutions[grade_6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Since we are looking for at least x people to guarantee a repetition,\n    # we use the Pigeonhole Principle. For each person, there are\n    # comb(5, 2) possible color combinations for two balls chosen without replacement.\n    # This is because the order in which the colors are drawn does not matter.\n\n    # Calculate the number of possible color combinations for 2 balls out of 5 colors.\n    color_combinations = comb(5, 2)\n    \n    # By the Pigeonhole Principle, if we have color_combinations + 1 people,\n    # there will necessarily be at least two people with the same color combination.\n    return color_combinations + 1\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # If we draw one number, we cannot ensure that there are two numbers whose product is divisible by 4.\n    # With two draws, there could still be a chance where both numbers are odd, hence their product won't be divisible by 4.\n    # With three draws, using the Pigeonhole principle, we can conclude that\n    # there will be at least one pair of numbers where at least one of the numbers is even,\n    # because there would be at least two numbers of the same parity (either odd or even).\n    # However, if the two even numbers are both of the form 4k+2, their product isn't divisible by 4.\n    # Therefore, we need to draw at least 4 numbers to ensure that at least one pair will have a product divisible by 4.\n    # There will definitely be one number divisible by 4 or two numbers that are even.\n\n    return 4\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    # Let the number of cards Hisham has be x, then Melissa has 2x cards\n    # Together they have 876 cards\n    # Hisham has x and Melissa has 2x cards\n    # Melissa will give Hisham some cards so they both have the same number of cards\n    # If Melissa gives y cards to Hisham, we get a new equation: x + y = 2x - y\n    # And we also know that x + 2x = 876\n    # Solving the equations:\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # x is Hisham's cards, y is the number of cards Melissa gives\n    eq1 = Eq(x + 2*x, 876)\n    \n    # Melissa's new amount is 2x - y and Hisham's new amount is x + y, they should be equal\n    eq2 = Eq(2*x - y, x + y)\n    \n    # Solve the two equations simultaneously\n    solutions = solve((eq1, eq2), (x, y))\n    # Variable 'y' is the number of cards Melissa should give Hisham\n    return solutions[y]\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) // 2\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # 2m 20cm converted to cm\n    piece_length_cm = total_length_cm / 2\n    return piece_length_cm\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    total = 0\n    for i in range(46, 51):\n        multiplier = 100 - i\n        total += i * multiplier\n    return total\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    \n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = next(primerange(10, 100))\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(10, 100):\n        if i**2 < 100:\n            largest_two_digit_square = i**2\n        else:\n            break\n    \n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age and father's age difference will remain the same\n    age_difference = 41 - 14\n    \n    # Starting from Brian's current age, check each year until their ages are reversed\n    for brian_age in range(15, 100):\n        father_age = brian_age + age_difference\n        # Check if Brian's age is the reverse of his father's age\n        if str(father_age) == str(brian_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    coffee_price_euro = 4.8\n    coffee_price_dollars = coffee_price_euro * euro_to_dollar_rate\n    return coffee_price_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + b/c + (d/e)*f - (g + h/j)\n        if N == int(N):\n            if max_N is None or N > max_N:\n                max_N = N\n    return max_N\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    total_books_final = total_books_initial + 510\n    # Ratios\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n    \n    # Initial number of books\n    chinese_books_initial = (ratio_chinese / ratio_total) * total_books_initial\n    malay_books_initial = (ratio_malay / ratio_total) * total_books_initial\n    english_books_initial = (ratio_english / ratio_total) * total_books_initial\n    \n    # Increased number of books\n    chinese_books_final = chinese_books_initial * 1.20\n    malay_books_final = malay_books_initial * 1.10\n    \n    # Remaining books for English after increase in Chinese and Malay\n    remaining_books_for_english = total_books_final - chinese_books_final - malay_books_final\n    \n    # Percentage increase in English books\n    increase_english_books = remaining_books_for_english - english_books_initial\n    percentage_increase_english_books = (increase_english_books / english_books_initial) * 100\n    \n    return percentage_increase_english_books\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n\n    num_cakes = lcm(12, 56)\n\n    return num_cakes\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # number of juniors and seniors\n    juniors = 12\n    seniors = 8\n\n    # average scores\n    avg_juniors = 10\n    avg_all = 14\n\n    # total score of juniors\n    total_junior_score = juniors * avg_juniors\n    # total score combining juniors and seniors\n    total_score = (juniors + seniors) * avg_all\n\n    # total score of seniors\n    total_senior_score = total_score - total_junior_score\n    # average score of seniors\n    avg_seniors = total_senior_score / seniors\n\n    return avg_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age of two dogs was 10 years\n    combine_age_4_years_ago = 10\n    # In four years, each dog has aged 4 years, so combined they have aged 8 years more\n    combined_age_now = combine_age_4_years_ago + 8\n    # In two more years, each dog will age 2 years, so combined they will age 4 years more\n    combined_age_in_2_years = combined_age_now + 4\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    questions = 24  # Rex answered all but one of the questions.\n    score_correct = 4\n    score_incorrect = -2\n\n    # The equation to solve is: correct_answers*score_correct + incorrect_answers*score_incorrect = total_score\n\n    for correct_answers in range(questions+1):\n        incorrect_answers = questions - correct_answers\n        total_score = correct_answers*score_correct + incorrect_answers*score_incorrect\n        if total_score == 66:\n            return correct_answers\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_percentage = 60 / 100\n    correct_questions = total_questions * correct_percentage\n    unanswered_questions = total_questions - correct_questions\n    correct_score = 5\n    wrong_score = -2\n    unanswered_score = 1\n\n    # Define a variable for the number of wrong answers.\n    # Since we know the total number of correct and unanswered questions,\n    # we can express the number of wrong questions in terms of the number of correct questions.\n    wrong_questions = correct_questions - (264 - unanswered_questions * unanswered_score) / (correct_score - wrong_score)\n\n    correct_answers = correct_questions - wrong_questions\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # Applying the Pigeonhole Principle: (pigeonholes - 1) * (least number of items per hole) + 1\n    containers = 10\n    least_apples = (containers - 1) * 1 + 2\n    return least_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * 10**(-2022)\n    denominator = 92 * 10**(-2023)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50  # grams\n\n    cookies_to_make = 300\n\n    butter_needed = (butter_used * cookies_to_make) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n    \n    # Dedra had 4 times as much money as Timm at first\n    initial_condition = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each, Dedra now has twice as much money as Timm\n    after_condition = Eq(dedra + 72, 2 * (timm + 72))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_condition), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    num = \"\"\n    i = 1\n    while len(num) < 1000:\n        num += str(i)\n        i += 1    \n    return int(num[999])\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 2, 19)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Individual Sets\n    A = 62\n    C = 90\n    E = 68\n\n    # Intersection Sets\n    AC = 48\n    AE = 36\n    CE = 50\n\n    # Intersection of all three sets\n    ACE = 25\n\n    # Inclusion-Exclusion Principle for Three Sets\n    total = A + C + E - (AC + AE + CE) + ACE\n\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    result = 257.36 / 0.4\n    return result\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    n = 18  # Total number of pupils\n    r = 3   # Number of pupils to be seated in a row\n    \n    permutations = factorial(n) // factorial(n - r)\n    return permutations\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = 4\n    jason, bruce, willie = symbols('jason bruce willie')\n    \n    # Bruce and Willie are of the same age as Jason.\n    bruce_age = jason\n    willie_age = jason\n    \n    # Total age equation\n    total_age_eq = Eq(jack_age + jason + bruce_age + willie_age, 19)\n    \n    # Since Jason is older than Jack, we add an inequality\n    jason_older_than_jack = Eq(jason > jack_age)\n    \n    # Solve the system of equations\n    solutions = solve((total_age_eq, jason_older_than_jack), (jason, bruce, willie))\n    \n    # Since Jason, Bruce, Willie have the same age, we pick 'jason'\n    jason_age = solutions[jason]\n    \n    return jason_age\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    friends = symbols('friends')\n    equation1 = Eq(friends * 5 + 3, friends * 6 - 2)\n    num_friends = solve(equation1, friends)\n    erasers = num_friends[0] * 5 + 3\n    return erasers\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let jake_age be Jake's current age and john_age be John's current age\n    jake_age, john_age = symbols('jake_age john_age')\n\n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(jake_age + john_age, 44)\n\n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake_age + 14, 2 * (john_age + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake_age, john_age))\n\n    # John's age in 14 years\n    john_age_in_14_years = solutions[john_age] + 14\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    time_years = 3\n    \n    present_value = future_value / ((1 + interest_rate) ** time_years)\n    \n    return round(present_value, 2)\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of the youngest child\n    x = symbols('x')\n\n    # The difference in age between each child is 15 months\n    # The oldest child is the youngest plus the age difference times (number of children - 1)\n    # The oldest is six times as old as the youngest\n    equation = Eq(x + 15 * (9 - 1), 6 * x)\n\n    # Solving for x\n    youngest_age = solve(equation, x)\n\n    return youngest_age[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from sympy import *\n\ndef solution():\n    # Define the variables\n    x, y = symbols('x y')\n\n    # Initial expression\n    initial_expr = 15 + 5 * 5 + 15 - 6 + 7\n    \n    # List of possible expressions with two pairs of brackets\n    possible_exprs = [\n        (x + 5) * (y + 15 - 6 + 7), \n        (15 + 5) * (x + y - 6 + 7),\n        (15 + 5) * (5 + (15 - 6) + 7),\n        (15 + (5 * (5 + 15)) - 6 + 7), \n        (15 + 5 * (5 + (15 - 6)) + 7), \n        (15 + (5 * 5) + (15 - 6) + 7), \n        ((15 + 5) * 5 + 15) - (6 + 7),\n        (15 + 5) * (5 + (15 - 6) + 7), \n        (15 + 5) * (5 + 15) - (6 + 7)\n    ]\n\n    # Calculate the minimum value from the list of possible expressions\n    min_value = float('inf')\n    for expr in possible_exprs:\n        # Substitute x and y with 5 to simulate the multiplication by 5\n        value = expr.subs({x: 5, y: 5}).evalf()\n        if value < min_value:\n            min_value = value\n    \n    return min_value\n\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = 0\n    for i in range(1, 2008):\n        ans += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(ans)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Iterating 0000 to 9999 (smallest original number to largest possible original number)\n    # where 9999 is the highest 4 digit number\n    for num in range(10000):\n        original = str(num).zfill(4)  # Pad with leading zeros to form a 4-digit number\n        # Shift the last digit to the first position to get the new number\n        new = original[-1] + original[:-1]\n        # Check if the new number is greater than the original by 5877\n        if int(new) - int(original) == 5877:\n            return int(original)\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sweets Jiaxiang has.\n    cayden, jiaxiang = symbols('cayden jiaxiang')\n        \n    # Cayden has 5 more sweets than Jiaxiang.\n    equation1 = Eq(cayden, jiaxiang + 5)\n    \n    # After Cayden gives Jiaxiang 10 sweets\n    cayden_new = cayden - 10\n    jiaxiang_new = jiaxiang + 10\n    \n    # The difference in the number of sweets they will have\n    difference = abs(cayden_new - jiaxiang_new)\n    \n    # Solving the equation     \n    sweets_cayden = solve(equation1, cayden)[0]\n    \n    # Calculating the difference after the exchange\n    difference_after_exchange = difference.subs(cayden, sweets_cayden)\n\n    return difference_after_exchange\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    number_of_multiples = last_multiple - first_multiple + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    initial_students = 5\n    new_students = 6\n    initial_average = 72\n    new_average = 75\n\n    total_initial = initial_students * initial_average\n    total_new = new_students * new_average\n\n    marys_score = total_new - total_initial\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # speed of the train in m/s\n\n    # Time taken for the train to completely cross the bridge (from front bumper to end)\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # a 3-digit odd number divisible by 9 has the form 9*n where n is between 12 (108, the first 3-digit number divisible by 9) and 111 (999, the last 3-digit number)\n    # the tens digit must be divisible by 4, which means it can only be 0, 4 or 8.\n    # we are looking for the greatest number, so we will start checking from the end\n    for n in range(111, 11, -1):\n        number = 9 * n\n        tens_digit = (number // 10) % 10\n        \n        # check if the tens digit is divisible by 4 and the number is odd\n        if number % 2 == 1 and tens_digit % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import factorial as f\n\n    # The problem boils down to dividing n identical items into r different groups,\n    # with each group receiving at least one item. This is a stars and bars problem.\n    # The formula is: C(n - 1, r - 1), where C is the combination function.\n\n    n = 11 - 4  # We subtract 4 because each student gets at least 1 doughnut.\n    r = 4\n\n    # Compute combinations using the factorial formula: C(n, k) = n! / (k! * (n - k)!)\n    ans = f(n) // (f(r - 1) * f(n - (r - 1)))\n\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n    return int(time)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Number of marbles that are not guaranteed to be unique\n    # -1 since we start counting from having 0 marbles\n    red = 4 - 1\n    green = 7 - 1\n    blue = 6 - 1\n    # We do not subtract from orange because we need to pick both to ensure we have an orange\n\n    # Summing the maximum number of marbles we can draw without being sure of having all 4 colors\n    # We add +2 for the two orange marbles we need to pick to ensure we have an orange\n    marbles_to_draw = red + green + blue + 2\n    return marbles_to_draw\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # A five pound note is equal to 500 pence.\n    five_pound_in_pence = 500\n\n    # List of coins in pence where each value is a multiple of 5. Exclude the 5 pound coin as change will be less than 5 pounds\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Iterate through all possible combinations of 5 coins\n    for a in coins:\n        for b in coins:\n            for c in coins:\n                for d in coins:\n                    for e in coins:\n                        if a != b and a != c and a != d and a != e and b != c and b != d and b != e and c != d and c != e and d != e:\n                            change = a + b + c + d + e\n                            if change < five_pound_in_pence:\n                                spent = five_pound_in_pence - change\n                                return spent\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_in_temp = -11\n    midnight_temp = midday_temp + drop_in_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    total_notes = 38\n    spent_percentage_10 = 0.8\n    spent_percentage_2 = 0.75\n\n    # Let the number of $10 notes be x and $2 notes be y\n    # We have two equations:\n    # x + y = 38 (total number of notes)\n    # (1 - spent_percentage_10) * x = 3 * (1 - spent_percentage_2) * y\n\n    for x in range(total_notes + 1):  # x can range from 0 to 38 (both inclusive)\n        y = total_notes - x\n        if (1 - spent_percentage_10) * x == 3 * (1 - spent_percentage_2) * y:\n            spent_10_notes = spent_percentage_10 * x * 10\n            spent_2_notes = spent_percentage_2 * y * 2\n            cost_of_fan = spent_10_notes + spent_2_notes\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_hives = 5\n    current_production = 50  # kg of honey\n    desired_production = 90  # kg of honey\n\n    additional_hives = ((desired_production / current_production) - 1) * current_hives\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Defining the variables for Ali's and Kumar's erasers\n    ali, kumar = symbols('ali kumar')\n\n    # Initial ratio 7:5\n    equation1 = Eq(ali / kumar, 7/5)\n\n    # After Ali gives Kumar 10 erasers, the new ratio 1:5\n    equation2 = Eq((ali - 10) / (kumar + 10), 1/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n\n    # Total erasers is the sum of Ali's and Kumar's erasers\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n\n    # Tina went east for 15 km and then west for 9 km, resulting in an eastward distance of (15 - 9) km.\n    east_west_distance = 15 - 9\n    \n    # Tina went north for 3 km and then for another 5 km, totaling 8 km northward.\n    north_distance = 3 + 5\n    \n    # The shortest distance is the hypotenuse of the right-angled triangle formed by her eastward and northward travel.\n    shortest_distance = sqrt(east_west_distance ** 2 + north_distance ** 2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    # Max's purchase: 1 banana + 3 pears = 84p\n    eq1 = Eq(banana + 3 * pear, 84)\n    \n    # Emily's purchase: 1 banana + 1 pear = 48p\n    eq2 = Eq(banana + pear, 48)\n    \n    # Solving the system of equations\n    solution = solve((eq1, eq2), (banana, pear))\n    \n    return solution[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = 8 * 60 + 20  # convert 8 hours and 20 minutes to minutes\n    activity_and_break = 45 + 20  # time for each activity and the break after it in minutes\n\n    # Subtract the break after the last activity because it does not exist\n    number_of_activities = (total_time_minutes - 20) // activity_and_break\n\n    return number_of_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weight of Adam, Ben, and Carl respectively.\n    # We are given that:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n    # By adding all these, we get 2*(a + b + c) because each person's weight is counted twice:\n    total_double = 102 + 97 + 92\n    # The total weight of all three people is half that sum:\n    total_weight = total_double / 2\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'b' be the number of days B takes to finish the work alone\n    b = symbols('b')\n    a = b - 5  # A takes 5 days less than B\n    \n    # A's efficiency is twice B's, we have the following relationship\n    # A's work done in 1 day is 1/a, B's work done in 1 day is 1/b\n    # According to the efficiency, 1/a = 2/b => b/(b-5) = 2 => b^2 - 5b = 2b\n    equation = Eq(b/(b-5), 2)\n    \n    # Solve the equation for b\n    solution_b = solve(equation, b)\n    \n    # Filter positive solution because time cannot be negative\n    days_b = [sol.evalf() for sol in solution_b if sol > 0]\n    \n    # There should be only one positive solution\n    return days_b[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num = 123456\n    # The divisibility test for 11 is the difference between the sum of the digits in the odd\n    # positions and the sum of the digits in the even positions. If the result is 0 or divisible by 11, \n    # then the whole number is divisible by 11.\n    num_str = str(num)\n    sum_odd = sum([int(num_str[i]) for i in range(0, len(num_str), 2)])\n    sum_even = sum([int(num_str[i]) for i in range(1, len(num_str), 2)])\n    \n    remainder = abs(sum_odd - sum_even) % 11\n    is_correct = remainder == 1\n    \n    return {\"is_correct\": is_correct, \"remainder\": remainder}\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = (1/5) * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # final length converted from cm to meters\n    melted_length_m = initial_length_m - final_length_m\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    return 650 * 0.40\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def count_ways(steps):\n        # Base cases if there are negative steps or no steps\n        if steps < 0:\n            return 0\n        if steps == 0:\n            return 1\n        # Recursive call\n        return count_ways(steps - 1) + count_ways(steps - 4)\n    \n    ans = count_ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    # At the first stop two-fifths get off\n    passengers_after_first_stop_off = initial_passengers - (2/5 * initial_passengers)\n    # then 7 people get on\n    passengers_after_first_stop_on = passengers_after_first_stop_off + 7\n    # At the next stop a quarter of the people remaining on the bus get off\n    passengers_after_second_stop_off = passengers_after_first_stop_on - (1/4 * passengers_after_first_stop_on)\n    # then 13 get on\n    passengers_after_second_stop_on = passengers_after_second_stop_off + 13\n\n    return int(passengers_after_second_stop_on)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Generate the sequence: 0.5, 1, 1.5, ..., 10\n    sequence = [i / 2 for i in range(1, 21)]\n    \n    # Calculate the sum of the sequence\n    sum_of_sequence = sum(sequence)\n    \n    # Calculate the square of the sum, which is the sum of the cubes\n    ans = sum_of_sequence ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    error_margin = 5\n    \n    # Since the estimation is rounded to the nearest 5 pounds,\n    # the least amount his shopping bill could be is 2.5 pounds\n    # less than the estimated price (since rounding to the nearest 5\n    # could go 2.5 pounds above or 2.5 pounds below the actual value)\n    least_amount = estimated_price - (error_margin / 2)\n    \n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n    difference = future_sum - current_sum\n    years = difference // 2\n\n    return years\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            for x3 in range(98, 103):\n                if x1 + x2 + x3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # Total number of toys\n    total_toys = 40\n    # Position of the elephant from left to right\n    elephant_pos_left_to_right = 10\n    # Number of toys from the rabbit to the elephant\n    toys_between_rabbit_and_elephant = 5\n    \n    # Position of the rabbit from left to right\n    # The elephant is on the right side of the rabbit and there are 5 toys between them\n    rabbit_pos_left_to_right = elephant_pos_left_to_right - toys_between_rabbit_and_elephant - 1\n    \n    # Position of the rabbit from right to left\n    rabbit_pos_right_to_left = total_toys - rabbit_pos_left_to_right\n    \n    return rabbit_pos_right_to_left\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Tim takes to write the book by himself\n    t = symbols('t')\n\n    # Nancy's work rate per day\n    nancy_rate = 1 / 6\n\n    # Tim's work rate per day\n    tim_rate = 1 / t\n\n    # They finish the work in 1/4 days together\n    combined_rate = 1 / 4\n\n    # Equation representing work rates\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n\n    # Solve for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1) and (pencils % 3 == 2) and (pencils % 4 == 3) and (pencils % 5 == 4):\n            return pencils\n        else:\n            pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 4  # Ewan and his 3 sisters\n\n    biscuits_each = total_biscuits // people_count\n\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return int(result)\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert total mass of sauce to grams from kilograms\n    total_mass_grams = 172 * 1000 \n    \n    # Mass of each ingredient packets\n    mass_P = 300\n    mass_Q = 400\n    mass_R = 500\n    \n    # Given ratio of the number of packets of ingredients P, Q, and R\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    \n    # Let's calculate the total number of packets using the ratios and total mass\n    # Let the common factor for the number of packets be x\n    # Total mass would then be: (mass_P * ratio_P * x) + (mass_Q * ratio_Q * x) + (mass_R * ratio_R * x)\n    # Set this total mass equal to the total mass of the sauce and solve for x\n    x = total_mass_grams / (mass_P * ratio_P + mass_Q * ratio_Q + mass_R * ratio_R)\n    \n    # Total number of packets is the sum of the packets of P, Q, and R\n    total_packets = (ratio_P * x) + (ratio_Q * x) + (ratio_R * x)\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # Including 'a'\n\n    sum_of_numbers = mean_value * total_numbers\n    sum_of_known_numbers = sum(numbers)\n    a = sum_of_numbers - sum_of_known_numbers\n\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from sympy import lcm\n\ndef solution():\n    # Convert minutes to seconds for uniformity\n    light1_cycle = 1 * 60  # 1 minute\n    light2_cycle = 1.5 * 60  # 1.5 minutes\n    all_green_cycle = 9 * 60  # 9 minutes\n\n    # Least Common Multiple for the first two lights\n    lcm_first_two = lcm(light1_cycle, light2_cycle)\n\n    # The third light's cycle must be a divisor of the 9-minute all-green cycle\n    # and must be at least 30 seconds\n    third_light_cycle = None\n    for i in range(30, all_green_cycle + 1):\n        # Check if i is a divisor of all_green_cycle and lcm_first_two\n        if all_green_cycle % i == 0 and lcm_first_two % i == 0:\n            third_light_cycle = i\n            break\n\n    return third_light_cycle\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit (centimeters)\n    length_pink_cm = 2.5 * 100  # Convert meters to centimeters\n    length_blue_cm = 220        # Already in centimeters\n    length_orange_cm = 30.5     # Already in centimeters\n    \n    # Find the longest ribbon\n    longest_ribbon = max(length_pink_cm, length_blue_cm, length_orange_cm)\n    \n    # Determine the color of the longest ribbon\n    if longest_ribbon == length_pink_cm:\n        return 'pink'\n    elif longest_ribbon == length_blue_cm:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    bake_time = 15\n    wash_time = 5\n    eat_time = 15\n\n    total_time = prep_time + bake_time + wash_time + eat_time\n    \n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% off\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    \n    red_capacity = 10\n    blue_capacity = 15\n    green_capacity = 20\n    \n    total_cars = red_cars + blue_cars + green_cars\n    total_capacity = (red_cars * red_capacity) + (blue_cars * blue_capacity) + (green_cars * green_capacity)\n\n    average_capacity = total_capacity / total_cars\n    \n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed\n    rachel_speed = 84  # km/h\n    # Eleanor's time to reach City G\n    eleanor_time = 4  # hours\n    # Rachel's distance to City F when Eleanor reaches City G\n    rachel_remaining_distance = 39  # km\n    # Rachel travels for an extra 1.5 hours after Eleanor reaches City G\n    rachel_extra_time = 1.5  # hours\n\n    # Calculate Rachel's distance traveled in the extra 1.5 hours\n    rachel_extra_distance = rachel_speed * rachel_extra_time\n\n    # Total distance Rachel would have traveled to reach City F after Eleanor reaches City G\n    total_rachel_distance = rachel_remaining_distance + rachel_extra_distance\n\n    # Since Eleanor takes 4 hours and Rachel travels for 5.5 hours in opposite directions\n    # Their combined speed will cover the distance between City F and City G in that time\n    # Total time Rachel travels (until Eleanor's arrival + 1.5 hours)\n    total_time_rachel_travels = eleanor_time + rachel_extra_time\n\n    # Total distance between City F and City G is the distance Rachel would travel in 5.5 hours\n    # Plus the distance Eleanor travels in 4 hours at her uniform speed (which is the same speed Rachel had)\n    distance_between_cities = total_rachel_distance + (rachel_speed * eleanor_time)\n\n    return distance_between_cities\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(3):\n        result += int(\"4\" * (i + 1))\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25  # 1 US dollar = 1.25 Canadian dollars\n\n    us_dollars = canadian_dollars / exchange_rate\n\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back,\n    # then there must be 7 shelves before it and 9 shelves after it.\n    total_shelves = 7 + 1 + 9  # 1 is for the shelf the book is on.\n\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    for lowest_score in range(1, 100):\n        scores = set(range(lowest_score, lowest_score + 5))\n        if sum(scores) / len(scores) == 90:\n            return min(scores)\n    return None\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rope_a, rope_b, rope_c = symbols('rope_a rope_b rope_c')\n\n    equation1 = Eq(rope_a, 3 * rope_b)  # Rope A is 3 times Rope B\n    equation2 = Eq(rope_c, rope_b + 56) # Rope C is 56 cm longer than Rope B\n    equation3 = Eq(rope_a, rope_c + 130)  # Rope A is 130 cm (1 m 30 cm) longer than Rope C\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rope_a, rope_b, rope_c))\n    total_length = solutions[rope_a] + solutions[rope_b] + solutions[rope_c]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    ans = (2 * largest_number) - (3 * smallest_number)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    return 4.6 - 3.55\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_possible_strings = factorial(5) / factorial(5 - 3)\n    strings_with_AB = factorial(3) # Fix A and B, with one spot left for either C, D, or E\n    probability_AB_in_string = strings_with_AB / total_possible_strings\n    return probability_AB_in_string\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_male = 50\n    total_female = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n\n    student_males = (student_male_percentage / 100) * total_male\n    student_females = (student_female_percentage / 100) * total_female\n\n    total_students = student_males + student_females\n    total_members = total_male + total_female\n\n    student_percentage = (total_students / total_members) * 100\n\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300  # Total volume of the mixture\n    fruit_juice_1 = 0.35 * 200  # Amount of fruit juice in first punch bowl\n    fruit_juice_2 = 0.50 * 300  # Amount of fruit juice in second punch bowl\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2  # Total fruit juice in mixture\n    concentration = (total_fruit_juice / total_volume) * 100  # Percentage concentration of the mixture\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 48 * (3/4)\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_start = 37\n    john_start = 15\n    amy_give = (amy_start - john_start - 4) / 2\n    return int(amy_give)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers and y be the number of papers she can mark per hour originally\n    x, y = symbols('x y')\n    \n    # Original plan: mark x papers in 5 hours\n    original_plan = Eq(x, 5 * y)\n    \n    # After working one hour, remaining papers should be marked in 4 hours\n    # at a rate of (y + 6) papers per hour\n    revised_plan = Eq(x - y, 4 * (y + 6))\n    \n    # If she marks (y + 10) papers per hour, she can finish in 3 hours\n    faster_plan = Eq(x, 3 * (y + 10))\n    \n    # Solve the system of equations\n    solutions = solve((original_plan, revised_plan, faster_plan), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Number of pies of each type\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken_than_vegetable = more_chicken_than_vegetable / vegetable_pies\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable_than_fruit = less_vegetable_than_fruit / fruit_pies\n\n    return (fraction_more_chicken_than_vegetable, fraction_less_vegetable_than_fruit)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_bought = 32\n    markers_given_away = 7\n    markers_left = markers_bought - markers_given_away\n    bags = markers_left // 5\n    return bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    \n    sum_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_of_digits = 0\n    \n    # Loop over page numbers and calculate the sum of digits individually\n    for page_number in range(1, 208):\n        for digit in str(page_number):\n            sum_of_digits += int(digit)\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    \n    total_designs = made_designs / fraction_completed\n    \n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts spent and cost of each item\n    money_spent_initially, cost_cap, cost_wristband = symbols('money_spent cost_cap cost_wristband')\n\n    # Equation: 2/5 of his money spent on 4 caps and 6 wristbands\n    equation1 = Eq(money_spent_initially, 4*cost_cap + 6*cost_wristband)\n\n    # Relation: cost of each cap is 3 times the cost of each wristband\n    equation2 = Eq(cost_cap, 3*cost_wristband)\n    \n    # Solve the system to find cost_cap and cost_wristband\n    solutions = solve((equation1, equation2), (cost_cap, cost_wristband))\n    \n    # Now calculate the total number of caps. He initially bought 4 caps\n    caps_initially = 4\n\n    # He buys more caps with 1/3 of his remaining money, which is 3/5 of his initial money\n    # So, if cost_cap is the cost of a single cap, he can buy (3/5) * money_spent / cost_cap caps more\n    caps_more = (3/5) * money_spent_initially / solutions[cost_cap]\n\n    # Total caps bought\n    total_caps = caps_initially + caps_more\n\n    # Since Caleb can only buy an integer number of caps, we return the integer part of total_caps\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h_initial = 3000  # initial altitude in m\n    h_final = 2000  # final altitude in m\n    v_initial = 0  # initial velocity\n    \n    # Symbols\n    v_final = symbols('v_final')\n    \n    # Using conservation of energy: E_initial + Work = E_final\n    # Kinetic energy (E_k) = 1/2 * m * v^2\n    # Potential energy (E_p) = m * g * h\n    # Work done by gravity (W) = m * g * (h_final - h_initial)\n    # Assuming mass (m) is constant and cancels out from the equation:\n    # E_initial (all potential at h_initial) = E_final (kinetic + potential at h_final)\n    # m * g * h_initial = 1/2 * m * v_final^2 + m * g * h_final\n    \n    # We can set up the equation as follows (ignoring m as it cancels out):\n    equation = Eq(g * h_initial, 1/2 * v_final**2 + g * h_final)\n    \n    # Solve for v_final\n    solutions = solve(equation, v_final)\n    \n    # We only need the positive root, since velocity is a scalar quantity and we're interested in the magnitude of the final velocity\n    ans = max(solutions)\n    \n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 possible consecutive sequences in a suit: 1-2-3-4, 2-3-4-5, ..., 10-11-12-13.\n    # Since there are 4 suits, to avoid getting a consecutive sequence, we can draw at most\n    # 3 cards from each sequence group to avoid having a consecutive sequence.\n    # Therefore, the maximum number of cards we can draw without guaranteeing a consecutive 4-card hand is:\n    max_without_consecutive = 13 * 3  # 13 groups, 3 cards from each group\n    \n    # To ensure that we have a consecutive sequence, we need to draw one more card.\n    return max_without_consecutive + 1\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0245689', 7):\n        num = '3' + perm[0] + '1' + ''.join(perm[1:3]) + '7' + ''.join(perm[3:])\n        if all(int(num[:i]) % i == 0 for i in range(1, 11)):\n            other_letters = num[1] + num[3:6] + num[7:]\n            return tuple(map(int, other_letters))\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    num_pages = 89\n    actual_page_num = 1\n    count = 0\n\n    while count < num_pages:\n        count += 1\n        if count % 3 != 0:\n            actual_page_num += 1\n\n    return actual_page_num\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if 5 * adults + 3 * children == 75:\n            return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_multiples_3 = 600 // 3\n    count_multiples_5 = 600 // 5\n    count_multiples_15 = 600 // 15  # 15 is the LCM of 3 and 5\n\n    ans = count_multiples_3 + count_multiples_5 - count_multiples_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    # Tom will be 20 years old in 20 - 10 = 10 years\n    tom_age_difference = 20 - 10\n    \n    # Grandma will be 60 years old when Tom is 20\n    grandma_age_when_tom_is_20 = 60\n    \n    # Grandma's current age is her age when Tom is 20 minus the years until Tom is 20\n    grandma_current_age = grandma_age_when_tom_is_20 - tom_age_difference\n    \n    return grandma_current_age\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):  # Jeremy has 5 ten-pence coins, so range is from 0 to 5\n        for twenty_pence in range(4):  # Jeremy has 3 twenty-pence coins, so range is from 0 to 3\n            for fifty_pence in range(2):  # Jeremy has 1 fifty-pence coin, so it's either 0 or 1\n                total = 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence\n                if total == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Since there are only 2 colors, if we take 4 stickers, the worst-case scenario is that\n    # you get a combination of both red and green. However, to guarantee getting 2 stickers \n    # of the same color, at least one more sticker needs to be taken, i.e., a total of 4 stickers.\n    # By the pigeonhole principle, taking 4 stickers ensures that there are at least 2 of one color.\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Worst case scenario: Sheila takes out all the balls of the two colors first\n    # Since there are 5 blue balls, to ensure 4 of the same color, she could take all 4 orange and 2 yellow\n    # and still need one more, which will necessarily be blue, making a total of 4+2+1\n    max_orange_and_yellow = 4 + 2\n    # The next ball she takes out must be blue (since there are 5 blue balls)\n    additional_blue_ball = 1\n    # Total balls taken out\n    balls_to_take_out = max_orange_and_yellow + additional_blue_ball\n    return balls_to_take_out\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    baby_geese_legs = 2 * 2  # 2 baby geese with 2 legs each\n    # Let \"l\" be the number of lambs, each lamb has 4 legs\n    # Total legs equation: 4 * ducklings + 2 * baby_geese + 4 * lambs = 36\n    total_legs_of_birds = ducklings_legs + baby_geese_legs\n    lamb_legs = 36 - total_legs_of_birds  # Total legs minus legs of ducklings and baby geese\n    lambs = lamb_legs // 4  # Each lamb has 4 legs\n    \n    return lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    teams = 5\n    matches = (teams * (teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    boys_sweets = 2\n    girls_sweets = 4\n    total_sweets = 570\n\n    # Let the number of girls be g and the number of boys be 3g (since there are three times as many boys as girls).\n    # Then the total number of sweets is given by:\n    # Total sweets = boys_sweets * number_of_boys + girls_sweets * number_of_girls\n    # Total sweets = 2 * 3g + 4 * g\n    # 570 = 10g\n\n    # Solving for g\n    g = total_sweets / (boys_sweets * 3 + girls_sweets)\n    # Hence, the number of boys\n    number_of_boys = 3 * g\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(sorted(map(str, digits), reverse=True)))\n    smallest_num = int(''.join(sorted(map(str, digits))))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students in class B\n    x = symbols('x')\n    \n    # Equation representing the fact that if each student in class A gets 4 candies,\n    # 20 more candies are needed => 4*(2*x) = total_candies - 20\n    # Students in class A are twice those in B => 2*x students in class A\n    equation1 = Eq(4 * (2 * x), 'total_candies' - 20)\n    \n    # Equation representing that if each student in class B gets 6 candies,\n    # there will be 16 candies left => 6*x = total_candies - 16\n    equation2 = Eq(6 * x, 'total_candies' - 16)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), ('total_candies', x))\n    total_candies = solutions['total_candies']\n\n    return total_candies\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Calculate the total number of fruit boxes in the top 3 layers of a pyramid\n    # Layer 1 (top) will have 1^2 = 1 box\n    # Layer 2 will have 2^2 = 4 boxes\n    # Layer 3 will have 3^2 = 9 boxes\n    ans = 1**2 + 2**2 + 3**2\n    return ans\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_a = 600 * (3/5)\n    good_copies_needed_b = 600 * (2/5)\n\n    total_copies_a = good_copies_needed_a * (5/4)\n    total_copies_b = good_copies_needed_b * (6/5)\n\n    total_copies_needed = total_copies_a + total_copies_b\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_with_1 = 1.2 + 1.23 + 1\n    sum_without_1 = 1.2 + 1.23\n    ans = sum_with_1 * sum_with_1 - sum_with_1 * sum_without_1\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the rate of work of the farmer, and s be the rate of work of his son.\n    f, s = symbols('f s')\n\n    # The farmer can harvest the crops in 24 hours by himself, so his rate of work is 1/24\n    # If the farmer and his son work together, they complete the job in 16 hours.\n    # The son works for 6 hours, so he completes 6 * s part of the work.\n    # Together, they complete 1 full job: f * 16 + s * 6 = 1\n\n    # Writing the equation for both scenarios\n    equation1 = Eq(f, 1/24)\n    equation2 = Eq(f * 16 + s * 6, 1)\n\n    # Solve the system of equations for s\n    solutions = solve((equation1, equation2), (f, s))\n\n    # The son's rate of work is s. To find how many hours he takes, we calculate 1/s.\n    son_hours = 1 / solutions[s]\n\n    return son_hours\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    january_days = 31\n    \n    total_smiles_in_january = smiles_per_day * january_days\n    \n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = int(math.sqrt(num_students))\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_travel = initial_height + 2 * bounce_height\n    return total_travel\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "def solution():\n    from itertools import permutations\n    \n    children = ['Hugh', 'Louise', 'Richard', 'Child3', 'Child4']\n    total_permutations = list(permutations(children))\n    \n    count = 0\n    for perm in total_permutations:\n        if perm.index('Hugh') < perm.index('Louise') or perm.index('Hugh') > perm.index('Richard'):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from fractions import Fraction\n\n    matches_lost = 10\n    fraction_won = Fraction(2, 5)\n    fraction_drawn = Fraction(7, 20)\n\n    total_matches = matches_lost / (1 - (fraction_won + fraction_drawn))\n\n    points_won = total_matches * fraction_won * 3\n    points_drawn = total_matches * fraction_drawn * 1\n\n    total_points = points_won + points_drawn\n\n    return total_points\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    dividend = 9 * 4 + 2  # This computes Johnny's original division, 9 is quotient, 4 is divisor\n    return dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    series_sum = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    \n    return series_sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost_chocolate = 4 * 75\n    total_cost_pens = 3 * 95\n    total_cost_pence = total_cost_chocolate + total_cost_pens\n    \n    # Convert cost to pounds\n    total_cost_pounds = total_cost_pence / 100\n    \n    # Amount in pounds Anokhi gave\n    amount_given_pounds = 10\n    \n    # Calculate change\n    change = amount_given_pounds - total_cost_pounds\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    mean_all = 555\n    difference_means = 296\n\n    # Calculating the total sum of all numbers\n    total_sum = mean_all * total_numbers\n\n    # Let mean_last_5 be the mean of the last 5 numbers\n    mean_first_3 = (total_numbers * mean_all - 5 * (mean_all + difference_means)) / 3\n    mean_last_5 = mean_first_3 + difference_means\n\n    return mean_last_5\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    ans = len(range(start, end + 1, step))\n    return ans\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky = 99\n    timmy = symbols('timmy')\n\n    # Vicky has 3 less than 6 times as many stickers as Timmy\n    equation1 = Eq(vicky, 6 * timmy - 3)\n\n    # Solve for Timmy's stickers\n    timmy_stickers = solve(equation1, timmy)[0]\n\n    # Kevin has 32 more stickers than Timmy\n    kevin_stickers = timmy_stickers + 32\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    work_needed = initial_people * initial_days\n    additional_people = work_needed / target_days - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    \n    total_footballs = footballs_per_basket * number_of_baskets\n    \n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    children_in_front_of_pip = 2  # Pip is the 3rd, so 2 are in front of him\n    children_between_pip_and_bud = 5\n    pip_position = children_in_front_of_pip + 1  # Pip's position\n\n    bud_position_from_front = pip_position + children_between_pip_and_bud + 1\n    total_children = 20\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng.\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money.\n    rasidah_left = rasidah - (3/5)*rasidah\n    \n    # Chai Seng spent 6/7 of his money.\n    chai_seng_left = chai_seng - (6/7)*chai_seng\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah.\n    equation2 = Eq(chai_seng_left, (1/2)*rasidah_left)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    # Get the amount of money Rasidah had at first.\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years_ago = symbols('years_ago')\n    isaac_age_now = 53\n    mother_age_now = 81\n\n    equation = Eq((isaac_age_now - years_ago) / 3, mother_age_now - years_ago)\n\n    years_ago_solution = solve(equation, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_lb = 1 / 2.2\n    kg = pounds * kg_per_lb\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    # Define the custom operation\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    # Calculate (5 ⊕ 10)\n    first_part = custom_op(5, 10)\n\n    # Calculate (4 ⊕ 9)\n    second_part = custom_op(4, 9)\n\n    # Find the difference between the two parts\n    return first_part - second_part\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_gap = 500\n    \n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_gap / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    all_possible_numbers = list(permutations(digits, 3))\n    count = len(all_possible_numbers)\n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(1, 20):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n\n    consistent_second_difference = second_differences[0]\n\n    next_difference = differences[-1] + consistent_second_difference\n    next_number = 50 + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # Total possible arrangements of 5 distinct digits\n    total_arrangements = factorial(5)\n    \n    # Since we need to form even numbers, the last digit must be 2 or 4\n    even_last_digits = 2\n    \n    # Number of ways without restriction on the last digit\n    unrestricted_ways = total_arrangements // 5\n    \n    # Final answer is the number of even last digits times the unrestricted arrangements\n    ans = even_last_digits * unrestricted_ways\n    return ans\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):  # Tens digit must be between 1 and 9 for a 2-digit number\n        for ones_digit in range(10):  # Ones digit must be between 0 and 9\n            if tens_digit + ones_digit == 15:  # The sum should be 15\n                return tens_digit * 10 + ones_digit  # Return the 2-digit number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50\n    total_weight_final = 9 * 52\n    weight_of_extra_apple = total_weight_final - total_weight_initial\n\n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Only perfect squares will be toggled an odd number of times\n    # This is because they have an odd number of divisors\n    # And only lights that are toggled odd number of times will be on in the end\n\n    max_lamp_number = 250\n    sqrt_max_lamp = int(max_lamp_number ** 0.5)\n\n    # Count the number of perfect squares up to 250\n    count = 0\n    for i in range(1, sqrt_max_lamp + 1):\n        if i * i <= max_lamp_number:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(-x), 4)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of pages in the document.\n    p = symbols('p')\n\n    # Original rate: 50 pages per minute.\n    original_rate = 50\n\n    # New rate: Speed up by 20 more pages per minute.\n    new_rate = original_rate + 20 \n\n    # Time taken at the original rate.\n    original_time = p / original_rate\n\n    # Time taken at the new rate is 2 minutes less.\n    new_time = p / new_rate\n\n    # Set up the equation based on the fact that new_time is 2 minutes less than original_time.\n    equation = Eq(original_time - new_time, 2)\n\n    # Solve the equation to find the number of pages.\n    solution = solve(equation, p)\n\n    # The solution will be in a list, get the first (and only) element.\n    return solution[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    initial_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    \n    while True:\n        initial_date += one_year\n        # Leap year correction: If the year is a leap year, subtract one day\n        if initial_date.year % 4 == 0 and (initial_date.year % 100 != 0 or initial_date.year % 400 == 0):\n            initial_date -= one_day\n        if initial_date.weekday() == 0:  # Checks if the day is Monday (weekday 0)\n            break\n\n    return initial_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges - apples, 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    remainder = 7\n    quotient = 8\n    for divisor in range(1, remainder):\n        dividend = quotient * divisor + remainder\n        if dividend % divisor == remainder:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Time spent jogging: 7:30 am - 6:30 am = 1 hour\n    # Distance covered jogging = Speed * Time\n    jogging_distance = 6 * 1\n\n    # Time spent walking: 9:30 am - 7:30 am = 2 hours\n    # Distance covered walking = Speed * Time\n    walking_distance = 5 * 2\n\n    # Total distance traveled = jogging distance + walking distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saving_per_day = 1\n    total_days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_saved = saving_per_day * total_days_saved\n    remaining_amount = original_amount + amount_saved - lent_to_brother - spent_on_snacks\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_expressway / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount_rate = 10 / 100\n    number_of_members = 30\n\n    discounted_cost = normal_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / number_of_members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 80  # 80 cents for the first 15 minutes\n    additional_cost_per_minute = 5  # 5 cents for each additional minute\n    total_cost_in_cents = 140  # $1.4 is 140 cents\n\n    if total_cost_in_cents <= base_cost:\n        # No additional minutes charged\n        return 15\n    else:\n        # calculate additional minutes\n        additional_minutes = (total_cost_in_cents - base_cost) // additional_cost_per_minute\n        total_minutes = 15 + additional_minutes\n        return total_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of a number raised to a power repeats.\n    # The cycle of last digits for powers of 2 is 2, 4, 8, 6\n    # The cycle of last digits for powers of 3 is 3, 9, 7, 1\n    # The length of the cycle for both is 4, so the pattern repeats every 4 powers\n    # Since 2017 mod 4 is 1, we only need to find the first number in each cycle\n    \n    # The first number in the cycle for 2 is 2 and for 3 is 3\n    last_digit_2 = 2\n    last_digit_3 = 3\n\n    # Multiply the last digits of both numbers\n    last_digit_product = (last_digit_2 * last_digit_3) % 10  # Mod 10 gives the last digit\n\n    return last_digit_product\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x - 13, 55)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 3 + b % 3) * (a // 3 + b // 3)\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number\n    original_number = symbols('original_number')\n\n    # Construct the equation based on the operations performed by Sara\n    equation = Eq((original_number - 4) / 2 + 11, 37)\n\n    # Solve the equation to find the original number\n    solved_value = solve(equation, original_number)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    # The smallest multiple of 5 greater than or equal to 56\n    smallest = (56 + 4) // 5 * 5 if 56 % 5 != 0 else 56\n    # The largest multiple of 5 less than or equal to 120\n    largest = 120 // 5 * 5\n    # The number of multiples of 5 in this range\n    num_multiples = (largest - smallest) // 5 + 1\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when she was 35, which is 50 - 35 = 15 years ago from her 50th birthday on 10th May 2005.\n    gina_35_years_ago = 50 - 35\n    \n    # Date when Gina was 35.\n    year_when_gina_35 = 2005 - gina_35_years_ago\n\n    # James's age on 10th May 1997.\n    james_age_in_1997 = 20\n    \n    # James's birth year.\n    james_birth_year = 1997 - james_age_in_1997\n\n    # James's age when Gina was 35.\n    james_age_when_gina_35 = year_when_gina_35 - james_birth_year\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total = 2 + 1 / 2\n    quarters = total * 4\n    \n    return int(quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_pos = 5\n    eddie_pos = 9\n    people_between = 2\n\n    total_people = (lucy_pos - 1) + people_between + (eddie_pos - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    prime_numbers = [2, 3, 5, 7]\n    \n    for number in range(1, 3*5*7*8):\n        remainders = [number % 3, number % 5, number % 7, number % 8]\n        if sorted(remainders) == prime_numbers:\n            return number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to cm\n    dress_length_cm = 5 * 100 + 8    # Convert meters to cm\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm // 9\n    \n    # Convert cm to m and cm\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_cm_remainder = stripe_length_cm % 100\n    \n    return (stripe_length_m, stripe_length_cm_remainder)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    final_result = 35\n    initial_add = 4\n    multiply_factor = 7\n    subtract_amount = 21\n    \n    before_subtract = final_result + subtract_amount\n    before_multiply = before_subtract / multiply_factor\n    original_number = before_multiply - initial_add\n\n    return original_number\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # The ratio of the number of orchids to the number of tulips was 3:5\n    equation1 = Eq(orchids / tulips, 3 / 5)\n    \n    # Total number of flowers\n    equation2 = Eq(orchids + tulips + roses, 3616)\n    \n    # After 40% of the orchids, 1/5 of the tulips and 25% of the roses were sold\n    flowers_sold = 0.4 * orchids + (1/5) * tulips + 0.25 * roses\n    \n    # There were 2644 flowers left in the end\n    equation3 = Eq(orchids + tulips + roses - flowers_sold, 2644)\n    \n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n    \n    # Assuming the worst case where all right-handed pupils are boys first,\n    # any right-handed pupil above the count of (total_pupils - total_girls)\n    # should be a right-handed girl.\n    right_handed_girls_min = right_handed - (total_pupils - total_girls)\n    \n    # In case our assumption goes negative, the minimal count would be zero.\n    right_handed_girls_min = max(0, right_handed_girls_min)\n\n    return right_handed_girls_min\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    # Price of books and files\n    price_book = 12\n    price_file = 9\n\n    # Equations based on the given problem\n    equation1 = Eq(price_book * books + price_file * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digit_sum = sum(pow(i, 2013, 10) for i in range(1, 10))\n    return ones_digit_sum % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # To ensure that Peter gets two socks of the same colour in total darkness,\n    # he might pick one of each colour first (one red, one blue, and one black).\n    socks_picked = 3\n    # After that, the next sock he picks must be of the same colour as one he already has.\n    socks_picked += 1\n    return socks_picked\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    departure_hour_japan = 20  # 8 PM in 24-hour format\n    arrival_hour_france = 1   # 1 AM in 24-hour format\n    time_diff_japan_france = 7  # Japan is 7 hours ahead\n\n    # Calculate the time of arrival in Japan's timezone\n    arrival_hour_japan = arrival_hour_france + time_diff_japan_france\n\n    # Since the arrival in Japan's timezone is on the next day, we add 24 hours to it\n    if arrival_hour_japan < departure_hour_japan:\n        arrival_hour_japan += 24\n\n    # Calculate the flight duration\n    flight_duration = arrival_hour_japan - departure_hour_japan\n\n    return flight_duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    for i in range(1, 132):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    correct_score = 4\n    incorrect_penalty = -1\n    total_score = 168\n\n    # Let x be the number of correct answers.\n    # Then, the number of incorrect answers is (attempted - x).\n    # The total score is thus 4x - (attempted - x) = total_score.\n    # Simplified, we get 5x - attempted = total_score.\n\n    # Solving for x which gives the number of correct answers.\n    x = (total_score + attempted) / (correct_score - incorrect_penalty)\n    \n    return int(x)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the cost of one necklace and e be the cost of one earring\n    n, e = symbols('n e')\n\n    # Equation for the first scenario: 9 necklaces + 5 earrings = $1440\n    equation1 = Eq(9*n + 5*e, 1440)\n\n    # Equation for the second scenario: 2 necklaces + 3 earrings = $439\n    equation2 = Eq(2*n + 3*e, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, e))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[n] + solutions[e]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    # Eugene has 5 times as many coins as Sid initially\n    equation1 = Eq(eugene, 5 * sid)\n    # After using their coins, they have 51 coins left altogether\n    equation2 = Eq((eugene - 71) + (sid - 16), 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For a 2-digit number using 0, 1, and 2 (with repetition allowed),\n    # the first digit can be either 1 or 2 (since it can't be 0), and there are 2 possibilities.\n    first_digit_choices = 2\n    \n    # The second digit can be 0, 1 or 2, and there are 3 possibilities.\n    second_digit_choices = 3\n    \n    # Using the multiplication rule for counting (since the choices are independent),\n    # the total number of 2-digit numbers is the product of the number of choices for each digit.\n    total_numbers = first_digit_choices * second_digit_choices\n    \n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # Their sum is 5x + 20\n    # We also know that their sum is 200, so we can set up the equation 5x + 20 = 200\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 20, 200)\n    smallest_number = solve(equation, x)[0]\n\n    return smallest_number\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the variable\n    x = symbols('x')\n    \n    # initial amounts of sugar in each container\n    sugar_A = 50 * 0.1\n    sugar_B = 30 * 0.2\n    \n    # new amounts of sugar after the transfer\n    sugar_A_new = sugar_A - 0.1 * x + 0.2 * x\n    sugar_B_new = sugar_B + 0.1 * x - 0.2 * x\n    \n    # new total quantities of solution after transfer\n    water_A_new = 50 - x\n    water_B_new = 30 + x\n    \n    # set up the equation for equal concentration\n    equation = Eq(sugar_A_new / water_A_new, sugar_B_new / water_B_new)\n    \n    # solve the equation\n    sol = solve(equation, x)\n    \n    # return the solution, which is the volume of sugar solution transferred\n    return sol[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    result = 0\n    numerator = 100\n    denominator = 97\n    while denominator >= 1:\n        result += numerator / denominator\n        numerator *= (denominator - 2)\n        denominator -= 3\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Time taken to make one cut\n    time_per_cut = 8 / (5 - 1)  # 5 sections require 4 cuts\n    \n    # Time taken to make 6 cuts\n    time_for_6_cuts = time_per_cut * 6\n    \n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    current_votes_peter = 35\n    # Peter needs more than half of the votes to win\n    required_votes_peter = total_votes // 2 + 1\n    # Calculate how many more votes Peter needs\n    more_votes_needed = required_votes_peter - current_votes_peter\n    return more_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    units = [num % 10 for num in numbers]\n    max_unit_value = max(units)\n    index_of_max_unit = units.index(max_unit_value)\n    ans = numbers[index_of_max_unit]\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # Let's denote the number of 5p, 10p and 20p coins as n.\n    # Hence, the total amount in the money box can be represented by:\n    # (5p * n) + (10p * n) + (20p * n) = 490p\n    # Simplifying, it becomes:\n    # 35n = 490\n    # Now solve for n.\n    n = 490 / 35\n\n    # The total number of coins is three times n, as there are an equal number of each type of coin.\n    total_coins = 3 * n\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # Total days\n    total_sweets = 135  # Total number of sweets eaten in 9 days\n    d = 3  # Common difference (3 more sweets each day)\n\n    # Sum of arithmetic sequence formula: S = n/2 * (2a + (n - 1) * d), where S = total_sweets, a = first_term\n    # We need to find the first term a first.\n    # Rearrange the formula to solve for a:\n    # a = (S * 2 / n - (n - 1) * d) / 2\n    \n    a = (total_sweets * 2 / n - (n - 1) * d) / 2\n\n    # Now we can find the last day's number of sweets, which is the nth term of the sequence.\n    # nth term of arithmetic sequence formula: a_n = a + (n - 1) * d\n    \n    last_day_sweets = a + (n - 1) * d\n\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_percentage = 10 / 100\n    dvd_percentage = 20 / 100\n    \n    money_spent_on_book = initial_amount * book_percentage\n    money_left_after_book = initial_amount - money_spent_on_book\n    \n    money_spent_on_dvd = money_left_after_book * dvd_percentage\n    money_left = money_left_after_book - money_spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # in dollars\n    gift_cost = 20  # in dollars\n    remaining_money = total_money - gift_cost  # in dollars\n\n    return remaining_money * 100  # convert dollars to cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * (1 + rate) ** time\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    # Calculate the number of digits for pages 1-9, 10-99, 100-185\n    single_digit_pages = 9\n    double_digit_pages = 99 - 10 + 1\n    triple_digit_pages = 185 - 100 + 1\n    \n    total_digits = (single_digit_pages * 1) + (double_digit_pages * 2) + (triple_digit_pages * 3)\n    \n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10 / 100 \n\n    pay_rise_amount = annual_salary * pay_rise_percentage\n    new_annual_salary = annual_salary + pay_rise_amount\n\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # Months range from 1 to 12.\n        for day in range(1, 32):  # Days range from 1 to 31.\n            if month * 31 + day * 12 == 376:\n                # Formatting day and month to match \"ddmm\" format.\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # Using the distributive property to solve the equation for the missing number.\n    left_side = 4.08 * 20\n    known_term = 1.08 * 20\n    \n    # Subtract the known term from the left side to find the missing term times 20\n    missing_term_times_20 = left_side - known_term\n    \n    # Since the missing term is multiplied by 20, divide by 20 to find the missing term\n    missing_term = missing_term_times_20 / 20\n    \n    return missing_term\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    for i in range(119, 98, -2):\n        if i % 4 == 3:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    num_cookers = 16\n    total_cost = price_per_cooker * num_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 0.30  # in pounds (30p)\n\n    # Discounts\n    discount_calculator = 1/4  # 25%\n    discount_protractor = 1/2  # 50%\n\n    # Sale prices\n    sale_price_calculator = calculator_price * (1 - discount_calculator)\n    sale_price_protractor = protractor_price * (1 - discount_protractor)\n\n    # Quantity bought\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total cost\n    total_cost = (sale_price_calculator * calculators_bought) + (sale_price_protractor * protractors_bought)\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 25 / 40\n    milk_needed = 80 * flour_ratio\n    return milk_needed\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x be the age of the older elephant.\n    # Then, when the younger elephant grows up to the older elephant's current age,\n    # the difference in their ages will remain the same.\n\n    younger_age_now = 18\n    older_age_future = 62\n\n    # When the younger elephant is as old as the older one is now, the younger one will be x years old,\n    # and the older one will be x + (x - younger_age_now) = older_age_future.\n\n    # So we have the equation: x + (x - 18) = 62\n    # 2x - 18 = 62\n    # 2x = 62 + 18\n    # 2x = 80\n    # x = 80 / 2\n    # x = 40\n\n    older_age_now = (older_age_future + younger_age_now) // 2\n\n    ans = older_age_now\n    return ans\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    rate_oxen_27 = 27\n    time_oxen_27 = 6\n    work_done = rate_oxen_27 * time_oxen_27\n\n    rate_oxen_23 = 23\n    time_oxen_23 = 9\n    # Since the work done is constant, we create an equation for 23 oxen\n    # work_done = rate_oxen_23 * time_oxen_23\n    work_done_equal = rate_oxen_23 * time_oxen_23\n    # Work done by both groups of oxen should be equal, so we assert equality\n    assert work_done == work_done_equal\n\n    # Now we find out how long 21 oxen would take\n    rate_oxen_21 = 21\n    # Since work_done = rate_oxen_21 * time_oxen_21, we solve for time_oxen_21\n    time_oxen_21 = work_done / rate_oxen_21\n\n    return time_oxen_21\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2/3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # The time Ellen spends riding a bike\n    bike_time_hours = 1  # from 7:30 am to 8:30 am\n\n    # The speed at which she rides\n    bike_speed_mph = 10\n\n    # Distance covered on bike\n    bike_distance = bike_time_hours * bike_speed_mph\n\n    # The time Ellen spends on the train\n    train_time_hours = 2  # from 8:30 am to 10:30 am\n\n    # The speed of the train\n    train_speed_mph = 50\n\n    # Distance covered on train\n    train_distance = train_time_hours * train_speed_mph\n\n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # We use the stars and bars theorem approach for distributing n identical objects into r distinct boxes.\n    n = 5  # Number of balls\n    r = 3  # Number of boxes\n    \n    # Stars and Bars Theorem: The number of ways to distribute n identical objects into r distinct boxes is:\n    # (n + r - 1) choose (r - 1), which is equivalent to (n + r - 1) choose n.\n    from math import comb\n    ans = comb(n + r - 1, n)\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    total = blue + red + green\n    \n    equation = Eq(total, 112)\n    solutions = solve(equation, blue)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "import math\n\ndef solution():\n    total_letters = len('TEENAGE')  # Total number of letters in the word\n    e_count = 'TEENAGE'.count('E')  # Number of times 'E' appears in the word\n\n    # Calculating the factorial of total letters and 'E'\n    total_permutations = math.factorial(total_letters)\n    e_permutations = math.factorial(e_count)\n\n    # Dividing the total permutations by 'E' permutations to get arrangements\n    arrangements = total_permutations // e_permutations\n\n    return arrangements\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from front to back, hence there are 2 students in front of him.\n    rows_front_of_lucas = 2\n\n    # Lucas is 2nd from back to front, hence there is 1 student behind him.\n    rows_behind_of_lucas = 1\n\n    # Total number of rows from front to back is 3 (counting Lucas).\n    total_rows = rows_front_of_lucas + rows_behind_of_lucas + 1\n    \n    # Lucas is 4th from left to right, hence there are 3 students to the left of him.\n    columns_left_of_lucas = 3\n\n    # Lucas is 3rd from right to left, hence there are 2 students to the right of him.\n    columns_right_of_lucas = 2\n\n    # Total number of columns from left to right is 5 (counting Lucas).\n    total_columns = columns_left_of_lucas + columns_right_of_lucas + 1\n    \n    # Total number of students in the rectangular array is the product of rows and columns\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n    \n    # Ema spent 1/4 of her money\n    ema_left = ema - ema / 4\n    \n    # Keng Wee spent 4/7 of his money\n    keng_wee_left = keng_wee - (4 * keng_wee) / 7\n    \n    # In the end, Keng Wee and Ema had the same amount of money left\n    equation2 = Eq(ema_left, keng_wee_left)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 216\n    while True:\n        number += 1\n        if sum(map(int, str(number))) == 9:\n            return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n    \n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is the 3rd from the front and 2nd from the back in his row.\n    # This means there are 3 + 2 - 1 people in his row, since Lucas is counted twice.\n    students_in_row = 3 + 2 - 1\n    \n    # Lucas is the 4th from left and 3rd from right in his column.\n    # This means there are 4 + 3 - 1 people in his column, since Lucas is counted twice.\n    students_in_column = 4 + 3 - 1\n    \n    # Total number of students is number of students in a row times number of students in a column.\n    total_students = students_in_row * students_in_column\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys', integer=True)\n    \n    # Original ratio of girls to boys\n    equation1 = Eq(girls, (9/11) * boys)\n    \n    # After transferring 2 girls in, the ratio changes\n    equation2 = Eq(girls + 2, (10/11) * boys)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (girls, boys))\n\n    # Total number of students after 2 girls transferred in\n    total_students = solution[girls] + 2 + solution[boys]\n    \n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(1 + sum(2 * (n - k) / n for k in range(n)) for n in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    simplified_expr = 2*x - y\n\n    solutions = solve(equation, (x, y))\n\n    return simplified_expr.subs(solutions)\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost = (3 * 31) + (2 * 17) + 78 + (105)\n    change = 500 - total_cost\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n    \n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    total_tiles = 390\n    \n    # Let x be the number of tiles Mr Tan has.\n    # Then, Mr Lim has 5 * x tiles.\n    # Combined, they have (x + 5x) tiles, which equals 390.\n    # Solving for x gives us the number of tiles Mr Tan has.\n    x = total_tiles / 6\n    \n    # Mr Lim has 5 times the number of tiles.\n    mr_lim_tiles = 5 * x\n    \n    # The difference in the number of tiles they have.\n    tile_difference = mr_lim_tiles - x\n    \n    return int(tile_difference)\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    zehan_current = symbols('zehan_current')\n    equation = Eq(zehan_current + 12, 3 * zehan_current)\n    \n    zehan_age = solve(equation, zehan_current)\n\n    return zehan_age[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Calculate the number of ways to choose exactly one from A, B, or C\n    ways_to_choose_one_of_ABC = comb(3, 1)\n    # Calculate the number of ways to choose the remaining 4 students from the other 12 students (excluding A, B, and C)\n    ways_to_choose_remaining_students = comb(12, 4)\n    # Calculate the total number of ways\n    total_ways = ways_to_choose_one_of_ABC * ways_to_choose_remaining_students\n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    cost_per_ticket = total_cost / number_of_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio  # Total ratio = Savannah's ratio + Shaila's ratio\n\n    total_sweets = (shaila_sweets * total_ratio) // shaila_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for savings\n    savings = symbols('savings')\n    \n    # Kim gave 1/3 of her savings to her mother\n    mother_share = (1/3) * savings\n    \n    # Kim bought dresses for £177 and earrings for £129\n    expenses = 177 + 129\n    \n    # The amount of money left was 50% of what she gave her mother\n    # money_left = savings - mother_share - expenses\n    # money_left = 0.5 * mother_share\n    # savings - (1/3)*savings - expenses = (1/3)*savings * 0.5\n    # savings - expenses = (1/3)*savings * 1.5\n    # savings - (1/3)*savings * 1.5 = expenses\n    # savings * (1 - (1/3) * 1.5) = expenses\n    # savings * (1 - 0.5) = expenses\n    # savings * 0.5 = expenses\n    \n    equation = Eq(savings * 0.5, expenses)\n    \n    # Solve for the savings\n    solution = solve(equation, savings)\n    \n    # Get the value\n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # increased by 30%\n    time_delay = 9 / 60  # 9 minutes converted to hours\n\n    # The time it takes to travel at the increased speed is the usual time minus the delay\n    # usual_time = distance / usual_speed\n    # increased_time = distance / increased_speed\n    # increased_time = usual_time - time_delay\n    # (distance / increased_speed) = (distance / usual_speed) - time_delay\n    # Solving for distance gives:\n    distance = (usual_speed * increased_speed * time_delay) / (increased_speed - usual_speed)\n    \n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num = symbols('num')\n    \n    equation = Eq(((num + 8) * 8 - 8) / 8, 80)\n    \n    solution = solve(equation, num)\n    \n    return solution[0]\n  \nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial amount of lemon juice in the bottle\n    # Let y be the initial amount of water in the bottle\n    x, y = symbols('x y')\n    \n    # Original ratio is 2 parts lemon juice to 3 parts water\n    original_ratio_eq = Eq(x / y, 2/3)\n    \n    # After adding 80ml of lemon juice, the new ratio is 6 parts lemon juice to 5 parts water\n    new_ratio_eq = Eq((x + 80) / y, 6/5)\n    \n    # Since the amount of water is not changing, we can equate the two water parts to find y\n    y_value = solve(original_ratio_eq, y)[0]\n\n    # Substitute y in the new ratio equation to solve for x\n    final_eq = new_ratio_eq.subs(y, y_value)\n    \n    # Solve for x (the amount of lemon juice initially in the bottle)\n    x_value = solve(final_eq, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    # Let x be the original speed in meters per minute\n    # Let t be the original time in minutes\n    x, t = symbols('x t')\n\n    # First condition: increasing speed by 25% decreases time by 20 minutes\n    # (x + 0.25x)(t - 20) = xt\n    # 1.25x * t - 25x - 0.25x * 20 = xt\n    # 1.25 * t - 25 - 0.25 * 20 = t\n    # 1.25 * t - 30 = t\n    # 0.25 * t = 30\n    # t = 120\n\n    # Second condition: decreasing speed by 45 m/min increases time by 75%\n    # (x - 45)(t + 0.75t) = xt\n    # (x - 45) * 1.75t = xt\n    # 1.75xt - 45 * 1.75t = xt\n    # 45 * 1.75t = 0.75xt\n    # 45 * 1.75 = 0.75x\n    # x = (45 * 1.75) / 0.75\n    # x = 45 * 2.333...\n    # x = 105\n\n    # Calculate the distance\n    # Distance = speed * time\n    # d = xt\n    # d = 105 * 120\n\n    t = 120\n    x = (45 * 1.75) / 0.75\n    distance = x * t\n\n    return distance\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if 2 * red_ropes + 3 * blue_ropes == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    total_second_half = average_second_half * 6  # 6 months in the second half of the year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / 12  # 12 months in a year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    child = 1\n    while True:\n        if child % 7 == 0 and child % 9 == 2:\n            break\n        child += 1\n    return child\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22//2+1):\n        if 22 - i != i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n    return total_used\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors = [x for x in range(1, 42) if 41 % x == 0]\n    A = max(factors) * (41 // max(factors) + 1)\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21  # height of the television\n    ratio_height = 3  # height ratio\n    ratio_width = 4  # width ratio\n\n    width = (height / ratio_height) * ratio_width  # calculate width based on the height and the ratio\n\n    perimeter = 2 * (height + width)  # calculate perimeter\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= (i + 1) / i\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # According to the problem, we have:\n    # y - x = 36 (difference between the numbers)\n    # x + y = 98 (sum of the numbers)\n    # From these equations, we can derive:\n    # x = (98 - 36) / 2\n    x = (98 - 36) / 2\n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n\n    ans = bags * pens_per_bag\n\n    return ans\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = pow(4, 100, 10)\n    last_digit_7 = pow(7, 100, 10)\n    last_digit_9 = pow(9, 100, 10)\n    last_digit_11 = pow(11, 100, 10)\n    ans = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    return ans\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    wrong_marks = -1\n    total_score = 78\n\n    correct_questions = total_questions * correct_percentage\n    wrong_questions = total_questions - correct_questions\n\n    # Let's set up the equation for the total score:\n    # correct_marks * correct_questions + wrong_marks * wrong_questions = total_score\n    # We know the values for correct_marks, wrong_marks, and total_score.\n    # We also know that wrong_questions = total_questions - correct_questions\n    # So we can find the correct_questions using the equation below:\n    # correct_marks * correct_questions + wrong_marks * (total_questions - correct_questions) = total_score\n    # correct_questions = (total_score - wrong_marks * total_questions) / (correct_marks - wrong_marks)\n\n    correct_questions = (total_score - wrong_marks * total_questions) / (\n        correct_marks - wrong_marks\n    )\n\n    return int(correct_questions)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given the cost of 6 files and 10 rulers is $40.\n    # Let the cost of one file be f and the cost of one ruler be r.\n    # We have the equation: 6f + 10r = 40\n    # We need to find the cost of 9 files and 15 rulers.\n    # This is a linear equation with a direct proportion.\n    # If we multiply the number of files and the number of rulers by 1.5,\n    # the total cost should also be multiplied by 1.5.\n    # Therefore, the cost of 9 files and 15 rulers is 40 * 1.5 = $60.\n\n    cost_of_6_files_and_10_rulers = 40\n    multiplier = 1.5  # (9/6) or (15/10) both are 1.5 times \n    cost_of_9_files_and_15_rulers = cost_of_6_files_and_10_rulers * multiplier\n    \n    return cost_of_9_files_and_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let jessie's money be x\n    # Then John's money will be 5/13 * x\n    jessie, john = symbols('jessie john')\n    \n    # Jessie transfers $600 to John\n    # John's new amount is then (5/13 * jessie) + 600\n    # Jessie's new amount is jessie - 600\n    # According to the problem, John's new amount is 50% of Jessie's new amount\n    equation1 = Eq(john, (5/13) * jessie + 600)\n    equation2 = Eq(john, 0.5 * (jessie - 600))\n    \n    # Solve the equations for jessie and john\n    solutions = solve((equation1, equation2), (jessie, john))\n    \n    # Calculate the total amount of money they had originally\n    total_money = solutions[jessie] + (5/13 * solutions[jessie])\n    \n    return total_money\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_in = datetime.strptime('10:30', '%H:%M')\n    time_out = datetime.strptime('11:00', '%H:%M')\n    time_baked = time_out - time_in\n    return time_baked.seconds // 60\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t represent the number of T-shirts and c represent the number of caps\n    t, c = symbols('t c')\n\n    # Equations based on the problem statement\n    equation1 = Eq(t/c, 8/5)  # ratio of T-shirts to caps\n    equation2 = Eq(3*t/4 + 5*c/5, 132)  # total amount collected from selling\n\n    # Because T-shirts and caps have to be whole numbers, we check multiples of 8 and 5 (t and c respectively)\n    # until the second equation is satisfied.\n    t_value, c_value = 0, 0\n    for t_multiple in range(1, 1000):  # Assuming there won't be 1000 T-shirts\n        for c_multiple in range(1, 1000):  # Assuming there won't be 1000 caps\n            t_value = 8 * t_multiple  # 8 parts of the ratio\n            c_value = 5 * c_multiple  # 5 parts of the ratio\n            if 3 * t_value / 4 + c_value == 132:  # Checking the total amount collected\n                return t_value\n\n    return None\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = 3 * 12 + 5 * 11  # bananas cost + apples cost in pence\n    paid = 200  # £2 in pence\n    change = paid - total_cost  # change in pence\n\n    return change / 100  # convert pence to pounds\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n\n    harvir_age = youngest_age + age_difference * (number_of_siblings - 1)\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    price_calendar = 6.97\n    price_ball = 2.99\n    total_spent = price_calendar + price_ball\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left = 360 / 1000  # converting grams to kilograms\n    flour_used = (1/5) + (1/2)  # flour used for muffins and cookies in kilograms\n    initial_flour = flour_used + flour_left  # total flour she had at first in kilograms\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    oranges_price = 26  # price of one orange in pence\n    lemons_price = 30   # price of one lemon in pence\n    total_spent = 500   # amount spent by Gordon in pence (£5 = 500p)\n\n    # limit for the number of fruits to check based on the total amount spent\n    max_oranges = total_spent // oranges_price\n    max_lemons = total_spent // lemons_price\n    \n    for oranges in range(max_oranges + 1):\n        for lemons in range(max_lemons + 1):\n            if (oranges * oranges_price) + (lemons * lemons_price) == total_spent:\n                return oranges + lemons\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Start with the assumption that N is at least two digits since 1 is used 15 times\n    # and 2 is used less frequently. Analyze the count of digits when numbers are written\n    # in sequence: 1-9, 10-19, 20-29, ..., 90-99, 100-199, 200-299, and so on.\n\n    # From 1 to 9, 1 is used once and 2 is used once.\n    # From 10 to 19, 1 is used 11 times (10 ones and the ten's place in all numbers).\n    # From 20 to 29, 2 is used 11 times (10 ones and the ten's place in 20).\n    \n    # Since 1 is used 15 times, let's add count of ones for tens.\n    # Counting the ones:\n    total_ones = 1  # From 1 to 9\n    total_twos = 1  # From 1 to 9\n    N = 9  # Starting number\n\n    # Add for double digits from 10-19, and 20-29\n    total_ones += 11  # From 10 to 19\n    total_twos += 10  # From 20 to 29\n    N = 29  # Reached 29\n\n    # Check if additional tens place is needed for ones or twos\n    # Increment in blocks of tens\n    # For every ten numbers, ones increase by 1 and twos increase by 1\n    while total_ones < 15 or total_twos < 14:\n        N += 10  # Check the next ten block\n        total_ones += 1\n        total_twos += 1\n\n    # Ones have reached the limit, roll back to the last number with 14 ones\n    # Since we exceed by counting tens, we check for the precise number where ones count is 15.\n    # Due to the last increment where it exceeded, we should substract that increment.\n    if total_ones > 15:\n        N -= 10\n        total_ones -= 1\n\n    # Find the exact number where the 15th one appears\n    while total_ones < 15:\n        N += 1\n        if '1' in str(N):\n            total_ones += str(N).count('1')\n\n    # Counter for 2s might not have reached 14 when 1s have already reached 15, if that's the case, keep going\n    while total_twos < 14:\n        N += 1\n        if '2' in str(N):\n            total_twos += str(N).count('2')\n\n    return N\n\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # Since the sitting arrangement is circular, we fix one person's position\n    # and then arrange the remaining (4 - 1) people around them.\n    num_people = 4\n    num_orders = factorial(num_people - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    # Define the new operations according to the rules\n    def delta_op(a, b):\n        return 3 * a + 2 * b\n\n    def star_op(a, b):\n        return 3 * a - 2 * b\n\n    # Perform the given calculations step by step\n    delta_result = delta_op(3, 4)\n    star_result = star_op(delta_result, 5)\n    final_result = delta_op(star_result, 6)\n\n    return final_result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = -(-total_cookies // cookies_per_box)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for male and female visitors\n    male, female = symbols('male female')\n\n    # Equation for the first day\n    equation1 = Eq(male, female + 450)\n\n    # Equations for the second day\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male, female))\n\n    # Total visitors on the first day\n    total_first_day = solutions[male] + solutions[female]\n\n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo - jason, 220)  # Leo had $220 more than Jason initially\n    equation2 = Eq(jason, 2 * (leo + 180) - 1100)  # Now, Jason has 2 times as much money as Leo\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    biographies = 3\n    sci_fi = 4\n    magazines = 2\n    schoolbooks = 2\n    # Calculate permutations of all books divided by permutations of each type of book\n    num_ways = factorial(total_books) // (factorial(biographies) * factorial(sci_fi) * factorial(magazines) * factorial(schoolbooks))\n    return num_ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    # Create a list of all digits\n    digits = '0123456789'\n    # Permute all digits to see which permutation satisfies the condition\n    for p in permutations(digits, 5):\n        # Convert the tuple to an integer\n        E, F, C, B, H = p\n        if E != '0':  # Ensure the leftmost digit isn't zero\n            EFCBH = int(\"\".join(p))\n            return EFCBH  # Return the valid number\n    return None  # In case there is no solution\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # The problem is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 7, where x1, x2, x3 are non-negative integers.\n    # This is a problem of distributing n identical items into r distinct groups.\n    # The formula for this is C(n + r - 1, r - 1) where C is the combination function.\n\n    from math import comb\n    \n    n = 7  # number of identical pencils\n    r = 3  # number of identical pencil cases\n    ans = comb(n + r - 1, r - 1)\n\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    decrement = 9\n    \n    while start_number >= 0:\n        last_positive_number = start_number\n        start_number -= decrement\n\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6  # 3 million pounds\n    num_friends = 5\n    \n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let's denote x as the number of children who bought shirts with their names\n    # And y as the number of children who bought regular shirts without their names\n    # We know the total number of children (x + y = 50)\n    # We also know the total amount paid by the children (10y + 15x = 555)\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 50)  # The total number of children\n    equation2 = Eq(10*y + 15*x, 555)  # The total amount paid\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    # First part before speed increase\n    speed_initial = 150  # in metres per minute\n    time_initial = 10    # in minutes\n    \n    # Second part after speed increase\n    speed_final = 150 + 50  # in metres per minute\n    \n    # Distance travelled before speed increase\n    distance_initial = speed_initial * time_initial  # in metres\n    \n    # Total distance\n    total_distance = 3700  # in metres\n    \n    # Distance travelled after speed increase\n    distance_final = total_distance - distance_initial  # in metres\n    \n    # Time spent walking after speed increase\n    time_final = distance_final / speed_final  # in minutes\n    \n    # Total time spent walking\n    total_time = time_initial + time_final\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first, female_first = symbols('male_first female_first')\n    equation1 = Eq(male_first, female_first + 450)\n    female_second = female_first * 1.15\n    male_second = male_first * 0.82\n    equation2 = Eq(female_second + male_second, 1354)\n\n    solutions = solve((equation1, equation2), (male_first, female_first))\n\n    return solutions[male_first]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead, when it's 05:00 in Singapore, it's 22:00 of the previous day in London.\n    # Saying the plane landed at 11:00 in London, we calculate the time difference.\n    \n    # Time converted to 24 hour format for the departure from Singapore\n    singapore_departure = 5  # 05:00\n\n    # Since it's the previous day in London, we add 24 hours to represent the time properly\n    london_departure = 22  # 22:00 the previous day\n\n    # Time when the plane landed in London\n    london_arrival = 11  # 11:00\n\n    # Calculate the flight duration\n    flight_duration = (london_arrival + 24) - singapore_departure\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards to arrange\n    ways_to_arrange = factorial(total_cards)  # Total permutations of all cards\n    ways_to_arrange //= (factorial(4) * factorial(3) * factorial(7))  # Divide by permutations of indistinguishable cards\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5 is 0, but since it is a phone number, it should be 5.\n    first_digit = 5\n\n    # Second digit: the smallest odd number among the natural numbers is 1.\n    second_digit = 1\n\n    # Third digit: in a single digit, the largest odd number is 9.\n    third_digit = 9\n\n    # Fourth place: in nature, the smallest even number is 2.\n    fourth_digit = 2\n\n    # Fifth digit: the largest single digit that is a multiple of 2 is 8.\n    fifth_digit = 8\n\n    # Sixth digit: the smallest odd number greater than 1 in nature is 3.\n    sixth_digit = 3\n\n    # Seventh digit: The number must be a multiple of 2 and 5, the lowest such single digit is 0.\n    seventh_digit = 0\n\n    # Construct the final result as an integer\n    ans = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    \n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    # The sequence of pages read forms an arithmetic progression\n    # a = first term (20 pages on the first day)\n    # d = common difference (5 more pages each day)\n    a, d = 20, 5\n\n    # The sequence can be expressed in terms of n, the total number of days read\n    # Sn = n/2 [2a + (n - 1)d], where Sn is the sum of the arithmetic sequence\n    # Since we know the last term is \"remaining 80 pages\", we can write the sum till last day as:\n    # Sn = a + (a + d) + (a + 2d) + ... + 80\n    # We need to find the total pages read, which is the sum of the arithmetic sequence\n\n    # Calculate the last term 'l' of the arithmetic progression using the second to the last term 'l - d = a + (n - 2)d'\n    # Then, we can find 'n' (number of days), and use the formula for Sn to find the total pages in the book\n\n    # Finding 'l'\n    last_term = second_to_last_term = 80 - d  # The last term but one (second last term)\n\n    # Express 'l' in the form 'a + (n - 2)d'\n    l = a + (second_to_last_term - a)  # This simplifies the expression, getting rid of 'n'\n\n    # Now find the term number 'n' for the second to last term 'l - d'\n    n = ((second_to_last_term - a) / d) + 1  # '+1' because the sequence starts from the first term 'a'\n\n    # Add one more day for the last term (80 pages)\n    n += 1\n\n    # Calculate the total number of pages in the book\n    Sn = (n / 2) * (2 * a + (n - 1) * d)\n\n    return int(Sn)\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's calculation: Correct step would be to multiply quotient (9) by divisor (4), then add the remainder (2)\n    correct_calculation = 9 * 4 + 2\n\n    # Check if Johnny's answer is equal to the correct calculation\n    incorrect_answer = 22  # Johnny's answer\n\n    if incorrect_answer == correct_calculation:\n        # Johnny's answer is correct\n        return True, correct_calculation\n    else:\n        # Johnny's answer is not correct\n        return False, correct_calculation\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    # Alternating addition and subtraction of even numbers from 54 down to 2\n    # Since the pattern is +, -, +, -,... starting with + and the terms are even,\n    # we can group each positive and negative pair and subtract them.\n    # Pair: (54, -50), (52, -46), ..., (4, -2)\n    # The difference between the numbers in each pair is constant (4).\n    \n    # Calculate the sum of the series by folding pairs and summing\n    ans = sum((first - (first - 4)) for first in range(54, 2, -4))\n\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:  # 'S' and 'G' cannot be zero as they are the first digits.\n            continue\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        ogams = o * 10000 + g * 1000 + a * 100 + m * 10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = Eq(40 - boys)\n\n    boys_bags = 4 * boys\n    girls_bags = 3 * (40 - boys)\n\n    equation = Eq(boys_bags - girls_bags, 62)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the part that has been cut\n    cut_part = symbols('cut_part')\n    \n    # Create the equation based on the given problem\n    equation = Eq((65 - cut_part), 3 * (29 - cut_part))\n    \n    # Solve the equation for the cut_part\n    cut_solution = solve(equation, cut_part)\n    \n    return cut_solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    \n    expected_number_of_5s = total_rolls * probability_of_5\n    \n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12/18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # Ratio A:B is 2:3\n    equation1 = Eq(A/B, 2/3)\n    \n    # Ratio B:C is 6:5\n    equation2 = Eq(B/C, 6/5)\n    \n    # Average of A, B, C is 45, so sum is 3 * 45\n    equation3 = Eq(A + B + C, 45 * 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(6 * (7*x) + 3 * 35, 441)\n\n    dress_cost = solve(total_cost, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]\n    count = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The pattern shows that the sum of fractions 1/(n(n+1)) from n=1 to n=k is k/(k+1).\n    # Thus, it is evident that if we sum up the fractions 1/(n(n+1)) from n=1 to n=2011,\n    # the result will be 2011/(2011+1) which simplifies to 2011/2012.\n    # Therefore, k must be 2011.\n\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time it takes for the lazy one to paint the house alone be L days.\n    lazy = symbols('lazy')\n\n    # The energetic one can paint the house in 12 days.\n    energetic_rate = 1 / 12\n\n    # Working together, they can paint the house in 8 days.\n    together_rate = 1 / 8\n\n    # The rate at which the lazy one works is 1/L per day.\n    # The sum of their individual rates should equal the rate at which they work together.\n    equation = Eq((1 / lazy) + energetic_rate, together_rate)\n\n    # Solve the equation to find the rate of the lazy one.\n    lazy_days = solve(equation, lazy)[0]\n\n    return lazy_days\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let the original length be l and width be w\n    # The new length will be l+12\n    # Perimeter of the new rectangle = 2 * (l + 12) + 2w = 38\n    # Simplified: l + 12 + w = 19\n    # Therefore, the perimeter of the original rectangle = 2l + 2w\n    # We need to express l in terms of w and then calculate the original perimeter\n\n    from sympy import symbols, Eq, solve\n    \n    l, w = symbols('l w')\n    equation = Eq(l + 12 + w, 19)\n    \n    # Solve for l in terms of w\n    solution = solve(equation, l)\n    \n    # Substitute l from the solution in the original perimeter formula\n    original_perimeter = 2 * solution[0] + 2 * w\n    \n    # But we know that adding 12 to length and keeping the width the same results in perimeter of 38\n    # And original_perimeter + 24 (because we increase length by 12, so overall perimeter increase by 24) = 38\n    equation2 = Eq(original_perimeter + 24, 38)\n    \n    # Now solve for w\n    solution_w = solve(equation2, w)\n\n    # Calculate original perimeter with the found width\n    original_perimeter_value = original_perimeter.subs(w, solution_w[0])\n\n    return original_perimeter_value\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) / nell_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 4) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stamps Jamie-Anne and Natasha have\n    J, N = symbols('J N')\n\n    # Equation based on the ratio 5:3\n    equation1 = Eq(J, 5/3 * N)\n\n    # Equation based on the difference in the number of stamps\n    equation2 = Eq(J - N, 18)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (J, N))\n\n    # The total number of stamps\n    total_stamps = solutions[J] + solutions[N]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero since it is the first digit\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    total_coins = 234\n\n    # Sana had 8 times as many coins as Mina\n    equation1 = Eq(sana, 8 * mina)\n\n    # Total amount of coins\n    equation2 = Eq(sana + mina, total_coins)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina gave away 12 coins\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * 3 / 7\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = remainder_after_monday * 3 / 8\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    grapes_per_bag = 3 / 4\n    number_of_bags = remainder_after_tuesday / grapes_per_bag\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n\n    total_flour = flour_per_student * number_of_students\n\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300  # £3.00 is 300 pence\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Number of lamp posts Uncle Sam cycles past from the first to the eleventh\n    lamp_posts_passed = 11 - 1  # We subtract 1 because the first lamp post is the starting point\n    \n    # Time Uncle Sam takes to cycle from the first lamp post to the eleventh\n    time_taken = 50\n    \n    # Average time Uncle Sam takes to cycle past one lamp post\n    average_time_per_lamp_post = time_taken / lamp_posts_passed\n    \n    # Time given to find out how many lamp posts will he cycle past\n    given_time = 80\n    \n    # Calculating the number of lamp posts he will cycle past after 80 seconds\n    # We add 1 at the end because the starting lamp post is also counted\n    total_lamp_posts = (given_time / average_time_per_lamp_post) + 1\n    \n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # 6 flowers on each side, but the corners are counted twice (once for each side they belong to)\n    # We have 4 corners, which means 4 flowers are counted twice\n    total_corner_flowers = 4\n    double_counted = total_corner_flowers * 2 \n\n    # Calculate flowers per side, excluding the corners \n    # Double counting will be subtracted\n    flowers_per_side = 6 - 2 # Each side has one flower at each end, which are corners and counted already\n\n    # Four sides in total; thus multiply the number of flowers per side by 4\n    total_flowers_per_side = flowers_per_side * 4\n\n    # Add the double-counted corner flowers back\n    total_flowers = total_flowers_per_side + double_counted\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_items = symbols('total_items')\n\n    # Create the equations based on the problem statement\n    # 2/3 of total are apples, 1/9 of total are bananas\n    apples = 2 / 3 * total_items\n    bananas = 1 / 9 * total_items\n    lemons = total_items - apples - bananas  # The rest are lemons\n\n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation\n    solutions = solve(equation, total_items)\n\n    # The number of lemons she bought\n    num_lemons = lemons.subs(total_items, solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20  # original price is $80 plus the $20 discount\n    discount = 20  # discount given on the original price\n    percent_discount = (discount / original_price) * 100  # calculating the discount percentage\n    return percent_discount\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Digit in the hundreds place has a value of 800, which is 8\n    hundreds = 8\n    # The digit in the ones place is the sum of all the factors of 4\n    # Factors of 4 are 1, 2, 4\n    ones = sum([1, 2, 4])\n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands = hundreds + 1\n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place\n    tens = abs(hundreds - ones)\n    # Since we are looking for a 5-digit number between 40000 and 50000, the digit in the ten thousands place is 4\n    ten_thousands = 4\n    \n    # Constructing the number from the individual digits\n    number = ten_thousands * 10000 + thousands * 1000 + hundreds * 100 + tens * 10 + ones\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    extra_length = 56\n\n    football_field_length = basketball_court_length + extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = original_price - 67.50\n    ana_discount_percentage = (ana_discount / original_price) * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    left = Fraction(3, 10)\n    right = Fraction(5, 16)\n    s = 1\n    \n    while True:\n        r = (left * s).numerator  # numerator of left when s is the denominator\n        if left < Fraction(r, s) < right:\n            break\n        s += 1\n    \n    return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total = total_two_days / (5/6)\n    return int(total)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_children = 40\n    total_capacity_adults = 24\n    children_on_bus = 15\n\n    adult_space_left = (total_capacity_children - children_on_bus) * (total_capacity_adults / total_capacity_children)\n\n    return int(adult_space_left)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # We need to find the smallest k such that 28 * k is a square number\n    # This is equivalent to finding the smallest k such that the prime factorization of 28 * k\n    # contains only even powers.\n    \n    # Prime factorization of 28 is 2^2 * 7\n    # To make it a perfect square, we need to multiply 28 by 7 (to make the power of 7 even)\n    \n    # The greatest common divisor of 28 and the perfect square will be 1 if it's the smallest k\n    \n    k = 7\n    while gcd(28, k) != 1:\n        k += 1\n\n    return k\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    total_minutes = 12\n    pancakes_per_minute = pancakes_per_3_minutes / 3\n\n    total_pancakes = pancakes_per_minute * total_minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n\n    min_students_same_size = (num_students // num_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    \n    inner_triangle = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner_triangle)\n    \n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    equation = Eq(salary - 740 - 3/4 * (salary - 740), 1/5 * salary)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    russell = symbols('russell')\n    equation = Eq(russell + 32, 4 * (russell - 16))\n    russell_age = solve(equation, russell)\n    \n    return russell_age[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for n in range(1, 50):  # Assume the number of people is less than 50 for practicality\n        if (19 - 6) % n == n / 2:\n            return n\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10): # A cannot be 0 because it's the thousands' digit\n        for B in range(0, 10):\n            for C in range(0, 10):\n                pip_number = int(f\"{A}{B}{C}{A}\")\n                bud_number = int(f\"{A}{C}{B}{A}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of students in 6A, y be in 6B\n    x, y = symbols('x y')\n    \n    # x was 4/9 of y initially\n    initial_condition = Eq(x, 4*y/9)\n    \n    # After reshuffling, they are equal with transfer of students\n    final_condition = Eq(x - 3 + 18, y + 3 - 18)\n    \n    # Solve the simultaneous equations\n    students = solve((initial_condition, final_condition), (x, y))\n    \n    return students[x]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make one cut. To get 5 pieces,\n    # you need to make 4 cuts because the first piece is\n    # obtained after the first cut, and each subsequent cut\n    # yields one additional piece.\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Assuming all 15 shelves could potentially have spelling books at 9 each\n    max_spelling_books = 15 * 9\n    # Number of shelves that do not have spelling books\n    not_spelling_shelves = (max_spelling_books - 72) / 9\n    # As each such shelf must have 4 math books instead\n    math_books = not_spelling_shelves * 4\n    return int(math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey takes 6 minutes to walk from the first to the fourth floor, covering 3 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals_to_fourth = 3\n    time_to_fourth = 6\n    \n    # To go to the tenth floor from the first, Jeffrey needs to cover 9 intervals (1 to 2, 2 to 3,..., 9 to 10)\n    intervals_to_tenth = 9\n    \n    # The time to walk each interval is the same, so we scale up the time linearly\n    time_per_interval = time_to_fourth / intervals_to_fourth\n    time_to_tenth = time_per_interval * intervals_to_tenth\n\n    return time_to_tenth\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_available = 75\n    \n    chocolate_required = (chocolate_original * biscuits_available) / biscuits_original\n    \n    return chocolate_required\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2*5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    number_of_days_in_week = 7\n    \n    total_weekly_earnings = average_daily_earnings * number_of_days_in_week\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    ans = pasta_choices * sauce_choices * topping_choices\n    return ans\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if (32 / n) == (n / 2):\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Initially, the 8th student is opposite to the 16th student,\n    # which implies they are separated by half the number of students on the circle.\n    initial_students = 16 - 8\n\n    # Now, after more students join, the 8th student is opposite to the 22nd student.\n    # Again, they are separated by half the number of students on the circle.\n    final_students = 22 - 8\n\n    # The difference in the number of students is the number of new students joined.\n    new_students = final_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # First part of the race\n    distance_1 = 280\n    speed_1 = 7\n    time_1 = distance_1 / speed_1\n\n    # Second part of the race\n    distance_2 = 400\n    speed_2 = 5\n    time_2 = distance_2 / speed_2\n\n    # Third part of the race\n    distance_3 = 800 - (distance_1 + distance_2)\n    speed_3 = 8\n    time_3 = distance_3 / speed_3\n\n    # Total time\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has after all the exchanges\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equation 1: Sum of marbles after all the exchanges\n    total_marbles = Eq(anna + betsy + charlene, 168)\n\n    # Equation 2: Ratio of marbles after all exchanges: anna:betsy:charlene = 2:5:7\n    ratio = Eq(anna/betsy, 2/5) & Eq(betsy/charlene, 5/7)\n\n    # Equation 3: Charlene gave 15 marbles to Betsy\n    charlene_to_betsy = Eq(charlene - betsy, 15)\n\n    # Equation 4: Betsy gave 8 marbles to Anna\n    betsy_to_anna = Eq(betsy - anna, 8 + 15) # Betsy had 15 more marbles from Charlene\n\n    # Solve the system of equations for anna, betsy, charlene\n    solutions = solve((total_marbles, ratio, charlene_to_betsy, betsy_to_anna), (anna, betsy, charlene))\n\n    # Betsy's marbles at first before giving 8 to Anna\n    betsy_initial = solutions[betsy] + 8\n    return betsy_initial\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9 * 6) - (7 * 6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Yellow + Red + Green cards\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Initial Ratio\n    equation1 = Eq(lollipops / gum_drops, 5/7)\n\n    # New Ratio after adding candies\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n\n    total_candies_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n\n    return total_candies_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 269):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    width = 136  # converted to cm for easier calculation\n    height = 80  # converted to cm\n    \n    square_side = gcd(width, height)  # the largest square side possible\n    num_squares = (width // square_side) * (height // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    \n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [4, 5, 7]:\n                if (hundreds * 100 + tens * 10 + ones) % 2 != 0:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    multiple_of_5 = (200 // 5)\n    multiple_of_7 = (200 // 7)\n    multiple_of_35 = (200 // (5*7))\n\n    ans = multiple_of_5 + multiple_of_7 - multiple_of_35\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    chris_eq = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    dylan_eq = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    prices = solve((chris_eq, dylan_eq), (durian, pineapple, watermelon))\n\n    return prices[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Let there be n teams in the league.\n    # If each team plays every other team twice, there would be n(n-1) matches, since each pair of teams plays two matches.\n    # But this count includes each match twice (once from the perspective of each team), so we divide by 2.\n    # Therefore, the total number of matches in the season is given by: n(n-1)/2\n    # We need to find the positive integer solution for n(n-1)/2 = 30\n\n    matches = 30\n    for n in range(1, matches * 2):\n        if (n * (n - 1)) // 2 == matches:\n            return n\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 2 == 0:  # even number\n            ans += i\n        else:  # odd number\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(135, 1350):  # the true value must be between 135 and 1350 since we missed a tens place 0\n        if (i - 135) == (i * 10):\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    capacity = 5\n    # One trip can take up to 5 students to the other side,\n    # but one student must row back the boat, except for the last trip.\n    # Thus, each trip effectively transports 4 students, except the last one,\n    # which transports 5.\n    # The last trip doesn't need to return the boat.\n    \n    trips = (students - capacity) // (capacity - 1)  # Each trip moves (capacity - 1) because one has to return\n    remaining_students = (students - capacity) % (capacity - 1)\n    \n    # Add trips: +1 for the first trip, +1 for the last trip and +1 for each return trip\n    if remaining_students > 0:\n        trips += 3  # One to take the remaining students, one to return and one to take the boat back.\n    else:\n        trips += 2  # One to return with the boat, one to take the boat back.\n    \n    return trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise\n    # According to the inclusion-exclusion principle:\n    # total_A = 0.8 * x (students choosing A)\n    # total_B = 0.35 * x (students choosing B)\n    # neither = 0.1 * x (students choosing neither)\n    # both = 75 (students choosing both A and B)\n    # We use the principle that total_A + total_B - both + neither = x\n\n    both = 75\n    neither_percentage = 10 / 100  # converting to a fraction\n\n    # Rearrange the equation to solve for x:\n    # x = (total_A + total_B - both + neither)\n    # Where neither = 0.1 * x\n    # And since total_A and total_B include the students choosing both, we can express it as follows:\n    # x = 0.8 * x + 0.35 * x - both + (neither_percentage * x)\n    # Combine like terms\n    # x * (1 - (0.8 + 0.35 - neither_percentage)) = both\n    # solving for x:\n    x = both / (1 - (0.8 + 0.35 - neither_percentage))\n\n    return int(x)\n\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ans = 3 * 100 + 2 * 10 + 7\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n\n    def factor_count(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    # List of numbers with unique factor counts (which the two students are able to identify)\n    unique_factor_counts = {number for number in range(1, 14) if list(range(1, 14)).count(factor_count(number)) == 1}\n\n    # Generate all possible 9-number combinations from the 13 numbers\n    all_combinations = list(combinations(range(1, 14), 9))\n\n    # List to store valid combinations according to the unique factor counts and the students' statements\n    valid_combinations = []\n\n    # Iterate over each combination and apply the conditions\n    for combo in all_combinations:\n        factors_combo = [factor_count(n) for n in combo]\n        # Check if only two students know their factor count (i.e., two unique factor counts)\n        if sum([factors_combo.count(factor_count(num)) == 1 for num in combo]) == 2:\n            for alice in combo:\n                # Alice's number must be odd\n                if alice % 2 != 0:\n                    # May's number is smaller than Alice's by 2\n                    if (alice - 2) in combo:\n                        # Mark's number is smaller than May's by 1\n                        # Since May is Alice - 2, Mark is Alice - 3\n                        if (alice - 3) in combo:\n                            valid_combinations.append(combo)\n\n    # Assuming there's only one valid combination\n    final_valid_combo = valid_combinations[0]\n    remaining_numbers = [num for num in range(1, 14) if num not in final_valid_combo]\n\n    # The product of the four numbers that were not picked\n    product = 1\n    for num in remaining_numbers:\n        product *= num\n\n    return product\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = 100 / (1 + 1/99)\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Frank, Alex, and Paul's ages\n    Frank, Alex, Paul = symbols('Frank Alex Paul')\n\n    # Equation 1: Frank is older than Alex by the same amount Alex is older than Paul\n    equation1 = Eq(Frank - Alex, Alex - Paul)\n    # Equation 2: The sum of their ages is 99\n    equation2 = Eq(Frank + Alex + Paul, 99)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Frank, Alex, Paul))\n    \n    return solutions[Alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    import itertools\n    \n    digits = [1, 4, 6, 9]\n    permutation_list = list(itertools.permutations(digits))\n    sum_of_numbers = sum(int(''.join(map(str, perm))) for perm in permutation_list)\n    average = sum_of_numbers / len(permutation_list)\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initially, the number of boys and girls is the same\n    equation1 = Eq(boys, girls)\n    \n    # After 60 boys and 12 girls left, twice as many girls as boys remained\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    # Assuming 3-digit even number, hundreds place is greatest 1-digit number (9)\n    hundreds_place = 9\n    \n    # Loop through possible tens and ones places which are different and add up to 15\n    for tens in range(1, 10):\n        for ones in range(1, 10):\n            if tens != ones and tens + ones == 15 and hundreds_place != tens and hundreds_place != ones and ones % 2 == 0:\n                # Construct the number and return\n                return hundreds_place * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls fill 1 jug\n    bowls_per_jug = 3\n    \n    # 2 jugs fill 1 pail\n    jugs_per_pail = 2\n    \n    # Bowls needed to fill 1 pail\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    \n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # van speed in km/hour\n    speed_car = 120  # car speed in km/hour\n    time_difference = 3  # time difference in hours\n\n    # The van travels for 3 more hours than the car, at a speed of 80 km/h\n    distance_van_travels_in_3_hours = speed_van * time_difference\n\n    # Relative speed of the car with respect to the van is the difference\n    # in their speeds because they are moving in the same direction.\n    relative_speed = speed_car - speed_van \n\n    # Time needed for the car to catch up to the van is the distance the van\n    # traveled in the 3 hours lead time divided by the relative speed.\n    time_to_catch_up = distance_van_travels_in_3_hours / relative_speed\n\n    # Mason's answer is not correct, the correct answer should be calculated\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from math import comb\n\ndef solution():\n    # Wendy can choose to wear a hat or not, so there are 5 choices (4 hats + the choice of no hat)\n    hats = 5  # 4 hats + 1 option of no hat\n    shirts = 3  # 3 shirts\n    pants = 2  # 2 pairs of pants\n    skirt = 1  # 1 skirt\n    \n    # Since shirts, pants, and skirts are not optional, Wendy can form combinations by multiplying the options\n    # The Law of Multiplication is used here\n    \n    ans = hats * shirts * pants * skirt\n    return ans\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # We convert the repeating decimals to fractions.\n    # 0.010101... = 1/99\n    # The product of the fractions is (1/99)*(1/99) = 1/9801\n    # Since 9801 = 99*99, the number of digits in one repetend of the product\n    # is the same as the number of digits in 99, which is 2.\n    return 2\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's rate per minute is 300 pages / 12 minutes\n    rate_a = 300 / 12\n    # Printer B's rate per minute is 300 pages / 10 minutes\n    rate_b = 300 / 10\n    # Both printers combined rate per minute\n    rate_combined = rate_a + rate_b\n    # Convert half an hour to minutes\n    half_hour_in_minutes = 30\n    # Calculate the number of pages printed in half an hour by both printers\n    pages_printed = rate_combined * half_hour_in_minutes\n    return int(pages_printed)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of items bought\n    x = symbols('x')\n\n    # 2/3 of the items are apples\n    apples = (2/3) * x\n    # 1/9 of the items are bananas\n    bananas = (1/9) * x\n    # the rest are lemons\n    lemons = x - apples - bananas\n    \n    # She bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for x\n    x_val = solve(equation, x)\n    \n    # Find the number of lemons\n    num_lemons = lemons.subs(x, x_val[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count_3 = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:  # February has 28 days in 2019 (not a leap year)\n                continue\n            if month in [4, 6, 9, 11] and day > 30:  # April, June, September, November have 30 days\n                continue\n            date_string = f\"{day:02d}/{month:02d}/2019\"\n            count_3 += date_string.count('3')\n    return count_3\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n\n    eq1 = Eq(durian / chocolate, 3 / 4)\n    eq2 = Eq(chocolate / strawberry, 4 / 2)\n    eq3 = Eq(5 * durian + 3 * chocolate + 4 * strawberry, 560)\n\n    solutions = solve((eq1, eq2, eq3), (durian, chocolate, strawberry))\n\n    return solutions[durian] * 5\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the levels at which each person stays\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n\n    # Define the conditions as equations\n    conditions = [\n        A > C,        # A stays on a higher level than C but lower than D\n        A < D,\n        B < Xavier,   # B stays on a lower level than Xavier\n        D == 5*Yvonne,  # D stays on a level that is 5 times that of Yvonne\n        Zachary + 2 - Xavier == Zachary - Waylon,  # If Zachary moves up two levels, the difference with Xavier equals the difference with Waylon\n        Zachary == Yvonne + Xavier, # The level Zachary stays is the sum of the levels of Yvonne and Xavier\n    ]\n\n    # Define the range for each level within the apartment block (1 to 18)\n    levels_range = (A > 0, A <= 18, B > 0, B <= 18, C > 0, C <= 18, D > 0, D <= 18, \n                    Zachary > 0, Zachary <= 18, Yvonne > 0, Yvonne <= 18,\n                    Xavier > 0, Xavier <= 18, Waylon > 0, Waylon <= 18)\n\n    # Solve the series of equations\n    solutions = solve(conditions + levels_range, (A, B, C, D, Zachary, Yvonne, Xavier, Waylon))\n    \n    # The solution is a list of dictionaries. We need to find the one that fits the logical conditions\n    for sol in solutions:\n        if all(map(lambda x: 0 < x <= 18, sol.values())):\n            return sol[A]\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # There will be exactly 8 cubes with 3 faces painted,\n    # which are the corner cubes of the cuboid.\n    # Since the cuboid is 7x5x14 and it's cut into 490 cubes,\n    # each small cube will be 1x1x1 in size.\n    # The corners don't change position regardless of the number of cuts,\n    # so there are always 8 corners/cubes with 3 faces painted.\n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    # We need to find a two-digit number such that swapping its digits results in a number that is three more than one third of the original.\n    # Let the original number be 10x + y, where x is the tens digit and y is the ones digit, x and y must be between 1 and 9 (inclusive) because we are looking for a two-digit number.\n    for x in range(1, 10):\n        for y in range(1, 10):\n            original_number = 10 * x + y\n            swapped_number = 10 * y + x\n            if swapped_number == (original_number // 3) + 3 and original_number % 3 == 0:  # Check if the conditions are met\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191\n    rate_second_period = 1.166\n    \n    # Calculate compounded interest for the first period\n    amount_after_first_period = principal * rate_first_period\n    \n    # Calculate compounded interest for the second period\n    final_amount = amount_after_first_period * rate_second_period\n    \n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a raisin roll and a donut\n    raisin_roll_price, donut_price = symbols('raisin_roll_price donut_price')\n\n    # Given equations\n    # 5 raisin rolls + 6 donuts = $14.70\n    # 1 raisin roll = 3 donuts\n    equation1 = Eq(5 * raisin_roll_price + 6 * donut_price, 14.70)\n    equation2 = Eq(raisin_roll_price, 3 * donut_price)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (raisin_roll_price, donut_price))\n\n    # Get the price of a raisin roll\n    return solutions[raisin_roll_price]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n    \n    # Calculate the GCD of the first two schools\n    gcd_12 = gcd(students_school_1, students_school_2)\n    \n    # Calculate the GCD of the first result with the third school\n    gcd_all = gcd(gcd_12, students_school_3)\n    \n    return gcd_all\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let's denote the first term of the sequence as a1, and the common difference as d.\n    a1, d = symbols('a1 d')\n\n    # The sum of the first n terms in an arithmetic sequence can be calculated using the formula Sn = n/2 * (2a1 + (n - 1)d)\n    # For the sum of the first 9 terms, we get 99 = 9/2 * (2a1 + 8d)\n    equation1 = Eq(9 / 2 * (2 * a1 + 8 * d), 99)\n\n    # For the sum of the first 27 terms, we get 540 = 27/2 * (2a1 + 26d)\n    equation2 = Eq(27 / 2 * (2 * a1 + 26 * d), 540)\n\n    # Solving the system of equations to find a1 and d\n    solutions = solve((equation1, equation2), (a1, d))\n\n    # Get the values for a1 and d\n    a1_value = solutions[a1]\n    d_value = solutions[d]\n\n    # Now we calculate the sum of the first 16 terms using the values of a1 and d\n    S16 = 16 / 2 * (2 * a1_value + (16 - 1) * d_value)\n\n    return S16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    # Loop through all 3-digit numbers\n    for number in range(100, 1000):\n        hundreds = number // 100\n        tens = (number // 10) % 10\n        units = number % 10\n        \n        # Avoid dividing by zero\n        if tens == 0 or units == 0:\n            continue\n        \n        # Check if the hundreds digit is divisible by both tens and units digit\n        if hundreds % tens == 0 and hundreds % units == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # The list to contain the sequence\n    sequence = []\n    \n    # Populate the sequence with the pattern\n    for i in range(1, 13):\n        sequence.extend([i] * i)\n    \n    # Calculate and return the median of the sequence\n    n = len(sequence)\n    sequence.sort()\n    \n    if n % 2 == 0:\n        med = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n    else:\n        med = sequence[n // 2]\n    \n    return med\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    total_loafs = 24\n    cups_needed = total_loafs / loafs_per_cup\n    \n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digits = 9 - 7 + 1\n    double_digits = 40 - 10 + 1\n    return single_digits + 2 * double_digits\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Number of games in group stage for one group of 4 teams\n    n_teams_in_group = 4\n    games_in_single_group = n_teams_in_group * (n_teams_in_group - 1) // 2\n\n    # Total number of groups\n    n_groups = 8\n\n    # Total games in group stage for all groups\n    total_group_games = games_in_single_group * n_groups\n\n    # Number of games in knockout rounds\n    # round of sweet 16, quarter-finals, semi-finals, third place playoff, and final\n    knockout_rounds_games = 16 - 1 + 8 - 1 + 4 - 1 + 2 - 1 + 1\n\n    # Total games in the world cup\n    total_games = total_group_games + knockout_rounds_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4  # red light flashes per minute\n    green_flash_rate = 6  # green light flashes per minute\n\n    # Find least common multiple to determine when they flash together in a minute\n    flash_together_rate = lcm(red_flash_rate, green_flash_rate)\n\n    # Number of times they flash together in an hour\n    times_in_hour = 60 // flash_together_rate\n\n    # Include the first and the last time\n    ans = times_in_hour + 1  \n\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    tripled_number = 22 - 1  # Subtract 1 from the resulting number\n    original_number = tripled_number / 3  # Divide by 3 to find the original number\n    return original_number\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)\n    landscapes_french = 25\n    french_paintings = 40\n    still_lives_french = french_paintings - landscapes_french\n    still_lives = total_paintings - landscapes\n    still_lives_not_french = still_lives - still_lives_french\n\n    return still_lives_not_french\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of the rose drink\n    max_volume_per_glass = total_volume // 9  # Greatest volume of drink in each glass\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_rice_weight = (100 * 0.5) + (400 * 0.8)\n    total_mixture_weight = 100 + 400\n    concentration_of_rice = (total_rice_weight / total_mixture_weight) * 100\n    return concentration_of_rice\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    sum_last_five_digits = 0\n    for i in range(1, 2018):\n        sum_last_five_digits += int('2' * i)\n        sum_last_five_digits %= 100000  # Keep only the last 5 digits\n\n    return sum_last_five_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # Total amount of hay required for 12 horses for 15 days\n    total_hay_for_12_horses = 12 * 15\n    # Hay required for 1 horse for 15 days (Unitary Method)\n    hay_for_1_horse = total_hay_for_12_horses / 12\n    # Total hay can feed 20 horses for x days\n    # x = hay for 1 horse / 20\n    days_for_20_horses = hay_for_1_horse / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):  # Alice's house number is a 4-digit number\n        first_digit = i // 1000\n        remaining_number = i % 1000\n        new_number = remaining_number * 10 + first_digit\n        if new_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Define current ages\n    oliver_age_now = 20\n    lin_age_now = 26\n    \n    # Define combined age at some point in the future\n    combined_age_future = 48\n    \n    # Define a variable for the number of years into the future we're looking (x)\n    # At that future point, Oliver's age will be oliver_age_now + x\n    # and Lin's age will be lin_age_now + x\n    # The sum of their ages at that point will be:\n    # oliver_age_now + x + lin_age_now + x = combined_age_future\n    # Simplifying the equation:\n    # 2x = combined_age_future - (oliver_age_now + lin_age_now)\n    # Solving for x:\n    x = (combined_age_future - (oliver_age_now + lin_age_now)) // 2\n    \n    return x\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    differences = [abs(1 - num) for num in numbers]\n    closest_index = differences.index(min(differences))\n    return numbers[closest_index]\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # Initialize the smallest multiple to 35, as the number must be a multiple of 35\n    smallest_multiple = 35\n    \n    # Create a loop that will increase the multiple and check the conditions\n    while True:\n        # Convert the current multiple to a string\n        multiple_str = str(smallest_multiple)\n        \n        # Check if the number ends with '35'\n        if multiple_str.endswith('35'):\n            # Calculate the sum of all digits\n            digits_sum = sum(int(digit) for digit in multiple_str)\n            \n            # Check if the sum of digits is 35\n            if digits_sum == 35:\n                break\n                \n        # Increase the multiple by 35 to get the next multiple\n        smallest_multiple += 35\n    \n    # Return the smallest multiple we have found\n    return smallest_multiple\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    \n    # Total initially is 8y\n    total = 8 * y\n\n    # Money spent on watch and handbag\n    spent = 4 * y + 20\n\n    # Money given to each child\n    per_child = y - 5\n\n    # Total given to children\n    given_to_children = 2 * per_child\n\n    # Setting up the equation\n    equation = Eq(total, spent + given_to_children)\n\n    # Solving for y\n    solved_value = solve(equation, y)\n    \n    return solved_value[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    # Define a function to check if a year is a leap year\n    def is_leap_year(year):\n        # Return True if a year is divisible by 4, but not on a century unless it is divisible by 400\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    \n    # Initialize the total number of days\n    total_days = 0\n    \n    # Loop through each year from 1901 to 1999\n    for year in range(1901, 2000):\n        if is_leap_year(year):\n            # Add 366 days for a leap year\n            total_days += 366\n        else:\n            # Add 365 days for a common year\n            total_days += 365\n    \n    # Add the days for the year 2000 (leap year)\n    total_days += 366\n    \n    # Return the total number of days\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    starting_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    balance = starting_amount\n\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Odd days (deposit days)\n            balance += deposit_amount\n        else:  # Even days (spend days)\n            balance -= spend_amount\n\n    return balance\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99\n    count_divisible_by_3 = total_numbers // 3\n    count_divisible_by_7 = total_numbers // 7\n    count_divisible_by_both = total_numbers // (3 * 7)\n\n    count_not_divisible_by_3_or_7 = total_numbers - (count_divisible_by_3 + count_divisible_by_7 - count_divisible_by_both)\n    return count_not_divisible_by_3_or_7\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # number of strikes for each hour from 1 to 12 is an arithmetic sequence: 1, 2, 3, ..., 12\n    # Sum of the terms in an arithmetic sequence can be calculated by the formula:\n    # Sum = n/2 * (first_term + last_term), where n is the number of terms\n\n    first_term = 1  # The first hour strike\n    last_term = 12  # The last hour strike\n    n = 12  # Number of hours\n\n    sum_of_strikes = (n / 2) * (first_term + last_term)\n\n    return int(sum_of_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    value_per_coin = 10  # value of one ten-pence coin in pence\n    total_coins = total_value / value_per_coin  # total number of ten-pence coins\n\n    total_weight = weight_per_coin * total_coins  # total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Nina has more buttons than James\n    # When Nina gave 4 of her buttons to James, they have the same number of buttons\n    equation1 = Eq(nina - 4, james + 4)\n    # Total number of buttons together is 22\n    equation2 = Eq(james + nina, 22)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    marks_correct = 5\n    marks_wrong = -2\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * marks_correct) + (wrong_answers * marks_wrong)\n        \n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    adults = (ratio_adults * total_people) / total_ratio\n    return adults\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # Initial speed in meters per second\n    angle = 37  # Angle in degrees\n    g = 9.81  # Acceleration due to gravity in meters per second squared\n\n    # Convert angle to radians for calculation\n    theta_radians = math.radians(angle)\n\n    # Calculate vertical component of the initial velocity\n    initial_speed_y = initial_speed * math.sin(theta_radians)\n\n    # Use kinematic equation to calculate maximum height: (v^2 = u^2 + 2as)\n    # Since final vertical velocity (v) is 0 at the maximum height,\n    # we have 0 = initial_speed_y^2 + 2*(-g)*height,\n    # which gives height = (initial_speed_y^2) / (2*g)\n    height = (initial_speed_y**2) / (2*g)\n\n    # Calculate the distance along the ramp\n    # height = distance * sin(theta), thus distance = height / sin(theta)\n    distance = height / math.sin(theta_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_child = (start_seat + total_candies - 1) % total_children\n    # If the remainder is 0, the last candy goes to the 9th child\n    if last_child == 0:\n        return total_children\n    return last_child\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n\n    # Create two equations based on the given information\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Number of balls for each color\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n    \n    # The worst case scenario is when Sheila pulls out all balls except for two types of balls that are required to be in the groups of 4.\n    # As she needs 2 groups of 4 balls of the same color, the worst case would be taking out:\n    # - all yellow balls (the smallest group, to maximize the number taken out)\n    # - then, all orange balls (except for the last one to make a group of 4)\n    # - finally, she would take out enough blue balls to make a group of 4.\n    # At this point, there would be at least 4 orange balls and 4 blue balls.\n    \n    # Number of balls Sheila must take out to ensure 2 groups of 4:\n    balls_taken = yellow_balls + (orange_balls - 1) + (blue_balls - 4 + 1)\n\n    return balls_taken\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    total_players = 64\n    players_per_match = 4\n\n    matches_required = (total_players - 1) // (players_per_match - 1)\n\n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Loop through possible 4-digit numbers\n    for num in range(1000, 10000):\n        # Convert the number to a string to manipulate its digits\n        num_str = str(num)\n        # Move the first digit to the end\n        new_num_str = num_str[1:] + num_str[0]\n        # Convert new string back to integer\n        new_num = int(new_num_str)\n        # Check if it satisfies the condition given in the problem statement\n        if new_num - num == 4707:\n            return num\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags_flour\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume the exchange rate from Pounds to Rubles is given or can be found through some API\n    # As we cannot fetch real-time data, we will assume an exchange rate.\n    # For example, if £1 = 100 Rubles (this is a hypothetical rate for illustration purposes)\n    exchange_rate = 100  # Hypothetical exchange rate\n    \n    # The cost of a CD in Pounds\n    cost_in_pounds = 14\n    \n    # Convert cost in Pounds to Rubles\n    cost_in_rubles = cost_in_pounds * exchange_rate\n    \n    # Amount of money Richard has in Rubles.\n    # Assuming he has the same numerical amount but in Rubles, i.e., £14 = 14 Rubles.\n    richards_money_in_rubles = 14 * exchange_rate\n    \n    # Calculate how many CDs Richard can buy\n    num_cds = richards_money_in_rubles // cost_in_rubles\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, isprime\n\n    # We will check every option given to see which one satisfies the conditions\n    # The options provided are 28, 39, 52, 84\n    options = [28, 39, 52, 84]\n\n    for age in options:\n        # Check the conditions given\n        three_years_ago = age - 3\n        next_year = age + 1\n        in_twelve_years = age + 12\n\n        # Check if three_years_ago is a square of an integer\n        if (three_years_ago ** 0.5).is_integer():\n            # Check if next_year is prime\n            if isprime(next_year):\n                # Check if in_twelve_years is a cube of an integer\n                if round(in_twelve_years**(1/3)) ** 3 == in_twelve_years:\n                    return age  # This age fulfills all conditions\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart must take at least one of each color to ensure he has 2 different colors.\n    # Since there are least red M&Ms, he takes all 3 red ones first.\n    # Next, he takes one yellow to guarantee that he has 2 different colors.\n    # Even if he is unlucky and gets 3 red, the next one must be a different color (yellow or brown).\n    # So the smallest number of M&Ms he needs to take is the total number of red (3) plus one more (1).\n\n    return 3 + 1  # 3 red and 1 yellow/brown to ensure 2 different colors\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of speeds between Andrew and Bernice when Andrew is at level 5 while Bernice is at level 3\n    ratio_AB = 5 / 3\n    \n    # Ratio of speeds between Bernice and Cassandra when Bernice is at level 6 while Cassandra is at level 10\n    ratio_BC = 6 / 10\n    \n    # Ratio of speeds between Andrew and Cassandra, combining AB and BC ratios: A/B * B/C = A/C\n    ratio_AC = ratio_AB * ratio_BC\n    \n    # Given that when Cassandra is at level 19, we can find Andrew's level based on their speed ratio\n    # Cassandra_level / Andrew_level = ratio_AC\n    level_Andrew = 19 / ratio_AC\n    \n    return int(level_Andrew)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def vee(a, b):\n        return a * b + a + b\n\n    # We know that:\n    # 2 vee (x vee 4) = 59\n    # Therefore:\n    # 2*(x vee 4) + 2 + (x vee 4) = 59\n    # 2*(x*4 + x + 4) + 2 + (x*4 + x + 4) = 59\n    # 2*(4x + x + 4) + 2 + 4x + x + 4 = 59\n    # 10x + 20 = 59 - 2 - 4\n    # 10x = 33\n    # x = 33 / 10\n    x = (59 - 2 - 4) / 10\n\n    return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    num_repeats = 43 // len(pattern)\n    remaining_digits = 43 % len(pattern)\n\n    sum_repeat_pattern = sum(int(digit) for digit in pattern) * num_repeats\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_repeat_pattern + sum_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    number_of_quizzes = 4\n    time_total_minutes = time_per_quiz_minutes * number_of_quizzes\n    time_total_hours = time_total_minutes / 60\n    return time_total_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometers = 4.7\n    centimeters_per_kilometer = 100000\n    centimeters = kilometers * centimeters_per_kilometer\n    return centimeters\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n    years = 0\n    while sum(grandson_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandson_ages = [x + 1 for x in grandson_ages]\n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of each chair as \"c\".\n    c = symbols('c')  \n    # We are given that 4 tables and 9 chairs cost $504 in total.\n    # The cost of each table is equal to the total cost of 3 chairs.\n    # So, the total cost can be represented as 4*(3*c) + 9*c = 504.\n    equation = Eq(4*(3*c) + 9*c, 504)\n\n    # Solving for the cost of each chair.\n    cost_of_chair = solve(equation, c)[0]\n    \n    return cost_of_chair\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for x in range(0, 9):  # As the maximum number of 5p's in 40p without exceeding is 8 (since 8 * 5p = 40p)\n        if (40 - 5 * x) % 10 == 0:  # Check if the rest can be filled with 10p's\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence can be given by S = n/2 * (a1 + an)\n    # where S is the sum, n is the number of terms, a1 is the first term, an is the last term.\n\n    # From the question, we have two equations:\n    # 1. S9 = 72 => 9/2 * (a1 + a9) = 72\n    # 2. S23 = 736 => 23/2 * (a1 + a23) = 736\n\n    # Let's denote the common difference of the arithmetic sequence as d.\n    # Now we can express a9 and a23 in terms of a1 and d:\n    # a9 = a1 + 8*d\n    # a23 = a1 + 22*d\n\n    # Substitute a9 and a23 into the sum equations:\n    # 9/2 * (2*a1 + 8*d) = 72\n    # 23/2 * (2*a1 + 22*d) = 736\n\n    # Solving the above equations will give us a1 and d:\n    a1_plus_a9 = 72 * 2 / 9  # This will give us (a1 + a9)\n    a1_plus_a23 = 736 * 2 / 23  # This will give us (a1 + a23)\n\n    # Calculate the common difference d using the two equations we got:\n    # (a1 + a23) - (a1 + a9) = 22*d - 8*d\n    d = (a1_plus_a23 - a1_plus_a9) / (22 - 8)\n\n    # Now we can find a1 by substituting d back into the equation for a1 + a9:\n    a1 = (a1_plus_a9 - 8 * d) / 2\n\n    # We want to find the sum of the first 16 terms S16:\n    # S16 = 16/2 * (a1 + a16)\n\n    # Express a16 in terms of a1 and d:\n    # a16 = a1 + 15*d\n\n    # Calculate sum of first 16 terms\n    sum_first_16 = 16 / 2 * (a1 + (a1 + 15 * d))\n\n    return int(sum_first_16)\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        product = 1\n        for digit in str(num):\n            product *= int(digit)\n        if 100 <= product <= 999:\n            return num\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_hours = 40 / 60\n    \n    # Calculate the distance Samuel and Shafur drove before Samuel turned back\n    distance_shafur = 54 * time_hours\n    distance_samuel = 66 * time_hours\n    \n    # Calculate the extra time Shafur took to reach Town Y while Samuel was refilling petrol\n    # This extra time is the time it takes Samuel to reach back to Town X\n    # because they reach the destination at the same time\n    extra_time_shafur = distance_samuel / 54\n    \n    # Now calculate the time Shafur drove in total\n    total_time_shafur = time_hours + extra_time_shafur\n    \n    # Finally, calculate the total distance from Town X to Town Y\n    # Distance = Speed * Time\n    distance_X_Y = 54 * total_time_shafur\n\n    return distance_X_Y\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    vases_needed = (flowers + vase_capacity - 1) // vase_capacity\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # The first multiple of 3 greater than or equal to 38\n    last_multiple = 81 // 3 * 3  # The last multiple of 3 less than or equal to 81\n    \n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # We want to find the number of terms until the first negative term.\n    # This means we find the last non-negative term, which is the last term t that satisfies:\n    # first_term + (n - 1) * difference >= 0\n    # Solving for n gives us:\n    # n <= 1 + (first_term / (-difference))\n    # Since n must be an integer, take the floor of the result.\n    \n    # Use the floor division to find the last non-negative term (numerator must be positive)\n    num_terms = 1 + ((first_term - 1) // (-difference))\n    \n    return num_terms\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    sum_first_half = sum(range(3, 11))  # Sum from 3 to 10 (inclusive)\n    sum_second_half = sum(range(3, 7))  # Sum from 3 to 6 (inclusive) for the second half\n    missing_terms_sum = 10 + 6          # Sum of the two missing terms\n\n    total_sum = sum_first_half + sum_second_half + missing_terms_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # given that pip has $50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # pip spends 80% of his money so he is left with 20%\n    # bud spends 3/4 of her money so she is left with 1/4\n    # the ratio of their remaining money is 6:5\n    equation2 = Eq(6*(bud - 3*bud/4), 5*(pip - 0.8*pip))\n\n    # solve the system of equations\n    solution = solve((equation1, equation2), (pip, bud))\n\n    return solution[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_jan = 78 + 13\n    total_after_jan = remaining_after_jan * 2\n    initial_phones = total_after_jan + 22\n    \n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    number = (18 * 7) / 3\n    result = (number * 5) / 6\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Evaluate the first term (7 div -3.33...) / (cube root of -0.027)\n    first_term_numerator = 7 / (-10/3)\n    first_term_denominator = (-0.027)**(1/3)\n    first_term = first_term_numerator / first_term_denominator\n    \n    # Evaluate the second term (2^3 div 4^2) / (0.125 * [1.8 - (0.2 * 7)])\n    second_term_numerator = (2**3) / (4**2)\n    second_term_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_term = second_term_numerator / second_term_denominator\n    \n    # Evaluate the third term [0.1 / 0.142857 repeating] + (2 * 0.3)\n    third_term_part1 = 0.1 / (1/7)\n    third_term_part2 = 2 * 0.3\n    third_term = third_term_part1 + third_term_part2\n    \n    # Final result by subtracting the third term from sum of first two terms\n    ans = (first_term + second_term) - third_term\n    \n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # So for 5 players, 4 games need to be played to determine the winner.\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    pencils = (total_items - more_pens) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    total_months = 12\n\n    average_spent = total_spent / total_months\n\n    return average_spent\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    extra_apples = 16\n\n    total_apples = (boxes * apples_per_box) + extra_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_packets = 4\n    money_needed_per_packet = 70\n    shortage = 15\n\n    total_money_needed = total_packets * money_needed_per_packet\n    money_mrs_koh_had = total_money_needed - shortage\n    \n    return money_mrs_koh_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # Number of players\n    players = 5\n    # Number of games required for a knockout tournament is always one less than number of players\n    games = players - 1\n    return games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Anna, Betsy, and Charlene's marbles\n    a, b, c = symbols('a b c')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(a + b + c, 168)  # Total marbles\n    equation2 = Eq(a + 8, 2*(b - 8))  # Anna's marbles after the exchanges\n    equation3 = Eq(c - 15, 7*(b - 8))  # Charlene's marbles after giving marbles to Betsy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Betsy's marbles at first before all exchanges\n    betsy_initial = solutions[b] + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    from_front = 8\n    from_back = 10\n\n    total_shelves = from_front + from_back - 1\n\n    return total_shelves\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(2016)\n    ages = []\n\n    # Reconstruct possible groups of factors that multiply to 2016 and are less than 10\n    for two_count in range(factors[2] + 1):\n        for three_count in range(factors[3] + 1):\n            for seven_count in range(factors[7] + 1):\n                age = (2 ** two_count) * (3 ** three_count) * (7 ** seven_count)\n                if age < 10:\n                    ages.append(age)\n\n    # Find unique sets of four ages that multiply to 2016\n    for i in range(len(ages)):\n        for j in range(i + 1, len(ages)):\n            for k in range(j + 1, len(ages)):\n                for l in range(k + 1, len(ages)):\n                    if ages[i] * ages[j] * ages[k] * ages[l] == 2016:\n                        return ages[i] + ages[j] + ages[k] + ages[l]\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # From the front and back\n    total_rows = 7 + 4 - 1  # Overlap counting Chris once\n    \n    # From the left and right\n    total_columns = 3 + 7 - 1  # Overlap counting Chris once\n    \n    # Total number of students\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years.\n    combined_age_four_years_ago = 10\n    \n    # Each year, each dog gets 1 year older. \n    # So in 4 years, each dog will be 4 years older, and together 2 dogs will be 8 years older.\n    eight_years_added = 4 * 2\n    \n    # The combined age four years ago was 10 years, we add the 8 years they have grown since then.\n    combined_age_now = combined_age_four_years_ago + eight_years_added\n    \n    # In 2 more years, each dog will be 2 years older, so together they will be 4 years older.\n    four_years_added = 2 * 2\n    \n    # Add 4 years to their current combined age to get their combined age in 2 years.\n    combined_age_in_two_years = combined_age_now + four_years_added\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Andy's average speeds are for 30 minutes period, therefore,\n    # we need to calculate the distance covered in each interval based on x\n    # 30 minutes is 1/2 hour\n    distance_first_interval = (x / 2) * (30 / 60)\n    distance_second_interval = ((x - 20) / 2) * (30 / 60)\n    distance_third_interval = ((x + 10) / 2) * (30 / 60)\n\n    # The sum of the distances for each interval should equal 70 miles\n    equation = Eq(distance_first_interval + distance_second_interval + distance_third_interval, 70)\n\n    # We solve for x\n    solutions = solve(equation, x)\n    # Return the positive solution since speed cannot be negative\n    return next(filter(lambda sol: sol > 0, solutions))\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    # Belinda ate 3/5 of the chocolate\n    # Remaining chocolate is 60 grams which is 2/5 of the original mass\n    remaining_fraction = 2 / 5\n    original_mass = 60 / remaining_fraction\n    \n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # assuming the year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    # Let x be the number of 10p coins\n    # Then the number of 20p coins is 2x\n    # And the number of 5p coins is 0.5x\n    # The total amount of money in terms of pence is 1575p (since £15.75 is 1575p)\n\n    # Create an equation based on the information given\n    # 5(0.5x) + 10(x) + 20(2x) = 1575\n    # 2.5x + 10x + 40x = 1575\n    # 52.5x = 1575\n\n    # Solve for x\n    x = 1575 / 52.5\n\n    # Calculate the number of 20p coins, which is 2x\n    num_20p_coins = 2 * x\n\n    return int(num_20p_coins)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    \n    return ivan\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n\n    # Each boy has as many sisters as brothers, which means\n    # If you take one boy out, the rest are his brothers: b - 1\n    # And all the girls are his sisters: g\n    # These two numbers should be equal\n    equation1 = Eq(g, b - 1)\n\n    # Each girl has half as many sisters as brothers, which means\n    # If you take one girl out, the remaining number of girls is her sisters: g - 1\n    # All the boys are her brothers: b\n    # The number of sisters should be half the number of brothers\n    equation2 = Eq(g - 1, b / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # The number of children is the sum of boys and girls\n    num_children = solutions[b] + solutions[g]\n\n    return num_children\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_6_number = str(remainder) + base_6_number\n        base_10_number //= 6\n    return base_6_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    final_cost = total_cost + tip\n    change = 50 - final_cost\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_in_minute = 60\n    return seconds_in_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    climb_per_day = 4\n    slide_per_night = 2\n    distance_after_n_days = 0\n    days = 0\n\n    while distance_after_n_days < total_distance:\n        days += 1\n        distance_after_n_days += climb_per_day\n        if distance_after_n_days >= total_distance:\n            break\n        distance_after_n_days -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # since the one who takes out the last marble loses\n    # we want to force the opponent to pick the last marble\n    # To do so, we need to leave 4 marbles each time it's our turn (4 including the one opponent will pick)\n    # If we can always leave a multiple of 4 marbles, we will win (as the opponent will have to pick the last one)\n    # 26 marbles, to get to the nearest (lower) multiple of 4, we need to take out 2 marbles (24 is a multiple of 4)\n    # Then no matter what the opponent does, we can always bring it back to a multiple of 4 until we reach 4 marbles\n    # Finally, the opponent takes one of the remaining three and loses the game\n    \n    return 2\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    total_apples = 27\n    num_children = 5\n\n    # Assume the children get at least one apple each.\n    # We need to find the least possible number of apples for the child who gets the most,\n    # while still meeting the conditions that no two children get the same number of apples\n    # and there are a total of 27 apples. We distribute one apple to each child first.\n    total_apples -= num_children  # Remove the guaranteed one apple per child\n\n    # Now, sort the remaining apples into the minimum number of piles, increasing the pile size by one each time.\n    # This pattern ensures that the piles are as small as possible.\n    min_piles = [1, 2, 3, 4]  # Starting pattern, as we have already given 1 apple to each of the 5 children\n    \n    while sum(min_piles) < total_apples:\n        for i in range(num_children-1):\n            if sum(min_piles) < total_apples:\n                min_piles[i] += 1\n    \n    max_apples = min_piles[-1] + 1  # the kid who gets the most is one more than the last in the min_piles\n\n    return max_apples\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    answers = []\n    for x1 in range(1, 25):\n        for x2 in range(x1+1, 25):\n            for x3 in range(x2+1, 25):\n                for x4 in range(x3+1, 25):\n                    for x5 in range(x4+1, 25):\n                        for x6 in range(x5+1, 25):\n                            for x7 in range(x6+1, 25):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25:\n                                    answers.append((x1, x2, x3, x4, x5, x6, x7))\n    return answers\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Given the alcoholic is not at two of the bars, \n    # there is a 100% chance they are at the third bar.\n    return 1.0\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    base_number = (18 * 7) / 3\n    required_fraction = (base_number * 5) / 6\n    return required_fraction\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees', integer=True)\n\n    # If each volunteer plants 4 trees, 5 trees will be left\n    equation1 = Eq(volunteers * 4 + 5, trees)\n\n    # If each of them plants 7 trees, one volunteer will have nothing to plant\n    equation2 = Eq(volunteers - 1, trees / 7)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 270)              # total number of stickers before moving\n    equation2 = Eq((B + 56)/(A - 56), 3/2) # ratio after moving 56 stickers\n\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let G be the amount of grass (in cow-week units) grown in a week.\n    # Let C be the capacity of the field (in cow-week units), that is the total amount of grass available for cows.\n    # Then we have two equations representing the two scenarios:\n    # 120 cows for 12 weeks: 120 * 12 = C + 12 * G\n    # 150 cows for 8 weeks: 150 * 8 = C + 8 * G\n\n    C, G = symbols('C G')\n    equation1 = Eq(120 * 12, C + 12 * G)\n    equation2 = Eq(150 * 8, C + 8 * G)\n\n    solutions = solve((equation1, equation2), (C, G))\n    C_value = solutions[C]\n    G_value = solutions[G]\n    \n    # Now we have C and G values, we can find the number of cows that can be sustained for 6 weeks:\n    # X cows for 6 weeks: X * 6 = C + 6 * G\n    # Solving for X gives us the number of cows.\n\n    X = symbols('X')\n    equation3 = Eq(X * 6, C_value + 6 * G_value)\n    X_value = solve(equation3, X)\n\n    return X_value[0]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    missing_number = (10 * 21) / 14\n    return missing_number\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    n = 7  # Number of already known terms\n    first_term = 5\n    common_difference = 6\n    \n    next_term = first_term + n * common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    packet_size = 8\n    packets = children // packet_size\n\n    if children % packet_size != 0:\n        packets += 1\n\n    return packets\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Let's denote the total number of layers of boys as b_layers\n    # and the total number of layers of girls as g_layers.\n    # Since we have a square array, the number of students in each layer\n    # would be 4n - 4, where n is the length of the side of that layer.\n    # The total number of boys will be sum of boys in all boy layers.\n    # Similarly, the total number of girls will be the sum of girls in all girl layers.\n    # We have to find the total number of students such that boys outnumber girls by 55.\n    \n    # We start by assuming at least 1 layer of boys and increase the count to find\n    # the correct number of boys and girls such that their difference is 55.\n    total_students = 0\n    b_layers = 0\n    while True:\n        b_layers += 1\n        g_layers = b_layers - 1\n        \n        # Calculate the number of boys and girls\n        boys = 4 * b_layers * b_layers - 4 * g_layers * g_layers\n        girls = 4 * g_layers * g_layers - 4 * (g_layers - 1) * (g_layers - 1)\n        \n        # Check if the difference between boys and girls is 55\n        if boys - girls == 55:\n            total_students = boys + girls\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n//2+1) if n % i == 0])\n    \n    num = 2\n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(30, 13, -2):\n        total += sign * i\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25  # Determining the common difference from the sequence\n\n    # Compute the first term using the arithmetic sequence nth term formula:\n    # nth_value = first_term + (nth_term - 1) * common_difference\n    first_term = nth_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    boxes_needed = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        boxes_needed += 1\n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_to_give_away = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_give_away // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n    \n    # Lovelle sold 462 muffins, and Makayla sold 2/5 of her muffins\n    equation = Eq(lovelle - 462, makayla - (2/5)*makayla)\n\n    # Lovelle and Makayla had 3998 muffins together\n    equation_sum = Eq(lovelle + makayla, total_muffins)\n\n    # Solving the system of equations\n    solutions = solve((equation, equation_sum), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    spent_on_book = 1/4 * initial_money\n    spent_on_bag = 2/7 * initial_money\n\n    equation = Eq(spent_on_book + spent_on_bag, 225)\n\n    initial_money_value = solve(equation, initial_money)\n\n    return initial_money_value[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # n(n+1)/2 is the sum of the first n positive integers.\n    # We need to find the maximum n such that n(n+1)/2 <= 30\n    n = 1\n    while n * (n + 1) // 2 <= 30:\n        n += 1\n    return n - 1  # Subtract 1 because we exceeded 30 with the last n\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Maximum number of cards to be picked without getting 10 cards of the same color\n    # Here we take 9 cards from each of the 4 colors\n    max_picks_without_10_same = 9 * 4\n    \n    # We add one to make sure we have at least 10 cards of one color\n    min_picks_for_10_same = max_picks_without_10_same + 1\n    \n    return min_picks_for_10_same\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n    length_of_row = (num_daffodils - 1) * gap_between_daffodils\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    num_pieces = 30\n\n    length_per_piece = total_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Since the boxes are identical, we only need to find unique partitions of 9\n    # such that no two parts are the same. We can iterate only through the sorted\n    # partitions to ensure uniqueness and avoid permutations of the same partition.\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            x3 = 9 - x1 - x2\n            # Ensure the third box has a different number of stickers\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let's assume Jane drinks x ml of juice.\n    # Then Alex drinks 1.5x ml of juice (since Alex drinks 50% more than Jane).\n    # Together they drink x (Jane) + 1.5x (Alex) = 2.5x ml, which equals the total juice 150 ml.\n    \n    # Now we can write the equation: 2.5x = 150 ml\n    # To find x, we divide both sides by 2.5\n    jane_drinks = total_juice / 2.5\n    # Now we can find out how much Alex drinks\n    alex_drinks = 1.5 * jane_drinks\n\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8  # in meters per minute\n    actual_minutes = distance_to_market / walking_speed\n    return actual_minutes\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n    \n    # Total ways to form a group of 4 without restriction\n    total_ways = comb(total_girls + total_boys, group_size)\n    \n    # Ways to form a group of 4 with girls only\n    girls_only_ways = comb(total_girls, group_size)\n    \n    # Ways to form a group with at least 1 boy = Total ways - Girls only ways\n    at_least_one_boy_ways = total_ways - girls_only_ways\n    \n    return at_least_one_boy_ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    # Given equation is 1/4 of 16 = 1/2 of missing_number\n    # Therefore, missing_number = (1/4 * 16) / (1/2)\n    # Simplifying the right-hand side gives us the missing_number\n    missing_number = (1 / 4 * 16) / (1 / 2)\n    return int(missing_number)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits_per_page = 1\n    page_count = 0\n    while total_digits > 0:\n        page_count += 1\n        total_digits -= digits_per_page\n        if page_count == 10 or page_count == 100 or page_count == 1000:\n            digits_per_page += 1\n    return page_count\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # Start from 201 to ensure it's odd, end at 241, step by 2 to ensure odd numbers\n        if number % 3 == 0 and number % 7 == 0:  # Check divisibility by both 3 and 7\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    possibilities = []\n    for i in range(10):\n        for j in range(10):\n            price = int(f\"{i}679{j}\")\n            if price % 72 == 0:\n                possibilities.append(price // 72)\n    # Assuming there's only one possible unit price, as the question implies an integer unit price\n    return possibilities[0] if possibilities else None\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let the initial amount of money be x.\n    # Bud spent 1/4 of her original money on a book.\n    # The remaining money is 3/4 of the initial amount.\n    # Then she spent 2/5 of the remaining money on a bag.\n    # The cost of the bag is given as 60.\n    # Setting up the equation: (2/5) * (3/4) * x = 60\n    # Solve for x.\n    \n    # Calculate the cost of the bag in terms of the initial amount\n    x = 60 / ((2/5) * (3/4))\n    \n    return x\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    equation_A = Eq(students_A * 4, candies - 20)\n    # If each student in class B gets 6 candies, there will be 16 candies left.\n    equation_B = Eq(students_B * 6, candies + 16)\n\n    solutions = solve((equation_A, equation_B), (candies, students_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed of the train in meters per second\n\n    # Time taken to pass the pole is the length of the train divided by the speed\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if sum(map(int, str(number))) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_trees = 41\n    distance_between_trees = 3\n    # Calculate the total length of the stretch of road with trees\n    total_length_with_trees = (total_trees - 1) * distance_between_trees\n    \n    distance_between_lamps = 8\n    # Calculate the number of lamp posts, considering that there's one at each end of the road\n    num_lamp_posts = (total_length_with_trees // distance_between_lamps) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    spent_on_dvd = total_money / 3\n    remaining = total_money - spent_on_dvd\n    spent_on_book = remaining * 0.25\n    remaining_after_book = remaining - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n\n    for year in range(1, 4):\n        # Rabbits multiply by 3 times each year\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits each year\n        initial_rabbits /= 2\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1  # Total distance travelled (in miles)\n\n    # Time taken to travel 1 mile at 60 m.p.h.\n    time_60mph = 1 / 60\n    # Time taken to travel 1 mile at 30 m.p.h.\n    time_30mph = 1 / 30\n\n    total_time = time_60mph + time_30mph  # Total time taken (in hours)\n\n    average_speed = total_distance / total_time  # Average speed (in m.p.h.)\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n\n    num_washes = target_amount / amount_per_wash\n    \n    return int(num_washes) + 1 if num_washes % 1 != 0 else int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day_candies = 2\n    days_passed = 4 - 1  # Because on the first day, she ate 2 already.\n\n    candies_eaten_on_fourth_day = first_day_candies * (2**days_passed)\n\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the natural number we are searching for\n    n = symbols('n', integer=True)\n    a = symbols('a', integer=True)\n\n    # Setting up the equations based on the remainders given by the question\n    equation1 = Eq(290 % n, a)\n    equation2 = Eq(235 % n, a + 2)\n    equation3 = Eq(200 % n, a + 5)\n\n    # Since we are looking for a natural number greater than 1, we restrict n to be greater than 1\n    solutions = solve((equation1, equation2, equation3), (n, a), dict=True)\n    valid_solutions = [sol[n] for sol in solutions if sol[n] > 1]\n\n    # Assuming only one valid solution as per the nature of the problem\n    assert len(valid_solutions) == 1\n\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings_per_day = 70\n    days_worked_in_a_week = 6\n\n    total_earnings = average_earnings_per_day * days_worked_in_a_week\n    \n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller angle, then the larger angle will be 2x.\n    x = symbols('x')\n    \n    # The total sum of angles in a triangle is 180 degrees, \n    # with one being a right angle which is 90 degrees.\n    equation = Eq(x + 2*x + 90, 180)\n\n    # Solving for x, the smaller angle\n    smaller_angle = solve(equation, x)[0]\n    \n    # The larger angle is 2 times the smaller one\n    larger_angle = 2 * smaller_angle\n\n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    # Let's iterate over all two-digit numbers for PI and IS\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:\n                    PI = 10 * P + I\n                    IS = 10 * I + S\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost_one_necklace_one_earring = solutions[necklace] + solutions[earring]\n\n    return total_cost_one_necklace_one_earring\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    six_day_sunshine = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine = six_day_sunshine + sunday_sunshine\n    average_sunshine = total_sunshine / 7\n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walk_speed = 75  # walking speed in m/min\n    run_speed = walk_speed * 2  # running speed in m/min\n    walk_time = 24  # time it takes to walk to school in min\n\n    # Calculate the distance to school by walking\n    distance_to_school = walk_speed * walk_time\n\n    # Distance covered by walking half the journey\n    half_distance = distance_to_school / 2\n\n    # Time to walk half the distance\n    time_walk_half = half_distance / walk_speed\n\n    # Time to run the other half of the distance\n    time_run_half = half_distance / run_speed\n\n    # Total time if he covers half the journey by walking and the other half by running\n    total_time = time_walk_half + time_run_half\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_length = 320\n    trees = 79\n\n    # Total intervals are one more than number of trees planted\n    total_intervals = trees + 1\n    \n    # Distance between each tree is the total length divided by the total intervals\n    distance_between_trees = total_length / total_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    spent_on_dresses = 177\n    spent_on_earrings = 129\n    spent_total = spent_on_dresses + spent_on_earrings\n\n    # Kim gave 1/3 of her savings to her mother\n    given_to_mother = savings / 3\n\n    # Amount left is 1/2 of what she gave her mother\n    amount_left = given_to_mother / 2\n\n    # Equation representing the problem\n    equation = Eq(savings - given_to_mother - spent_total, amount_left)\n\n    # Solving for the total savings\n    total_savings = solve(equation, savings)[0]\n\n    return total_savings\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # We are looking for the number of partitions of 6 into at most 3 parts\n    # Since the baskets are identical, the order of the partitions doesn't matter\n    # The possibilities are (6,0,0), (5,1,0), (4,2,0), (4,1,1), (3,3,0), (3,2,1), (2,2,2)\n    # There are seven partitions\n    return 7\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Since the ages form an arithmetic sequence with 9 terms and the sum is given,\n    # we can use the arithmetic sequence sum formula: S = n/2 * (a1 + an)\n    # where S is the sum of the sequence, n is the number of terms, a1 is the first term, and an is the last term.\n    # We are also given that the terms are consecutive natural numbers, so the difference (d) is 1.\n    n = 9\n    S = 765\n    # To find the middle term (which is also the median since the sequence is in order), we divide by the number of terms (n).\n    # Since in an arithmetic sequence of odd number of terms, the median is the middle term, we can write:\n    # S = n * middle_term\n    middle_term = S / n\n\n    return int(middle_term)\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    # Calculate the number of full lengths that can be cut\n    num_full_lengths = total_length // cut_length\n\n    # Calculate the length left over\n    length_left_over = total_length % cut_length\n\n    return length_left_over\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    # Initialize sum of values of N\n    sum_N = 0\n    # 2018 divided by N leaves remainder 11\n    # Therefore, possible values of N are factors of (2018 - 11) = 2007\n    for N in range(1, 2007 + 1):\n        # Check if N is a divisor of 2007\n        if 2007 % N == 0:\n            sum_N += N\n    return sum_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum([(skirts_per_day * (worker + 1)) for worker in range(9)])\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if (chickens * 2 + cows * 4 == 26):\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n    possible_numbers = range(30, 61)  # From 30 to 60 inclusive\n    \n    numbers_in_sequence = [n for n in possible_numbers if (n - first_term) % common_difference == 0]\n    \n    return numbers_in_sequence\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    number = ''\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n    return int(number[2022])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since the sweets are distributed evenly, the class size can only be the divisors of the total number of sweets.\n    # We check for divisors starting from the smallest class size where each student gets at least 5 sweets.\n    class_size = min_sweets_per_student\n    while total_sweets % class_size != 0:\n        class_size += 1\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # 3 apples and 2 bananas costs £1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    # 1 apple and 1 banana costs £0.48\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Work out how much it would cost to buy 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    income = 150000\n    initial_tax_rate = 0.08\n    tax_paid = 15000\n    initial_income_threshold = 50000\n\n    # Tax paid for the first $50,000\n    initial_tax_paid = initial_income_threshold * initial_tax_rate\n    remaining_tax_paid = tax_paid - initial_tax_paid\n\n    # Income above $50,000\n    remaining_income = income - initial_income_threshold\n\n    # Tax rate for the remaining income\n    remaining_tax_rate = remaining_tax_paid / remaining_income\n\n    # Find T as the difference between the remaining tax rate and the initial tax rate\n    T = (remaining_tax_rate - initial_tax_rate) * 100\n\n    return T\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    unattempted_questions = 1\n    total_score = 66\n\n    # Total points if all questions were correct\n    max_points = (total_questions - unattempted_questions) * score_correct\n\n    # The difference between the actual score and the maximum possible score\n    score_difference = max_points - total_score\n\n    # Since each incorrect answer causes a loss of score_correct - score_incorrect points\n    incorrect_penalty = score_correct - score_incorrect\n\n    # Calculate the number of incorrect answers\n    incorrect_answers = score_difference // incorrect_penalty\n\n    # Calculate the number of correct answers\n    correct_answers = (total_questions - unattempted_questions) - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Rachel and Alice's original amount of candy\n    rachel, alice = symbols('rachel alice')\n\n    # Create equations based on the given conditions\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total amount of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Applying the Pigeonhole Principle: (elements + boxes - 1) / boxes\n    boys_on_most_popular_day = (total_boys + days_in_january - 1) // days_in_january\n\n    return boys_on_most_popular_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Possible digits for the hundreds place - 2 and 3 (since 0 can't be in the hundreds place)\n    hundreds_place_options = 2\n    \n    # Possible digits for the tens place - 2 options (3 options total minus the one used in the hundreds place)\n    tens_place_options = 2\n    \n    # Possible digits for the units place - 1 option (3 options total minus the two used in the hundreds and tens places)\n    units_place_options = 1\n    \n    # Total different combinations are the product of options for each place\n    total_combinations = hundreds_place_options * tens_place_options * units_place_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    num_other_cars = 31 - 1\n    space_between_cars = 5\n    total_spaces = 31\n\n    total_length_cars = first_car_length + (other_car_length * num_other_cars)\n    total_length_spaces = space_between_cars * total_spaces\n    \n    return total_length_cars + total_length_spaces\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # The common difference (d) of the sequence can be determined by the given terms.\n    common_difference = 120 - 105  # d = 8th term - 7th term\n\n    # The first term (a) of the sequence can be determined since we know the 7th term and the common difference.\n    # nth term = a + (n - 1)d => 7th term = a + (7 - 1)d\n    # 105 = a + 6d => a = 105 - 6d\n    first_term = 105 - 6 * common_difference\n\n    # Now, we can find out the 100th term using the formula:\n    # nth term = a + (n - 1)d\n    # 100th term = a + (100 - 1)d\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given = 23\n    \n    chocolates_left = total_chocolates - chocolates_given\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] in ['5', '8'] and not perm[0] == '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        # Convert the tuple to a string for easy manipulation\n        line = ''.join(perm)\n        # Check if D and E are next to each other\n        if 'DE' in line or 'ED' in line:\n            # Check if A is in the middle of B and C (not necessarily right next to each other)\n            if line.index('A') > line.index('B') and line.index('A') < line.index('C') or line.index('A') > line.index('C') and line.index('A') < line.index('B'):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # The ratio representing the share of sweets between Sue, Sarah, and Ian is 2:3:5.\n    # If Sarah received 12 sweets, then 1 part of the ratio corresponds to 12/3 = 4 sweets\n    # Now calculate the total number of sweets by summing the parts of the ratio and multiplying by the sweets per part:\n    # Total sweets = (2 parts Sue + 3 parts Sarah + 5 parts Ian) * sweets per part\n    sweets_per_part = 12 // 3\n    total_sweets = (2 + 3 + 5) * sweets_per_part\n    \n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # in pence\n    total_cakes_cost = 9 * 113    # in pence, 1.13 pounds = 113 pence\n\n    total_cost_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_pounds = total_cost_pence / 100  # Convert pence to pounds\n\n    change = 20 - total_cost_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    last_week_length = current_length / (1 + growth_rate)\n    return last_week_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    apples_per_pile = 8\n    total_piles = 6\n    total_apples = apples_per_pile * total_piles\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    return 1.8 - 0.57\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    combinations = tops * bottoms\n    \n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    total_minutes_before_lunch = 10 + 20 + 20  # play, watch TV, and lunch\n    home_arrival_time = lunch_end_time - timedelta(minutes=total_minutes_before_lunch)\n    return home_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "def solution():\n    arrival_time = 12 * 60 + 40  # Convert 12.40pm to minutes (12 hours * 60 minutes + 40 minutes)\n    stay_duration = 2 * 60 + 40  # Convert 2 hours 40 minutes to minutes (2 hours * 60 minutes + 40 minutes)\n\n    departure_time_in_minutes = arrival_time + stay_duration\n\n    departure_hour = departure_time_in_minutes // 60\n    departure_minute = departure_time_in_minutes % 60\n\n    # Since departure time is in PM after 12:00 noon, we adjust if it's beyond 12 hours\n    if departure_hour > 12:\n        departure_hour -= 12\n\n    return f\"{departure_hour}:{departure_minute:02d} PM\"\n\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # Calculate permutations for 3-digit numbers\n    three_digit_permutations = list(permutations('2017', 3))\n    \n    # Filter out permutations starting with '0' as they are not valid 3-digit numbers\n    three_digit_permutations = [perm for perm in three_digit_permutations if perm[0] != '0']\n    three_digit_count = len(three_digit_permutations)\n    \n    # Calculate permutations for 4-digit numbers\n    four_digit_permutations = list(permutations('2017', 4))\n    \n    # Filter out permutations starting with '0' as they are not valid 4-digit numbers\n    four_digit_permutations = [perm for perm in four_digit_permutations if perm[0] != '0']\n    four_digit_count = len(four_digit_permutations)\n    \n    # Total count is the sum of both 3-digit and 4-digit numbers\n    total_count = three_digit_count + four_digit_count\n    return total_count\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    sam, peter = symbols('sam peter')\n    \n    # Equation 1: Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n    \n    # Equation 2: After transactions, Sam had 96 stickers more than Peter\n    # Sam gave away 20%, so he had 80% left, and got 25% of what Peter had after giving Sam 20% of his stickers\n    # Peter now has 75% of his original stickers plus 20% of Sam's original stickers\n    equation2 = Eq(sam*0.8 + peter*0.25, peter*0.75 + sam*0.2 + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    num = 1\n    while True:\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 1):\n            return num\n        else:\n            num += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6.5 / 0.5\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_terms = 14\n    \n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count_nines = 0\n    page = 1\n\n    # Increment count of '9's for each digit place until we reach the target count.\n    while count_nines < 181:\n        digits = str(page)\n        count_nines += digits.count('9')\n        page += 1\n    \n    # The loop will run until count_nines is just greater than or equal to 181.\n    # The actual page would be the previous one (page - 1) when we last had exactly 181 nines.\n    return page - 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    # Let x represent the original number of crystals Jason had.\n    # According to the problem, we can set up the equation as follows:\n    # (x / 2 + 10) - number sold to Yvonne\n    # After mining 20 more: (x / 2 + 10) + 20\n    # After selling 14 to Cherlyn: (x / 2 + 10) + 20 - 14 = 35\n    # Simplifying the equation: x / 2 + 16 = 35\n    \n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of crystals\n    x = symbols('x')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(x / 2 + 16, 35)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since we want the number of crystals before any transactions,\n    # we take the solution and return it.\n    return solution[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_per_pattern = 2\n    patterns = 14 // grey_per_pattern\n    rabbits_per_pattern = 1 + 2 + 2  # black + white + grey\n\n    total_rabbits = patterns * rabbits_per_pattern\n    \n    # Check if there are remaining grey rabbits that do not form a complete pattern\n    remaining_grey = 14 % grey_per_pattern\n    if remaining_grey > 0:\n        total_rabbits += remaining_grey + 1 + 2  # Add incomplete pattern only once\n    \n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    numbers = ['0', '1', '5', '8']\n    all_three_digit_numbers = set()\n\n    # Generate all permutations of the three numbers\n    for combo in permutations(numbers, 3):\n        # Skip permutations that start with '0' because they aren't valid three-digit numbers\n        if combo[0] != '0':\n            all_three_digit_numbers.add(int(''.join(combo)))\n\n    # Find the smallest and largest three-digit numbers that were formed\n    smallest = min(all_three_digit_numbers)\n    largest = max(all_three_digit_numbers)\n    # Compute the difference between the largest and smallest numbers\n    difference = largest - smallest\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n    \n    # Number of students in each class\n    A = 12\n    B = 15\n    C = 18\n    \n    # Calculate the GCD of the number of students\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n    \n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from math import sqrt\n\n    n = 180\n    factors = []\n\n    # Find all factors of n\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i != i:  # If factors are not the square root of n\n                factors.append(n // i)\n\n    # Filter factors that are multiples of 9\n    multiples_of_9 = [factor for factor in factors if factor % 9 == 0]\n\n    return len(multiples_of_9)\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2 * u, 5 * u - 220)\n    solution = solve(equation, u)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n            \nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    initial_amount = 10000\n    interest_rate = 0.05\n    number_of_years = 3\n\n    final_amount = initial_amount * ((1 + interest_rate) ** number_of_years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # £2 is equal to 200 pence\n    single_price = 12  # cost of one sweet in pence\n    triple_price = 30  # cost of three sweets in pence\n    \n    # First, calculate how many sets of three sweets we can buy\n    sets_of_three = total_pence // triple_price\n    remaining_pence = total_pence % triple_price\n    \n    # Then, calculate how many additional single sweets we can buy with the remaining pence\n    additional_sweets = remaining_pence // single_price\n    \n    # The total number of sweets is three times the number of sets plus the additional sweets\n    total_sweets = (sets_of_three * 3) + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age_now = 7\n    may_age_future = 10\n    kenny_age_difference = 2\n\n    # Let x be the age of Kenny's younger brother now.\n    # Then, Kenny is x + kenny_age_difference years old now.\n    # In 3 years, May will be 10 years old,\n    # and the sum of Kenny and his brother's ages will be 3 times May's age,\n    # which gives us the equation: (x + 3) + (x + kenny_age_difference + 3) = 3 * may_age_future\n    # Simplified: 2*x + 6 + kenny_age_difference = 30\n\n    x = (30 - 6 - kenny_age_difference) / 2\n\n    kenny_age_now = x + kenny_age_difference\n\n    # The difference in age between Kenny and May now is:\n    difference_in_age = kenny_age_now - may_age_now\n\n    return difference_in_age\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    num_balls = 10\n    num_boxes = 7\n\n    # Placing at least one ball in each box\n    num_balls -= num_boxes\n\n    # Calculate combinations\n    ans = comb(num_balls + num_boxes - 1, num_boxes - 1)\n\n    return ans\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the capacity of the fish tank.\n    # Using a 5-litre pail, water overflows; therefore x + 4 = 5 * pails\n    # Using a 3-litre pail, 4 more pails are needed; therefore x = 3 * (pails + 4)\n    # We can set these two equations equal to solve for the capacity.\n\n    from sympy import symbols, Eq, solve\n\n    x, pails = symbols('x pails')\n    equation1 = Eq(x + 4, 5 * pails)\n    equation2 = Eq(x, 3 * (pails + 4))\n\n    # Solve the equations to get the value of x.\n    solutions = solve((equation1, equation2), (x, pails))\n    return solutions[x]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    length_of_pipe = 305\n    each_pipe_length = 5\n    \n    number_of_pipes = length_of_pipe // each_pipe_length\n    \n    # Check if we need an additional pipe for the remaining part (if any)\n    if length_of_pipe % each_pipe_length != 0:\n        number_of_pipes += 1\n\n    return number_of_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        is_multiple_of_two = number % 2 == 0\n        is_multiple_of_three = number % 3 == 0\n        is_multiple_of_four = number % 4 == 0\n\n        # If a number is a multiple of four, it is also a multiple of two,\n        # so we need to count only the cases where it's either a multiple of two and three,\n        # or a multiple of three and four.\n        if (is_multiple_of_two + is_multiple_of_three + is_multiple_of_four) == 2:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    # Initialize the count of '3' and page numbers\n    count_3 = 0\n    page_number = 1\n\n    # Loop until we find the total number of times '3' appears\n    while count_3 < 28:\n        # Count how many '3's are in the current page number\n        count_3 += str(page_number).count('3')\n        # Move to the next page number\n        page_number += 1\n        \n    # When loop exits, the last page number checked contains the 28th '3'\n    # but since we already incremented page_number, we return page_number - 1\n    return page_number - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - (total_amount - coin)):\n            return coin\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Total Number of Candies\n    total_candies = 10\n    \n    # Strategy:\n    # Felix should make sure that after each of his turns, the total candies remaining\n    # is a multiple of 3. This way, no matter if John takes 1 or 2 candies,\n    # Felix can always adjust his move to bring the total back to a multiple of 3.\n    # When the total candies is 4, Felix will be able to win on the next move.\n\n    # Felix should go first and eat 1 candy.\n    # If Felix goes first and eats 1 candy, 9 candies will remain,\n    # which is divisible by 3. No matter if John eats 1 or 2 candies next,\n    # Felix can always eat such that 6 candies remain after his turn,\n    # then 3, and finally, Felix wins by eating the last candy.\n    \n    felix_first_move = 1\n    felix_winning_strategy_remains = (total_candies - felix_first_move) % 3\n    \n    # If his strategy leaves a number divisible by 3, he wins.\n    if felix_winning_strategy_remains == 0:\n        return \"Felix should go first and eat 1 candy to ensure victory.\"\n    else:\n        return \"No strategy ensures victory if Felix goes first.\"\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    averages = [36, 38, 39, 45, 49]  # The given averages\n    sum_of_4_numbers = [4 * avg for avg in averages]  # Calculate sum of 4 numbers for each average\n    total_sum = sum(sum_of_4_numbers)  # Sum of all sums for the 4-number groups\n    shared_sum = total_sum // 5  # Each number is counted four times in total, divide\n                                 # the total sum by 5 to find the sum of the 5 numbers\n    largest_number = max(sum_of_4_numbers) - shared_sum + (shared_sum // 4)  # The largest number\n                                                                              # will be in the group\n                                                                              # with the largest sum.\n                                                                              # Subtract the shared sum\n                                                                              # then add back in the\n                                                                              # average individual contribution\n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # convert 16.35 to minutes\n    late_time = 4  # 4 minutes late\n    wait_time = second_bus_time - (first_bus_time + late_time)  # time to wait for second bus\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    total_students = 152\n    for boys in range(1, total_students):\n        if (total_students - boys) % 11 == 0 and (boys - (total_students - boys) / 11) == 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    # Since trees are planted at the start and at the end, add one to the calculated number of intervals.\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    num_lorries = (workers + lorry_capacity - 1) // lorry_capacity\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n\n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    num, _ = solve_congruence(*congruences)\n\n    # Find the largest number less than 200 that satisfies the congruences\n    while num < 200:\n        solution = num\n        num += 4 * 5 * 9\n\n    return solution\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room_with_4_students = 5  # Assuming there's one room without students when 5 per room\n    students_with_4_per_room = room_with_4_students * 4 + 6  # All students if there were 4 per room\n    return students_with_4_per_room\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n    while sum_grandsons_ages < bill_age:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        sum_grandsons_ages = sum(grandsons_ages)\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    weight_sugar = 1 * 1000  # Convert 1kg to grams\n    weight_pasta = 50\n    weight_spaghetti = 15\n\n    total_weight = weight_sugar + weight_pasta + weight_spaghetti\n\n    return total_weight\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9   # Initial total sum of seven numbers\n    total_sum_final = 6 * 10    # Final total sum of six numbers after removing one number\n    number_removed = total_sum_initial - total_sum_final\n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people // 3\n    people_remaining = total_people - people_left\n    return people_remaining\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    import math\n    \n    interval_a = 15  # Train from Aytown\n    interval_b = 12  # Train from Beeville\n    interval_c = 8   # Train from Ceeford\n\n    lcm = (interval_a * interval_b * interval_c) // math.gcd(interval_a, math.gcd(interval_b, interval_c))\n    \n    minutes_since_10_am = lcm\n    hours_since_10_am, minutes_since_10_am = divmod(minutes_since_10_am, 60)  # Convert minutes to hours and minutes\n    \n    next_time_hour = 10 + hours_since_10_am\n    next_time_minute = minutes_since_10_am\n    \n    # If next_time_minute is less than 10, add leading zero\n    next_time = f\"{next_time_hour}:{next_time_minute:02d}\"\n    \n    return next_time\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_marks = 79\n    total_questions = 20\n    correct_mark = 5\n    incorrect_mark = -2\n    # Hypothetical scenario: Eddie answered all questions correctly\n    max_marks = total_questions * correct_mark\n    # Difference resulted by each incorrectly answered or not answered question\n    mark_difference = correct_mark - incorrect_mark\n    # Number of questions not answered correctly to reach the actual mark\n    incorrect_answers = (max_marks - total_marks) / mark_difference\n    # Correct answers is total questions minus incorrect ones\n    correct_answers = total_questions - incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    return value\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass = 30  # Time to pass the tree in seconds\n    train_length = 360  # Length of the train in meters\n    \n    # Speed = Distance / Time\n    speed = train_length / time_to_pass  # Speed in meters per second\n    \n    # Convert speed from m/s to km/h by multiplying by 3.6\n    speed_km_per_h = speed * 3.6\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    progress_per_day = day_distance + night_distance\n    distance_before_last_day = total_distance - day_distance\n    days = distance_before_last_day // progress_per_day\n\n    if distance_before_last_day % progress_per_day != 0:\n        days += 1\n\n    # The final climb happens on the next day\n    return days + 1\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # By the inclusion-exclusion principle for three sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # Since we're looking for the minimum number of students who play all three sports,\n    # we need to maximize the pairwise intersections (|A ∩ B|, |A ∩ C|, and |B ∩ C|).\n    # We can do that by assuming that the intersections of any two sports includes all \n    # members of the smallest sports group (swimmers in this case).\n    \n    # Maximum possible size for each pairwise intersection:\n    max_intersection_two_sports = min(swimmers, cyclists, table_tennis_players)\n\n    # Calculating |A ∩ B| + |A ∩ C| + |B ∩ C| with maximum intersections\n    pairwise_intersections = 3 * max_intersection_two_sports\n\n    # Using the inclusion-exclusion principle to solve for the minimum possible of \n    # |A ∩ B ∩ C|, which represents the students who play all three sports:\n    min_all_three = swimmers + cyclists + table_tennis_players - pairwise_intersections - total_students\n\n    # Since the number of students cannot be negative, we take the max between our calculated minimum\n    # and zero to handle cases where the inclusion-exclusion principle gives an impossible negative value.\n    return max(min_all_three, 0)\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Assuming the worst case scenario, we keep picking the most abundant color until we're forced to have one of each.\n\n    # First, we draw all 12 red marbles (since they are the most abundant).\n    # Next, we draw all 9 blue marbles.\n    # Then, we draw all 8 yellow marbles.\n    # At this point we have all three colors, but we need a fourth one.\n    # Finally, we draw one more marble, which is guaranteed to be of the fourth color.\n\n    # Therefore, we add all the marbles drawn plus one.\n    ans = 12 + 9 + 8 + 1 \n    return ans\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for n in range(1, 50):  # Assume a reasonable upper limit for n\n        circle = [2 * i for i in range(1, n + 1)]\n        half_circle = len(circle) // 2\n        ten_index = circle.index(10)\n        twentyfour_index = (ten_index + half_circle) % len(circle)\n        if circle[twentyfour_index] == 24:\n            return len(circle)\n    return -1  # In case no solution is found\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_stationery_percent = 20\n    savings_less_than_food = 6\n\n    books_stationery = (books_stationery_percent / 100) * pocket_money\n    food_plus_transport_plus_savings = pocket_money - books_stationery\n\n    # Let x be the money spent on transport\n    # Then 3x is spent on food, and 3x - 6 is saved.\n    # x + 3x + 3x - 6 = food_plus_transport_plus_savings\n\n    x = (food_plus_transport_plus_savings + 6) / 7\n    savings = 3 * x - savings_less_than_food\n\n    savings_percent = (savings / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n\n    return possible_ages[-1]  # Assuming you want the current age and only one solution\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n    for a in range(3, 6):  # The first digit must be 3, 4, or 5.\n        for b in range(1, 7):  # The second digit: 1-6, cannot be 'a'.\n            if b == a:\n                continue\n            for c in range(1, 7):  # The third digit: 1-6, cannot be 'a' or 'b'.\n                if c == a or c == b:\n                    continue\n                for d in range(1, 7):  # The fourth digit: 1-6, cannot be 'a', 'b', or 'c'.\n                    if d == a or d == b or d == c:\n                        continue\n                    number = int(f'{a}{b}{c}{d}')\n                    if 3267 <= number <= 5120:  # Check if the number is in the range.\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if 75 % i == 0 and i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Original incorrect problem: x - 41 = 50\n    # Correct the subtrahend: x - 14 = Correct Answer\n    \n    incorrect_subtrahend = 41\n    correct_subtrahend = 14\n    incorrect_difference = 50\n\n    # Calculate the minuend\n    minuend = incorrect_difference + incorrect_subtrahend\n    \n    # Calculate the correct difference\n    correct_difference = minuend - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([(-1)**(i+1) * (40 - 2*i) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters = 4\n    sisters_apples_each = 5\n    apples_left = 20\n\n    # Calculate the total apples eaten by Justin and his sisters\n    total_apples_eaten = justin_apples + sisters * sisters_apples_each\n\n    # Calculate the initial number of apples in the basket\n    initial_apples = total_apples_eaten + apples_left\n\n    return initial_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    # Initial loan amount\n    principal = 5000\n    # Final amount after 4 years\n    final_amount = 7320.5\n    # Time period (years)\n    time = 4\n\n    # Calculating the compound interest rate using the formula:\n    # final_amount = principal * (1 + rate) ^ time\n    \n    # Rearranging the formula to solve for the interest rate (rate)\n    rate = (final_amount / principal) ** (1 / time) - 1\n\n    return round(rate, 4)  # rounding off to four decimal places\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    n = 1\n    while True:\n        if (n + 1) ** 2 - n ** 2 == 31:\n            return (n + 1) ** 2\n        n += 1\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 / 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    ans = 56 / 21\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_to_paint_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # minutes in one hour and twenty minutes\n    pictures_painted = total_time_available / time_to_paint_one_picture\n    return pictures_painted\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    seconds = seconds_per_minute * minutes\n    return seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # There are 6 total children including Ann\n    # All children except Ann must receive at least 1 apple, so we start with those 5 apples set aside\n    apples_other_children = 5\n    \n    # The total number of apples is 30\n    total_apples = 30\n    \n    # The remaining apples are for Ann, after the others have at least one each\n    ann_apples = total_apples - apples_other_children\n    \n    return ann_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_num = int(''.join(perm[:3]))\n        second_num = int(''.join(perm[3:5]))\n        third_num = int(''.join(perm[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n    return None\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Since M and N only have prime factors 3 and 5 and the GCD is 75,\n    # which equals 3^1 * 5^2, we can deduce their forms:\n    # M = 3^a * 5^b, N = 3^c * 5^d, with constraint gcd(M, N) = 3^1 * 5^2\n\n    # The number of factors formula for a number p^q is (q + 1)\n    # Since M has 12 factors, (a + 1)(b + 1) = 12, so we find pairs of (a, b) for M\n    m_factors = [(a, b) for a in range(12) for b in range(12) if (a + 1) * (b + 1) == 12]\n\n    # Since N has 10 factors, (c + 1)(d + 1) = 10, so we find pairs of (c, d) for N\n    n_factors = [(c, d) for c in range(10) for d in range(10) if (c + 1) * (d + 1) == 10]\n\n    # Check all combinations of (a, b) for M and (c, d) for N that match GCD condition\n    for a, b in m_factors:\n        for c, d in n_factors:\n            if a > 0 and b > 1 and c > 0 and d > 1:  # GCD condition: At least one exponent of 3 and two of 5\n                M = 3**a * 5**b\n                N = 3**c * 5**d\n                if M % 75 == 0 and N % 75 == 0 and math.gcd(M, N) == 75:\n                    return M + N\n\n# Call the solution function to calculate the answer\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combining a shirt with any pair of pants, then choosing shoes\n    shirt_pants_shoes = shirts * pants * shoes\n\n    # Wearing a dress, then choosing either shoes or heels\n    dress_shoes_heels = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = shirt_pants_shoes + dress_shoes_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all masses to grams\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Calculate the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Calculate the difference between the soil and sand mass\n    difference_g = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference_g // 1000\n    difference_g = difference_g % 1000\n\n    return difference_kg, difference_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    total_buttons = 22\n    # Let the number of buttons James originally has be x\n    # Then Nina originally has (total_buttons - x) buttons\n    # After giving 4 buttons to James, James has (x + 4) buttons and Nina has (total_buttons - x - 4)\n    # They end up with the same number of buttons, so we set these equal to each other and solve for x\n    for x in range(1, total_buttons):\n        if (x + 4) == (total_buttons - x - 4):\n            james_buttons = x\n            nina_buttons = total_buttons - james_buttons\n            break\n    return nina_buttons\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum([sum([j/i for j in range(1, i)]) for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_score = 29\n    correct_points = 4\n    incorrect_points = -2\n\n    for correct_count in range(total_questions + 1):\n        incorrect_count = total_questions - correct_count\n        score = correct_count * correct_points + incorrect_count * incorrect_points\n        if score == total_score:\n            return correct_count\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    length_of_pattern = len(pattern)\n    total_length = 52\n    \n    full_patterns = total_length // length_of_pattern\n    remaining_digits = total_length % length_of_pattern\n    \n    sum_of_pattern = sum(pattern)\n    \n    total_sum = full_patterns * sum_of_pattern + sum(pattern[:remaining_digits])\n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper_available = 4.8\n\n    number_of_kites = total_paper_available / paper_needed_per_kite\n\n    return int(number_of_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    # Number of intervals between trees is one less than the number of trees\n    num_intervals = 79 - 1\n    \n    # Total length of the road is 320 m\n    road_length = 320\n\n    # The distance between each tree is the length of the road divided by the number of intervals\n    distance_between_trees = road_length / num_intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n\n    num_short_rods = total_length / short_rod_length\n\n    return num_short_rods.numerator // num_short_rods.denominator\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_laptops = 30\n    deal_price = 2800\n    laptops_needed = 20\n\n    # Calculate the price without the deal\n    no_deal_price = single_laptop_price * laptops_needed\n\n    # Calculate the price per laptop with the deal\n    price_per_laptop_deal = deal_price / deal_laptops\n\n    # Calculate the total price with the deal for the number of laptops needed\n    deal_price_for_needed_laptops = price_per_laptop_deal * laptops_needed\n\n    # Calculate how much he saves by taking the deal\n    savings = no_deal_price - deal_price_for_needed_laptops\n\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of penguins\n    p = symbols('p')\n\n    # Equation for giving 3 fish to each penguin and having 5 left\n    equation1 = Eq(3 * p + 5, 3 * p + (5 - 3))\n\n    # Equation for giving 4 fish to each penguin and needing 15 more\n    equation2 = Eq(4 * p - 15, 4 * p + (15 - 4))\n\n    # Since both expressions represent the total number of fish\n    # We set them equal to find the number of penguins\n    equation = Eq(3 * p + 5, 4 * p - 15)\n\n    # Solve the equation\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    error_made = 26\n    correct_addition = error_made * 2  # since she should have added but subtracted instead\n\n    actual_number_should_have_obtained = incorrect_result + correct_addition\n    return actual_number_should_have_obtained\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # The ratio of fish to rabbits in Owen's trade is 10 fish for 4 rabbits\n    # This can be written as 10/4 or simplified to 5/2 (fish per rabbit)\n\n    # The ratio of rabbits to packs of wheat in Oscar's trade is 5 rabbits for 6 packs of wheat\n    # This can be written as 5/6 (rabbits per pack of wheat)\n\n    # For Dennis to get 12 packs of wheat, the ratio can be set up as follows\n    # Let x be the number of fish per pack of wheat\n\n    # chain ratio: fish : rabbits : packs of wheat = 5 : 2 : (2/6) or fish to packs of wheat as 5 : (2*(2/6))\n\n    # Simplify the ratio between fish and packs of wheat\n    # fish : packs of wheat = 5 : (4/6)\n    fish_to_wheat_ratio = 5 / (4/6)\n\n    # Now for 12 packs of wheat, we can multiply the ratio with packs of wheat\n    fish_for_12_packs = fish_to_wheat_ratio * 12\n\n    return fish_for_12_packs\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 6 singing performances (S) among themselves\n    sing_perm = factorial(6)\n    \n    # A minimum of 1 singing performance should be between every 2 dancing performances.\n    # We can think of the 4 dancing performances (D) as 3 \"D-D\" pairs + 1 single \"D\" (D - D - D - D).\n    # We need to place them into the \"slots\" created by the singing performances,\n    # which are 7 slots (S _ S _ S _ S _ S _ S _ S).\n    # Thus, we're placing 4 items (3 \"D-D\" pairs + 1 \"D\") into 7 slots:\n    dance_slots = 7\n    \n    # Number of ways to select 4 slots out of 7 for the dancing performances\n    dance_combinations = factorial(dance_slots) // (factorial(4) * factorial(dance_slots - 4))\n    \n    # The total different ways to arrange these performances is the product\n    # of the permutations of singing performances and the combinations of slots for dancing performances.\n    total_ways = sing_perm * dance_combinations\n\n    return total_ways\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n    \n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 35 / 100 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for home_ht in range(4):  # home team's possible half-time scores\n        for away_ht in range(3):  # away team's possible half-time scores\n            # Half-time score must be less than or equal to final score for both teams\n            if home_ht <= 3 and away_ht <= 2:\n                # Both teams can score at most their remaining goals in the second half\n                if 3 - home_ht >= 0 and 2 - away_ht >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero, it's the first digit\n        for b in range(0, 10):\n            if int(f\"{a}{b}\") + int(f\"{b}{a}\") + b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    # Total cookies\n    total_cookies = 1002\n    # Let the number of cookies Emma baked be x\n    # Then the number of cookies Clara baked is 5x\n    # According to the problem, x + 5x = total_cookies\n    # That implies 6x = total_cookies\n    # Solve for x\n    x = total_cookies / 6\n    \n    return int(x)\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n    ways_to_choose = comb(num_students, num_monitors)\n    return ways_to_choose\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n\n    # Equations according to the problem\n    eq1 = Eq(3/8 * g + 3/5 * b + 20, g + b)\n    eq2 = Eq(5/8 * g, 2/5 * b)\n\n    # Solve the equations\n    solved_values = solve((eq1, eq2), (g, b))\n\n    # Total pupils in the class\n    total_pupils = solved_values[g] + solved_values[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike's position in the array can always be the 2nd in line,\n    # the room must be arranged such that there are 2 rows and 2 columns.\n    # Therefore, there are 4 possible positions for Mike.\n    # The possible dimensions of the classroom could then be 1x4, 2x2, or 4x1.\n    # Since Mike is the 2nd, it means the classroom cannot be 1x4 or 4x1,\n    # otherwise Mike would be either 1st or last in the row or column.\n    # Hence, the only possible dimension that meets the condition is 2x2.\n    # Therefore, there are 2*2 = 4 students in Mike's class.\n    return 2*2\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # Calculate weight of half the mangoes.\n    half_mangoes_weight = full_weight - half_full_weight\n\n    # Calculate the weight of the empty basket.\n    empty_basket_weight = full_weight - 2 * half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 400 * 0.85\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let's assume the total number of sweets is x\n    # Given that Pip ate 3/5 of them, which means Bud had 2/5 left\n    # We know that 2/5 of the total sweets is 16\n    # Hence, we can write the equation as (2/5)*x = 16\n    # To find x, we simply divide 16 by 2/5\n\n    bud_sweets = 16\n    total_sweets = bud_sweets * (5/2)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    left_side = 6 * 5\n    right_side = 40\n    \n    percentage = (left_side / right_side) * 100\n\n    return int(percentage)\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_mandy_wants = 5\n\n    cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    total_cost_for_5_cups = cost_per_cup * number_of_cups_mandy_wants\n\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n\n    # Calculate number of rabbits in big mushroom houses\n    rabbits_in_big = big_mushroom_houses * 4\n    # Calculate remaining rabbits for small mushroom houses\n    remaining_rabbits = total_rabbits - rabbits_in_big\n    # Calculate number of rabbits per small mushroom house\n    rabbits_per_small_house = remaining_rabbits // small_mushroom_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    number_of_days_worked = 7  # Monday to Sunday is 7 days\n    total_earnings = average_earnings_per_day * number_of_days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 9, 2))\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    steps = [1, 2, 3]\n    ways = [0] * (6 + 1)\n    ways[0] = 1\n\n    for i in range(1, 7):\n        for step in steps:\n            if i - step >= 0:\n                ways[i] += ways[i - step]\n\n    ans = ways[6]\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July\n    total_pizzas = average_pizzas_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    summation = 21 + 22 + 23\n    for i in range(1, summation + 1):\n        if 2 * 3 * i == summation:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = (20.2 * 3.83) + (2.02 * 143.7) + (18.2 * 79.8)\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship_still_water = 33\n    speed_current = 3\n    distance_upstream = 150\n    \n    # Speed upstream = Speed in still water - Speed of current\n    speed_upstream = speed_ship_still_water - speed_current\n    \n    # Time = Distance / Speed\n    time = distance_upstream / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]  # (remainder, modulus)\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = -(-56 // 4) * 4  # Ceiling division to get the first multiple of 4 greater than or equal to 56\n    last_multiple = 92 // 4 * 4       # Floor division to get the last multiple of 4 less than or equal to 92\n    \n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_series = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    # Initializing sum\n    ans = 0\n    # Adding or subtracting numbers according to the pattern\n    for i in range(1, 61):\n        if i % 4 == 1 or i % 4 == 2:  # The numbers are added\n            ans += i\n        else:  # The numbers are subtracted\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Since we want to find the ones digit of the exponentiation,\n    # It's enough to find the ones digit in the pattern of the powers of 9.\n\n    # The pattern of the ones digit for the powers of 9 is 9, 1, 9, 1, ...\n    # Hence, powers of 9 will end with 9 if the exponent is odd\n    # and will end with 1 if the exponent is even.\n\n    # Since 99 is odd, the ones digit of 999^99 will be the same as 9^99\n    # which is 9, as per the pattern established.\n    return 9\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    # Let x be Claire's current age.\n    # In 6 years, Claire will be x + 6 years old.\n    # According to the problem, in 6 years, she will be 3 times her current age: x + 6 = 3x.\n    # We need to find out her age two years from now, which will be x + 2.\n    \n    # Solving the equation: x + 6 = 3x\n    # 6 = 3x - x\n    # 6 = 2x\n    # x = 6 / 2\n    # x = 3\n    \n    # Claire's current age is 3. Two years from now, she will be:\n    # 3 (current age) + 2 (years) = 5 years old.\n    \n    return 3 + 2\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let t be the normal travel time\n    t = symbols('t')\n    \n    # The actual travel time was 11/12 of the expected time\n    actual_travel_time = (11/12) * t\n    \n    # It arrived 5 minutes late after leaving 15 minutes late\n    # So, it made up 15 - 5 = 10 minutes during the travel\n    equation = Eq(actual_travel_time, t - 10)\n    \n    # Solve for t\n    normal_travel_time = solve(equation, t)[0]\n\n    return normal_travel_time\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Maximum marbles drawn without getting all four colors:\n    # Draw all red, green, and blue marbles which are the three colors with the most marbles.\n    max_marbles_without_all_colors = 4 + 7 + 6\n    \n    # Plus one to ensure the fourth color is included.\n    ans = max_marbles_without_all_colors + 1\n   \n    return ans\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    climb_distance = 3\n    slide_distance = 1\n    effective_climb = climb_distance - slide_distance\n\n    days = (total_distance - climb_distance) // effective_climb + 1\n\n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Stars and bars method (n+k-1 choose k-1), where n=books and k=kids\n    books = 19 - 4  # Subtract the minimum one book per kid\n    kids = 4 - 1    # Subtract 1 from the number of kids for this method\n    ways = factorial(books + kids) // (factorial(books) * factorial(kids))\n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]  # pence\n    amount = 44  # pence\n    smallest_number_of_coins = 0\n    \n    # Start with the largest coin value and work down\n    for coin in coin_values:\n        # If the coin value is too large, skip it\n        if coin > amount:\n            continue\n        \n        # How many of these coins can be used\n        coins_needed = amount // coin\n        amount -= coins_needed * coin\n        smallest_number_of_coins += coins_needed + 1  # Include 1 coin Susan pays\n        \n        # If no change is required, break the loop\n        if amount == 0:\n            break\n        \n    # If some amount is still left we add another coin since Susan has to pay something\n    if amount > 0:\n        smallest_number_of_coins += 1\n    \n    return smallest_number_of_coins\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m, t, and v represent the number of motorbikes, tricycles, and vans respectively.\n    # m has 2 wheels, t has 3 wheels, and v has 4 wheels.\n    m, t, v = symbols('m t v')\n\n    # m * 2 is the number of motorbike wheels\n    # t * 3 is the number of tricycle wheels\n    # v * 4 is the number of van wheels\n\n    # Equation 1: Motorbike and van wheels are 35 more than tricycle wheels\n    equation1 = Eq(2*m + 4*v, 3*t + 35)\n    # Equation 2: Tricycle and van wheels are 13 more than motorbike wheels\n    equation2 = Eq(3*t + 4*v, 2*m + 13)\n    # Equation 3: Total number of wheels\n    equation3 = Eq(2*m + 3*t + 4*v, 101)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # Since we need to find how many more motorbikes than vans there are, we subtract the number of vans from motorbikes\n    return solutions[m] - solutions[v]\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while b < 100:\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, we start by putting one pen in each case.\n    # We then distribute the remaining pens (6 - 3 = 3 pens) into the 3 pencil cases.\n    \n    # This is a problem of distributing n indistinguishable items into r distinguishable boxes,\n    # which is solved by the formula for combinations with repetition:\n    # (n + r - 1) choose (r - 1), where \"choose\" denotes the binomial coefficient.\n    \n    from math import comb\n\n    remaining_pens = 6 - 3  # Because each case must have at least one pen\n    pencil_cases = 3\n\n    # Using combinations with repetition formula\n    ways = comb(remaining_pens + pencil_cases - 1, pencil_cases - 1)\n\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    # Given conditions\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(b, c + 5)\n    equation3 = Eq(c + d, a)\n    equation4 = Eq(d, 41)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, d))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum([(2 * i + 2) ** 2 - (2 * i) ** 2 for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    milk_needed = milk_per_cup * cups_needed\n    return milk_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2  # Pip and Bud themselves\n\n    total_people = people_in_front_of_pip + pip_and_bud + people_behind_bud\n  \n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for month in range(1, 13):\n        if month < 10:\n            month_str = \"0\" + str(month)\n        else:\n            month_str = str(month)\n            \n        for day in range(1, 32):\n            if day < 10:\n                day_str = \"0\" + str(day)\n            else:\n                day_str = str(day)\n            \n            # Check if the day is a valid date in that month\n            date_str = \"2014\" + month_str + day_str\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            \n            # Count the occurrences of 0, 1, 2 in the date\n            zero_count = date_str.count('0')\n            one_count = date_str.count('1')\n            two_count = date_str.count('2')\n            \n            # If the counts of 0, 1, 2 are equal, increment the count\n            if zero_count == one_count == two_count:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # given numbers without p and q\n    given_numbers = [4, 5, 6, 9, 3, 9]\n    # calculate the total sum of the given numbers\n    total_sum_given_numbers = sum(given_numbers)\n    # since average of all 8 numbers is 6, the total sum will be 8 * 6\n    total_sum = 8 * 6\n    # sum of p and q can be calculated by subtracting the sum of given numbers from total sum\n    sum_p_q = total_sum - total_sum_given_numbers\n    \n    # we know that the difference between the highest and the lowest number is 6\n    # highest number in the given set is 9, therefore the lowest cannot be less than 3\n    # since p < q, p must be at least 3, and can thus only be 3\n    p = 3\n    \n    # hence we can calculate q by subtracting p from sum_p_q\n    q = sum_p_q - p\n\n    # since we need the lowest possible value of q, we return q as it is already the lowest possible value\n    return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) / difference) + 1\n\n    return int(term_number)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    total_students = 36\n    students_both = symbols('students_both')\n\n    students_football = 3 * students_both\n    students_basketball = 4 * students_both\n    equation = Eq(students_football + students_basketball - students_both, total_students)\n\n    students_both_solution = solve(equation, students_both)[0]\n\n    return students_both_solution\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    # Since 7, 11 and 13 are co-prime, their LCM is 7*11*13\n    lcm = 7 * 11 * 13\n\n    # Equation of the form x = lcm*k + remainder for all three conditions\n    # with remainders 3, 7, 9 and k being any integer\n    eq1 = x - 3\n    eq2 = x - 7\n    eq3 = x - 9\n\n    # To find the smallest such x satisfying all three equations:\n    # Since they all have to satisfy x = k*lcm + remainder, we need to find the\n    # intersection of these equations. However, because we are looking for the smallest x,\n    # we look for the one that is just greater than or equal to the smallest 5-digit number, 10000.\n    solutions = solve([(eq1) % lcm - (eq2) % lcm, (eq1) % lcm - (eq3) % lcm, x - 10000])\n\n    # Find the smallest valid number\n    smallest = min(filter(lambda n: n >= 10000, (int(s.subs(x, solutions[x])) for s in [eq1, eq2, eq3])))\n\n    return smallest\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam is driving at 60 km/h\n    adam_speed = 60\n    # Jacob is driving at 80 km/h\n    jacob_speed = 80\n    # Jacob reaches home after 3 hours\n    time_jacob = 3\n    # Adam still has 30 minutes to drive after Jacob reaches home\n    time_adam_extra = 0.5\n\n    # Jacob's distance from park = Jacob's speed * time_jacob\n    jacob_distance = jacob_speed * time_jacob\n    # Adam's distance from park when Jacob reaches home = Adam's speed * time_jacob\n    adam_distance_at_jacob_home = adam_speed * time_jacob\n    # Adam's additional distance = Adam's speed * time_adam_extra\n    adam_extra_distance = adam_speed * time_adam_extra\n    # Adam's total distance from park = Adam's distance when Jacob reaches home + Adam's additional distance\n    adam_total_distance = adam_distance_at_jacob_home + adam_extra_distance\n\n    # The total distance between their homes is the sum of the distances both travelled\n    total_distance = adam_total_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_multiply(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    first_operation = custom_multiply(1, 2)\n    second_operation = custom_multiply(first_operation, 3)\n    third_operation = custom_multiply(second_operation, 4)\n    fourth_operation = custom_multiply(third_operation, 5)\n    ans = int(fourth_operation)\n    return ans\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factorization of 252\n    prime_factors = factorint(252)\n\n    # Calculate the number of factors\n    num_factors = 1\n    for exponent in prime_factors.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    # By Pigeonhole Principle\n    cakes_in_most_layer = (total_cakes + total_layers - 1) // total_layers\n    return cakes_in_most_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    paid_gst = 0.91\n    original_cost = paid_gst / gst_rate\n    return original_cost\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # worst case scenario: Lucy takes one of each color first\n    # then she has to take one more to guarantee a pair\n    marbles_taken = 2 + 1\n\n    return marbles_taken\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Convert everything into grams\n    kg_to_g_1 = 2.49 * 1000\n    g_2 = 670\n    kg_to_g_3 = 3 * 1000\n    g_3 = 80\n\n    # Add all the grams together\n    total_g = kg_to_g_1 + g_2 + kg_to_g_3 + g_3\n\n    return total_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "def solution():\n    from math import lcm\n    \n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n    \n    meeting_time = lcm(ashley_time, ben_time, charlie_time)\n    \n    initial_hour = 10\n    initial_minute = 0\n    \n    total_minutes = initial_hour * 60 + initial_minute + meeting_time\n    meeting_hour = total_minutes // 60\n    meeting_minute = total_minutes % 60\n    \n    meeting_hour_formatted = meeting_hour if meeting_hour < 24 else meeting_hour % 24\n    \n    return f\"{meeting_hour_formatted:02d}:{meeting_minute:02d}\"\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # Total exercise time in minutes\n    cycling_fraction = 1/3\n\n    cycling_time = total_time * cycling_fraction\n    jogging_time = total_time - cycling_time\n\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let justin be the variable representing Justin's current age\n    justin = symbols('justin')\n\n    # In 18 years, Justin will be 4 times as old as he was 6 years ago:\n    # justin + 18 = 4 * (justin - 6)\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    # Solve the equation for Justin's age\n    justin_age = solve(equation, justin)[0]\n\n    return justin_age\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    common_difference = 18 - 22  # the common difference between the terms\n    last_term = 2  # the last term before n\n    next_term = last_term + common_difference  # calculating the next term\n    return next_term\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total apples and children\n    total_apples = 30\n    children = 6\n    \n    # Since the number of apples for each child is different and each child\n    # gets at least one apple, we can initially give each child one apple\n    # This would adjust our problem to distributing the remaining apples\n    total_apples -= children  # adjusting total apples after giving each child one apple\n    \n    # We proceed to distribute the remaining apples in descending order\n    # ensuring that each child gets a different number\n    max_apples_for_child = total_apples\n    for i in range(1, children):\n        max_apples_for_child -= i\n    \n    # Add back the one apple initially given to each child to find the final result\n    max_apples_for_child += 1\n    \n    return max_apples_for_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sams_mpg = 72.8\n    toms_extra_gallons = 6 + 3/4\n\n    sams_gallons_used = distance / sams_mpg\n    toms_gallons_used = sams_gallons_used + toms_extra_gallons\n    toms_mpg = distance / toms_gallons_used\n\n    return toms_mpg\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Since there are more brown M&Ms than the others, Bart should take all yellow and red ones.\n    # This way, no matter what, the next one he takes has to be of a different color.\n    # Red: 3, Yellow: 4, Brown: 5\n    yellow_and_red = 3 + 4\n\n    # The smallest number of M&Ms chips Bart needs to take out is the total number of red and yellow M&Ms, plus one more which could be any colour but will ensure the second M&M is of different colour.\n    return yellow_and_red + 1\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    return sum(i**2 for i in range(1, 20, 2))\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    \n    outfit_combinations = shirts * skirts\n    \n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Since we see a clear pattern of multiplication by 3\n    # 1 * 3 = 3, the next term should be 3 * 3 = 9 and so on.\n    \n    # The series is a geometric sequence where each term\n    # is obtained by multiplying the previous term by 3\n    second_term = 3\n    ratio = second_term / 1\n    \n    # To find the third term:\n    third_term = second_term * ratio\n    \n    return third_term\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    difference = 120 - 105  # Common difference\n    first_term = 105 - (6 * difference)  # 7th term - 6*difference = 1st term\n\n    nth_term = first_term + (100 - 1) * difference  # Formula for nth term of arithmetic sequence\n\n    return nth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert the numbers from base 7 to base 10, perform addition, convert back to base 7\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    sum_base10 = num1 + num2\n    if sum_base10 == 0:\n        return '0'\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio\n    original_ratio = Eq(oranges/lemons, 3/5)\n    # New ratio after selling oranges\n    new_ratio = Eq((oranges - 48)/lemons, 1/2)\n\n    # Solving the equations gives us the number of oranges and lemons\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_rabbit_per_day = 4\n\n    total_carrots = rabbits * days * carrots_per_rabbit_per_day\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rate at which each animal eats a bale of hay per day\n    horse_rate = 1 / 2  # The horse eats a bale of hay in 2 days\n    cow_rate = 1 / 3    # The cow eats a bale of hay in 3 days\n    sheep_rate = 1 / 12 # The sheep eats a bale of hay in 12 days\n    \n    # Calculate the total rate at which the hay is being eaten\n    total_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Calculate the total number of days the hay will last\n    days = 22 / total_rate\n    \n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let m be the current age of the mother and d be the current age of the daughter.\n    # According to the problem:\n    # m + (m - d) = 75 .... (1) [When daughter reaches mother's age]\n    # m - (m - d) = 3  .... (2) [When mother was at daughter's age]\n    # Simplifying both equations:\n    # Equation (1) becomes: 2m - d = 75\n    # Equation (2) becomes: d = 3\n    # Now we substitute the value of d in equation (1):\n    # 2m - 3 = 75\n    # 2m = 78\n    # m = 39\n    # So the mother is currently 39 years old.\n\n    d = 3\n    m = (75 + d) / 2\n\n    return int(m)\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    year = \"2014\"\n    # There must be 2 zeros, 2 ones and 2 twos in the representation, \n    # and since the year is fixed as 2014, we only need to find combinations for mmdd\n    for month_day in permutations('001122', 4):\n        month = int(''.join(month_day[:2]))\n        day = int(''.join(month_day[2:]))\n        # Check for valid month and day\n        if 1 <= month <= 12:\n            if month in {1, 3, 5, 7, 8, 10, 12} and 1 <= day <= 31:\n                count += 1\n            elif month == 2 and 1 <= day <= 28:  # February in 2014\n                count += 1\n            elif month in {4, 6, 9, 11} and 1 <= day <= 30:\n                count += 1\n\n    # Since we potentially counted permutations of the same date multiple times, divide by the \n    # number of permutations of \"001122\" (which is 6! / (2! * 2! * 2!)) to get the actual count\n    return count // (720 // (2 * 2 * 2))\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Isabella needs to take all non-red apples to ensure she gets 3 red apples for the worst-case scenario.\n    green_apples = 11\n    yellow_apples = 7\n    non_red_apples = green_apples + yellow_apples\n\n    # After taking all non-red apples, she will need to take 3 red apples.\n    red_apples_needed = 3\n\n    # Total apples she needs to take\n    total_apples_to_take = non_red_apples + red_apples_needed\n\n    return total_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    original_amount = 200\n    new_amount = 204\n    percentage_change = ((new_amount - original_amount) / original_amount) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Assuming all boys are right-handed, we subtract the number of boys from the \n    # total number of right-handed pupils to find the minimum number of right-handed girls\n    boys = total_pupils - girls\n    min_right_handed_girls = max(0, right_handed - boys)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.20\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin tournament with 6 teams, each team plays with every other team once.\n    # Total number of games played = combinations of 6 taken 2 at a time = 6 choose 2\n    from math import comb\n    total_games = comb(6, 2)\n    \n    # There are three possible outcomes for each game: win, lose or tie.\n    # For each game, the total points distributed among the two teams are 2 (either as 2+0 for win/lose or 1+1 for tie).\n    # Therefore, the total points at the end of the tournament is twice the number of games\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n    minibuses_needed = -(-children // minibus_capacity)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    return 101 + 97 + 102 + 99 + 98 + 103 - 100\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Worst case scenario for each color:\n    # - Draw all the red marbles (4)\n    # - Draw all the green marbles except for 1 (6)\n    # - Draw all the blue marbles except for 1 (5)\n    # - Draw the first orange marble (1)\n    # After this, the next draw will guarantee the fourth color\n\n    total_marbles = 4 + 6 + 5 + 1  # total marbles drawn to guarantee 3 different colors\n    ans = total_marbles + 1  # Add one more draw to guarantee the fourth color\n\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # Let x represent the number of girls\n    x = Symbol('x')\n\n    # Boys are 90 more than girls\n    boys = x + 90\n\n    # Total pupils in the school\n    total_pupils = 1690\n\n    # The ratio of the number of girls who can swim to the number who cannot swim is 31:49\n    # Let's represent girls who can swim as 31y and those who can not as 49y\n    # where y is a positive integer factor for the ratio parts\n    girls_can_swim = 31 * y\n    girls_cannot_swim = 49 * y\n\n    # The number of boys who can swim is 120 less than the number who cannot swim\n    # Let's represent boys who can not swim as z and those who can swim as z - 120\n    boys_can_swim = z - 120\n    boys_cannot_swim = z\n\n    # The total school population is the sum of boys and girls, \n    # which is also equal to the sum of those who can swim and those who cannot\n    equations = [\n        x + (x + 90) - total_pupils,\n        31 * y + 49 * y - x,\n        z - (z - 120) - boys,\n        31 * y + z - (49 * y + (z - 120) + x + (x + 90)) - total_pupils\n    ]\n\n    # Solve for x, y and z\n    solutions = solve(equations)\n    \n    # Find y and z using the solved value of x\n    y = solutions[y]\n    z = solutions[z]\n\n    # Number of pupils who cannot swim is composed of girls who cannot swim and boys who cannot swim\n    pupils_cannot_swim = 49 * y + z\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if (number % 2 == 0 and\n            number % 3 == 0 and\n            number % 5 == 0 and\n            number % 7 == 6):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    count = 0\n    n = 1\n    while True:\n        # Count the number of factors of 5 in n!\n        n_factorial_5s = n // 5 + n // 25 + n // 125 + n // 625\n        if n_factorial_5s > 28:\n            break\n        elif n_factorial_5s == 28:\n            count += 1\n            if count > 1:\n                break\n        n += 1\n    return n - count\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    # Initialize list to store possible prime number pairs (a,b)\n    prime_pairs = []\n    \n    # Sieve of Eratosthenes to find all primes up to 41 (the given sum)\n    def sieve_of_eratosthenes(n):\n        prime = [True for _ in range(n+1)]\n        p = 2\n        while (p * p <= n):\n            if (prime[p] == True):\n                for i in range(p * p, n+1, p):\n                    prime[i] = False\n            p += 1\n        return [p for p in range(2, n) if prime[p]]\n\n    # Get all prime numbers up to 41\n    primes = sieve_of_eratosthenes(41)\n\n    # Iterate through the primes to find the pairs (a, b) that satisfy the equation 3a + 7b = 41\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                prime_pairs.append((a, b))\n\n    # Assuming there is at least one pair, return the sum of the first found prime pair\n    if prime_pairs:\n        a, b = prime_pairs[0]\n        return a + b\n    else:\n        return None\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_per_unit_4pc = 7 / 4\n    cost_per_unit_6pc = 8.5 / 6\n    better_buy = \"4pc\" if cost_per_unit_4pc < cost_per_unit_6pc else \"6pc\"\n    return better_buy\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet = 1\n    win_amount = 10\n    loss_amount = -bet\n\n    # Calculate the probability of the sum of two dice being greater than 10\n    # There are 6 ways to get a sum of 11: (5,6), (6,5), (6,6)\n    # There are 3 ways to get a sum of 12: (6,6)\n    favourable_outcomes = 6 + 3\n    total_outcomes = 6 * 6  # Total outcomes for two dice\n    probability_win = favourable_outcomes / total_outcomes\n\n    # Expected value calculation\n    expected_win = probability_win * win_amount\n    expected_loss = (1 - probability_win) * loss_amount\n\n    # Total expected value per game\n    expected_value_per_game = expected_win + expected_loss\n    \n    # Expected total loss after 60 games\n    expected_total_loss = total_rolls * expected_value_per_game\n    \n    return -expected_total_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    equation = Eq(salary - (740 + (salary - 740) * 3 / 4), salary / 5)\n\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_basket = total_weight_with_apples - weight_with_two_apples - 3 * (weight_with_two_apples // 2)\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    all_permutations = set(permutations(digits, r=1)) | set(permutations(digits, r=2)) | set(permutations(digits, r=3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Initial time 02:31\n    current_time = datetime.strptime(\"02:31\", \"%H:%M\")\n    \n    while True:\n        # Add one minute to current time \n        current_time += timedelta(minutes=1)\n        # Check if all digits 0, 1, 2, 3 appear together\n        if all(digit in current_time.strftime(\"%H:%M\") for digit in \"0123\"):\n            # Break the loop if all digits appear\n            break\n            \n    # The next time all digits appear is at 03:12\n    next_time = datetime.strptime(\"03:12\", \"%H:%M\")\n    \n    # Calculate the difference in minutes\n    difference = int((next_time - current_time).total_seconds() / 60)\n    \n    return difference\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100\n    original = after_class * 2\n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Lynn and Mary had\n    x = symbols('x')\n\n    # After Lynn spent $160, she had x-160 left\n    # After Mary spent $58, she had x-58 left\n    # According to the problem, Mary had thrice as much money left as Lynn\n    equation = Eq(x - 58, 3 * (x - 160))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Calculate how much money Lynn had left after spending $160\n    lynn_left = solution[0] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def diamond(A, B):\n    return A * A - 3 * B\n\ndef triangle(A, B):\n    return 5 * A - B * B\n\ndef solution():\n    result_diamond = diamond(4, 2)\n    ans = triangle(result_diamond, 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = 3 / 7 * total_grapes\n    remainder_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = 3 / 8 * remainder_after_monday\n    remainder_after_tuesday = remainder_after_monday - sold_on_tuesday\n    \n    bag_weight = 3 / 4\n    number_of_bags = remainder_after_tuesday / bag_weight\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60\n    tickets_unsold = 28\n    percent_unsold = 100 - percent_sold\n    \n    total_capacity = tickets_unsold * 100 / percent_unsold\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    divisor = 27\n    remainder = 9\n    quotient = 27\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Deⅵ and Jerry's current ages\n    devis_age, jerrys_age = symbols('devis_age jerrys_age')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(devis_age, jerrys_age + 8)  # Deⅵ is 8 years older than Jerry\n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((devis_age + 4) / (jerrys_age + 4), 5/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devis_age, jerrys_age))\n\n    # Jerry's current age\n    return solutions[jerrys_age]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (64 - 2 * i) for i in range(11))\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_place_subtrahend in range(1, 10):\n        for ones_place_subtrahend in range(0, 10):\n            for tens_place_minuend in range(1, 10):\n                for ones_place_minuend in range(0, 10):\n                    incorrect_subtrahend = 10 * tens_place_subtrahend + ones_place_subtrahend\n                    correct_subtrahend = 10 * (tens_place_subtrahend - 2) + (ones_place_subtrahend - 2)\n                    minuend = 10 * tens_place_minuend + ones_place_minuend\n                    if minuend - correct_subtrahend == 36:\n                        if (tens_place_subtrahend * 10 + 3) - (ones_place_subtrahend + 2) == minuend - incorrect_subtrahend:\n                            return 36 + (incorrect_subtrahend - correct_subtrahend)\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 4, 41)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195              # Total ml of apple juice\n    jug_capacity = 250              # Capacity of jugs in ml\n    num_jugs = -(-total_ml // jug_capacity)  # Least number of jugs required\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Total balls initially\n\n    # Let's denote x as the number of red balls to be removed.\n    # The bag should then contain 90% red balls and 10% blue balls.\n    # This means the number of remaining red balls, which is 49 - x,\n    # should be 90% of the total number of balls after x balls are removed (total_balls - x).\n    \n    # We set up the equation:\n    # (49 - x) / (total_balls - x) = 0.9\n    # Solving for x gives us the number of red balls to remove.\n\n    for x in range(49):\n        if (49 - x) / (total_balls - x) == 0.9:\n            return x\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    numerator = 100\n    ans = 0\n    for i in range(97, 0, -1):\n        ans += numerator / i\n        numerator *= i - 2\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    total_matches = 220\n\n    weight_of_matches = total_weight_with_matches - weight_of_empty_box\n    weight_of_one_match = weight_of_matches / total_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    # We have two equations based on the problem statement:\n    # Equation 1: number of cows + number of birds = 1300\n    # Equation 2: number of cows' legs (4 per cow) + number of birds' legs (2 per bird) = 3440\n    equation1 = Eq(cows + birds, 1300)\n    equation2 = Eq(4*cows + 2*birds, 3440)\n\n    # Solve the system of equations for the number of cows and birds\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            factors += 2 if i * i != n else 1\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the velocities\n    v_north, v_west = symbols('v_north v_west')\n    \n    # Conservation of momentum equations\n    # Momentum before = Momentum after for the north direction\n    # Momentum before = Momentum after for the west direction\n    # m1 * v1 + m2 * v2 = (m1 + m2) * v_after\n    equation1 = Eq(500 * 20, 1000 * v_north)\n    equation2 = Eq(500 * 30, 1000 * v_west)\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (v_north, v_west))\n    \n    return solutions[v_north], solutions[v_west]\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            if tens % 4 == 0:  # Checking if the digit in tens place is divisible by 4\n                for ones in range(1, 10, 2):  # Only consider odd numbers for the ones place\n                    number = 100 * hundreds + 10 * tens + ones\n                    if number % 9 == 0 and number > max_number:\n                        max_number = number  # Update the max number if conditions are met\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Let x be the number of pens Ben has initially.\n    # After giving 28 pens, Jenny has 83 - 28 pens.\n    # They will have the same number of pens, which means Ben will also have 83 - 28 pens.\n    # So the equation is: x + 28 = 83 - 28\n\n    # Solve for x.\n    pens_with_ben_initially = (83 - 28) - 28\n\n    return pens_with_ben_initially\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return int(total_books)\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_length = 2 * (21 - 1)  # since there are trees at both ends, we subtract 1 from the number of trees before multiplying by the interval\n    lamp_posts_interval = 10\n    num_lamp_posts = (total_length // lamp_posts_interval) + 1  # add 1 to include the lamp post at the beginning\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    return 15.05 - 14.84\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colours = 5  # black, white, red, yellow, purple\n\n    ans = sizes * colours  # each size can have any of the 5 colours\n\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of people in the original group and their total weight\n    original_people, original_total_weight = symbols('original_people original_total_weight')\n    \n    # Symbol for the original average weight, before Aaron joined\n    original_average = symbols('original_average')\n    \n    # Equation 1: the average weight before Aaron joined\n    equation1 = Eq(original_total_weight / original_people, original_average)\n    \n    # Equation 2: the average weight after Aaron joined\n    equation2 = Eq((original_total_weight + 45) / (original_people + 1), 61)\n    \n    # Equation 3: the average weight after Ben joined\n    equation3 = Eq((original_total_weight + 45 + 71) / (original_people + 2), 62)\n    \n    # Solve the system of equations for the original average\n    solutions = solve((equation1, equation2, equation3), (original_people, original_total_weight, original_average))\n\n    return solutions[original_average]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 5):\n        s, e, n, d, m = p\n        send = int(s + e + n + d)\n        more = int(m + o + r + e)\n        money = int(m + o + n + e + y)\n        if send + more == money:\n            return int(s)  # Value of one triangle represents 's'\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    pairs = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                pairs += 1\n    return pairs\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    length_of_pattern = len(pattern)\n    total_digits = 2000\n\n    full_patterns = total_digits // length_of_pattern\n    remaining_digits = total_digits % length_of_pattern\n\n    sum_full_patterns = sum(pattern) * full_patterns\n    sum_remaining_digits = sum(pattern[:remaining_digits])\n\n    ans = sum_full_patterns + sum_remaining_digits\n\n    return ans\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # total cost in pounds\n    coffee_cost = 3.69  # coffee cost in pounds\n    milk_cost = 0.89  # milk cost in pounds (converted from pence to pounds)\n\n    # Calculate the sugar cost\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    # Return the cost of the bag of sugar\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour    # Returning the hour that satisfies the condition\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # In the worst case, Sheila draws 3 balls without getting 4 of the same color.\n    # These could be one of each color.\n    blue = 5\n    orange = 4\n    yellow = 2\n    \n    # If she then draws 3 more, she might get three more balls without getting 4 of the same color.\n    # She now might have 2 blue, 2 orange, and 2 yellow.\n    \n    # Now, no matter which color she grabs next, it will be the fourth ball of that color.\n    # Since blue has the most balls, she will be guaranteed to get the fourth blue by or \n    # before she has drawn all the other balls.\n    \n    # Hence, she takes out 3 (first round of each color) + 3 (second round of each color) + 1 (guaranteed 4th of one color) \n    balls_needed = 3 + 3 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    cost_oranges_per_kg = 1.5\n    cost_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n\n    total_cost = (cost_oranges_per_kg * weight_oranges_kg) + (cost_mangoes_per_kg * weight_mangoes_kg)\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    return (45 / 9) * (100 / 10) + (23 - 19)\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Given numbers without 'a'\n    mean = 5\n    total_numbers = len(numbers) + 1  # Total numbers including 'a'\n    total_sum = mean * total_numbers  # Total sum of all numbers including 'a'\n    \n    sum_without_a = sum(numbers)  # Sum of given numbers without 'a'\n    a = total_sum - sum_without_a  # Total sum minus sum without 'a' gives 'a'\n    \n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A can complete the job in 15 days, B can complete the job in 10 days.\n    work_per_day_A = 1/15\n    work_per_day_B = 1/10\n\n    # They work together for 4 days.\n    work_done_in_4_days = 4 * (work_per_day_A + work_per_day_B)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_in_4_days\n\n    # Now, how many days will B take to finish the remaining work.\n    days_for_B_to_finish = remaining_work / work_per_day_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    n = 13\n    # The first half of the pyramid (excluding the middle row): 1+2+3+...+12\n    first_half = n * (n - 1) // 2\n    # The middle row of the pyramid: 13\n    middle = n\n    # The second half of the pyramid is the same as the first: 12+11+...+1\n    second_half = first_half\n    \n    # Adding up both halves and the middle row\n    total = first_half + middle + second_half\n\n    return total\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    price_reduction = original_price - reduced_price\n    percentage_reduction = (price_reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    for girls in range(1, 1000, 2):  # Start with 1 girl layer and increment by 2 for alternate layers\n        boys = girls + 2  # Boys layers are always on the outside of the girls\n        total_girls = (girls ** 2)  # Total girls will be girls layers squared\n        total_boys = (boys ** 2) - total_girls  # Boys are the difference between square of boys and girls\n\n        if total_boys - total_girls == 52:  # Check if difference between boys and girls is 52\n            total_students = total_girls + total_boys  # Calculate the total students\n            return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n    num_test_tubes = 0\n\n    while 2 ** num_test_tubes < num_bottles:\n        num_test_tubes += 1\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    duck_legs = 4 * 2  # each duck has 2 legs\n    goose_legs = 2 * 2 # each goose has 2 legs\n    total_legs = 36 # total number of legs\n\n    remaining_legs = total_legs - (duck_legs + goose_legs)\n    lamb_legs = 4 # each lamb has 4 legs\n    \n    num_lambs = remaining_legs / lamb_legs\n    \n    return int(num_lambs)\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # Reversing the process for the fourth day\n    initial_day4 = remaining_sweets / (1 - 1/4)\n\n    # Reversing the process for the third day\n    initial_day3 = initial_day4 / (1 - 1/5)\n\n    # Reversing the process for the second day\n    initial_day2 = initial_day3 / (1 - 1/6)\n\n    # Reversing the process for the first day\n    initial_day1 = initial_day2 / (1 - 1/7)\n\n    return initial_day1\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the total number of cookies Charlene had at first\n    total_cookies = symbols('total_cookies')\n\n    # Charlene keeps half plus 8\n    charlene_kept = (1/2) * total_cookies + 8\n    \n    # The remaining given to Emerald\n    emerald_received = total_cookies - charlene_kept\n\n    # Emerald eats one third of what she received plus 4\n    emerald_ate = (1/3) * emerald_received + 4\n    emerald_left = emerald_received - emerald_ate\n\n    # Hebe receives the remainder from Emerald\n    hebe_ate = emerald_left / 4\n    \n    # Hebe has 42 left\n    hebe_left = 42\n    emerald_left = hebe_left + hebe_ate\n\n    # Create the equation and solve for total_cookies\n    equation = Eq(emerald_left, emerald_received - ((1/3) * emerald_received + 4))\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    matches_per_team = 30 // 2\n\n    # We are using n*(n-1) = matches_per_team * 2 to find the number of teams\n    # because each team plays n-1 matches at home and n-1 matches away\n\n    # Quadratic equation coefficients for n^2 - n - 2*matches_per_team = 0\n    a = 1\n    b = -1\n    c = -2 * matches_per_team\n\n    # Solving for n\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        n1 = (-b + discriminant**0.5) / (2*a)\n        n2 = (-b - discriminant**0.5) / (2*a)\n        n = int(max(n1, n2))  # we want the positive, integer solution\n    else:\n        n = 0  # No real number solution\n\n    return n\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    return 528 + 30\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    daily_output = 720 // 5\n    total_days_needed = 3600 // daily_output\n    \n    return total_days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Function that calculates the number of ways to reach the nth step\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Total number of ways to reach the 5th step (his lucky number)\n    ways_to_5th = fibonacci(5)\n    \n    # Total number of ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = fibonacci(6) # Note: It's 6 because he's starting from step 5 to step 10\n    \n    # Total ways will be the product of the two possibilities\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    first, second, third = symbols('first second third')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n    \n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve((equation, Eq(girls, 45)), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # Prime factors relevant to zeros at the end are 2 and 5\n    # As one 2 and one 5 make one 10, which has one 0 at the end\n    prime_factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    # Count how many 2s and 5s are among the prime factors\n    count_2 = prime_factors.count(2) + (prime_factors.count(8) * 3)  # Each 8 contributes three 2s\n    count_5 = prime_factors.count(5) + (prime_factors.count(25) * 2)  # Each 25 contributes two 5s\n    \n    # Number of zeros will be the minimum of the number of 2s and 5s\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):  # since 7^2=49 is the only square number between 40 and 50\n        n = i**2\n        if n > 40 and n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    jug_initial = 150\n    cup_amount = 40\n    cups_poured = 3\n\n    water_left = jug_initial - (cup_amount * cups_poured)\n    \n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50\n    total_cost_eq = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    \n    # A notebook and a pencil case cost $6\n    notebook_pencil_case_eq = Eq(notebook + pencil_case, 6)\n    \n    # A pencil case and an eraser cost $8\n    pencil_case_eraser_eq = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((total_cost_eq, notebook_pencil_case_eq, pencil_case_eraser_eq), \n                      (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x', integer=True)\n    eq = Eq(x * (x + 1) * (x + 2) * (x + 3), 3024)\n    solutions = solve(eq, x)\n\n    largest_number = max(solutions) + 3\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alan's and Bob's initial number of cards\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: After Colin gives Bob 25 cards, Bob has 3 times as many cards as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    # Alan's number of cards is what we want to determine\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        ""
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    # Each of the 10 students shakes hands with the other 9 students\n    # But this counts each handshake twice (once for each student)\n    # So we need to divide by 2 to get the unique handshakes\n    total_students = 10\n    handshakes_per_student = total_students - 1\n    total_handshakes = (total_students * handshakes_per_student) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    # For 0.1(1)9925(7), the fraction is (0.11199257 - 0.1) / 0.9999\n    # For 0.2(3)456(7), the fraction is (0.234567 - 0.2) / 0.999\n    \n    fraction1_numerator = int(\"1\" + \"99257\" * 2) - int(\"1\")\n    fraction1_denominator = int(\"9\" * 6)\n    fraction1 = fraction1_numerator / fraction1_denominator\n\n    fraction2_numerator = int(\"2\" + \"4567\" * 2) - int(\"2\")\n    fraction2_denominator = int(\"9\" * 5)\n    fraction2 = fraction2_numerator / fraction2_denominator\n\n    # To find the nth decimal digit where the recurring 7 occurs,\n    # compare the decimal expansions of both fractions digit by digit.\n    str_fraction1 = str(fraction1)\n    str_fraction2 = str(fraction2)\n    \n    for n in range(len(str_fraction1)):\n        if str_fraction1[n] == str_fraction2[n] and str_fraction1[n] == '7':\n            return n - 1  # Subtract 1 because index starts from 0\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Since the number of pages forms an arithmetic sequence, we can calculate the number of terms (days)\n    # using the formula for the sum of an arithmetic sequence:\n    # total_pages = n/2 * (first_day_pages + last_day_pages)\n    # where n is the number of terms\n    # We can rearrange this formula to solve for n:\n    # n = 2 * total_pages / (first_day_pages + last_day_pages)\n\n    n = 2 * total_pages / (first_day_pages + last_day_pages)\n\n    # Now we know the number of days and the first and last day's number of pages, we can find the common difference (d)\n    # using the formula for the nth term of an arithmetic sequence:\n    # last_day_pages = first_day_pages + (n - 1) * d\n    # We can rearrange this formula to solve for d:\n    # d = (last_day_pages - first_day_pages) / (n - 1)\n\n    d = (last_day_pages - first_day_pages) / (n - 1)\n\n    return int(d)\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_pounds = 416\n    afternoon_pounds = 248\n    difference = morning_pounds - afternoon_pounds\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_weight = 10\n    orange_to_water_ratio = 2 / 25\n    water_weight = orange_weight / orange_to_water_ratio\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    # Scores from the first four judges\n    scores = [7.9, 8.3, 8.8, 8.6]\n    \n    # Sum of scores from the first four judges\n    sum_scores = sum(scores)\n\n    # Total required sum of scores for an average of 8.5 from five judges\n    required_sum = 8.5 * 5\n\n    # Minimum score needed from the fifth judge\n    min_score = required_sum - sum_scores\n\n    return min_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    total_interest = 816\n    # Let's denote the interest rate per year as r\n    # At the end of the first year, the interest is principal * r\n    # At the end of the second year, the interest is (principal + principal * r) * r\n    # The total interest for two years is principal * r + (principal + principal * r) * r = total_interest\n\n    # We can now form the equation and solve for r:\n    # principal * r + (principal + principal * r) * r = total_interest\n    # principal * r^2 + 2 * principal * r - total_interest = 0\n    # Since this is a quadratic equation in r, we can solve for r using the quadratic formula.\n    \n    # We can import sqrt function to solve the quadratic equation\n    from math import sqrt\n\n    # Coefficients for the quadratic equation ar^2 + br + c = 0\n    a = principal\n    b = 2 * principal\n    c = -total_interest\n\n    # Calculate discriminant\n    discriminant = b**2 - 4 * a * c\n\n    # Calculate two possible solutions for r\n    r1 = (-b + sqrt(discriminant)) / (2 * a)\n    r2 = (-b - sqrt(discriminant)) / (2 * a)\n\n    # Only the positive root makes sense for an interest rate\n    r = r1 if r1 > 0 else r2\n\n    # Convert from decimal to percentage\n    interest_rate = r * 100\n    \n    return interest_rate\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Division with remainder\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Incorrect step in the solution\n    wrong_multiplication = quotient * remainder\n\n    # Correct step is to multiply the quotient by the divisor, then add the remainder\n    original_number = quotient * divisor + remainder\n\n    return original_number\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    original_number = (final_number - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hannah_speed = symbols('hannah_speed')\n    peter_speed = hannah_speed + 15\n    ratio = 3 / 4\n\n    equation = Eq(peter_speed / hannah_speed, ratio)\n\n    hannah_speed_value = solve(equation, hannah_speed)\n\n    return hannah_speed_value[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Two equations given by the problem\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n\n    # Equation for the transaction made by Brad\n    brad_equation = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, brad_equation), (mango, pear, apple))\n\n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choices = 23\n    time_spent_fill_in_the_blank = 35\n\n    time_left_for_short_answers = total_time - (time_spent_multiple_choices + time_spent_fill_in_the_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850  # length of the train in meters\n    train_speed = 30    # speed of the train in meters per second\n    time_to_cross = 45  # time to cross the tunnel in seconds\n\n    # Distance covered by the train while crossing the tunnel\n    distance_covered = train_speed * time_to_cross\n    \n    # The length of the tunnel is total distance covered minus the length of the train\n    tunnel_length = distance_covered - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    # The formula to calculate the maximum number of parts by circles is: parts = n^2 + n + 2\n    # where n is the number of circles\n    parts_by_circles = circles**2 + circles + 2\n    # Each additional line can intersect the circles at 2*number of circles points and can intersect\n    # itself. The number of parts added by one line is circles*2 + 1  \n    parts_by_line = circles * 2 + 1\n    ans = parts_by_circles + parts_by_line\n    return ans\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_ways = permutations(4, 3)  # Total ways for three people to enter different entrances\n    prohibited_ways = permutations(3, 2)  # Ways where Joe and Mike enter the same entrance\n    \n    ans = total_ways - prohibited_ways  # Subtract the prohibited ways from the total ways\n    return ans\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    \n    # Let x be the money spent on transportation\n    # Then money spent on food is 2x\n    # According to the problem, x + 2x = spent_money\n    transportation_money = spent_money / 3\n    food_money = 2 * transportation_money\n    \n    return food_money\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # cost for the first 3 tons\n    fixed_cost = 4 * 3 + 4  # $4 per ton for the first 3 tons + $4 service fee\n    # remaining money after fixed cost\n    remaining_money = 109 - fixed_cost\n    # calculate how many additional tons can be bought\n    additional_tons = remaining_money // 3\n    # total tons of water she can use\n    total_tons = 3 + additional_tons\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of fifty-cent coins and one-dollar coins originally Owen had\n    fifty, one_dollar = symbols('fifty one_dollar')\n\n    # Given that 2/7 of his coins were fifty-cent coins initially\n    # So, 5/7 of his coins were one-dollar coins\n    # total_coins = fifty + one_dollar\n    # fifty = 2/7 * total_coins\n    # one_dollar = 5/7 * total_coins\n    equation1 = Eq(fifty, one_dollar * (2/5))\n\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins (which is 10 fifty-cent coins)\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    # new_fifty = fifty + 10\n    # new_one_dollar = one_dollar + 10\n    equation2 = Eq(fifty + 10, (one_dollar + 10) / 2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (fifty, one_dollar))\n\n    # The number of coins Owen had at first\n    total_coins_at_first = solutions[fifty] + solutions[one_dollar]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    carl, daniel = symbols('carl daniel')\n    \n    equation_bala = Eq((amelia + carl + daniel) / 2, amelia + 320)\n    equation_carl = Eq((3/4) * (amelia + (amelia + 320) + daniel), carl)\n    equation_total = Eq(amelia + (amelia + 320) + carl + daniel, 6230)\n    \n    solutions = solve((equation_bala, equation_carl, equation_total), (carl, daniel))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor is 1 more than the remainder.\n    smallest_divisor = remainder + 1\n    # Calculate the smallest possible dividend\n    smallest_dividend = (quotient * smallest_divisor) + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time it takes for the lazy gardener to mow the lawn on his own\n    # We know that in one hour, the quick gardener can mow 1/12 of the lawn\n    # If the two gardeners can mow the entire lawn in 8 hours working together,\n    # then in one hour they can mow 1/8 of the lawn together\n    # Let y be the part of the lawn the lazy gardener can mow in one hour\n    # So we have the equation:\n    # 1/12 + y = 1/8\n    # Solving for y will give us the part of the lawn the lazy gardener can mow in one hour\n    # Then the time the lazy gardener will take to mow the entire lawn will be 1/y\n\n    # Now we solve for y\n    y = 1/8 - 1/12\n\n    # The time the lazy gardener will take to mow the entire lawn will be the inverse of y\n    time_for_lazy_gardener = 1/y\n\n    return time_for_lazy_gardener\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    # Number of oranges was 32 more than the number of apples\n    equation1 = Eq(oranges, apples + 32)\n    \n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    # Calculate the total number of fruits Steve had at first\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    girls = 3\n    candy_per_girl = total_candy // girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n    \n    matthew_tomatoes = belinda_tomatoes - tomatoes_given\n    matthew_tomatoes_initial = matthew_tomatoes - tomatoes_given\n    \n    return matthew_tomatoes_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_money = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_money = 5 * x\n    \n    # Equation: Total = Cost of dresses + Cost of skirts + Remaining\n    equation = Eq(total_money, dress_cost * x + skirt_cost * x + remaining_money)\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    # Interval for green line train in minutes\n    green_interval = 5\n\n    # Interval for red line train in minutes\n    red_interval = 6\n\n    # Calculate the least common multiple (LCM) to determine when they will leave together again\n    lcm_val = (green_interval * red_interval) // gcd(green_interval, red_interval)\n\n    # Convert the minutes to hours and minutes\n    hours = lcm_val // 60\n    minutes = lcm_val % 60\n\n    # Since the trains start at 5 am, add the hours to 5 and adjust for 24-hour time format if needed\n    result_hour = (5 + hours) % 24\n    result_minute = minutes\n\n    return f\"{result_hour:02d}:{result_minute:02d}\"\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Initialize the result variable.\n    ans = 0\n    # Set the current term and multiplier for multiplication.\n    current_term = 1\n    multiplier = 2\n    # Continue to multiply and add until reaching the last term.\n    while multiplier < 15:\n        # Multiply the current term by the next multiplier.\n        current_term *= multiplier\n        # Add the current term to the result.\n        ans += current_term\n        # Increment the multiplier. If it's even, increase by 1, else by 2 (to keep odd).\n        multiplier += 1 if multiplier % 2 == 0 else 2\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990  # in mL\n    half_capacity = total_capacity / 2\n    cups = 3\n\n    capacity_per_cup = half_capacity / cups\n\n    return capacity_per_cup\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3\n    trees = 101\n    walking_time = 3 # in minutes\n\n    # Calculate the total distance Olivia walks from the first to the 101th tree\n    total_distance_till_101_tree = (trees - 1) * distance_per_tree\n\n    # Calculate Olivia's walking speed (meters per minute)\n    olivia_speed = total_distance_till_101_tree / walking_time\n\n    # Calculate how long it takes for her to walk to school\n    total_time_to_school = 4000 / olivia_speed\n\n    return total_time_to_school\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of one apple and one banana\n    apple_price, banana_price = symbols('apple_price banana_price')\n    \n    # Create equations based on the given information\n    equation1 = Eq(3 * apple_price + 2 * banana_price, 1.25)\n    equation2 = Eq(apple_price + banana_price, 0.48)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple_price, banana_price))\n    \n    # Calculate the cost to buy 5 bananas\n    cost_5_bananas = 5 * solutions[banana_price]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # The sum of squares of an arithmetic series can be obtained by the formula:\n    # sum = (n/6) * (2n+1) * (n+1) assuming the series is 1^2 + 2^2 + ... + n^2\n    # Here the series is 4^2, 8^2, ..., 124^2 which is 2^2 times (1^2, 2^2, ..., 31^2)\n    # So we first calculate the number of terms, n = 31 (since 124/4 = 31)\n    n = 124 // 4\n    sum_of_squares = (n * (2 * n + 1) * (n + 1)) // 6\n    ans = (2**2) * sum_of_squares  # Multiply by 2^2 to adjust for the series being 4^2, 8^2, ..., 124^2\n    return ans\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Ratio of fish to rabbits in Owen's trade: 5 fish for 2 rabbits, which simplifies to 5/2\n    fish_to_rabbit_ratio = 5 / 2\n\n    # Ratio of rabbits to packs of wheat in Oscar's trade: 4 rabbits for 7 packs of wheat, which simplifies to 4/7\n    rabbit_to_wheat_ratio = 4 / 7\n\n    # Determine the combined ratio of fish to wheat by multiplying the individual ratios\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Given that Dennis wants 14 packs of wheat, we find out how many fish Owen should give for these packs\n    fish_for_14_packs = fish_to_wheat_ratio * 14\n\n    return fish_for_14_packs\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 'ABC'\n    people = 'LJAJ'\n\n    # Generate all permutations for four people entering three gates\n    all_permutations = set(permutations(people, 4))\n\n    count = 0\n    for perm in all_permutations:\n        if all(entrance in perm for entrance in entrances):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    incorrect_score = -2\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_score) + (incorrect_answers * incorrect_score)\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the initial number of cows, and 'g' be the initial number of goats.\n    c, g = symbols('c g')\n\n    # Initially, cows were 65% of the total animals, so goats were 35%.\n    # Hence, (c / (c + g)) = 0.65 and (g / (c + g)) = 0.35.\n    initial_cows_fraction = Eq(c / (c + g), 0.65)\n\n    # After 240 animals were added, the percentage of cows became 85% and the number of goats doubled.\n    # So the new count of cows (c_new) is (0.85 * (c + g + 240)).\n    # The new count of goats (g_new) is (2 * g).\n    # We have the new total number of animals as (c + g + 240).\n    # Hence, (c_new / (c + g + 240)) = 0.85, and (g_new / (c + g + 240)) = 0.15.\n    # Since (g_new) = (2 * g), we can also write (2 * g / (c + g + 240)) = 0.15.\n    new_cows_fraction = Eq(0.85, (c + 240) / (c + g + 240))\n    double_goats = Eq(2 * g, 0.15 * (c + g + 240))\n\n    # Solving both equations\n    solutions = solve((initial_cows_fraction, new_cows_fraction, double_goats), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n\n    total_time = time_per_drawing * total_drawings\n\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    for cookies in range(1, 8*9):  # Since 8 and 9 are coprime, cookies must be less than their product.\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)] \n    ans = solve_congruence(*congruences)\n    return [num for num in ans if num < 100][0]\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    # Check for discount based on conditions\n    if total_cost >= 50:\n        total_cost -= 15\n    elif total_cost >= 20:\n        total_cost -= 4\n\n    return total_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    \n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    arrangements_for_boys = permutations(2, 2)  # Arranging 2 boys at both ends\n    arrangements_for_girls = permutations(3, 3) # Arranging 3 girls in the middle\n    \n    total_arrangements = arrangements_for_boys * arrangements_for_girls\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for age in ages:\n        if age % 3 == 0 and age != max(ages):  # Tom's age is a multiple of 3 and he is not the youngest\n            adam_age = age\n            break\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case: Draw all balls of 2 colors without getting the third color\n    worst_case = 5 + 5\n    # We add one more to ensure we get the third color\n    must_draw = worst_case + 1\n\n    return must_draw\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num = '2023'\n    n = 1\n    while True:\n        number_to_check = int(num * n)\n        if number_to_check % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = symbols('b')\n    equation = Eq(4*b - 9, 7)\n    solution_b = solve(equation, b)\n    return solution_b[0]\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    result = 483 / 21\n    return int(result)\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    total_apples = 28\n    num_children = 5  # excluding Avril\n    max_apples_for_avril = total_apples - (1 + 2 + 3 + 4 + 5) # because we need to give each of the other children at least one apple, and no two can have the same number\n    return max_apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let's assign variables to the shapes\n    triangle = symbols('triangle')\n    square = symbols('square')\n    circle = symbols('circle')\n    diamond = symbols('diamond')\n  \n    # Given equations\n    equation1 = Eq(2 * triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Now we need to find out how many triangles are equal to one diamond\n    triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return triangles_in_diamond\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5/8\n    cost_laptop = total_money * fraction_spent\n    return cost_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    jocye_lori_ratio = 3 / 2  # The ratio of Jocye's speed to Lori's speed\n    jocye_speed = jocye_lori_ratio * lori_speed  # Jocye's speed in meters per second\n    time_in_seconds = 10  # Time duration for which Jocye runs\n\n    distance_run_by_jocye = jocye_speed * time_in_seconds  # Distance Jocye runs in 10 seconds\n    \n    return distance_run_by_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    initial_sum = 2 * initial_average  # The sum of two numbers with an average of 60\n    new_sum = 3 * new_average          # The new sum when a third number is added and the new average is 70\n    new_number = new_sum - initial_sum # The new number is the difference between the new sum and the initial sum\n\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Convert times to datetime objects\n    school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate the total walking time\n    first_walk_duration = bus_time - school_time\n    bus_trip_duration = timedelta(minutes=18)\n    second_walk_duration = home_time - (bus_time + bus_trip_duration)\n    \n    # Get the total walking time in minutes\n    total_walking_time = first_walk_duration + second_walk_duration\n    \n    return total_walking_time.seconds // 60\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Ken's original amount (K) and the amount given to Lisa (x)\n    K, x = symbols('K x')\n\n    # Ken had $15 more than Lisa at first: K = L + 15\n    # After giving x to Lisa, Ken has $21 less than Lisa: K - x = L + x - 21\n\n    # Setting Ken's amounts in two scenarios equal to each other to form the equations\n    equation1 = Eq(K - x, (K - 15) + x - 21)\n\n    # Solve for x, the amount Ken gave to Lisa\n    solutions = solve(equation1, x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies_for_first_5 = sum(range(1, 6))  # Sum of trophies for first 5 questions\n    trophies_for_last_4 = sum(range(5, 1, -1))  # Sum of trophies for last 4 questions\n    total_trophies = trophies_for_first_5 + trophies_for_last_4\n    return total_trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n\n    boy_percentage = (boys / total_children) * 100\n\n    return boy_percentage\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the first day cookies and common difference (which is 6)\n    first_day_cookies = symbols('first_day_cookies')\n    \n    #We are using arithmetric progression sum formula where Sn = n/2 * (2a + (n - 1)d)\n    #Here n = 5, Sn = 100, d = 6 and we have to find a i.e, first_day_cookies\n    total_days = 5\n    total_cookies = 100\n    common_difference = 6\n    \n    #The sum of an arithmetic sequence can be calculated by the formula \n    #Sn = n/2 * (2a + (n - 1)d), here Sn = 100, n = 5, d = 6\n    equation = Eq(total_days * (2 * first_day_cookies + (total_days - 1) * common_difference) / 2, total_cookies)\n    \n    #We solve for the first day cookies\n    solutions = solve(equation, first_day_cookies)\n    \n    #Return the solution for first_day_cookies\n    return solutions[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    total_numbers = sum(range(2, 9))  # Total numbers from two 1's to eight 8's\n    median_position = (total_numbers + 1) // 2  # Position of the median\n    current_position = 0\n\n    for i in range(1, 9):\n        current_position += i + 1  # Adding the count of each number to the current position\n        if current_position >= median_position:\n            return i  # When the current position reaches or exceeds the median position, return that number\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # Total marbles other than red ones\n    non_red_marbles = 18 + 8\n    \n    # To ensure 2 red marbles, take all non-red marbles plus 2 red ones\n    marbles_to_take = non_red_marbles + 2\n    \n    return marbles_to_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(sorted(map(str, digits), reverse=True)))\n    smallest = int(''.join(sorted(map(str, digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count = 0\n    for i in range(1, 31):\n        # If the number is a multiple of 2 or 3, the student will turn around an odd number \n        # of times (1 or 3 times) and end up facing away from the teacher.\n        # If it's multiple of both 2 and 3 (i.e., 6), they will turn around an even number of times (2 times),\n        # and end up facing the teacher.\n        if i % 2 != 0 and i % 3 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x)**0.5 + 36**0.5, 81**0.5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n    \n    # Calculate the common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence\n    last_term = first_term + (number_of_rows - 1) * common_difference\n    \n    # Calculate the sum using the formula for the sum of an arithmetic sequence\n    total_athletes = (number_of_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Prior to any gates being opened, the probability of the car being behind each gate is 1/3.\n    # After gate 3 is opened to show a goat, we are left with two gates.\n    # Initially, there was a 1/3 chance the car was behind gate 1 (our chosen gate) and 2/3 chance it was behind gates 2 or 3.\n    # Since the host opened gate 3, the probability of gate 2 having the car goes up to 2/3 if we switch,\n    # whereas it stays at 1/3 if we stick with gate 1.\n    # So, you should switch to gate 2 for a better probability of getting the car.\n\n    # If you choose gate 1 initially, the probability of the car being there is 1/3.\n    gate1_probability = 1/3\n    # If you switch to gate 2 after gate 3 (with a goat) is opened, the probability of the car being there is 2/3.\n    gate2_probability = 2/3\n    \n    # Comparing probabilities to guide decision.\n    if gate1_probability < gate2_probability:\n        ans = \"Choose gate 2\"\n    else:\n        ans = \"Stick with gate 1\"\n\n    return ans\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    total_spent = 6 * 'x'\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    trainers_for_7_pokemon = 7\n    pokemon_needed = 49\n    time_limit = 49\n\n    pokemon_per_trainer_per_minute = trainers_for_7_pokemon / 7 / 7\n    trainers_needed = pokemon_needed / (pokemon_per_trainer_per_minute * time_limit)\n    \n    return int(trainers_needed)\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 13\n    time_spent_per_friend = 142\n    total_time_spent = number_of_friends * time_spent_per_friend\n    return total_time_spent\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number 928 is repeated to form a 99-digit number,\n    # Since each repetition of 928 adds three digits to the number,\n    # We can determine how many whole repetitions of 928 there are \n    # in a 99-digit number by dividing 99 by 3.\n    repetitions = 99 // 3\n    \n    # Since 928 is divisible by 9, each repetition does not affect \n    # the remainder when dividing the entire number by 9.\n    # We only need to consider the part that does not constitute \n    # a full repetition. This can happen if the 99-digit number does\n    # not consist of a whole number of repetitions of 928.\n    # However, since 99 is exactly divisible by 3, there are no extra\n    # digits beyond the full repetitions of 928.\n    # Therefore the remainder is 0.\n    return 0\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown value we want to find\n    oplus = symbols('oplus')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    \n    # Solve the equation for the unknown\n    sol = solve(equation, oplus)\n    \n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identification = 1500\n\n    percentage_incorrect = (incorrect_identification / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the three numbers\n    a, b, c = symbols('a b c')\n\n    # Create the equations based on the given information\n    equation1 = Eq(a + b + c, 56)      # Sum of three numbers is 56\n    equation2 = Eq((a + b) / 2, 14)    # Average of the smallest two is 14\n    equation3 = Eq((b + c) / 2, 22)    # Average of the largest two is 22\n    \n    # Solve the system of equations for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Sort the solutions to find the median, which is the middle value after sorting\n    sorted_solutions = sorted(solutions.values())\n    median = sorted_solutions[1]\n\n    return median\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the total amount of money David originally had\n    x = symbols('x')\n\n    # David spent $75, so the remaining money is x - 75\n    # He then spends 1/4 of the remaining money on batteries, so he is left with 3/4*(x - 75).\n    # According to the question, the money left is also 1/3 of the original money.\n    # Therefore, we form the following equation: 3/4*(x - 75) = x / 3\n    \n    equation = Eq(3/4 * (x - 75), x / 3)\n\n    # Solve for 'x'\n    solution = solve(equation, x)\n\n    # We get a list of solutions, we return the first (and only) solution, which will be David's original amount of money\n    return solution[0]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to choose 1 book out of 7 for the first student\n    first_student = factorial(7) // (factorial(1) * factorial(7 - 1))\n    # After giving one book to the first student, 6 books are left.\n    # Number of ways to choose 1 book out of the remaining 6 for the second student\n    second_student = factorial(6) // (factorial(1) * factorial(6 - 1))\n    # Now, 5 books are left.\n    # Number of ways to choose 1 book out of the remaining 5 for the third student\n    third_student = factorial(5) // (factorial(1) * factorial(5 - 1))\n\n    # The total different ways are the product of the individual possibilities\n    total_ways = first_student * second_student * third_student\n    return total_ways\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [0, 2, 3, 4]  # Given digits\n    smallest_even_digit = min(filter(lambda x: x % 2 == 0, digits))  # Smallest even digit for the units place\n    # Remove the smallest even digit from the list to avoid reusing it.\n    digits.remove(smallest_even_digit)\n    # Sort the remaining digits and add the smallest even digit at the end to form the smallest 4-digit number.\n    smallest_4_digit_even_number = ''.join(map(str, sorted(digits))) + str(smallest_even_digit)\n    return int(smallest_4_digit_even_number)\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # litres of orange juice\n    per_container = 2  # litres per container\n\n    num_containers = total_volume / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    # Current age sum equation\n    equation1 = Eq(jackson + chloe, 54)\n    \n    # Future age multiple equation\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Jackson's age 3 years later\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    result1 = 66 * 2 + 66 * 3\n    result2 = 66 * 5\n    return result1 == result2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n    \n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    \n    # Calculate the cost beyond the base fare.\n    additional_cost = total_cost - base_fare\n    \n    # Calculate the additional kilometers traveled.\n    additional_km = additional_cost / additional_fare_per_km\n    \n    # Calculate the total distance traveled.\n    total_distance = 1.8 + additional_km\n    \n    return total_distance\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + blue + yellow, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    my_chocolates = 8\n    total_chocolates = 2 * my_chocolates\n    return total_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    big_bumper_cars_needed = 36 // 4\n    small_bumper_cars_needed = 12 // 2\n    \n    total_cars_needed = big_bumper_cars_needed + small_bumper_cars_needed\n    return total_cars_needed\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let x be the number of bars each person bought.\n    # Set up the equations based on the problem.\n    # Eliot's spend = 12p per bar, which is the same as 0.12 pounds per bar.\n    # Maya's spend = 17p per bar, which is the same as 0.17 pounds per bar.\n    # They each receive the same amount of change, so they spend the same amount.\n    # So, Eliot's total spend = 0.12 * x pounds\n    # Maya's total spend = 0.17 * x pounds\n    # Eliot had 3 pounds and Maya had 4 pounds initially.\n    # This means the amount of money left after buying the bars is equal.\n    # 3 - (0.12 * x) = 4 - (0.17 * x)\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define the variable x\n    x = symbols('x')\n    \n    # Equation according to the problem statement\n    eliot_spend = 0.12 * x\n    maya_spend = 0.17 * x\n    eliot_initial = 3\n    maya_initial = 4\n    \n    # Establish the equation for change being the same\n    eq = Eq(eliot_initial - eliot_spend, maya_initial - maya_spend)\n    \n    # Solve the equation for x\n    solution = solve(eq, x)\n    \n    # The solution is the number of bars each person bought, so we extract the value\n    return solution[0]\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    current_sum_ages = 36 + 42 + 7  # Current sum of ages of Julia's mother, father, and Julia\n    total_years_until_sum_100 = 100 - current_sum_ages  # Total years until the sum of ages is 100\n\n    # Each year, each of the three people gets one year older, so the total age increases by 3 years\n    # We need to find out after how many years the increase will be equal to 'total_years_until_sum_100'\n    years_until_sum_100 = total_years_until_sum_100 // 3\n\n    return years_until_sum_100\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Pigeonhole principle: if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    \n    # If every student got exactly 2 apples, it would require 40 students to distribute all 80 apples.\n    # But since at least one student gets at least 3 apples, we need to account for that extra apple.\n    # If we give one extra apple to a student, we will have one less student in total.\n    \n    # Instead of 2 apples per student, one student getting at least one extra apple reduces the number of students by 1.\n    # Therefore, the maximum number of students is 40, since giving 3 apples to one student decreases the number of students.\n    \n    # So the maximum size of the class is 40 students.\n    return 40\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 56 / 16\n    pounds_to_kilograms = ounces_to_pounds / 2.2\n    return pounds_to_kilograms\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = 100*a + 10*b + c + 100*b + 10*c + d + 100*c + 10*d + e + 100*d + 10*e + f + 100*e + 10*f + g + 100*f + 10*g + h + 100*g + 10*h + i\n        if A > max_sum:\n            max_sum = A\n    return max_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.2)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_discount_percentage = (total_discount / original_price) * 100\n    \n    return total_discount_percentage\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Total people are 5, thus 5 factorial for all possible arrangements\n    total_arrangements = factorial(5)\n    # But for each arrangement where A is to the left of B and B is to the left of C\n    # there are 3 factorial ways they can be arranged among themselves (A, B, C)\n    # So we need to divide the total arrangements by these to get arrangements meeting the condition\n    conditional_arrangements = factorial(3)\n    return total_arrangements // conditional_arrangements\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = num_terms * (first_term + last_term) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(n):\n        return (n % 10) ** 2\n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # First, we can use the formula for the sum of an arithmetic series to find\n    # the sum of the numbers from 5 to 80, which is half of the series without the\n    # repetition of 79..5.\n    # Sum of arithmetic series: S = n/2 * (first_term + last_term), where n is\n    # the number of terms.\n    \n    # The number of terms from 5 to 80 (inclusive)\n    n1 = 80 - 5 + 1\n    # Sum from 5 to 80\n    sum1 = n1 * (5 + 80) // 2\n\n    # Now we calculate the sum of the numbers from 5 to 79, because 80 is not\n    # repeated and this sequence is also in reverse order.\n    # The number of terms from 5 to 79 (inclusive)\n    n2 = 79 - 5 + 1\n    # Sum from 5 to 79 (the same series is repeated in the question)\n    sum2 = n2 * (5 + 79) // 2\n\n    # The final result is the sum of both calculated sums.\n    ans = sum1 + sum2\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_six_digit_numbers = sorted([''.join(p) for p in permutations(digits, 6) if p[0] != '0'])\n    return int(all_six_digit_numbers[504])\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    digits = [0, 2, 3]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k and i != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define girls and boys as symbols\n    girls, boys = symbols('girls boys')\n    \n    # We know there are 36 students in total\n    total_students = 36\n    \n    # The total score for the class is the average * number of students\n    total_class_score = 89 * total_students\n    \n    # The girls' and boys' scores are the sum of their averages times their counts\n    girls_score = 88 * girls\n    boys_score = 91 * (total_students - girls)\n    \n    # We create an equation that the sum of girls' and boys' scores is equal to the total\n    equation = Eq(girls_score + boys_score, total_class_score)\n    \n    # Solve the equation for the number of girls\n    solutions = solve(equation, (girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    # Combined work rate per day when both are working\n    combined_work_rate = alice_work_rate + bob_work_rate\n    # Total work done by the end of the 27th day\n    work_done = 1\n\n    # Let 'x' be the number of days Alice takes off\n    # Equation representing total work done:\n    # (combined_work_rate * (27 - x)) + (bob_work_rate * x) = work_done\n    # Solve for 'x'\n\n    # Total amount of work Bob does alone\n    bob_work = bob_work_rate * 27\n    # Remaining work to be done by Alice and Bob together\n    remaining_work = work_done - bob_work\n    # Number of days Alice actually worked\n    alice_actual_work_days = remaining_work / combined_work_rate\n\n    # Number of days Alice takes off\n    days_off = 27 - alice_actual_work_days\n\n    return int(days_off)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for multiple in range(21, 50):\n        if multiple % 6 == 0 and multiple % 9 == 0:\n            multiples.append(multiple)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    total = 136\n    \n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, total)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Determine the common difference of the arithmetic sequence\n    common_difference = 120 - 105  # the difference between the 8th and 7th terms\n\n    # Calculate the first term of the sequence using the 7th term and the common difference\n    first_term = 105 - (6 * common_difference)\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Total combined age of the 3 dogs 4 years ago\n    combined_age_4_years_ago = 24\n    \n    # Each year, each dog gets 1 year older, thus for each of the 3 dogs, 4 years would mean an increase of 4 * 3 years\n    current_combined_age = combined_age_4_years_ago + (4 * 3)\n    \n    # In two years' time, each dog will be 2 years older, therefore, for the 3 dogs combined, it would mean an increase of 2 * 3 years\n    combined_age_in_2_years = current_combined_age + (2 * 3)\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11**2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) // 2\n    return n\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent Ryan's initial number of marbles\n    # Let a represent Audrey's initial number of marbles\n    r, a = symbols('r a')\n\n    # Initial ratio condition\n    initial_ratio = Eq(r/a, 2/7)\n\n    # Ratio after buying/giving away marbles\n    new_ratio = Eq((r + 20)/(a - 80), 1/3)\n\n    # Solve the system of equations for r and a\n    solutions = solve((initial_ratio, new_ratio), (r, a))\n    \n    # Return the number of Audrey's initial marbles\n    return solutions[a]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n\n    # Calculate the angle moved by the hour and minute hands with respect to 12:00\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    minute_angle = minute * 6\n\n    # Calculate the difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n\n    # Make sure the angle is less than 180 degrees\n    if angle > 180:\n        angle = 360 - angle\n\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # Four sisters, 5 apples each\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We have 4 red socks and 4 blue socks.\n    # To be sure to get at least one matching pair,\n    # we need to consider the worst case scenario.\n    # If we pick one sock of each color, we still don't have a matching pair.\n    # Therefore, we need to pick one more sock after this to guarantee\n    # a matching pair regardless of the colors being picked.\n\n    # Worst case scenario without a matching pair: 1 red + 1 blue\n    red_socks = 4\n    blue_socks = 4\n    worst_case_without_pair = 1 + 1  # One of each color\n\n    # We need to draw just one more sock to ensure a matching pair.\n    socks_to_draw = worst_case_without_pair + 1\n\n    return socks_to_draw\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # Define the pattern of bead colors in one cycle\n    cycle = [3, 2, 2]\n    # Count of black beads in one cycle\n    black_beads_in_cycle = cycle[0]\n    \n    # Total beads in one cycle\n    total_beads_in_cycle = sum(cycle)\n\n    # Full cycles within 65 beads\n    full_cycles = 65 // total_beads_in_cycle\n\n    # Total number of black beads in the full cycles\n    total_black_beads = full_cycles * black_beads_in_cycle\n\n    # Remaining beads after the full cycles\n    remaining_beads = 65 % total_beads_in_cycle\n    \n    # Add the number of black beads in the remaining part\n    # The first elements in the cycle are black beads\n    if remaining_beads > 0:\n        total_black_beads += min(remaining_beads, black_beads_in_cycle)\n\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    total_minutes_needed = 13 + 23 + 8 + 27\n    school_time = datetime.strptime(\"7:45 AM\", \"%I:%M %p\")\n    wake_up_time = school_time - timedelta(minutes=total_minutes_needed)\n\n    return wake_up_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum(60 - i if i % 4 < 2 else -(60 - i) for i in range(0, 60))\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # c = number of chickens\n    # d = number of ducks\n    # cow = number of cows\n    # It's given that the number of chickens is equal to the number of ducks, so c = d\n    # Each chicken and each duck has 1 head and 2 legs.\n    # Each cow has 1 head and 4 legs.\n    c, cow = symbols('c cow')\n\n    # Total heads equation: chickens + ducks + cows = 51 (since chickens = ducks)\n    equation1 = Eq(c + c + cow, 51)\n\n    # Total legs equation: 2*chickens + 2*ducks + 4*cows = 160\n    equation2 = Eq(2*c + 2*c + 4*cow, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, cow))\n\n    # Since we need the number of chickens\n    return solutions[c]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n\n    return len(totals)\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice * (1/5)\n    abigail_drink = 200\n    anna_drink = 120\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = (time_days * 24) + time_hours  # converting days to hours and adding the additional hours\n\n    average_speed = distance / total_time_hours\n\n    return round(average_speed)  # rounding to the nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # volume of the first fruit punch in liters\n    concentration1 = 0.40  # concentration of fruit juice in the first punch\n\n    volume2 = 3  # volume of the second fruit punch in liters\n    concentration2 = 0.70  # concentration of fruit juice in the second punch\n\n    # Compute the total volume of fruit juice in the new mixture\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    # Compute the total volume of the new mixture\n    total_volume = volume1 + volume2\n\n    # Compute the concentration of the new mixture\n    concentration_new_mixture = total_fruit_juice / total_volume\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    # There are 4 possible entrances\n    # Joe, Mike and Tina have to choose different entrances and can't use the same entrance as Joe\n    # We first place Joe, then Mike (with restriction), and then Tina\n\n    total_ways = 0\n\n    # Joe can choose any of the 4 entrances\n    for joe_entrance in range(4):\n        # Mike can choose any but not the same as Joe\n        for mike_entrance in range(4):\n            if mike_entrance != joe_entrance:\n                # Tina can choose any but not the same as Joe and Mike\n                for tina_entrance in range(4):\n                    if tina_entrance != joe_entrance and tina_entrance != mike_entrance:\n                        total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_after_giving_to_sister = initial_stamps - 339\n    stamps_after_buying_more = stamps_after_giving_to_sister + 455\n    final_stamps = stamps_after_buying_more - 777\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n    \n    total_people = people_in_front_of_bella + albert_and_bella + people_behind_albert\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(20, 31):\n        if isprime(i):\n            return i  # return the first encountered prime number\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fatouma = symbols('fatouma')\n\n    equation = Eq(fatouma + 2, 2 * (fatouma - 5))\n\n    age = solve(equation, fatouma)\n\n    return age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len(set([x1, x2, x3])) == 3:\n                    combinations.append(sorted([x1, x2, x3]))\n    distinct_combinations = set(tuple(c) for c in combinations)\n    ans = len(distinct_combinations), distinct_combinations\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial number of women be w and men be m\n    w, m = symbols('w m')\n    \n    # After 36 women left, women became 3/5 of men\n    eq1 = Eq(w - 36, 3/5 * m)\n    \n    # After 48 men left, men and women are equal\n    eq2 = Eq(m - 48, w - 36)\n    \n    # Solve the equations to find the values of w and m\n    solutions = solve((eq1, eq2), (w, m))\n    \n    # Calculate the total number of people at the bus stop at first\n    initial_people = solutions[w] + solutions[m]\n\n    return initial_people\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    tallest_height = 132\n    shortest_height = 124\n    number_of_heights = tallest_height - shortest_height + 1  # includes both tallest and shortest\n    class_size = 4 * number_of_heights  # At least 4 students per possible height guarantees a repeated height\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost of three pens each at 50p\n    amount_paid = 5.00  # amount paid in pounds\n    change = amount_paid - total_cost  # change received\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # At each turn, the total number of oranges that can be removed is from 1 to 3.\n    # To ensure Fred wins, he needs to leave 4n + 1 oranges to George after each round (for some nonnegative integer n),\n    # so that whatever George takes, Fred will be able to take the remaining to make a multiple of 4.\n    \n    # Since there are 15 oranges, to make the oranges left a multiple of 4 after Fred's first turn:\n    # Fred needs to take (15 mod 4) oranges.\n    # 15 mod 4 = 3 (because 15 - 3 = 12, which is a multiple of 4)\n    \n    # Hence, Fred should take 3 oranges on his first turn to ensure that no matter what George does,\n    # Fred will be able to follow a winning strategy.\n    return 3\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Total students in individual groups\n    go_students = 42\n    checkers_students = 55\n    chess_students = 33\n\n    # Students in exactly two groups\n    go_checkers_students = 18\n    go_chess_students = 10\n    checkers_chess_students = 9\n\n    # Students in all three groups\n    all_three_students = 5\n\n    # Applying the Inclusion-Exclusion Principle\n    total_students = (go_students + checkers_students + chess_students\n                      - go_checkers_students - go_chess_students - checkers_chess_students\n                      + all_three_students)\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later, then we have:\n    # Oliver's age in x years = 20 + x\n    # Lin's age in x years = 26 + x\n    # Their combined age in x years should be 48, so:\n    # (20 + x) + (26 + x) = 48\n\n    # We solve the equation for x\n    x = (48 - (20 + 26)) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3\n    total_distance = (number_of_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = 245 ** (1/3)\n    p = round(cube_root) ** 3 / 245\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n        if E == 0 or S == 0:  # Leading digit cannot be zero\n            continue\n        ESSE = E*1000 + S*100 + S*10 + E\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        if ESSE + 2018 == SASMO:\n            return S + A + S + M + O\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_meter = 100\n    cm_value = 736\n    meters = cm_value / cm_in_meter\n    return meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(64, 45, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n    \nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = this_year_production * 1/4\n    ans = this_year_production + last_year_production\n    return int(ans)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    students_absent = 2  # One on sick leave and one on personal leave\n    students_present = total_students - students_absent\n\n    attendance_rate = (students_present / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return 8 * (15 / 5)\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22  # This is the common difference between the terms\n\n    # The number of terms n in an arithmetic sequence can be calculated by: n = ((last_term - first_term) / difference) + 1\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    ans = 0\n    for i in range(2, 2018):\n        ans += sum([j / i for j in range(1, i)])\n    return ans\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30\n    total_amount = 270\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim is 4th from front and 3rd from back, so there must be 4 + 3 - 1 people in his column.\n    # There are 3 people in front of him and 2 people behind him.\n    total_vertical = 4 + 3 - 1\n\n    # Tim is 1st from left and 4th from right, so there must be 1 + 4 - 1 people in his row.\n    # There are no people to his left and 3 people to his right.\n    total_horizontal = 1 + 4 - 1\n\n    # Total number of band members is the product of the number of members in his row and column.\n    total_members = total_vertical * total_horizontal\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the number of apples and oranges\n    apples, oranges = symbols('apples oranges')\n\n    # The initial ratio of apples to oranges is 3:8\n    initial_ratio = Eq(apples/oranges, 3/8)\n\n    # When one apple is removed, the ratio becomes 1:3\n    new_ratio = Eq((apples-1)/oranges, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]  # We only need to find the number of oranges\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x-100))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.40\n    total_savings_target = 150\n    days_needed = math.ceil(total_savings_target / daily_savings)\n    weeks_needed = math.ceil(days_needed / 7)\n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_14_consecutive = sum(range(1, 15))\n    new_sum = sum_14_consecutive + 2019\n    \n    for i in range(1, new_sum//8):\n        if sum(range(i, i + 8)) == new_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = (6 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weight of one chicken and one kangaroo\n    chicken, kangaroo = symbols('chicken kangaroo')\n\n    # Equation representing \"the weight of 2 rabbits is equal to 6 chickens\"\n    equation1 = Eq(2 * (3 * chicken), 6 * chicken)\n\n    # Equation representing \"the weight of 3 kangaroos is equal to 4 rabbits\"\n    equation2 = Eq(3 * kangaroo, 4 * (3 * chicken))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chicken, kangaroo))\n\n    # Calculate the weight of one kangaroo in terms of chickens\n    weight_kangaroo_in_chickens = solutions[kangaroo] / solutions[chicken]\n\n    return weight_kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    return ans\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    return common_factor * (836 + 162 + 2)\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_money = 1000\n    note_value = 5\n\n    num_notes = total_money / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    # Ashley is currently 10 years old.\n    ashley_current_age = 10\n    # Three years ago...\n    three_years_ago = 3\n    # ...she was 2 years older than her brother.\n    years_older_than_brother = 2\n\n    # Three years ago Ashley's age\n    ashley_age_three_years_ago = ashley_current_age - three_years_ago\n    # Brother's age three years ago\n    brother_age_three_years_ago = ashley_age_three_years_ago - years_older_than_brother\n    # Brother's current age\n    brother_current_age = brother_age_three_years_ago + three_years_ago\n\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # If Snow White is 7th from the front and in the exact middle,\n    # there must be 6 people in front of her and 6 behind her\n    total_dwarves = 6 + 6  # Counting only dwarves, not including Snow White\n\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    max_participants = 4  # At least 4 participants from the school with the most participants\n    total_participants = 100\n    # Using the pigeonhole principle, to minimize the number of schools while guaranteeing at least 4 participants\n    # from the school with the most, we can give each school 3 participants (one less than the max).\n    # Then, any additional participant would have to be distributed to a different school, ensuring the fourth.\n    schools = (total_participants + max_participants - 2) // (max_participants - 1)\n\n    return schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fract_parts = 0\n    for i in range(1, 2019):\n        fractional_part = ((2018 + i) / 5) % 1\n        sum_fract_parts += fractional_part\n    \n    return sum_fract_parts\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num * 6)**(1/3) % 1 == 0 and (num / 6)**(1/2) % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # The difference in distance traveled is due to the ratio of their speeds\n    speed_ratio = 48 / 36\n  \n    # Let the distance traveled by the slower train be x km\n    # Then the distance traveled by the faster would be x + 70 km\n  \n    # The time taken by both trains is the same, so the ratio of the distances\n    # they travel is equal to the ratio of their speeds\n    # Therefore, (x + 70) / x = speed_ratio\n    # Solving for x we get, x = 70 / (speed_ratio - 1)\n    x = 70 / (speed_ratio - 1)\n  \n    # Now we can find the total distance between the two stations\n    total_distance = x + (x + 70)\n  \n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    first_number = 3 + Fraction(5, 9)\n    second_number = 6 + Fraction(4, 9)\n    result = first_number + second_number\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Counting from the front to the back and back to the front gives us the number of rows\n    rows = 4 + 3 - 1  # Subtracting 1 because Tim is counted twice\n    \n    # Counting from left to right and right to left gives us the number of columns\n    columns = 4 + 7 - 1  # Subtracting 1 because Tim is counted twice\n    \n    # The total number of band members is the number of rows times the number of columns\n    total_band_members = rows * columns\n    \n    return total_band_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Assuming all tasks need to be done once, there are some tasks that can be done simultaneously.\n\n    # Group tasks by dependencies and find the longest path\n    cut_wood_days = 3\n    weave_rope_days = 1\n    dry_wood_days = 5\n    mow_grass_days = 1\n    prepare_food_days = 1\n    soak_cut_grass_days = 1\n    choose_wood_days = 1\n\n    # The drying wood can happen independently of other tasks\n    # Cutting wood and mowing grass can start on the same day\n    # Weaving rope can start after cutting grass is done\n    # Preparing food can be done on any day\n\n    # Longest path:\n    # cut wood (3 days) + dry wood (5 days) = 8 days\n    # mow grass (1 day) + soak grass (1 day) + weave rope (1 day) = 3 days\n    # choose wood (1 day)\n    # prepare food (1 day)\n    # The only dependent tasks are related to the grass (mow->soak->weave)\n\n    # Since drying the wood takes the longest, and other tasks can be done during\n    # those 5 days, we need to add the max of other tasks that cannot be done in parallel.\n    max_other_days = max(3 + choose_wood_days, # cut wood and choose wood\n                         mow_grass_days + soak_cut_grass_days + weave_rope_days, # grass related tasks\n                         prepare_food_days) # preparing food\n\n    # Add the max of other tasks to the drying wood days\n    total_days = dry_wood_days + max_other_days\n\n    return total_days\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Lily's and Gigi's wheat\n    lily, gigi = symbols('lily gigi')\n    \n    # Lily gave Gigi 36 tonnes, so Lily would have (lily - 36) and Gigi would have (gigi + 36)\n    # After giving away, Lily still has 26 tonnes more, so (lily - 36) = (gigi + 36) + 26\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    \n    # Lily's wheat is 8 times Gigi's wheat\n    equation2 = Eq(lily, 8 * gigi)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Define the value of each coin\n    coins = {'50c': 50, '20c': 20, '10c': 10, '5c': 5}\n\n    # Calculate the total amount Zoey had before losing any coin\n    total_amount = sum(coins.values())\n\n    # Determine the coin Zoey lost by checking which remaining amount is twice her brother's amount\n    for coin_name, coin_value in coins.items():\n        if (total_amount - coin_value) % 2 == 0 and (total_amount - coin_value) // 2 not in coins.values():\n            lost_coin = coin_name\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (4/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 1000):\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            ans = (boats + 1) * 6\n            return ans\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # First, we find out the numbers which when paired with others give a sum which is a multiple of 5\n    # There are four categories based on the remainder when divided by 5: 0, 1, 2, 3, 4\n    # We'll count how many numbers fall into each category\n    count_remainders = [0] * 5\n    for i in range(1, 101):\n        count_remainders[i % 5] += 1\n    \n    # Now, we find the number of pairs for each possible pairing:\n    # (0, 0), (1, 4), (2, 3) - Numbers with remainders of 1 and 4 pair together to form multiple of 5, same for 2 and 3\n    # There are no pairs for combinations (1, 3), (1, 2), (4, 2), (4, 3) since their sums don't form a multiple of 5\n    # For pairs (0, 0) we need to use combinations since it's picking 2 from the same category\n    # For other combinations we can use the multiplication principle because they are from different categories\n    \n    # Combinations for (0, 0)\n    pairs_00 = count_remainders[0] * (count_remainders[0] - 1) // 2\n    \n    # Multiplication for (1, 4) and (2, 3)\n    pairs_14 = count_remainders[1] * count_remainders[4]\n    pairs_23 = count_remainders[2] * count_remainders[3]\n    \n    # Total pairs\n    total_pairs = pairs_00 + pairs_14 + pairs_23\n    return total_pairs\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    equation1 = Eq(total_chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - total_chocolates, 34)\n\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    chocolates_left = solutions[total_chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (1/2) * (rasidah * (1 - 3/5)))\n    \n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens >= 10:\n                continue\n            units = thousands + hundreds + tens\n            if units >= 10:\n                continue\n            if units + tens + hundreds + thousands == 16:\n                return units\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # Since we need two-digit numbers, 0 cannot be the first digit\n    first_digit_choices = [2, 4]  # 0 cannot be the first digit\n    second_digit_choices = [0, 2, 4]  # All three numbers can be the second digit\n    \n    # Initialize count\n    count = 0\n    \n    # Iterate over each choice of first digit\n    for first_digit in first_digit_choices:\n        # Iterate over each choice of second digit\n        for second_digit in second_digit_choices:\n            # Check that the two digits are not the same\n            if first_digit != second_digit:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance is the same for both uphill and downhill\n    uphill_speed = 5  # mph\n    downhill_speed = 10 # mph\n    time_uphill = 3    # hours\n    time_downhill = 2  # hours\n    \n    # Calculate distance using the speed-time relationship (Distance = Speed * Time)\n    distance_uphill = uphill_speed * time_uphill  # miles\n    distance_downhill = downhill_speed * time_downhill  # miles\n    \n    # Total distance is the sum of uphill and downhill distance\n    total_distance = distance_uphill + distance_downhill  # miles\n    \n    # Total time is the sum of uphill and downhill time\n    total_time = time_uphill + time_downhill  # hours\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time  # mph\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    base_rate = 2\n    additional_rate = 1\n    fixed_fee = 3\n    total_amount = 63\n    \n    # Cost for the first 5 kWh\n    first_5_cost = 5 * base_rate\n    \n    # Remaining amount after fixed fee and first 5 kWh\n    remaining_amount = total_amount - fixed_fee - first_5_cost\n    \n    # Additional kWh she can use\n    additional_kWh = remaining_amount / additional_rate\n    \n    # Total kWh is the sum of first 5 kWh and additional kWh\n    total_kWh = 5 + additional_kWh\n    \n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    ans = (54 * 7) / 63\n    return ans\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    final_value_rounded = round(final_value, 1)\n    \n    return final_value_rounded\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    # This problem can be solved by the Chinese Remainder Theorem, we need to find the minimum x that satisfies:\n    # x % 3 = 2\n    # x % 7 = 6\n    # x % 11 = 10\n    # A simple brute-force way is to check each number from 1 upwards to find the smallest x satisfying all conditions.\n\n    x = 1\n    while True:\n        if x % 3 == 2 and x % 7 == 6 and x % 11 == 10:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    num = 4320\n    base = 3 / 2\n    \n    # Prime factorization of 4320\n    prime_factors = {2: 0, 3: 0}\n    for factor in prime_factors.keys():\n        while num % factor == 0:\n            prime_factors[factor] += 1\n            num //= factor\n\n    # Since the base is 3/2, with each power of n we essentially multiply by 3 and \n    # divide by 2. So we need to find out how many times we can divide by 2 before \n    # the result is no longer an integer, given the initial number of 2s in the prime \n    # factorization.\n\n    # We cannot exceed the number of 2's in the prime factorization of 4320, \n    # so the maximum value of n is how many 2's we have.\n    ans = prime_factors[2]\n    \n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students_passing = 43\n    math = 30\n    science = 28\n    english = 25\n\n    max_shared = (math + science + english) - total_students_passing\n    return max_shared\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    initial_punch_1 = 20\n    initial_punch_2 = 30\n    concentration_1 = 35 / 100\n    concentration_2 = 60 / 100\n\n    total_punch = initial_punch_1 + initial_punch_2\n    total_juice = (initial_punch_1 * concentration_1) + (initial_punch_2 * concentration_2)\n\n    concentration_new_mixture = (total_juice / total_punch) * 100\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    warehouse_b_original = symbols('warehouse_b_original')\n\n    # Warehouse A had 50 tons and received 12 tons, so now it has 62 tons\n    warehouse_a_now = 50 + 12\n    # Warehouse B shipped out 16 tons, so its current amount is original - 16\n    warehouse_b_now = warehouse_b_original - 16\n\n    # According to the problem, warehouse A now is twice that of warehouse B\n    equation = Eq(warehouse_a_now, 2 * warehouse_b_now)\n\n    # Solving the equation\n    solution = solve(equation, warehouse_b_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]  # 37 is the missing prime number between 31 and 41.\n    return primes[2]  # Return the third element which is 37.\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6    \n\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    letters = \"COLLEGE\"\n    unique_letters = set(letters)\n    freq = {letter: letters.count(letter) for letter in unique_letters}\n\n    total_ways = factorial(len(letters))\n    for f in freq.values():\n        total_ways //= factorial(f)\n    \n    return total_ways\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    result = 0.50 * 0.20 * 6000\n    return result\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return hours_hired\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    \n    # Use solve_congruence from sympy to solve the system of congruences\n    lcm, remainder = solve_congruence(*congruences)\n    \n    # Find the smallest number that satisfies the conditions and is between 400 and 500\n    x = remainder\n    while x < 400:\n        x += lcm\n\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    # Loop through all possible combinations of three numbers that add up to 9\n    for x1 in range(10):  # x1 can be 0 to 9\n        for x2 in range(10):  # x2 can be 0 to 9\n            x3 = 9 - x1 - x2  # Calculate x3 to ensure the sum is 9\n            if 0 <= x3 <= 9:  # x3 should be between 0 and 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total_stickers = ginnie + lyn\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # First trade: 3 fishes for 1 rabbit => 1 fish for 1/3 rabbit\n    fish_to_rabbit = 1 / 3\n    \n    # Second trade: 2 rabbits for 3 packs of wheat => 1 rabbit for 3/2 packs of wheat\n    rabbit_to_wheat = 3 / 2\n    \n    # Find the ratio of fish_to_wheat by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n    \n    # The number of fishes Owen should give Dennis for 1 pack of wheat\n    fishes_for_one_pack_of_wheat = 1 / fish_to_wheat\n    \n    return fishes_for_one_pack_of_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000):  # Reasonable range to search for the number of people\n        # if 3 people are sitting on one bench, there will be 7 people with no seat\n        if (people - 7) % 3 == 0:\n            benches_when_3 = (people - 7) // 3\n            # if 7 people are sitting on one bench, there will be 3 extra benches\n            if (people + 3 * 7) % 7 == 0:\n                benches_when_7 = (people + 3 * 7) // 7\n                if benches_when_3 == benches_when_7 - 3:\n                    return people\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    # a = mass of apple juice\n    # b = mass of bottle\n    a, b = symbols('a b')\n\n    # Set up the equations based on the given information\n    equation1 = Eq((5/6)*a + b, 4.6)\n    equation2 = Eq((2/3)*a + b, 4.45)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Convert the mass of the empty bottle from kilograms to grams\n    mass_of_bottle_in_grams = solutions[b] * 1000\n\n    return int(mass_of_bottle_in_grams)\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Lisa's favourite number\n    x = symbols('x')\n\n    # Set up the equation x * 2 - 3 = 19\n    equation = Eq(x * 2 - 3, 19)\n\n    # Solve the equation for x\n    favourite_number = solve(equation, x)\n\n    return favourite_number[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # First digit must be an odd number from 1 to 9\n        for j in range(10):   # Second digit can be from 0 to 9\n            for k in range(10):  # Third digit can be from 0 to 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 48 * 17\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    # Since both rooms will have the same number of pupils, divide by 2.\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    term = 1\n    while term < 100:\n        term = n * (n + 1) // 2 * 2 - 1\n        if term < 100:\n            last_two_digit_term = term\n        n += 1\n    return last_two_digit_term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # We know the weights of pairs, we can solve for the total weight using these equations\n    # Let A, B, C be the weights of Adam, Ben, and Carl respectively.\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    # Adding the three equations, we get\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # 2*(A + B + C) = 292\n    # A + B + C = 292 / 2\n    total_weight = (102 + 97 + 93) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_money = 23\n    book_price = 3.40\n    magazine_price = 1.60\n    max_books = int(total_money / book_price)\n    for books in range(max_books + 1):\n        for magazines in range(int((total_money - books * book_price) / magazine_price) + 1):\n            if books * book_price + magazines * magazine_price == total_money:\n                return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n\n    # Pages with one digit (1-9)\n    one_digit_pages = 9\n    digits_one_digit_pages = one_digit_pages * 1\n\n    # Pages with two digits (10-99)\n    two_digit_pages = 90\n    digits_two_digit_pages = two_digit_pages * 2\n\n    # Pages with three digits (100-999)\n    three_digit_pages = 900\n    digits_three_digit_pages = three_digit_pages * 3\n\n    # Finding the number of pages with four digits\n    remaining_digits = total_digits - (digits_one_digit_pages + digits_two_digit_pages + digits_three_digit_pages)\n    four_digit_pages = remaining_digits // 4\n\n    # Total pages is the sum of all the pages with 1, 2, 3, and some with 4 digits\n    total_pages = one_digit_pages + two_digit_pages + three_digit_pages + four_digit_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38 * 2  # Andy gives away 38 and has the same amount left\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    # Let the number of pages Ashley read be x.\n    # Then Crystal read 2x pages and Justin read 10x pages.\n    # It is given that Justin read 64 more pages than Crystal. \n    # So, 10x = 2x + 64\n    # Solving for x, we get x = 8.\n    \n    # Therefore, Ashley read 8 pages,\n    # Crystal read 16 pages (twice as many as Ashley), and\n    # Justin read 80 pages (10 times as many as Ashley).\n    \n    # The total number of pages they read is:\n    total_pages = 8 + 16 + 80\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Loop through all possible ages in base 10 and convert them to base 3\n    for age_base10 in range(1, 100): # Reasonable age range\n        age_base3 = int(str(age_base10) + '0', 3)\n        if age_base3 == age_base10:\n            return age_base10\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    # Calculate the sum inside the parentheses\n    sum_inside_parentheses = (5/8) + (1/17)\n    # Multiply the result by 8\n    multiply_by_eight = sum_inside_parentheses * 8\n    # Add the last fraction to the result\n    ans = multiply_by_eight + (9/17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if 7007 % i == 0:  # Check if it is a factor of 7007\n            other_factor = 7007 // i\n            if other_factor >= 10 and other_factor <= 99 and i % 7 == 0 and other_factor % 7 == 0:  # Ensure both factors are 2-digit multiples of 7\n                factors.append((i, other_factor))\n    sum_of_factors = sum(factors[0])  # There should only be one pair of factors meeting the criteria\n    return sum_of_factors\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "import math\n\ndef solution():\n    # There are 7 people and only 8-1=7 seats that can be considered due to circular permutations.\n    num_people = 7\n    num_seats = num_people\n    \n    # In circular permutations, (n-1)! gives the number of ways to arrange n objects in a circle.\n    ans = math.factorial(num_seats - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    # The total number of ways to partition n identical items into k non-empty piles\n    # is given by the number of integer compositions of n into k parts, which can be calculated\n    # using stars and bars method: (n - 1) choose (k - 1)\n    from math import comb\n    n = 10  # total identical items\n    k = 3   # into k piles\n    ans = comb(n - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import isprime\n\ndef solution():\n    for pr1 in range(2, 55):\n        pr2 = 55 - pr1\n        if isprime(pr1) and isprime(pr2):\n            return pr1 * pr2\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_cost_for_3 = 5 * cookie_cost\n    cheesecake_cost_for_1 = cheesecake_cost_for_3 / 3\n    chocolate_cake_cost_for_3 = 2 * cheesecake_cost_for_1\n    chocolate_cake_cost_for_1 = chocolate_cake_cost_for_3 / 3\n\n    return chocolate_cake_cost_for_1\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let o be the number of orchids, t be the number of tulips, and r be the number of roses.\n    o, t, r = symbols('o t r')\n\n    # The ratio of the number of orchids to the number of tulips is 3:5.\n    ratio_equation = Eq(o / t, 3 / 5)\n\n    # The total number of flowers is 3616.\n    total_flowers_equation = Eq(o + t + r, 3616)\n\n    # After 40% of the orchids, 1/5 of the tulips and 25% of the roses were sold, 2644 flowers left\n    # Thus, 60% of orchids, 4/5 of tulips and 75% of roses are remaining.\n    sold_flowers_equation = Eq(0.6 * o + 0.8 * t + 0.75 * r, 2644)\n\n    # Solve the system of equations for o, t, and r.\n    solutions = solve((ratio_equation, total_flowers_equation, sold_flowers_equation), (o, t, r))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Initialize the answer variable\n    ans = None\n    # Iterate over possible values of A, M, C\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Ensure all digits are different\n                if len({2, 0, A, M, C, 1, 9}) == 7:\n                    # Form the number and check divisibility by 9\n                    number = 20000000 + A * 100000 + M * 10000 + C * 1000 + 190\n                    if number % 9 == 0:\n                        # If divisible, calculate the sum of A, M, C\n                        ans = A + M + C\n                        # We found the valid number, no need to continue\n                        return ans\n    return ans\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each letter which represents a number\n    A, B, C = symbols('A B C')\n\n    # Define the equations given in the problem\n    eq1 = Eq(C + B, 18)\n    eq2 = Eq(B, A + A + A)\n    eq3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Access the solution for B\n    B_value = solutions[B]\n\n    return B_value\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    portion_per_day = 1/4 / 3\n    total_days = 1 / portion_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for their ages\n    melissa, mother = symbols('melissa mother')\n    \n    # At the starting point, Melissa was 8 and her mother was 32\n    start_mother_age = 32\n    start_melissa_age = 8\n    \n    # Difference in age is constant\n    age_difference = start_mother_age - start_melissa_age\n    \n    # Now mother is three times as old as Melissa\n    equation = Eq(mother, 3 * melissa)\n    \n    # Their age difference is still the same\n    equation_age_difference = Eq(mother - melissa, age_difference)\n    \n    # Solve the system of equations\n    solution = solve((equation, equation_age_difference), (melissa, mother))\n    \n    return solution[melissa]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 / (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert the recurring decimal to a fraction\n    num = 473\n    recurring = 73\n    non_recurring_part = 4\n    recurring_length = 2\n    \n    frac_recurring = recurring / (10**recurring_length - 1)\n    frac_non_recurring = non_recurring_part + (num - recurring) / 10**(recurring_length + 1)\n    recurring_decimal = frac_non_recurring + frac_recurring / 10**2\n    \n    # Other decimals\n    decimal_2 = 4.73\n    decimal_3 = 4.77\n    decimal_4 = 4.737\n    \n    # Find the smallest one\n    smallest_decimal = min(recurring_decimal, decimal_2, decimal_3, decimal_4)\n    \n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_after_joel = 4\n    before_joel = (remaining_after_joel + 2) * 2\n    \n    remaining_after_valerie = before_joel\n    before_valerie = (remaining_after_valerie + 3) * 2\n    \n    remaining_at_start = before_valerie\n    original_number = (remaining_at_start + 1) * 2\n\n    return original_number\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    # Let v represent the number of candies Valeria has initially\n    # Let m represent the number of candies Mike has initially\n    # Total number of candies is 36\n    # After eating the same amount of candy, Valeria has 22 candies and Mike has 6 candies\n    # So we can form the following equations:\n    # v - x = 22 (1)\n    # m - x = 6  (2)\n    # v + m = 36 (3)\n    # where x is the amount of candy both ate\n    # We need to solve this system of equations to find the value of v\n    # From equation (1) and (2), we can derive that v - m = 22 - 6 => v - m = 16 (4)\n    # Combining equation (4) with (3), we can solve for v:\n    # v + (v - 16) = 36 => 2v - 16 = 36\n    # 2v = 36 + 16\n    v = (36 + 16) / 2\n\n    return int(v)\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # length of the train in meters\n    tunnel_length = 544  # length of the tunnel in meters\n    speed = 52           # speed of the train in meters per second\n\n    # The total distance the train needs to travel to completely clear the tunnel is the length of the train + length of the tunnel\n    total_distance = train_length + tunnel_length\n    # The duration is the total distance divided by the speed of the train\n    duration = total_distance / speed\n    \n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let the original number of eggs in the basket be x.\n    # According to the problem, after the first sale, the seller is left with (x/2 - 16) eggs.\n    # After the second sale, he sells 7 eggs fewer than half of the remaining eggs, so he sells ((x/2 - 16)/2 - 7) eggs.\n    # After the second sale, he is left with 18 eggs.\n    # So the equation to represent this situation is: (x/2 - 16)/2 - 7 + 18 = x/2 - 16\n    # Simplifying the above equation will give us the initial number of eggs.\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x / 2 - 16) / 2 - 7) + 18, x / 2 - 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The recurring part of the decimal is 857142\n    recurring_sequence = \"857142\"\n    \n    # The length of the recurring sequence is 6 digits\n    sequence_length = len(recurring_sequence)\n    \n    # First 58 digits after the decimal point will contain multiples of the recurring sequence\n    # plus a part of the sequence if it's not a complete multiple.\n    \n    # Finding complete sets of the sequence contained in the first 58 digits\n    complete_sets = 58 // sequence_length\n    \n    # Finding the remainder to know how many more digits of the sequence are needed\n    remaining_digits = 58 % sequence_length\n    \n    # Sum of digits in one complete sequence\n    sum_of_sequence = sum(int(digit) for digit in recurring_sequence)\n    \n    # Sum of digits in the remaining part of the sequence\n    sum_of_remaining = sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n    \n    # Total sum is the sum of complete sequences plus the sum of remaining digits\n    total_sum = (complete_sets * sum_of_sequence) + sum_of_remaining\n    \n    return total_sum\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p1, p6 = symbols('p1 p6')\n    # p1 + p6 = 120 (Total number of students)\n    equation1 = Eq(p1 + p6, 120)\n\n    # 1 * p1 / 2 (because 2 P1 students carried 1 bucket) + 2 * p6 = 180 (Total buckets)\n    equation2 = Eq(p1/2 + 2 * p6, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p1, p6))\n\n    return solutions[p1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # Heads or tails\n    total_tosses = 2\n\n    # Total possible outcomes is the number of outcomes per toss raised to the power of total tosses\n    total_possible_outcomes = outcomes_per_toss ** total_tosses\n    \n    return total_possible_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    num_matches = (num_teams * (num_teams - 1)) // 2\n    return num_matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    solutions = solve((equation1, equation2), (basketball, volleyball))\n    \n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen to Oscar: 3 fish for 1 rabbit -> fish/rabbit = 3/1\n    # Oscar to Dennis: 2 rabbits for 3 packs of wheat -> rabbit/wheat = 2/3\n\n    # Simplify the ratios to find fish to wheat:\n    # (fish/rabbit) * (rabbit/wheat) = fish/wheat\n    fish_to_wheat = (3/1) * (2/3)\n    \n    # To find how many fish per pack of wheat\n    return fish_to_wheat\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the variable PA\n    PA = symbols('PA', real=True, positive=True)\n    \n    # Since P is a point inside the cube and PB, PC, PD, PG are distances to the vertices,\n    # Using Pythagorean theorem for diagonals in square sections of the cube, \n    # and diagonals intersecting the centre of the cube, \n    # we can come up with the following system of equations:\n    # PA^2 + PB^2 = PG^2 (for diagonal AG intersecting PB perpendicularly at the center)\n    # PA^2 + PC^2 = PG^2 (for diagonal AG intersecting PC perpendicularly at the center)\n    # PA^2 + PD^2 = PG^2 (for diagonal AG intersecting PD perpendicularly at the center)\n    # Here PB, PC, PD, and PG are given, and we wish to solve for PA.\n    \n    equation = Eq(PA**2 + 60*sqrt(10)**2, 36*sqrt(7)**2)\n    solution = solve(equation, PA)\n\n    # We'll take the positive solution since distances are positive by nature\n    ans = solution[1]  # [1] because [0] is the negative root\n\n    return ans\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # The correct approach to finding the original number is to multiply the quotient by the divisor\n    # and then add the remainder.\n    quotient = 9\n    divisor = 4\n    remainder = 2\n    \n    original_number = (quotient * divisor) + remainder\n    \n    if original_number == 22:  # compare the obtained number with Johnny's answer\n        correct = True\n    else:\n        correct = False\n    \n    return original_number, correct\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n\n    return len(ways)\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of students in the canteen originally be 'total'.\n    total = symbols('total')\n\n    # 40% of the total are boys initially\n    initial_boys = 0.4 * total\n\n    # After 16 boys left and 16 girls entered, the boys make up 2/15 of the students\n    boys_after_change = initial_boys - 16\n    total_after_change = total - 16 + 16  # Same as initial total\n\n    # Equation based on the new ratio after the change\n    equation = Eq(boys_after_change, 2/15 * total_after_change)\n\n    # Solve the equation to find the total number of students\n    solved_total = solve(equation, total)[0]\n\n    # Calculate the number of girls now, knowing the total and the number of boys\n    girls_now = solved_total - boys_after_change\n\n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    primes = set()\n    for num_length in range(1, 4):  # one, two, or three digits\n        for num_tuple in permutations(digits, num_length):\n            num = int(''.join(num_tuple))\n            if isprime(num) and num < 100:\n                primes.add(num)\n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Computing the numerator of the given expression\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n\n    # Computing the denominator of the given expression\n    denominator = (Fraction(62, 75) - 0.16)\n\n    # Computing the divisor of the given expression\n    divisor = (3.5 + Fraction(14, 3) + Fraction(2, 15)) / (0.5 * (Fraction(21, 20) + 4.1))\n\n    # Final result\n    ans = (numerator / denominator) / divisor\n\n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for N in range(1000, 10000):\n        for i in [1000, 100, 10, 1]:\n            M = N - (N // i % 10) * i\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)       # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming_percent = 82\n    jogging_percent = 54\n    neither_percent = 16\n\n    swimming_count = (swimming_percent / 100) * total_students\n    jogging_count = (jogging_percent / 100) * total_students\n    neither_count = (neither_percent / 100) * total_students\n\n    both_sports = swimming_count + jogging_count - (total_students - neither_count)\n    return int(both_sports)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # Amount of work A can do in one day\n    A_work_per_day = 1 / 15\n    \n    # Amount of work B can do in one day\n    B_work_per_day = 1 / 10\n    \n    # Total work done by both A and B in 4 days\n    work_done_in_4_days = 4 * (A_work_per_day + B_work_per_day)\n    \n    # Remaining work to be done after 4 days\n    remaining_work = 1 - work_done_in_4_days\n    \n    # Days taken by B to do the remaining work\n    days_taken_by_B = remaining_work / B_work_per_day\n    \n    return days_taken_by_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # The first and last tree are planted at both ends\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda's rate in problems per minute\n    cici_rate = 1 / 6   # Cici's rate in problems per minute\n\n    combined_rate = linda_rate + cici_rate  # Combined rate in problems per minute\n\n    total_time = 2 * 60  # Total time in minutes (2 hours)\n\n    total_problems = combined_rate * total_time  # Total problems they can do together\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy has to give to John\n    # Amy will have amy - x apples after giving x apples to John\n    # John will have john + x apples after receiving x apples from Amy\n    # According to the problem, Amy should have 4 more apples than John after the exchange\n    # Therefore, we can set up the equation: amy - x = john + x + 4\n\n    # Now we solve for x\n    x = (amy - john - 4) / 2\n\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    return gcd(num1, num2)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    return 15\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_of_numbers = 37\n    total_sum = mean_of_numbers * 10\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    \n    total_cost = cost_per_person * num_people\n    \n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    answer = tens + tenths + hundredths\n    return answer\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(chan / 4 - toh / 3, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total units of grass in the pasture\n    total_grass = 14 * 15  # This can feed 14 goats for 15 days\n    # Since 1 goat eats as much grass as 4 rabbits per day,\n    # the pasture can feed 14 * 4 = 56 rabbits for 15 days\n    # or the pasture can feed 70 rabbits for 8 days,\n    # we are considering the 70 rabbits scenario as it's provided in the problem\n    # Verify by comparing units of grass needed for 70 rabbits and for 56 rabbits\n    # for the same number of days\n    assert (70 * 8) / (56 * 15) == 1\n    # Now, calculate the units of grass each goat and each rabbit consumes per day\n    grass_per_goat_per_day = total_grass / (14 * 15)\n    grass_per_rabbit_per_day = grass_per_goat_per_day / 4\n    # Calculate the total daily consumption of grass by 17 goats and 20 rabbits\n    total_daily_consumption = (17 * grass_per_goat_per_day) + (20 * grass_per_rabbit_per_day)\n    # Calculate the number of days the pasture can feed 17 goats and 20 rabbits\n    days = total_grass / total_daily_consumption\n    \n    return int(days)\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, sandra * 3/5)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    day = 0\n    current_height = 0\n    \n    while current_height < height:\n        day += 1\n        current_height += climb # snail climbs up during the day\n        if current_height >= height:\n            break\n        current_height -= day # snail slides down at night\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    num = 4\n    times = 3\n    ans = sum(int(str(num) * i) for i in range(1, times + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_savings = january_savings + february_savings + march_savings\n    mean_savings = total_savings / 3\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_numbers = \"0141705021\"\n    password_devil = \"4005220912\"\n\n    angel_count = [angel_numbers.count(str(i)) for i in range(10)]\n    devil_count = [password_devil.count(str(i)) for i in range(10)]\n\n    # Check if character counts match for each digit\n    if angel_count == devil_count:\n        ans = True  # Andy can unlock since counts match\n    else:\n        ans = False  # Andy cannot unlock; provide correct password\n        correct_password = ''.join(str(i) * count for i, count in enumerate(angel_count))\n    \n    return ans, correct_password if not ans else \"Andy can unlock\"\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for n in range(2, 7):  # since we need at least two numbers to sum up to 6\n        for i in range(1, 6):\n            for j in range(i, 6):\n                k = 6 - i - j\n                if k >= j and k > 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n\n    def recurring_decimal_to_fraction(rd, repeat):\n        whole, decimal = map(int, rd.split('.'))\n        repeat_length = len(repeat)\n        fractional_part = (int(repeat) + decimal * (10**repeat_length - 1) - decimal) // (10**repeat_length - 1)\n        return Fraction(whole * (10**repeat_length - 1) + fractional_part, 10**repeat_length - 1)\n\n    nums = [\n        ('0.0', '1'),\n        ('0.1', '2'),\n        ('0.2', '3'),\n        ('0.3', '4'),\n        ('0.4', '5'),\n        ('0.5', '4'),\n        ('0.7', '8')\n    ]\n\n    fractions = [recurring_decimal_to_fraction(rd, rep) for rd, rep in nums]\n    ans = sum(fractions)\n\n    return ans.numerator / ans.denominator\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', real=True, positive=True)\n    x = sqrt(a) - 2/sqrt(a)\n    \n    # Expanding x to find x^2 + 8x in terms of a\n    x_squared = x**2\n    eight_x = 8 * x\n\n    # Calculate x^2 + 8x\n    x_squared_plus_eight_x = x_squared + eight_x\n\n    # Now find sqrt(x^2 + 8x)\n    sqrt_x_squared_plus_eight_x = sqrt(x_squared_plus_eight_x)\n\n    # Simplifying the final expression\n    result = simplify(sqrt_x_squared_plus_eight_x)\n\n    return result\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i+1, 2036):\n            for k in range(j+1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    ans = (total_sheep + total_pens - 1) // total_pens\n    return ans\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_choir = total_boys + total_girls\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age_choir = total_age_boys + total_age_girls\n\n    mean_age_choir = total_age_choir / total_choir\n\n    return mean_age_choir\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    import math\n    raye = 6\n    simon = 12\n    taylor = 16\n    \n    lcm = (raye * simon) // math.gcd(raye, simon)\n    lcm = (lcm * taylor) // math.gcd(lcm, taylor)\n    \n    return lcm\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Sara can take at most 4 green balls and not be sure to have 5 of same color.\n    # Sara can take at most 4 yellow balls and not be sure to have 5 of same color.\n    # Sara can take at most 1 red ball and not be sure to have 5 of same color.\n    # If she takes one more ball (after the maximums above), she will be sure to have 5 of the same color.\n\n    # Calculate the balls taken to guarantee 5 of the same color\n    balls_taken = (4 + 4 + 1) + 1\n    return balls_taken\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    difference = 28 - 25\n    term_number = 10\n    last_term = 31\n\n    first_term = last_term - difference * (term_number - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Calculate the total distance covered by Sam and Ben together in 10 minutes\n    # Speed of Sam = 1 m/s, Speed of Ben = 0.6 m/s\n    # Time = 10 minutes = 600 seconds (since 1 min = 60 sec)\n    # Total distance covered by both = (Speed of Sam + Speed of Ben) * Time\n    total_distance = (1 + 0.6) * 600  # in meters\n    \n    # Calculate the number of times they meet\n    # Each meeting happens every time they cover the length of the pool together\n    # The length of the pool is 30m\n    meets = total_distance / 30\n    \n    # Returning the number of times they meet as an integer\n    return int(meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Define mapping of letters to numbers for \"Angel\"\n    angel_to_number = {'A': 0, 'N': 1, 'G': 4, 'E': 7, 'L': 5}\n    \n    # Define mapping of numbers to letters for \"Angel\"\n    number_to_angel = {value: key for key, value in angel_to_number.items()}\n    \n    # Define mapping of letters to numbers for \"Devil\", based on \"Angel\"\n    devil_to_number = {'D': angel_to_number['A'], 'E': angel_to_number['N'], \n                       'V': angel_to_number['G'], 'I': angel_to_number['E'], \n                       'L': angel_to_number['L']}\n    \n    # Define mapping of numbers to letters for \"Devil\"\n    number_to_devil = {value: key for key, value in devil_to_number.items()}\n    \n    # Andy's input to attempt to unlock the chest\n    andys_input = '4005220912'\n    \n    # Convert Andy's input into the \"Devil\" password equivalent\n    try:\n        andys_password = ''.join(number_to_devil[int(digit)] for digit in andys_input)\n    except KeyError:\n        # If a digit does not have a corresponding letter, the password is incorrect\n        return \"No, Andy cannot unlock the treasure chest.\"\n    \n    # Check if Andy's password is \"Devil\"\n    if andys_password == \"DEVIL\":\n        return \"Yes, Andy can unlock the treasure chest with the number 4005220912.\"\n    else:\n        # Calculate the correct password in number representation\n        correct_password_number = ''.join(str(angel_to_number[letter]) for letter in \"DEVIL\")\n        return f\"No, Andy cannot unlock the treasure chest. The correct password is {correct_password_number}.\"\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    ans = max(temperatures) - min(temperatures)\n    return ans\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    total_bob_cindy = 2 * average_bob_cindy\n    height_doris = 126\n    total_three_children = total_bob_cindy + height_doris\n    average_three_children = total_three_children / 3\n    return average_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    destin, nephew = symbols('destin nephew')\n\n    # Equation 1: In 6 years, Destin will be twice his nephew's age\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n\n    # Equation 2: 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solved_ages = solve((equation1, equation2), (destin, nephew))\n\n    # Calculate the sum of their ages in 10 years\n    sum_of_ages_in_10_years = solved_ages[destin] + 10 + solved_ages[nephew] + 10\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of pies for Mrs Tan and Mrs Lim\n    x = symbols('x')\n    \n    # Equation representing after Mrs Tan bought another 12 pies and Mrs Lim gave away 4 pies\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation for x\n    original_pies = solve(equation, x)\n\n    # Return the number of pies they originally had\n    return original_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    result = 9.97 + 9.98 + 9.99\n    return result\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "import itertools\n\ndef solution():\n    digits = '135'\n    perm = itertools.permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime('6:35AM', '%I:%M%p')\n    arrival_time = datetime.strptime('10:22AM', '%I:%M%p')\n\n    duration = arrival_time - departure_time\n    duration_minutes = duration.seconds // 60\n\n    return duration_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    # The pattern 3456 has a period of 4 digits\n    pattern = \"3456\"\n    pattern_length = len(pattern)\n    \n    # Calculate the number of complete patterns that fit into 50 digits\n    complete_patterns = 50 // pattern_length\n    \n    # Calculate the number of remaining digits after the complete patterns\n    remaining_digits = 50 % pattern_length\n    \n    # Calculate the sum of digits in one pattern\n    sum_of_one_pattern = sum(int(digit) for digit in pattern)\n    \n    # Calculate the total sum of the complete patterns\n    total_sum = sum_of_one_pattern * complete_patterns\n    \n    # Add the sum of the remaining digits to the total sum\n    for i in range(remaining_digits):\n        total_sum += int(pattern[i])\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3/5) / (5/7) / (7/9) / (9/13) / (13/15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n\n    # Calculate number of sweets given to the first group\n    sweets_first_group_total = fraction_first_group * total_sweets\n\n    # Calculate the number of students in the first group\n    students_first_group = sweets_first_group_total / sweets_first_group\n\n    # Calculate the number of sweets remaining\n    remaining_sweets = total_sweets - sweets_first_group_total\n\n    fraction_second_group = 1/4\n    sweets_second_group = 4\n\n    # Calculate number of sweets given to the second group\n    sweets_second_group_total = fraction_second_group * remaining_sweets\n\n    # Calculate the number of students in the second group\n    students_second_group = sweets_second_group_total / sweets_second_group\n\n    # Calculate the number of students in the third group\n    students_third_group = (remaining_sweets - sweets_second_group_total) / 5\n\n    # Calculate the total number of students in the classroom\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n\n    # Let the number of boys be b, and the number of girls be g.\n    # Then, b + g = total_pupils and (b * boys_avg + g * girls_avg) / total_pupils = total_avg\n\n    # We can set up the equations:\n    # b + g = 40\n    # 20b + 60g = 35 * 40\n\n    # Simplify the second equation:\n    # 20b + 60g = 1400\n    # Divide by 20:\n    # b + 3g = 70\n\n    # Now we have a system of two equations:\n    # b + g = 40\n    # b + 3g = 70\n\n    # Subtract the first equation from the second:\n    # (b + 3g) - (b + g) = 70 - 40\n    # 2g = 30\n    # g = 15\n\n    # Replace g in the first equation:\n    # b + 15 = 40\n    # b = 40 - 15\n    b = 25\n\n    return b\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from sympy import primefactors\n    \n    # Given numbers on the cards\n    numbers = [6, 12, 35, 175, 245, 300]\n    \n    # Find the prime factors of all the numbers and store them in a dictionary\n    factors = {number: primefactors(number) for number in numbers}\n    \n    # Check for each combination of two numbers if there are three numbers that multiply to the same product\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product1 = numbers[i] * numbers[j]\n            remaining = [n for n in numbers if n not in (numbers[i], numbers[j])]\n            for k in range(len(remaining)):\n                for l in range(k+1, len(remaining)):\n                    for m in range(l+1, len(remaining)):\n                        product2 = remaining[k] * remaining[l] * remaining[m]\n                        if product1 == product2:\n                            # If the same product is found, return the number that wasn't picked\n                            not_picked = [n for n in numbers if n not in \n                                          (numbers[i], numbers[j], remaining[k], remaining[l], remaining[m])]\n                            return not_picked[0]\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age_now = 10\n    father_age_when_tom_reach_fathers_age = 70\n\n    # Let the difference in age between Tom and his father be 'age_diff'\n    # Father's current age will be Tom's age plus 'age_diff'\n    father_age_now = father_age_when_tom_reach_fathers_age - tom_age_now\n    return father_age_now\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return True\n        return False\n\n    for odd_number in range(999, 0, -2):  # assuming the search starts from a reasonably large odd number, and decrements by 2 to check odd numbers only\n        found = False\n        for i in range(2, odd_number):\n            if is_composite(i):\n                for j in range(i+1, odd_number):  # start from i+1 to ensure different composite numbers\n                    if is_composite(j):\n                        k = odd_number - i - j\n                        if k > j and is_composite(k):  # ensuring k is the largest and different\n                            found = True\n                            break\n            if found:\n                break\n        if not found:\n            return odd_number\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import gcd\n\n    # Function to find Least Common Multiple\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Packet sizes\n    packet_a = 25\n    packet_b = 20\n\n    # Find LCM of the packet sizes\n    days = lcm(packet_a, packet_b)\n\n    # Since she starts on 1st March, the new packets will be started on the LCM day\n    start_month = 3  # March\n    start_day = 1\n\n    # Calculate the date when both packets are started again\n    # Considering a non-leap year for simplicity (i.e., March having 31 days)\n    # If necessary, adjust calculation for leap years\n    total_days_in_march = 31\n    days_to_next_month = days - total_days_in_march\n\n    # Count the number of months passed\n    months_passed = days_to_next_month // total_days_in_march\n    # Get the remaining days after complete months have passed\n    remaining_days = days_to_next_month % total_days_in_march\n\n    next_month = (start_month + months_passed) % 12\n    # If the month count exceeds 12, it's a new year, so we reset the month to 1 (January)\n    if next_month == 0:\n        next_month = 12\n    next_day = start_day + remaining_days\n\n    # Return the next date as a string in \"DD/MM\" format\n    return f\"{next_day:02d}/{next_month:02d}\"\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    num1 = 17\n    num2 = 35\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert the mixed numbers to improper fractions\n    first_number = (3 * 4 + 1) / 4\n    second_number = (1 * 4 + 3) / 4\n\n    # Calculate the difference and convert to decimal\n    difference = first_number - second_number\n\n    return float(difference)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    start = 3  # First number in the sequence that leaves a remainder of 3 when divided by 4\n    end = 99    # Last number less than 100 that fulfils the condition\n    difference = 4  # Common difference in the arithmetic sequence\n    \n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((end - start) // difference) + 1 \n    \n    # Calculate the sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (start + end)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # For an isosceles triangle with sides a, a, b (where a is the repeated side),\n    # the perimeter is 12, so we have 2a + b = 12.\n    # Also, b must be less than 2a to form a triangle (triangle inequality theorem).\n    for a in range(1, 12 // 2):\n        for b in range(1, 12):\n            if 2 * a + b == 12 and b < 2 * a:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 15\n    tax_percent = 8\n\n    tip = (tip_percent / 100) * bill\n    tax = (tax_percent / 100) * bill\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    \n    both_teams = sports_team + art_team - total_students\n    \n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    result = 104 // 4\n    return result\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_start = 86\n    lena_gave_away = 29\n    lena_final = 100\n\n    lena_after_giving = lena_start - lena_gave_away\n    strawberries_from_mother = lena_final - lena_after_giving\n\n    return strawberries_from_mother\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n    \n    class_a = 8\n    class_b = 12\n    class_c = 20\n    \n    # Finding the Greatest Common Divisor (GCD) of the three numbers\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n    \n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n    \n    # Using inclusion-exclusion principle\n    # Total passed both exams = Passed first exam - (Passed second but failed first)\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n\n    # Total students who passed only the first exam = Passed first exam - (Passed both exams)\n    passed_only_first_exam = passed_first_exam - passed_both_exams\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    ways_A_to_B = 7\n    ways_B_to_C = 5\n    ways_B_to_D = ways_B_to_C * 2  # B to C to D\n    ways_A_to_C = 4\n    ways_C_to_D = 2\n    ways_A_to_D_direct = 6\n\n    ways_A_to_D = (ways_A_to_B * ways_B_to_D) + (ways_A_to_C * ways_C_to_D) + ways_A_to_D_direct\n\n    return ways_A_to_D\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the elder and younger brothers\n    elder, younger = symbols('elder younger')\n    \n    # Equation 1: The sum of the current ages of the two brothers is 42\n    equation1 = Eq(elder + younger, 42)\n    \n    # Equation 2: A few years ago, the younger brother was half the elder's current age when the elder was at the current age of the younger\n    # Let's assume the difference in years is \"diff\"\n    # elder - diff = younger\n    # younger - diff = elder / 2\n    # Replaced elder by younger + diff\n    # younger - diff = (younger + diff) / 2\n    equation2 = Eq(younger - (elder - younger), (elder) / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n    \n    # Return the age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    # Let x be the cost of one pen\n    # Given 3 pencils cost 3 * 2 = £6\n    # Therefore, 2 pens cost a total of £20 - £6 = £14\n    # So one pen costs £14 / 2 = £7\n    pen_cost = (20 - 3 * 2) / 2\n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    # Hay eaten by one cattle in one day\n    hay_per_cattle_per_day = total_hay / (total_cattle * total_days)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for oldest in range(middle + 1, 10):\n                if youngest * middle * oldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    total_students = 39\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if boys/4 == 2*girls/5:\n            ans = boys - girls\n            return ans\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    total_boxes = total_avocados // per_box\n    return total_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let the number of chocolate cupcakes be c and cheese cupcakes be ch\n    # c + ch = 255\n    # The remaining chocolate cupcakes after selling 40% will be 60%, hence 0.6c\n    # The remaining cheese cupcakes after selling 75% will be 25%, hence 0.25ch\n    # According to the problem, the remaining chocolate and cheese cupcakes are equal\n    # Therefore, 0.6c = 0.25ch\n    # Also, c + ch = 255\n    # We solve these equations to find the values of c and ch\n\n    from sympy import symbols, Eq, solve\n    \n    c, ch = symbols('c ch')\n    equation1 = Eq(c + ch, 255)\n    equation2 = Eq(0.6 * c, 0.25 * ch)\n    \n    solutions = solve((equation1, equation2), (c, ch))\n    \n    c_solutions = solutions[c]\n    ch_solutions = solutions[ch]\n\n    # Calculate remaining cupcakes for each type\n    remaining_c = 0.6 * c_solutions\n    remaining_ch = 0.25 * ch_solutions\n\n    return remaining_c\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n\n    full_days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts % locusts_per_day\n\n    return remaining_locusts if remaining_locusts != 0 else locusts_per_day\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables for the number of $5 and $10 notes\n    fives, tens = symbols('fives tens')\n    \n    # Total number of notes\n    total_notes_eq = Eq(fives + tens, 116)\n    \n    # Number of notes after spending\n    spent_fives = 0.25 * fives\n    spent_tens = 0.60 * tens\n    remaining_fives = fives - spent_fives\n    remaining_tens = tens - spent_tens\n    \n    # Remaining notes ratio\n    ratio_eq = Eq(remaining_tens, 4/7 * remaining_fives)\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, ratio_eq), (fives, tens))\n\n    # Calculate the amount spent\n    money_spent = spent_fives * 5 + spent_tens * 10\n    \n    return money_spent.evalf(subs=solutions)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Don's stickers as d and Ben's stickers as b\n    d, b = symbols('d b')\n\n    # The initial ratio of Don's to Ben's stickers is 2:3\n    initial_ratio = Eq(d / b, 2 / 3)\n\n    # After the changes, the ratio of Don's to Ben's stickers is 6:7\n    new_ratio = Eq((d + 10) / (b - 5), 6 / 7)\n\n    # We need to solve the system of equations for d and b\n    solutions = solve((initial_ratio, new_ratio), (d, b))\n\n    # The solution will give us the number of stickers Don had at first\n    don_stickers_initially = solutions[d]\n\n    return don_stickers_initially\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total_sum = sum([i if i % 2 == 0 else -i for i in range(2, 2017)])\n    return total_sum\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    difference = amy_toys - sally_toys\n    toys_to_give = difference // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "from itertools import combinations\n\ndef solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_amount = 80\n    kenny_amount = cecilia_amount / 4\n    total_amount = cecilia_amount + kenny_amount\n    return total_amount\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    i = 1\n    sum_of_products = 0\n    while i < 40:\n        sum_of_products += i * (i + 2)\n        i += 2\n    return sum_of_products\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial as f\n\ndef solution():\n    # Total arrangements without restrictions\n    total_arrangements = f(5)\n\n    # Arrangements of 3 triplet sisters as a unit with 2 other students (2 boys + 1 girl)\n    triplet_arrangements = f(3)\n\n    # Arrangements of twin brothers with 2 others not next to each other\n    # It's (3 positions) x (2 arrangements of the brothers themselves)\n    twin_arrangements = 3 * f(2)\n\n    # Multiplied together to get the arrangements considering all the conditions\n    ans = total_arrangements * triplet_arrangements * twin_arrangements\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    \n    # Since trees are planted at both ends, we add one more tree to the count.\n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    total_cups_needed = 30\n    gallons_needed = total_cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    num_students = 320\n    days_in_week = 7\n\n    # Applying Pigeonhole Principle to find the least number of students\n    # in the week that has the most birthdays\n    min_students_most_birthdays = (num_students // days_in_week) + 1\n\n    return min_students_most_birthdays\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assuming the summer vacation starts on a Friday, then we would have the maximum number of Fridays\n    max_fridays = 55 // 7  # This gives us the full weeks within the 55 days\n\n    # Now we check if there is a partial week at the end with a Friday\n    if 55 % 7 >= 5:  # If the remainder is greater than or equal to 5, then there is an additional Friday\n        max_fridays += 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    num_girls_wearing_glasses = (total_girls * percentage_wearing_glasses) / 100\n\n    return int(num_girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy import lcm \n\n    # Calculate the Least Common Multiple (LCM) of the integers 2 to 9, except 7 since 7 is a distinct condition\n    multiple = lcm([2, 3, 4, 5, 6, 8, 9]) \n\n    # Starting with the LCM, iterate by adding the LCM until the remainder when divided by 7 is 5\n    N = multiple\n    while N % 7 != 5:\n        N += multiple\n\n    return N\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Calculate the price of one mug by dividing the total cost by the number of mugs\n    price_per_mug = 3.50 / 5\n    # Calculate the price of one pen by dividing the total cost by the number of pens\n    price_per_pen = 6.80 / 8\n    \n    # Calculate the total cost of 7 mugs and 5 pens\n    total_cost = (7 * price_per_mug) + (5 * price_per_pen)\n    \n    # Calculate the change from £10\n    change = 10 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_going = total_pupils - pupils_away\n    return pupils_going\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3\n    number_of_songs = 2\n    total_children = 50\n    \n    total_time = time_per_child_per_song * number_of_songs * total_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_5_apples = 580\n    weight_with_2_apples = 280\n\n    weight_of_3_apples = total_weight_with_5_apples - weight_with_2_apples\n    weight_of_1_apple = weight_of_3_apples / 3\n    weight_of_basket = weight_with_2_apples - (weight_of_1_apple * 2)\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    # Convert 25% into decimal\n    decimal_25_percent = 25 / 100\n\n    # The number to compare with\n    decimal_number = 0.3\n\n    # Check which number is larger\n    if decimal_25_percent > decimal_number:\n        return \"25%\"\n    else:\n        return \"0.3\"\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    # Since the question is simply the result of an arithmetic evaluation of \"1\",\n    # the solution is to return 1 as the answer.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    annual_interest_rate = 0.015\n    claimed_years = 5\n\n    def compute_final_amount(principal, rate, time):\n        return principal * ((1 + rate) ** time)\n\n    actual_years = 0\n    while compute_final_amount(initial_amount, annual_interest_rate, actual_years) < final_amount:\n        actual_years += 1\n\n    is_bella_right = actual_years == claimed_years\n    return (is_bella_right, actual_years - 1 if not is_bella_right else claimed_years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_purchased = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_purchased\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    required_loafs = 35\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    from math import lcm\n\n    least_common_multiple = lcm(3, 7)\n\n    # The number must end in 2, so we keep adding the LCM to itself until it ends with a 2\n    number = least_common_multiple\n    while str(number)[-1] != '2':\n        number += least_common_multiple\n\n    return number\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    total_days = days_in_a_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_of_first_3 = 3 * 10**5  # 3 in the hundred thousands place\n    value_of_second_3 = 3 * 10**2  # 3 in the hundreds place\n    difference = value_of_first_3 - value_of_second_3\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jonah, angus = symbols('john jonah angus')\n\n    equation1 = Eq(1/john + 1/jonah + 1/angus, 1/27)\n    equation2 = Eq(1/jonah + 1/angus, 1/36)\n\n    solutions = solve((equation1, equation2), (john, jonah, angus))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Define the coin values.\n    coin1 = 4\n    coin2 = 5\n\n    # The largest number that cannot be formed by 4z and 5z coins is found \n    # by using the Chicken McNugget Theorem (Frobenius coin problem) for two coin values:\n    # For two coin denominations, a and b, that are relatively prime,\n    # the largest amount that cannot be obtained (called the Frobenius number) is a*b - a - b.\n    # Since 4 and 5 are relatively prime, we can apply this theorem directly.\n    \n    # Calculate Frobenius number for coin1 and coin2.\n    max_unobtainable = coin1 * coin2 - coin1 - coin2\n    \n    return max_unobtainable\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Five years ago, the combined age was 14 years.\n    # Since 5 years have passed, each person has aged by 5 years.\n    # Therefore, we need to add 5 years for each person to the total.\n    combined_age_5_years_ago = 14\n    num_people = 2\n    age_increase_per_person_since_then = 5\n    \n    # Calculate the current combined age.\n    current_combined_age = combined_age_5_years_ago + (age_increase_per_person_since_then * num_people)\n    \n    # Calculate the combined age in 3 years.\n    combined_age_in_3_years = current_combined_age + (3 * num_people)\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = int(\"1082{}{}\".format(a, b))\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n    longest_piece_length = gcd(length1, length2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g.\n    # Then b + g = 152, which is the total number of students.\n    \n    # After removing 1/11 of the boys and 5 girls, the number of boys and girls become equal.\n    # This gives us the equation: b - (1/11)*b = g - 5\n    \n    # We then solve these two equations to find the value of b.\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n    \n    # Total number of students equation\n    eq1 = Eq(b + g, 152)\n    # Boys and girls become equal after removals equation\n    eq2 = Eq(b - (1/11)*b, g - 5)\n    \n    # Solve the system of equations for b and g\n    solution = solve((eq1, eq2), (b, g))\n\n    # Extract the solution for the number of boys\n    return solution[b]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    ans = 475 + 138\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Given sum of the 10 numbers is 1001\n    total_sum = 1001\n    \n    # Prime factorization of 1001 is 7 * 11 * 13\n    # The greatest common divisor d must be a divisor of the total sum\n    # The maximum value of d will be the maximum divisor of 1001 that can be distributed\n    # among 10 numbers such that their sum is 1001\n\n    # We can start by checking divisors of 1001 starting from the largest\n    # Since 1001 is not a large number, we can directly do this\n    # Alternatively, we could use the prime factorization to inform our choices\n    prime_factors = [7, 11, 13]\n\n    # The product of the prime factors is the maximum possible divisor\n    max_d = 7 * 11 * 13\n\n    # However, in order to divide evenly among the 10 numbers, the GCD d must divide 1001\n    # such that the quotient is at most 10 (as there are 10 numbers)\n    # Thus, we need to find the largest divisor of 1001 less than or equal to 1001 / 10\n    for d in range(max_d, 0, -1):\n        if total_sum % d == 0 and total_sum // d <= 10:\n            return d\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    number_of_boxes = total_pencils // pencils_per_box\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_laid_daily = 50\n    days_to_adult = 30\n    total_days = 40\n\n    # Determine how many days Ermintrude can lay eggs until the new adult fleas emerge.\n    laying_days = total_days - days_to_adult\n\n    # Calculate the total number of fleas that will become adults.\n    # Eggs laid on any day from the first day to the laying_days day will become adults.\n    new_adult_fleas = laying_days * eggs_laid_daily\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (3 * 7) + 0\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    litres_of_water = total_orange_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    # The number of students in the last row using the formula\n    # for nth term in arithmetic progression: a_n = a_1 + (n - 1) * d\n    last_term = first_term + (num_rows - 1) * difference\n\n    # The sum of an arithmetic progression:\n    # S_n = n/2 * (a_1 + a_n)\n    total_students = num_rows / 2 * (first_term + last_term)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # Create a loop to iterate over possible values for abcd\n    # since M - N = 22122, abcd must be a four-digit number\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        # Check if M - N equals 22122\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    first_fraction = Fraction(21 * 286 + 21, 286)\n    second_fraction = Fraction(6 * 2530 + 647, 2530)\n    third_fraction = Fraction(1 * 2829 + 1370, 2829)\n\n    # Perform the calculation\n    ans = first_fraction / second_fraction * third_fraction\n\n    # Convert the result to a mixed number\n    ans_mixed = ans.numerator // ans.denominator, ans.numerator % ans.denominator, ans.denominator\n\n    return ans_mixed\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the size of each small cube\n    size_small_cube = (6 * 10 * 12) // 720\n    # Calculate the number of small cubes along each dimension of the cuboid\n    # It's a cube, so we just need to take the cube root of the smaller cubes number\n    num_small = int((720) ** (1/3))\n    # Calculate the top and bottom area\n    top_bottom = (10 // size_small_cube) * (12 // size_small_cube) * 2 \n    # Calculate the front and back area (without the top and bottom edges)\n    front_back = (6 // size_small_cube) * ((12 // size_small_cube) - 2) * 2\n    # Calculate the left and right area (without the top and bottom edges)\n    left_right = (6 // size_small_cube) * ((10 // size_small_cube) - 2) * 2\n    # Sum them up\n    num_cubes_one_pink = top_bottom + front_back + left_right\n    return num_cubes_one_pink\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n\n    return money_left\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let star_rate be the rate at which Star types (jobs per hour)\n    # Let nini_rate be the rate at which Nini types (jobs per hour)\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    \n    # Given that Star types for 5 hours, then Nini types for 20 hours to finish 1 job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    \n    # Given that Star types for 20 hours, then Nini types for 8 hours to finish 1 job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n    \n    # Solve the systems of equations\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # Time for Nini to finish the job by herself is 1 / nini_rate\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)  # Maria has 20 apples more than Anne\n    equation2 = Eq(anne + maria, 44)  # Together they have 44 apples\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # We know that 140 = 2 * 2 * 5 * 7\n    # An odd divisor of 140 cannot include the prime factor 2\n    # Thus, we are only interested in divisors containing the factors 5 and 7\n    # The number of ways to distribute the candies in odd piles\n    # would be the count of all the combinations of the odd prime factors 5 and 7\n    # Since 5 and 7 are prime, the divisors are 1 (no piles), 5 (one pile), 7 (one pile), and 5*7 (one pile)\n    # These correspond to 1 way for no piles, 1 way for a pile of 5, 1 way for a pile of 7, and 1 way for a pile of 35\n    # Therefore, there are 1 + 1 + 1 + 1 = 4 ways to distribute the candy into odd-numbered piles\n\n    return 4\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B\n    stack_A = 20\n    stack_B = 20 - 4  # Tom took 4 stones\n    \n    # To ensure a win, Jerry must make sure that after his turn,\n    # the number of stones in both stacks are equal.\n    # This way, no matter what Tom does, Jerry can always mimic his moves\n    # and take the last stone. Jerry can do this by taking stones from Stack A.\n    \n    # Calculate the number of stones Jerry must take from Stack A to equalize the stacks\n    stones_to_take = stack_A - stack_B\n    \n    # Jerry will take these many stones from Stack A\n    stack = \"A\"\n    \n    # Return the number of stones and which stack\n    return stones_to_take, stack\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    third_sheet_pages = [5, 6, 51, 52]  # Pages on the third sheet (front and back)\n    return sum(third_sheet_pages)\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # He must try each key with each classroom at worst.\n    # So for each classroom, he may have to try 19 wrong keys before trying the right one.\n    # This is the worst case for each of the 20 classrooms.\n    \n    # He tries 19 wrong keys for the first classroom,\n    # then 18 wrong keys for the second (as one key is eliminated after being used in the first),\n    # and so on until he tries 0 wrong keys for the last classroom because only the correct key is left.\n    # This is 19 + 18 + ... + 1 + 0 times, which is the sum of the first 19 natural numbers.\n    \n    # The sum of the first n natural numbers is (n * (n + 1)) / 2.\n    # So the sum of the first 19 natural numbers is (19 * 20) / 2.\n    max_attempts = (19 * 20) // 2\n    \n    # He must also try the correct key each time after the wrong ones\n    # So we add 20 to the number of total attempts to account for the correct attempts.\n    max_attempts += 20\n    \n    return max_attempts\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice_cost = 30 * 5\n    total_orange_juice_cost = 50 * 3\n    total_peach_juice_cost = 20 * 10\n    total_cups = 30 + 50 + 20\n    total_cost = total_apple_juice_cost + total_orange_juice_cost + total_peach_juice_cost\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial conditions - each box A and B has the same number of pens for each color\n    blue_a, red_a, black_a, green_a = 10, 15, 20, 25  # Box A\n    blue_b, red_b, black_b, green_b = 10, 15, 20, 25  # Box B\n\n    # After moving 20 pens of any color from Box A to Box B\n    # We choose to move black pens because Box A has the most of them\n    black_a -= 20\n    black_b += 20\n\n    # Now we want to return pens from Box B to A while ensuring there are at least 15 pens of each color in Box A\n    # Since we need at least 15 pens in each color in Box A,\n    # We need to consider the difference from 15 for each color and move back the appropriate number of pens.\n\n    # For blue, red, and green, no pens need to be moved, as Box A already has at least 15 pens of each color.\n    # For black, since we have 0 in Box A now, we need to move 15 back to reach the minimum requirement.\n    black_required_to_return = max(15 - black_a, 0)\n\n    return black_required_to_return\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits_used = 0\n    number_of_pages = 0\n    \n    # Number of digits used by the pages with 1 digit: 9 (1-9)\n    # Number of digits used by the pages with 2 digits: 90 * 2 (10-99)\n    # Number of digits used by the pages with 3 digits: 900 * 3 (100-999)\n    \n    # First, count the pages with 1 digit.\n    if total_digits > 9:\n        digits_used += 9\n        number_of_pages += 9\n        total_digits -= 9\n    else:\n        number_of_pages += total_digits\n        return number_of_pages\n    \n    # Then, count the pages with 2 digits.\n    if total_digits > 180:\n        digits_used += 180\n        number_of_pages += 90\n        total_digits -= 180\n    else:\n        number_of_pages += total_digits // 2\n        return number_of_pages\n    \n    # Finally, count the pages with 3 digits.\n    number_of_pages += total_digits // 3\n    \n    return number_of_pages\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 92))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time 9:15 PM to minutes\n    end_time = (11 * 60) + 6    # Convert end time 11:06 PM to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    students_difference = 32\n    total_students = 0\n\n    # Start with an initial estimate of the side length for a square array.\n    # Since boys are arranged on the outer layer and girls on the next layer,\n    # each layer will affect the difference between the number of boys and girls by 4*(side_length - 1),\n    # where side_length is the length of a side of the current layer square.\n    side_length = 1\n    while True:\n        boys = 4 * side_length - 4 if side_length > 1 else 1\n        girls = 4 * (side_length - 2) - 4 if side_length > 2 else 0\n        layer_difference = boys - girls\n        total_students += boys + girls\n\n        if layer_difference == students_difference:\n            break\n        else:\n            side_length += 2  # Increase the side length by 2 for the next square layer.\n\n    return total_students\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centre_chocolates = 16\n\n    # All milk chocolates could have soft-centres, which would leave the minimum amount of plain chocolates with soft-centres.\n    min_plain_soft_centre = soft_centre_chocolates - milk_chocolates\n    \n    # If all plain chocolates have soft-centres, it would be the maximum number of plain chocolates with soft-centres.\n    max_plain_soft_centre = min(plain_chocolates, soft_centre_chocolates)\n    \n    # The number of plain chocolates with soft-centres could be anything between this minimum and maximum.\n    return (min_plain_soft_centre, max_plain_soft_centre)\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let d be the divisor and q be the quotient\n    q = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # The dividend is given by d * q + remainder\n    # The equation for the sum is dividend + d = sum_dividend_divisor\n    # Substitute dividend with d*q + remainder:\n    # (d * q + remainder) + d = sum_dividend_divisor\n    # d * (q + 1) + remainder = sum_dividend_divisor\n    # d = (sum_dividend_divisor - remainder) / (q + 1)\n\n    d = (sum_dividend_divisor - remainder) // (q + 1)  # Use floor division to get an integer result\n\n    # The dividend is:\n    dividend = d * q + remainder\n\n    # The difference between the dividend and divisor is:\n    difference = dividend - d\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5 / 100\n    number_playing_violin = 11\n\n    total_pupils = number_playing_violin / percentage\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin (1p, 2p, 5p, 10p)\n    x = symbols('x')\n    \n    # Create equations based on the given information\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Calculate the total number of coins\n    total_coins = solutions[x] * 4  # Since there are 4 types of coins\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    # Equation 1: The total number of apples and pears at first\n    equation1 = Eq(apples + pears, 105)\n    # After selling, the number of apples and pears left can be expressed as:\n    # (2/3) * apples and (3/5) * pears\n    # We also know that there were (5/6) as many apples as pears left\n    # Equation 2: The relationship between apples and pears after selling\n    equation2 = Eq((2/3) * apples, (5/6) * (3/5) * pears)\n    \n    # Solve the system of equations to find the number of apples and pears\n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    # Calculate the total number of apples and pears sold\n    apples_sold = (1/3) * solutions[apples]\n    pears_sold = (2/5) * solutions[pears]\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n    \n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # Proportion equations\n    eq1 = Eq(A/B, 4/5)\n    eq2 = Eq(B/C, 5/6)\n    eq3 = Eq(C - A, 10)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Return the sum\n    return sum(solutions[A], solutions[B], solutions[C])\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat the group of students A, B, C, D as one block, so now we have 9 blocks to arrange.\n    block_arrangements = factorial(9)\n    \n    # The students A, B, C, D can arrange themselves in 4! different ways.\n    students_ABCD_arrangements = factorial(4)\n    \n    # Multiply the number of arrangements of the blocks by the arrangements within the block A, B, C, D.\n    total_arrangements = block_arrangements * students_ABCD_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played\n    games = (6 * 5) // 2\n    \n    # Total points distributed altogether\n    total_points = games * 2\n    \n    # Points acquired by the five students\n    points_acquired = 7 + 6 + 5 + 4 + 3\n    \n    # Points of the remaining student\n    remaining_points = total_points - points_acquired\n    \n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the original weights of bag A and bag B, respectively.\n    x, y = symbols('x y')\n\n    # Given the original ratio of the weights of bags A and B\n    eq1 = Eq(x/y, 5/3)\n\n    # After transferring 10 grams from bag A to bag B, the new ratio\n    eq2 = Eq((x - 10)/(y + 10), 7/5)\n\n    # Solving the system of equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Total weight is the sum of weights of bag A and bag B\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls = 3 / 5\n    number_of_boys = 9\n    unit_rate = number_of_boys / boys_to_girls\n    number_of_girls = unit_rate - number_of_boys\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n\n    # n * (first_line + last_line) / 2 = total_players\n    # Solve for n\n    n = (2 * total_players) / (first_line + last_line)\n    \n    # The difference (d) in the arithmetic sequence is:\n    # d = (last_line - first_line) / (n - 1)\n    difference = (last_line - first_line) / (n - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    n = 48 * 925 * 38 * 435\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to grams for easy comparison\n    masses = {\n        '30g': 30,\n        '1kg': 1000,\n        '300g': 300,\n        '2.5kg': 2500,\n        '3000g': 3000,\n        '150g': 150,\n        '3g': 3\n    }\n\n    # Find the largest mass by comparing values\n    largest_mass = max(masses, key=masses.get)\n    \n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Given values\n    thefts = 2\n    barking_probability_theft = 0.9\n    days = 1000\n    barks_per_week = 3\n    weeks = days / 7\n\n    # Calculate total barks over 1000 days\n    total_barks = barks_per_week * weeks\n\n    # Use Bayes' theorem to calculate the conditional probability:\n    # P(Theft | Barking) = P(Barking | Theft) * P(Theft) / P(Barking)\n    probability_theft = thefts / days\n    probability_barking = total_barks / days\n\n    conditional_probability = (barking_probability_theft * probability_theft) / probability_barking\n\n    return conditional_probability\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Set up the equations based on the problem statements\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    # Return the number of apple candies\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    fraction_boys = 1 - fraction_girls\n\n    num_boys = total_children * fraction_boys\n\n    return int(num_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of stickers and y be the number of pupils\n    x, y = symbols('x y')\n    \n    # create equations based on the problem statement\n    equation1 = Eq(x - 13*y, 190)\n    equation2 = Eq(x - 17*y, 50)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest possible difference would be between two numbers where one is a rearrangement \n    # of the other, with each digit shifted by one place, except for the end digits.\n    # For example, the following two numbers (A and B) will have the smallest possible difference:\n    # A = 123456789\n    # B = 912345678\n    # The difference will be (A - B) = 123456789 - 912345678\n    \n    # Create the smallest number by arranging the digits in ascending order\n    smallest = int(''.join(str(d) for d in range(1, 10)))\n    \n    # Create the second smallest number by moving the first digit of the smallest number to the end\n    second_smallest = int(''.join(str(d) for d in range(2, 10)) + str(1))\n    \n    # Calculate the difference between the two numbers\n    difference = smallest - second_smallest\n    \n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n    # Set up the original relationship between boys and girls\n    original_equation = Eq(girls - boys, 65)\n    # After some boys and girls left\n    boys_left = boys - (2/5) * boys\n    girls_left = girls - (3/7) * girls\n    # The number of boys and girls left are equal\n    left_equation = Eq(boys_left, girls_left)\n\n    # Solve the equations\n    solutions = solve((original_equation, left_equation), (boys, girls))\n\n    # Calculate the total number of students left\n    total_left = solutions[boys] * (3/5) + solutions[girls] * (4/7)\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    unmoved_bricks = 25\n    third_trip_bricks = 68\n\n    # Remaining bricks after the second trip\n    remaining_after_second = third_trip_bricks + unmoved_bricks\n    \n    # Half of the remaining bricks before the second trip (add 11 which were additionally moved on the second trip)\n    half_remaining_before_second = remaining_after_second + 11\n    \n    # Total remaining bricks before the second trip (twice the half found above)\n    total_remaining_before_second = half_remaining_before_second * 2\n    \n    # Half of the initial bricks (subtract 26 which were fewer moved on the first trip)\n    half_initial_bricks = total_remaining_before_second + 26\n    \n    # Total initial bricks (twice the half found above)\n    total_initial_bricks = half_initial_bricks * 2\n    \n    return total_initial_bricks\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_pupils = 1690\n    boys_more_than_girls = 90\n    boys_swim_diff = 120\n\n    # Equation for the total number of pupils\n    pupils_eq = Eq(boys + girls, total_pupils)\n    # Equation for the difference between boys and girls\n    boys_girls_diff_eq = Eq(boys - girls, boys_more_than_girls)\n\n    # Solve for boys and girls\n    pupils_solution = solve((pupils_eq, boys_girls_diff_eq), (boys, girls))\n    \n    girls = pupils_solution[girls]\n    boys = pupils_solution[boys]\n    \n    girls_can_swim_ratio = 31\n    girls_cannot_swim_ratio = 49\n    total_girls_swim_ratio = girls_can_swim_ratio + girls_cannot_swim_ratio\n\n    # Calculate number of girls who can and cannot swim\n    girls_cannot_swim = girls * girls_cannot_swim_ratio / total_girls_swim_ratio\n    girls_can_swim = girls - girls_cannot_swim\n    \n    boys_can_swim = boys - boys_swim_diff\n    boys_cannot_swim = boys - boys_can_swim\n\n    # Total pupils who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n    \n    # There are 3 kids, so we need to arrange 3 distinct items\n    ans = factorial(3)\n    \n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    for i in range(2, 100): # Assuming the class size is less than 10,000\n        if (i - 1) ** 2 < i * i <= (i + 1) ** 2:\n            if (i * i - 1) % (i - 1) == 0 and (i * i - 1) % (i + 1) == 0:\n                ans = i * i\n                return ans\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    sum_of_ages_now = 22\n    sum_of_ages_future = 40\n    years_pass = sum_of_ages_future - sum_of_ages_now\n    return years_pass\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Define a function to calculate the number of ways to reach the nth step\n    # using memoization to avoid redundant calculations\n    def num_ways(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 1  # Only one way to stand on ground (0th step)\n        if n < 0:\n            return 0  # No way to get to a negative step\n        # Calculate number of ways by using either 2-step or 3-step\n        memo[n] = num_ways(n - 2, memo) + num_ways(n - 3, memo)\n        return memo[n]\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Calculate the number of ways to reach the 10th step\n    return num_ways(10, memo)\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for thousands in range(1, 10):  # First digit must be non-zero\n        for hundreds in range(10):\n            for tens in range(10):\n                for ones in range(1, 10):  # New thousands digit must be non-zero\n                    original_num = 1000 * thousands + 100 * hundreds + 10 * tens + ones\n                    new_num = 1000 * ones + 100 * thousands + 10 * hundreds + tens\n                    if new_num - original_num == 5877:\n                        return original_num\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # The smallest possible non-zero positive integer divisor\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = \"\"\n    n = 0\n\n    while True:\n        number += \"1998\"\n        n += 4  # Each time we add 1998, we add 4 digits\n        if int(number) % 33 == 0:\n            break\n\n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number  # The first number in the nth group\n    b = a ** 2  # The second number in the nth group\n    c = a * b  # The third number in the nth group\n    sum_of_numbers = a + b + c  # Sum of the three numbers in the nth group\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    miles_per_run = 1/4\n    total_miles = 3.75\n\n    num_runs = total_miles / miles_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return int(ans)\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion is 10:x = 14:21\n    # Cross multiplying gives us 10 * 21 = 14 * x\n    # Solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100, 6):  # Start from 10, the first two-digit number, increment by 6 because it must be a multiple of 6\n        if number % 9 == 0 and str(number).endswith('0'):  # Check if it is a multiple of 9 and ends with '0'\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # Since we are adding 7 tens\n    correct_answer = original_number + tens_to_add\n    johnny_answer = 5839\n    return correct_answer if johnny_answer != correct_answer else johnny_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27\n    count = 0\n    for i in range(1, n):\n        if (n - i) > i:\n            count += 1\n            n -= i\n        else:\n            break\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 3 * 100  # 3 meters converted to centimeters\n    given_lengths_cm = [147, 32.5, 67]  # lengths of the three pieces in centimeters\n    fourth_length_cm = total_length_cm - sum(given_lengths_cm)  # subtract to find the fourth piece\n    return fourth_length_cm\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    prob_A = 0.5\n    prob_B = 0.4\n    prob_C = 0.2\n    \n    # Probabilities of passing\n    prob_A_pass = prob_A\n    prob_B_pass = prob_B\n    prob_C_pass = prob_C\n    \n    # Probabilities of failing\n    prob_A_fail = 1 - prob_A_pass\n    prob_B_fail = 1 - prob_B_pass\n    prob_C_fail = 1 - prob_C_pass\n    \n    # Calculate the probability for all combinations\n    prob_all_pass = prob_A_pass * prob_B_pass * prob_C_pass\n    prob_two_pass = prob_A_pass * prob_B_pass * prob_C_fail + \\\n                    prob_A_pass * prob_B_fail * prob_C_pass + \\\n                    prob_A_fail * prob_B_pass * prob_C_pass\n    prob_one_pass = prob_A_pass * prob_B_fail * prob_C_fail + \\\n                    prob_A_fail * prob_B_pass * prob_C_fail + \\\n                    prob_A_fail * prob_B_fail * prob_C_pass\n    \n    # Find the most likely scenario(s)\n    probabilities = {\n        0: prob_A_fail * prob_B_fail * prob_C_fail,\n        1: prob_one_pass,\n        2: prob_two_pass,\n        3: prob_all_pass\n    }\n    \n    # Get the number of people most likely to pass (highest probability)\n    most_likely = max(probabilities, key=probabilities.get)\n    \n    return most_likely\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves_required = total_papers // interval  # Integer division to get the number of leaves\n    return leaves_required\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    term1 = (101 + 234 + 567)\n    term2 = (234 + 567 + 89)\n    term3 = (101 + 234 + 567 + 89)\n    term4 = (234 + 567)\n\n    ans = (term1 * term2) - (term3 * term4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # account for the first term which is 1\n    for i in range(1, 11):  # Iterate from 1 to 10\n        ans += (i / 10) * 2  # Each frac{i}{10} term appears twice\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    # Let the initial number of caps be 11x and watches be 8x\n    # After selling 88 caps, the number of caps becomes 11x - 88\n    # The new ratio of watches to caps is 12:11 which gives us the equation\n    # 8x / (11x - 88) = 12 / 11\n    # Cross multiply to get the equation in terms of x\n    # 88x = 11 * (11x - 88)\n    # Simplify and solve for x\n    x = 88 / (11 - 8)\n    \n    # Number of watches is 8x\n    watches = 8 * x\n\n    return watches\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time spent riding from the first house to the sixth house\n    time_to_sixth_house = 30\n    \n    # Number of intervals between first and sixth house is 5 (since width is negligible)\n    intervals_to_sixth_house = 5\n    \n    # Total number of intervals for ten houses is 9\n    total_intervals = 9\n    \n    # If he maintains the same speed, time is directly proportional to the number of intervals\n    # Calculate the total time for all ten houses\n    total_time = time_to_sixth_house * (total_intervals / intervals_to_sixth_house)\n    \n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 105  # Convert meter to centimeter by multiplying by 100\n    longer_piece_length_cm = (2/3) * total_length_cm\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    gallon_in_litres = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * gallon_in_litres\n    total_cost = litres_used * cost_per_litre\n\n    return round(total_cost, 2)\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total_coins = 2015\n    max_pick = 11\n\n    # To ensure a win, Jack needs to leave a multiple of (max_pick+1) for Ken after his turn\n    # So that no matter how many coins Ken picks, Jack can always pick a number that brings\n    # the total back down to a multiple of (max_pick + 1).\n    # Jack's strategy is to reduce the total to a multiple of (max_pick + 1) on his turn.\n\n    # Find the remainder when the total coins is divided by (max_pick + 1).\n    remainder = total_coins % (max_pick + 1)\n    \n    # If the remainder is not zero, Jack can pick that many coins to ensure a win.\n    # If the remainder is zero, Jack cannot guarantee a win no matter what he picks.\n    if remainder == 0:\n        return \"No winning move\"\n    else:\n        # Jack picks up the remainder to leave a multiple of (max_pick + 1) coins for Ken\n        return remainder\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Given the line passes through the origin, the value of b is 0 (y-intercept)\n    b = 0\n    \n    # Given point (4,8), we can find slope m using the formula for the slope (m = change in y / change in x)\n    m = 8 / 4\n    \n    # Therefore, we have the equation y = mx + b, with m found and b as 0\n    equation = f\"y = {m}x + {b}\"\n    \n    # Simplifying the equation (since b is 0, \" + 0\" can be omitted)\n    simplified_equation = f\"y = {m}x\"\n    \n    return simplified_equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    white_in_pattern = 2\n    total_in_pattern = 5\n    white_balls = 92\n\n    # Calculate the number of full patterns\n    full_patterns = white_balls // white_in_pattern\n\n    # Calculate the total number of balls from the full patterns\n    total_balls = full_patterns * total_in_pattern\n\n    # Calculate the remaining white balls\n    remaining_white = white_balls % white_in_pattern\n\n    # Add the remaining balls, if any, to the total count\n    if remaining_white > 0:\n        total_balls += (remaining_white * total_in_pattern) // white_in_pattern\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # loop through all the hours in a day\n    for hour in range(24):\n        # loop through all the minutes in an hour\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n\n    # Conditions based on the problem statement\n    conditions = [\n        Eq(A, D / 4),\n        Eq(B, A - 1),\n        Eq(4 * (1000 * A + 100 * B + 10 * C + D), 1000 * D + 100 * C + 10 * B + A),\n        A > 0,  # A is a non-zero digit\n        D > 0,  # D is a non-zero digit\n        A < 10, # A is a digit\n        B < 10, # B is a digit\n        C < 10, # C is a digit\n        D < 10, # D is a digit\n        Ne(A, B), Ne(A, C), Ne(A, D), Ne(B, C), Ne(B, D), Ne(C, D) # All digits must be different\n    ]\n\n    result = solve(conditions)\n\n    # Construct number from digits\n    number = 1000 * result[A] + 100 * result[B] + 10 * result[C] + result[D]\n    return number\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    def pattern(input_value):\n        count_ones = sum_of_digits(input_value) % 2\n        count_sixes_and_eights = str(input_value).count('6') + str(input_value).count('8') * 2\n        return count_ones + count_sixes_and_eights\n\n    ans = pattern(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # This forms an arithmetic sequence:\n    # x, x+1, x+2, ..., x+6 for the 7 dwarfs\n    # The sum of the ages of the youngest 3 is 42\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    x = 39 // 3\n\n    # The oldest one is x+6 years old\n    oldest_age = x + 6\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    num_packed_6 = 2\n    num_packed_7 = -3\n\n    for n in range(1, 100):  # Assuming a reasonable upper limit for the number of pears\n        if (n - num_packed_6) % 6 == 0 and (n + num_packed_7) % 7 == 0:\n            return n\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    reduction_mm = 4\n    reduction_cm = reduction_mm / 10\n    \n    new_length_cm = original_length_cm - reduction_cm\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of stickers John had initially\n    x = symbols('x')\n    \n    # Sam had a ratio of 7, Peter had a ratio of 5, thus together they have 7 + 5 parts.\n    total_parts = 7 + 5\n    \n    # Given that after giving 20% away, Sam has 20 stickers more than John.\n    # Sam initially had 7/total_parts of the total stickers of Sam and Peter.\n    # After giving away 20%, Sam has 80% left, which is 0.8 * (7/total_parts) of the total stickers.\n    # John's stickers increased by 80%, i.e., his final amount of stickers is 180% or 1.8x.\n    # So, Sam finally has 20 stickers more than John's final count.\n    eq1 = Eq(0.8 * (7/total_parts) * (x + x * total_parts) + 20, 1.8 * x)\n    \n    # Solve for x to find the initial number of stickers John had.\n    stickers_john_initial = solve(eq1, x)[0]\n    \n    # Now we calculate Peter's initial number of stickers.\n    # Peter had a ratio of 5, so initially he had 5/total_parts of the total stickers of Sam and Peter.\n    peter_initial = (5/total_parts) * (stickers_john_initial * total_parts)\n\n    return int(peter_initial)\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # First 420 meters\n    speed_section_1 = 7  # meters per second\n    distance_section_1 = 420  # meters\n    time_section_1 = distance_section_1 / speed_section_1  # time = distance / speed\n\n    # Middle 620 meters\n    speed_section_2 = 5  # meters per second\n    distance_section_2 = 620  # meters\n    time_section_2 = distance_section_2 / speed_section_2\n\n    # Last 160 meters (1200 - 420 - 620 = 160)\n    speed_section_3 = 8  # meters per second\n    distance_section_3 = 1200 - distance_section_1 - distance_section_2  # meters\n    time_section_3 = distance_section_3 / speed_section_3\n\n    # Total time spent on the race\n    total_time = time_section_1 + time_section_2 + time_section_3\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_tests = 4\n    current_total = current_average * current_tests\n    \n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        required_total = (current_tests + additional_tests) * desired_average\n        if required_total <= current_total + additional_tests * 100:\n            break\n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    nt, nt_left, n2, n2_left, gift_cost = symbols('nt nt_left n2 n2_left gift_cost')\n\n    # Given equations\n    total_notes_eq = Eq(nt + n2, 72)  # Total number of notes is 72\n    spent_notes_eq = Eq(nt_left, nt - 0.9 * nt)  # 90% of $10 notes are spent\n    spent_notes2_eq = Eq(n2_left, n2 - 0.75 * n2)  # 75% of $2 notes are spent\n    leftover_notes_eq = Eq(nt_left, 2 * n2_left)  # Twice as many $10 notes as $2 notes left\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_notes_eq, spent_notes2_eq, leftover_notes_eq), (nt, nt_left, n2, n2_left))\n\n    # Calculate the cost of gift\n    gift_cost = Eq(gift_cost, 0.9 * solutions[nt] * 10 + 0.75 * solutions[n2] * 2)\n\n    # Return the cost of gift\n    return solve(gift_cost, gift_cost)[gift_cost]\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let A, B, C be the rates at which hoses A, B, C can fill the pool per hour\n    A, B, C = symbols('A B C')\n    \n    # Equations based on the given problem\n    equation1 = Eq(1/A + 1/B, 1/9)  # A and B together fill the pool in 9 hours\n    equation2 = Eq(1/A + 1/C, 1/12) # A and C together fill the pool in 12 hours\n    equation3 = Eq(1/B + 1/C, 1/18) # B and C together fill the pool in 18 hours\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # The rate at which all three can fill the pool per hour\n    combined_rate = solutions[A] + solutions[B] + solutions[C]\n    \n    # Total time to fill the pool with all three hoses\n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill.evalf()\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 different colors, to be sure to get at least two markers\n    # of the same color, we need to take out all markers of the other two colors\n    # plus one more. There are 12 markers for each color, so taking one from\n    # each color would give us 3. To guarantee two of the same color, we need one more.\n    # So, we take out 12 red + 12 yellow + 1 (could be red, yellow or blue) = 25\n    return 12 + 12 + 1\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $5 notes\n    # We then have two equations:\n    # x + y = 58 (total number of notes)\n    # 2x + 5y = 164 (total value of the notes)\n    \n    # We can solve these equations using substitution or elimination.\n    # Here we will employ substitution for simplicity.\n    for y in range(58 + 1):  # y can be from 0 to 58\n        x = 58 - y\n        if 2 * x + 5 * y == 164:\n            return y  # We return the number of $5 notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    first_term = 105 - (6 * 15)  # The difference is 15 between terms, 6 terms before the 7th is the 1st\n    difference = 15              # Common difference\n    n = 100                      # Term position we are looking for\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m represent the price of one muffin\n    m = symbols('m')\n\n    # The price of one cupcake is three times the muffin price: 3m\n    # Cellina spent (5/9) of her money on 36 cupcakes and 32 muffins\n    # The total money spent on cupcakes and muffins is represented by: 36(3m) + 32m\n    # She then used (1/6) of her money to buy more cupcakes\n    # total_cupcakes = 187.5, which is the total money spent on cupcakes (also includes additional cupcakes bought with (1/6) of the money)\n\n    # The equations representing the relationships:\n    equation1 = Eq(36 * 3 * m + 32 * m, 187.5 * (5/9))\n    equation2 = Eq(36 * 3 * m + ((187.5 / 5) * 6), 187.5)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (m))\n\n    # Calculate the amount spent on muffins\n    muffins_cost = 32 * solution[m]\n\n    return muffins_cost\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start counting from the smallest even number that can be in a box, which is 2\n    # Since we need at least 2 marbles in each box and there are 10 boxes\n    # 8 of them are unique and 2 are the same, hence we can have 9 unique counts including 2, 4, ...\n    # The 9 unique multiples of 2 that are the smallest are: 2, 4, 6, 8, 10, 12, 14, 16, 18\n    # The smallest number that can be repeated is the smallest even number which is 2\n    # Therefore, the total would be the sum of these 9 unique values plus an additional 2 for the repeated box\n    \n    marbles = [i*2 for i in range(1, 10)]  # Generate list of unique even numbers 2, 4, ... 18\n    smallest_sum = sum(marbles) + 2  # Add an additional 2 for the repeated box\n\n    return smallest_sum\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    # Calculate the sum directly since it's a sequence in order\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    min_pigeons_in_max_cage = (total_pigeons + total_cages - 1) // total_cages\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Number of sprinklers is one less than the number of parterres\n    num_sprinklers = 1007 - 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    \n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    road_length = symbols('road_length')\n    \n    first_day = 8\n    second_day = road_length / 6 + 4\n    equation = Eq(first_day + second_day, road_length * 5 / 12)\n    \n    total_length = solve(equation, road_length)\n    \n    return total_length[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # fraction of collection left after giving away 440 bottle caps\n    fraction_left = 5 / 9\n    # If 5/9 of the collection is left, it means he gave away 4/9 of the collection\n    # therefore, 440 bottle caps represent 4/9 of the original collection\n    # To find the original collection, we can use cross multiplication\n    # Let x be the original number of bottle caps\n    # (4/9) * x = 440\n    # x = (440 * 9) / 4\n    x = (440 * 9) // 4\n    return x\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Calculate the total length of the sides of the rectangle\n    perimeter = 2 * (144 + 204)\n\n    # Subtract the 4 corners since they have wheat already\n    wheat_spaces = 116 - 4\n    \n    # The distance between each wheat is then the total length of the sides\n    # divided by the number of spaces between wheats\n    distance_between_wheat = perimeter / wheat_spaces\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35:\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let's use the system of equations to solve the problem.\n    # If we let the number of sunny days be x and rainy days be y,\n    # we have the following equations:\n    # x + y = total_days\n    # sunny_nuts*x + rainy_nuts*y = total_nuts\n\n    # From the first equation, we get y = total_days - x.\n    # Substitute y in the second equation and solve for x:\n    for x in range(total_days + 1):\n        y = total_days - x\n        if sunny_nuts*x + rainy_nuts*y == total_nuts:\n            return y\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Marry's, Alexis's, and Charlotte's stickers\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n\n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(marry_initial, (7/5) * alexis_initial)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry_initial\n    alexis_gave = 0.20 * alexis_initial\n    charlotte_final = charlotte_initial + marry_gave + alexis_gave\n\n    # Charlotte's stickers increased by 80%\n    eq2 = Eq(charlotte_final, charlotte_initial * 1.80)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    eq3 = Eq(marry_initial - marry_gave, charlotte_final + 20)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (marry_initial, alexis_initial, charlotte_initial))\n\n    # The question asked for the number of stickers Alexis had at first\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Initialize the best price to be a large number\n    best_price = float('inf')\n    \n    # Iterate over the number of 5 bottle packs Ben can buy\n    for five_packs in range(0, 17 // 5 + 1):\n        # The remaining bottles after buying five_packs\n        remaining_bottles = 17 - 5 * five_packs\n        \n        # Iterate over the number of 2 bottle packs Ben can buy with his remaining bottles\n        for two_packs in range(0, remaining_bottles // 2 + 1):\n            # Single bottles to buy after removing five_packs and two_packs\n            single_bottles = remaining_bottles - 2 * two_packs\n            \n            price = 60 * five_packs + 28 * two_packs + 15 * single_bottles\n            best_price = min(best_price, price)\n    \n    # Convert pence to pounds\n    ans = best_price / 100\n    return ans\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # Number of players\n    players = 4\n    # Since it's a knockout tournament, each match eliminates one player.\n    # So the number of rounds needed is one less than the number of players.\n    rounds = players - 1\n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    correct_first = 10\n    correct_second = 15\n    correct_both = 7\n\n    correct_only_one = (correct_first - correct_both) + (correct_second - correct_both)\n    return correct_only_one\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42 # speed of the train in m/s\n    time = 5 # time taken to pass the tree in seconds\n    \n    # Distance formula: distance = speed * time\n    length_of_train = speed * time\n    \n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the original expression.\n    expression = \"285+15/5-2\"\n    \n    # Evaluate the expression without any brackets.\n    no_brackets = eval(expression)\n    \n    # Possible pairs of positions to place the first pair of brackets.\n    # There are four possible positions in the expression to place brackets.\n    bracket_positions = [(0, 3), (4, 7), (8, 11)]\n    \n    # Set to store unique results.\n    results = set()\n    \n    # Add the result without any brackets.\n    results.add(no_brackets)\n    \n    # Loop through all combinations of bracket positions.\n    for i in range(len(bracket_positions)):\n        # Place the first pair of brackets.\n        first_pair_expr = expression[:bracket_positions[i][0]] + '(' + expression[bracket_positions[i][0]:bracket_positions[i][1]] + ')' + expression[bracket_positions[i][1]:]\n        # Evaluate the expression with the first pair of brackets.\n        results.add(eval(first_pair_expr))\n        \n        for j in range(i + 1, len(bracket_positions)):\n            # Place the second pair of brackets.\n            second_pair_expr = first_pair_expr[:bracket_positions[j][0]] + '(' + first_pair_expr[bracket_positions[j][0]:bracket_positions[j][1]] + ')' + first_pair_expr[bracket_positions[j][1]:]      \n            # Evaluate the expression with two pairs of brackets.\n            results.add(eval(second_pair_expr))\n    \n    # Return the number of unique results.\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n    max_brush_spend = 10\n\n    # Calculate the maximum number of brushes that can be bought without exceeding £10\n    max_brushes = max_brush_spend // brush_price\n\n    # Find the number of brushes bought that meets the requirement and total spending\n    for brushes in range(max_brushes, -1, -1):\n        towels_cost = total_spent - (brushes * brush_price)\n        if towels_cost % towel_price == 0:\n            return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_num = 71\n    added_num = 8\n    multiplied_num = 7\n\n    initial_num = (result_num - added_num) / multiplied_num\n    \n    return initial_num\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction(0.49).limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    digits = [0, 1, 8]\n    count = 0\n\n    # Iterate through all possible places for each digit ensuring no repetition\n    for first_place in digits[1:]:\n        for second_place in digits:\n            if second_place != first_place:\n                for third_place in digits:\n                    if third_place != first_place and third_place != second_place:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Total number of pink and grey marbles\n    non_blue_marbles = 9 + 7\n    # To ensure a blue marble is drawn, we must draw all non-blue marbles plus one more\n    marbles_to_draw = non_blue_marbles + 1\n    \n    return marbles_to_draw\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # Let x be the number of teddy bears made on the first day\n    # Then the number of teddy bears made each day forms an arithmetic sequence:\n    # x, x+2, x+4, x+6, x+8\n    # The sum of an arithmetic sequence is given by the formula: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    # Since she spent 5 days, n = 5, the sum (total teddy bears) is 35\n    # Hence, we can form the equation: 5/2 * (x + (x + 8)) = 35\n    # Which simplifies to: 5 * (2x + 8) = 70\n    # From which we get: 2x = 14 - 8 = 6\n    # And therefore x = 3\n    # Now to find the number of teddy bears made on the fifth day, we use the first day's number and add 8\n    # i.e., x + 8 = 3 + 8 = 11\n    \n    first_day_teddy_bears = 3\n    fifth_day_teddy_bears = first_day_teddy_bears + 8\n    \n    return fifth_day_teddy_bears\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n    price_of_computer = tax_paid / tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        is_coprime_adjacent = all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1))\n        if is_coprime_adjacent:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3/10) / (6/7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the information given in the question\n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # We are looking for the initial number of boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n\n    equation1 = Eq(frogs_begin - dragonflies_begin, 9)\n    equation2 = Eq(frogs_begin - (11 - dragonflies_begin), dragonflies_begin - (10 - frogs_begin))\n\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "from itertools import permutations\n\ndef solution():\n    expressions = set()\n    operations = ['285+15/5-2', '(285+15)/5-2', '285+(15/5)-2', '285+15/(5-2)', '(285+15/5)-2',\n                  '285+(15/5-2)', '285+((15/5)-2)', '285+(15/(5-2))', '(285+15)/(5-2)']\n    \n    for expr in operations:\n        expressions.add(eval(expr))\n\n    return len(expressions)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    s = (amy_apples - john_apples) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):  # Iterate from 0 to 24, no need to go beyond 24 since 24 - x can't be less than 0\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c = symbols('a b c', positive=True, real=True)\n    \n    # 1/a is the work rate of worker A, similarly 1/b and 1/c for B and C\n    equation1 = Eq(1/a + 1/b, 1/3)  # A and B together finish the job in 3 hours\n    equation2 = Eq(1/b + 1/c, 1/4)  # B and C together finish the job in 4 hours\n    equation3 = Eq(1/a + 1/c, 1/8)  # A and C together finish the job in 8 hours\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Total work rate for A, B and C working together\n    total_work_rate = 1/solutions[a] + 1/solutions[b] + 1/solutions[c]\n    time_to_complete = 1 / total_work_rate\n\n    return time_to_complete.evalf()\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack = 42\n    tom = 38\n    james = 3 * (jack + tom)\n    \n    return james\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation based on sugar quantity before and after mixing:\n    # (Mass of sugar in first solution + Mass of sugar in second solution) / (Total mass of solution) = Final concentration\n    equation = Eq((2 * 0.45 + x * 0.15) / (2 + x), 0.25)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    equation1 = Eq(johnson + vicky, 48)                 # Johnson and Vicky have $48 coins together\n    equation2 = Eq(vicky + 8, johnson - (8 + 2))        # Vicky will have 2 less than Johnson after Johnson gives Vicky 8 coins\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for kids and candies\n    kids, candies = symbols('kids candies')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(kids * 18, candies - 12)  # If every kid eats 18 candies, 12 more candies are needed\n    equation2 = Eq((kids + 2) * 15, candies) # If every kid eats 15 candies, it's enough for 2 more kids\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kids, candies))\n    \n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boy_to_girl_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boy_to_girl_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    current_number = '2'\n    S = 0\n    for _ in range(2017):\n        S += int(current_number)\n        current_number += '2'\n\n    last_5_digits = S % 100000\n    return last_5_digits\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = 77\n    number = (result / 7) - 6\n    return int(number)\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    total_cookies = 1170\n\n    # Create equations based on the problem\n    equation1 = Eq(sam + tim, total_cookies)\n    equation2 = Eq(sam - sam / 4 + (663 - tim / 5), tim)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # Calculate the number of cookies Sam ate\n    cookies_ate = solutions[sam] / 4\n\n    return cookies_ate\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    cost_per_kg = 11.4 / 0.6\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_in_8_days = fruit_per_day * 8\n    return total_fruit_in_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    num, _ = solve_congruence(*congruences)\n    # Ensure the solution is between 200 and 300\n    while num < 200:\n        num += 2*3*4*6*7\n    while num >= 300:\n        num -= 2*3*4*6*7\n    return num\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps = 40\n    ting_stamps = 32\n    \n    # Define x as the number of stamps Sally gave Ting.\n    # After giving x stamps, Sally has 40 - x stamps and Ting has 32 + x stamps.\n    # Considering the ratio 1:2, we have the equation (40 - x) / (32 + x) = 1/2.\n    # Solving for x, we find x to be 8/3.\n    # To get the number of stamps Ting has in the end, we add x to Ting's original stamp count.\n    \n    x = (sally_stamps - 2 * ting_stamps) / 3\n    ting_end_stamps = ting_stamps + x\n    \n    return ting_end_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate is 1/18 of the job per hour\n    # Together, Tom and Jerry's rate is 1/6 of the job per hour\n    # Let x be the time it takes for Tom to do the job alone, so his rate is 1/x per hour\n    # According to the rates, we have 1/x (Tom's rate) + 1/18 (Jerry's rate) = 1/6 (combined rate)\n\n    # We want to find the value of x that satisfies this equation:\n    # 1/x + 1/18 = 1/6\n\n    # Multiply through by the common denominator 18x to clear the denominators:\n    # 18 + x = 3x\n\n    # Simplifying the equation gives us 2x = 18\n    x = 18 / 2\n\n    return x\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David spends walking after increasing his speed\n    t = symbols('t')\n\n    # Distance walked at first speed = speed * time\n    distance_first_part = 150 * 10\n    # Distance walked at second speed = (new_speed) * time\n    new_speed = 150 + 50\n    distance_second_part = new_speed * t\n\n    # Total distance equation\n    equation = Eq(distance_first_part + distance_second_part, 3700)\n\n    # Solve for t\n    time_spent_after_speed_increase = solve(equation, t)[0]\n\n    # Total time spent walking in the park\n    total_time_spent = 10 + time_spent_after_speed_increase\n\n    return total_time_spent\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candies = 9\n    lily_candies = 7\n    total_candies = sissy_candies + lily_candies\n    return total_candies\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Given values\n    packet_price = 4\n    sweets_per_packet = 8\n    budget = 20\n\n    # Number of packets that can be bought with $20\n    packets_bought = budget // packet_price\n    \n    # Total sweets from the packets bought\n    sweets = packets_bought * sweets_per_packet\n    \n    # Free sweets for every two packets bought\n    free_sweets = packets_bought // 2\n    \n    # Maximum number of sweets obtained\n    max_sweets = sweets + free_sweets\n    \n    return max_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    min_candies = 1  # Start with 1 candy for the first child\n    candies_distributed = 0\n    for i in range(8):\n        candies_distributed += min_candies\n        min_candies += 1  # Each next child gets 1 more candy\n    \n    remaining_candies = 88 - candies_distributed\n    # The last child will get all the remaining candies\n    least_candies_for_last_child = min_candies - 1 + remaining_candies\n    \n    return least_candies_for_last_child\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of pink counters\n    pink_counters = 5\n    # Total initial counters\n    total_counters = 5 + 7 + 8\n    \n    # Current probability of picking a pink counter\n    current_prob_pink = pink_counters / total_counters\n    \n    # We want to double this probability\n    desired_prob_pink = current_prob_pink * 2\n    \n    # To find the extra pink counters needed\n    # Let's denote the extra pink counters as x\n    # And set up the equation: (pink_counters + x) / (total_counters + x) = desired_prob_pink\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((pink_counters + x) / (total_counters + x), desired_prob_pink)\n\n    # Solving the equation for x (number of extra pink counters required)\n    extra_counters = solve(equation, x)\n\n    return extra_counters[0]\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls = symbols('boys girls')\n\n    # Original situation: boys = 1.4 * girls\n    equation1 = Eq(boys, 1.4 * girls)\n\n    # After 24 boys and 24 girls leave: boys - 24 = 1.5 * (girls - 24)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Return the number of boys before anyone left\n    return solutions[boys]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # We have 3 colors, so after selecting 3 socks, we may have one of each color.\n    # To guarantee at least one pair, we need one more sock; thus, after 4 socks, we have a pair.\n    # To guarantee a second pair, in the worst case, the next socks would be 1 black and 1 grey,\n    # which combined with previous selected means we have pairs of each color.\n    # Now, to guarantee a third pair, we just need one more sock because it will match with one of the existing pairs.\n    # So the total socks needed to guarantee two pairs is 4 (first pair) + 2 (one of each of the other colors) + 1 = 7.\n    return 7\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let's represent the original number of cupcakes and muffins with the variable 'x'.\n    # After selling 60 cupcakes and 12 muffins, we have (x - 60) cupcakes left and (x - 12) muffins left.\n    # According to the problem, the number of muffins left is twice the number of cupcakes left.\n    # Therefore, we have the equation: (x - 12) = 2 * (x - 60)\n    # Solving for 'x' gives us the original number of cupcakes and muffins.\n    \n    # Let x be the initial number of cupcakes and muffins.\n    # (x - 12) = 2 * (x - 60)\n    # Expanding the equation:\n    # x - 12 = 2x - 120\n    # Rearranging terms:\n    # x - 2x = -120 + 12\n    # -x = -108\n    # Dividing by -1:\n    # x = 108\n    \n    x = 108  # This is the original number of cupcakes and muffins Demi had for each.\n    \n    # The total number of cupcakes and muffins will be x + x = 2 * x\n    total = 2 * x\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variable for the number we want to find\n    number = symbols('number')\n    \n    # Now we write the equation according to the problem statement\n    # Five times the number increased by seven equals forty-seven\n    equation = Eq(5 * number + 7, 47)\n    \n    # Solve the equation and get the result\n    solution = solve(equation, number)\n    \n    # Solution will be a list, we get the first element since it's a linear equation\n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the pocket money Helen receives each day.\n    x = symbols('x')\n\n    # Helen saves (x - 5) each day.\n    # George gets (x + 3) every day, and saves (x + 3 - 5) = (x - 2) each day.\n\n    # Total savings for Helen is 60\n    # Total savings for George is 60 + 90\n\n    # Equation representing Helen's savings.\n    helen_savings = Eq((x - 5) * (60 // (x - 5)), 60)\n\n    # Equation representing difference in savings between George and Helen.\n    savings_difference = Eq((x - 2) * (60 // (x - 5)) - 60, 90)\n\n    # Solve the system of equations.\n    solution = solve((helen_savings, savings_difference), x)\n\n    # Get the value of x, which is Helen's pocket money.\n    helen_pocket_money = solution[x]\n\n    return helen_pocket_money\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_lax = 12.25\n    lax_to_shanghai = shanghai_to_lax + 90 / 60\n    round_trip = shanghai_to_lax + lax_to_shanghai\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi/wiya, 3/2)\n    equation2 = Eq((eddi+4)/wiya, 8/5)\n    \n    solutions = solve((equation1, equation2), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a1, d = symbols('a1 d')  # a1 is the first term, d is the common difference.\n    # 9th term is a1 + 8d, 15th term is a1 + 14d\n    equation1 = Eq(a1 + 8*d, (a1 + 14*d) + 18)\n    # 20th term is a1 + 19d, 12th term is a1 + 11d\n    equation2 = Eq((a1 + 19*d) + (a1 + 11*d), 88)\n\n    solutions = solve((equation1, equation2), (a1, d))\n\n    # Finding the 32nd term, which is a1 + 31d\n    a32 = solutions[a1] + 31 * solutions[d]\n\n    return a32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Sum of the first n natural numbers is given by n*(n+1)/2\n    sum_to_30 = 30 * 31 // 2  # Sum from 1 to 30\n    sum_to_29 = 29 * 30 // 2  # Sum from 1 to 29\n    # The final answer is the sum to 30 plus the sum to 29\n    ans = sum_to_30 + sum_to_29\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours at 40 km/h\n    distance_first_part = 2 * 40\n    \n    # Remaining distance\n    distance_second_part = 280\n    \n    # Time taken to cover the remaining distance at 70 km/h\n    time_second_part = distance_second_part / 70\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_second_part\n    \n    # Total time taken\n    total_time = 2 + time_second_part\n    \n    # Average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_seven_at_all = 8 * 9 * 9\n    at_least_two_sevens = total_three_digit_numbers - no_seven_at_all\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    for three_page_letters in range(12):\n        four_page_letters = 11 - three_page_letters\n        total_pages = three_page_letters * 3 + four_page_letters * 4\n        if total_pages == 38:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    factorial = 16\n    zeroes = 0\n    i = 5\n\n    while (factorial // i) > 0:\n        zeroes += factorial // i\n        i *= 5\n\n    return zeroes\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    # The value of the digit 8 in the number 768354\n    value_of_8 = 8 * 10**2  # The 8 is in the hundreds place, which is 10^2\n    return value_of_8\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n    \n    # Find the least common multiple of the packet sizes.\n    days_to_sync = lcm(25, 20)\n\n    # March 1st is the starting day, so subtract 1 to find the next start date.\n    next_start_day = days_to_sync - 1\n    \n    return next_start_day\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Total singing performances\n    total_singing = 6\n    # Total dancing performances\n    total_dancing = 4\n\n    # We can treat the singing performances as separators for the dancing performances\n    # And we need at least 1 singing performance between every 2 dancing performances.\n    # We have a total of 5 possible \"slots\" for the 4 dancing performances.\n    \n    # We need to calculate the number of ways to choose 4 slots from the 5 possible slots for the dancing performances.\n    ways_to_place_dancing = nCr(5, 4)\n\n    # For each arrangement of dancing performances, we can arrange the singing performances freely in the remaining spots.\n    ways_to_arrange_singing = factorial(total_singing)\n\n    # The total number of ways to arrange the performances is the product of the ways to arrange the dancing performances\n    # and the ways to arrange the singing performances.\n    total_ways = ways_to_place_dancing * ways_to_arrange_singing\n\n    return total_ways\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Given A = a_0 + a_1 + a_2 + a_3 + a_4 + a_5 + a_6 = 1 and using operation Α Δ x = A - x\n    # We can calculate each a_i using the given formulas\n    \n    A_value = 1\n\n    # Calculate a_1 to a_6 using the given operation Δ\n    a1 = A_value - 1/2\n    a2 = A_value - 2/3\n    a3 = A_value - 7/8\n    a4 = A_value - 29/30\n    a5 = A_value - 139/144\n    a6 = A_value - 839/840\n\n    # Now we can solve for a_0 since we have A = 1\n    a0 = A_value - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Since we want the fraction in its simplest form, we will convert the fraction to a fraction object\n    from fractions import Fraction\n    a0_fraction = Fraction(a0).limit_denominator()\n\n    # add the numerator (m) and the denominator (n)\n    ans = a0_fraction.numerator + a0_fraction.denominator\n\n    return ans\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    from itertools import permutations\n    \n    # None of the digits in 5430 can be in the number\n    invalid_digits = set('5430')\n    \n    # Candidates after removing invalid digits from 8765 and 1023\n    candidates = set('87621023') - invalid_digits\n\n    # Check digits for each position based on clues from 8642 (matching digits and position)\n    correct_positions = ['8', '_', '6', '_']  # '_' stands for unknown correct digits\n    \n    # Loop through all permutations of the remaining candidates to find the correct number\n    for perm in permutations(candidates, 2):  # We need to fill only 2 positions\n        # Place the candidate digits in the remaining positions\n        idx = [i for i, v in enumerate(correct_positions) if v == '_']\n        number = list(correct_positions)\n        for i in range(2):\n            number[idx[i]] = perm[i]\n\n        number_str = ''.join(number)\n        \n        # Check if the number satisfies the conditions for 8765 and 1023\n        if (sorted(set('8765') & set(number_str)) == sorted(perm) and\n                sorted(set('1023') & set(number_str)) == sorted(perm)):\n            return int(number_str)\n    \n    return None  # In case no solution is found\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Aiden's mistaken calculation: (x / 4) - 25 = 2021\n    equation_mistaken = Eq((x / 4) - 25, 2021)\n    # Solve for x\n    x_value = solve(equation_mistaken, x)[0]\n\n    # Correct calculation: 4 * x_value + 25\n    correct_ans = 4 * x_value + 25\n\n    return correct_ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, donna = symbols('chloe donna')\n\n    equation1 = Eq(chloe, 4 * donna)\n    equation2 = Eq(chloe - donna, 816)\n\n    solutions = solve((equation1, equation2), (chloe, donna))\n\n    return solutions[donna]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the equation\n    tilde = symbols('tilde')\n\n    # Create the equation based on the question\n    equation = Eq(((tilde + 4) / 8), 3)\n\n    # Solve the equation for tilde\n    solution = solve(equation, tilde)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # 999^n has the same ones digit as (-1)^n\n    # For any odd n, (-1)^n is -1, whose equivalent positive ones digit is 9\n    n = 99\n    if n % 2 != 0:\n        ans = 9\n    else:\n        ans = 1  # This case does not occur since 99 is odd\n    return ans\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b):\n                    if 3 * a + 11 * b == 193:\n                        return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 because then ab would not be two digits\n        for b in range(10):\n            if (10*a + b) * 7 == 100*a + b:\n                return 10*a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    pencils, _ = solve_congruence(*congruences)\n\n    return pencils\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    prime_factors_2 = 0\n    prime_factors_5 = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            prime_factors_2 += 1\n            factor //= 2\n        while factor % 5 == 0:\n            prime_factors_5 += 1\n            factor //= 5\n    \n    ans = min(prime_factors_2, prime_factors_5)\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return float(solutions[banana] + solutions[apple])\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers = 3\n    houses_built = 14\n    days_taken = 4\n\n    workers_required = 9\n    days_available = 2\n\n    # Find the houses built by one worker in one day\n    houses_per_worker_per_day = houses_built / (workers * days_taken)\n\n    # Calculate the number of houses 9 workers can build in 2 days\n    houses_built_by_required_workers = houses_per_worker_per_day * workers_required * days_available\n\n    return houses_built_by_required_workers\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, c, b, g = symbols('a c b g')            # a for adults, c for children, b for boys, g for girls\n    \n    equation1 = Eq(a, 3 * c)                   # three times as many adults as children\n    equation2 = Eq(b, 2 * g)                   # twice as many boys as girls\n    equation3 = Eq(a, g + 176)                 # 176 more adults than girls\n    equation4 = Eq(a + c + b + g, a + c + g + (a + c) / 2)  # total = adults + children + boys (children) + girls (children)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (a, c, b, g))\n    \n    total_people = solutions[a] + solutions[c] + solutions[b] + solutions[g]\n    \n    return total_people\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(gcd(12, 15), 60)\n    \n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    ages = None\n    for bob_age in range(1, 29):\n        for rex_age in range(1, 29):\n            for fido_age in range(1, 29):\n                if (fido_age != rex_age and rex_age != bob_age and fido_age != bob_age and \n                    bob_age - fido_age == 10 and bob_age + rex_age + fido_age == 28):\n\n                    product = bob_age * rex_age * fido_age\n                    if product < min_product:\n                        min_product = product\n                        ages = (bob_age, rex_age, fido_age)\n\n    return min_product\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of 1 ball and y be the total money Adam has\n    x, y = symbols('x y')\n\n    # If Adam buys 5 balls, he will have $15 left\n    equation1 = Eq(y - 5 * x, 15)\n\n    # If he buys 8 balls, he will need $12 more\n    equation2 = Eq(8 * x - y, 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    \n    # Iterate over all possible 3-digit numbers for A and B\n    for A in range(100, 1000):\n        for B in range(A + 1, 1000):  # Ensure B > A for distinct numbers\n            # Compare two digits at a time using string representation\n            str_A, str_B = str(A), str(B)\n            digits_A = [str_A[0], str_A[1], str_A[2]]\n            digits_B = [str_B[0], str_B[1], str_B[2]]\n\n            # Count equal digits\n            count_equal = sum(1 for x in digits_A if x in digits_B)\n            \n            # Check if A and B has two equal digits and HCF is 75\n            if count_equal == 2 and gcd(A,B) == 75:\n                total = A + B\n                # Note down the largest sum\n                if total > max_sum:\n                    max_sum = total\n\n    return max_sum\n\nfrom math import gcd\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    initial_height = height_after_second_bounce / (1 / 3) ** 2\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(1,30) + Fraction(1,6)\n    denom1 = Fraction(2,25)\n    first_fraction = num1 / denom1\n\n    num2 = Fraction(2) - Fraction(2,3)\n    denom2 = Fraction(8,3)\n    second_fraction = num2 / denom2\n\n    ans = first_fraction + second_fraction\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    # Xuanxuan + Lingling = 120.5\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    # Xuanxuan + Jay = 105.25\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    # Lingling = 2 * Jay\n    equation3 = Eq(lingling, 2 * jay)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the hourly work rate for Lee and N be the hourly work rate for Nancy\n    L, N = symbols('L N')\n\n    # They finish the job together in 10 hours\n    equation1 = Eq(L + N, 1/10)\n\n    # Lee works for 6 hours and Nancy for 20 hours to finish the job\n    equation2 = Eq(6*L + 20*N, 1)\n\n    # Solve for N (how long it takes Nancy to finish the job by herself)\n    solutions = solve((equation1, equation2), (L, N))\n\n    # Since N is Nancy's hourly work rate, the time for Nancy to finish the job by herself is 1/N\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    # Fraction of children, women, and rest (men) at the funfair\n    children_fraction = 2 / 5\n    women_fraction = 1 / 4\n\n    # Equation for the number of children\n    children = children_fraction * total_people\n\n    # Equation for the number of women\n    women = women_fraction * total_people\n\n    # The rest of the people are men\n    men = total_people - children - women\n\n    # There are 20 more children than men\n    equation = Eq(children, men + 20)\n\n    # Solve the equation\n    solution = solve(equation, total_people)\n\n    return solution[0]  # Since there's only one solution\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Total number of students\n    total_students = 40 + 30\n    \n    # Total marks for both classes\n    total_marks = total_students * 90\n    \n    # Let average marks for Class A be x\n    # Then average marks for Class B will be x + 7\n    # Total marks for Class A will be 40 * x\n    # Total marks for Class B will be 30 * (x + 7)\n    # The sum of both totals should equal the overall total marks\n    # So we can set up the following equation:\n    # 40 * x + 30 * (x + 7) = total_marks\n    \n    # Solving the equation for x\n    x = (total_marks - 30 * 7) / (40 + 30)\n    \n    # The average score for Class B\n    average_B = x + 7\n    \n    return average_B\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Utilize the fact that 1/(a*b) = (1/a - 1/(a+1))/b for splitting up the terms in the denominator\n    # So, 1/(2007*2008) = (1/2007 - 1/2008)\n    # And, 1/(2008*2009) = (1/2008 - 1/2009)\n    # When we add them up, the -1/2008 and +1/2008 will cancel out\n\n    term1 = 1/2007 - 1/2008\n    term2 = 1/2008 - 1/2009\n    term3 = 1/2009\n\n    denominator_sum = term1 + term2 + term3\n\n    # Invert the denominator to get the final value\n    ans = 1 / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):               # He can use 0 to 5 ten-pence coins\n        for twenty_pence in range(4):        # He can use 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):     # He can use 0 to 1 fifty-pence coin\n                total = (10 * ten_pence) + (20 * twenty_pence) + (50 * fifty_pence)\n                if total == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    if students % boat_capacity == 0:\n        ans = students // boat_capacity\n    else:\n        ans = (students // boat_capacity) + 1\n\n    return ans\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    ans = (250250**2) - (250249 * 250251)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtract 1 because Mark is not in front of himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        if int(f'9{a}8{a}') % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f'125{J}6') % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches = symbols('apples peaches')\n\n    # 4 apples and 3 peaches cost £10\n    equation1 = Eq(4 * apples + 3 * peaches, 10)\n\n    # 4 apples and 6 peaches cost £16\n    equation2 = Eq(4 * apples + 6 * peaches, 16)\n\n    solutions = solve((equation1, equation2), (apples, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) * 6, 66)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Using the formula for the sum of squares: 1^2 + 2^2 + ... + n^2 = (1/6)*n*(n+1)*(n+2)\n    # We will apply the distributive law iteratively.\n    ans = sum(i * (i+1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360  # in minutes\n    \n    # Ratio of time going up to going down\n    ratio_up = 5\n    ratio_down = 4\n    total_ratio = ratio_up + ratio_down\n    \n    # Calculate time spent going up and going down\n    time_up = (ratio_up / total_ratio) * total_time\n    time_down = (ratio_down / total_ratio) * total_time\n    \n    # Speed relation\n    speed_down = 10  # As going up is 10m/min slower, let's assume the speed going down is 10m/min\n    speed_up = speed_down - 10\n    \n    # Calculate distances\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n    \n    # Total distance traveled\n    total_distance = distance_up + distance_down\n    \n    return total_distance\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    ans = 11\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    # After 6 years, Alice will be 24 years old.\n    # We need to find her current age first.\n    current_age = 24 - 6\n\n    # To find out how old Alice was 9 years ago,\n    # we subtract 9 from her current age.\n    age_nine_years_ago = current_age - 9\n\n    return age_nine_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\n\ndef solution():\n    # Calculate the least common multiple of 25 and 20\n    days_to_sync = lcm(25, 20)\n    \n    # March 1st is day 1, so we add the number of days needed to sync\n    next_start_day = 1 + days_to_sync\n    \n    # March has 31 days, so check if we go into April\n    if next_start_day > 31:\n        april_day = next_start_day - 31\n        return f\"April {april_day}\"\n    else:\n        return f\"March {next_start_day}\"\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    a = 9\n    equation = Eq(5 * a - 2 * x, 33)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    for days in range(1, max(watermelons, pineapples)):\n        watermelons_left = watermelons - (watermelons_per_day * days)\n        pineapples_left = pineapples - (pineapples_per_day * days)\n        if pineapples_left == 3 * watermelons_left:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom_current_age, jerry_current_age = symbols('tom_current_age jerry_current_age')\n    \n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom_current_age * 2, tom_current_age + 4)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom_current_age - 3) + (jerry_current_age - 3), 10)\n    \n    solutions = solve((equation1, equation2), (tom_current_age, jerry_current_age))\n    \n    # Let's figure out in how many years from now Jerry's age will be doubled\n    jerry_double_age = 2 * solutions[jerry_current_age]\n    jerry_future_age = jerry_double_age - solutions[jerry_current_age]\n    \n    return jerry_future_age\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    ans = fruits_per_truck - fruits_per_car\n\n    return ans\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    arrival_time = (9 * 60) + 22       # Convert 9:22 AM to minutes\n    bus_interval = 35                  # The bus leaves every 35 minutes\n\n    # Calculate how many minutes past the last bus\n    time_past_last_bus = arrival_time % bus_interval\n\n    # Calculate waiting time for the next bus\n    wait_time = bus_interval - time_past_last_bus\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    number_of_weeks = days_until_birthday // days_in_a_week\n    return number_of_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # Eddie's speed in metres per minute\n    brother_speed = 70  # Brother's speed in metres per minute\n    time_until_meeting = 5  # Time until they meet in minutes\n\n    # Distance Eddie walks until they meet\n    distance_eddie_walks = eddie_speed * time_until_meeting\n\n    # As they meet at the same time, the total distance to the mall is the sum of the distances each of them walked\n    total_distance_to_mall = distance_eddie_walks + (brother_speed * time_until_meeting)\n\n    return total_distance_to_mall\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    # Initial ages of the family members\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n    \n    # Since the question is about the next year when all ages are prime,\n    # we can start from the next year and increment by 1 until the condition is met.\n    while True:\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n        \n        # Check if in the current year, all ages are prime\n        if isprime(my_age) and isprime(brother_age) and isprime(mother_age) and isprime(father_age):\n            return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increased_price = discounted_price * 1.15\n\n    return increased_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    # Calulate the number of intervals between lamp posts\n    intervals = total_flowers // flowers_between_posts\n    # Calculate the total length of the road\n    road_length = 50\n    # Compute the distance between every 2 lamp posts\n    distance = road_length / (intervals + 1)\n    return distance\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # n circles can divide the plane into 1 + n*(n+1)/2 regions as per the formula\n    n = 7\n    ans = 1 + n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_to_each_friend = 15\n    number_of_friends = 8\n    \n    books_given_away = books_given_to_each_friend * number_of_friends\n    books_remaining = total_books - books_given_away\n\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base = 44\n    exponent = 2008\n\n    # Since we're only interested in the unit digit, we'll look at the unit digit of 4 to the power of remainder of the exponent when divided by 4 (because of cyclicity)\n    # This is because 4 raised to any power follows a pattern in its unit digit: 4, 6, 4, 6, ...\n    # This cycle has a length of 2.\n    cycle_length = 2\n\n    # Unit digit for base of '4'\n    unit_digit_base = base % 10  # 4 in this case\n\n    # Find the remainder of the exponent when divided by the cycle length\n    remainder = exponent % cycle_length\n\n    # If remainder is 0, unit digit will be the last digit in the 4's power cycle, which is 6\n    if remainder == 0:\n        unit_digit = 6\n    # If remainder is 1, unit digit will be the same as unit_digit_base, which is 4\n    else:\n        unit_digit = unit_digit_base\n\n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_males = 3 / 5\n    males = total_adults * fraction_males\n    return int(males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to each shop/chapel\n    home_to_audio = 6\n    home_to_book = 4\n    home_to_chapel = 5\n\n    # Number of paths from each shop/chapel to school\n    audio_to_school = 2\n    book_to_school = 2\n    chapel_to_school = 3\n\n    # Using the multiplication principle to find the paths from home to school\n    total_paths = (home_to_audio * audio_to_school) + \\\n                  (home_to_book * book_to_school) + \\\n                  (home_to_chapel * chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Add all three equations together:\n    # 2 * (A + B + C) = 102 + 97 + 93\n    \n    total_twice = 102 + 97 + 93\n    total_weight = total_twice / 2  # Divide by 2 to get the real total weight\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime('12:40', '%H:%M')\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    ans = departure_time.strftime('%I:%M %p')\n\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n\n    total_value = one_pound_coins * 1 + fifty_p_coins * 0.50 + twenty_p_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Benson and Clive have\n    benson, clive = symbols('benson clive')\n\n    # Given that after buying the items they have the same amount of money left\n    # Benson's money after buying calculator is his initial money minus $34\n    # Clive's money after buying badminton racket is his initial money minus $63\n    # Benson's remaining money equals Clive's remaining money\n    equation1 = Eq(benson - 34, clive - 63)\n\n    # The total initial amount of money they had together is $705\n    equation2 = Eq(benson + clive, 705)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    # We return the amount Clive had initially\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    belle = symbols('belle')\n    eddie = symbols('eddie')\n\n    # Belle initially has 49 ice-cream sticks\n    belle_sticks = 49\n    \n    # After receiving 11 sticks from Eddie, they have the same amount\n    equation = Eq(belle_sticks + 11, eddie)\n\n    # Solve the equation for Eddie's sticks\n    solutions = solve(equation, eddie)\n\n    # Since Eddie gave 11 to Belle, we have to add 11 to find the amount he had initially\n    return solutions[0] + 11\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamps = 2\n    \n    road_length = (num_lamp_posts - 1) * distance_between_lamps\n    return road_length\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = (5/11 + 2/27) * 11 + 5/27\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money.evalf()\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    # Let's use algebra to solve the problem.\n    # Let john_coins be the number of coins John starts with.\n    # Let kofi_coins be the number of coins Kofi starts with.\n\n    # According to the problem statement:\n    # john_coins + kofi_coins = 25 (Total coins they have together)\n    # john_coins - 4 (John gives Kofi four coins) = kofi_coins + 4 (Kofi receives four coins) + 3 (and has three fewer than John)\n\n    # Now let's set up two equations and solve for john_coins.\n    # Equation 1: john_coins + kofi_coins = 25\n    # Equation 2: john_coins - 4 = kofi_coins + 7\n\n    for john_coins in range(1, 25):\n        kofi_coins = 25 - john_coins\n        if john_coins - 4 == kofi_coins + 7:\n            return john_coins\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea / 2\n    tea_to_give = 983 - tea_each\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n    return len(list(perm))\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n    \n    # Equation for the heads\n    heads_eq = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    \n    # Equation for the feet\n    feet_eq = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n    \n    # Solve the system of equations\n    solutions = solve((heads_eq, feet_eq), (normal_rabbits, special_rabbits))\n    \n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 13 * cost_per_banana\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Find the repeating cycle of the decimal expansion of 1/70\n    numerator = 1\n    denominator = 70\n    decimal_expansion = \"\"\n    remainders = []\n\n    # Simulate long division until we find a repeating remainder\n    while True:\n        numerator *= 10\n        digit, remainder = divmod(numerator, denominator)\n        \n        if remainder in remainders:\n            # Find the start of the cycle\n            cycle_start = remainders.index(remainder)\n            break\n        else:\n            decimal_expansion += str(digit)\n            remainders.append(remainder)\n            numerator = remainder\n    \n    # Isolate the cycle\n    cycle = decimal_expansion[cycle_start:]\n\n    # The cycle repeats every len(cycle) digits\n    cycle_length = len(cycle)\n    \n    # The 500th digit after the decimal point will be at position 500 in the cycle\n    position_in_cycle = (500 - 1) % cycle_length\n    \n    # Get the digit at that position\n    ans = int(cycle[position_in_cycle])\n\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    neelesh_sweets_before_eating = neelesh_sweets_after_eating + 1\n\n    ayesha_total_sweets = neelesh_sweets_before_eating * 6\n    ayesha_sweets_left = ayesha_total_sweets - neelesh_sweets_before_eating\n\n    return ayesha_sweets_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (2 * i * (2 * i + 1)) for i in range(10))\n    denominator = sum(1 / (j * (31 - j)) for j in range(11, 16))\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the original number of gummy bears and y be the original number of lollipops\n    x, y = symbols('x y')\n    # equations based on the given ratios\n    equation1 = Eq(5*x, 7*y)  # ratio of gummy bears to lollipops is 5:7\n    equation2 = Eq((x + 120) / (y + 120), 4/5)  # new ratio after adding 120 to each is 4:5\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # now connect the solution to the total pieces of candy after adding 120 to both\n    total_candies = solutions[x] + solutions[y] + 2*120  # after adding 120 pieces to each pile\n\n    return total_candies\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles in each box\n    boxB, boxC = symbols('boxB boxC')\n\n    # Given constraints\n    boxA = 80\n    total_marbles = 560\n\n    # Equations based on the problem statement\n    equation1 = Eq(boxB, 2 * boxC)\n    equation2 = Eq(boxA + boxB + boxC, total_marbles)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boxB, boxC))\n\n    return solutions[boxC]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_pounds = 15 * 14\n    andrew_pounds = 275\n    weight_difference = abs(david_pounds - andrew_pounds)\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    common_difference = 28 - 25  # The difference between the consecutive terms\n\n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n-1)*d\n    first_term = last_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3+x), 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    return (5 + 15 + 17 + 23) * 3\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    return sum([31, 42, 53, 64, 75, 86, 97])\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to base 10\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n\n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 = result_base10 // 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    ans = 0.50 * (0.50 * 3.20)\n    return ans\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # We approach this problem by constructing the largest set possible\n    # while respecting the condition that no two numbers differ by 5.\n    \n    # The naive approach would be to start from one and keep adding numbers\n    # that do not violate the condition.\n    # We construct a set using this naive strategy to get one solution.\n    \n    # Initialize a list to keep track of the chosen numbers\n    chosen_numbers = []\n    \n    # Iterate over the range from 1 to 20\n    for i in range(1, 21):\n        # Check if adding the current number would violate the condition\n        # with any of the already chosen numbers\n        if all(abs(i - x) != 5 for x in chosen_numbers):\n            # If it doesn't violate, add the number to the chosen list\n            chosen_numbers.append(i)\n    \n    # The largest value of n is the length of the chosen_numbers list\n    n = len(chosen_numbers)\n    return n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Create the equations based on the problem statements\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, mother = symbols('john mother')\n\n    # John's age in 8 years: john + 8\n    # Mother's age 20 years ago: mother - 20\n    equation1 = Eq(john + 8, mother - 20)\n\n    # Mother's age when she's 5 times John's age\n    # age difference remains the same\n    age_difference = mother - john\n    equation2 = Eq(mother, 5 * (john - age_difference))\n\n    solutions = solve((equation1, equation2), (john, mother))\n\n    # Age of John when his mother was 5 times his age\n    john_age_when = john - age_difference\n\n    return solutions[john_age_when]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_correct_marks = 6 * 12\n    total_wrong_marks = 2 * 0\n    total_questions = 6 + 2\n\n    average_mark = (total_correct_marks + total_wrong_marks) / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    # Representing mixed numbers as improper fractions\n    num1 = 2017 + Fraction(7, 8)\n    num2 = 3 + Fraction(2, 3)\n    num3 = 2016.875\n    num4 = Fraction(11, 3)\n    \n    denom1 = 2017 + Fraction(1, 3)\n    denom2 = 2016.875\n    denom3 = 17\n    \n    num5 = 3 + Fraction(23, 32)\n\n    # Calculating the numerator of the complex fraction\n    numerator = (num1 * num2 - num3 * num4)\n\n    # Calculating the denominator of the complex fraction\n    denominator = (denom1 - denom2) * denom3\n\n    # Calculating the entire expression\n    result = (numerator / denominator) * num5\n\n    # Convert to float\n    ans = float(result)\n    \n    return ans\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for b in range(10):\n            pencils_total = 10 * B + b\n            if pencils_total % 44 == 0:\n                pencils_each = pencils_total // 44\n                return pencils_each\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara, kevin, james = symbols('sara kevin james')\n    \n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    multiples = [4, 6, 7]\n    result = multiples[0]\n    for i in multiples[1:]:\n        result = lcm(result, i)\n    return result\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    # We start by checking the LCM of numbers from 2 to 10, since M must be greater than this LCM of these numbers\n    # to have different non-zero remainders when divided by each.\n    # Also, to have different remainders for each division, M must be equal to LCM(n) - x where x is in the range [1, n]\n    \n    from math import lcm\n    \n    # Get the LCM of the numbers\n    lcm_value = lcm(*range(2, 11))\n    \n    # M would be lcm - 1 to ensure non-zero different remainders\n    M = lcm_value - 1\n    \n    return M\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24\n    william_time = 8\n\n    # The least common multiple (LCM) of their times will be when they first meet.\n    lcm = (tom_time * william_time) // math.gcd(tom_time, william_time)\n    \n    return lcm\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n\n    # You did not provide the total amount of money collected for charity,\n    # so I assume the total amount is another parameter of the function.\n    # For example, let's suppose the total money collected was ￡50.\n    total_collected = 50  # This value should be provided for exact solution\n\n    # Constraint for total money collected\n    total_money_eq = Eq(romily + reema, total_collected)\n\n    solutions = solve((equation, total_money_eq), (romily, reema))\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = (math_competition + art_competition) - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n    \n    # Find the largest perfect square factor of 28\n    def largest_perfect_square_factor(n):\n        factor = 1\n        for i in range(1, int(n**0.5) + 1):\n            if n % (i*i) == 0:\n                factor = i*i\n        return factor\n\n    def smallest_multiplier_for_perfect_square(n):\n        lpsf = largest_perfect_square_factor(n)\n        return n // lpsf\n\n    # To find the smallest number that 28 must be multiplied by to get a perfect square,\n    # we divide 28 by its largest perfect square factor\n    ans = smallest_multiplier_for_perfect_square(28)\n    \n    return ans\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n\n    # Posts are needed at each end of the field as well.\n    num_of_posts = length_of_field // distance_between_posts + 1\n\n    return num_of_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be 1-9 because it's the tens digit\n        for b in range(10):  # 'b' can be 0-9 because it's the ones digit\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_numbers_sum = sum([6, 16, 26, 46, 56, 66])\n    ans = positive_numbers_sum - negative_numbers_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    finish_lunch_time = datetime.strptime('14:50', '%H:%M')\n    lunch_duration = timedelta(minutes=20)\n    tv_watching_duration = timedelta(minutes=20)\n    playing_duration = timedelta(minutes=10)\n\n    time_reached_home = finish_lunch_time - lunch_duration - tv_watching_duration - playing_duration\n    return time_reached_home.strftime('%H:%M')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # Considering A and B as one unit, we have 5 units to arrange.\n    arrange_5_units = factorial(5)\n    \n    # A and B can be arranged among themselves in 2 ways, i.e., (AB) or (BA).\n    arrange_A_and_B = factorial(2)\n    \n    # Total arrangements are the product of both scenarios.\n    total_arrangements = arrange_5_units * arrange_A_and_B\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    growth_factor = 5\n    survival_rate = 0.5\n    years = 5\n\n    rabbits = initial_rabbits\n    for _ in range(years):\n        rabbits = rabbits * growth_factor * survival_rate\n\n    return int(rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    y, x = symbols('y x')\n    \n    equation = Eq(y, 6 * x)\n    \n    return equation\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # Iterate backwards from the largest two-digit number (99) and check the condition\n    for number in range(99, 9, -1):\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the number of steps on the escalator be s\n    # Let the speed of the escalator be e steps per second\n    # When walking at 1 step per second the total steps made in 10 seconds are\n    # s = 10 + 10 * e (1)\n    # When walking at 2 steps per second the total steps made in 8 seconds are\n    # s = 16 + 8 * e (2)\n    # (since 16 steps are taken and it's twice as fast, it takes half the time as before, hence 10 / 2 = 5 seconds)\n    \n    # We can solve the two equations for s and e.\n\n    # From equation (1) expressed e in terms of s\n    # e = (s - 10) / 10\n    \n    # Substituting e into equation (2)\n    # s = 16 + 8 * ((s - 10) / 10)\n    # Now solve for s\n    # Multiply both sides by 10 to remove the fraction\n    # 10s = 160 + 8s - 80\n    # 2s = 80\n    # s = 40\n    \n    # The escalator has 40 steps\n    return 40\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, purple = symbols('red green purple')\n    \n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n    \n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    sweets = 138\n    for class_size in range(sweets, 0, -1):\n        if sweets % class_size == 0 and sweets // class_size >= 5:\n            return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Since 246 * 135 = 33210, we add 2 * 135 to this result to get 248 * 135\n    base_result = 33210\n    increment = 2 * 135\n\n    ans = base_result + increment\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n    # Since trees are planted at both ends, there is one more tree than the number of intervals\n    num_trees = (road_length // tree_interval) + 1\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    ans = tens + hundredths + thousandths\n\n    return ans\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243 - 3  # Subtract the remaining stickers to get total stickers to be given\n    stickers_per_child = 6\n\n    number_of_children = total_stickers // stickers_per_child\n\n    return number_of_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks / 4\n    remaining_blocks = total_blocks - blocks_given\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds_digit in range(1, 5):  # since it's even and less than the tens digit which is max 8\n        ones_digit = 2 * hundreds_digit\n        # The number must be divisible by 9, so the sum of digits should be a multiple of 9.\n        for tens_digit in range(hundreds_digit + 1, 10, 2):  # only even digits and greater than hundreds_digit\n            if (ones_digit + tens_digit + hundreds_digit) % 9 == 0:\n                # Check if all digits are different and even\n                if len({ones_digit, tens_digit, hundreds_digit}) == 3 and ones_digit <= 8:\n                    return hundreds_digit * 100 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let s be the initial amount of chocolate Sally had, and k be the amount Ken had\n    s, k = symbols('s k')\n    \n    # Sally and Ken had some chocolates in the ratio of 5:7\n    equation1 = Eq(s / k, 5/7)\n    \n    # Ken gave 24 chocolates to Sally\n    # so, Sally has s + 24 chocolates now, and Ken has k - 24\n    # after that, Sally had twice as many chocolates as Ken\n    equation2 = Eq(s + 24, 2 * (k - 24))\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (s, k))\n    \n    # Ken's amount of chocolate in the end is the initial amount minus 24\n    ken_final = solutions[k] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for color pencils (cp) and notebooks (nb)\n    cp, nb = symbols('cp nb')\n\n    # Create equations based on the given information\n    equation1 = Eq(5 * cp + 6 * nb, 17)\n    equation2 = Eq(8 * cp + 6 * nb, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cp, nb))\n\n    # Calculate the total cost of 1 color pencil and 1 notebook\n    total_cost = solutions[cp] + solutions[nb]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    extra_bill = total_bill - (40 * 0) # Subtract the free hours part of the bill\n    # Calculate the number of hours in each segment, considering the different costs per hour\n    if extra_bill <= 10 * 5:\n        extra_hours = extra_bill / 5\n    elif extra_bill <= 10 * 5 + 10 * 8:\n        extra_hours = 10 + (extra_bill - 10 * 5) / 8\n    else:\n        extra_hours = 20 + (extra_bill - 10 * 5 - 10 * 8) / 15\n\n    total_hours = 40 + extra_hours\n    return total_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of money each person has\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(raju, 3 * vijay)                     # Raju has 3 times as much money as Vijay\n    equation2 = Eq(raju, patrick + 152)                 # Raju has $152 more than Patrick\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)   # The average amount of money is $507 \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    thought_number = (2 * sides_of_square) - sides_of_triangle\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total = jane + audrey\n    return total\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = [9, 2 * 90, 3 * 900]\n    total_digits = 1014\n    pages_counted = 0\n\n    for i, dpp in enumerate(digits_per_page):\n        if total_digits > dpp:\n            total_digits -= dpp\n            pages_counted += 10 ** i * 90\n        else:\n            pages_counted += (total_digits // (i + 1))\n            break\n\n    return pages_counted\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_saved = (amy_weekly - amy_spent_weekly) * weeks\n    difference = joanna_total - amy_saved\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    male_students = 7\n    female_students = 6\n    \n    # Total ways to select 4 students without restriction\n    total_ways = comb(male_students + female_students, 4)\n    \n    # Ways to select 4 students with no female students\n    all_male_ways = comb(male_students, 4)\n    \n    # Ways to select a committee with at least 1 female student\n    at_least_one_female = total_ways - all_male_ways\n    \n    # Multiply with the ways to select a teacher\n    total_committees = total_teachers * at_least_one_female\n    \n    return total_committees\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)[0]\n\n    return original_number\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    terms = [(10*i - 6 + 10*i - (6 + 10*(i-1))) for i in range(1, 8)]\n    return sum(terms) + 2021\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Alice's and her sister's current ages\n    alice, sister = symbols('alice sister')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)                   # Alice is twice as old as her sister\n    equation2 = Eq(alice + 10 + sister + 10, 53)        # In 10 years, their total age will be 53\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n\n    return twelfth_number\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_of_x = 3\n    degree_of_y = 2 * n\n    total_degree = degree_of_x + degree_of_y\n\n    # The total degree is given to be 5\n    # So we can set up the equation 3 + 2n = 5\n    n = (5 - 3) // 2\n    return n\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the cost of a book as a symbol\n    book_cost = symbols('book_cost')\n    \n    # Given costs in pence\n    pencil_cost = 40  # cost of pencil in pence\n    \n    # Calculate prices paid by Sarah and Rebecca\n    sarah_price = 8 * book_cost + 3 * pencil_cost\n    rebecca_price = 3 * book_cost + 8 * pencil_cost\n    \n    # The equation based on the condition that Sarah paid £1 more than Rebecca\n    equation = Eq(sarah_price, rebecca_price + 100)  # £1 = 100p\n    \n    # Solve the equation for the cost of a book\n    solutions = solve(equation, book_cost)\n    \n    # Return the book cost in pounds\n    return float(solutions[0]) / 100\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Defining the equations based on the problem\n    equation1 = Eq(angela, bernice + 2)  # Angela buys two more than Bernice\n    equation2 = Eq(bernice, candice + 8) # Bernice buys eight more than Candice\n    equation3 = Eq((angela + bernice + candice) * 6, 342) # Together they spend £3.42\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    # Returning the number of gummy bears Angela buys\n    return solutions[angela]\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weights of the apples such that x < y < z.\n    \n    # If Tim eats the largest apple, mean weight of remaining two (x and y) is 70g\n    # Therefore, (x + y) / 2 = 70 -> x + y = 140\n    \n    # If Tim eats the lightest apple, mean weight of remaining two (y and z) is 105g\n    # Therefore, (y + z) / 2 = 105 -> y + z = 210\n    \n    # So, now we have two equations:\n    # x + y = 140 (Equation 1)\n    # y + z = 210 (Equation 2)\n    \n    # Subtract Equation 1 from Equation 2 to find the weight difference between the heaviest (z) and the lightest (x) apples\n    # (y + z) - (x + y) = 210 - 140\n    # z - x = 70\n    \n    # The weight difference between the heaviest apple and the lightest apple is 70 grams.\n    return 70\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # We know that the sum of three consecutive numbers (n, n+1, n+2) is 60.\n    # Therefore, we have the equation: n + (n + 1) + (n + 2) = 60\n    # Simplifying this equation gives us: 3n + 3 = 60\n    # Solving for n gives us: n = (60 - 3) / 3\n    n = (60 - 3) // 3\n    # The largest number is two more than the smallest number (n), so the largest number is n + 2.\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice // per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_members = 4\n\n    # Total handshakes without restrictions: n(n-1)/2, where n is the number of members\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes that did not happen: m(m-1)/2, where m is the number of non-shaking members\n    missing_handshakes = non_shaking_members * (non_shaking_members - 1) // 2\n\n    # Handshakes that happened: Total handshakes - missing handshakes\n    handshakes_happened = total_handshakes - missing_handshakes\n\n    return handshakes_happened\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # As it's given that the median is 20 and the list is already in ascending order,\n    # we can find the median by taking the middle value since the number of elements is even\n    median_index1 = 5  # The 5th element in the sorted array\n    median_index2 = 6  # The 6th element in the sorted array\n\n    # We can now set up two equations where the median elements equal 20\n    n_plus_7 = 20  # The median element corresponds to n+7\n    n_plus_8 = 20  # The median element corresponds to n+8\n\n    # Solve for n\n    n = n_plus_7 - 7\n\n    # Now we calculate the mean by summing all the numbers in the list and dividing by the number of elements (10)\n    mean = (n + (n + 2) + (n + 3) + (n + 5) + (n + 7) + (n + 8) + (n + 11) + (n + 14) + (n + 16) + (n + 19)) / 10\n\n    return mean\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(10):\n        if (10 + A + A + A + 1 + A + 1) == 23:\n            return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):\n        original_num = i\n        new_num = int(str(i) + '0')\n        if new_num - original_num == 27:\n            return original_num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob is always the 3rd when counting from any direction,\n    # the array must have 5 rows and 5 columns, making Bob the center.\n    animals = 5 * 5 # Total number of animals in the array\n\n    return animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of layers of one-cent coins\n    # Let y be the number of layers of two-cent coins\n    # Let z be the number of layers of five-cent coins\n    x, y, z = symbols('x y z')\n\n    # According to the problem:\n    equation1 = Eq(6 * x, 5 * y)  # 6 one-cent coins have the same height as 5 two-cent coins\n    equation2 = Eq(4 * x, 3 * z)  # 4 one-cent coins have the same height as 3 five-cent coins\n    equation3 = Eq(x + 2 * y + 5 * z, 124)  # Sam used 124 coins in total\n\n    # Solution of the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Total value of the coins (in cents)\n    total_value = solutions[x] + solutions[y] * 2 + solutions[z] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Total length of the road calculated from the plum trees\n    total_length = (41 - 1) * 4\n\n    # Calculate the number of pine trees, considering trees at both ends\n    num_pine_trees = (total_length // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    num_cups = 45\n\n    total_milk = milk_per_cup * num_cups\n    total_tea = tea_per_cup * num_cups\n\n    return total_milk + total_tea\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, honeydew = symbols('durian honeydew')\n    \n    # Given conditions\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols A and B for the amount of water in containers A and B respectively\n    A, B = symbols('A B')\n\n    # According to the problem, container A contains 350 mL more water than container B\n    equation1 = Eq(A, B + 350)\n    # After spilling 500 mL from A, container B has twice as much water as A\n    equation2 = Eq(B, 2 * (A - 500))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # The solution for A will give us the amount of water container A had originally\n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Blue to Green is 2:5 and Green to Red is 4:1\n    # Therefore, for some integer k, the number of Blue, Green, and Red pens can be expressed as:\n    # Blue = 2k, Green = 5k, and Red = 5k / 4, as 4 Green pens correspond to 1 Red pen.\n\n    # The total number of pens is Blue + Green + Red,\n    # This gives us the equation: Total = 2k + 5k + (5k / 4)\n\n    max_red_pens = 0\n    k = 1\n    while True:\n        total_pens = (2 * k) + (5 * k) + (5 * k // 4)\n        # Total pens should be less than 100\n        if total_pens < 100:\n            max_red_pens = max(max_red_pens, (5 * k // 4))\n            k += 1\n        else:\n            break\n\n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    money_spent_on_books = initial_money * 0.25\n    money_left_after_books = initial_money - money_spent_on_books\n    money_spent_on_dvd = money_left_after_books * 0.20\n    money_left = money_left_after_books - money_spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # Since there are 12 months in a year,\n    # the number of components produced each month would be m divided by 12.\n    # This is the algebraic expression for the monthly production:\n    monthly_production = m / 12\n    return monthly_production\n\n# Assuming we have a value for m, for example:\nm = 1200  # Replace 1200 with the actual number of components produced last year.\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Starting from the largest 6-digit number and decreasing by 6 to ensure divisibility by 6\n    for number in range(999996, 100000, -6):\n        if str(number) == str(number)[::-1]:  # Check for palindrome\n            return number\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n    \n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote 'p' as the number of pins she originally had,\n    # and 'n' as the number of needles she originally had.\n    p, n = symbols('p n')\n    \n    # Paul's assumption: After selling, Grace has an equal number of pins and needles\n    # Given:\n    # Total number of items = 2540\n    # Pins sold = 1820, leaving p - 1820 pins\n    # Needles sold = 4/5 of needles, leaving n - (4/5)*n = (1/5)*n needles\n    # After selling, number of pins left = number of needles left\n    equation1 = Eq(p + n, 2540)  # Total equation\n    equation2 = Eq(p - 1820, (1/5)*n)  # Remaining pins and needles are equal equation\n    \n    # Solve the system of equations for p and n (pins and needles)\n    solutions = solve((equation1, equation2), (p, n))\n    \n    return solutions[n] - (4/5)*solutions[n]  # Total needles - sold needles = needles left\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # Desired length in meters\n    short_by_cm = 10         # Short by this much in centimeters\n    short_by_m = short_by_cm / 100  # Convert centimeters to meters\n\n    garage_piece_length_m = desired_length_m - short_by_m  # Length of the piece in the garage in meters\n\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the initial number of marbles\n    initial_marbles = symbols('initial_marbles')\n\n    # Wei Yan gave 3/8 of his marbles to his friends\n    after_friends = initial_marbles - (3/8) * initial_marbles\n    \n    # He gave 5/7 of the remaining marbles to his brother\n    after_brother = after_friends - (5/7) * after_friends\n    \n    # His cousin gave him 408 marbles\n    final_marbles = after_brother + 408\n    \n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * initial_marbles)\n    \n    # Solve the equation\n    solutions = solve(equation, initial_marbles)\n    \n    # There should be only one solution\n    return solutions[0]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    sum_pattern = sum(pattern)\n    repeats, remainder = divmod(41, len(pattern))\n\n    sum_sequence = repeats * sum_pattern + sum(pattern[:remainder])\n    return sum_sequence\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2/7) * 315\n    return result\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 47, 2):\n        five_p = 47 - two_p\n        if five_p % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    # Calculate each fraction in the numerator\n    numerator_1 = (9 + 10 + 11) / 8\n    numerator_2 = (10 + 11 + 12) / 9\n    numerator_3 = (11 + 12 + 13) / 10\n    numerator_4 = (12 + 13 + 14) / 11\n\n    # Sum up the numerators considering the signs\n    total_numerator = numerator_1 - numerator_2 + numerator_3 - numerator_4\n\n    # Calculate each fraction in the denominator\n    denominator_1 = 1 / 8\n    denominator_2 = 1 / 9\n    denominator_3 = 1 / 10\n    denominator_4 = 1 / 11\n\n    # Sum up the denominators considering the signs\n    total_denominator = denominator_1 - denominator_2 + denominator_3 - denominator_4\n\n    # Divide the total numerator by the total denominator\n    ans = total_numerator / total_denominator\n\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    for combo in combinations(range(1, 11), 2):  # Numbers from 1 to 10, since 11 cannot be included in a pile\n        # combo is a tuple of two numbers, if we subtract the sum of these numbers from 11 and it is not in the combo,\n        # it means it's a valid distribution\n        # as the third pile should not match the first two to have distinct piles\n        if 11 - sum(combo) not in combo:\n            count += 1\n    # Each combination of piles is counted three times (each pile can be first, second, or third),\n    # so we divide by 3 to correct for overcounting.\n    return count // 3\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    first_number = round(654876, -2)\n    second_number = round(279745, -2)\n    estimated_difference = first_number - second_number\n\n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        for j in range(1, 8):\n            if i + j == 8 and i != j:\n                count += 1\n    return count // 2  # Divide by 2 to correct for double counting pairs\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_train_meters = 480\n    \n    # speed = distance / time\n    speed_m_per_s = length_train_meters / time_seconds\n    \n    # convert m/s to km/h by multiplying with 3.6 (1 m/s = 3.6 km/h)\n    speed_km_per_h = speed_m_per_s * 3.6\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return round(cost_for_3_5_kg, 2)\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5 / 8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n    \n    # Since there are lampposts at both ends, the number of intervals is one less than the number of lampposts\n    num_intervals = total_lampposts - 1\n    road_length = num_intervals * distance_between_lampposts\n    \n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_numbers = [num for num in range(1, 51) if '3' in str(num)]\n    ans = sum(erased_numbers)\n    return ans\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n    \n    combinations = pastas * sauces * toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # Maximum tries for the first key are 10 (as all keys are an option)\n    max_tries_for_first_key = 10 \n\n    # Subsequent keys have one less possible door each time\n    # Second key max tries will be 9, third will be 8, and so on...\n    max_tries_subsequent_keys = sum(range(1, 10)) \n  \n    # Total maximum tries is the sum of the two computed values\n    total_maximum_tries = max_tries_for_first_key + max_tries_subsequent_keys \n\n    return total_maximum_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n\n    bags_bought = (total_guests // bag_size) + (1 if total_guests % bag_size != 0 else 0)\n    poppers_used = total_guests\n    poppers_bought = bags_bought * bag_size\n    poppers_left = poppers_bought - poppers_used\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since the last digit of powers of 7 repeat in a cycle: 7, 9, 3, 1\n    cycle = [7, 9, 3, 1]\n    # Find the position in the cycle for the 2023rd power of 7\n    position = (2023 - 1) % 4\n    # Get the ones digit from the cycle\n    ones_digit = cycle[position]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "from decimal import Decimal, getcontext\n\ndef solution():\n    getcontext().prec = 6  # set precision high enough to account for rounding\n    expr = (Decimal(-13.3333333333333333333333333333).sqrt(3) * Decimal(4.0909090909090909090909090909) ** 2) / (Decimal(59.24) - Decimal(11.1111111111111111111111111111).sqrt())\n    ans = round(expr, 3)\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    str_number = ''.join(str(i) for i in range(1, 31))\n    str_number = str_number[:46] + '1' + str_number[46:]\n    ans = int(str_number)\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # least 5-digit palindrome is 10001 (the first 5-digit number where the first and last digits are the same)\n    least_5_digit_palindrome = 10001\n    \n    # greatest 6-digit palindrome is 999999 (the first 6-digit number where all digits are the same)\n    greatest_6_digit_palindrome = 999999\n    \n    # difference between the greatest 6-digit palindrome and least 5-digit palindrome\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n\n    ans = comb(total_children, children_to_pick)\n\n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys are 1/4 of the total members, total is 4 times the boys\n    girls = 0.75 * total_members  # 3/4 of the total members are girls\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's purchase equation: 2 bananas + 3 apples = £1.50\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    # Beth's purchase equation: 3 bananas + 2 apples = £1.45\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Annabella's cost for 1 banana and 1 apple\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years_later = 0\n\n    while sara_age + lucy_age != 60:\n        sara_age += 1\n        lucy_age += 1\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    pay_with = 16  # since we pay with £1 coins, we need to use the next whole number of coins that is greater than the cost.\n    change = pay_with - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    return sum(99 + i*(-1)**i for i in range(0, 21, 2))\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert the mixed number to an improper fraction\n    mixed_number = 201 + 1/7\n    \n    # Divide the mixed number by 8\n    result = mixed_number / 8\n    \n    # Subtract 1/7 from the result to find the value of A\n    A = result - 1/7\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Original ratio of footballs to basketballs\n    original_ratio = Eq(footballs, (2/5)*basketballs)\n    \n    # Ratio after selling 16 basketballs\n    new_ratio = Eq(footballs, (2/3)*(basketballs - 16))\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (footballs, basketballs))\n    \n    # Calculate the total number of footballs and basketballs originally\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_time_in_minutes = 5\n    total_marshmallows = marshmallows_per_minute * total_time_in_minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    # Let x be the age of the older brother this year, and y be the age of the younger brother this year.\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n\n    # When the older brother was y years old, the younger brother was 12.\n    equation1 = Eq(x - y, 12)\n\n    # When the younger brother is x years old, the older brother will be 27.\n    equation2 = Eq(x + (x - y), 27)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the age of the older brother (x) from the solutions.\n    return solutions[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Since Rona wants to make sure to have a pair of gloves of the same color,\n    # she could take at most 4 gloves (one of each color) without guaranteeing a pair.\n    # To ensure a pair, she must take one more glove, which will definitely be the same color as one of those already taken.\n    # So, the number of gloves she needs to take is the number of colors times the number of gloves per color to not have a pair, plus one.\n    \n    num_colors = 5  # there are 5 colors\n    max_gloves_without_pair = num_colors - 1  # taking one glove of each color without getting a pair\n    # We have to take one more glove to ensure we have a pair\n    gloves_to_ensure_pair = max_gloves_without_pair + 1\n    \n    return gloves_to_ensure_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    # Find smallest multiple of 8 greater than or equal to 30\n    lower_bound = (30 + 7) // 8 * 8\n    # Find largest multiple of 8 less than or equal to 82\n    upper_bound = 82 // 8 * 8\n    \n    # Calculate the number of multiples of 8 within the bounds\n    number_of_multiples = (upper_bound - lower_bound) // 8 + 1\n\n    return number_of_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Peter and Sam initially have\n    peter_initial, sam_initial = symbols('peter_initial sam_initial')\n\n    # Create two equations based on the problem statement\n    # Sam Sam had 40 stickers more than Peter at the start\n    equation1 = Eq(sam_initial, peter_initial + 40)\n    # After the exchange, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_initial - 0.20 * sam_initial + 0.25 * peter_initial,\n                   peter_initial + 0.20 * sam_initial - 0.25 * peter_initial + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (peter_initial, sam_initial))\n\n    # Return the number of stickers Peter initially had\n    return solutions[peter_initial]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    # We use the formula for maximum number of junctions formed by n straight lines:\n    # maximum number of junctions = n(n-1)/2\n    n = 13\n    ans = n * (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10 / 100)\n    final_price = increased_price * (1 - 10 / 100)\n    return final_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Speed of students in km/min\n    student_speed_km_per_min = 8 / 60\n    # Speed of teacher in km/min\n    teacher_speed_km_per_min = 12 / 60\n    # Total time spent in minutes\n    total_time_minutes = 7.2\n    \n    # Calculate the distance that the teacher traveled in 7.2 minutes at a relative speed\n    relative_speed_km_per_min = teacher_speed_km_per_min - student_speed_km_per_min\n    distance_km = total_time_minutes * relative_speed_km_per_min / 2  # divide by 2 because it's a round trip\n\n    return distance_km\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_2_years_ago = flora_age_now - 2\n    fathers_age_2_years_ago = 9 * flora_age_2_years_ago\n    fathers_age_now = fathers_age_2_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n    \n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Speed S1 = 4 km/h, late by L1 = 20 minutes = 1/3 hour\n    # Speed S2 = 6 km/h, early by E1 = 10 minutes = 1/6 hour\n    # Time difference = T1 with S1 speed - T2 with S2 speed\n    # Time difference = L1 + E1 = 1/3 + 1/6 = 1/2 hour\n    # S1 * T1 = S2 * T2 (Distance is constant)\n    # (S1 * T1) / S1 = (S2 * (T1 - time difference)) / S2\n    # T1 = (S2/S1) * (T1 - time difference)\n    # T1 - (S2/S1) * T1 = -(S2/S1) * (-time difference)\n    # T1 * (1 - (S2/S1)) = (S2/S1) * time difference\n    # T1 = ((S2/S1) * time difference) / (1 - (S2/S1))\n    S1 = 4\n    S2 = 6\n    time_diff = 1/2\n\n    # Calculate time taken with first speed\n    T1 = (S2 * time_diff) / (S1 - S2)\n\n    # Calculate distance using S1 and T1\n    distance = S1 * T1\n\n    return distance\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # In a single round-robin, each team plays every other team once.\n    # Therefore, in each group of 4 people, there are C(4, 2) games.\n    # Since there are 4 groups, we multiply that by 4.\n    group_games = 4 * (4 * 3 // 2)\n    \n    # After the group stage, 8 winners are in a single-elimination bracket.\n    # Since it's single-elimination, the number of games is always one less than the number\n    # of participants, so 8 - 1 games for the quarterfinals, 4 - 1 games for the semifinals,\n    # and finally 2 - 1 games for the final.\n    knockout_games = (8 - 1) + (4 - 1) + (2 - 1)\n    \n    # For third place, an additional game is played between the two losers of the semifinals.\n    third_place_game = 1\n    \n    # Total games is the sum of the group stage games, knockout games, and the third place game.\n    total_games = group_games + knockout_games + third_place_game\n    \n    return total_games\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    # Since we are counting the digit '3', we subtract all occurrences before the last '3'\n    return count - 1\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1 * 1.25 * 100\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candies = 3\n    # Reverse Ken's action\n    remaining_candies = (remaining_candies + 1) * 2\n    # Reverse Nini's action\n    remaining_candies = (remaining_candies - 3) * 2\n    # Reverse Ivy's action\n    remaining_candies = (remaining_candies + 2) * 2\n    # Reverse Eddie's action\n    remaining_candies = (remaining_candies - 1) * 2\n\n    return remaining_candies\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance to climb\n    total_distance = 18\n    \n    # Distance climbed during the day\n    climb_day = 7\n    \n    # Distance climbed on the 6th day\n    climb_day_6 = 3\n    \n    # Calculate the total distance climbed after 5 days\n    total_climbed_5_days = climb_day * 5\n    \n    # The snail climbs out on the 6th day, so we can calculate the slide down distance\n    slide_night = total_climbed_5_days + climb_day_6 - total_distance\n    \n    # The distance the snail slides down at night is the climb per day minus slide distance at night\n    slide_down_at_night = climb_day - slide_night\n\n    return slide_down_at_night\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n    \n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n    \n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations('CYZZ'))\n    return len(arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all units to meters\n    height_m = 5  # already in meters\n    height_cm = 120 / 100  # convert centimeters to meters\n    height_mm = 50 / 1000  # convert millimeters to meters\n    height_feet = 8 * 0.3048  # convert feet to meters\n\n    # Determine which height is plausible for a pupil (assuming age 11+)\n    # A typical 11-year-old would be under 2 meters tall, so let's use that as a cap\n    plausible_height = lambda height: height > 0 and height < 2\n\n    # Check each height to see if it is plausible\n    ans = [\n        plausible_height(height_m),\n        plausible_height(height_cm),\n        plausible_height(height_mm),\n        plausible_height(height_feet)\n    ]\n\n    # Return only the ones that might be correct (i.e., where ans is True)\n    return [i+1 for i, correct in enumerate(ans) if correct]\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    girls, boys = symbols('girls boys')\n    \n    # Equation representing 3 times as many girls as boys\n    equation1 = Eq(girls, 3 * boys)\n    \n    # Equation representing the total number of paintbrushes\n    equation2 = Eq(2 * girls + 3 * boys, 99)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_a = 12\n    class_b = 16\n    class_c = 20\n\n    # Calculate the greatest common divisor among all three classes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    average_boys = 74\n    total_participants = 18 + 12\n    average_all = 82\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = total_participants * average_all\n    total_score_girls = total_score_all - total_score_boys\n    \n    average_girls = total_score_girls / 12\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_on_first_catch = 100\n    caught_on_second_catch = 200\n    marked_on_second_catch = 25\n\n    total_fish_in_pond = (marked_on_first_catch * caught_on_second_catch) / marked_on_second_catch\n    \n    return total_fish_in_pond\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    # Total amount of food needed to feed 12 rabbits for 15 days\n    total_food = 12 * 15\n    \n    # Calculate how many days the food would last for 20 rabbits\n    days_for_20_rabbits = total_food / 20\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n    \n    total_sweets = sum(solutions.values())\n    \n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # girls planted 12 more trees than boys\n    equation1 = Eq(girls, boys + 12)\n\n    # total trees planted\n    equation2 = Eq(boys + girls, 100)\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    start_breakfast = get_up_time + timedelta(minutes=25)\n    end_breakfast = start_breakfast + timedelta(minutes=10)\n    arrival_at_school = end_breakfast + timedelta(minutes=35)\n    registration_time = arrival_at_school - timedelta(minutes=5)\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    number_of_packets = 6\n    total_salt = salt_per_packet * number_of_packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78, 2):\n        for three_gram_weights in range(0, 78, 3):\n            if two_gram_weights + three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # The sum of cubes from 1 to n is the square of the sum of the numbers from 1 to n\n    # Calculate the sum of numbers from 1 to 20\n    sum_1_to_20 = sum(range(1, 21))\n    # Calculate the sum of numbers from 1 to 9\n    sum_1_to_9 = sum(range(1, 10))\n    # Calculate the sum of cubes from 1 to 20 using the formula.\n    sum_cubes_1_to_20 = sum_1_to_20 ** 2\n    # Calculate the sum of cubes from 1 to 9 using the formula.\n    sum_cubes_1_to_9 = sum_1_to_9 ** 2\n    # Subtract the sum of cubes from 1 to 9 from the sum of cubes from 1 to 20.\n    # This gives us the sum of cubes from 10 to 20.\n    ans = sum_cubes_1_to_20 - sum_cubes_1_to_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    whole_number = 2\n    fraction = 1 / 2\n    quarters_in_one = 4\n\n    total_quarters = whole_number * quarters_in_one + fraction * quarters_in_one\n\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    # Given values\n    first_four_scores = [96, 85, 89, 92]\n    average_score = 90\n    num_assignments = 5\n    \n    # Calculate total score for the five assignments\n    total_score = average_score * num_assignments\n    \n    # Calculate sum of the first four scores\n    sum_first_four_scores = sum(first_four_scores)\n    \n    # Calculate the score on the fifth assignment\n    fifth_score = total_score - sum_first_four_scores\n    \n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    cards = 1\n    while not (cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6):\n        cards += 1\n    return cards\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    # Let the number of girls be g\n    # Let the number of boys be b\n    # Given b = g + 90 (Eq1)\n    # Total number of pupils is 1690, so g + b = 1690 (Eq2)\n    # The ratio of girls who can swim to those who cannot is 31:49, let's assume 31x girls can swim and 49x cannot\n    # The number of boys who can swim is 120 less than those who cannot, let's assume y boys can swim and y+120 cannot\n    # Now, g = 31x + 49x = 80x (the total number of girls)\n    # And, b = y + (y + 120) = 2y + 120 (the total number of boys)\n    # Substitute g and b in Eq1 and Eq2:\n    # 80x = 2y + 120 + 90 (Eq3)\n\n    # 80x + 2y + 120 = 1690 (Eq4)\n    # Solve for x and y using Eq3 and Eq4\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    eq1 = 80*x - (2*y + 210) # Given Eq1\n    eq2 = 80*x + (2*y) + 120 - 1690 # Given Eq2\n    solutions = solve((eq1, eq2), (x, y))\n    x_value = solutions[x]\n    y_value = solutions[y]\n\n    # Total number of pupils that can not swim is 49x (girls) + (y + 120) (boys)\n    total_cannot_swim = 49*x_value + (y_value + 120)\n    return total_cannot_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure 5 different colors with at least 10 pencils of each, we need:\n    # 10 pencils for the first color,\n    # 10 pencils for the second color,\n    # 10 pencils for the third color,\n    # 10 pencils for the fourth color,\n    # and 10 pencils for the fifth color.\n    # So we have 5 * 10 = 50 pencils, ensuring that we have 5 different colors.\n    # However, for the worst-case scenario, we need to consider the situation where\n    # we pick the maximum number of pencils of the same color before getting to the\n    # next color. This means we could draw all 75 pencils from 4 colors first.\n    \n    # So, we can take all pencils of 4 colors without getting 5 different colours\n    max_same_color_pencils = 4 * 75\n    \n    # Now we draw 10 pencils of the 5th color to ensure we have 5 colors\n    required_pencils_of_fifth_color = 10\n    \n    # Total pencils drawn for the worst-case scenario\n    total_pencils = max_same_color_pencils + required_pencils_of_fifth_color\n    \n    return total_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity = 34\n    coaches = -(-pupils // capacity)  # Ceiling division to account for any remainder\n\n    return coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of sweets Pip had initially, then 7/4*x are the sweets Bud had initially.\n    pip, bud = symbols('pip bud')\n\n    # Initial ratio equation\n    equation1 = Eq(pip * 7, bud * 4)\n    \n    # After receiving 5 sweets from Santa, Bud has 7/4*x + 5 sweets.\n    # Now the ratio between Pip and Bud is 8:15.\n    equation2 = Eq((pip * 15), (bud * 8) + 5 * 15)\n    \n    # Solve the system of equations for pip and bud\n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total length of the perimeter of the rectangle\n    perimeter = 2 * (144 + 204)\n    \n    # Since wheat are planted at every corner, \n    # we subtract 4 wheat from the total count to account for the corners\n    remaining_wheat = 116 - 4\n    \n    # Distance between each wheat is the perimeter divided by \n    # the number of intervals which is remaining wheat count\n    distance = perimeter / remaining_wheat\n\n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_of_5 = 5 ** 20 % 10\n    last_digit_of_7 = 7 ** 30 % 10\n    last_digit = (last_digit_of_5 * last_digit_of_7) % 10\n    return last_digit\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List of prime numbers less than 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    \n    # We will store the possible primes for A, B, and C\n    possible_a = primes.copy()\n    possible_b = primes.copy()\n    possible_c = primes.copy()\n    \n    # A's statement implies that the sum of the three primes cannot be even\n    # because the only even prime is 2 and all primes are odd except 2, \n    # thus any two odd primes always sum up to an even number which can't be prime.\n    # So, A cannot be 2.\n    possible_a.remove(2)\n    \n    # From the information given by B if we subtract 1 from B's prime number we get the difference as 7\n    # This implies B's number is of the form (7 + 1) = 8 + some prime. Only 11, 17, and 19 fit this condition.\n    possible_b = [prime for prime in primes if prime - 1 - 7 in primes and prime != 2]\n\n    # Based on the teacher's hint, when 2 * C's number is added to other two primes,\n    # it should form a correct addition equation.\n    # For all primes in C's possible list, check if this condition holds true.\n    results = []\n    for b in possible_b:\n        for a in possible_a:\n            for c in possible_c:\n                if a != b and b != c and a != c:\n                    if (2 * c) + a == b or (2 * c) + b == a or a + b == (2 * c):\n                        # If this condition is true, add the set of primes to result\n                        results.append((a, b, c))\n    \n    # Now filter only those sets of results where sum of all three primes is even (based on A's statement)\n    final_results = [r for r in results if (sum(r) % 2 == 0)]\n    \n    # There should be only one unique set that meets all criteria\n    answer = sum(final_results[0])\n    return answer\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    \n    length1 = 39\n    length2 = 52\n    \n    ans = gcd(length1, length2)\n    \n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the score for an A grade, and B be the score for a B grade\n    A, B = symbols('A B')\n\n    # Simon has four A grades and four B grades with a score of 36\n    simon_eq = Eq(4*A + 4*B, 36)\n\n    # Peter has two A grades and three B grades with a score of 22\n    peter_eq = Eq(2*A + 3*B, 22)\n\n    # Solve for A and B\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    # Calculate the score for three A grades and five B grades\n    score = 3*solutions[A] + 5*solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    num_friends = 1  # Joe has one friend to share with\n    joe_squares = total_squares // (num_friends + 1)  # Joe and his friend share equally\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    # To find the total number of children in the queue, we add the position of Laura, the number of children between \n    # Laura and Amanda, and the position of Amanda from the end. Since Laura and Amanda are included in the counts, \n    # we do not need to add extra 1 to include them.\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime number nor composite number or zero\n    D = 0  # 2 less than the smallest prime number (2-2)\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 4  # greatest factor of 8 excluding 8 itself\n    H = 6  # lowest multiple of 6\n\n    return f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers Mary, Alexis, and Charlotte initially have\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n\n    # Marry and Alexis had some stickers in the ratio 7 : 5\n    ratio_eq = Eq(mary / alexis, 7/5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    mary_gives = mary * 0.20\n    alexis_gives = alexis * 0.20\n\n    # Charlotte's stickers increased by 80%\n    charlotte_increase_eq = Eq(charlotte_final, charlotte_initial * 1.80)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    mary_end_eq = Eq(mary - mary_gives, charlotte_final + 20)\n\n    # Alexis had some number of stickers at first (we need to find)\n    alexis_end_eq = Eq(alexis - alexis_gives, charlotte_final)\n\n    # Final equation: the amount given to Charlotte equals the increase in Charlotte's stickers\n    charlotte_eq = Eq(mary_gives + alexis_gives, (charlotte_final - charlotte_initial))\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, charlotte_increase_eq, mary_end_eq, alexis_end_eq, charlotte_eq),\n                      (mary, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n\n    return people_on_train_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    day_in_seconds = 24 * 60 * 60\n    ans = day_in_seconds * (1/4) * (1/6) * (1/8)\n    return ans\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Eddie and his parents can be considered as a single unit. \n    # This unit can have 3! permutations among themselves (Eddie, mom, dad).\n    unit_permutations = 3!\n\n    # Now considering Eddie's family as one single unit, we have to calculate permutations \n    # with the remaining family members, let's say there are n other family members. \n    # The single unit can be positioned in (n+1)! ways.\n    # We assume the rest of the family members can be positioned in n! different ways.\n    \n    # Since we do not have the number of other family members defined in the question, \n    # we'll just consider the total number of family members (including Eddie's unit).\n    # Let's assume there are 3 people in Eddie's family (including him) and no more members, \n    # so we're looking for number of ways to arrange 1 unit. Hence n=0 in this case and n+1=1\n\n    family_permutations = 1  # since n is 0, n+1 is 1, and 1! is 1\n\n    # Total permutations would be product of permutations within the unit and the whole family.\n    total_permutations = unit_permutations * family_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    # Create a sequence with 3 '2's and 2 '3's\n    sequence = '22233'\n    # Find all unique permutations of the sequence\n    perms = set(permutations(sequence, 4))\n    # Count the number of unique permutations\n    count = len(perms)\n    return count\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    # Iterating over all four-digit numbers where the thousands digit is the same as the units digit\n    for i in range(1, 10):\n        for j in range(10):\n            for k in range(10):\n                pip_number = int(f\"{i}{j}{k}{i}\")\n                bud_number = int(f\"{i}{k}{j}{i}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # The amount of grass is proportional to the number of cows and the days they can be fed.\n    # Let's call the total amount of grass G.\n    # For 25 cows for 10 days, we have 25 * 10 = G\n    # For 15 cows for 20 days, we have 15 * 20 = G\n    # We want to find the number of cows that can be fed for 50 days, so cows * 50 = G\n    # Since both equations equal G, we can set them equal to each other:\n    # 25 * 10 = 15 * 20\n    # Solve this equation for the number of cows (cows) that can be fed for 50 days:\n    # cows * 50 = 25 * 10\n    # cows = (25 * 10) / 50\n    cows = (25 * 10) / 50\n    return cows\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    pages = 95\n    day = 0\n    while pages > 0:\n        day += 1\n        pages -= day\n    return day\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Set up the equations based on the given ratio information\n    original_ratio = Eq(oranges / lemons, 3/5)\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    \n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first_day is 1/3 of second_day\n    third_day = (5/3) * second_day  # Since third_day is 5/3 of second_day\n\n    total_sold = first_day + second_day + third_day\n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3 groups of books: 1 group of math books, 1 group of English books, and 1 group of 3 other books.\n    # First, treat each grouped category as a single item. Therefore, we have 3 items to arrange.\n    arrangements_of_groups = factorial(3)\n    \n    # Then, within the math books group, there are 3 books which can be arranged in 3! ways.\n    math_book_arrangements = factorial(3)\n    \n    # Similarly, within the English books group, there are 2 books which can be arranged in 2! ways.\n    english_book_arrangements = factorial(2)\n    \n    # The 3 other books are all different, but since we consider them as a single group for the outer arrangement,\n    # their arrangement doesn't matter in this context.\n    \n    # The total number of ways the books can be arranged is the product of the arrangements of the groups and\n    # the arrangements within each group.\n    total_arrangements = arrangements_of_groups * math_book_arrangements * english_book_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    tax_rate = 0.10\n\n    discounted_price = original_price * (1 - discount)\n    final_price_before_tax = discounted_price - member_discount\n    total_tax = final_price_before_tax * tax_rate\n    final_price = final_price_before_tax + total_tax\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    \n    total_people = people_in_front + people_behind + judy\n    \n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes = 250 / flour_per_cake\n    return int(cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Total work is represented by the least common multiple of 24 and 20 days\n    # But as per the given condition, lcm(24, 20) equals to working together for 12 days\n    # which simplifies the total work to 12 * work done by Ivy and Kevin in one day\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_work = 12 * (ivy_rate + kevin_rate)\n\n    # Calculate the amount of work done by Ivy alone in 12 days\n    ivy_work = 12 * ivy_rate\n\n    # Since the total work must be completed, subtract Ivy's solo contribution to find Kevin's\n    kevin_work = total_work - ivy_work\n\n    # Work rate of Kevin is constant, calculate the days he actually worked\n    kevin_days_worked = kevin_work / kevin_rate\n    \n    # Kevin takes the rest of the days off (12 total days minus the days he worked)\n    kevin_days_off = 12 - kevin_days_worked\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n    \n    eq1 = Eq(ophelia, 4 * penelope)\n    eq2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    sol = solve((eq1, eq2), (ophelia, penelope))\n\n    return sol[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    ratio = 20 / 32\n    missing_number = 8 * ratio\n    return int(missing_number)\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    both_competitions = math_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # If Cindy takes out one sock of each color, she will have:\n    # 1 black sock + 1 red sock = 2 socks without having a matching pair.\n    # At this point, she has taken socks of each available color.\n    # To guarantee a matching pair regardless of color, she must take out one more sock:\n    # This additional sock will definitely match one of the socks already taken out.\n    # So, the minimum number of socks Cindy must take out is 3.\n    # Hence, we set the answer to 3.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange k items from n items is given by nPk (permutation)\n    # nPk = n! / (n - k)!\n    n = 9  # total number of statues\n    k = 4  # number of statues to arrange in a row\n\n    ans = factorial(n) // factorial(n - k)\n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # in pence, since £1 is equivalent to 100p\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    number_of_years = 3\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Number of patterns needed to have 14 grey rabbits\n    grey_rabbits_per_pattern = 2\n    patterns_needed = 14 // grey_rabbits_per_pattern\n    \n    # Total number of rabbits in those patterns\n    rabbits_per_pattern = 1 + 2 + 2  # black + white + grey\n    total_rabbits = patterns_needed * rabbits_per_pattern\n    \n    # Check if there is an incomplete pattern for the remaining grey rabbits\n    remaining_grey_rabbits = 14 % grey_rabbits_per_pattern\n    if remaining_grey_rabbits > 0:\n        # Add one pattern to include the remaining grey rabbits and any black and white rabbits in the pattern\n        total_rabbits += rabbits_per_pattern\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_multiplier = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_multiplier\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    min_divisor = remainder + 1\n    min_dividend = quotient * min_divisor + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    non_chocolate_no_foil = 9\n\n    # The Inclusion-Exclusion Principle Formula: \n    # |A or B| = |A| + |B| - |A and B|\n\n    # We want to find |Chocolate| (A)\n    # We know |Foil| (B), |Chocolate with Foil| (A and B), and |Non-Chocolate & No Foil| (neither A nor B)\n    \n    # Total chocolates (with and without foil) would be:\n    # |Chocolate| = total_biscuits - non_chocolate_no_foil - (foil_wrappers - chocolate_with_foil)\n    \n    chocolate_biscuits = total_biscuits - non_chocolate_no_foil - (foil_wrappers - chocolate_with_foil)\n    \n    return chocolate_biscuits\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bicycles, tricycles = symbols('bicycles tricycles')\n\n    # Each bicycle has 2 wheels, and each tricycle has 3 wheels\n    # Total number of vehicles (bicycles + tricycles) is 300\n    equation1 = Eq(bicycles + tricycles, 300)\n\n    # Total number of wheels for tricycles is 180 more than the wheels for bicycles\n    # tricycles * 3 = bicycles * 2 + 180\n    equation2 = Eq(tricycles * 3, bicycles * 2 + 180)\n\n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    return rounded_number if rounded_number != 9764.0 else \"Tongtong is incorrect.\"\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Equation after selling to Yvonne\n    after_yvonne = initial_crystals / 2 + 10\n    # Equation after mining more crystals\n    after_mining = after_yvonne + 20\n    # Equation after selling to Cherlyn\n    after_cherlyn = after_mining - 14\n\n    # Final equation considering he has 35 crystals at the end\n    equation = Eq(after_cherlyn, 35)\n\n    # Solving the equation for the initial number of crystals\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    trailing_zeros_5s = 15 // 5\n    trailing_zeros_2s = 10\n\n    min_trailing_zeros = min(trailing_zeros_5s, trailing_zeros_2s)\n\n    return min_trailing_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the number of carrots Anna had initially, and 'o' be the number of carrots Olaf had initially\n    a, o = symbols('a o')\n\n    # Initial condition: Olaf had thrice as many carrots as Anna\n    initial_condition = Eq(o, 3 * a)\n    \n    # Final condition: After giving away 335 carrots, Anna had twice as many carrots as Olaf\n    final_condition = Eq(a + 335, 2 * (o - 335))\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (a, o))\n\n    # 'a' is the number of carrots Anna had initially\n    return solutions[a]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['1', '5', '6', '8']\n    all_permutations = list(permutations(digits))\n    # Each permutation can have the decimal point in 3 possible places\n    num_decimal_places = 3\n    total_possibilities = len(all_permutations) * num_decimal_places\n\n    return total_possibilities\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_Bala = 1  # Counting Ali and Bala as one entity since Bala is directly behind Ali\n\n    total_people = people_in_front_of_Ali + Ali_Bala + people_behind_of_Bala\n    return total_people\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let the original speed be s metres per minute and the original time be t minutes.\n    s, t = symbols('s t', positive=True)\n\n    # The original distance which the cyclist covers would be s*t (Speed = Distance/Time).\n\n    # If speed increases by 25%, new speed becomes 1.25s.\n    # Decrease in time taken if speed increases by 25% is 20 minutes.\n    # So the new time will be t - 20, and the distance covered will be the same, s*t.\n    eq1 = 1.25 * s * (t - 20) - s * t\n\n    # If speed decreases by 45, new speed becomes s - 45.\n    # Increase in time taken if speed decreases by 45 is 75%.\n    # So the new time will be 1.75t, and the distance covered will be the same, s*t.\n    eq2 = (s - 45) * 1.75 * t - s * t\n\n    # Setting up equations based on the distance being constant.\n    equations = (eq1, eq2)\n\n    # Solving the system of equations for s and t.\n    solution = solve(equations, (s, t))\n\n    # Extracting the values of s (speed) and t (time) from the solution.\n    s_value, t_value = solution[s], solution[t]\n\n    # The distance traveled is speed (s_value) times time (t_value).\n    distance = s_value * t_value\n\n    return distance\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    blue_dodges = blue_cars - (total_cars - fords - black_dodges)  # Blue cars that are not black Fords\n    blue_fords = blue_cars - blue_dodges\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pence_per_plant = 85\n    total_pounds_to_spend = 30\n    pence_to_spend = total_pounds_to_spend * 100  # Convert pounds to pence\n    num_plants = pence_to_spend // pence_per_plant  # Use floor division to find the number of plants\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n    \n    return smaller_number\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4 * 3  # 4 * 3 is the smallest composite number that's a multiple of 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if all are composite\n        if B % 2 == 0 and C % 2 != 0 and C % 3 == 0 and D % 2 == 0:\n            return A + B + C + D\n        A += 4\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # There are 3 colored balls, so to guarantee that he picks up at least one of each color,\n    # he needs to pick 1 more than the total number of balls of the two largest amounts.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Need to pick one more than the sum of the two largest quantities of balls\n    ans = red_balls + green_balls + 1\n\n    return ans\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    number = 0\n    while True:\n        if number % 11 == 5 and number % 7 == 1:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_average = 120\n    number_of_working_days = 5  # Monday to Friday\n    total_earnings = daily_average * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    min_apples_for_max_child = (total_apples - (children - 1)) // children + 1\n\n    return min_apples_for_max_child\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_correct = 3\n    score_wrong = -2\n    total_score = 125\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (correct * score_correct) + (wrong * score_wrong) == total_score:\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Combination of 6 teams taken 2 at a time for a single game\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n    return math.gcd(60, math.gcd(72, 84))\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    final_position = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    # Find the starting position by going counter-clockwise from the final position\n    start_position = (final_position - (total_counts % clock_numbers)) % clock_numbers\n    # If start_position is 0 after the modulo operation, it should be 12 because there's no 0 on a clock\n    start_position = start_position if start_position != 0 else clock_numbers\n\n    return start_position\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]  # Initialize the sequence with the first two numbers\n    for i in range(2, 2011):  # We only need to calculate up to the 2011th number\n        next_num = (seq[-1] + seq[-2]) % 10  # Sum the last two and take the last digit\n        seq.append(next_num)\n        if len(seq) > 2 and seq[-1] == seq[1] and seq[-2] == seq[0]:  # Check for repeat pattern\n            # If a repetition is found, we can calculate the position using modulo\n            position = (2011 - 1) % (i - 1)  # Subtract 1 because the sequence is 0-indexed\n            return seq[position]\n            \n    # If no repeat pattern is found within the first 2011 numbers (though it will be), \n    # the answer is the last number in the list\n    return seq[-1]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    base_number = (two_thirds * 3) / 2\n    three_quarters = (base_number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    m = 31\n    while True:\n        sum_of_series = ((m**2 - 23)**2 + 23**2) / 2\n        k = (2*sum_of_series + 1 - 2*23**2) / (2*(23 + 1))\n        if k.is_integer() and k > 30:\n            return m\n        m += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Given data\n    initial_speed = 40  # speed in the first 2 hours\n    remaining_speed = 70  # speed for the remaining distance\n    initial_time = 2  # time driven at initial speed\n    remaining_distance = 280  # distance driven at remaining speed\n\n    # Calculate distance travelled at initial speed and remaining speed\n    initial_distance = initial_speed * initial_time\n    remaining_time = remaining_distance / remaining_speed\n\n    # Total distance and total time\n    total_distance = initial_distance + remaining_distance\n    total_time = initial_time + remaining_time\n\n    # Calculate average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    total_days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    current_amount = original_amount + (daily_savings * total_days_saved) - lent_to_brother - spent_on_snacks\n    \n    return current_amount\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let's assume the total number of visitors is x.\n    # Therefore, the number of men is 0.37x.\n    # The number of women and children together is (1 - 0.37)x = 0.63x.\n    # If the ratio of women to children is 4:5, then we can say:\n    # Number of women = 4k\n    # Number of children = 5k\n    # Hence, 4k + 5k = 9k = 0.63x\n    # Also given that there are 12 more men than children:\n    # 0.37x - 5k = 12\n    # We have two equations and two variables (x and k).\n    # Let's solve for x and k.\n    \n    from sympy import symbols, solve, Eq\n\n    x, k = symbols('x k')\n    \n    equation1 = Eq(9 * k, 0.63 * x)\n    equation2 = Eq(0.37 * x - 5 * k, 12)\n    \n    solutions = solve((equation1, equation2), (x, k))\n\n    # Find the value of k using the solution for x\n    k_value = solutions[k]\n\n    # Calculate the number of women using the value of k\n    number_of_women = 4 * k_value\n\n    return int(number_of_women)  # Return the integer value of the number of women\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's transaction gives the equation: 2*banana + 3*apple = 3 dollars\n    eq1 = Eq(2*banana + 3*apple, 3)\n\n    # Beth's transaction gives the equation: 3*banana + 2*apple = 4 dollars\n    eq2 = Eq(3*banana + 2*apple, 4)\n\n    # Solve the system of equations for the price of a banana and an apple\n    solutions = solve((eq1, eq2), (banana, apple))\n\n    # Calculate the cost for 10 bananas and 10 apples using the found prices\n    cost = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the amount of oil sold from each bucket\n\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    sold_oil = solve(equation, x)\n\n    return sold_oil[x]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    prob_both_on_time = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_both_on_time\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_from_mother = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # Numbers from 10 to 99 inclusive\n    numbers_without_six = 0\n    \n    for number in range(10, 100):\n        if '6' not in str(number):\n            numbers_without_six += 1\n    \n    return total_two_digit_numbers - numbers_without_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n\n    difference = end_date - start_date\n    return difference.days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n    ans = floor(2017) - ceil(-201.7) + floor(20.17) - ceil(-2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_pow_2023 = pow(2023, 2, 10)\n    last_digit_pow_2 = pow(2, 2023, 10)\n    ans = (last_digit_pow_2023 + last_digit_pow_2) ** 3 % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a mango, an orange, and a pear\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    # Solve the equations for the cost of a mango, an orange, and a pear\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    # Return the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    # The maximum number of intersection points of n lines is given by n choose 2, which is n(n-1)/2\n    max_intersections = (num_lines * (num_lines - 1)) // 2\n    \n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5_pow = 5 ** 20 % 10\n    last_digit_7_pow = 7 ** 20 % 10\n    ans = (last_digit_5_pow * last_digit_7_pow) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n    pencils = 28\n    pens = 63\n    max_students = gcd(pencils, pens)\n    return max_students\n    \nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # let total watermelons be x\n    # after first day, she has 2/3x left\n    # after the second day, she sold 3/5 of the remaining 2/3x, so she had (1 - 3/5) * (2/3) * x = (2/15)x left\n    # according to the question, (2/15)x = 48\n    # therefore, x = 48 * (15/2)\n    total = 48 * (15/2)\n    return int(total)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cards Ahmad, Sam, and Jim received\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    # Solve the system of equations for the number of cards each received\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    # Return the number of cards Jim received\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbol for the cost of one packet of rice in pence\n    packet_of_rice = symbols('packet_of_rice')\n    \n    # Equation based on the total cost (convert £11.70 to pence)\n    total_cost_pence = 1170\n    equation = Eq(6 * 95 + 5 * packet_of_rice, total_cost_pence)\n    \n    # Solve for the cost of one packet of rice\n    cost_per_rice_packet = solve(equation, packet_of_rice)\n    \n    return cost_per_rice_packet[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm_3_5_7 = 3 * 5 * 7  # Calculate LCM of 3, 5, and 7\n    for i in range(10, 100):  # Iterate over all two-digit numbers\n        num = 600 + i  # Append two digits to 6**\n        if num % lcm_3_5_7 == 0:  # Check if the number is divisible by the LCM\n            return num\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Since AB = CD = 14 cm, and we need to find the perimeter\n    # The perimeter is made up of two parts: \n    # 1. The curved parts, which are the circumferences of the two semicircles \n    #    and two quadrants\n    # 2. The straight parts, which are the diameters of the semicircles \n    #    (AB and CD), but as it's a full figure, they're already included \n    #    in the curve calculations of the semicircles\n    \n    # Given π as 22/7\n    pi = 22/7\n    \n    # radius of the semicircles and quadrants is half of AB or CD\n    radius = 14 / 2\n\n    # The curved part of the perimeter is the sum of the circumferences of \n    # two semicircles and two quadrants.\n    # The circumference of a full circle is 2 * pi * radius\n    # The circumference of a semicircle is half of that, and the circumference \n    # of a quadrant is a quarter of that.\n\n    # So, the total curved part of the perimeter is:\n    # 2 semicircles + 2 quadrants = 2 * (1/2 * 2 * pi * radius) + 2 * (1/4 * 2 * pi * radius)\n    # Simplified: pi * radius * (2 + 1) = 3 * pi * radius\n    \n    perimeter_curved = 3 * pi * radius\n\n    # The total perimeter of the figure is just the curved part, as the straight \n    # parts are included in the curved calculations of the semicircles\n    perimeter = perimeter_curved \n\n    return perimeter\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, nsimplify, solve, Rational\n\n    a, b, c = symbols('a b c', integer=True)\n\n    # The complex fraction to be compared with 13/10\n    expr = 1 + 1/(a + 1/(b + 1/c))\n\n    # Create the equation by equating the expression to 13/10\n    equation = nsimplify(expr - Rational(13, 10))\n\n    # since we are looking for whole number solutions we can use 'diophantine'\n    solutions = solve(equation, (a, b, c))\n\n    # Filter out the solutions where a, b, and c are whole numbers\n    solutions = [(int(sol[a]), int(sol[b]), int(sol[c])) for sol in solutions if sol[a].is_integer and sol[b].is_integer and sol[c].is_integer]\n\n    # Use the first solution (there should only be one)\n    a_val, b_val, c_val = solutions[0]\n\n    # Return a + 2b + 3c\n    return a_val + 2*b_val + 3*c_val\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_work = 1  # Lets assume painting the entire house is 1 unit of work\n    energetic_rate = 1 / 20 # Energetic one can paint the house in 20 days\n    combined_rate = 1 / 12 # Together they take 12 days to paint the house\n\n    # combined_rate = energetic_rate + lazy_rate\n    # 1/12 = 1/20 + lazy_rate => lazy_rate = 1/12 - 1/20\n    lazy_rate = combined_rate - energetic_rate\n\n    # lazy_rate = 1 / lazy_days => lazy_days = 1 / lazy_rate\n    lazy_days = 1 / lazy_rate\n\n    return int(lazy_days)\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    right_side = (3 * 9) + (5 * 9)\n    B = right_side / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    n = 15\n    \n    # The average of the consecutive numbers is total_sum / n.\n    average = total_sum / n\n    \n    # The middle number in the sequence of consecutive numbers is the average\n    middle_number = average\n    \n    # Since the numbers are consecutive, the smallest number is 7 numbers before the middle\n    smallest_number = middle_number - (n // 2)\n    \n    # The largest number is 7 numbers after the middle\n    largest_number = middle_number + (n // 2)\n    \n    return int(smallest_number + largest_number)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while not (num_pies % 4 == 0 and num_pies % 6 == 0):\n        num_pies += 1\n    return num_pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a divided by 8 leaves a remainder of 6, a can be expressed as:\n    # a = 8k + 6 for some integer k\n    # Similarly, b divided by 8 leaves a remainder of 7, so b can be written as:\n    # b = 8m + 7 for some integer m\n\n    # Now, to find the remainder when a + b is divided by 8, we add the two forms together\n    # a + b = (8k + 6) + (8m + 7)\n    # a + b = 8(k + m) + 13\n    # The remainder of a number divided by 8 is the extra amount after subtracting the multiple of 8, so here it is 13 - 8 = 5\n\n    # Therefore, the remainder when a + b is divided by 8 is 5\n    remainder = (6 + 7) % 8\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n    \n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / num_blouses\n    \n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    num = 1\n\n    while True:\n        num_str = str(num)\n        digit_count += len(num_str)\n        \n        if digit_count >= 2019:\n            break\n        \n        num += 1\n\n    return int(num_str[2019 - (digit_count - len(num_str)) - 1])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # If the security guard uses the worst strategy, he could potentially waste the most amount of tries.\n    # For the first room, he must try all 11 keys (worst case).\n    # For the second room, he must try the remaining 10 keys.\n    # This pattern continues until the last room, where he would only have to try 1 key.\n    # So, the total number of tries will be the sum of numbers from 11 to 1.\n    \n    max_tries = sum(range(1, 12))\n    \n    return max_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    # Total number of digits is 5 (three 2's and two 3's)\n    # We must choose 4 digits out of the available 5 to form a four-digit number\n    total_digits = 5\n    chosen_digits = 4\n\n    # Count arrangements for forming a four-digit number\n    total_arrangements = factorial(total_digits) // (factorial(chosen_digits) * factorial(total_digits - chosen_digits))\n    \n    # Find repetition counts\n    repetition_2 = factorial(3)\n    repetition_3 = factorial(2)\n\n    # Divide total arrangements by the repetitions for 2's and 3's to get distinct numbers\n    distinct_numbers = total_arrangements // (repetition_2 * repetition_3)\n\n    # Since we have only one 3, we can't form a number with two 3's, thus we have to subtract those cases.\n    # That's one case where we have (3, 3) at any place in the four-digit number, which is not possible.\n    # Hence, we subtract 1 from the final result.\n    ans = distinct_numbers - 1\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6 + 1/2\n    basket_mass_kg = 500 / 1000\n    kitten_mass_kg = 0.6\n    kittens_mass_kg = 4 * kitten_mass_kg\n    \n    cat_mass_kg = total_mass_kg - basket_mass_kg - kittens_mass_kg\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # Mary has 3 brothers and 4 sisters\n    total_people = siblings + 1  # Including Mary\n    eggs_bought = total_people * siblings  # Each buys for all siblings but not for themselves\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    departure_time = (7, 50)  # 7:50 AM\n    arrival_time = (8, 40)    # 8:40 AM\n\n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n\n    journey_duration = arrival_minutes - departure_minutes\n\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, banana = symbols('apples banana')\n\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The pattern is n(n+1)/2 which generates the sequence of triangular numbers\n    # We want the 6th term of the sequence\n    term = 6\n    missing_number = (term * (term + 1)) // 2\n    return missing_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial_money be the money Samuel had at first\n    initial_money = symbols('initial_money')\n\n    # After spending 1/6 of his money and an additional $5 on a DVD\n    after_dvd = initial_money - (initial_money / 6) - 5\n    \n    # Then he spent 2/5 of the remaining money and an additional $12 on magazines\n    after_magazines = after_dvd - (2/5) * after_dvd - 12\n\n    # He had $24 left\n    equation = Eq(after_magazines, 24)\n\n    # Solving the equation for initial_money\n    initial_amount = solve(equation, initial_money)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_handbag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_handbag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_in_bottle = 5\n    oil_left = total_oil - oil_in_bottle\n    \n    oil_per_tank = oil_left / 6\n    \n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let \"n\" be the number of years it will take for the condition to be true.\n\n    grandpa_current_age = 72\n    johnny_current_age = 8\n\n    # Let n be the number of years for the grandpa's age to be 5 times Johnny's age\n    n = symbols('n')\n    \n    # After n years:\n    # grandpa's age = grandpa_current_age + n\n    # johnny's age = johnny_current_age + n\n    # grandpa's age = 5 * johnny's age\n\n    # We can create an equation based on the above relationships.\n    eq = Eq(grandpa_current_age + n, 5 * (johnny_current_age + n))\n\n    # Solving the equation for n\n    solution = solve(eq, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    children_between = 4\n    bud_position_from_end = 10\n\n    total_children = pip_position + children_between + bud_position_from_end\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cards Alan and Bob have\n    alan, bob = symbols('alan bob')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(bob, alan + 15)          # Bob has $15 more Match Dfex cards than Alan\n    equation2 = Eq(bob + 25, 3 * alan)      # Bob now has $25 cards more, and it's three times Alan's amount\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "from scipy.optimize import fsolve\nimport numpy as np\n\ndef equation(r, principal, total_amount, years):\n    return principal * (1 + r)**years - total_amount\n\ndef solution():\n    principal = 2000\n    total_amount = 2519.42\n    years = 3\n\n    # Define a lambda function for our equation, assuming fixed principal, amount after years, and years\n    f = lambda r: equation(r, principal, total_amount, years)\n    \n    # Estimate the initial guess (between the values given in the description for approximation)\n    initial_guess = (1.079 + 1.058) / 2 - 1\n\n    # Solve for the interest rate\n    interest_rate = fsolve(f, initial_guess)\n\n    # Convert to percentage and round to the nearest tenth of a percent\n    interest_rate_percent = round(interest_rate[0] * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    total_odd = sum(range(1, 51, 2))\n    total_even = sum(range(2, 51, 2))\n    difference = total_even - total_odd\n    return difference\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Number of oranges per elderly if 20 oranges are given to each\n    oranges_per_elderly_20 = 20\n    \n    # Number of elderly not receiving oranges when giving 20 each\n    number_of_elderly_20 = 10\n    \n    # Total oranges when giving 20 to each, including those not received\n    total_oranges_20 = (number_of_elderly_20 + 1) * oranges_per_elderly_20\n    \n    # Number of oranges when giving 16 to each\n    oranges_per_elderly_16 = 16\n    \n    # Number of boxes and oranges per box when giving 16 to each\n    boxes = 25\n    oranges_per_box = 2 * 12  # 2 dozen per box\n    \n    # Total oranges when giving 16 to each\n    total_oranges_16 = boxes * oranges_per_box\n    \n    # Total number of oranges Janice has\n    total_oranges = total_oranges_16\n    \n    # Calculate the number of elderly so that each gets an equal number of oranges\n    for oranges_per_elderly in range(1, total_oranges + 1):\n        if total_oranges % oranges_per_elderly == 0:\n            number_of_elderly = total_oranges // oranges_per_elderly\n            if number_of_elderly > (total_oranges_20 // oranges_per_elderly_20):\n                return oranges_per_elderly\n    \n    # If no solution is found, return None\n    return None\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Define the new operation\n    def delta_operation(m, n):\n        return 5 * m + 3 * n\n    \n    # Find x such that x ~Δ~ 9 = 37 using the defined operation\n    # This translates to 5*x + 3*9 = 37\n    for x in range(100):  # Assuming x is within a reasonable range\n        if delta_operation(x, 9) == 37:\n            return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Taking just one less than 4 balls of each color guarantees not having 4 of any color\n    max_blue = 4\n    max_orange = 3\n    max_yellow = 2\n\n    # One more ball taken after this guarantees 4 of at least one color \n    balls_to_take = max_blue + max_orange + max_yellow + 1\n\n    return balls_to_take\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    weight_after_removal = 27\n    removed_soil_weight = full_weight * removed_soil_fraction\n    empty_barrow_weight = full_weight - removed_soil_weight - (weight_after_removal - (full_weight - removed_soil_weight))\n    return empty_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let Tims be the number of Tim's cookies, and Tylers be the number of Tyler's cookies\n    Tims, Tylers = symbols('Tims Tylers')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(Tims/6, Tylers*3/8)\n    equation2 = Eq(Tims, (Tylers - 96)*9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Tims, Tylers))\n\n    # Total number of cookies is the sum of Tim's and Tyler's cookies\n    total_cookies = solutions[Tims] + solutions[Tylers]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for each type of cupcake\n    choco, vanilla, blueberry = symbols('choco vanilla blueberry')\n    \n    # Set up equations based on the problem statement\n    equation1 = Eq(choco, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((choco - choco / 6) + (vanilla - 2 * vanilla / 3) + (blueberry - 7 * blueberry / 9), 427)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (choco, vanilla, blueberry))\n    \n    # Calculate the number of chocolate cupcakes Sally sold\n    choco_sold = solutions[choco] / 6\n    \n    return choco_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    # Least Common Multiple (LCM) of 24 and 30 will give us the time interval in minutes\n    # after which trains leave both platforms at the same time\n    interval_minutes = lcm(24, 30)\n\n    # Convert this interval to hours and minutes\n    interval_hours = interval_minutes // 60\n    interval_remaining_minutes = interval_minutes % 60\n\n    # Since trains leave at 9 AM, we need to find the time after the interval\n    next_train_hour = 9 + interval_hours\n    next_train_minutes = interval_remaining_minutes\n\n    # Adjust for any overflow in the hours if the next time is beyond 12 PM\n    next_train_hour %= 24\n\n    return f\"{next_train_hour}:{str(next_train_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    jenny_score = 136\n    marks_missed = total_marks - jenny_score\n    return marks_missed\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    filled = 24\n    fraction_filled = 3/4\n    total_capacity = filled / fraction_filled\n    return total_capacity\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities we need to find\n    r, w, p, b = symbols('r w p b') # red marbles, white marbles, Pip's red marbles, Bud's white marbles\n\n    # Given conditions as equations\n    # Initial ratio\n    eq1 = Eq(r/w, 3/2)\n    \n    # After Pip adds red marbles\n    eq2 = Eq((r + p)/w, 5/3)\n\n    # After Bud adds white marbles\n    eq3 = Eq((r + p)/(w + b), 5/4)\n    \n    # Bud puts 100 more marbles than Pip\n    eq4 = Eq(b, p + 100)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (r, w, p, b))\n\n    # Get the number of white balls originally in the box\n    return solutions[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # since a div 8 has a remainder 6, a = 8k + 6 for some integer k\n    # since b div 8 has a remainder 7, b = 8m + 7 for some integer m\n    # (a + b) div 8 = (8k + 6 + 8m + 7) div 8\n    #                = 8(k+m) + 13 div 8\n    # the multiple of 8 (8(k+m)) will not affect the remainder when dividing by 8\n    # 13 div 8 gives a remainder of 5.\n\n    ans = 13 % 8\n    return ans\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # There are 5 desks in front of Jessica and 7 behind Judy.\n    # Since Jessica sits in front of Judy, when we count the desks in front of \n    # Jessica and the desks behind Judy, we are counting Jessica's and Judy's desks twice.\n    # Therefore, we subtract 2 from the total to avoid double-counting their desks.\n    # The total number of desks is the sum of the desks in front of Jessica, behind Judy,\n    # Jessica's own desk, and Judy's own desk.\n  \n    ans = 5 + 7 + 2  # Add 2 for Jessica's and Judy's own desks\n    return ans\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0  # Initialize a counter for the occurrences of the digit 6\n    for i in range(2, 57):  # Iterate through the sequence from 2 to 56\n        count += str(i).count('6')  # Count the number of times the digit 6 appears in the number\n    return count  # Return the total count of the digit 6\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original total weight of the group\n    # Let n be the original number of people in the group\n    x, n = symbols('x n')\n\n    # Equation 1: Original average weight = x/n\n    # Equation 2: New average weight with Aaron = (x + 45)/(n + 1) = 61\n    # Equation 3: New average weight with Aaron and Ben = (x + 45 + 71)/(n + 2) = 62\n\n    equation2 = Eq((x + 45)/(n + 1), 61)\n    equation3 = Eq((x + 45 + 71)/(n + 2), 62)\n\n    # Solving the system of equations for x and n\n    solutions = solve((equation2, equation3), (x, n))\n\n    x_value = solutions[x]\n    n_value = solutions[n]\n\n    # Calculate original average weight before Aaron and Ben joined\n    original_average = x_value / n_value\n\n    return original_average\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_taken = 2989\n\n    while total_taken > 0:\n        if white_balls >= 2:  # Ming takes two white balls\n            white_balls -= 2  # Two white balls removed\n            black_balls += 1  # One black ball added\n        elif white_balls == 1 and black_balls >= 1:  # Ming takes one white and one black ball\n            white_balls -= 1  # One white ball removed and one added back\n        elif black_balls >= 2:  # Ming takes two black balls\n            black_balls -= 1  # Two black balls removed and one black added back\n\n        total_taken -= 1\n\n    remaining_balls = white_balls + black_balls\n\n    if white_balls > 0:\n        return remaining_balls, 'white'\n    else:\n        return remaining_balls, 'black'\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(1000, 10000):\n        if \"3\" in str(i) and \"4\" in str(i) and \"5\" in str(i):\n            if i % 36 == 0:\n                ans = i\n                break\n    return ans\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    # Number of people-hours required to build the bridge\n    total_people_hours = 6 * 15\n    # Number of people needed to build the bridge in 2 hours\n    people_needed = total_people_hours / 2\n\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # since 1 meter is 100 centimeters\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30\n    sweets = 3.99\n    magazine = 2.50\n    stickers = 0.70\n    pizza = 10.99\n    orange_juice = 1.50 * 4\n\n    spendings = sweets + magazine + stickers + pizza + orange_juice\n    change = total_money - spendings\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):  # hundreds_digit cannot be 0\n        # units_digit must be hundreds_digit + 2\n        units_digit = hundreds_digit + 2\n        if units_digit <= 9:  # units_digit must be less than or equal to 9\n            for tens_digit in range(0, 10):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_han, daughter = symbols('mr_han daughter')\n    equation = Eq(mr_han + daughter, 91.2)\n    relation = Eq(mr_han, 3 * daughter)\n\n    solutions = solve((equation, relation), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    original_chocolates = remaining_after_students / (1 - 0.8)\n    return int(original_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i**2 - (i-1)**2) for i in range(1, 101, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has more votes than anyone else, she must have at least one more vote\n    # than half of the total number of votes to ensure she has more than others.\n    # We will use ceiling division since the votes are whole numbers.\n    \n    total_votes = 25\n    votes_needed = (total_votes // 2) + 1\n\n    return votes_needed\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    \n    for i in coins:\n        for j in coins:\n            for k in coins:\n                totals.add(i + j + k)\n    \n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Set up the variables\n    principal = 6000  # initial amount\n    final_amount = 8029.35  # final amount after 5 years\n    years = 5\n    x = symbols('x')\n\n    # Compound interest formula A = P(1 + r/n)^(nt), assuming n=1 for annual compounding\n    equation = Eq(principal * (1 + x / 100)**years, final_amount)\n\n    # Solve for the interest rate x\n    interest_rate = solve(equation, x)\n\n    return interest_rate[0].evalf()\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    # Number of pages that can be numbered with a single digit\n    one_digit_pages = 9  # 1-9\n\n    # Number of pages that can be numbered with two digits\n    two_digit_pages = 90 * 2  # 10-99\n\n    # Check if the 291 digits are enough to cover all the one-digit and two-digit pages\n    if 291 <= (one_digit_pages + two_digit_pages):\n        # Calculate the remaining digits after numbering all one-digit and two-digit pages\n        remaining_digits = 291 - (one_digit_pages + two_digit_pages)\n    else:\n        # Calculate the number of pages if the digits are only sufficient for one-digit pages\n        if 291 - one_digit_pages <= 0:\n            return 291\n        # Calculate the number of pages if the digits are only sufficient for two-digit pages\n        remaining_digits = 291 - one_digit_pages\n        return remaining_digits // 2 + one_digit_pages // 2\n    \n    # Number of pages that can be numbered with three digits\n    three_digit_pages = remaining_digits // 3\n\n    # Total number of pages\n    total_pages = one_digit_pages + two_digit_pages // 2 + three_digit_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chair_money = 360\n    percent_on_chairs = (chair_money / total_money) * 100\n    return percent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the total number of pages, pages read and pages unread\n    total_pages, pages_read = symbols('total_pages pages_read')\n    \n    # Create equations based on the problem statement\n    # Initial ratio of pages read to pages unread is 1:5\n    equation1 = Eq(pages_read / (total_pages - pages_read), 1 / 5)\n    # After reading 80 more pages, the pages read become 70% of the total\n    equation2 = Eq((pages_read + 80) / total_pages, 70 / 100)\n    \n    # Solve the equations for the number of pages\n    solutions = solve((equation1, equation2), (total_pages, pages_read))\n    \n    # Returning the total pages from the solution\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers CC got and y be the number of correct answers Vivi got\n    # Each correct answer gives 10 points and a wrong or skipped one gives -5 points\n    # The total number of questions they both answered is 10 for each\n    # From the problem statement, we can setup the following equations:\n    # 10x - 5(10 - x) + 10y - 5(10 - y) = 95  (Total points together)\n    # 10y - 5(10 - y) = 10x - 5(10 - x) + 15  (Vivi got 15 more points than CC)\n\n    for x in range(11):  # There are 10 questions, so the number of correct answers can be 0 to 10.\n        for y in range(11):\n            if 10*x - 5*(10 - x) + 10*y - 5*(10 - y) == 95 and (10*y - 5*(10 - y)) - (10*x - 5*(10 - x)) == 15:\n                return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Equation 1: The cost for 2 books and 3 magazines\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n\n    # Equation 2: The cost for 1 book and 1 magazine\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teacher_rooms = 3\n    total_rooms = girls_rooms + teacher_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_needed_initial = 650\n    people_final = 18\n    \n    flour_needed_final = (flour_needed_initial / people_initial) * people_final\n    \n    return flour_needed_final\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (num_adults * adult_ticket_price) + (num_children * child_ticket_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    number = \"2581953752\"\n    smallest_sum = float('inf')\n    \n    for cut1, cut2 in combinations(range(1, len(number)), 2):\n        part1 = int(number[:cut1])\n        part2 = int(number[cut1:cut2])\n        part3 = int(number[cut2:])\n        \n        total_sum = part1 + part2 + part3\n        smallest_sum = min(smallest_sum, total_sum)\n    \n    return smallest_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters_in_meter = 1000\n    ans = 7000000 / millimeters_in_meter\n    return ans\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n    \n    minimum_dividend = (quotient * minimum_divisor) + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_now, mother_age_now = symbols('melissa_age_now mother_age_now')\n\n    equation1 = Eq(mother_age_now, 32 + (melissa_age_now - 8))\n    equation2 = Eq(mother_age_now, 3 * melissa_age_now)\n\n    solutions = solve((equation1, equation2), (melissa_age_now, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    total_corners_contribution = corners * 1  # As each corner is shared by two sides\n    total_side_contribution = (flowers_per_side - 2) * 4  # As corner flowers are counted once\n\n    total_flowers = total_side_contribution + total_corners_contribution\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    count_even_factors = len(even_factors)\n    return count_even_factors\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's designate the two numbers as x and y\n    x, y = symbols('x y')\n\n    # According to the problem x + y = 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # Oliver accidentally shifted the decimal point in y (assuming y < x),\n    # so he actually added x + y/10, getting the result as 5.87\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the two equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The difference between the two numbers times 100\n    difference = 100 * abs(solutions[x] - solutions[y])\n\n    return difference\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    longest = max(piece1, piece2, piece3)\n    shortest = min(piece1, piece2, piece3)\n\n    return longest - shortest\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for members of each club\n    sc, lc, mc = symbols('sc lc mc')\n\n    # Define equations based on the ratios provided\n    equation1 = Eq(9 * lc, 10 * sc)\n    equation2 = Eq(5 * mc, 7 * lc)\n    equation3 = Eq(sc + lc + mc, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sc, lc, mc))\n\n    # Calculate the difference in members between the math club and literature club\n    member_difference = solutions[mc] - solutions[lc]\n\n    return member_difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Let's denote the original amount of money as 'x'.\n    # Li Yan spent 1/3 of x on a book, so she spent x/3.\n    # The remainder is 2/3 of x.\n    # Then, she spent 1/2 of the remainder on a bag, which means she spent (1/2) * (2/3) * x = 1/3 * x on the bag.\n    # Therefore, the cost of the book and the bag is (x/3 + x/3) which equals 2/3 * x.\n    # We know that the book and the bag cost ＄132 altogether, so we can write an equation:\n    # 2/3 * x = 132\n    # Now, we solve the equation for x to find the original amount of money Li Yan had.\n\n    original_amount = (132 * 3) / 2\n    return original_amount\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # The worst case scenario for picking the same color is assuming that we pick every color\n    # other than the one we're completing. We're aiming for 3 of the same color.\n    \n    # Let's find the worst case for each color:\n    # For blue (4 blue marbles), we take all 3 yellow and 1 red first, then we need to take 3 blue.\n    # Total = 3 (yellow) + 1 (red) + 3 (blue) = 7\n\n    # For yellow (3 yellow marbles), the worst case is taking all 4 blue and 1 red, then 3 yellow.\n    # Total = 4 (blue) + 1 (red) + 3 (yellow) = 8\n\n    # For red (1 red marble), we need to take all blue and yellow marbles first to be sure to get 3 reds.\n    # Since we only have 1 red, this isn't possible. We only need to ensure that Benny doesn't get 3 of\n    # either blue or yellow before taking the red. \n\n    # Therefore, the answer doesn't depend on red at all, as you cannot have 3 red marbles.\n    # We compare the other two scenarios. The bottleneck is getting 3 yellow marbles, which requires 8 picks.\n\n    min_picks = 8\n    return min_picks\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of a volleyball as 'v'\n    # Then the price of a basketball would be 'v + 10'\n    v = symbols('v')\n    basketball_price = v + 10\n\n    # According to the problem:\n    # Equation: 5 * (v + 10) + 6 * v = 325\n\n    equation = Eq(5 * basketball_price + 6 * v, 325)\n    # Solve for the price of a volleyball\n    volleyball_price = solve(equation, v)[0]\n    # Calculate the price of a basketball using the price of a volleyball\n    basketball_price = volleyball_price + 10\n\n    return basketball_price\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    length_of_pattern = len(pattern)\n    \n    # Find how many complete patterns are there\n    complete_patterns = 47 // length_of_pattern\n    \n    # Sum the digits of one complete pattern\n    sum_of_one_pattern = sum(int(digit) for digit in pattern)\n    \n    # Total sum for all complete patterns\n    total_sum = sum_of_one_pattern * complete_patterns\n    \n    # Add the remainder\n    for i in range(47 % length_of_pattern):\n        total_sum += int(pattern[i])\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine = cost_per_bottle * 9\n    return cost_for_nine\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of boys as 'b' and number of girls as 'g'.\n    b, g = symbols('b g')\n\n    total_pupils = 40\n    average_pencils = 35\n\n    # Equation for the total number of pencils (average * total number of pupils)\n    equation_total_pencils = Eq(b * 20 + g * 60, average_pencils * total_pupils)\n\n    # Since we know that total pupils = boys + girls\n    equation_total_pupils_number = Eq(b + g, total_pupils)\n\n    # Now we solve the linear equations\n    solutions = solve((equation_total_pencils, equation_total_pupils_number), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct_jack in range(26):\n        incorrect_jack = 25 - correct_jack\n        score_jack = 4 * correct_jack - incorrect_jack\n        for correct_johnson in range(correct_jack):\n            incorrect_johnson = 25 - correct_johnson\n            score_johnson = 4 * correct_johnson - incorrect_johnson\n            if score_jack == 61 and score_johnson == 61:\n                unanswered_jack = incorrect_jack - (25 - correct_jack - correct_johnson)\n                return unanswered_jack\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's a 2-digit number\n        for b in range(0, 10):\n            ab = 10*a + b\n            ba = 10*b + a\n            if 8*ab == 3*ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # cost parameters\n    base_price = 4.50\n    discount = 0.20\n    shipping_handling = 12\n    bill = 120\n\n    # maximum base cupcakes (with no discount)\n    max_base_cupcakes = (bill - shipping_handling) / base_price\n    \n    # if base cupcakes are >= 20 then there's no additional cupcakes\n    if max_base_cupcakes <= 20:\n        return max_base_cupcakes\n    \n    # price per additional cupcake after the discount\n    discounted_price = base_price * (1 - discount)\n    \n    # number of cupcakes with discount applied\n    additional_cupcakes = (bill - shipping_handling - (20 * base_price)) / discounted_price\n\n    # total cupcakes ordered\n    total_cupcakes = 20 + additional_cupcakes\n    \n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + goats, 440)\n    equation2 = Eq(pigs + 2 * goats, 280)\n    \n    solutions = solve((equation1, equation2), (pigs, goats))\n    \n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds_to_pence = 1.28 * 100\n    pence = 57\n    total_pence = pounds_to_pence + pence\n    pounds = total_pence / 100\n    return round(pounds, 2)\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 * 3\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) == int(str(number) + '1') / 3:\n            return number\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    place_from_back = 12\n    total_people = people_in_front + place_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x: number of days the lazy one would take to paint the house on his own\n    x = symbols('x')\n    \n    # Equation representing combined work of both decorators\n    equation = Eq(1/10 + 1/x, 1/6)\n    \n    # Solve the equation for x\n    days = solve(equation, x)[0]\n\n    return days\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    \n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 45) / 3, 2 * x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_sequence = (n * (n + 1)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Each brother has at least two books\n    for x1 in range(2, 11):\n        for x2 in range(2, 11):\n            for x3 in range(2, 11):\n                if x1 + x2 + x3 == 10:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure we have 4 marbles of different colours, in the worst case scenario,\n    # we have to pick all marbles of one colour, then all the marbles of a second colour,\n    # and then all the marbles of a third colour.\n    # Finally, we are guaranteed to pick a marble of the fourth colour\n    # with just one more draw.\n    \n    # We take three largest amounts of marbles (since those are worst case scenarios for the first 3 picks)\n    first_three_colours = [12, 9, 8]\n    \n    # Now, we add up all marbles from the three colours and add 1 for the guaranteed fourth colour marble\n    min_marbles_for_four_colours = sum(first_three_colours) + 1\n\n    return min_marbles_for_four_colours\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Since the number is divisible by 7, we need to find the missing digit that makes it divisible.\n    # We use the divisibility rule for 7: take the last digit, double it, and subtract it from the rest\n    # of the number. Continue to do this until you have a small enough number to check for divisibility.\n    \n    # We can ignore the repeating pattern of the number, as it does not help us in using the divisibility\n    # rule for 7. We need to consider only the last part of the number \"...55[square]99\".\n    # Let the middle digit be 'd', which we will find out. The number will look like \"...55d99\".\n\n    # Start checking with each digit from 0 to 9 for 'd'\n    for d in range(10):\n        # Form the number string as this part will determine the divisibility by 7\n        num_str = \"55\" + str(d) + \"99\"\n\n        # We know the number is a 39-digit number with 19 5's and 19 9's.\n        # The rest of the number (\"55...99\") will repeat the divisibility property of \"55d99\"\n        # Divisibility by 7 doesn't depend on how many times the pattern repeats,\n        # so we just need to check if \"55d99\" is divisible by 7.\n        num = int(num_str)\n        \n        # Check if this number is divisible by 7\n        if num % 7 == 0:\n            return d\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_read_first_day / fraction_of_book\n    return total_pages\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    return 131 - (31 - 10)\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place (1-9)\n        for tens in range(0, 10):   # tens place (0-9)\n            for ones in range(0, 10):  # ones place (0-9)\n                if tens == 2 * hundreds and hundreds == ones + 1 and hundreds + tens + ones == 15:\n                    return 100 * hundreds + 10 * tens + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    first = 16  # The first two-digit number with a unit digit of 6\n    last = 96   # The last two-digit number with a unit digit of 6\n    step = 10   # The step from one such number to the next\n\n    num_numbers = ((last - first) // step) + 1\n\n    return num_numbers\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    more_than_last_time = 14.4\n    last_purchase = current_purchase - more_than_last_time\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    ans = 73 * 42\n    return ans\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote Jason's storybooks as J and Anthea's storybooks as A.\n    # According to the problem J = A + 4 after Jason gives 4 books to Anthea.\n    # Also, Jason would have 30 - 4 storybooks after giving away 4.\n    # So, J - 4 = A\n    # And since Jason originally had 30 storybooks, J = 30\n    # So, we can write 30 - 4 = A\n    # Thus A = 30 - 4\n    A = 30 - 4\n\n    # Now, we have to find the difference between Jason's and Anthea's storybooks originally.\n    # The difference will be J - A which is 30 - A.\n    difference = 30 - A\n    \n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    # The pattern will repeat every certain number of terms since we are finding the remainder when divided by 3.\n    # We'll start with the given terms.\n    first = 3 % 3\n    second = 10 % 3\n\n    # Initialize terms to store the pattern of remainders.\n    terms = [first, second]\n\n    # As the pattern is periodic (mod 3), it will repeat eventually.\n    # We will continue until we find a repeating pattern.\n    while True:\n        next_term = (terms[-1] + terms[-2]) % 3\n        # Check for pattern repetition by seeing if these new terms are the same as the first two terms.\n        if len(terms) >= 2 and next_term == terms[1] and terms[-1] == terms[0]:\n            break\n        else:\n            terms.append(next_term)\n\n    # The pattern repeats every len(terms) - 1 terms (since the last number will always be the same as the first one).\n    pattern_length = len(terms) - 1\n\n    # Find the position of the 2023rd term in the repeating pattern.\n    position_in_pattern = (2023 % pattern_length) - 1\n\n    # Return the remainder of the term at that position when divided by 3.\n    ans = terms[position_in_pattern]\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    # Create equations based on the problem statement\n    equation = Eq((208 - magic_number), 9 * (136 - magic_number))\n\n    # Solve the equation\n    solved = solve(equation, magic_number)\n\n    # There should be only one solution\n    return solved[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students = symbols('students')\n\n    # If each student is given $5, there will be $3 left.\n    equation1 = Eq(5 * students + 3, 5 * (students + 1))\n\n    # If each student is given $4, there will be $9 left.\n    equation2 = Eq(4 * students + 9, 4 * (students + 1) + 5)\n\n    students_count = solve((equation1, equation2), (students))\n\n    return students_count[students]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Alan to Bella's ratio\n    equation1 = Eq(alan / bella, 4 / 3)\n\n    # Alan has £20 more than Chloe\n    equation2 = Eq(alan, chloe + 20)\n\n    # The total sum of money\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_cost = 7.85\n    bar_cost = 1.83\n    total_cost = box_cost + (2 * bar_cost)\n    payment = 20\n    change = payment - total_cost\n    return change\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily is on the left end and her mother on the right end, so we have 3 positions left to fill\n    # Only the three other family members need to be arranged in these 3 positions.\n    # The number of ways to arrange n distinct objects in n positions is n!\n    # So, we need to calculate 3!\n    return factorial(3)\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    from sympy import symbols, Eq, solve, Sum\n\n    n = symbols('n', integer=True) # number of rows\n    a_1 = 7  # First term (first row seats)\n    d = 4  # Common difference (seats increase per row)\n\n    # a_n = a_1 + (n - 1) * d -> nth term of arithmetic sequence, which is 99 seats in this case\n    a_n = 99  # Last term (last row seats)\n    # Equation for nth term\n    eq = Eq(a_1 + (n - 1) * d, a_n)\n    # Solve for n\n    num_rows = solve(eq, n)[0]\n\n    # Sum of arithmetic series: S_n = n/2 * (a_1 + a_n)\n    total_seats = Sum((a_1 + (i - 1) * d), (i, 1, num_rows)).doit()\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):\n        if (num - 4) % 5 == 0 and (num - 4) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_values_initial = 3\n\n    sum_initial = average_initial * num_values_initial\n    sum_final = average_final * (num_values_initial + 1)\n\n    fourth_number = sum_final - sum_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    # Applying the formula 1^2 + 2^2 + 3^2 + ... + n^2 = n(n + 1)(2n + 1) / 6\n    sum_of_squares_n = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculating 1^2 + 2^2 + 3^2 + ... + 4^2 to subtract from the total sum\n    # because we need the sum from 5^2 to 15^2, not 1^2 to 15^2\n    m = 4\n    sum_of_squares_m = m * (m + 1) * (2 * m + 1) // 6\n\n    # The actual sum we want is the difference between the two\n    correct_answer = sum_of_squares_n - sum_of_squares_m\n\n    # Check if Kimmy's answer is correct\n    kimmy_answer = 1240\n    is_kimmy_correct = (correct_answer == kimmy_answer)\n    \n    return correct_answer if not is_kimmy_correct else None\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -2\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        total_points = correct_points * correct_answers + incorrect_points * incorrect_answers\n        if total_points == 51:\n            return correct_answers\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total money Amy had initially\n    x = symbols('x')\n    \n    # Amy spent 6/11 of her money and an additional $5\n    remaining_after_highlighters = x - (6/11)*x - 5\n    \n    # Then she spent 3/10 of the remainder and an additional $12 on fountain pens\n    remaining_after_pens = remaining_after_highlighters - (3/10)*remaining_after_highlighters - 12\n    \n    # She finally has $30 left\n    equation = Eq(remaining_after_pens, 30)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v represent the total number of visitors at the fair.\n    v = symbols('v')\n    \n    # According to the problem, we have two fractions of visitors: 3/5 of them children, 1/2 of the remaining are men.\n    # We can say that 3/5 of the visitors are children (c) and the children outnumber men (m) by 140.\n    # So, the equation for men will be m = 1/2 * (1 - 3/5) * v and for children c = 3/5 * v.\n    # Therefore, the equation c = m + 140 becomes: 3/5 * v = 1/2 * (2/5 * v) + 140\n    equation = Eq((3/5) * v, (1/2) * (2/5) * v + 140)\n\n    # We solve the equation for v to find the total number of visitors.\n    visitors = solve(equation, v)\n\n    return visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the initial number of stickers that Sam had\n    # Let p be the initial number of stickers that Peter had\n    s, p = symbols('s p')\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(s, p + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    sam_gave = 0.20 * s\n    # Peter gave 25% of his stickers to Sam, after receiving stickers from Sam\n    peter_gave = 0.25 * (p + sam_gave)\n    \n    # The final number of stickers Sam and Peter had after the exchange\n    sam_final = s - sam_gave + peter_gave\n    peter_final = p + sam_gave - peter_gave\n\n    # In the end, Sam has 96 stickers more than Peter\n    equation2 = Eq(sam_final - peter_final, 96)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    \n    # Current age ratio\n    equation1 = Eq(sally/gillian, 2/7)\n    \n    # Age ratio after 15 years\n    equation2 = Eq((sally + 15)/(gillian + 15), 1/2)\n    \n    solutions = solve((equation1, equation2), (sally, gillian))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n\n    # Olivia subtracted an incorrectly assumed subtrahend of 70 and got 30\n    # So, the minuend (the number she had before subtracting) would be\n    minuend = incorrect_subtrahend + incorrect_result\n    \n    # The correct subtrahend which Olivia should have subtracted is 75\n    correct_subtrahend = 75\n    \n    # Thus, the correct result should be the difference between the minuend and the correct subtrahend\n    correct_result = minuend - correct_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    num_customers = 40\n    pen_interval = 3\n    file_interval = 4\n    \n    count = 0\n    for i in range(1, num_customers + 1):\n        if i % pen_interval == 0 and i % file_interval == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    difference = 5\n    lily_time = hook_time - difference\n    return lily_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_cake = 4\n    apples_per_kg = 9\n    total_kg_apples_used = 8\n\n    total_apples_used = total_kg_apples_used * apples_per_kg\n    cakes_baked = total_apples_used // apples_per_cake\n\n    return cakes_baked\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible 2-digit numbers from the digits 1 through 8\n    all_two_digit_numbers = [''.join(p) for p in permutations('12345678', 2)]\n    possible_numbers = []\n    \n    # Find all possible numbers based on the hints\n    # In the smallest number, the ones digit is twice the tens digit\n    smallest = [num for num in all_two_digit_numbers if int(num[1]) == 2 * int(num[0])]\n    \n    # In the largest number, the sum of ones and tens digits is 9\n    largest = [num for num in all_two_digit_numbers if int(num[0]) + int(num[1]) == 9]\n    \n    # In the second largest number, the tens digit is 5 more than the ones digit\n    second_largest = [num for num in all_two_digit_numbers if int(num[0]) == 5 + int(num[1])]\n    \n    # There is only 1 odd number among these 4 numbers\n    # An odd number must end in an odd digit\n    for number in all_two_digit_numbers:\n        if (number in smallest or number in largest or number in second_largest) and int(number[1]) % 2 == 1:\n            possible_numbers.append(number)\n    \n    # Discard the numbers that have already been used\n    for number in smallest + largest + second_largest:\n        if number in possible_numbers:\n            possible_numbers.remove(number)\n    \n    # Since we know there is only one odd number among these four,\n    # and the numbers cannot have repeating digits, we can deduce the\n    # list of possible numbers for the second smallest by elimination\n    remaining = set('12345678')\n    for num in smallest + largest + second_largest + possible_numbers:\n        remaining.difference_update(set(num))\n    \n    # The second smallest number must use the remaining digits\n    remaining = ''.join(sorted(remaining))\n    # Since all digits are unique, and we have one smallest number and one odd number\n    # The second smallest number must start from the smallest non-used even digit (as the tens place)\n    second_smallest = [num for num in all_two_digit_numbers if num.startswith(remaining[0])]\n    \n    # Find second smallest number from the remaining options\n    second_smallest_number = sorted(set(second_smallest).intersection(set(possible_numbers)))[0]\n    \n    return int(second_smallest_number)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Multiply both sides of the equation by 9 to isolate the square box value\n    ans = 35 * 9\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    \n    # The circumference can be calculated by multiplying the distance \n    # between seeds by the number of seeds, since the full circle is formed\n    circumference = distance_between_seeds * number_of_seeds\n    \n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of papers that were cut into three parts.\n    # Each paper that is cut into three parts adds 2 more pieces to the total count.\n    # Total pieces before cutting is 10, after cutting is 16\n    # Equation: 10 - x (pieces not cut) + 2x (additional pieces from cut papers) = 16\n    # Simplified equation: x = 16 - 10\n    # Solution:\n    x = 16 - 10\n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_total = 14\n    \n    total_score_all = (total_boys + total_girls) * average_total\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n    \n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let the original square side be x\n    # Then the original number of students is x^2 + 9\n    # And the larger square is (x + 1)^2, requiring x^2 + 9 + 16 students\n    # Set up the equation (x + 1)^2 = x^2 + 9 + 16\n    # Solve for x to find the original square side\n    # Once we have x, we can calculate x^2 + 9 for the number of students\n\n    x = 1\n    while True:\n        if (x + 1) ** 2 == x ** 2 + 9 + 16:\n            break\n        x += 1\n\n    return x ** 2 + 9\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Jolie baked\n    x = symbols('x')\n\n    # She threw away 3/5 of the cookies\n    # She then sold 75% of the remaining cookies\n    # The number of cookies burnt (3/5*x) was 42 more than the cookies sold (75% of 2/5*x)\n    equation = Eq((3/5)*x - 0.75*(2/5)*x, 42)\n\n    # Solve for x\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    cost_for_250g = (cost_per_100g / 100) * 250\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # We loop through all possible values for the number having 9 in the units column\n    for num in range(10, 10000):  # arbitrarily chosen upper limit of 10000 for this search\n        if int(str(num)[-1]) != 9:  # if the units column is not 9, continue\n            continue\n        new_num = int(str(num)[-1] + str(num)[:-1])  # move the last digit (9) to the front\n        if new_num == 4 * num:  # check if the new number is four times the special number\n            return num  # special number found\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Each of the first 5 envelopes contains the same number of postcards.\n    # Let's assume the number of postcards in each of the first 5 envelopes is x.\n    # Thus, 5x = 50\n    x = 50 / 5\n    \n    # One week later, Lily divides some new postcards into another 2 envelopes, each with x postcards.\n    # Let the number of new postcards be y.\n    # Therefore, 2x = y\n    \n    # The total number of postcards after Lily receives the new postcards is (50 + y).\n    # Since y = 2x and we know 5x = 50, we have 2x = 2 * (50 / 5) = 20\n    y = 2 * x\n    \n    # Therefore, the total number of postcards is 50 (original) + y (new)\n    total_postcards = 50 + y\n    \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Since Harry has exactly 2 coins of each value,\n    # and the total amount is £2.50, which is 250 pence,\n    # the possible values for the coins must sum up to half of 250 pence,\n    # which is 125 pence.\n    # Potential coins in UK currency: 1p, 2p, 5p, 10p, 20p, 50p,\n    # £1 (100p), and £2 (200p) - not considering the 200p since \n    # it cannot be part of the change because Harry needs pairs \n    # of coins and 2 * £2 would exceed the total change.\n    \n    # Now, we iterate through the coins, trying to find the smallest coin.\n    for coin in [1, 2, 5, 10, 20, 50, 100]:\n        if (125 - coin) % (2 * coin) == 0: # If after taking one coin, the rest can be evenly distributed\n            return coin\n    \n    return None  # If no solution found, although there has to be one given the problem constraints\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1000 + 70 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    # Starting from the smallest 2-digit number, 10\n    for num in range(10, 100):\n        # Check if the number has a remainder of 1 when divided by 4 and 7\n        if num % 4 == 1 and num % 7 == 1:\n            # Return the first number that satisfies both conditions\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    import math\n    # Laura takes the first position: 1 way\n    # 5 positions left for other 5 students, these can be arranged in 5! ways\n    ways_without_rita = math.factorial(5)\n    # Rita can take any of these 5 positions, but not the last one\n    # So, Rita has 4 choices to take a place\n    # The remaining 4 students can be arranged in the remaining 4 places in 4! ways\n    ways_with_rita = 4 * math.factorial(4)\n    # Multiply ways without and with Rita to get the total number of ways\n    total_ways = ways_without_rita * ways_with_rita\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    result = (a + b) * a\n    return result\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount = 0.50\n    additional_discount = 0.20\n    \n    # Calculate initial discount\n    discounted_price = regular_total_price * (1 - discount)\n    \n    # Calculate additional discount for buying at least 5 items\n    final_price = discounted_price * (1 - additional_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    from fractions import Fraction\n\n    sold_apples = 88\n    fraction_sold = Fraction(4, 7)\n\n    total_apples = sold_apples / fraction_sold\n\n    return total_apples\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time difference between Singapore and London\n    time_difference = timedelta(hours=7)\n\n    # Define the departure time in Singapore\n    departure_singapore = datetime.strptime('24/08 05:00', '%d/%m %H:%M')\n\n    # Define the landing time in London\n    landing_london = datetime.strptime('24/08 11:00', '%d/%m %H:%M')\n\n    # Convert the landing time in London to Singapore time\n    landing_singapore = landing_london + time_difference\n\n    # Calculate the flight duration\n    flight_duration = landing_singapore - departure_singapore\n\n    return flight_duration.seconds // 3600  # Convert the duration to hours\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let d be the total distance between towns A and B\n    # Jerry travels 3/7 of the distance, so Kevin travels 4/7 of the distance\n    # The ratio of the distances traveled by Jerry and Kevin is 3:4\n    # The speeds of Jerry and Kevin must also have a ratio of 3:4, since they start at the same time and meet at the same time\n    # Kevin's speed is 80 mph, so Jerry's speed is 3/4 of Kevin's speed\n    \n    # Calculate Jerry's speed\n    jerry_speed_ratio = 3 / 4\n    kevin_speed = 80  # in mph\n    jerry_speed = jerry_speed_ratio * kevin_speed\n\n    # From the problem statement, we know that in each hour, Jerry travels 2/5 of the total distance\n    # Since speed is distance over time, we can equate the two expressions for Jerry's speed\n    # So, Jerry's speed = (2/5) * total distance / 1 hour\n    # Simplify the expression to find the total distance\n    # jerry_speed = (2/5) * d (where d is the total distance)\n    \n    # Now, we can find d by solving the equation for d\n    d = 5 * jerry_speed / 2\n\n    return d\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    \n    # 40 pupils in total\n    girls = 40 - boys\n\n    # Average number of pencils for boys and girls\n    avg_pencils = 35\n\n    # Total pencils in the class is average multiplied by number of pupils\n    total_pencils = avg_pencils * 40\n\n    # Equation based on average pencils owned\n    equation = Eq(20 * boys + 60 * girls, total_pencils)\n\n    # Solve for number of boys\n    solutions = solve((equation, Eq(girls, 40 - boys)), boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability of Sally winning a game\n    p_win = 0.3\n    # Probability of a draw\n    p_draw = 0.1 \n    # Probability of Sally losing a game (since there are only three outcomes)\n    p_lose = 1 - p_win - p_draw\n\n    # Probability that Sally wins the first game and loses the second\n    p_win_lose = p_win * p_lose\n\n    # Probability that Sally loses the first game and wins the second\n    p_lose_win = p_lose * p_win\n\n    # The total probability that Sally wins exactly one of the two games\n    p_exactly_one_win = p_win_lose + p_lose_win\n\n    return p_exactly_one_win\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 999):  # 999 is an arbitrary upper limit for a practical search\n        if lollipops % 4 == 32 % 4 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # Given numbers\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Calculate differences between the numbers\n    diff_ab = b - a\n    diff_bc = c - b\n    diff_ca = a - c\n\n    # Find the greatest common divisor (GCD) of the differences\n    # This GCD will be our maximum D, because the remainder R for D will be the same\n    # when dividing each of the given numbers.\n    from math import gcd\n    max_D = gcd(gcd(diff_ab, diff_bc), diff_ca)\n\n    # Since they give the same remainder when divided by D, we can use any to find R.\n    R = a % max_D\n\n    # The largest possible value of D + R\n    result = max_D + R\n    return result\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # The decimal expansion of 1/13 is repeating every 6 digits after the decimal point: 076923\n    # So to find the digit in the 2012th decimal place, find the remainder of 2012 divided by 6\n    repeating_sequence = \"076923\"\n    remainder = 2012 % 6\n    \n    # If the remainder is 0, we need to take the last digit of the repeating sequence\n    if remainder == 0:\n        digit = repeating_sequence[-1]\n    else:\n        digit = repeating_sequence[remainder - 1]\n\n    return int(digit)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # All 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e be Eddi's cards and w be Wiya's cards\n    e, w = symbols('e w')\n\n    # e / w = 8 / 7\n    equation1 = Eq(e / w, 8 / 7)\n\n    # (e - 4) / (w + 4) = 18 / 17\n    equation2 = Eq((e - 4) / (w + 4), 18 / 17)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, w))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    rabbit_rest_time = 215  # minutes\n    race_distance = 6990  # meters\n    \n    # Calculate distance covered by rabbit before rest\n    rabbit_distance_before_rest = rabbit_speed * 10  # meters\n    \n    # Calculate time taken by turtle to finish the race\n    turtle_race_time = race_distance / turtle_speed  # minutes\n    \n    # Calculate time taken by the rabbit to finish the race including rest\n    rabbit_race_time = (rabbit_distance_before_rest / rabbit_speed) + rabbit_rest_time + ((race_distance - rabbit_distance_before_rest) / rabbit_speed)  # minutes\n    \n    # Determine the winner and the lead\n    if rabbit_race_time < turtle_race_time:\n        winner = \"Rabbit\"\n        # Calculate lead by rabbit when rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_race_time\n        lead = race_distance - turtle_distance_when_rabbit_finishes\n    else:\n        winner = \"Turtle\"\n        # Calculate lead by turtle when turtle finishes\n        rabbit_running_time_after_rest = turtle_race_time - 10 - rabbit_rest_time\n        rabbit_distance_after_rest = rabbit_speed * rabbit_running_time_after_rest\n        lead = race_distance - (rabbit_distance_before_rest + rabbit_distance_after_rest)\n    \n    return winner, lead\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students in Class B\n    # Then Class A has x + 47 students\n    # When y students are moved from Class A to Class B, the new situation will be:\n    # Class A: (x + 47) - y students\n    # Class B: x + y students\n    # We want Class A to have 9 more students than Class B after moving y students, that is:\n    # (x + 47) - y = x + y + 9\n    # Solving the equation for y gives us:\n    # 47 - 9 = 2 * y\n    # y = (47 - 9) / 2\n    y = (47 - 9) // 2\n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    first_piece = 5.3\n    second_piece = 3.8\n    \n    third_piece = total_length - first_piece - second_piece\n    \n    return third_piece\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            product = A * B * C\n            max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_in_one_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the numerator part\n    num_1 = Fraction(2017, 1) + Fraction(7, 8)\n    num_2 = Fraction(3, 1) + Fraction(2, 3)\n    numerator_first_term = num_1 * num_2\n\n    num_3 = Fraction(2016875, 1000)\n    num_4 = Fraction(11, 3)\n    numerator_second_term = num_3 * num_4\n\n    numerator = numerator_first_term - numerator_second_term\n\n    # Calculate the denominator part\n    den_1 = Fraction(2017, 1) + Fraction(1, 3)\n    den_2 = Fraction(2016875, 1000)\n    denominator = (den_1 - den_2) * 17\n\n    # Compute the fraction expression\n    fraction_expr = numerator / denominator\n    \n    # Multiply by 3 23/32\n    final_multiplier = Fraction(3, 1) + Fraction(23, 32)\n    ans = fraction_expr * final_multiplier\n\n    return float(ans)\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # We have two equations:\n    # y - x = 57 (difference)\n    # x + y = 77 (sum)\n    # We can solve for x by combining the two equations:\n    # 2x = 77 - 57\n    # 2x = 20\n    # x = 10\n    smaller_number = (77 - 57) / 2\n    return smaller_number\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    total_people = 480\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(adults + girls + boys, total_people)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n    for i in range(1, 1000):\n        digits = str(i)\n        if all(int(digit) % 2 != 0 for digit in digits):\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Iterate over possible hundreds, tens and units digits to form a 3-digit number\n    for hundreds in range(1, 10):  # hundreds digit can be from 1 to 9\n        for tens in range(10):      # tens digit can be from 0 to 9\n            for units in range(1, 10, 2):  # units digit must be an odd number, so from 1 to 9, stepping by 2\n                if hundreds + tens + units == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # Each pair has 2 avocados\n    cost_per_avocado_pence = (total_cost_pounds * 100) / total_avocados\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Calculate the sum frequencies of rolling two 6-sided dice\n    frequencies = Counter(a + b for a in range(1, 7) for b in range(1, 7))\n\n    # Find the sums with maximum frequency\n    most_likely_sums = [sum_val for sum_val, freq in frequencies.items() if freq == max(frequencies.values())]\n\n    # Assuming the question wants just one answer, we return the first mode found\n    return most_likely_sums[0]\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    # This variable holds the total number of digits printed so far.\n    digits_printed = 0\n    # This variable counts the number of pages.\n    page = 0\n    # This loop will keep running until we've printed all 339 digits.\n    while digits_printed < 339:\n        page += 1\n        # The number of digits in the current page number.\n        digits_in_page = len(str(page))\n        # Add the number of digits of the current page to the total.\n        digits_printed += digits_in_page\n    # The final page number is the answer.\n    return page\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import factorint, divisors\n    count = 0\n    \n    # Start from 15, as the number should be a multiple of 15\n    # 15 factors imply the 15th multiple which has exactly 15 divisors\n    for i in range(15, 1000000, 15):  # We iterate with the step of 15 to ensure multiples of 15\n        factors = divisors(i)\n        if len(factors) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32_33 = pow(32, 33, 10)  # The last digit of 32^33\n    last_digit_22_29 = pow(22, 29, 10)  # The last digit of 22^29\n    \n    ans = (last_digit_32_33 - last_digit_22_29) % 10\n    return ans\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of rhinos, d be the number of deer, and o be the number of ostriches.\n    r, d, o = symbols('r d o')\n\n    # The number of rhinos is equal to the number of deer, so r = d. Heads: r + d + o = 28.\n    equation1 = Eq(r + r + o, 28)\n    # Legs: rhinos and deer have 4 legs each, ostriches have 2 legs. Total legs: 4r + 4d + 2o = 88.\n    equation2 = Eq(4 * r + 4 * r + 2 * o, 88)\n\n    # Solving for r, d, and o.\n    solutions = solve((equation1, equation2), (r, o))\n\n    # Number of rhinos.\n    return solutions[r]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # For one square table, 3 people can sit on each side.\n    people_per_square_table = 3 * 4\n    \n    # For eight tables in a row, we remove the shared sides:\n    # Each table in the middle loses 2 sides and each table on the end loses 1 side.\n    # So we subtract 2 * (8 - 2) for the tables in the middle\n    # and 2 for the tables on the ends.\n    people_for_middle_tables = people_per_square_table - 2 * (8 - 2)\n    people_for_end_tables = people_per_square_table - 2\n\n    # The total maximum number of people is calculated by:\n    # Adding the people that can sit on the 6 middle tables and the 2 end tables.\n    max_people = people_for_middle_tables * 6 + people_for_end_tables * 2\n    \n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote:\n    # a = Andrew's marbles\n    # b = Boris's marbles\n    # j = Jeffery's marbles\n    # x = Xavier's marbles\n    # m = average of Boris, Jeffery, and Xavier's marbles\n    a, b, j, x, m = symbols('a b j x m')\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier.\n    equation1 = Eq(a, m - 30)\n\n    # Xavier has thrice as many marbles as Andrew.\n    equation2 = Eq(x, 3 * a)\n    \n    # The average m is the sum of Boris, Jeffery, and Xavier's marbles divided by 3.\n    equation3 = Eq(m, (b + j + x) / 3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, j, x, m))\n\n    # Since the question asks for Boris and Jeffery's marbles, sum them up.\n    bj_marbles = solutions[b] + solutions[j]\n\n    return bj_marbles\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for n in range(1, 100):  # Search within a reasonable limit\n        students = (2*n + 1)**2  # Total number of persons in odd layers\n        teachers = (2*n)**2      # Total number of persons in even layers\n        if students - teachers == 52:\n            return students + teachers  # Total number of persons\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # 2-digit A\n        for B in range(1000, 10000):  # 4-digit B\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of apples be 'a' and oranges be 'o'\n    a, o = symbols('a o')\n\n    # Originally, Danny bought 5/7 as many apples as oranges\n    equation1 = Eq(a, (5/7) * o)\n\n    # After buying 12 more oranges, he had 2/3 as many apples as oranges\n    equation2 = Eq(a, (2/3) * (o + 12))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # 8^2 is already present in the equation, we need to find the value that goes in the box.\n    # The value in the box when multiplied by 8^2 should give us 8 * 80 * 100\n    # We can rewrite the expression as 8^2 * x = 8 * (8 * 10 * 10)\n    # Simplifying the right-hand side we get 8^2 * x = 8^2 * 10 * 10\n    # We can now see that x must be 10 * 10 which is 100.\n    \n    ans = 100  # The value that completes the expression\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variables x, y, z be symbols\n    x, y, z = symbols('x y z', integer=True)\n    \n    # Create the equation based on the given complex fraction\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Solve the equation for the variables\n    sols = solve(equation, (x, y, z))\n    \n    # Find the set of solutions where x, y, z are all distinct\n    for sol in sols:\n        if isinstance(sol, tuple) and len(set(sol)) == 3:\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    endpoint = 10  # Eddie stops at the 10 o'clock position after counting to 30\n    total_count = 30  # Eddie counts to 30\n    clock_numbers = 12  # There are 12 numbers on the clock\n    starting_point = (endpoint - (total_count % clock_numbers)) % clock_numbers\n\n    # If starting at 12, we set the value to 12 instead of 0\n    if starting_point == 0:\n        starting_point = clock_numbers\n\n    return starting_point\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation representing the scenario after selling x kg from each\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Returning the amount of oil sold from each bucket\n    return solution[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_amount = 131112\n    num_people = 9\n\n    amount_per_person = total_amount // num_people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # We are looking for a number 'n' such that\n    # n % 5 == 1, n % 6 == 1, and n % 7 == 1\n    # which can be written as congruences:\n    # n ≡ 1 (mod 5), n ≡ 1 (mod 6), n ≡ 1 (mod 7)\n    \n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    # Using Chinese Remainder Theorem to solve the congruences\n    n, _ = solve_congruence(*congruences)\n    \n    # n is the smallest number that satisfies the congruences but we need three-digit number\n    while n < 100:\n        n += 5 * 6 * 7  # Increase by the least common multiple of 5, 6, and 7 until we get a three-digit number\n    \n    return n\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    # Solve the system of equations\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - (31 - a)\n    \n    # Check if the numbers are prime\n    if isprime(a) and isprime(b) and isprime(c):\n        ans = a * b * c\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # Convert time to hours\n    speed_to_park = 5  # Speed from home to park in km/h\n    speed_back_home = 4  # Speed from park to home in km/h\n\n    # Let the distance between home and park be x km.\n    # Time to park = distance/speed to park = x/5\n    # Time back home = distance/speed back home = x/4\n    # Total time = time to park + time back home = x/5 + x/4\n    # 54 min = 0.9 hours\n    # 0.9 = x/5 + x/4\n    # 0.9 = (4x + 5x) / 20\n    # 0.9 * 20 = 9x\n    # x = (0.9 * 20) / 9\n\n    x = (total_time * 20) / 9\n\n    return x\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two unknowns\n    rennie, joleen = symbols('rennie joleen')\n\n    # Equation based on the problem statement\n    # joleen = rennie + 5\n    # (3/4)*rennie = (2/3)*joleen\n    eq1 = Eq(joleen, rennie + 5)\n    eq2 = Eq((3/4)*rennie, (2/3)*joleen)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (rennie, joleen))\n    \n    # Calculate the total number of pies\n    total_pies = solutions[rennie] + solutions[joleen]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference = 8\n\n    # Let's assume the number of boys is x.\n    # Then, the number of girls is x + difference.\n    # We know that the number of boys plus the number of girls equals total_pupils.\n    # So, x + (x + difference) = total_pupils\n\n    # We can solve for x:\n    # 2x + difference = total_pupils\n    # 2x = total_pupils - difference\n    # x = (total_pupils - difference) / 2\n\n    # Now we calculate the number of boys:\n    number_of_boys = (total_pupils - difference) / 2\n\n    # And consequently, the number of girls:\n    number_of_girls = number_of_boys + difference\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas.\n    # Since the number of students who like apples is three times the number of students who like both,\n    # the number of students who like apples is 3x.\n    # Similarly, the number of students who like bananas is 5x.\n    # According to the Inclusion-Exclusion Principle:\n    #   Total = Students who like apples + Students who like bananas - Students who like both\n    #   35 = 3x + 5x - x\n    #   35 = 7x\n    # Solve this equation for x.\n    x = 35 // 7\n\n    return x\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # number of creatures including the alien\n    total_creatures = 1 + 5  # alien himself and his 5 brothers\n    \n    # number of legs per creature\n    legs_per_creature = 5\n    \n    # calculate total number of shoes required (shoes are in sets of 5)\n    total_shoes = total_creatures * legs_per_creature  # each needs 5 shoes\n    \n    # calculate total number of socks required (socks are in pairs)\n    total_socks = total_creatures * legs_per_creature  # each needs 5 socks, and socks are sold in pairs\n    \n    # total cost for shoes (1 set of 5 shoes is $78)\n    shoes_cost = (total_shoes / 5) * 78\n    \n    # total cost for socks ($12 per pair, and since each sock equals a pair here, it simplifies the calculation)\n    socks_cost = total_socks * 12\n    \n    # total cost\n    total_cost = shoes_cost + socks_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the rates at which Lee and Nancy work (jobs per hour)\n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n\n    # The equation representing their combined work to complete 1 job in 10 hours\n    eq1 = Eq((lee_rate + nancy_rate) * 10, 1)\n\n    # The equation representing Nancy working for 20 hours and Lee for 6 hours to complete 1 job\n    eq2 = Eq(nancy_rate * 20 + lee_rate * 6, 1)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (lee_rate, nancy_rate))\n\n    # Finding how long it would take Nancy to finish the job by herself (hours per job)\n    nancy_time = 1 / solutions[nancy_rate]\n\n    return nancy_time\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    orange_pie_g = 550\n    orange_juice_g = 1050\n\n    # Convert grams to kilograms\n    orange_pie_kg = orange_pie_g / 1000\n    orange_juice_kg = orange_juice_g / 1000\n\n    # Calculate remaining oranges\n    remaining_oranges_kg = total_oranges_kg - (orange_pie_kg + orange_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    num_days = 5\n    total_chairs = sum(first_day_chairs + difference * i for i in range(num_days))\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for number in range(1, 416):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_in_pence = 300  # 1 pound = 100 pence, so 3 pounds = 300 pence\n    percentage = (pence / pounds_in_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Number of blue, yellow, and red marbles\n    blue_marbles = 4\n    yellow_marbles = 3\n    red_marbles = 1\n\n    # To make sure we get 3 marbles of the same color, we should consider the worst-case scenario\n    # We take 2 blue, 2 yellow, and then next one has to be either blue or yellow or red to make a triplet.\n    # So we take 2 of each possible without getting 3 of the same.\n    marbles_taken = (2 * blue_marbles - 2) + (2 * yellow_marbles - 2) + 1\n\n    return marbles_taken\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # Given that B = 25 more than six times A\n    # B = 6A + 25\n    # We can represent A as A = 10x + y (because A = xy as a two-digit number)\n    # B can be represented as B = 20x + y (since B = 2xy as two digit number with x doubled)\n    # Replacing A and B in the first equation we get:\n    # 20x + y = 60x + 6y + 25\n    # Solving for x and y, we get:\n    # 40x = 5y + 25\n    # Notice that for x and y being digits, x cannot be greater than 2 because B must be two digits\n    # Hence, we test values of x = 1 or x = 2\n    # If x = 1, we get 40 = 5y + 25, which cannot be since y would have to be 3, but then A = 13 and B = 26 which does not satisfy the condition\n    # If x = 2, we get 80 = 5y + 25\n    # 55 = 5y\n    # y = 11, which is not possible since y has to be a single digit\n    # Therefore, John's method and conclusion are incorrect\n\n    # Correcting John's method:\n    # A = 10x + y and B = 20x + y\n    # So we have 6(10x + y) + 25 = 20x + y\n    # 60x + 6y + 25 = 20x + y\n    for x in range(1, 10):  # x cannot be 0 as it is the first digit\n        for y in range(0, 10):  # y can be from 0 to 9\n            if (60 * x + 6 * y + 25) == (20 * x + 2 * y):\n                A = 10 * x + y\n                return A\n    # If no solution is found within the digit range, return an error (which should not happen)\n    return \"No solution found within digit bounds.\"\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 1:\n            return children\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    shirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + shirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_of_ages = 45\n    years_in_future = 5\n    future_sum_of_ages = current_sum_of_ages + 2 * years_in_future\n    return future_sum_of_ages\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # Total cost in pence\n    paid_amount = 100    # Amount paid in pence (1 pound = 100 pence)\n\n    change = paid_amount - total_cost\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sebastian and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation 1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(garrett, sebastian + 24)\n\n    # Equation 2: In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    # Garret's current age\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation = Eq(boys - (2/5) * boys, girls - (3/7) * girls - 65)\n    solutions = solve((equation, girls - boys - 65), (boys, girls))\n    remaining_boys = solutions[boys] - (2/5) * solutions[boys]\n    remaining_girls = solutions[girls] - (3/7) * solutions[girls]\n\n    ans = remaining_boys + remaining_girls\n    return ans\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 6 / 100\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / tax_rate\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    num_days = 7\n    cost_travel_per_person = 150\n    cost_hotel_per_day_per_person = 50\n    cost_spending_money_per_person = 250\n\n    total_cost_travel = num_people * cost_travel_per_person\n    total_cost_hotel = num_people * num_days * cost_hotel_per_day_per_person\n    total_cost_spending_money = num_people * cost_spending_money_per_person\n\n    total_cost = total_cost_travel + total_cost_hotel + total_cost_spending_money\n    \n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Treat the group of math books (M), chemistry books (C), and physics books (P) as single items\n    different_blocks = 4  # M, C, P, and the single biology book (B)\n\n    # Ways to arrange these 4 items on the shelf\n    blocks_arrangement = factorial(different_blocks)\n\n    # Ways to arrange the books within their own subjects\n    math_books_arrangement = factorial(4)      # 4 math books\n    chemistry_books_arrangement = factorial(3) # 3 chemistry books\n    physics_books_arrangement = factorial(2)   # 2 physics books\n    # Biology book has only 1 way since it's a single book\n\n    # Multiply the ways to arrange the blocks with the ways to arrange books within each block\n    total_arrangements = (blocks_arrangement *\n                          math_books_arrangement *\n                          chemistry_books_arrangement *\n                          physics_books_arrangement)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(7)  # Total permutations of \"ORANGES\" without restrictions\n    vowels_permutations = factorial(3)  # Permutations of the vowels A, E, O\n    consonants_permutations = factorial(4)  # Permutations of the consonants R, N, G, S\n    total_vowel_together = vowels_permutations * factorial(5)  # Treat all vowels as a single unit plus the permutations of the units\n\n    ans = total_permutations - total_vowel_together\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples, bananas = symbols('oranges apples bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(oranges + apples + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (oranges, apples, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70_017_007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_m = 8850  # Height in metres\n    height_km = height_m / 1000  # Convert metres to kilometres\n    return height_km\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of stickers for Eugene, Melvin and David be e, m, and d, respectively\n    e, m, d = symbols('e m d')\n\n    # System of equations based on the problem statement\n    total_stickers = Eq(e + m + d, 260) # Total number of stickers\n    after_e_to_m = Eq(m + 2*m, e - 2*m) # After Eugene gives Melvin twice what Melvin had\n    after_m_to_d = Eq(d + m, m - d)     # After Melvin gives David as many stickers as David had\n    after_d_to_e = Eq(e - 2*m + d, d)   # After David gives Eugene as many stickers as Eugene had left\n    \n    # The given final ratio of Eugene's to Melvin's to David's stickers\n    ratio = Eq(e - 2*m + d, 46/65 * 260) # The ratio of Eugene's stickers to the total\n    ratio_m = Eq(m - (m - d), 12/65 * 260) # The ratio of Melvin's stickers to the total\n    ratio_d = Eq(2 * d, 7/65 * 260) # The ratio of David's stickers to the total\n\n    # Solve the system of equations\n    solutions = solve((total_stickers, after_e_to_m, after_m_to_d, after_d_to_e, ratio, ratio_m, ratio_d), (e, m, d))\n    eugene_initial_stickers = solutions[e]\n\n    return eugene_initial_stickers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    # Number of ways to select one problem from each category\n    ways_category_1 = 30\n    ways_category_2 = 40\n    ways_category_3 = 45\n\n    # Applying the Principle of Multiplication\n    total_ways = ways_category_1 * ways_category_2 * ways_category_3\n    \n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primerange\n\n    # Since a, b, c are primes, 31+a = 26+b = 20+c must be equal to some prime p\n    # We can iterate through a list of primes to find a match for a, b, c\n    primes = list(primerange(1, 50))  # using 50 as an arbitrary upper limit for efficiency\n\n    # Find the prime 'p' such that it matches the equations\n    for p in primes:\n        a = p - 31\n        b = p - 26\n        c = p - 20\n        if a in primes and b in primes and c in primes:\n            return a * b * c\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    \n    # Iterate over all possible side lengths of an isosceles triangle\n    for a in range(1, 12//2 + 1):  # side length of one of the equal sides\n        for b in range(1, 12):  # length of the base side\n            # The perimeter must equal 12\n            # Since it's an isosceles triangle, we have two sides of length a.\n            if 2 * a + b == 12:\n                # To form a triangle the sum of lengths of any two sides\n                # must be greater than the length of the third side.\n                if a + b > a and 2 * a > b:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Number of matches in piles A and B\n    pile_A = 35\n    pile_B = 24\n    \n    # Since Eddie goes first and the piles are not equal, Eddie has the winning strategy.\n    # Eddie can always take the difference of the two piles to make the piles equal.\n    # Once the piles are equal, whatever Wei'er takes, Eddie can take the same from the other pile.\n    # This way Eddie can always mirror Wei'er's moves and ensure that he takes the last match.\n    \n    winning_strategy = pile_A - pile_B  # The number Eddie should take on the first turn to ensure victory\n\n    return (\"Eddie\", winning_strategy)\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # For circular arrangements, (n-1)! gives the distinct arrangements\n    # since rotating the table does not change the order.\n    num_people = 6\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the initial number of boys (and also the initial number of girls)\n    b = symbols('b')\n\n    # Equation: Initial boys + 12 = 2 * (Initial girls - 8)\n    equation = Eq(b + 12, 2 * (b - 8))\n\n    # Solve the equation for b\n    b_value = solve(equation, b)\n\n    # Total students at first = initial boys + initial girls\n    total_students = b_value[0] * 2\n\n    return total_students\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = last_term - first_term + 1\n\n    # Using the arithmetic sum formula: sum = n/2 * (first_term + last_term)\n    sum_of_whole_numbers = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_whole_numbers)\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -2):\n        sum = sum + i - (i - 2)\n    return sum\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Calculate the time for each stage\n    time_stage1 = 280 / 7  # Time = Distance / Speed\n    time_stage2 = 400 / 5\n    time_stage3 = (800 - (280 + 400)) / 8  # Sprint stage distance = Total distance - (Stage1 + Stage2)\n\n    # Sum the times of all stages to get total time\n    total_time = time_stage1 + time_stage2 + time_stage3\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    return 21 * (2 / 7)\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 7]\n    perm = permutations(digits, 3)  # All permutations of 3 numbers\n    count = len(list(perm))  # Count the number of permutations\n\n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 25))\n    for i in primes:\n        if 25 - i in primes:\n            return i * (25 - i)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    ribbon1 = 15\n    ribbon2 = 45\n    largest_piece_length = gcd(ribbon1, ribbon2)\n    return largest_piece_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 20  # 8 pm in 24-hour format\n    end_time_minute = 24\n\n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n\n    time_spent_minutes = end_time_total_minutes - start_time_total_minutes\n\n    return time_spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of vanilla cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Chocolate cupcakes is 72 more than vanilla\n    equation1 = Eq(chocolate, vanilla + 72)\n    # Blueberry cupcakes is 36 less than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)\n    # Sally sells 1/6 of chocolate, 2/3 of vanilla, and 7/9 of blueberry cupcakes\n    # The total number of cupcakes left is chocolate - chocolate/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9\n    # which equals to 427\n    equation3 = Eq(chocolate - chocolate/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)\n\n    # Solve the equations for the number of cupcakes each type\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes_before = solutions[chocolate]\n    # Find the number of chocolate cupcakes sold by calculating 1/6 of the total chocolate cupcakes\n    chocolate_sold = chocolate_cupcakes_before / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamps = 50\n    distance_between_lamps = 2\n\n    length_of_road = (number_of_lamps - 1) * distance_between_lamps\n\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    num_students = 6\n    # By the Pigeonhole Principle, we divide and take the ceiling\n    max_peaches = (total_peaches + num_students - 1) // num_students\n    \n    return max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the first term of the sequence be x\n    # The sum of the terms can be represented as:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) + (x + 5) + (x + 6) = 140\n    # Simplify the equation:\n    # 7x + 21 = 140\n    x = (140 - 21) // 7\n    return x\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We create the congruence equations x ≡ -3 (mod 4), x ≡ -1 (mod 7), x ≡ -3 (mod 9)\n    cong = [(-3 % 4, 4), (-1 % 7, 7), (-3 % 9, 9)]\n\n    # Use Chinese Remainder Theorem to solve for the smallest x that satisfies all three congruences\n    x, _ = solve_congruence(*cong)\n\n    return x\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost_pence = 45 * 10\n    stamp_cost_pence = 27 * 10\n    total_cost_pence = post_card_cost_pence + stamp_cost_pence\n    note_value_pence = 10 * 100\n\n    change_pence = note_value_pence - total_cost_pence\n    change_pounds = change_pence / 100\n\n    return change_pounds\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Since Claire's seat is fixed, we have 3 options for the next, 2 for the one after, and 1 for the last.\n    face_to_face_ways = 1 * 1 * 2  # If Tony can't sit face to face with Claire, he has 2 options, the others have 1 each.\n\n    return total_ways - face_to_face_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_daily_rate = 180 / 10\n    ryan_daily_rate = 180 / 15\n    return frank_daily_rate - ryan_daily_rate\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    questions, normal_time = symbols('questions normal_time')\n\n    eq1 = Eq(questions / 4, normal_time + 5)\n    eq2 = Eq(questions / 6, normal_time - 5)\n\n    solutions = solve((eq1, eq2), (questions, normal_time))\n\n    return solutions[questions]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    lower_limit = 7.35\n    return lower_limit\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        if i > 9:\n            # Create the list of five consecutive numbers starting with i\n            sequence = [i, i+1, i+2, i+3, i+4]\n            # Loop through all combinations of three numbers out of the five\n            for j in range(5):\n                for k in range(j+1, 5):\n                    for l in range(k+1, 5):\n                        # Check divisibility by 37\n                        if (sequence[j] + sequence[k] + sequence[l]) % 37 == 0:\n                            # Check all other combinations for divisibility by 60,\n                            # skipping the indexes already used for the sum divisible by 37\n                            remaining_indexes = set(range(5)) - {j, k, l}\n                            for m in remaining_indexes:\n                                for n in set(remaining_indexes) - {m}:\n                                    o = (set(range(5)) - {j, k, l, m, n}).pop()\n                                    # Check divisibility by 60\n                                    if (sequence[m] + sequence[n] + sequence[o]) % 60 == 0:\n                                        # Return the largest number in the sequence\n                                        return sequence[-1]\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75     # 75 pence equals 0.75 pounds\n    num_cakes_sold = total_money_raised / price_per_cake\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = total_money * (3/7)\n    remaining = total_money - spent_at_restaurant\n    spent_on_fees = remaining * (2/9)\n    money_left = remaining - spent_on_fees\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # The clock chimes thrice in 6 seconds,\n    # so each chime (including the interval before it) takes 6 / 3 = 2 seconds.\n\n    # To chime 6 times, there will be 5 intervals between chimes.\n    # Since each interval takes 2 seconds, the total time will be:\n    intervals = 6 - 1\n    time_per_interval = 2\n    total_time = intervals * time_per_interval\n\n    return total_time\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate per day\n    p_rate = 1 / 12\n\n    # Q's work rate per hour\n    q_rate_per_hour = 1 / (8 * 10)\n\n    # Convert Q's work rate to per day (8 hours per day)\n    q_rate_per_day = q_rate_per_hour * 8\n    \n    # Combined work rate per day\n    combined_rate_per_day = p_rate + q_rate_per_day\n    \n    # Calculate the number of days needed for P and Q to finish the job together\n    days_needed = 1 / combined_rate_per_day\n    \n    # Since we need whole days, we take the ceiling of the days needed\n    ans = -(-days_needed // 1)  # Using negative floor division to mimic ceiling\n\n    return int(ans)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    return difference\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_marks = 79\n    correct_mark = 5\n    wrong_mark = -2\n    total_questions = 20\n    \n    # hypothesis: suppose Kathy answered all questions correctly\n    max_marks = total_questions * correct_mark\n    \n    # calculate the difference between the hypothesis and actual marks\n    difference = max_marks - total_marks\n    \n    # each wrong answer not only loses correct_mark but also deduces wrong_mark.\n    # so the net loss per each wrong answer is correct_mark - wrong_mark\n    net_loss_per_wrong = correct_mark - abs(wrong_mark)\n    \n    # calculate the number of wrong answers\n    wrong_answers = difference // net_loss_per_wrong\n    \n    # calculate the number of correct answers\n    correct_answers = total_questions - wrong_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 41):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    total_cost = 5 * 56  # cost in pence\n    total_cost_pounds = total_cost / 100  # convert pence to pounds\n    change = 10 - total_cost_pounds  # calculate change from 10 pounds\n    return round(change, 2)\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    n = 120\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    number = 180\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n\n    min_diff = float('inf')\n\n    for i in range(len(factors) // 2 + 1):\n        diff = factors[-i-1] - factors[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let x be the time taken by Max to cover the distance\n    # Therefore, the time taken by Luca is x + 10\n    # The ratio of walking speeds of Luca to Max is 2:3\n    # Luca's speed is s, so Max's speed is (3/2) * s\n    # The distance each covers is the same, and distance = speed * time\n    # Hence, s * (x + 10) = (3/2) * s * x\n    # Dividing through by s and multiplying through by 2 gives:\n    # 2 * (x + 10) = 3 * x\n    # 2x + 20 = 3x\n    # 20 = x (Max's time)\n    # Therefore, Luca's time at his usual speed is x + 10 = 30 minutes\n    # If Luca walked at double his usual speed, the time would be halved\n    # So, if he takes 30 minutes at usual speed, at double speed he'd take 15 minutes\n    return 15\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n    overall_change = midday_temp - midnight_temp\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 16): # The number is between 5 and 15, so it should start at 6 and end before 16\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - 2*(5+x), 20)\n    \n    solve_x = solve(equation, x)\n    \n    return solve_x[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_durian_weight + total_watermelon_weight\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    total_score = 71\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * 2 - wrong_answers\n        \n        if score == total_score:\n            return wrong_answers\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = pencils = 1\n    while True:\n        if (pencils - 5) * 2 == pens and (pens + 18) % 2 == 0:\n            break\n        pens += 1\n        pencils += 1\n    return pens + 18\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    return 40  # Drawing one from each of the remaining patterns (13*3)\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship_still_water = 33\n    speed_current = 7\n    total_speed_downstream = speed_ship_still_water + speed_current\n    distance = 320\n\n    time = distance / total_speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the time spent jogging and walking\n    jogging_time_hours = 1  # from 6:30 AM to 7:30 AM\n    walking_time_hours = 2  # from 7:30 AM to 9:30 AM\n    \n    # Calculate the distance traveled while jogging and while walking\n    jogging_speed_mph = 6.5\n    walking_speed_mph = 4.5\n    \n    jogging_distance = jogging_speed_mph * jogging_time_hours\n    walking_distance = walking_speed_mph * walking_time_hours\n    \n    # Calculate the total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length_1 = 45\n    cut_length_2 = 45\n    segment_length = 40\n\n    remaining_length = total_length - (cut_length_1 + cut_length_2)\n    num_segments = remaining_length // segment_length\n\n    return num_segments\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    # Let's declare the total number of pupils as 'total_pupils'.\n    # We know that:\n    # 25% of total_pupils are left-handed -> 0.25 * total_pupils\n    # 1/10 of left-handed students play tennis -> (1/10) * (0.25 * total_pupils) \n    # There are 16 left-handed tennis players -> (1/10) * (0.25 * total_pupils) = 16\n    \n    # Now we solve for total_pupils by setting up the equation:\n    # (1/10) * (0.25 * total_pupils) = 16\n    # total_pupils = 16 / (1/10 * 0.25)\n    total_pupils = 16 / (1/10 * 0.25)\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_initial = 80\n    butter_initial = 20\n    cookies_target = 100\n\n    butter_target = (butter_initial / cookies_initial) * cookies_target\n\n    return butter_target\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35 AM\", \"%I:%M %p\")\n    travel_time = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_time\n    return arrival_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three digits (hundreds, tens, units) can be chosen in 3 ways: 6, 7, or 8.\n    # Since the digits can be repeated, each place has 3 choices independent of the others.\n    return 3**3  # 3 choices for each of the 3 positions\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zero, current_num, index, current_str_length = 0, 0, 0, 0\n\n    while count_zero < 100:\n        current_num += 1\n        str_num = str(current_num)\n        count_zero += str_num.count('0')\n        current_str_length += len(str_num)\n\n    index = current_str_length - (count_zero - 100)  # Find the position of the 100th zero\n    num_with_100th_zero = str_num\n\n    return int(num_with_100th_zero)\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_consumed = 9  # liters in a week\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_consumed\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time_years = 10\n\n    interest = principal * interest_rate * time_years\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180\n    time_fast = 6\n    speed_slow = 120\n    time_slow = 8\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Since the numbers are consecutive, the average number equals the mean of the sum\n    average = 2012 / 8\n    # The largest number will be 3 more than the average (because there would be 3 numbers after it to reach the largest number of the 8 consecutive numbers)\n    largest_number = average + 3\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    \n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_before, B_before = symbols('A_before B_before', positive=True, integer=True)\n\n    equation1 = Eq(A_before, 5/7 * B_before)\n    equation2 = Eq(A_before + 3, 4/5 * (B_before - 3))\n\n    solutions = solve((equation1, equation2), (A_before, B_before))\n\n    return solutions[A_before]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the initial number of empty bottles Faye has.\n    # After exchanging 3 bottles for 1 new one, it's like losing 2 bottles each time.\n    # Since she has done this 5 times, Faye has lost 4 * 2 more bottles than expected.\n    # But she got 1 more bottle than expected, so 4 * 2 - 1 bottles are unaccounted for.\n    # This means she must have started with 4 * 2 - 1 extra bottles.\n    additional_bottles = 4 * 2 - 1\n    initial_bottles = 3 * 4  # 4 new bottles mean she exchanged 3*4 empty bottles.\n    total_bottles = initial_bottles + additional_bottles\n\n    return total_bottles\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's denote the side of the initial square filled with boys as 'n'.\n    # The number of boys will be n^2.\n    # After adding the girls, the new side of the square will be 'n + 1'.\n    # The number of choir members after girls join will be (n + 1)^2.\n    # The relationship between the number of girls and 'n' is as follows:\n    # (n + 1)^2 - n^2 = 17\n    # Expanding the squares we get:\n    # n^2 + 2n + 1 - n^2 = 17\n    # Simplifying we get:\n    # 2n + 1 = 17\n    # Solving for 'n':\n    n = (17 - 1) // 2\n    # Therefore, the total number of boys is:\n    ans = n ** 2\n    return ans\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    speed = symbols('speed')\n    \n    # Original time minus one hour for the speed increase condition\n    original_time = 6  # 7pm - 1pm = 6 hours\n    new_time = original_time - 1  # 5 hours if she wants to arrive one hour earlier\n\n    # Equation: original_speed * original_time = (original_speed + 2) * new_time\n    equation = Eq(speed * original_time, (speed + 2) * new_time)\n    \n    # Solve for the original speed\n    original_speed = solve(equation, speed)[0]\n\n    # Calculate the distance using the original speed and original time\n    distance = original_speed * original_time\n\n    return distance\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    litres_to_millilitres = 1000\n\n    total_millilitres = total_litres * litres_to_millilitres\n    time_seconds = total_millilitres / flow_rate_per_second\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    pages = 0\n    digits = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n        \n    return pages - 1\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # Incorrectly recorded average and total saving. \n    incorrect_avg = 1468\n    # Correctly saved amount.\n    correct_saved = 1082\n    # Incorrectly saved amount.\n    incorrect_saved = 1268\n    # Correct average.\n    correct_avg = 1462\n    \n    # Find total difference due to error.\n    error_difference = incorrect_saved - correct_saved\n    # Total days can be calculated by\n    # dividing the total difference by the difference in averages.\n    days = error_difference / (incorrect_avg - correct_avg)\n\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # He cuts a piece of rope into 4 pieces of equal length in 12 minutes\n    # This means he creates 3 cuts to make 4 pieces\n    cuts_needed_for_4_pieces = 3\n    \n    # The time to make each cut is\n    time_per_cut = 12 / cuts_needed_for_4_pieces\n    \n    # For 12 pieces, he needs 11 cuts\n    cuts_needed_for_12_pieces = 11\n    \n    # The total time to make those cuts\n    total_time_for_12_pieces = cuts_needed_for_12_pieces * time_per_cut\n    \n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80  # The year Lord Ownlynose was born\n    oak_tree_age_in_2011 = 2011 - birth_year  # Age of the oak tree in 2011\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    nth_value = 25\n    common_difference = 3\n    first_term = nth_value - (common_difference * (nth_term - 1))\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, solve\n\n    lily, marry, carol = symbols('lily marry carol')\n    # Carol is 2 years older than Marry and Marry is 1 year older than Lily\n    equation1 = carol - marry - 2\n    equation2 = marry - lily - 1\n    # 4 times the product of their ages is 2240\n    equation3 = 4 * lily * marry * carol - 2240\n    \n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n  \n    # Return Carol's age\n    for solution in solutions:\n        if all(map(lambda x: x.is_real and x > 0, solution)):\n            return solution[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    equation = simplify((8*x + 8)/2 - 3*(x + 6))\n\n    return equation\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for common difference (d) and first term (a)\n    d, a = symbols('d a')\n\n    # 9th term in terms of a and d\n    term_9 = a + 8 * d\n    # 15th term in terms of a and d\n    term_15 = a + 14 * d\n    # 20th term in terms of a and d\n    term_20 = a + 19 * d\n    # 12th term in terms of a and d\n    term_12 = a + 11 * d\n    \n    # Equation 1: 9th term is 18 larger than the 15th term\n    equation1 = Eq(term_9, term_15 + 18)\n    # Equation 2: the sum of the 20th term and the 12th term is 88\n    equation2 = Eq(term_20 + term_12, 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term using the value of a and d\n    term_32 = solutions[a] + 31 * solutions[d]\n    \n    return term_32\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n\n    return red_flowers, purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since we are dealing with identical items and we want to split them into 2 piles,\n    # there's always going to be 1 way to split if all the marbles are in one pile.\n    # For all other scenarios (1-9, 2-8, ..., 9-1), since the marbles are identical,\n    # splitting them as 1-9 is the same as 9-1.\n    # Therefore, we need to add 1 for each possible scenario from 1 to 9, inclusive.\n    \n    num_ways = 9 + 1  # From 1 to 9 marbles in the first pile, plus all in one pile.\n    return num_ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # 1 liter = 1.05668821 quarts\n    bottle_volume_quarts = 2.5 * 1.05668821\n    cup_capacity_quarts = 0.5\n    num_cups = bottle_volume_quarts / cup_capacity_quarts\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure we get 3 toy cars of the same colour, we have to consider the worst-case scenario.\n    # We will need to pick at maximum 2 cars of each colour before we are sure to get 3 of the same colour.\n    # So, we calculate the number of cars to pick as follows:\n    \n    # Pick 2 red (worst-case, the next one is not red)\n    red_cars = 2\n    # Pick 2 blue (worst-case, the next one is not blue)\n    blue_cars = 2\n    # Pick 2 white (worst-case, the next one is not white)\n    white_cars = 2\n    # After this, the next car we pick must be the third of one of the colours\n    \n    cars_needed_to_pick = red_cars + blue_cars + white_cars + 1  # +1 for the next pick that ensures 3 of the same colour\n    \n    return cars_needed_to_pick\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_cm = [85, 200, 147]  # Convert 2 meters to 200 cm\n    total_length_cm = sum(lengths_cm)\n    total_length_m = total_length_cm / 100   # Convert cm to m\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    return 2 + 34 / 100\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    spider_legs = 8\n    ant_legs = 6\n\n    # Assume all are ants first, it's the maximum number of ants.\n    ants = total_legs // ant_legs\n\n    # Deduct the number of ants until we reach a count where the remaining legs can be attributed to spiders\n    while (total_legs - (ants * ant_legs)) % spider_legs != 0:\n        ants -= 1\n\n    return ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, vivian = symbols('justin vivian')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (justin, vivian))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_sent = 2\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_sent + stamps_given - stamps_bought\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000  # 1 litre is 1000 millilitres\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # After the fourth bounce, the ball reaches 36 m height,\n    # which means it was dropped from 36 * 2 m height before the fourth bounce.\n    height_before_fourth_bounce = 36 * 2\n\n    # Before the third bounce, the ball reached three times lower height than\n    # it was for the second bounce, so we divide by 3 to get the height before the third bounce.\n    height_before_third_bounce = height_before_fourth_bounce / 3\n\n    # Similar to the before third bounce, we find the height before the second bounce.\n    height_before_second_bounce = height_before_third_bounce / 3\n\n    # The height from which the ball was dropped originally is the height it achieved after the first bounce\n    initial_height = height_before_second_bounce / 3\n\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the two numbers as x and y.\n    x, y = symbols('x y')\n\n    # Original equation: x + y = 11.63\n    original_sum = Eq(x + y, 11.63)\n\n    # When Oliver shifts the decimal point of x one place to the left, it becomes x/10\n    # New equation with mistaken sum: x/10 + y = 5.87\n    mistaken_sum = Eq(x/10 + y, 5.87)\n\n    # Solve the system of equations to find the values of x and y.\n    solutions = solve((original_sum, mistaken_sum), (x, y))\n    \n    # Difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Multiply the difference by 100 to find the final answer.\n    return 100 * difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    return 2 * 9 + 200 + 9\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent_percentage = 0.5\n    remaining_amount = initial_amount * (1 - spent_percentage)\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    full_cd_price_pounds = 8.99\n\n    total_price_pence = single_song_price_pence * 12\n    full_cd_price_pence = full_cd_price_pounds * 100  # converting pounds to pence\n\n    savings = total_price_pence - full_cd_price_pence\n\n    return savings / 100  # converting savings back to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        reversed_number = int(str(i)[::-1])\n        difference = abs(i - reversed_number)\n        results.add(difference)\n    return results\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digit_options = [1, 2, 3]\n    count = 0\n    for tens in digit_options:\n        for ones in digit_options:\n            if tens != ones:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = list(range(10))\n    \n    # To minimize the difference, one number should be as large as possible\n    # and the other as small as possible. We sort the digits and create the smallest number \n    # with the smallest digits and the largest number with the largest digits.\n    # Since 0 cannot be at the start of the 5-digit number, we start with the second-smallest.\n    small_number = int(''.join(map(str, [digits[1]] + digits[2:6])))\n    large_number = int(''.join(map(str, digits[-1:-6:-1])))\n\n    # The smallest possible difference\n    difference = large_number - small_number\n\n    return difference\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_seconds = 15  # time in seconds to pass the tree\n    length_meters = 450  # length of the train in meters\n\n    # Speed = Distance / Time\n    # To find the speed in meters per second (m/s), divide the length of the train by the time it takes to pass the tree\n    speed_m_per_s = length_meters / time_seconds \n    \n    return speed_m_per_s\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    # Using the functools.reduce function and operator.mul to calculate the factorial\n    from functools import reduce\n    import operator\n    ans = reduce(operator.mul, range(1, 11), 1)\n    return ans\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n\n    percent_concentration = (salt / total_solution) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam Sam had 40 stickers more than Peter\n    initial_sam = peter + 40\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = initial_sam * 0.20\n    sam_after_giving = initial_sam - sam_gives\n    peter_after_getting = peter + sam_gives\n    \n    # Peter gives 25% of his stickers to Sam\n    peter_gives = peter_after_getting * 0.25\n    peter_final = peter_after_getting - peter_gives\n    sam_final = sam_after_giving + peter_gives\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final - peter_final, 96)\n    \n    # solve for peter\n    solution = solve((equation, Eq(initial_sam, peter + 40)), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    # The number 8abcde is divisible by 3, 4 and 5 for all unique digits.\n    # Divisibility by 5 implies that e must be either 0 or 5.\n    # Since e cannot be 0 (each digit must be unique and '8abcde' is a 6-digit number),\n    # hence, e must be 5.\n    e = 5\n\n    # Divisibility by 4 implies the last two digits (de) form a number divisible by 4.\n    # Since e = 5, d has to be an even number.\n    # We can check 05, 25, 45, 65, and 85 for divisibility by 4.\n    # Out of these, only 45 and 85 are divisible by 4, hence d can be 4 or 8.\n    # However, 8 is the first digit, so d must be 4.\n    d = 4\n\n    # The smallest possible digits for a, b, c should be chosen next, to get the smallest possible number.\n    # Since all digits must be unique and we have used 4 and 5, we choose the smallest unused digits,\n    # which are 0, 1, 2, 3, 6, 7 and 9 for a, b and c.\n    # Divisibility by 3 implies that the sum of all digits must be divisible by 3.\n    # The sum currently is 8 + 4 + 5 = 17.\n    # If we choose 0, 1, 2 as the smallest unique digits for a, b, c, we get a sum of 20 which is not divisible by 3.\n    # Trying the next set of unique digits 0, 1, 3 gives us a sum of 21 which is divisible by 3.\n    # Therefore, a = 0, b = 1, c = 3 fulfill all requirements and provide the smallest number.\n    a, b, c = 0, 1, 3\n\n    # Combine all the chosen digits to form the smallest 6-digit number.\n    return int(f'8{a}{b}{c}{d}{e}')\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_a_pen = pen_cost / pencil_cost\n    \n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2  # Ali and Bala themselves\n\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_Bala\n    \n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    # Each friend sends cards to every other friend, not to themselves.\n    cards_sent_by_each = num_friends - 1  \n    total_cards_sent = num_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17 + 16 - 15 + 14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = 0\n    for i in range(1, 102):\n        ans += i * (i + 1)\n    return ans - (101 * 102)\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan = 74\n    bilal = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_days = 3 + 2 + 2\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    average_cookies_per_day = total_cookies / total_days\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    candy_rate = 1 / 20\n    david_rate = 1 / 25\n    combined_rate = candy_rate + david_rate\n\n    # Total work done when they work together without any days off\n    total_work = combined_rate * 12\n    \n    # Total work that needs to be done is 1 job\n    days_off = 0  # initializing days_off\n\n    # Starting the loop from 0 to check from no days off to 12 days off\n    for days_off in range(13):\n        # Work done by Candy alone plus work done by David with some days off\n        work_done = (candy_rate * 12) + (david_rate * (12 - days_off))\n        if work_done >= 1:  # if the work done meets or exceeds 1 job, break the loop\n            break\n\n    return days_off\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, the force exerted by the table on the book \n    # (normal force) is equal in magnitude and opposite in direction to the force of gravity\n    # acting on the book. Therefore, the force exerted by the table is also 20N\n    # but in the opposite direction. The magnitude of this force is 20N.\n\n    force_exerted_by_table = 20  # The magnitude of the force\n    \n    return force_exerted_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    first_50k_tax = 0.05 * 50000\n    remaining_income = income - 50000\n    remaining_tax = (0.08 + T) * remaining_income\n    total_tax = first_50k_tax + remaining_tax\n\n    equation = Eq(total_tax, 15100)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total amount of fruits be 'f'\n    fruits = symbols('fruits')\n    \n    # Given that 4/5 of the fruits were apples, so\n    apples = (4/5) * fruits\n    \n    # Rest were pears, so pears = fruits - apples\n    pears = fruits - apples\n    \n    # After 3/4 of the fruits are removed, we are left with 1 - 3/4 = 1/4 of total fruits\n    remaining_fruits = (1/4) * fruits\n    \n    # There will be 1/8 of apples and 30 pears left\n    remaining_apples = (1/8) * apples\n    remaining_pears = 30\n    \n    # Now, the rest of the fruits are remaining_apples and remaining_pears\n    equation = Eq(remaining_fruits, remaining_apples + remaining_pears)\n    \n    # We solve the equation to find the total number of fruits initially\n    total_fruits = solve(equation, fruits)\n    \n    return total_fruits[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Since Lily needs to take out 6 balls of the same type,\n    # let's consider the worst-case scenario using the pigeonhole principle.\n    \n    # Worst case for footballs:\n    # She could take out all 9 basketballs and all 3 volleyballs without getting 6 footballs.\n    # Therefore, she needs to take out 9 + 3 + 1 (the next one has to be a football) = 13 balls.\n\n    # Similarly,\n    # Worst case for basketballs: She could take out all 6 footballs and all 3 volleyballs.\n    # So, she needs to take out 6 + 3 + 1 (the next one has to be a basketball) = 10 balls.\n\n    # Worst case for volleyballs is not considered because there are only 3 volleyballs.\n\n    # Since Lily wants to get 6 balls of the same type, we consider the worst case for all types.\n    # She must take out at least max(13, 10) balls, as this will ensure getting 6 of any type.\n\n    ans = max(13, 10)\n    return ans\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    mass = 2  # in kilograms\n    height = 5.0  # in meters\n    g = 9.81  # acceleration due to gravity, in m/s^2\n\n    # Potential energy (PE) at the top equals kinetic energy (KE) at the bottom\n    # PE = m * g * h\n    PE_top = mass * g * height\n\n    # At the bottom, all potential energy gets converted into kinetic energy\n    # And KE = 1/2 * m * v^2\n    # Thus, PE_top = KE_bottom => m * g * h = 1/2 * m * v^2\n    # We can solve for v: v^2 = 2 * g * h\n    # And so, v = sqrt(2 * g * h)\n    v = sqrt(2 * g * height)\n\n    return v\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_six_cakes = 36\n    number_of_cakes_initially = 6\n    number_of_cakes_wanted = 10\n\n    time_per_cake = time_for_six_cakes / number_of_cakes_initially\n    total_time_for_ten_cakes = time_per_cake * number_of_cakes_wanted\n\n    return total_time_for_ten_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n    \n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "def solution():\n    import math\n\n    # Initial velocity\n    v0 = 5  # m/s\n    angle = 45  # degrees\n    h = 30  # meters (height of the building)\n\n    # Decompose the initial velocity into horizontal and vertical components\n    v0x = v0 * math.cos(math.radians(angle))  # horizontal component\n    v0y = v0 * math.sin(math.radians(angle))  # vertical component\n\n    # Calculate the time the arrow is in the air\n    # Using the equation of motion: h = v0y * t - 0.5 * g * t^2\n    # When the arrow hits the ground, h=0 and thus we can solve for t:\n    # 0 = v0y * t - 0.5 * g * t^2\n    # Rearranging terms gives a quadratic equation: 0.5 * g * t^2 - v0y * t = 0\n    # Dividing every term by t, since t is not zero, gives:\n    # 0.5 * g * t - v0y = 0, and thus t = 2 * v0y / g\n    g = 9.81  # gravity (m/s^2)\n    t = 2 * v0y / g\n\n    # Calculate the final vertical velocity\n    # Using the equation: v = u + at\n    vf_y = v0y - g * t  # The vertical component is going upwards, gravity decelerates it\n\n    # The horizontal velocity component remains constant (no horizontal forces)\n    vf_x = v0x  # The horizontal component does not change\n\n    # Calculate the magnitude of the final velocity\n    # Using Pythagoras' theorem on the final horizontal and vertical components\n    vf = math.sqrt(vf_x**2 + vf_y**2)\n    return vf\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # As each kid should get at least one orange, we distribute one orange to each kid first.\n    # Therefore, we are left with 13 - 3 = 10 oranges to distribute among 3 kids.\n    # This is a problem of distributing indistinguishable items into distinguishable boxes.\n    # We can use the formula for combinations with repetition which is C(n+r-1, r),\n    # where n is the number of items and r is the number of boxes.\n    # In this case, we have 10 oranges (n) to distribute in 3 boxes (r = kids)\n    # So, it's C(10+3-1, 3-1).\n\n    ans = comb(10+3-1, 3-1)\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Initial number satisfying the criteria\n    # Start with 2+0 = 20 in the least significant digits\n    # and look for numbers divisible by 11\n    number = 20\n    \n    # Function to calculate digit sum\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    # Function to check divisibility by 11\n    # According to the divisibility rule for 11,\n    # the difference between the sum of the digits in the odd positions\n    # and the sum of the digits in the even positions should be 0 or divisible by 11.\n    def is_divisible_by_11(n):\n        digits = [int(digit) for digit in str(n)]\n        odd_sum = sum(digits[i] for i in range(0, len(digits), 2))\n        even_sum = sum(digits[i] for i in range(1, len(digits), 2))\n        return (odd_sum - even_sum) % 11 == 0\n    \n    # Loop to find the smallest number with a digit sum of 20 and divisible by 11\n    while True:\n        if digit_sum(number) == 20 and is_divisible_by_11(number):\n            return number\n        number += 11  # Increment by 11 to maintain divisibility\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        if S == 0 or O == 0:  # Numbers cannot have leading zero\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Number of choices for each category\n    food_choices = 2  # sandwiches and burgers\n    drink_choices = 3  # coffee, milk, tea\n    dessert_choices = 4  # cake, pudding, ice-cream, pie\n\n    # Calculate the total different ways using the Principle of Multiplication\n    total_ways = food_choices * drink_choices * dessert_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    A = 48\n    B = 28\n    total = A + B\n    equal_volume = total / 2\n\n    transfer_from_A_to_B = A - equal_volume\n\n    return transfer_from_A_to_B\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(2 * elephants, 5 * cows)\n    equation2 = Eq(4 * cows, 3 * horses)\n    equation3 = Eq(3 * horses, 5 * pigs)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n    \n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_as_8_elephants = 8 * solutions[elephants] / solutions[pigs]\n    \n    return pigs_as_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    rate = (amount / principal) ** (1 / years) - 1\n\n    return rate\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    equation2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.60 * (2/5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18\n    tax_percent = 10\n\n    tip_amount = (tip_percent / 100) * bill\n    tax_amount = (tax_percent / 100) * bill\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # There are 5 positions around 4 dances for the 6 songs\n    # The calculation is similar to putting 4 identical balls into 5 boxes\n    # and finding how many ways the balls can be arranged with at least 1 in each box \n    ways_to_arrange_songs = nPr(5, 4)\n\n    # After fixing the dance performances, treat them as single units required for separation\n    # Then, we can arrange the 6 singing performances freely in the remaining positions\n    ways_to_arrange_singing = nPr(6, 6)\n    \n    ans = ways_to_arrange_songs * ways_to_arrange_singing\n    return ans\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_five_boxes = 350\n    weight_per_box = total_weight_five_boxes / 5\n    total_weight_three_boxes = weight_per_box * 3\n    return total_weight_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the comics by themselves, since they must stay together\n    comics_arrangements = factorial(4)\n    # Number of ways to arrange the fictions by themselves, since they must stay together\n    fictions_arrangements = factorial(6)\n    # Number of ways to arrange the two groups (comics as one group, fictions as another)\n    group_arrangements = factorial(2)  # Because we can either have comics then fictions or the other way around\n    \n    # Total number of arrangements\n    total_arrangements = comics_arrangements * fictions_arrangements * group_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let x be the number of questions Dora answered correctly\n    # and y be the number of questions Justin answered correctly\n    \n    total_points_dora = 10*x - 5*(10 - x)  # Dora's points\n    total_points_justin = 10*(x + 3) - 5*(10 - (x + 3))  # Justin got 15 more points, which means 3 more correct answers\n    \n    # The sum of both scores is 155\n    equation = total_points_dora + total_points_justin - 155\n    \n    # Since the number of correct answers is between 0 and 10, we iterate through the possible values\n    for x in range(11):\n        if 10*x - 5*(10 - x) + 10*(x + 3) - 5*(10 - (x + 3)) == 155:\n            return x\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # L is the amount of work Lee can do in 1 hour\n    # N is the amount of work Nancy can do in 1 hour\n    L, N = symbols('L N')\n    \n    # Together, they complete 1/10 of the work in 1 hour\n    equation1 = Eq(L + N, 1/10)\n    \n    # Lee works for 6 hours, then Nancy works for 20 hours to complete the job\n    equation2 = Eq(6*L + 20*N, 1)\n    \n    # Solve the system of equations to find L and N\n    solutions = solve((equation1, equation2), (L, N))\n    \n    # The time it takes for Nancy to finish the job by herself is the reciprocal of N\n    time_for_nancy = 1/solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_liters = 6\n\n    latte_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return latte_liters\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_pieces = 10\n\n    remaining_string_length = total_string_length - used_string_length\n    length_of_each_piece = remaining_string_length / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    result = 45 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    ans = comb(7, 2)\n    return ans\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n\n    # Class A has 3 groups, each sold 12 candies\n    total_candies_A = 3 * 12\n\n    # The average for all groups (A and B) is 8 candies\n    # Let the total number of groups be n (3 from A and (n - 3) from B)\n    # Then, total candies for A and B is n * 8\n\n    # Set up the equation where the total candies from A plus total candies from B equals n * 8\n    # 3 * 12 + (n - 3) * x = n * 8\n\n    # We need to solve for x, but we are given that n * 8 is the average for the total candies\n    # So we first express the total candies from B in terms of n and x and equate it to the total average\n    # (n - 3) * x = n * 8 - 3 * 12\n\n    # Simplify the equation to solve for x\n    # nx - 3x = 8n - 36\n\n    # Since the average for all groups is already given, we can calculate the total number of groups by comparing the averages\n    # For every 3 groups in A, there is a deficit of 4 candies per group to maintain the total average of 8\n    # Therefore, we need 3 groups in B to balance out this deficit with a surplus of 4 candies\n    # Hence, the total number of groups is 3 (A) + 3 (B) = 6\n\n    # Substitute n = 6 into the equation to solve for x\n    # 6x - 3x = 8*6 - 36\n    # 3x = 48 - 36\n\n    x = (8 * 6 - 36) / 3\n\n    return x\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    a, b, c = 6, 9, 18\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    total_people = 10\n    handshakes = comb(total_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n    \n    # Given ratios\n    equation1 = Eq(white / milk, 3 / 7)\n    equation2 = Eq(milk / dark, 7 / 5)\n    equation3 = Eq(dark - white, 8)\n\n    solutions = solve((equation1, equation2, equation3), (white, milk, dark))\n\n    return int(solutions[milk])\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    badminton_lovers = total_students / 4 + 3\n    remaining_students = total_students - badminton_lovers\n    table_tennis_lovers = remaining_students / 3 - 3\n    football_lovers = 25\n\n    equation = Eq(badminton_lovers + table_tennis_lovers + football_lovers, total_students)\n\n    solutions = solve(equation, total_students)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    side_length_big_square = 6\n    side_length_small_square = 3\n\n    number_of_squares = (side_length_big_square // side_length_small_square) ** 2\n\n    return number_of_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    metres = 70.24\n    centimetres = metres * 100\n    return centimetres\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    amount_spent = 5  # 5p spent\n    fraction_of_total = 1 / 4  # one-quarter\n\n    # Initial amount before spending\n    initial_amount = amount_spent / fraction_of_total\n\n    return initial_amount\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers\n    sam, peter = symbols('sam peter')\n\n    # Original amounts: Sam had 40 stickers more than Peter\n    # After giving away 20% of his stickers, Sam has sam - 0.2 * sam stickers\n    # Peter has peter + 0.2 * sam stickers after receiving from Sam\n    original_sam = sam\n    original_peter = peter\n    sam_after_giving = sam - 0.2 * sam\n    peter_after_receiving = peter + 0.2 * sam\n\n    # After giving away 25% of his stickers, Peter has peter_after_receiving - 0.25 * peter_after_receiving stickers\n    # Sam has sam_after_giving + 0.25 * peter_after_receiving stickers after receiving from Peter\n    peter_after_giving = peter_after_receiving - 0.25 * peter_after_receiving\n    sam_after_receiving = sam_after_giving + 0.25 * peter_after_receiving\n\n    # Equation 1: original_sam = original_peter + 40 (From the initial condition)\n    # Equation 2: sam_after_receiving - peter_after_giving = 96 (From the final condition)\n    equations = (\n        Eq(original_sam, original_peter + 40),\n        Eq(sam_after_receiving - peter_after_giving, 96)\n    )\n\n    # Solve the system of equations\n    solutions = solve(equations, (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to add\n    red_balls_initial = 5\n    green_balls = 10\n    total_balls_after_adding = red_balls_initial + green_balls + x\n    \n    # We want the probability of getting a green ball to be 1/3\n    # P(green) = green_balls / total_balls_after_adding\n    \n    # So:\n    # 1/3 = green_balls / total_balls_after_adding\n    # We can cross multiply to find x\n    # green_balls = (1/3) * (red_balls_initial + green_balls + x)\n    # 3 * green_balls = red_balls_initial + green_balls + x\n    # x = 3 * green_balls - red_balls_initial - green_balls\n    # x = 2 * green_balls - red_balls_initial\n    \n    x = 2 * green_balls - red_balls_initial\n    \n    return x\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n\n    num_pages = 1\n    while count_sixes(num_pages) < 18:\n        num_pages += 1\n\n    return num_pages - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruit_types = 2\n    vegetable_types = 3\n\n    combinations = fruit_types * vegetable_types\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given ratios\n    ratio_a_to_b = 4 / 9\n    b = 81\n    \n    # Since b is 81 in the ratio 4:9, we find a by cross-multiplying.\n    a = ratio_a_to_b * b  # a / 81 = 4 / 9\n\n    return int(a)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    effective_jump = 2 * jump_up - fall_down\n    jumps_needed = 0\n    height_after_jumps = 0\n\n    while height_after_jumps < total_height - jump_up:\n        height_after_jumps += effective_jump\n        jumps_needed += 2\n\n    jumps_needed += 1  # final jump to reach or exceed the top\n    return jumps_needed\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum([(2*i)**3 / (2*i*(2*i+1)*(2*i+2)) for i in range(1, 2013)]) + 1/4026\n    return ans\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a power only depends on the ones digit of the base\n    # and follows a cycle pattern. For example, 2^1 = 2, 2^2 = 4, 2^3 = 8, 2^4 = 6,\n    # and then 2^5 = 2, thus the pattern repeats every 4 powers. Similarly for 3, 7, and 8.\n    \n    # Find the ones digit cycle for 2 and 3 (the ones digits of 32 and 22 respectively)\n    cycle_2 = [2 ** i % 10 for i in range(1, 5)] # [2, 4, 8, 6]\n    cycle_3 = [3 ** i % 10 for i in range(1, 5)] # [3, 9, 7, 1]\n    \n    # Find the respective position in the cycle for 32^33 and 22^29\n    # We subtract 1 because Python uses zero-based index\n    ones_digit_32 = cycle_2[(33 - 1) % len(cycle_2)]\n    ones_digit_22 = cycle_3[(29 - 1) % len(cycle_3)]\n    \n    # Calculate the ones digit of the subtraction\n    result = (ones_digit_32 - ones_digit_22) % 10\n\n    return result\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = None\n    for i in range(1, 100):\n        if i**2 < 100 and (i**2 + 1) % 5 == 0 and i**2 % 16 == 0:\n            ans = i**2\n            break\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    difference = 21 - 15\n    last_term = 39\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    for correct in range(total_questions+1):\n        wrong = total_questions - correct\n        score = correct * 4 - wrong * 2\n        if score == 152:\n            return correct\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If 16 sausages are to be shared among 24 people,\n    # each person should get 16/24 = 2/3 of a sausage.\n    # This means we need to make cuts in such a way that\n    # each sausage is divided into 3 equal parts. \n    # Doing this for 16 sausages requires 16 * (3 - 1) = 32 cuts,\n    # because we need 2 cuts to divide each sausage into 3 parts.\n\n    sausages = 16\n    people = 24\n    parts_per_sausage = people // sausages\n\n    cuts_per_sausage = parts_per_sausage - 1\n    total_cuts = sausages * cuts_per_sausage\n\n    return total_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # \"RAINBOW\" has 7 letters\n    total_vowels = 3   # \"AIN\" are 3 vowels in \"RAINBOW\"\n\n    # Total permutations of \"RAINBOW\"\n    total_permutations = factorial(total_letters)\n\n    # Permutations of the vowels \"AIN\"\n    vowel_permutations = factorial(total_vowels)\n\n    # Ways to position 3 vowels together as one unit among other 4 consonants (4! * 3!)\n    vowels_together = factorial(total_letters - total_vowels + 1) * vowel_permutations\n\n    # Ways that vowels are never together\n    ans = total_permutations - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation for the current age\n    equation1 = Eq(wendy, 2 * vivien)\n    # Equation for the age 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years\n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in container A\n    x = symbols('x')\n\n    # Create an equation representing the word problem\n    equation = Eq(x - 500, 2 * (x - 350))\n\n    # Solve for x\n    amount_a = solve(equation, x)\n\n    return amount_a[0]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    \n    # Calculate the differences between the numbers\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n    \n    # Find the greatest common divisor of the differences\n    g = gcd(gcd(diff1, diff2), diff3)\n    \n    return g\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let n be the total number of team members including Lovelle.\n    # Each of the 5 team members who spoke to Lovelle said 3 sentences to her,\n    # so that’s a total of 5 * 3 = 15 sentences to Lovelle.\n    total_sentences_to_Lovelle = 5 * 3\n\n    # Each of these 5 team members would also say 3 sentences to every other of the 5 members,\n    # excluding Lovelle, which amounts to 5 * 3 * 4 sentences.\n    # Each sentence is counted twice because when A speaks to B, it is the same as B speaks to A.\n    # Hence, we divide by 2.\n    total_sentences_among_5_members = (5 * 3 * 4) // 2\n\n    # 12 members did not speak to Lovelle at all.\n    # Thus, the number of members who did not speak to her includes Lovelle herself.\n    non_speaking_members = 12 + 1\n\n    # Total number of team members\n    n = non_speaking_members + 5\n\n    return n\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    pages = 325\n    digits = 0\n    \n    # 1-9 uses 1 digit for each page\n    if pages >= 9:\n        digits += 9\n    \n    # 10-99 uses 2 digits for each page\n    if pages >= 99:\n        digits += 2 * (99 - 10 + 1)\n    else:\n        digits += 2 * (pages - 10 + 1)\n    \n    # 100-325 uses 3 digits for each page\n    if pages > 99:\n        digits += 3 * (pages - 99)\n    \n    return digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef count_valid_permutations(word):\n    count = 0\n    for perm in set(permutations(word)):\n        if 'TT' not in ''.join(perm):\n            count += 1\n    return count\n\ndef solution():\n    word = 'STATISTIC'\n    total_perms = factorial(len(word))\n    # Count permutations where Ts are together as one item 'TT'\n    together_perms = factorial(len(word) - word.count('T') + 1) * factorial(word.count('T'))\n    \n    # Subtract from the total the invalid permutations where the Ts are together\n    valid_perms = total_perms - together_perms\n    \n    # Now we must divide the valid permutations by the factorial of the counts of \n    # all similar characters to account for indistinguishable arrangements\n    for letter in set(word):\n        valid_perms //= factorial(word.count(letter))\n    \n    return valid_perms\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Since the amount eaten in the last four lessons must be the same,\n    # and it must be an integer, let's represent that amount with a variable 'x'.\n    # This means the total eaten in the last four lessons is '4x'.\n\n    # Before the last four lessons, she shared one third with friends,\n    # so two thirds is left, which is '4x'.\n\n    # Before sharing, the number of fruit gums should be '4x * 3/2' (since 2/3 is left).\n    # She also ate 2 in the music lesson, so the total number becomes '4x * 3/2 + 2'.\n\n    # Now we need to find the smallest x for which '4x * 3/2 + 2' is an integer.\n    # We start with x = 1 and increment until we find the smallest number of fruit gums.\n\n    x = 1\n    while True:\n        total = 4 * x * 3 / 2 + 2\n        if total.is_integer():\n            return int(total)\n        x += 1\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours = total_pieces / pieces_per_hour\n\n    return hours\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # He tries maximum of 9 keys for the first chest,\n    # after opening 1 chest, 8 keys are remaining for the second chest,\n    # and so on..\n    attempts = 9 + 8 + 7 + 6\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern = [2945, 3445, 3245, 3745, 4045, 3845]\n    \n    differences = [pattern[i+1] - pattern[i] for i in range(len(pattern) - 1)]\n    \n    # Observing the pattern shows that increases of 500 and 250 alternate, starting with 500.\n    # After 3745, the next increment should be by 250 to follow the pattern (500, -200, 500, -200, ...)\n    missing_number = pattern[3] - 250\n    \n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n\n    return h_value[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + 26, second_hour)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    women, men = symbols('women men')\n    \n    eq1 = Eq(women, 4 * men)  # 4 times as many women as men\n    eq2 = Eq(2 * women + 5 * men, 182)  # total mini cupcakes eaten\n    \n    answers = solve((eq1, eq2), (women, men))\n    \n    return answers[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85  # diameter of each coin in cm\n    num_coins = 11  # number of coins\n\n    # The first and last coins contribute fully to the length of the row.\n    # The coins in between each contribute with only 1 edge to the length (i.e., their radius).\n    total_length = coin_diameter + (num_coins - 1) * (coin_diameter / 2)\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    # Given sequence details\n    first_term = 5\n    second_term = 8\n    third_term = 11\n    total_terms = 14\n\n    # Finding the common difference\n    common_difference = second_term - first_term\n\n    # Using the formula for the nth term of an arithmetic sequence: nth_term = first_term + (n-1)*common_difference\n    # Finding the last term\n    last_term = first_term + (total_terms - 1) * common_difference\n\n    # Using the formula for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    sum_sequence = total_terms / 2 * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20\n    denominator = 12\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    # Number of participants\n    participants = 10\n    # Using the combination formula for handshakes, C(n, 2) = n! / (2! * (n - 2)!)\n    # In this case n = 10\n    ans = (participants * (participants - 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # Subtract one because in a circular arrangement, the starting point is arbitrary\n    num_orders = factorial(num_people - 1)\n    return num_orders\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of a number raised to any power will repeat in a cycle.\n    # For 2: the last digits repeat in a cycle as 2, 4, 8, 6 (and then back to 2)\n    # Since 2017 % 4 = 1, the last digit for 2**2017 is the same as 2**1 which is 2\n    last_digit_of_2 = 2\n\n    # For 3: the last digits repeat in a cycle as 3, 9, 7, 1 (and then back to 3)\n    # Since 2017 % 4 = 1, the last digit for 3**2017 is the same as 3**1 which is 3\n    last_digit_of_3 = 3\n\n    # The final last digit is just the product of the two last digits\n    last_digit = (last_digit_of_2 * last_digit_of_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    # Let x be the initial number of ants\n    x = symbols('x')\n    \n    # According to the problem, 3/4 of the ants are swept into the neighbor’s house\n    # So, the remaining ants in the kitchen would be 1 - 3/4 = 1/4 of x\n    remaining_ants = x * Rational(1, 4)\n    \n    # Out of these remaining ants, 2/5 run out of the kitchen\n    # So the ants left in the kitchen are 1 - 2/5 = 3/5 of remaining_ants\n    ants_after_fear = remaining_ants * Rational(3, 5)\n    \n    # Jerome adds 185 hungry ants to the kitchen\n    ants_after_addition = ants_after_fear + 185\n    \n    # Equation for the final number of ants being twice the original number\n    equation = Eq(ants_after_addition, 2 * x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n  \n    return solution[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = (books_day1 + books_day2) * book_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    ans = 6342 // 7\n    return ans\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a and the common difference be d\n    a, d = symbols('a d')\n    \n    # The sum of an arithmetic sequence can be found using the formula: S_n = n/2 * (2a + (n-1)d)\n    # For the first four terms (n=4)\n    sum_first_four = 4 / 2 * (2 * a + (4 - 1) * d)\n    \n    # For the last four terms, the terms are a+4d, a+5d, a+6d, a+7d (n=4)\n    sum_last_four = 4 / 2 * (2 * (a + 4*d) + (4 - 1) * d)\n\n    # According to the question, the sum of the first four terms is 32 less than the sum of the last four terms.\n    equation = Eq(sum_first_four, sum_last_four - 32)\n    \n    # Solve for the common difference d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    current_term = 8  # Since the last shown term is 7^2, the next term is 8^2\n    next_number = current_term ** 2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens_given = pens_per_friend * number_of_friends\n\n    return total_pens_given\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    number = 1\n    for _ in range(2022 - 1):\n        number = 2 * number + 4\n        if number >= 100:\n            number %= 100\n    return number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    # Define the rate at which each light flashes per minute\n    red_flash_rate_per_minute = 4\n    green_flash_rate_per_minute = 6\n\n    # Find the least common multiple of the two flash rates\n    lcm_flashes_per_minute = lcm(red_flash_rate_per_minute, green_flash_rate_per_minute)\n\n    # The lights will flash together every lcm_flashes_per_minute / red_flash_rate_per_minute minutes for the red light\n    # and lcm_flashes_per_minute / green_flash_rate_per_minute minutes for the green light\n\n    # Calculate how many times the lights flash together in one minute\n    flashes_together_per_minute = lcm_flashes_per_minute // red_flash_rate_per_minute\n\n    # Calculate the total number of times the lights flash together in one hour\n    flashes_together_per_hour = flashes_together_per_minute * 60\n    \n    # Add 1 because we need to include the first flash at the beginning\n    return flashes_together_per_hour + 1\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 14):  # 41-7*2=27, since 3a<=27, a has to be less than 14\n        for b in range(2, 41):  # b has to be a prime number less than 41\n            if isprime(a) and isprime(b) and (3 * a + 7 * b == 41):\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n\n    cost_price = selling_price / (1 + profit_percentage / 100)\n\n    desired_profit = 5000\n    new_selling_price = cost_price + desired_profit\n    new_profit_percentage = (desired_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # Let total_volume be the total volume of the drink\n    # Since water makes up 3/5 of the drink, we can represent juice as 2/5 of the drink\n    # juice_volume + water_volume = total_volume\n    # 120ml (juice) = 2/5 * total_volume\n    # Solving for total_volume gives us:\n    total_volume = 120 * 5 / 2\n\n    # Now, we can find out how much water is in one bottle\n    water_volume_one_bottle = (3 / 5) * total_volume\n\n    # For 6 bottles, the water needed will be 6 times the water_volume_one_bottle\n    water_volume_six_bottles = water_volume_one_bottle * 6\n\n    return water_volume_six_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    \n    # Simon and friend walk away for 10 minutes\n    simon_distance = simon_speed * 10\n    friend_distance = friend_speed * 10\n    \n    # Simon runs back to school at twice his original speed for (simon_distance / (2 * simon_speed)) minutes\n    simon_return_time = simon_distance / (2 * simon_speed)\n    \n    # Friend continues to walk during the time Simon returns\n    additional_friend_distance = friend_speed * simon_return_time\n    \n    # Total distance friend is from school\n    total_friend_distance = friend_distance + additional_friend_distance\n    \n    return total_friend_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm, 0\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if s != 0 and m != 0 and send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 2 + 2 + 2 + 1  # two bells, two stars, two red balls, one green ball\n    ways_to_arrange_all = factorial(total_balls)\n    identical_items_divider = factorial(2) ** 3  # factorial(2) for each type of identical item\n\n    # Divide the total arrangements by the number of arrangements for the identical items\n    ans = ways_to_arrange_all // identical_items_divider\n\n    return ans\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # List of times each person takes\n    times = [1, 2, 5, 10]\n    # Since the two slowest people should be paired, send Mary and Rose together with the two faster ones shuttling\n    # Fastest person goes with each person to the other side and comes back alone to bring the flashlight. \n    total_time = (times[0] + 2 * times[1] + times[3])\n    return total_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # litres\n    container_size = 0.25 * initial_volume  # proportion of the dispenser size\n    cup_volume_ml = 150  # millilitres\n    num_cups = 14\n    \n    # Convert cup volume to litres\n    cup_volume_l = (cup_volume_ml / 1000) * num_cups  # litres\n    \n    # Calculate the remaining water\n    remaining_water = initial_volume - (container_size + cup_volume_l)\n    \n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    # In this case, we are looking for the number of derangements for 7 friends\n    count = derangement(7)\n    return count\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"2{i}{j}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:  # Make sure n is less than 100\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n    ginny_time = harry_time / harry_speed_ratio * ginny_speed_ratio\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let x be the original number of pages Anny writes per day\n    # Anny can finish her homework in 8 days, then the total pages is 8 * x\n    # If she writes 2 more pages per day, she can finish in (8 - 2) days, total pages is (8 - 2) * (x + 2)\n    # Setting up the equation: 8 * x = (8 - 2) * (x + 2)\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8 * x, (8 - 2) * (x + 2))\n\n    pages_per_day = solve(equation, x)\n\n    total_pages = pages_per_day[0] * 8  # Total pages is original rate times the 8 days\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate is 5 loaves in 20 minutes\n    # Bud's rate is 3 loaves in 15 minutes\n\n    # Calculate loaves per minute for each\n    pip_rate = 5 / 20\n    bud_rate = 3 / 15\n\n    # Total minutes\n    total_minutes = 40\n\n    # Total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_minutes\n\n    # Total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_minutes\n\n    # Total loaves baked together in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The house value increased by 10% to reach £11,000 last year.\n    # Let's find the value before the increase.\n    value_before_increase = 11000 / 1.1\n    \n    # This year, the house loses 10% of its value.\n    # Let's calculate the value after the decrease.\n    value_after_decrease = value_before_increase * 0.9\n\n    # Now, let's calculate the profit or loss by subtracting the original price from the current value.\n    # The original price is the value before increase.\n    profit_or_loss = value_after_decrease - value_before_increase\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Yohan may pick a red and a black sock in the worst case before he starts picking white socks\n    red_socks = 10\n    black_socks = 10\n    # To guarantee a pair of white socks, he must pick at most all red and black socks and then two white socks\n    max_socks = red_socks + black_socks + 2\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # You can substitute any value for 'a' to simplify the expression\n    ans = (12 * a) / 4 + (2 * a) * 5\n    return ans\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expr = (6 * d) + (5 * d) - d\n    ans = expr.simplify()\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Let x be the total number of cookies Richard had originally\n    # Equation representing the problem\n    equation = Eq(x * (1 - (3/8) - (1/6)), 33)\n\n    # Solve the equation for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # The list to hold the sequence of numbers\n    sequence = []\n    \n    # Generate the sequence according to the pattern\n    for number in range(1, 10):\n        sequence.extend([number] * (number + 2))\n\n    # Find the middle index of the sequence\n    middle_index = len(sequence) // 2\n\n    # If the sequence length is odd, return the middle number\n    if len(sequence) % 2 == 1:\n        median = sequence[middle_index]\n    # If the sequence length is even, return the average of the two middle numbers\n    else:\n        median = (sequence[middle_index - 1] + sequence[middle_index]) / 2\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq((number + 3) * 5, 35)\n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2020, 5, 5)  # Using 2020 as an example year which has 5th May on Monday\n    end_date = datetime(2020, 6, 7)\n    count_sundays = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # 6 represents Sunday\n            count_sundays += 1\n        start_date += timedelta(days=1)\n\n    return count_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    red_initial, white_initial = symbols('red_initial white_initial', integer=True)\n    red_pip, white_bud = symbols('red_pip white_bud', integer=True)\n\n    # Initial ratio of red to white marbles\n    equation1 = Eq(red_initial / white_initial, 3 / 2)\n\n    # Ratio after Pip adds red balls\n    equation2 = Eq((red_initial + red_pip) / white_initial, 5 / 3)\n\n    # Ratio after Bud adds white balls\n    equation3 = Eq((red_initial + red_pip) / (white_initial + white_bud), 5 / 4)\n\n    # Bud puts 100 more balls than Pip\n    equation4 = Eq(white_bud, red_pip + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_pip, white_bud))\n\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    number_of_buckets = barrel_capacity // bucket_capacity\n\n    return number_of_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # total flour in kg\n    num_packets = 25  # number of packets\n\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # The divisibility rule for 3 is that the sum of all digits must be divisible by 3.\n    # The divisibility rule for 4 is that the last two digits must be divisible by 4.\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        # Check divisibility by 3\n        if sum(int(digit) for digit in str(number)) % 3 == 0:\n            # Check divisibility by 4 using the last two digits\n            last_two_digits = int(str(number)[-2:])\n            if last_two_digits % 4 == 0:\n                return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    # Let x be the common multiple of the ratios\n    cookies_brownies_before = 4 + 3  # Total number of parts before\n    cookies_brownies_after = 12 + 7  # Total number of parts after\n    \n    # Given that the number of cookies remains the same, we have the equations:\n    # 4x/cookies_brownies_before = 12x/cookies_brownies_after\n    # 3x/cookies_brownies_before - 6 = 7x/cookies_brownies_after\n    \n    # From the first equation, we can find the ratio of x value before and after giving away the brownies\n    x_ratio = cookies_brownies_after / cookies_brownies_before\n    \n    # Given the second equation, solve for x:\n    # 3x - 6 * x_ratio = 7x\n    # 3x - 12 = 7x  (since x_ratio is 19/7)\n    # 4x = 12\n    # x = 3 (This is the multiplier for the number of cookies and brownies)\n    \n    # Calculate the total number of cookies and brownies\n    total_cookies = 4 * x\n    total_brownies = 3 * x + 6  # added back the given away brownies\n    \n    return total_cookies + total_brownies\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # The original number of companies\n    original_companies = 4\n    # The time taken by the original number of companies to build the expressway\n    original_days = 5\n    # Length of the expressway built by the original number of companies\n    original_length = 900\n\n    # The new number of companies\n    new_companies = 6\n    # Length of the expressway to be built by the new number of companies\n    new_length = 5400\n\n    # Calculate the work rate of one company per day\n    work_rate_per_company_per_day = original_length / (original_companies * original_days)\n\n    # Total work rate needed for the new project\n    total_work_rate_for_new_length = new_length / work_rate_per_company_per_day\n\n    # Calculate the number of days 6 companies will take to complete the new project\n    days_needed = total_work_rate_for_new_length / new_companies\n\n    return days_needed\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Initial purchase at $10\n    buy1 = 10\n    # Sold at $20, profit is 20 - 10\n    sell1 = 20\n    profit1 = sell1 - buy1\n\n    # Bought back at $30\n    buy2 = 30\n    # Sold at $40, profit is 40 - 30\n    sell2 = 40\n    profit2 = sell2 - buy2\n\n    # Total profit is the sum of the two individual profits\n    total_profit = profit1 + profit2\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25  # This is the step between terms in the sequence\n\n    # To find the first term, we work our way back from the tenth term\n    first_term = tenth_term - (9 * common_difference) # 9 steps back to get to the first term\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    all_cards = set(range(1, 9))  # Set of all cards 1 through 8\n    max_card_player_two = 0\n    \n    # Find all possible combinations for Player One that sum to 23\n    from itertools import combinations\n    for player_one_cards in combinations(all_cards, 4):\n        if sum(player_one_cards) == 23:\n            player_two_cards = all_cards - set(player_one_cards)\n            max_card_player_two = max(max_card_player_two, max(player_two_cards))\n            \n    return max_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, each pair has 2 shoes\n    time_per_shoe = 2    # minutes to clean one shoe\n    cobblers = 2         # number of cobblers\n\n    # Both cobblers work at the same time, so we divide the total work by the number of cobblers\n    time = (total_shoes * time_per_shoe) / cobblers\n\n    return time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum([sum([i**2 for i in range(1, j+1)]) for j in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    marks_per_correct = 4\n    marks_per_wrong = -1\n    total_score = 168\n    \n    # Let x be the number of correct answers\n    # Then (total_questions - unattempted_questions - x) gives the number of wrong answers.\n    # So, the total score will be:\n    # x * marks_per_correct + (total_questions - unattempted_questions - x) * marks_per_wrong = total_score\n    \n    # We solve for x:\n    x = (total_score + (total_questions - unattempted_questions) * marks_per_wrong) / (marks_per_correct - marks_per_wrong)\n    return int(x)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n\n    dumplings_to_give = luna_dumplings - dumplings_each\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    whole_number = (two_thirds * 3) / 2\n    three_quarters = (whole_number * 3) / 4\n\n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:\n            continue\n        CBCD = C*1001 + B*100 + D*10\n        CDBC = C*1000 + D*100 + B*10 + C\n        BDEC = B*1000 + D*100 + E*10 + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # The least common multiple of the pack sizes is the minimum number of markers\n    # he can purchase of each type while maintaining the same number of packs\n    pack_sizes = [6, 8, 9, 15]\n    lcm_pack_sizes = lcm(*pack_sizes)\n\n    # He needs at least 1000 markers, so we find the smallest multiple of lcm_pack_sizes\n    # that is greater than or equal to 1000\n    min_markers = lcm_pack_sizes\n    while min_markers < 1000:\n        min_markers += lcm_pack_sizes\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Treating the three vowels AEE as one unit, we have 8 units total: [AEE], C, H, L, L, N, G\n    # Calculate the permutations of these 8 units\n    # Note: We have to divide by 2! to account for the two Ls which are indistinguishable\n    units_perm = factorial(8) // factorial(2)\n\n    # Now calculate the permutations of AEE\n    # Since E appears twice, we divide by 2! to account for the repetition\n    vowels_perm = factorial(3) // factorial(2)\n\n    # The total number of ways is the product of units_perm and vowels_perm\n    total_ways = units_perm * vowels_perm\n\n    return total_ways\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    total_months = 12\n\n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Since the divisor is equal to the quotient, let's consider the smallest case\n    # If the quotient is 1, the divisor is also 1, but this would lead to a dividend less than the remainder, which is not valid\n    # Let's try with a quotient of 2 (the next smallest integer), which gives the smallest possible dividend in this situation\n    quotient = 2\n    divisor = quotient\n    \n    # The dividend is equal to divisor times quotient plus remainder\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n'))\n\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n    \n    for sol in solutions:\n        total_vehicles = sol[cars] + sol[bikes] + sol[lorries]\n        if total_vehicles % 2 == 0 and total_vehicles < 100:\n            return sol\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    common_diff = 2\n    n = 12\n\n    nth_term = first_term + (n - 1) * common_diff\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n    total_check_in_in_16_min_one_entrance = 16 * check_in_per_entrance_per_minute\n    total_visitors_after_16_min = 16 * visitors_per_minute\n    left_visitors_with_one_entrance = total_visitors_after_16_min - total_check_in_in_16_min_one_entrance\n    \n    # With two entrances, doubled the check-in capacity\n    check_in_per_2_entrances_per_minute = check_in_per_entrance_per_minute * 2\n    # Calculate time required for the leftover visitors from the first 16 minutes\n    time_for_left_visitors_with_2_entrances = left_visitors_with_one_entrance / check_in_per_2_entrances_per_minute\n    # After 16 min, line is cleared at a rate of 25 more visitors per minute than are joining the line\n    minutes_until_line_clears = time_for_left_visitors_with_2_entrances + (visitors_per_minute / (check_in_per_2_entrances_per_minute - visitors_per_minute))\n    \n    return minutes_until_line_clears\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        if (245 * p) ** (1/3) == int((245 * p) ** (1/3)):\n            break\n        p += 1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = 0.10 * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = 0.20 * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # The decimal part of 1/3 is repeating '3's\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    progress_per_day = climb_per_day - slide_per_night\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    subtracted_number = final_number - 12\n    original_number = subtracted_number / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    original_ratio = Eq(oranges / lemons, 3/5)\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    result = 8102 - 2018\n    return result\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits, and each student can choose from 1 to 3 types.\n    # We need to calculate the total combinations of choices.\n    # For each fruit, a student can either choose it or not, giving us 2 choices per fruit.\n    # However, choosing none is not an option, so we subtract 1 for the empty set.\n    total_combinations = (2**3) - 1\n    \n    # By Pigeonhole principle, to ensure that there is at least one duplicate combination,\n    # we need one more student than the total combinations.\n    students_needed = total_combinations + 1\n\n    return students_needed\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount = 0.10  # 10% discount\n\n    discounted_price = original_price - (original_price * discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    amount_spent = 10  # 10p spent by Avril\n    fraction_of_total = 1 / 4  # one-quarter of her money\n\n    total_money = amount_spent / fraction_of_total\n\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    total_legs = 32\n    \n    # Ducks have 2 legs, parrots have 2 legs, rabbits have 4 legs, cats have 4 legs\n    ducks_legs = ducks * 2\n    parrots_legs = parrots * 2\n    rabbit_legs = rabbit * 4\n    \n    # Subtract the known number of legs from the total to find the number of legs that cats have\n    cats_legs = total_legs - (ducks_legs + parrots_legs + rabbit_legs)\n    \n    # Since each cat has 4 legs, divide the number of cat legs by 4 to find the number of cats\n    cats = cats_legs // 4\n\n    return cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    class_a = 45\n    class_b = 75\n    class_c = 210\n\n    greatest_common_divisor = gcd(gcd(class_a, class_b), class_c)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n    \n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n    \n    current_ages = solve((equation1, equation2), (judy_age, father_age))\n    \n    judy_current = current_ages[judy_age]\n    father_current = current_ages[father_age]\n    \n    equation3 = Eq(father_current - years_ago, 4 * (judy_current - years_ago))\n    \n    years_ago_solution = solve(equation3, years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    matches = comb(num_teams, 2)  # Combination of 11 teams taken 2 at a time\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the older brother and y the current age of the younger brother\n    x, y = symbols('x y')\n    \n    # When the older brother was the same age as the younger brother's current age, the difference in their ages was 12\n    equation1 = Eq(x - y, 12)\n    \n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27\n    # This means that the difference in time it will take for the younger brother to reach the older brother's current age is also 12 years (as their age difference does not change).\n    equation2 = Eq(x + 12, 27)\n    \n    # Now, we solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 6 * 8 * 9 * 15 // (2 * 2 * 3 * 3)  # Least Common Multiple of 6, 8, 9, and 15\n    min_markers = (1000 // lcm) * lcm\n    if min_markers < 1000:\n        min_markers += lcm\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    # let x be the number of rooms\n    # let y be the total number of students\n    \n    # if 4 people per room, 40 students don't have dormitories:\n    # y = 4x + 40\n    \n    # if 6 people per room, 24 beds are vacant:\n    # y = 6x - 24\n    \n    # equating both expressions for y gives:\n    # 4x + 40 = 6x - 24\n    # solving for x:\n    x = (40 + 24) / (6 - 4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    eq1 = Eq(A, B + 25)\n    eq2 = Eq(A + 35, 6 * B)\n    \n    solutions = solve((eq1, eq2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values in the problem\n    tenth_term = 23\n    fifteenth_term = 38\n    # Calculate the common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = a + (n - 1) * d\n    # where a is the first term, n is the term number, and d is the common difference\n    # We calculate the first term (a):\n    first_term = tenth_term - (10 - 1) * common_difference\n    # Now we can find the 102nd term using the first term and common difference\n    hundred_second_term = first_term + (102 - 1) * common_difference\n    # Return the result\n    return hundred_second_term\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_portion = 3 / 5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_portion\n    sweets_left_over = total_sweets - sweets_eaten\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n    years_until_jane_target_age = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_target_age\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for i in range(10, 21):\n        if i % 4 == 0 and 36 % i == 0:\n            return i\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x) ** 2, 25)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'cp' be the cost price\n    cp = symbols('cp')\n\n    # Marked price is 120% of cost price\n    marked_price = 1.2 * cp\n\n    # Selling price is 80% of the marked price\n    selling_price = 0.8 * marked_price\n\n    # Loss is given by cost price - selling price\n    loss = cp - selling_price\n\n    # The loss equates to $40\n    equation = Eq(loss, 40)\n\n    # Solve the equation to find the cost price\n    cost_price = solve(equation, cp)\n\n    return cost_price[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    subtract_from = (7 + 3) * 11\n    subtract = 7 + (3 * 11)\n    ans = subtract_from - subtract\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate of filling the tank for X and Y together\n    rate_XY = 1 / 6\n\n    # Rate of filling the tank for X alone\n    rate_X = 1 / 10\n\n    # Use the Inclusion-Exclusion Principle to find the rate of Y\n    rate_Y = rate_XY - rate_X\n\n    # Find the time for Y to fill the tank, which is the inverse of rate of Y\n    time_Y = 1 / rate_Y\n\n    return time_Y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    equation1 = Eq(xuanrui + yaokuan, 708)\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7) * yaokuan)\n\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percent = 12\n    discount_amount = usual_price * (discount_percent / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum((math.factorial(i) for i in range(1, 9)))\n    last_two_digits = factorial_sum % 100\n    return last_two_digits\n\nimport math\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_in_cup_A = 300 * 0.20\n    sugar_in_cup_B = 300 * 0.30\n\n    # Calculate the total amount of sugar and the total volume of the mixture\n    total_sugar = sugar_in_cup_A + sugar_in_cup_B\n    total_volume = 300 + 300\n\n    # Calculate the sugar concentration in the mixture\n    sugar_concentration = total_sugar / total_volume\n\n    return sugar_concentration\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    \n    # Equation representing the total number of marbles\n    equation_total = Eq(ahmad + ryan, 1442)\n    \n    # Equation representing Ahmad having 6 times as many marbles as Ryan\n    equation_ratio = Eq(ahmad, 6 * ryan)\n    \n    # Solve the equations to find the number of marbles Ahmad and Ryan have\n    solutions = solve((equation_total, equation_ratio), (ahmad, ryan))\n    \n    # Compute the number of marbles Ahmad must give to Ryan to have equal amounts\n    marbles_to_give = (solutions[ahmad] - solutions[ryan]) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return float(3/10 + 1/100 + 7/1000)\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars = 2.50\n    dollars = 1000\n    pounds = dollars / pounds_to_dollars\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    exchanged_notes = 175\n\n    # let x be the number of $10 notes and y be the number of $2 notes originally\n    # after exchanging, each $10 note becomes 5 $2 notes, so the total number of $2 notes becomes x*5 + y\n    # we have two equations:\n    # x + y = total_notes (95)\n    # 5x + y = exchanged_notes (175)\n    \n    # we can solve for x by subtracting the first equation from the second\n    x = exchanged_notes - total_notes\n    y = total_notes - x\n    \n    return y\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_points = 44\n    correct_points = 6\n    incorrect_penalty = -2\n    total_questions = 10\n\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    # We know that x + y = total_questions and correct_points*x + incorrect_penalty*y = total_points\n    # Since Eddie answered all questions, y = total_questions - x\n    # We can substitute y into the second equation: correct_points*x + incorrect_penalty*(total_questions - x) = total_points\n\n    for x in range(total_questions + 1):\n        y = total_questions - x\n        if correct_points * x + incorrect_penalty * y == total_points:\n            return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    train_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n\n    remaining_length = train_length - head_length\n    carriage_total_length = carriage_length + space_between\n\n    num_carriages = remaining_length // carriage_total_length + 1  # +1 for the head of the train\n\n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    ones = 0\n    tens = 0\n    hundreds = 0\n    \n    # Count '8' in ones place (from 1-288)\n    for i in range(1, 289):\n        if i % 10 == 8:\n            ones += 1\n\n    # Count '8' in tens place (from 1-288)\n    for i in range(1, 289):\n        if (i // 10) % 10 == 8:\n            tens += 1\n\n    # Count '8' in hundreds place (from 1-288)\n    for i in range(1, 289):\n        if (i // 100) == 8:\n            hundreds += 1\n\n    total = ones + tens + hundreds\n    \n    return total\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    points = 82\n    correct_points = 2\n    incorrect_points = -1\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == points:\n            return correct_answers\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    y = 0\n    while True:\n        x = (25 * y + 8) / 24\n        if x.is_integer():\n            return int(x)\n        y += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kilogram for the 2.5 kg bag\n    cost_per_kg_1 = 5 / 2.5\n    # Calculate the price per kilogram for the 4 kg bag\n    cost_per_kg_2 = 7.7 / 4\n    \n    # Compare the prices to determine better value\n    # We'll return the cost per kg of the better value\n    if cost_per_kg_1 < cost_per_kg_2:\n        return \"2.5kg bag\"\n    else:\n        return \"4kg bag\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    num_books = 5\n    price_per_book = 4.50\n    total_cost = num_books * price_per_book\n    \n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Given congruences: x ≡ 2 (mod 4), x ≡ 2 (mod 5), x ≡ 8 (mod 9)\n    congruences = [(2, 4), (2, 5), (8, 9)]\n\n    # Using the Chinese Remainder Theorem to find the solution\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    total_amount = 1\n    fraction_of_total = (3/4) * (2/5)\n    amount = total_amount * fraction_of_total\n    return amount\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    empty_plus_quarter_full = 250\n    empty_plus_three_quarters_full = 350\n\n    three_quarters_full = empty_plus_three_quarters_full - empty_plus_quarter_full\n    empty_jar = empty_plus_quarter_full - three_quarters_full / 3\n\n    return empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Assuming \"both ends will have trees\" means a tree at each end and then at every interval\n    # Calculate the number of trees on one side of the road\n    trees_per_side = (road_length // interval) + 1\n\n    # Since trees are planted on both sides of the road, multiply by 2\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    # Define the distances for each color\n    red = 5\n    blue = 10\n    green = 12\n\n    # Compute least common multiple\n    ans = lcm(red, blue, green)\n\n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses * bus_length) + (distance_between_buses * (number_of_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    mistaken_equation = Eq(x / 4 - 25, 2021)\n    correct_equation = Eq(4 * x + 25, 'y')\n    \n    mistaken_solution = solve(mistaken_equation, x)\n    correct_value = mistaken_solution[0].evalf()  # convert to numerical value if needed\n    \n    correct_answer = solve(correct_equation.subs(x, correct_value))\n    \n    return correct_answer[y]\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    number_of_blocks = 42\n    \n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * number_of_blocks\n    \n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = int(f\"2{E}3{E}2\")\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    x, y = symbols('x y')\n    equation = Eq(x / 5, y / 3)\n    result = solve(equation.subs(x, 5), y)\n    proportional_relationship = \"directly\"\n    y_when_x_is_5 = result[0]\n    \n    return proportional_relationship, y_when_x_is_5\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Assuming a, b are the first and second numbers of the sequence\n    # Then the sequence is: a, b, a+b, 2a+3b, 3a+5b, 5a+8b\n    # Given 2a+3b = 6 (fourth number) and 5a+8b = 15 (sixth number)\n    # We can find a and b using simultaneous equations,\n    # Then calculate the seventh number in the sequence: 8a+13b\n\n    # Coefficients for a and b in the two given equations\n    coefficients = [[2, 3], [5, 8]]\n    # Right hand side numbers of the two given equations\n    constants = [6, 15]\n\n    # Solving for a and b\n    from numpy.linalg import solve\n    a, b = solve(coefficients, constants)\n\n    # The seventh number in the sequence is 8a + 13b\n    seventh_number = 8 * a + 13 * b\n\n    return seventh_number\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50\n    discount_price = selling_price * 0.90\n    profit = discount_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 1\n    while True:\n        # Calculate the number of students with m^2 square and 5 left out\n        original_students = m**2 + 5\n        # Calculate the number of students after 18 join\n        new_students = original_students + 18\n        # Check if the new number of students forms a perfect square\n        n = int(new_students**0.5)\n        if n**2 == new_students:\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    return sum([9, 11, 8, 12, 7, 13, 6, 14, 5, 14])\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    gcf_ab = gcd(class_a, class_b)\n    gcf_abc = gcd(gcf_ab, class_c)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60 # Convert 5 p.m. to minutes\n    badminton_duration = 45 # Badminton duration in minutes\n    jogging_duration = 30 # Jogging duration in minutes\n\n    end_time = start_time + badminton_duration + jogging_duration\n    end_hour = end_time // 60 # Convert the final time in minutes back to hours\n    end_minutes = end_time % 60 # Get the leftover minutes\n\n    # Since the end_hour could be greater than 12, getting the PM time\n    if end_hour > 12:\n        end_hour -= 12\n\n    # The answer format should be in the format of time, like \"6:15 PM\", so add the PM\n    ans = f\"{end_hour}:{end_minutes:02d} PM\"\n    return ans\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    changed_number = 16\n    total_numbers = 3\n\n    # Calculate the original sum of the numbers\n    original_sum = original_average * total_numbers  \n    # Calculate the new sum of the numbers after the change\n    new_sum = new_average * total_numbers\n    # Calculate the original number before it was changed to 16\n    original_number = original_sum - new_sum + changed_number\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    total_students = 36\n    class_avg = 89\n    girls_avg = 88\n    boys_avg = 91\n    \n    # Equation 1: Total average score (girls' average * number of girls + boys' average * number of boys)\n    equation1 = Eq(girls_avg * girls + boys_avg * boys, class_avg * total_students)\n    \n    # Equation 2: Total number of students\n    equation2 = Eq(girls + boys, total_students)\n    \n    solution = solve((equation1, equation2), (girls, boys))\n    \n    return solution[girls]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    questions_answered = total_questions - 1  # Rex answered all but one question\n\n    # Assuming all answered questions were correct\n    max_score = questions_answered * points_correct\n\n    # Calculate the number of incorrect answers by calculating the difference\n    # between the assumed maximum score and the actual score. Then divide by \n    # the point difference between a correct and incorrect answer.\n    incorrect_answers = (max_score - rex_score) / (points_correct - abs(points_incorrect))\n\n    # Calculate the number of correct answers\n    correct_answers = questions_answered - incorrect_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # There are 8 corners in a cube (3D shape), and for each corner,\n    # there are 3 edges connected to it. In a correctly constructed graph\n    # of a cube, every edge is counted twice because it connects two corners.\n    # Therefore, to find the number of edges in a cube,\n    # we can use the formula: edges = (corners * degree) / 2\n    corners = 8\n    degree = 3\n    edges = (corners * degree) // 2\n\n    return edges\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Mass of sugar in each solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Total mass of sugar and solution\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n    total_solution = 800 + 200 + 300\n\n    # Concentration of the resulting sugar solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill, andrew + 18)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_in_first_punch = 20 * 0.35\n    fruit_juice_in_second_punch = 30 * 0.60\n\n    total_fruit_juice = fruit_juice_in_first_punch + fruit_juice_in_second_punch\n    concentration_of_new_mixture = (total_fruit_juice / total_volume) * 100\n\n    return concentration_of_new_mixture\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of badges Wendy made\n    x = symbols('x')\n    \n    # On the first day, 5/7 of the badges were sold, leaving 2/7\n    remaining_after_first_day = (2/7) * x\n    \n    # On the second day, 1/3 of the remaining badges were sold\n    remaining_after_second_day = (2/3) * remaining_after_first_day\n    final_count = remaining_after_second_day + 354\n    \n    # In the end, Wendy had 3 times the number of badges she made initially\n    equation = Eq(final_count, 3 * x)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Smallest number will have 7 as its hundred's place\n    # Other digits must be within 4 of 7 and also 7 is the largest so it must be 3 or greater\n    for hundreds in [7]:\n        for tens in range(3, 8):\n            for units in range(3, 8):\n                if abs(hundreds - tens) <= 4 and abs(hundreds - units) <= 4 and abs(tens - units) <= 4:\n                    return hundreds * 100 + tens * 10 + units\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_number = \"0141705021\"\n    devil_number = \"4005220912\"\n\n    angel_counter = {digit: angel_number.count(digit) for digit in set(angel_number)}\n    devil_counter = {digit: devil_number.count(digit) for digit in set(devil_number)}\n\n    if angel_counter == devil_counter:\n        ans = \"Yes\"\n    else:\n        ans = ''.join(sorted(angel_number))\n\n    return ans\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # Number of players\n    players = 4\n    # In a knockout tournament, each round eliminates half of the players.\n    # Hence, the number of games in each round is half of the remaining players.\n    # To determine how many rounds are needed for a winner among 4 players:\n    # Round 1: 4/2 = 2 games, 2 winners proceed\n    # Round 2: 2/2 = 1 game, 1 winner is determined\n    rounds = 0\n    while players > 1:\n        games = players // 2\n        players = players - games\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n\n    by_A_or_B = total_exhibits - not_by_A - not_by_B\n    by_A_and_B = total_exhibits - (not_by_A + not_by_B - by_A_or_B)\n\n    return by_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # The worst case scenario to guarantee at least one ball of each color:\n    # He first picks all balls of one color, then all of another color.\n    # Only after this, he will be certain that the next pick will be of the third color.\n    # So he must pick all the blue balls (8) and all the red balls (10) to ensure the next will be green.\n    # Therefore, it is 8 (blue) + 10 (red) + 1 (to guarantee a green) = 19.\n\n    ans = 8 + 10 + 1\n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n            \nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\n              53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    for A in primes:\n        for B in primes:\n            if (8 * A - 3 * B) % 3 == 0:\n                return A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Calculate original price based on the value after the first year's increase\n    value_after_increase = 110000\n    increase_percentage = 0.10\n    original_value = value_after_increase / (1 + increase_percentage)\n\n    # Calculate the value after the second year's decrease\n    decrease_percentage = 0.10\n    value_after_decrease = value_after_increase * (1 - decrease_percentage)\n\n    # Calculate the profit or loss by comparing the final value with the original\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of groups: roses, jasmines, and daisy\n    num_groups = 3\n    \n    # Ways to arrange the groups\n    group_arrangements = factorial(num_groups)\n    \n    # Ways to arrange roses within their group\n    rose_arrangements = factorial(3)\n    \n    # Ways to arrange jasmines within their group\n    jasmine_arrangements = factorial(4)\n    \n    # The daisy is a single flower, so it only has one arrangement\n    \n    # Total number of arrangements\n    total_arrangements = group_arrangements * rose_arrangements * jasmine_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each = total_pupils // 2\n\n    return pupils_each\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n\n    # 1 x 2 x 3 x 4 x 5 x 6 = factorial(6)\n    multiple_of = factorial(6)\n\n    # 1 x 2 x 3 x 4 x 5 x 6 x 7 x 8 = factorial(8)\n    factor_of = factorial(8)\n\n    # To find the number of possible values of m, we need to find the number of factors of 'factor_of' that\n    # are multiples of 'multiple_of'. This means finding the factors of the quotient.\n    quotient = factor_of // multiple_of\n    \n    # Counting the number of factors of the quotient\n    factors_count = 0\n    for i in range(1, quotient + 1):\n        if quotient % i == 0:\n            factors_count += 1\n\n    return factors_count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_ = 60\n    # Starting with the smallest positive integer, which is 1, find the maximum\n    # length of consecutive integers that add up to less than or equal to the sum.\n    count = 0\n    current_sum = 0\n    for i in range(1, sum_ + 1):\n        current_sum += i\n        if current_sum > sum_:\n            break\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 20 / 100\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    rate_ml_per_min = 20\n    minutes_in_hour = 60\n    ml_in_litre = 1000\n    \n    leaked_ml_per_hour = rate_ml_per_min * minutes_in_hour\n    \n    leaked_litres_per_hour = leaked_ml_per_hour / ml_in_litre\n    \n    return leaked_litres_per_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        s, e, t, n = perm\n        # Check for leading zero conditions\n        if s == 0 or t == 0:\n            continue\n        see = s * 100 + e * 10 + e\n        ten = t * 100 + e * 10 + n\n        net = n * 100 + e * 10 + t\n        if see + ten == net:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    # We apply the Chinese Remainder Theorem. For the theorem to work, we are looking for a number that, when\n    # divided by 2, 3, 4, or 6 has a remainder of 1, and when divided by 7, has no remainder.\n    # Thus, we are looking for a number x such that:\n    # x % 2 = 1, x % 3 = 1, x % 4 = 1, x % 6 = 1, and x % 7 = 0\n    # Given the structure of the remainders, we can infer that the number must be one more than a multiple of the least common multiple (LCM) of 2, 3, 4, and 6.\n    # LCM of 2,3,4,6 is 12. So we start from 13 (since 12 + 1 = 13) and proceed in steps of 12 until we find a number that is also a multiple of 7.\n    # Because 7 is a prime number and doesn't share factors with 2,3,4 or 6, we are guaranteed to eventually find a solution.\n    \n    # Since the LCM of 2, 3, 4, and 6 is 12, we start with 13 and go up in steps of 12\n    n = 13\n    while n % 7 != 0:\n        n += 12\n\n    return n\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    height_diff = 30\n\n    mark_height = james_height + height_diff\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for watermelon and honeydew prices\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    # Equation representing the total cost\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    # Equation representing the cost ratio of honeydew to watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    # Return the price of a watermelon\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    socks_per_color = 4\n    num_colors = 3\n    # Since she can pick at most (socks_per_color - 1) of each color without getting a pair,\n    # and since there are num_colors colors, she must pick one more sock to ensure a pair.\n    socks_needed = (socks_per_color - 1) * num_colors + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    final_pieces = 16\n    cut_pieces = final_pieces - original_pieces\n    pieces_cut_into_three = cut_pieces // 2\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case: we take one apple of each color until we get 2 apples of the same color\n    # Since there are 4 red apples and 4 green apples, after taking out 1 red and 1 green,\n    # the next apple we take out must be of the same color as one we already have.\n\n    # To ensure we get 2 of the same color,\n    # we take 1 red apple (worst case, we're trying to avoid getting the same color),\n    # then 1 green apple,\n    # and finally, one more apple will guarantee we have 2 of the same color.\n\n    apples_needed = 1 + 1 + 1  # the third apple taken must be the same color as one of the first two\n\n    return apples_needed\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # declaring the symbols for x, y, z\n    x, y, z = symbols('x y z')\n\n    # equation of the given expression\n    equation = Eq(x**20 * y**15 * z**5, 243)\n\n    # since 243 is 3^5, we can express it in terms of its prime factors\n    factors_equation = Eq(x**20 * y**15 * z**5, 3**5)\n\n    # solving for x, y, z by assuming they are equal to 3^a, 3^b, 3^c respectively\n    sol = solve([x**20 - 3**a, y**15 - 3**b, z**5 - 3**c], (a, b, c))\n\n    # a, b, and c represent the powers of 3 in the prime factorization of x, y, z respectively\n    a = sol[a]\n    b = sol[b]\n    c = sol[c]\n\n    # calculating the value of the new expression by raising to the corresponding powers\n    value = (3**a)**8 * (3**b)**6 * (3**c)**2\n\n    return value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = 2/3 * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    total = sum(-number if number % 2 == 0 else number for number in range(1, 47))\n\n    return total\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expand the equation: 5*(6c-1) = -35\n    # 30c - 5 = -35\n\n    # Add 5 to both sides of the equation:\n    # 30c = -35 + 5\n    # 30c = -30\n\n    # Divide both sides by 30:\n    # c = -30 / 30\n    # c = -1\n    c = -1\n    \n    return c\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one book and one pencil box\n    book, pencil_box = symbols('book pencil_box')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    A = 1\n    for i in range(1, 2011):\n        A *= i\n        # Eliminate the trailing zeroes by taking out factors of 10\n        while A % 10 == 0:\n            A //= 10\n        # Keep only the last digit of A, since we are interested in the rightmost non-zero digit\n        A %= 10**10\n\n    ans = A % 10\n    return ans\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Initialize an empty list to store the sequence.\n    sequence = []\n    \n    # Appending the numbers according to the pattern.\n    for i in range(1, 9):\n        sequence.extend([i] * (i+1))  # i+1 times of i.\n    \n    # Sort the sequence to calculate the median.\n    sequence.sort()\n    \n    # Find the number of elements in the sequence.\n    n = len(sequence)\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (sequence[n//2 - 1] + sequence[n//2]) / 2\n    else:\n        median = sequence[n//2]\n        \n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    # Total height of six players\n    total_height_of_six = 150 * 6\n    \n    # Average height of four players\n    avg_height_of_four = 150 - 2\n    \n    # Total height of four players\n    total_height_of_four = avg_height_of_four * 4\n    \n    # Total height of the remaining two players\n    total_height_of_two = total_height_of_six - total_height_of_four\n    \n    # Average height of the remaining two players\n    avg_height_of_two = total_height_of_two / 2\n    \n    return avg_height_of_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    road_length = 500\n    meters_per_day = 50\n\n    days_needed = road_length / meters_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    from sympy import factorint\n\n    # The product of 42 and x equals to the square of 42\n    x = (42**2) // 42\n\n    # Factoring the product of 42 and y, all factors' exponents equal to 1\n    y = 1\n    while True:\n        factors = factorint(42 * y)\n        if all(value == 1 for value in factors.values()):\n            break\n        y += 1\n\n    # sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle_per_day_consumption = 10\n    number_of_cattles = 8\n    number_of_days = 4\n    \n    total_fodder = cattle_per_day_consumption * number_of_cattles * number_of_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8  # 1 dog = 8 rabbits\n    rabbit_to_chicken = 2  # 1 rabbit = 2 chickens\n    \n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens,\n    # 1 dog = 8 * 2 chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total number of marbles Larry had originally\n    total_marbles = symbols('total_marbles')\n\n    # Given that after giving away marbles he has 35 left\n    remaining_marbles = Eq((5/12)*total_marbles + 30 + 26 + 35, total_marbles)\n\n    # Solve the equation to find the total number of marbles\n    solution = solve(remaining_marbles, total_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of sweets Jess has as j and Jill has as l\n    j, l = symbols('j l')\n    \n    # Setting up the equations based on the problem statement\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(l, (6/5) * j)\n    \n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(l - 8, (4/7) * (j + 8))\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (j, l))\n    \n    # Calculate the total number of sweets\n    total_sweets = solution[j] + solution[l]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    concentration = 0.22  # The concentration of the sugar in the solution\n\n    # The weight of the sugar is the concentration multiplied by the total weight\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n\n    for i in range(1, 100):\n        digits = [int(d) for d in str(i)]\n        total_sum += sum(digits)\n    \n    return total_sum\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    total_money = 1848\n    ratio_money_pies_to_cakes = 15 / 7\n    ratio_pies_to_cakes = 4 / 1\n\n    # Let cost of a pie be x dollars, then cost of a cake is x+13\n    # Let the number of pies be 4y and number of cakes be y\n    # Money from pies: 4y * x, money from cakes: y * (x+13)\n    \n    # Total money from pies to total money from cakes is 15:7\n    # So 4y * x / (y * (x+13)) = 15/7\n    # Solving for x in terms of y gives us x = 7y[(15/7) - 1]/(4 - (15/7))\n    \n    # Total money collected is also the sum of money from pies and cakes.\n    # 4y * x + y * (x + 13) = 1848\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    x = (7 * y * (15 / 7 - 1)) / (4 - (15 / 7))\n    eq = Eq(4 * y * x + y * (x + 13), total_money)\n    y_value = solve(eq, y)[0]\n\n    # Number of cakes sold is y\n    return y_value\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given_away = 1 / 4\n    money_given_to_friend = total_money * part_given_away\n    return money_given_to_friend\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + \"1\") == 3 * int(\"1\" + str(num)):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.now()\n    years_ago = today.year - 38\n    if today.month < 6 or (today.month == 6 and today.day < 1):\n        years_ago -= 1\n    return years_ago\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n\n    remaining_length = original_length - cut_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    return sum(i**4 for i in range(1, 20))\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    even_digits = [0, 6, 8]\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            if perm[0] != 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0]\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Find the units digit of 9^2015 by finding its pattern\n    units_digit_9 = 9 ** 2015 % 10\n    # Find the units digit of 9^2016, which is just one 9 multiplied by the units digit of 9^2015\n    units_digit_9_2016 = (9 * units_digit_9) % 10\n    # Sum the units digits of 9^2015 and 9^2016\n    ans = (units_digit_9 + units_digit_9_2016) % 10\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of ways to arrange 5 men.\n    men_arrangement = factorial(5)\n\n    # Since no two women can stand next to each other,\n    # we can place each woman in the spaces between men and at the ends.\n    # This gives us 6 possible positions for the first woman (5 + 1),\n    # 5 for the second, and 4 for the third.\n    women_arrangement = factorial(6) // factorial(6 - 3)\n\n    # The total number of arrangements is the product of both arrangements.\n    total_arrangements = men_arrangement * women_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    # Define the symbolic variable\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total amount of money Hanson had initially\n    x = symbols('x')\n    \n    # After buying CDs, Hanson is left with 3/4 of his money minus $3\n    money_after_cds = (3/4) * x - 3\n    \n    # After buying batteries, Hanson is left with 2/5 of the remaining money minus $6\n    # And he's finally left with $24\n    equation = Eq((2/5) * money_after_cds - 6, 24)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # There will be only one solution as it is a linear equation\n    return solution[0]\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time_in_minutes = (11 * 60) + 50 - 15  # Convert 11:50 AM to minutes and adjust for slowness\n    half_hour_later_in_minutes = marc_time_in_minutes + 30  # Add half an hour in minutes\n\n    george_time_in_minutes = half_hour_later_in_minutes + 7  # Adjust for George's watch being fast\n\n    # Convert minutes back into hours and minutes\n    hours = george_time_in_minutes // 60\n    minutes = george_time_in_minutes % 60\n\n    # Adjust for the 12-hour clock format\n    if hours >= 12:\n        hours -= 12\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # Tax for the first $30000\n    tax_for_first_30000 = T / 100 * 30000\n\n    # Tax for the remaining income\n    tax_for_remaining = (T + 3) / 100 * (income - 30000)\n\n    # Total tax equation\n    total_tax_equation = Eq(tax_for_first_30000 + tax_for_remaining, (T + 1) / 100 * income)\n    \n    # Income is at least $30000, to avoid piecewise calculation\n    solutions = solve((total_tax_equation, income >= 30000), (T, income))\n\n    # Assuming the problem has a unique solution\n    return solutions[income]\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # Qiqi's speed in m/min\n    weiling_speed = 72  # Weiling's speed in m/min\n    weiling_late_time = 2  # Time Weiling leaves after Qiqi in minutes\n    weiling_arrive_before_time = 4  # Time Weiling arrives before Qiqi in minutes\n    \n    # Let's call the time Qiqi walks from the library to school t minutes.\n    # Then Weiling's walking time is (t - weiling_late_time - weiling_arrive_before_time) minutes.\n    # The distance traveled by Qiqi is qiqi_speed * t\n    # The distance traveled by Weiling is weiling_speed * (t - weiling_late_time - weiling_arrive_before_time)\n    # Since they both cover the same distance, we can set these two expressions equal to each other and solve for t.\n    # qiqi_speed * t = weiling_speed * (t - weiling_late_time - weiling_arrive_before_time)\n\n    # Rearrange the equation:\n    # qiqi_speed * t = weiling_speed * t - weiling_speed * (weiling_late_time + weiling_arrive_before_time)\n    \n    # Now, we isolate t on one side:\n    # t * (weiling_speed - qiqi_speed) = weiling_speed * (weiling_late_time + weiling_arrive_before_time)\n    \n    # Finally, we can solve for t\n    t = (weiling_speed * (weiling_late_time + weiling_arrive_before_time)) / (weiling_speed - qiqi_speed)\n    \n    # Use t to calculate the distance from the library to school\n    distance = qiqi_speed * t\n\n    return distance\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    total_amount = 540\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    jumps = 0\n    height_after_falls = (3 * jump_up) - (2 * fall_down)\n    \n    # Reaching 31 metres with increments of height_after_falls\n    while total_height > 0:\n        jumps += 3 # Three jumps at a time\n        total_height -= height_after_falls\n        if total_height <= jump_up:\n            # One last jump to reach or surpass the top\n            jumps += 1\n            break\n            \n    return jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_marks = 5\n    wrong_marks = -1\n    total_score = 90\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_marks + wrong * wrong_marks == total_score:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n    combined_rate = rate_a + rate_b\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Drawing all marbles of one color plus one will ensure at least one marble of a different color\n    # Start by drawing all marbles of the color there is the least of, which is 3 red marbles\n    # Then, draw all marbles of the next smallest color, which is 8 yellow marbles:\n    marbles_drawn = 3 + 8  # Red and yellow\n\n    # At this point, we have marbles of 2 different colors\n    # Now, we need to ensure we have marbles of the third and fourth color\n    # Drawing all but 3 of the remaining two colors will guarantee that we have at least 4 different colors\n    marbles_drawn += (12 - 1) + (9 - 1)\n\n    # Add an additional 1 marble to ensure the fourth color is drawn\n    marbles_drawn += 1\n\n    return marbles_drawn\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # negative because the sequence is decreasing\n\n    # Find the last positive term, which means solving for n in the equation:\n    # first_term + (n - 1) * difference > 0.\n\n    # Rearrange the inequality:\n    # n - 1 > -first_term / difference\n    # n > -first_term / difference + 1\n\n    last_positive_term_n = -first_term // difference + 1\n\n    return last_positive_term_n\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # The sum of the digits of a number must be divisible by 9 in order for the number to be divisible by 9.\n    \n    # Define the known part of the number\n    fixed_digits = [2, 0, 1, 9, 0, 4, 0, 6]\n    \n    # Calculate the sum of the known digits\n    sum_fixed_digits = sum(fixed_digits)\n    \n    # Find the missing digit A such that the entire number is divisible by 9\n    for A in range(10):\n        if (sum_fixed_digits + A) % 9 == 0:\n            return A  # Return the value of A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1, 1000):  # Starting the search range reasonably wide\n        num = i * 24  # Lowest common multiple of 3 and 8\n        if str(num).endswith('2'):\n            return num\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):  # Check all possible last digits (0 through 9)\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Daniel starts working on the project on 15th May\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    \n    # Three weeks preparation and writing time\n    preparation_days = 3 * 7  # Number of days in 3 weeks\n    \n    # End date is start_date + preparation_days\n    end_date = start_date + timedelta(days=preparation_days)\n    \n    # Format the end date to only get the day and the month\n    finish_date = end_date.strftime(\"%d/%m/%Y\")\n    \n    return finish_date\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi is 45 years old on 15th May 2002\n    # This means Gigi was born in 2002 - 45 = 1957\n    gigi_birth_year = 2002 - 45\n\n    # Jenny is 22 years old on 15th May 1995\n    # This means Jenny was born in 1995 - 22 = 1973\n    jenny_birth_year = 1995 - 22\n    \n    # We need to calculate Jenny's age when Gigi was 22.\n    # Gigi was 22 years old in 1957 + 22 = 1979\n    gigi_22_year = gigi_birth_year + 22\n\n    # Jenny's age at that time would be 1979 - Jenny's birth year\n    jenny_age_when_gigi_22 = gigi_22_year - jenny_birth_year\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from sympy import root, sqrt\n\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n\n    return round(float(result), 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    # Total number of apples\n    total_apples = 12\n    \n    # As apples need to be divided in two groups with different number of apples,\n    # we just need to figure out how many apples are in the smaller group.\n    # The smaller group can have a minimum of 1 apple and at maximum (total_apples - 1) / 2 apples\n    # (as the other group needs to have more).\n    ways = (total_apples - 1) // 2  # Integer division as we can only have whole apples\n    \n    return ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_current = 3\n    downstream_speed = speed_in_still_water + speed_current\n    distance = 140\n\n    time_taken = distance / downstream_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount = 0.15\n    sale_price = original_price * (1 - discount)\n\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    bracelet_quantity = 5\n    card_price = 1.98\n    card_quantity = 2\n\n    total_cost = (bracelet_price * bracelet_quantity) + (card_price * card_quantity)\n\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    num_cupcakes = 3\n    \n    total_cupcake_cost = num_cupcakes * cost_per_cupcake\n    cost_for_drinks = total_cost - total_cupcake_cost\n    cost_per_can = cost_for_drinks / 2\n    \n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        if correct * 5 - wrong * 2 == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import gcd\n    from fractions import Fraction\n    \n    # Determine the LCM of the first two traffic lights\n    # Convert minutes to seconds\n    first_traffic_light = 30  # seconds\n    second_traffic_light = 45  # seconds (0.75 minutes)\n    \n    # Calculate the LCM using gcd\n    lcm = (first_traffic_light * second_traffic_light) // gcd(first_traffic_light, second_traffic_light)\n    \n    # The three traffic lights turn green every 9 minutes or 540 seconds\n    # So we need to find a factor of 540 that is greater than or equal to 30 seconds which also satisfies\n    # being a multiple of the lcm of the first two traffic lights\n    nine_minutes_in_seconds = 9 * 60\n    \n    third_light_time = lcm\n    while third_light_time < nine_minutes_in_seconds:\n        if nine_minutes_in_seconds % third_light_time == 0 and third_light_time >= 30:\n            break\n        third_light_time += lcm\n    \n    return third_light_time\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    for a in range(1, 36):\n        for b in range(1, 36):\n            if 36 % (a + b) != 0 and 11 + b == 36:\n                total_pictures = a * b\n                full_rolls = total_pictures // 36\n                pics_on_last_roll = total_pictures % 36\n                return 36 - pics_on_last_roll\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # The differences between the terms are:\n    # 20 - 8 = 12\n    # 31 - 20 = 11\n    # 41 - 31 = 10\n    # 50 - 41 = 9\n    \n    # The pattern in the differences is decreasing by 1 each time. \n    # So the next difference should be 9 - 1 = 8.\n    \n    # The last number in the given sequence is 50, so to find the next number:\n    next_number = 50 + 8\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = 8\n\n    sum_of_numbers = mean_value * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # In the first pass, A can pass the ball to any of the 3 others.\n    first_pass_options = 3\n    # In the second pass, the person who got the ball from A can pass to any of the 2 others, excluding A.\n    second_pass_options = 2\n    # In the third pass, the person who got the ball in the second pass can only pass back to A.\n    third_pass_options = 1\n\n    # The number of different methods is the product of the options for each pass.\n    count = first_pass_options * second_pass_options * third_pass_options\n\n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol definition\n    daniel_age, ming_age = symbols('daniel_age ming_age')\n\n    # equation construction\n    # equation representing that Daniel's age is 4 times Ming's age this year\n    equation1 = Eq(daniel_age, 4 * ming_age)\n    # equation representing that six years later their ages sum up to 62\n    equation2 = Eq(daniel_age + 6 + ming_age + 6, 62)\n\n    # solving the equations\n    solution = solve((equation1, equation2), (daniel_age, ming_age))\n\n    return solution[daniel_age]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    grams_to_kilograms = 1 / 1000\n\n    total_weight_g = weight_per_paper_g * number_of_girls\n    total_weight_kg = total_weight_g * grams_to_kilograms\n\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(numbers):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += i**2 - (i-2)**2\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(2, int(product ** (1/3)) + 1, 2):\n        if product % (i * (i + 2) * (i + 4)) == 0:\n            return i + 4\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    from datetime import datetime\n\n    start_time = datetime.strptime('11:55 AM', '%I:%M %p')\n    end_time = datetime.strptime('1:40 PM', '%I:%M %p')\n\n    duration = end_time - start_time\n    minutes_played = duration.total_seconds() // 60\n\n    return int(minutes_played)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left = 11\n    right = 7\n    crystal = 1  # Crystal herself\n    rows = 2  # Number of rows\n\n    total_people = (left + right + crystal) * rows\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    count = 0\n    # Since each group must have at least 1 cupcake and the groups must have different numbers\n    # when the first group has i cupcakes, the second group will have total_cupcakes - i cupcakes\n    for i in range(1, total_cupcakes // 2 + 1):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    num = 224\n    factors = factorint(num)\n    count = 1\n    for power in factors.values():\n        count *= (power + 1)\n\n    return count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('08:30', '%H:%M')\n    three_lessons = 3 * 45  # minutes\n    two_breaks = 2 * 5  # minutes for the \"moving period\" between lessons\n    \n    total_minutes = three_lessons + two_breaks\n    break_start_time = start_time + timedelta(minutes=total_minutes)\n    \n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):          # Hundreds digit, cannot be 0\n        for b in range(0, 10):      # Tens digit\n            for c in range(0, 10):  # Ones digit\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    num1, num2, num3 = 28, 84, 126\n    ans = gcd(gcd(num1, num2), num3)\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    equation1 = Eq(troy, 5 * adam)\n    equation2 = Eq(adam + 24, troy / 3)\n\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # let's denote the length of the line as L, and the length of the second bridge as B.\n    # When the line fully enters the first bridge, it has covered a distance of L + 9\n    # when the line fully leaves the first bridge, it has covered a distance L\n    # Hence the time to cross the bridge completely is the time to cover a distance of 9 meters, which takes 8 seconds.\n    \n    # Similarly, for the second bridge:\n    # When the line fully enters the second bridge, it has covered a distance L + B,\n    # and when it leaves the second bridge, it has covered a distance L.\n    # The time to cross the bridge completely is the time to cover a distance of B meters, which takes 10 seconds.\n    \n    # The speed of the line remains the same for both bridges. Let's denote the speed as S.\n    # We know that Distance = Speed * Time, hence:\n    # 9 = S * 8 for the first bridge.\n    # Solving for S, we get S = 9/8 m/s.\n    \n    # Now for the second bridge, we know B = S * 10.\n    # Substituting S from the equation for the first bridge, we get:\n    # B = (9/8) * 10\n    # Simplifying, we get:\n    # B = 90/8\n    # Simplifying further, we get B = 11.25 meters for the second bridge.\n    \n    # Therefore, the length of the second bridge in meters is 11.25.\n    \n    speed = 9 / 8  # meters per second\n    time_for_second_bridge = 10  # seconds\n    length_of_second_bridge = speed * time_for_second_bridge\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    eq = Eq(x / 4 + (x - x / 4 - 3) * 3/5 + 3 + 6, x - 24)\n    sol = solve(eq, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for d1 in range(1, 10):  # hundreds digit, cannot be 0\n        for d2 in range(0, 10):  # tens digit\n            for d3 in range(0, 10, 2):  # units digit, must be even\n                if d1 + d2 + d3 == 8 and len({d1, d2, d3}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    # Let x be the number of $10 notes and y be the number of $5 notes.\n    # From the question:\n    # x + y = 57 (Total number of notes)\n    # After spending 60% of $10 notes, Jeremy is left with 40% of $10 notes.\n    # After spending 25% of $5 notes, Jeremy is left with 75% of $5 notes.\n    # Jeremy is left with twice as many $10 notes as $5 notes:\n    # 0.4 * x = 2 * (0.75 * y)\n    # 0.4x = 1.5y\n    \n    # The cost of the bag is 60% of $10 notes plus 25% of $5 notes.\n    # Cost = 0.6 * 10x + 0.25 * 5y\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Forming equations\n    equation1 = Eq(x + y, 57)\n    equation2 = Eq(0.4 * x, 1.5 * y)\n\n    # Solving equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    x_val = solutions[x]\n    y_val = solutions[y]\n\n    # Calculating the cost of the bag\n    cost = 0.6 * 10 * x_val + 0.25 * 5 * y_val\n\n    return cost\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # To ensure 5 green beads, Darrell might pick all the blue and the white beads first\n    max_other_beads = 5 + 6  # blue and white beads\n    # Now he needs to pick at least 5 green beads to ensure 5 green beads\n    green_beads_needed = 5\n    # Total number of beads Darrell must draw to get 5 green beads for sure\n    total_beads = max_other_beads + green_beads_needed\n    return total_beads\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    one_half_of_missing_number = one_fourth_of_16  # Because 1/4 of 16 must equal 1/2 of the missing number\n\n    # To find the missing number we divide by 1/2 which is the same as multiplying by 2\n    missing_number = one_half_of_missing_number * 2\n\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Each group conducts a single round-robin tournament among 4 people.\n    # The number of games in a round robin with n players is given by n * (n - 1) / 2\n    group_games = 4 * (4 * (4 - 1) // 2) # 4 groups of 4 members each\n\n    # The knockout stages: top 8, top 4, top 2, and the game for third place\n    knockout_games = 8 - 1  # 7 games (Quarterfinals, Semifinals, Final, Third place)\n\n    # Total number of games played is the sum of group stage games and knockout stage games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_A = symbols('days_A')  # Time taken by A alone to complete the job\n    days_B = 2 * days_A         # Time taken by B alone to complete the job, since A is twice as good as B\n\n    # A finishes 12 days earlier than B\n    equation = Eq(days_A, days_B - 12)\n\n    # Solve for days_A\n    days_A = solve(equation, days_A)[0]\n    days_B = 2 * days_A\n\n    # A's work rate is 1/days_A and B's work rate is 1/days_B\n    # When working together their rates are additive: 1/days_A + 1/days_B\n    # The time it takes for both to finish is the reciprocal of their combined rate:\n    combined_rate = 1/days_A + 1/days_B\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 1  # We start checking from the smallest number that fits the first condition\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total potted plants\n    k = 4  # plants to arrange in a row\n    \n    # The formula for arrangements (permutations) is n! / (n-k)!\n    arrangements = factorial(n) / factorial(n - k)\n    \n    return int(arrangements)\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # By the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n\n    initial_stickers = final_stickers - bought + given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for the weight of a pineapple and an apple\n    pineapple, apple = symbols('pineapple apple')\n\n    # Equation based on the problem statement\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789'):\n        if perm[0] != '8':  # The leftmost digit is 8\n            continue\n        if int(''.join(perm[:2])) % 2 != 0:\n            continue\n        if int(''.join(perm[:3])) % 3 != 0:\n            continue\n        if int(''.join(perm[:4])) % 4 != 0:\n            continue\n        if int(''.join(perm[:5])) % 5 != 0:\n            continue\n        if int(''.join(perm[:6])) % 6 != 0:\n            continue\n        if int(''.join(perm[:7])) % 7 != 0:\n            continue\n        if int(''.join(perm[:8])) % 8 != 0:\n            continue\n        if int(''.join(perm[:9])) % 9 != 0:\n            continue\n        if int(''.join(perm[:10])) % 10 != 0:\n            continue\n        \n        return ''.join(perm)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = symbols('matthew_tomatoes')\n\n    equation = Eq(belinda_tomatoes - 7, matthew_tomatoes + 7)\n\n    solution = solve(equation, matthew_tomatoes)\n\n    return solution[matthew_tomatoes]\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_rate = original_rate * (1 + 50 / 100)\n    return increased_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    # The difference between the two numbers, which is divisible by D.\n    difference = 2012 - 1274\n\n    # Loop through all possible odd divisors of the difference.\n    # Start from the largest possible odd divisor, which is the difference itself if it's odd\n    # or the difference minus 1 if the difference is even.\n    # Then, decrement by 2 to maintain odd divisors and find the maximum possible D.\n    for D in range(difference if difference % 2 else difference - 1, 0, -2):\n        if 2012 % D == 1274 % D:\n            R = 2012 % D\n            return D - R\n    return None\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    total_animals = 7\n    total_legs = 20\n\n    for rabbits in range(total_animals + 1):\n        ducks = total_animals - rabbits\n        if (rabbits * 4 + ducks * 2) == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Use dynamic programming to solve this problem. Create a list that represents whether\n    # it's possible to win if there are 'i' numbers left on the board. We will fill this\n    # list with True (win) or False (lose) for each player.\n\n    # Initialize a list with 53 elements where each index represents the number of\n    # elements left (0 index is unused). False means a losing position, True means a winning position.\n    wins = [False] * 53\n    \n    # Numbers that players are allowed to write each turn\n    allowed_moves = [1, 3, 4, 6]\n\n    # Iterate over each position starting from 1 to 52\n    for i in range(1, 53):\n        for move in allowed_moves:\n            if i - move >= 0:\n                # If there is a move from the current position that results in a losing\n                # position for the opponent, then the current position is winning for the current player.\n                if not wins[i - move]:\n                    wins[i] = True\n                    break\n\n    # Betty wants to be in a winning position after her turn.\n    # Iterate through the allowed moves to determine the initial move.\n    for first_move in allowed_moves:\n        if wins[52 - first_move]:\n            # If after Betty's move there are 52 - first_move numbers left and it's a winning position,\n            # then Betty should choose to go first with this move.\n            return \"First\", first_move\n\n    # If no winning move is found, Betty should choose to go second.\n    return \"Second\", None\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The Chinese Remainder Theorem helps to find a number that has a certain remainder\n    # when divided by some given divisors. Here, we want the number to have a remainder\n    # of 1 when dividing by 5, 6, and 7. The congruences are therefore:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Since 15 and 21 are factors, their least common multiple is also a factor\n    # which will be the number itself.\n    import math\n    number = math.lcm(15, 21)\n    \n    # A number with exactly 8 factors has either p^7, p*q^3 or p*q*r form,\n    # where p, q, r are prime factors.\n    # For this number, we can see it has the form p*q (3*5*7), \n    # so it should have another prime factor to have exactly 8 factors.\n    # We check for p^3 or p^1*q^1*r^1. The latter is the only possibility for two given different factors.\n    \n    # Let's find all the prime factors of the number\n    def prime_factors(n):\n        factors = []\n        # check for number of 2s that divide n\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        # n must be odd at this point, so a skip of 2 ( i = i + 2) can be used\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            # while i divides n, append i and divide n\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        # Condition if n is a prime number greater than 2\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    # Get prime factors of the number\n    prime_factors_of_number = prime_factors(number)\n    \n    # Given that the number has exactly 8 factors and two of them are 15 and 21,\n    # It implies the number is of the form (3^1 * 5^1 * 7^1 * p^1), where p is a prime factor.\n    # To find this prime factor 'p', we search for it by dividing the number by 3, 5, and 7\n    \n    # Find the potential missing prime factor 'p'\n    for f in [3, 5, 7]:\n        number //= f\n    \n    # The remaining number must be a prime number and is the missing factor 'p'\n    additional_factor = number\n    \n    # Now we calculate the sum of all factors for the number 3*5*7*p\n    # Sum of factors is given by (p_1^(n+1) - 1)/(p_1 - 1) * (p_2^(m+1) - 1)/(p_2 - 1) * ...\n    # where p_1, p_2 are prime factors and n, m are their respective powers in the prime factorization.\n    def sum_of_factors(*base_exponent_pairs):\n        total = 1\n        for base, exponent in base_exponent_pairs:\n            total *= (base**(exponent + 1) - 1) // (base - 1)\n        return total\n    \n    # Calculate and return the sum of all factors\n    sum_of_all_factors = sum_of_factors((3, 1), (5, 1), (7, 1), (additional_factor, 1))\n    return sum_of_all_factors\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remaining_after_grace = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remaining_after_grace\n    remaining_juice = remaining_after_grace - given_to_evelyn\n    \n    return remaining_juice\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # We only need the last digit which is determined by the last digits cycle of 4 and 6\n    # For 4: The last digits cycle every 2 powers: (4^1 -> 4, 4^2 -> 6, 4^3 -> 4, 4^4 -> 6, ...)\n    # Since 2009 is odd, the last digit of 4^2009 will be 4\n    last_digit_4 = 4\n    \n    # For 6: The last digit always remains 6 irrespective of the power, because 6^n ends with 6\n    last_digit_6 = 6\n    \n    # Adding the last digits\n    last_digit_sum = (last_digit_4 + last_digit_6) % 10\n    \n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    # iterate over possible numbers of 2 gram weights\n    for two_gram_weights in range(0, 63 // 2 + 1):\n        # weight from 2 gram weights\n        weight_from_two_gram = 2 * two_gram_weights\n        # remaining weight to be made up by 5 gram weights\n        remaining_weight = 63 - weight_from_two_gram\n        # if the remaining weight is divisible by 5, it is a valid combination\n        if remaining_weight % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C, total = symbols('A B C total')\n    \n    # A and C fill the pool with 18 tons from A\n    equation1 = Eq(A + C, total)\n    # B and C fill the pool with 27 tons from B, and B's rate is twice A's rate\n    equation2 = Eq(B + C, total)\n    equation3 = Eq(B, 2 * A)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C, total))\n    \n    return solutions[total]\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    score_unattempted = 0\n    rex_score = 66\n    rex_unanswered = 1\n\n    for correct in range(total_questions):\n        incorrect = total_questions - correct - rex_unanswered\n        if (correct * score_correct + incorrect * score_incorrect) == rex_score:\n            return correct\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) + sum(range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # Total colors available\n    total_colors = 5\n    # Total letters to be painted\n    total_letters = 4\n\n    # Number of ways to paint each letter differently\n    # First letter can be colored in 5 ways, second in 4 ways\n    # third in 3 ways, and fourth in 2 ways\n    ways = 1\n    for i in range(total_colors, total_colors - total_letters, -1):\n        ways *= i\n\n    return ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):\n        age_reversed = int(str(age)[::-1])\n        if age_reversed + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Let x be the number of meatballs each student gets.\n    meatballs_left_initial = 20\n    meatballs_left_after = 10\n    \n    meatballs_per_student = meatballs_left_initial - meatballs_left_after\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = initial_amount * increase_fraction\n    final_amount = initial_amount + increase_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    # Let's denote the total number of questions as q.\n    # On the 1st day, Andrew did half of all the questions plus 7\n    # On the 2nd day, he did half of the remaining questions minus 5\n    # On the 3rd day, he finished the remaining 23 questions\n    # We can set up the equation based on the above sentences:\n\n    from sympy import symbols, Eq, solve\n\n    q = symbols('q')\n    first_day = q/2 + 7\n    remaining_after_first = q - first_day\n    second_day = remaining_after_first/2 - 5\n    remaining_after_second = remaining_after_first - second_day\n    third_day = remaining_after_second\n\n    # We know that on the 3rd day, Andrew has 23 questions remaining, so:\n    equation = Eq(third_day, 23)\n\n    # Solving for the total number of questions q\n    total_questions = solve(equation, q)\n\n    return total_questions[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    \n    ans = fraction_value > decimal_value\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    jug_litres = 1  # 1 liter is 1000 ml\n    cup_ml = 200  # each cup has 200 ml of water\n\n    # Convert jug capacity to ml and subtract the water poured into cups\n    remaining_water = (jug_litres * 1000) - (3 * cup_ml)\n    \n    # Convert the remaining water back to litres\n    remaining_water_litres = remaining_water / 1000\n\n    return remaining_water_litres\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_roses, planted_each_month = symbols('original_roses planted_each_month')\n    \n    # Total flowers in the park\n    total_flowers = 300\n    \n    # Future counts\n    future_roses = 280\n    future_daisies = 180\n    \n    # Total flowers in the future\n    future_total_flowers = future_roses + future_daisies\n    \n    # Equations based on problem statement\n    # original_roses + planted_each_month = future_roses\n    # total_flowers - original_roses + planted_each_month = future_daisies\n    equation1 = Eq(original_roses + planted_each_month, future_roses)\n    equation2 = Eq(total_flowers - original_roses + planted_each_month, future_daisies)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (original_roses, planted_each_month))\n    \n    return solutions[original_roses]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Common difference calculation\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # Calculate the 12th term\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let a be the first term and d be the common difference\n    # We know that the sum of the first n terms in an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n - 1)d)\n\n    # First 8 terms sum to 32:\n    # S_8 = 8/2 * (2a + 7d) = 32\n    # 4 * (2a + 7d) = 32\n    # 8a + 28d = 32\n    # 2a + 7d = 8\n\n    # First 22 terms sum to 44:\n    # S_22 = 22/2 * (2a + 21d) = 44\n    # 11 * (2a + 21d) = 44\n    # 22a + 231d = 44\n    # 2a + 21d = 4\n\n    # Solve the simultaneous equations:\n    # 2a + 7d = 8\n    # 2a + 21d = 4\n    # Subtract the first equation from the second equation to eliminate 2a:\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 2a + 21d - 2a - 7d = -4\n    # 14d = -4\n    # d = -4 / 14\n    d = -4 / 14\n\n    # Plug the value of d into one of the original equations:\n    # 2a + 7(-4/14) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 10 / 2\n    a = 10 / 2\n\n    # Now we find the sum of the first 15 terms using the values for a and d:\n    # S_15 = 15/2 * (2a + 14d)\n    S_15 = 15 / 2 * (2 * a + 14 * d)\n\n    return S_15\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = int(250**0.5)\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Calculating the number of correct answers in each test\n    correct_test1 = 0.20 * 10  # 20% of the 10-problem test\n    correct_test2 = 0.80 * 20  # 80% of the 20-problem test\n    correct_test3 = 0.90 * 30  # 90% of the 30-problem test\n\n    # Total correct answers\n    total_correct = correct_test1 + correct_test2 + correct_test3\n    \n    # Total number of problems\n    total_problems = 60\n    \n    # Overall score in percentage\n    overall_score = (total_correct / total_problems) * 100\n\n    return overall_score\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Area covered by one 6 dm by 6 dm brick in square centimeters\n    area_per_brick_6dm = (6 * 10) * (6 * 10)  # converting decimeters to centimeters\n    \n    # Total area to cover in square centimeters\n    total_area = area_per_brick_6dm * 80\n\n    # Area covered by one 64 cm^2 brick\n    area_per_brick_64cm = 64\n\n    # Number of 64 cm^2 bricks needed\n    num_bricks_64cm = total_area / area_per_brick_64cm\n\n    return int(num_bricks_64cm)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    water, fruit = symbols('water fruit')\n    \n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n    \n    solutions = solve((equation1, equation2), (water, fruit))\n    \n    return float(solutions[fruit])\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '4', '5', '7', '8']\n    max_number = 0\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    \n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let x be the number of boys\n    # Then, x + difference is the number of girls\n    # The total number of pupils is the sum of boys and girls\n    # x + (x + difference) = total_pupils\n    # Solving for x gives us the number of boys\n    x = (total_pupils - difference) / 2\n\n    # The number of girls is 30 more than the number of boys\n    num_girls = x + difference\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_students = 0\n    for s in range(1, 500, 2):  # Starts from 1 since each layer reduces the square size by 2 (one on each side)\n        boys = s**2 - (s-2)**2 if s > 1 else 1  # Subtract the inner square (of girls if s > 1) from the outer square (of boys)\n        girls = (s-2)**2 - (s-4)**2 if s > 3 else 0  # Subtract the next inner square of boys from the girls' square\n        total_students += boys + girls\n        if boys - girls == 31:  # Check if the difference between boys and girls is 31\n            break\n            \n    ans = total_students\n    return ans\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A_length = 10\n    ribbon_B_length = ribbon_A_length * 5\n    total_length = ribbon_A_length + ribbon_B_length\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "def solution():\n    from math import comb\n    return comb(5, 3)\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price_first_scenario = 6500\n    profit_percent_first_scenario = 30 / 100\n    cost_price = selling_price_first_scenario / (1 + profit_percent_first_scenario)\n\n    profit_second_scenario = 5000\n    profit_percent_second_scenario = (profit_second_scenario / cost_price) * 100\n\n    return profit_percent_second_scenario\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of apples be 'a'\n    a = symbols('a')\n\n    # Mr. Aziz sold 1/5 of the apples on Monday, so he had (1 - 1/5)a = 4/5a left\n    # He then sold 80 apples on Tuesday, so he had (4/5a - 80) left\n    # In the end, he was left with 30% of the apples he had at first, which is 0.3a\n    # So we set up the equation: 4/5a - 80 = 0.3a\n    equation = Eq((4/5)*a - 80, 0.3*a)\n\n    # Solve the equation for 'a'\n    solution = solve(equation, a)\n\n    # Calculate the number of apples he had in the end, which is 30% of 'a'\n    apples_in_the_end = 0.3 * solution[0]\n\n    return int(apples_in_the_end)\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            if x1 != x2 and x1 + x2 < 10:\n                x3 = 10 - (x1 + x2)\n                if x3 not in (x1, x2):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_between = 1  # Emily is directly behind Danny so there's 1 person between them\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    \n    total_people = people_in_front_of_emily + people_between + people_behind_danny\n    return total_people\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "import math\n\ndef solution():\n    # Use logarithms to find the number of digits\n    exponent_4s = 2018\n    exponent_25s = 2018\n    \n    # Because log10(4^2018 * 25^2018) = 2018*log10(4) + 2018*log10(25)\n    power_of_4 = math.log10(4) * exponent_4s\n    power_of_25 = math.log10(25) * exponent_25s\n    \n    # The number of digits is the floor of the log value plus 1\n    num_digits = math.floor(power_of_4 + power_of_25) + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first number be x\n    x = symbols('x')\n\n    # Since the numbers are consecutive even numbers, they are represented as x, x+2, x+4, x+6, x+8, x+10, x+12\n    # The fourth number is x+6, and the sum of the first and seventh numbers is x + (x+12)\n    # According to the condition, the fourth number (x+6) is larger than one-third of the sum of the first and seventh (x + x+12)/3 by 6\n    equation = Eq(x + 6, (x + (x + 12)) / 3 + 6)\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    # Now, calculating the sum of the seven numbers with the found value of x\n    first_number = solution_x[0]\n    seventh_number = first_number + 12\n\n    total_sum = 7 * (first_number + 3)  # sum of an arithmetic sequence is n/2 * (first_term + last_term)\n    return total_sum\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_per_piece = total_length / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * 3/4\n    return afternoon_cookies\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    return 1.5 * 1000\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    # total sum of 9 numbers\n    total_sum = 9 * 140\n    # removing the one number which is 180\n    remaining_sum = total_sum - 180\n    # calculating the average of the remaining 8 numbers\n    average_remaining = remaining_sum / 8\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Number of trees on one side. Add 1 to include the tree at the starting point.\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    \n    # Total number of trees for both sides.\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n    nth_term = first_odd_number + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # The Ferrari driver finished in second place\n    final_position = 2\n    # The Ferrari driver overtook 5 other cars\n    overtakes = 5\n    # The total number of cars is final position plus overtakes\n    total_cars = final_position + overtakes\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    eddies_future_age = 18\n    mikes_future_age = eddies_future_age + age_difference\n    return mikes_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total = lily_book_price + amy_book_price\n    return total\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    sum_of_interior_angles = (num_sides - 2) * 180\n    interior_angle = sum_of_interior_angles / num_sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last4 = sum([int('5' * i) for i in range(1, 21)]) % 10000\n    return sum_last4\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # If 2 men take 3 days to build 1 wall\n    # Then 1 man would take 2*3 days to build 1 wall\n    days_per_man_per_wall = 2 * 3\n\n    # Let y men take z days to build x walls\n    # According to the unitary method:\n    # days_for_y_men_to_build_x_walls = (days_per_man_per_wall * x) / y\n    # Therefore we can create a function that returns z depending on x and y:\n    def time_to_build(x, y):\n        return (days_per_man_per_wall * x) / y\n\n    return time_to_build\n\n# We define x and y as per the question's requirement. For example:\nx = 1  # Replace with the actual number of walls to be built\ny = 1  # Replace with the actual number of men building the wall\nans = solution()(x, y)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 25 / 100\n    fraction_women = 1 / 5\n\n    men = total_people * percent_men\n    women = total_people * fraction_women\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    white_shirts = symbols('white_shirts')\n    checked_shirts = white_shirts / 7\n\n    equation = Eq(white_shirts + checked_shirts, 72)\n\n    solutions = solve(equation, white_shirts)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # 3-digit odd numbers range from 101 to 999\n    for number in range(999, 100, -1):\n        if number % 2 == 1 and number % 9 == 0:\n            tens = (number // 10) % 10\n            if tens % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    numbers = [72, 60, 48, 36, 24, 12]\n    return sum(numbers)\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    white = 8\n    red = 7\n    green = 5\n    # We add 1 to each number of balls because that would ensure that we get at least a pair of one color\n    # after drawing that many balls (worst case scenario).\n    return white + red + green - 2\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq((1/3) * girls, (1/2) * boys)\n    equation2 = Eq(girls + boys, 390)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(1, 60):\n        if all([num % 4 == 3, num % 5 == 4, num % 6 == 5]):\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    def S(n):\n        return sum(map(int, str(n)))\n    \n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Assuming the \"insert pic\" refers to a pictorial pattern that \n    # would typically be seen in combinatorics problems related to \n    # figurate numbers or similar patterns where each step increases \n    # according to a certain rule. A common type of such a sequence is \n    # the sequence of square numbers, triangle numbers, or similar. \n    # Without the specific pattern, an exact solution cannot be provided. \n    # However, let's assume it's asking for the nth term of square numbers:\n    # 1, 4, 9, 16, ... (since that's a common pattern)\n    \n    # If we are looking for the nth term, we need to know the value of n.\n    # This value is not provided, hence an assumption needs to be made \n    # or additional context would be required for a precise solution.\n    # For the sake of demonstration, let's find the 10th square number:\n    n = 10\n    \n    # The formula for the nth term of square numbers is n^2.\n    term = n**2\n    \n    return term\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_spent = total_spent / 12  # 12 months in a year\n\n    return average_spent\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = (three_quarters_of_number * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # 2% less water means it retains 98% of the previous volume\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temp_bottom = 17\n    temp_top = -2\n    temp_drop = temp_bottom - temp_top\n    return temp_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    son_age_now = 10\n    father_age_future = 70\n    age_difference = father_age_future - son_age_now\n    father_age_now = son_age_now + age_difference\n\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9/20\n    women_percentage = 30 / 100\n\n    men_count = men_fraction * total_passengers\n    women_count = women_percentage * total_passengers\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of votes each person got\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Equations based on the problem statement\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('07:35', '%H:%M')\n    train_journey = timedelta(hours=1, minutes=35)\n    walk_time = timedelta(minutes=40)\n\n    arrival_time = departure_time + train_journey + walk_time\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    # iterate through the numbers less than 200\n    for N in range(200):\n        if sum(int(x) for x in format(N, '4')) == 5 and \\\n           sum(int(x) for x in format(N, '6')) == 8 and \\\n           sum(int(x) for x in format(N, '8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 3 choices for the hundreds place (2, 3, or initially 3 but considering leading zero is not allowed)\n    # Since each digit can be used more than once, we have 3 choices for the tens place and the ones place\n    choices_for_hundreds = 2  # only 2 or 3, 0 cannot be used here\n    choices_for_tens = 3      # 0, 2, 3\n    choices_for_ones = 3      # 0, 2, 3\n    \n    # Multiply the choices to get the total number of different numbers.\n    ans = choices_for_hundreds * choices_for_tens * choices_for_ones\n    return ans\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_six_hotdogs_sets = 2  # Since 12 hotdogs are two sets of 6 hotdogs\n\n    total_cost = cost_per_six_hotdogs * number_of_six_hotdogs_sets\n\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money = 200  # £2 in pence\n\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "def solution():\n    from math import factorial\n\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # Number of ways to arrange the books = total_books! / (fiction_books! * comic_books!)\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for number in range(2, 100, 2):\n        if number % 4 == 0 and number % 3 == 0 and (int(number ** 0.5) ** 2 == number):\n            return number\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # get all prime numbers less than 51\n    primes.sort(reverse=True)  # sort in decreasing order to start with the largest prime\n\n    total = 51\n    count = 0  # to count the number of prime numbers\n\n    for prime in primes:\n        while total >= prime:\n            total -= prime\n            count += 1\n        if total == 0:\n            break\n\n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    return 85 // 5\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    # Let x be the number of acorns Chip had initially\n    # Let y be the number of acorns Dale had initially\n\n    # According to the problem, after Chip gave 14 acorns to Dale,\n    # they had the same number of acorns, so we have:\n    # x - 14 = y + 14\n\n    # Also, they had 124 acorns in total at first, so:\n    # x + y = 124\n\n    # We can express y in terms of x from the first equation:\n    # y = x - 28\n\n    # Substitute y in the second equation and solve for x:\n    # x + (x - 28) = 124\n    # 2x - 28 = 124\n    # 2x = 124 + 28\n    # 2x = 152\n    # x = 152 / 2\n    x = 152 // 2  # Using integer division since the number of acorns must be an integer\n\n    return x\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable\n    x = symbols('x')\n    \n    # Set the equation as per the question\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x + 1), 1/6)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    science_books, novels = symbols('science_books novels')\n    \n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - i) for i in range(40))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_pages = 38\n    total_penpals = 11\n    pages_for_3page_letters = 3\n    pages_for_4page_letters = 4\n\n    for penpals_with_3page in range(0, total_penpals + 1):\n        penpals_with_4page = total_penpals - penpals_with_3page\n        total_pages_written = (penpals_with_3page * pages_for_3page_letters) + (penpals_with_4page * pages_for_4page_letters)\n        if total_pages_written == total_pages:\n            return penpals_with_3page\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for number in range(100, 1000):\n        if number // 24 == 36 and number % 24 == 0:\n            return number\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_used_pie_kg = 750 / 1000\n    apples_used_juice_kg = 1025 / 1000\n\n    apples_left_kg = total_apples_kg - (apples_used_pie_kg + apples_used_juice_kg)\n    \n    return apples_left_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n    total_people = amy_position_from_back + people_in_front_of_amy - 1\n    \n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # We draw all 5 balls of one color, then all 5 balls of another color.\n    # In the worst case scenario, we still don't have 3 different colors.\n    # Therefore, we need to draw at least one more ball to ensure we have the third color.\n    # This gives us 5 (first color) + 5 (second color) + 1 (to get the third color) = 11\n    return 11\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 2*x, 12.75)\n    solution = solve(equation, x)\n\n    longer_piece = 2 * solution[0]\n\n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    books_on_right = 6\n    position_from_left = 14\n    total_books = books_on_right + position_from_left\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # grams\n    new_volume_ratio = (1/2)**3  # each dimension is halved, so the volume is reduced by 1/2 * 1/2 * 1/2\n    new_volume = original_volume * new_volume_ratio \n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins they received\n    gigi_coins_received, lily_coins_received = symbols('gigi_coins_received lily_coins_received')\n\n    # Gigi had $120 coins and receives some amount making her total 3 times Lily's total after receiving the same amount\n    equation1 = Eq(120 + gigi_coins_received, 3 * (24 + lily_coins_received))\n    # They both receive the same amount of coins\n    equation2 = Eq(gigi_coins_received, lily_coins_received)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (gigi_coins_received, lily_coins_received))\n\n    return solution[gigi_coins_received]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count_non_prime = sum(1 for i in range(1, 21) if not isprime(i))\n\n    return count_non_prime\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    age_difference = father_age - brian_age\n\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Since it's a 3-digit number, the hundreds digit can't be 0 and must be 1-9\n    for i in range(1, 10):  \n        # The tens and ones digits can be 0-9\n        for j in range(0, 10):\n            for k in range(0, 10):\n                # Sum of the digits must be 11 and the number must be odd\n                if i + j + k == 11 and (100*i + 10*j + k) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since we can boil at least one egg in 5 minutes, we can boil all 3 eggs in parallel if we have\n    # enough egg boilers. As the question does not limit the number of egg boilers, the minimum time\n    # needed is the time it takes to boil one egg which is 5 minutes.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins_needed\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, d = symbols('n a1 d')\n    # sum of first 4 numbers\n    equation1 = Eq(a1 + (a1 + d) + (a1 + 2*d) + (a1 + 3*d), 124)\n    # sum of last 4 numbers\n    equation2 = Eq((a1 + (n-4)*d) + (a1 + (n-3)*d) + (a1 + (n-2)*d) + (a1 + (n-1)*d), 156)\n    # sum of all numbers\n    equation3 = Eq(n*(2*a1 + (n - 1)*d)/2, 210)\n    \n    solutions = solve((equation1, equation2, equation3), (n, a1, d))\n\n    # Extracts only the integer solutions for the number of terms n\n    integer_solutions = [sol[n] for sol in solutions if sol[n].is_integer]\n\n    return integer_solutions[0] if integer_solutions else None\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough = 11160  # Convert 11.16kg to grams\n    dough_per_cookie = 45\n    dough_per_brownie = 150\n    total_cookies = 240\n    total_brownies = 2\n\n    dough_used_for_cookies = dough_per_cookie * total_cookies\n    dough_used_for_brownies = dough_per_brownie * total_brownies\n\n    dough_used_total = dough_used_for_cookies + dough_used_for_brownies\n    dough_left = total_dough - dough_used_total\n\n    # Convert grams back to kg for the final answer\n    dough_left_kg = dough_left / 1000\n\n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Dan's calories intake today should be less than yesterday\n    calories_today = symbols('calories_today')\n    inequality = calories_today < calories_yesterday\n    \n    ans = inequality\n    return ans\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Inverse of eating half of the remaining and 2 less\n    day_2_biscuits = (remaining_biscuits + 2) * 2\n    # Inverse of eating half of all the biscuits and 4 more\n    total_biscuits = (day_2_biscuits + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    money = 100\n    daily_change = [5, -8]\n\n    for day in range(total_days):\n        money += daily_change[day % 2]\n\n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n\n    # Since the pattern repeats every 5 numbers, find the position of the 1004th number in the repeated pattern\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 123456789 + 987654321\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    chocolates, friends = symbols('chocolates friends')\n\n    # Equation for the first scenario, excess of 41 chocolates when each friend gets 18 pieces\n    equation1 = Eq(chocolates - friends * 18, 41)\n\n    # Equation for the second scenario, short of 34 chocolates when each friend gets 23 pieces\n    equation2 = Eq(chocolates - friends * 23, -34)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    # Calculate the remaining chocolates when each friend gets 20 pieces\n    remaining_chocolates = solutions[chocolates] - solutions[friends] * 20\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_on_book = 0.15 * total_money\n    remaining_money = total_money - spent_on_book\n    spent_on_dvd = 0.30 * remaining_money\n    money_left = remaining_money - spent_on_dvd\n\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 / 7\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    best_boy_pushups = 50\n    mulan_pushups = best_boy_pushups + 1\n    return mulan_pushups\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # If n teams play each other once, there are (n*(n-1))/2 games in total.\n    # Let's calculate the number of games remaining, assuming we know \n    # the total number of teams (n) and the games played so far (games_played).\n    \n    n = 32  # Given number of teams.\n    games_played = 96  # Given number of games played already.\n\n    # Total number of games to be played in the tournament between n teams.\n    total_games = (n * (n - 1)) // 2\n\n    # The number of remaining games is the total games minus the games already played.\n    games_remaining = total_games - games_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Initialize possible block numbers\n    possible_numbers = []\n    \n    # Check each 3-digit number fulfilling only three of the given conditions\n    for number in range(100, 1000):\n        is_multiple_27 = number % 27 == 0\n        is_multiple_7 = number % 7 == 0\n        sum_digits_17 = sum(map(int, str(number))) == 17\n        is_perfect_square = int(number ** 0.5) ** 2 == number\n        is_factor_89100 = 89100 % number == 0\n\n        # Count how many conditions are met\n        conditions_met = sum([is_multiple_27, is_multiple_7, sum_digits_17, is_perfect_square, is_factor_89100])\n        \n        # If three conditions are met, add it to the list\n        if conditions_met == 3:\n            possible_numbers.append(number)\n\n    # Find the correct number based on the given statements\n    for num in possible_numbers:\n        # Verify which statements are true for the number\n        statements = [\n            num % 27 == 0,      # A's statement\n            num % 7 == 0,       # B's statement\n            sum(map(int, str(num))) == 17, # C's statement\n            num == int(num**0.5) ** 2,    # D's statement\n            89100 % num == 0    # E's statement\n        ]\n        \n        # If three statements are true, we've found the block number\n        if statements.count(True) == 3:\n            return num\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    ans = (15 + 37) / 2\n    return ans\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = pails_filled * water_per_pail + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    boys_more = 16\n    ratio_diff = 9 - 7  # Difference between boys and girls in terms of ratio\n\n    girls = boys_more / ratio_diff * 7\n    boys = girls + boys_more\n    total_pupils = girls + boys\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate the expected sum without any mistakes\n    n = 37\n    first_term = 1\n    difference = 3\n    expected_sum = n / 2 * (2 * first_term + (n - 1) * difference)\n    \n    # Find the deviation from the expected sum due to the mistake\n    deviation = expected_sum - 2011\n    \n    # Find the position where the mistake occurred\n    # Each mistake contributes 6 to the deviation (adding 3 instead of subtracting 3)\n    mistake_position = deviation / 6\n    \n    return int(mistake_position)\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    shortcakes_made = 25 / milk_per_cake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    candies = 88\n    children = 8\n    \n    # To minimize the maximum number, we need to distribute the candies as equally as possible\n    # We first give each child one candy to satisfy the condition of at least one\n    candies -= children  \n    \n    # Now we distribute candies such that each child gets one more than the previous\n    # We start by giving the first child the least amount possible, \n    # and then move towards the child with the most pieces\n    # 1, 2, 3, ..., n will be the distribution\n    \n    # The least number of candies the child with the most can have is when the candies are \n    # distributed in a sequence of minimum length. To do this we can use the property \n    # of triangular numbers: 1 + 2 + 3 + ... + n = n*(n+1)/2, where n is the number of terms.\n    # We want to find the largest n such that 1 + 2 + 3 + ... + n <= candies.\n    \n    n = 1  # We already gave out 8 candies, so the next child will get at least 2 candies\n    while (n * (n + 1)) // 2 <= candies - children:\n        n += 1\n    n -= 1  # Subtract 1 because the loop exits after exceeding the candy count\n    \n    # The child with the most pieces gets n candies, plus 1 for the initial candy given to everyone\n    max_pieces = n + 1\n\n    return max_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the situation is as follows:\n    # Stack A: 20 stones, Stack B: 16 stones.\n    # To ensure a win, Jerry must make both stacks equal after his move,\n    # because from then on, he can just mimic Tom's moves and eventually be\n    # the one to take the last stone.\n    # The strategy for Jerry is to take stones from Stack A to make both stacks equal.\n    \n    stack_A = 20\n    stack_B = 16  # After Tom's turn\n    \n    stones_to_take = stack_A - stack_B  # Make both stacks equal\n    stack_to_take_from = \"A\"  # Jerry would take from Stack A\n    \n    return stones_to_take, stack_to_take_from\n\n# Answer format: Jerry must take _stone(s) from Stack _.\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # If the numbers are consecutive, we can represent them as (n-2), (n-1), n, (n+1), and (n+2),\n    # where n is the middle number of the five consecutive numbers.\n    # The sum of these five numbers is: (n-2) + (n-1) + n + (n+1) + (n+2) = 5n\n    # We know that the sum is 160, so we can set up the equation 5n = 160\n    # and solve for n to find the middle number.\n\n    total_sum = 160\n    # Since there are 5 students, n = total_sum / 5\n    n = total_sum // 5\n\n    # The student with the most balls has (n+2) balls, since they are consecutive numbers.\n    max_balls = n + 2\n    \n    return max_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundred in range(1, 10):\n        for one in range(10):\n            M = hundred * 100 + one\n            S = hundred + one\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # Convert 2 meters to centimeters\n    piece_length_cm = 6\n    num_pieces = stick_length_cm // piece_length_cm\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "import math\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    ans = math.comb(total_balls, balls_to_select)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Rational\n\n    a, b, c = symbols('a b c', integer=True)\n    expr = 1 + 1/(a + 1/(b + 1/c))\n\n    equation = Rational(13, 10) - expr\n\n    # since a, b, c are whole numbers, start with smaller guesses and increase until we find a match\n    for guess_a in range(10):\n        for guess_b in range(10):\n            for guess_c in range(10):\n                # Substitute guesses into equation and check if it simplifies to zero\n                if equation.subs({a: guess_a, b: guess_b, c: guess_c}).simplify() == 0:\n                    return guess_a + 2 * guess_b + 3 * guess_c\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Find the pattern of the ones digit for powers of 8\n    pattern = [8**i % 10 for i in range(1, 5)]\n    # Since the pattern repeats every 4, find the position in the pattern\n    position = 30 % 4\n    # If position is 0, it means it's the last element of the pattern\n    ones_digit = pattern[position-1] if position != 0 else pattern[-1]\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n\n    days = total_pages / average_pages_per_day\n\n    return days\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * 5 - wrong * 3 == 52:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    peaches = 100\n    days = 1\n\n    while (days * (days + 1)) // 2 <= peaches:\n        days += 1\n\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    common_difference = 5\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    # 0.3 times 100 gives 30\n    left_side = 0.3 * 100\n    # Since 150 is divided by some number to result in 30, we can find the number by dividing 150 by 30\n    box_number = 150 / left_side\n    return box_number\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    sugar_weight = 600 * 0.48  # Calculate the weight of the sugar in the solution\n    water_weight = 600 - sugar_weight  # Calculate the weight of the water by subtracting the sugar weight from the total\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Since the ages are in consecutive years, they form an arithmetic sequence with a common difference of 1.\n    # Let x be the age of the fourth dwarf (the middle term in the sequence)\n    # Then the ages of the younger three dwarfs will be (x-1), (x-2), (x-3)\n    # Their sum will be: (x-1) + (x-2) + (x-3) = 3x - 6 = 42\n    # Solving for x gives us: 3x = 42 + 6 = 48, so x = 48 / 3 = 16\n\n    x = 16\n    # Now calculate the sum of the ages of the oldest three dwarfs which are (x+1), (x+2), (x+3)\n    sum_oldest_three = (x + 1) + (x + 2) + (x + 3)\n    return sum_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        number = int(f\"12{N}4\")\n        if number % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    abcd = 1000 * a + 100 * b + 10 * c + d\n    abc = 100 * a + 10 * b + c\n    ab = 10 * a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n    \n    solutions = solve(equation, (a, b, c, d))\n    \n    for sol in solutions:\n        if all(0 <= s <= 9 for s in sol):\n            ans = sol[0]*1000 + sol[1]*100 + sol[2]*10 + sol[3]\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractions_sum = 19 + 4/5 + 199 + 4/5 + 1999 + 4/5 + 19999 + 4/5 + 199999 + 4/5\n    return fractions_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    return (5 / 8) * 408\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    combined_current_age = janice_age + sister_age\n\n    years_until_total_35 = (35 - combined_current_age)\n\n    return years_until_total_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    return solutions[dad]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum([sum([j/i for j in range(1, i+1)]) + sum([j/i for j in range(i-1, 0, -1)]) for i in range(1, 9)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n\n    fruit_drops = 6\n    milk_chocolates = (fruit_drops * 7) / 2\n    total_sweets_equation = Eq(milk_chocolates, (3 / 4) * total_sweets)\n\n    total_sweets_solution = solve(total_sweets_equation, total_sweets)\n\n    return total_sweets_solution[0]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    football_cost = (60 + 16) // 2  # Cost of 2 footballs minus the returned amount equals the cost of 1 football\n    volleyball_cost = (60 - football_cost) // 2  # Subtract the cost of 1 football from 60 and divide by 2 to find the cost of 1 volleyball\n    \n    return volleyball_cost\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    return 1000 - 630\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    # Total number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of the arithmetic sequence\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    num_books = 3  # one math, one English, and one science book\n    arrangements = factorial(num_books)\n\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A cannot be in the first or last position, so A can be in one of the 3 middle positions.\n    # Once A's position is fixed, the remaining 4 people can be arranged in any order.\n    # Therefore, for each position that A can take, there are 4! (factorial of 4) arrangements for the others.\n    ways_for_A = 3\n    ways_for_others = 4 * 3 * 2 * 1  # This is 4!\n    \n    # Total ways is the product of the ways A can be placed and the arrangements of the other 4 people.\n    total_ways = ways_for_A * ways_for_others\n    return total_ways\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    # Since the mode is 7, we know there are at least two 7-year-olds.\n    # The mean age is 9, and there are 5 students, so the total of their ages is 5 * 9 = 45.\n    # The median is 8, this means when the ages are put in order, the middle one is 8.\n    # The range of their ages is 6, which means the difference between the youngest and the oldest is 6.\n    \n    # Let's denote the ages as a, b, c, d, e where a <= b <= c <= d <= e.\n    # Given that the mode is 7, at least two of the ages should be 7.\n    # Since the median is 8, c is 8.\n    # Hence, we start with ages [7, 7, 8, x, y] where x and y are to be determined.\n    # a = 7 (youngest), b = 7, c = 8 (median).\n    \n    # We also know that the total sum is 45, so 7 + 7 + 8 + x + y = 45.\n    # Simplifying we get: x + y = 23.\n    \n    # Given that the range of the ages is 6, the oldest could be 7 + 6 = 13.\n    # Then, we find y such that x + y = 23 while keeping x >= 8 and y <= 13.\n    # This means the second oldest (d, which is x) must be such that 8 <= x <= (13-1), since y>e.\n    \n    possible_ages = []\n    \n    for x in range(8, 13):  # We iterate until 12 because y must be greater than x, and the max age is 13\n        y = 23 - x  # Calculating the value of y\n        if 7 <= y <= 13 and x < y:  # y must be between 7 and 13, and y > x\n            possible_ages.append((x, y))\n            \n    # From the possible ages tuples, we get the second oldest by taking the first element (x)\n    # of the last tuple, because they are sorted in ascending order by default\n    second_oldest = possible_ages[-1][0]\n    \n    return second_oldest\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # We know that all digits are different and in the given clues:\n    # 1703 -> 2 are correct and in the correct position\n    # 2745 -> 2 are correct but in the wrong position\n    # 3541 -> 4 are correct but all in the wrong position\n\n    # We will use the information to deduce the correct number\n    # Start with an empty list of possible digits for each position\n    possible_digits = [set(range(10)) for _ in range(4)]\n\n    # Process the first clue: 1703\n    # Digits 1 and 7 cannot be in first and second positions\n    possible_digits[0].discard(1)\n    possible_digits[1].discard(7)\n    # Digits 0 and 3 cannot be in third and fourth positions\n    possible_digits[2].discard(0)\n    possible_digits[3].discard(3)\n\n    # Process the second clue: 2745\n    # Digits 2 and 7 cannot be in second and third positions\n    possible_digits[1].discard(2)\n    possible_digits[2].discard(7)\n    # Digits 4 and 5 cannot be in fourth and first positions\n    possible_digits[3].discard(4)\n    possible_digits[0].discard(5)\n\n    # Process the third clue: 3541\n    # Digits 3, 5, 4, 1 are not in the third, first, second, and fourth positions respectively\n    # So, they must be in the first, second, third, and fourth positions respectively\n    possible_digits[0] = {3}\n    possible_digits[1] = {5}\n    possible_digits[2] = {4}\n    possible_digits[3] = {1}\n\n    # Since all digits are correct but in the wrong position for the third clue\n    # We have found the correct position for the digits 3, 5, 4, 1\n    # So the number is 3541 with digits swapped\n    ans = ''.join(str(next(iter(possible_digit))) for possible_digit in possible_digits)\n\n    # Return the correct number\n    return ans\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    players = 16\n    rounds = math.ceil(math.log2(players))\n    return rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Given number of pink flowers\n    pink = 3\n    \n    # The number of yellow flowers is 7 more than that of pink flowers\n    yellow = pink + 7\n    \n    # The number of red flowers is 3 times that of yellow flowers\n    red = 3 * yellow\n    \n    # The total number of red and yellow flowers\n    total_red_yellow = red + yellow\n    \n    return total_red_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls in the morning be x.\n    # Therefore, the number of boys in the morning would be 1.5x as it is 50% more.\n    x = symbols('x')\n    \n    # Afternoon: 12 more boys and girls each join.\n    afternoon_boys = 1.5 * x + 12\n    afternoon_girls = x + 12\n\n    # The ratio of the number of boys to girls becomes 19:14 in the afternoon.\n    equation = Eq(afternoon_boys/afternoon_girls, 19/14)\n\n    # Solve for x.\n    x_value = solve(equation, x)[0]\n\n    # Calculate the total number of children in the Botanic Gardens that afternoon.\n    total = afternoon_boys.subs(x, x_value) + afternoon_girls.subs(x, x_value)\n\n    return total\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the expected arrival time of the train\n    expected_time = datetime.strptime('17:30', '%H:%M')\n    \n    # Define the delay duration\n    delay_duration = timedelta(minutes=30)\n    \n    # Calculate the new arrival time by adding the delay to expected time\n    new_time = expected_time + delay_duration\n    \n    # Return the result in the format \"HH:MM\"\n    return new_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # initial ratio 3:8\n    equation1 = Eq(apples / oranges, 3/8)\n    \n    # after removing one apple, ratio changes to 1:3\n    equation2 = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit goes from 1 to 9\n        for tens in range(0, 10):  # tens digit goes from 0 to 9\n            for ones in range(0, 10):  # ones digit goes from 0 to 9\n                if hundreds > tens and ones > tens:  # \"high-low-high\" condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    \n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_money = 48\n    price_notebook = 3\n    price_pencil = 9\n    total_classmates = 10\n\n    # The maximum number of colour pencils she can buy\n    max_pencils = total_money // price_pencil\n    for pencils in range(max_pencils + 1):\n        notebooks = total_classmates - pencils\n        if notebooks * price_notebook + pencils * price_pencil == total_money:\n            return pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_seats = 9 * 36\n    total_students = 500\n    second_floor_students = total_students - first_floor_seats\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_number = 56\n    next_number = current_number * 2\n    return next_number\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * (31-i) for i in range(31))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_five = 0\n    for i in range(1, n+1):\n        while i % 5 == 0:\n            count_five += 1\n            i //= 5\n    ans = count_five\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of rounds played\n    # Helen's cards change as: 18 + x, Oliver's cards change as: 22 - x\n    # After several rounds, Helen has 10 more cards than Oliver: 18 + x = (22 - x) + 10\n    \n    x = symbols('x')\n    equation = Eq(18 + x, (22 - x) + 10) \n    rounds = solve(equation, x)[0]\n    \n    # Now we calculate Helen's cards after those rounds\n    helen_cards = 18 + rounds\n    \n    return helen_cards\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    total_value = A + B + C\n\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first number be n, the consecutive even numbers will be n, n+2, n+4, n+6, n+8, n+10\n    # Their sum is 6n + 30 = 510\n    n = (510 - 30) / 6  # Solving for n\n    \n    # The six consecutive even numbers\n    even_numbers = [n + i * 2 for i in range(6)]\n    \n    # Mean = sum / number of elements\n    mean = sum(even_numbers) / len(even_numbers)\n    \n    # Since the numbers are consecutive even numbers, median is the average of the 3rd and 4th numbers\n    median = (even_numbers[2] + even_numbers[3]) / 2\n    \n    # The difference between the mean and the median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = -31\n    second_climb = 17\n\n    current_height = initial_height + first_climb + first_descent + second_climb\n\n    return current_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    strawberries, mangoes = symbols('strawberries mangoes')\n    # mangoes = strawberries + 448\n    equation1 = Eq(mangoes, strawberries + 448)\n    # strawberries = 2 * (mangoes - 900)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n    \n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n    \n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # So the five consecutive numbers are: x, x+1, x+2, x+3, x+4\n    # According to the question, the sum of these numbers is 40:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) = 40\n    # 5x + 10 = 40\n    # 5x = 30\n    # x = 6\n    # Therefore, the smallest number is 6\n    smallest_number = (40 - 10) // 5\n    return smallest_number\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - 8, 4)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # 1 is neither prime nor composite, so we exclude it from total numbers\n    composite_numbers = total_numbers - prime_numbers - 1\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    five_digit_numbers = [int(''.join(map(str, perm))) for perm in permutations(digits, 5) if perm[0] != 0]\n    multiples_of_nine = [number for number in five_digit_numbers if number % 9 == 0]\n\n    M = max(multiples_of_nine)\n    N = min(multiples_of_nine)\n\n    result = (M - N) // 9\n    return result\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    sweets_left = initial_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # The difference between terms in an arithmetic sequence is constant\n    n4 = 39  # the fourth term in the sequence\n    n12 = 57  # the twelfth term in the sequence\n    term_distance = 12 - 4  # distance between the 4th and 12th terms\n\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (n12 - n4) / term_distance\n\n    # Calculate the first term using the common difference and the fourth term\n    first_term = n4 - (3 * common_difference)\n    \n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20\n    target_concentration = 0.10\n    total_solution_weight = total_salt / target_concentration\n    water_to_add = total_solution_weight - (30 + 20)\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n    correct_sum = incorrect_sum - incorrect_addend + correct_addend\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(x**2 + x - 380, 0)\n    solutions = solve(equation, x)\n    ans = [s for s in solutions if s.is_integer and s > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250    # m/min\n    race_distance = 3000  # m\n\n    # Time for Johnson to finish the race\n    johnson_time = race_distance / johnson_speed \n\n    # Time for Vicky to finish the race\n    vicky_time = race_distance / vicky_speed\n\n    # Difference in time\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # By the pigeonhole principle, in the worst case, we can have 2 cards of each number before we get a third of any number.\n    # Since there are 13 different numbers, we can draw 2 cards of each number without getting 3 of the same number,\n    # which would amount to 13 * 2 = 26 cards drawn.\n    # The next card we draw must necessarily be the third card of some number.\n    # So we must draw 26 + 1 = 27 cards to guarantee at least 3 cards with the same number.\n\n    return 26 + 1\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = sum(isprime(num) for num in range(1, 21))\n    total_numbers = 20\n\n    proportion = prime_count / total_numbers\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    number1 = 3.2\n    number2 = 5.6\n    average = (number1 + number2) / 2\n    return average\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_count = 8\n    mean_value = 8\n\n    total_sum = mean_value * total_count\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    first_sum = 1275\n    removed_term = 1\n    added_term = 51\n\n    next_sum = first_sum - removed_term + added_term\n\n    return next_sum\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Since we need to ensure 29 balls of one color, 28 of another color, and 10 of the last color,\n    # we need to consider the worst-case scenario to guarantee this.\n    # We might pick the colors we need more of in the end, hence we pick other balls first.\n    \n    # To avoid getting 29 blue balls, we can get at most 28 blue balls, which would be the worst case.\n    blue_case = 28\n    \n    # To avoid getting 28 red balls, we can get at most 27 red balls, which would be the worst case.\n    red_case = 27\n    \n    # To avoid getting 10 white balls, we can get at most 9 white balls, which would be the worst case.\n    white_case = 9\n    \n    # Now, after getting the maximum number of balls without fulfilling the requirement,\n    # we will start to get the desired combination.\n    # The next ball we pick, no matter the color, will fulfill the condition for one color.\n    # Then we continue to pick balls until we fulfill the condition for the second color.\n    # After that, every subsequent ball we pick will be the third color, which will be enough.\n    # So, the minimum number of balls to pick to ensure 29, 28, and 10 of each color respectively is:\n    minimum_balls = blue_case + red_case + white_case + 1  # The +1 is the next ball after the worst case scenario\n    \n    return minimum_balls\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    for p in permutations(students):\n        if p.index('C') in range(p.index('A') + 1, p.index('B')) or \\\n           p.index('C') in range(p.index('B') + 1, p.index('A')):\n            if abs(p.index('D') - p.index('E')) == 1:\n                if abs(p.index('F') - p.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    combinations = len(notebook_prices) * len(calendar_prices)\n    return combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    min_rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return min_rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initialize the variables\n    term = \"123\"\n    sum_str = \"\"\n    # Generate the sum of the sequence as a string\n    for i in range(1, 124):\n        sum_str += term * i\n    # Convert the final sum string to an integer\n    total_sum = int(sum_str)\n    # Extract the hundreds digit\n    hundreds_digit = (total_sum // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution transferred from each bottle\n    x = symbols('x')\n\n    # Initial lime amounts in each bottle\n    lime_in_A = 5 * 0.10\n    lime_in_B = 3 * 0.20\n\n    # After transferring, bottle A's volume is (5-x) and bottle B's volume is (3-x)\n    # The amount of lime in bottle A becomes (lime_in_A - 0.10x + 0.20x)\n    # The concentration of lime in bottle A after transfer is [(lime_in_A + 0.10x - 0.20x) / (5-x)]\n    # Bottle B will have the reverse situation with [(lime_in_B + 0.20x - 0.10x) / (3-x)]\n    # The concentrations in both bottles must be equal after the transfer\n    equation = Eq((lime_in_A - 0.10*x + 0.20*x) / (5-x), (lime_in_B - 0.20*x + 0.10*x) / (3-x))\n\n    # Solve for x\n    solution_volume = solve(equation, x)\n\n    # There can be two solutions, we need the one that is less or equal to the volume of the smaller bottle\n    # and greater than 0 (since we cannot transfer negative volume or more volume than what is in the smaller bottle).\n    ans = [sol for sol in solution_volume if 0 < sol <= 3]\n\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given values\n    painting_length = 90  # in cm\n    lego_length = painting_length - 70.5  # reduction in the length for lego\n    \n    # Given ratio of length to breadth in the painting\n    length_ratio = 5\n    breadth_ratio = 2\n    \n    # Find the breadth of the painting using the given ratio\n    painting_breadth = (breadth_ratio * painting_length) / length_ratio\n    \n    # Since the lego must be of the same proportion as the painting\n    # The breadth of the lego can be calculated with the same ratio\n    # as the painting's length and breadth\n    lego_breadth = (breadth_ratio * lego_length) // length_ratio\n    \n    return int(lego_breadth)  # Return the breadth rounded down to the nearest whole number\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amounts = []\n    lost_coins = [50, 20, 10, 5]\n\n    # Calculate how much her brother has when she loses each type of coin\n    for lost_coin in lost_coins:\n        zoey_amount = total_amount - lost_coin\n        brother_amount = zoey_amount / 2\n        brother_amounts.append(brother_amount)\n\n    # Identify which scenario gives a combination of coins that Zoey's brother can have\n    for index, brother_amount in enumerate(brother_amounts):\n        if brother_amount in [50, 20, 10, 5, 25, 15, 10]:  # Possible combinations of coins brother can have\n            lost_coin = lost_coins[index]\n            return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    people_like_bananas = 18\n    people_like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle\n    people_like_both = (people_like_bananas + people_like_apples) - total_people\n\n    return people_like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # time = distance / speed\n    kane_distance = 200 - 12.5  # Kane was 12.5m behind\n    kane_speed = kane_distance / jaan_time  # speed = distance / time\n    \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # converting pence to pounds\n\n    total_price = cake_price + milk_price\n    actual_payment = total_price - voucher\n\n    return actual_payment\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j, r, p be the rates of John, Raj, and Pete working per hour respectively\n    j, r, p = symbols('j r p')\n    \n    # Together they finish in 1 hour\n    equation1 = Eq(j + r + p, 1)\n    \n    # John and Raj finish in 1 hour and 12 min which is 72 minutes or 1.2 hours\n    equation2 = Eq(j + r, 1 / (1 + 12 / 60))\n    \n    # Raj and Pete finish in 1 hour and 30 min which is 90 minutes or 1.5 hours\n    equation3 = Eq(r + p, 1 / (1 + 30 / 60))\n    \n    # Since we need Raj's rate, we solve for r\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n    \n    # Raj's time to finish the job by himself (in hours), we take the reciprocal of his rate\n    raj_time_hours = 1 / solutions[r]\n    \n    # Convert hours to minutes\n    raj_time_minutes = raj_time_hours * 60\n    \n    return raj_time_minutes\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    hours_worked = 10\n    overtime_hours = hours_worked - 8\n\n    normal_pay = 8 * normal_rate\n    overtime_pay = overtime_hours * normal_rate * overtime_multiplier\n\n    total_earnings = normal_pay + overtime_pay\n\n    return total_earnings\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    result = 35 * 60 / 100\n    return result\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    elder, younger = symbols('elder younger')\n\n    # Equation 1: the sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n\n    # Equation 2: a few years ago, when the elder brother was at the current age of the younger brother\n    # the younger brother was exactly half the elder brother's current age\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # The solution we want is the age of the elder brother\n    elder_age = solutions[elder]\n\n    return elder_age\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for number in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if number % 5 == 3 and number % 7 == 3:\n            return number\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    repeated_number = 928\n    repeated_length = 3\n    total_length = 99\n    \n    # Calculate the number of complete repetitions\n    num_repetitions = total_length // repeated_length\n    \n    # The total sum of digits for one repetition\n    sum_digits_single = sum(int(digit) for digit in str(repeated_number))\n    \n    # Total sum of all repeated digits in the 99-digit number\n    total_sum = sum_digits_single * num_repetitions\n    \n    # Since any number is divisible by 9 if the sum of its digits is divisible by 9,\n    # We can find the remainder of the sum of digits when divided by 9\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # As the worst case scenario, one could take 2 white, 2 blue, 2 green and 2 orange out\n    # and still not have 3 of the same color. That's 2 of each color, totaling 8 balls.\n    # But the next ball one takes out has to be the third ball of some color.\n    # Therefore, one more ball is needed.\n    \n    balls_needed = (2 * 4) + 1  # 2 balls of each color plus 1\n    return balls_needed\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    number = 1\n    while not (number % 5 == 1 and number % 6 == 1 and number % 7 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for x in range(1, 10): # Tens digit, cannot be zero\n        for y in range(0, 10): # Units digit\n            original = 10 * x + y\n            swapped = 10 * y + x\n            if swapped == (original // 3) + 3 and original % 3 == 0:\n                return original\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of teams as 'n'.\n    n = symbols('n')\n\n    # Each team plays against each other team twice, hence we have\n    # n*(n-1) total games because team i plays n-1 other teams.\n    # But because each match is counted twice (once for each team),\n    # we divide by 2 to avoid double counting.\n    # We set up the equation and solve for 'n'.\n    \n    matches = n * (n - 1) / 2\n\n    # Set the equation to be equal to the total matches, which is 30,\n    # and solve for 'n'.\n    equation = Eq(matches, 30)\n\n    solutions = solve(equation, n)\n\n    # The number of teams can't be negative, so we take the positive solution.\n    num_teams = max(solutions)\n\n    return num_teams\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let the number of years later be x.\n    # Current sum of their ages = 34\n    # Future sum of their ages = 40\n    # Sum increases by 2x because each year both George and his sister get 1 year older\n    # So, 34 + 2x = 40\n    # We solve for x: 2x = 40 - 34, x = (40 - 34) / 2\n    \n    x = (40 - 34) / 2\n    return x\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of rope required for one turn around the tree\n    # Let L be the total length of the rope\n\n    # According to the problem:\n    # 10x + 3 = L (Ten turns leaves 3 meters of rope)\n    # 12x - 3 = L (Twelve turns is short of 3 meters of rope)\n\n    # We can set up a system of equations:\n    # 10x + 3 = 12x - 3\n    # Solve for x:\n    x = (3 + 3) / (12 - 10)\n\n    # Once we have x, we can find out how many meters 8 turns would leave\n    # 8 turns would leave L - 8x meters of rope\n    # We use the first equation (10x + 3 = L) to find L\n    L = 10 * x + 3\n\n    # Now we calculate the length left after 8 turns\n    length_left = L - 8 * x\n    \n    return length_left\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # According to the Pigeonhole Principle, if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    \n    # Ivy's approach: She uses Pigeonhole Principle, but she's using it incorrectly.\n    # In her approach:\n    # - She wants to ensure at least 5 people from the same country: that's the pigeonhole size.\n    # - There are 11 countries: those are the pigeonholes.\n    \n    # The correct calculation should be:\n    # The maximum number of participants without having 5 from the same country (worst case scenario):\n    # (5-1) participants from each country * 11 countries = 4*11 = 44 participants\n    # Adding one more participant will ensure that we have 5 from one country:\n    # 44 + 1 = 45 participants\n    \n    # The correct answer is 45 participants will ensure at least 5 participants from the same country.\n    return 45\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x, y, z = solutions[x], solutions[y], solutions[z]\n    \n    return x + y + z\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = -(-students // tables_per_row)  # Ceiling division\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        if (p[0] * (10 * p[1] + p[2]) == (10 * p[2] + p[3])):\n            return sum(p)\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n    \n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty, nora + 3)\n    equation2 = Eq(kitty + nora, 11)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    \n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    spent = (3/7) * total_money\n    not_used = total_money - spent\n    equation = Eq(spent - not_used, 12)\n    \n    solution = solve(equation, total_money)\n    amount_spent_on_bag = (3/7) * solution[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Let the original number be x\n    # According to the problem statement, we need to solve the equation:\n    # 2 * x + 6 = 28\n\n    # Now let's solve for x\n    # Subtract 6 from both sides of the equation\n    result = 28 - 6\n\n    # Now divide the result by 2 to find the original number\n    original_number = result / 2\n    \n    # Return the original number\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Since the ages are in consecutive years, this form an arithmetic sequence.\n    # Let 'y' be the age of the youngest dwarf.\n    # Then the ages of the youngest three are y, y+1, y+2 and their sum is 3y + 3 = 42.\n    # Solving for 'y' gives us the age of the youngest dwarf.\n    y = (42 - 3) / 3\n\n    # Now, let's find the age of the oldest dwarf, which is y+6 (since there are 7 dwarfs).\n    # The ages of the oldest three are y+4, y+5, y+6 and their sum is 3y + 15.\n    oldest_three_sum = 3 * y + 15\n\n    return int(oldest_three_sum)\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    # Define the new operation\n    def new_operation(a, b):\n        return a - sum(range(1, b))\n\n    # Compute 111 ⊙ 7\n    ans = new_operation(111, 7)\n    \n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    # Using the formula for the sum of the squares of the first n natural numbers\n    # 1²+2²+3²+......+n² = 1/6 * n * (n + 1) * (n + 2)\n    \n    # Calculate the sum of squares up to 100/5 = 20 then multiply back by 5² to adjust for the scaling\n    n = 100 // 5\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)\n    \n    ans = sum_of_squares * (5**2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # total toys made by all factories\n    equation1 = Eq(A + B + C, 659)\n    # toys made by factory A and B\n    equation2 = Eq(A + B, 447)\n    # toys made by factory B and C\n    equation3 = Eq(B + C, 335)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    eq1 = Eq(stickers - 13*pupils, 190)\n    eq2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((eq1, eq2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    # Let the number of boys be x\n    # Then the number of girls is x + 30\n    # We know that the number of boys plus the number of girls is equal to total_pupils\n    # x + (x + 30) = total_pupils\n    # x + x + 30 = total_pupils\n    # 2x + 30 = total_pupils\n    # 2x = total_pupils - 30\n    # x = (total_pupils - 30) / 2\n    # So the number of girls, which is x + 30, is:\n    girls = ((total_pupils - 30) / 2) + 30\n    return int(girls)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    file, storybook = symbols('file storybook')\n    \n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n    \n    solutions = solve((equation1, equation2), (file, storybook))\n    \n    total_cost = solutions[file] + solutions[storybook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_sausages = 21\n    \n    total_sausages = initial_trays * initial_mean + additional_sausages\n    new_trays = initial_trays + 1\n    new_mean = total_sausages / new_trays\n    \n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if tens < hundreds > ones and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = 3.5 / 0.25\n    return result\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Speed of the train is the same for both bridges.\n    # Let's calculate the speed of the train using the first bridge information.\n    # Total distance covered when crossing the first bridge is the length of the train plus the length of the bridge.\n    total_distance_first_bridge = 137 + 263\n    # Time taken to cross the first bridge is given as 20 seconds.\n    time_first_bridge = 20\n    # Now, calculate the speed of the train. distance = speed * time -> speed = distance / time\n    train_speed = total_distance_first_bridge / time_first_bridge\n    \n    # Now we use the second time to find out the length of the second bridge.\n    # Time taken to cross the second bridge is given as 27 seconds.\n    time_second_bridge = 27\n    # Total distance covered when crossing the second bridge is speed * time.\n    total_distance_second_bridge = train_speed * time_second_bridge\n    # Length of the second bridge is the total distance minus the length of the train.\n    length_second_bridge = total_distance_second_bridge - 137\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total_money = rani + brenda\n    equal_amount = total_money // 2\n    money_to_give = brenda - equal_amount\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    total_balls = 125\n    equation1 = Eq(blue + red, total_balls)\n    equation2 = Eq(2/5 * blue, 3/5 * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    blue_balls = solutions[blue]\n    red_balls = solutions[red]\n\n    return blue_balls - red_balls\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    ans = (2022 + 4567 * 7890) / (4568 * 7890 - 5778)\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Given that each student gets at least one book, we have to distribute \n    # the first three books to each of the three students,and then the remaining\n    # four books can be distributed to any of the three students.\n    \n    # We can distribute the first three books in 3! ways (each student gets exactly one book).\n    first_three_books_distribution = factorial(3)\n    \n    # For the remaining four books, since we have three students, each book has 3 choices of students.\n    # So, we distribute these four books in 3^4 ways.\n    remaining_books_distribution = 3**4\n    \n    # Total number of ways to distribute seven different books among three students\n    # is the product of the two distributions calculated above.\n    total_ways = first_three_books_distribution * remaining_books_distribution\n    \n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for the cost of a single watch and a single handbag\n    watch, handbag = symbols('watch handbag')\n\n    # Create the equations based on the information given\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the equations to find the cost of one watch and one handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # Calculate the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The problem can be viewed as finding partitions of the number 88 into 8 distinct parts\n    # (since each child must have a unique number of candies), and then finding the partition\n    # where the largest part (the most candies for one child) is minimized.\n\n    # To ensure each child gets at least one candy, we start by giving each child one candy,\n    # reducing the amount of candy we need to distribute to (88 - 8) = 80 candies.\n    candies_left = 88 - 8\n\n    # Now we have to distribute 80 candies to 8 children, with each child receiving more candies\n    # than the previous one. We can start by giving the first child 1 candy, the second 2 candies,\n    # and so on until the seventh child. The eighth child will receive the remainder.\n    # This is the minimal distribution to make sure that no two children receive the same amount of candy.\n    # The sequence will be (1, 2, 3, ..., 7, candies_left - sum(1 to 7)).\n\n    # We start child numbering from 0 to 7 for simplicity.\n    # The minimum amount given to the first seven children will be sum of first seven natural numbers.\n    min_candies = sum(range(1, 8))\n\n    # The remainder for the eighth child (the one to receive the most) is:\n    max_candies_for_eighth = candies_left - min_candies\n\n    # Since each child must have at least one piece already,\n    # we add the base piece to the max_candies_for_eighth.\n    max_candies_for_eighth += 1  # Add the minimum one piece for the eighth child.\n\n    return max_candies_for_eighth\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # Daughter's age on 1st December 1996\n    daughter_age_1996 = 40\n    \n    # Difference in years between 1st December 1996 and 1st December 2008\n    year_difference = 2008 - 1996\n    \n    # Grandmother's age on 1st December 1996\n    grandmother_age_1996 = grandmother_age_2008 - year_difference\n    \n    # Grandmother's age when her daughter was born\n    grandmother_age_when_daughter_born = grandmother_age_1996 - daughter_age_1996\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are initially 3 choices for A to pass the ball to (B, C, or D).\n    # After the first pass, there are 2 choices for the next individual to pass the ball to\n    # (excluding A, who just passed the ball, and themselves).\n    # After the second pass, the last pass must go to A, so there is only 1 choice.\n\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nicole, eddy = symbols('nicole eddy')\n    \n    # Nicole had thrice as many tokens as Eddy\n    equation1 = Eq(nicole, 3 * eddy)\n    # After using some tokens, they had 24 tokens left altogether\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n    \n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(8)\n    ways_A_B_together = factorial(7) * 2  # Treat A and B as one person, with 2 permutations for A and B\n    ways_C_D_together = factorial(7) * 2  # Treat C and D as one person, with 2 permutations for C and D\n\n    # Subtract cases where C and D are together from total possibilities\n    acceptable_ways = total_ways - ways_C_D_together\n\n    # Calculate the acceptable ways where A and B are also together\n    acceptable_ways_with_A_B = ways_A_B_together - (factorial(6) * 2)\n\n    return acceptable_ways_with_A_B\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200 * 0.35\n    lenny_solution = 300 * 0.50\n    total_solution = leroy_solution + lenny_solution\n    total_weight = 200 + 300\n\n    concentration = (total_solution / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    valeria_eat = (total_candy - 6 - 22) // 2\n    valeria_current_candy = 22 + valeria_eat\n    return valeria_current_candy\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    from sympy import symbols, solve\n\n    k = symbols('k', real=True, positive=True)\n    inequality = 12**50 > k**75\n    solution_k = solve(inequality, k)\n\n    # Since we want the largest whole number, we use the floor of the solution\n    ans = int(solution_k[0].evalf())\n\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_count = 133\n    rotten_oranges = 34\n    bought_oranges = 25\n\n    initial_count = final_count - bought_oranges + rotten_oranges\n    \n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n    \n    result = psi(14, 13)\n    ans = psi(result, 12)\n    \n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    single_digits = 9  # Count of numbers from 1 to 9\n    double_digits = 10  # Count of numbers from 10 to 19\n\n    # Each single digit number has 1 digit, each double digit number has 2 digits\n    total_digits = single_digits * 1 + double_digits * 2\n\n    return total_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g = symbols('g')\n    b = 36 - g  # Since there are 36 students in total\n\n    # Create two equations based on the problem statement\n    # Equation 1: Total average score (based on the number of students)\n    equation1 = Eq((88 * g + 91 * b), 89 * 36)\n\n    # Solve the equation for g\n    solution = solve((equation1), (g))\n\n    return solution[g]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each type of animal\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Total number of legs for cats, dogs, and the rabbit\n    total_legs_cats_dogs_rabbit = 2 * legs_per_cat + 2 * legs_per_dog + legs_per_rabbit\n    \n    # Calculate the remaining legs to be accounted for by birds\n    remaining_legs_for_birds = 28 - total_legs_cats_dogs_rabbit\n    \n    # Calculate the number of birds based on their number of legs\n    num_birds = remaining_legs_for_birds // legs_per_bird\n    \n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_time = 6\n    original_people = 5\n    target_time = 5\n    ratio_of_work = 2  # The neighbor's fence is twice as long\n    \n    # Total work is proportional to number of people and time.\n    # Work = People * Time\n    # Work required for the neighbor's fence is twice the original work.\n    # The minimum number of people needed (min_people) is unknown.\n    # We have the equation: original_people * original_time = min_people * target_time * ratio_of_work\n    # We need to solve for min_people and we want the minimum integer number of people, thus we take the ceiling of the result.\n\n    min_people = (original_people * original_time) / (target_time * ratio_of_work)\n    \n    # As we are interested in the minimum number of people, if min_people is not an integer, we take the next highest integer\n    from math import ceil\n    return ceil(min_people)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    floors_in_12_minutes = 5 - 1  # from the first floor to the fifth floor is 4 flights\n    minutes_needed_for_one_flight = 12 / floors_in_12_minutes\n    \n    # How many flights in 30 minutes?\n    floors_in_30_minutes = 30 / minutes_needed_for_one_flight\n    return int(floors_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_for_50_cookies = 8\n    cookies_made_with_21_6_grams = (50 / butter_for_50_cookies) * 21.6\n    return cookies_made_with_21_6_grams\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N_base_8 = \"12345654321\"\n    N_base_10 = int(N_base_8, 8)\n    \n    # Calculate the remainder of N divided by 7\n    remainder_7 = N_base_10 % 7\n    \n    # Calculate the remainder of N divided by 9\n    remainder_9 = N_base_10 % 9\n    \n    # Sum the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    years_passed_since_then = 3 + 4  # three years ago plus four years in the future\n    combined_age_in_four_years = combined_age_three_years_ago + (2 * years_passed_since_then)\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (n + 2) * (2 * n + 1)) // 12\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import divisor_count, is_square\n    count = 0\n    divisors = range(1, 2017)\n    for divisor in divisors:\n        if 2016 % divisor == 0 and is_square(divisor):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    total_sum = 60\n    num_numbers = 3\n\n    middle_number = total_sum // num_numbers\n    largest_number = middle_number + 1\n\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    # We have to find distinct digits for A, B, C, and D such that\n    # ABA + CDC = 726, and A!=B!=C!=D and each is a digit [0-9]\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    if len({A, B, C, D}) == 4:\n                        if (100*A + 10*B + A) + (100*C + 10*D + C) == 726:\n                            return A + B + C + D\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    max_non_yellow = 6 + 4 + 12  # The sum of the orange, pink, and brown shirts\n    must_take = max_non_yellow + 1  # To be sure to get at least one yellow shirt\n    return must_take\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = total_pens_needed / 8\n    \n    return -(-total_pens_needed // 8)  # Ceiling division, to ensure enough packs are bought\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    mixed_numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(mixed_numbers)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Since 94 to 80 decreases by 14 (94 - 80 = 14),\n    # and 80 to 73 decreases by 7 (80 - 73 = 7),\n    # it seems like the decreases are halving each time.\n    # Let's assume the pattern continues and check if it fits the sequence.\n\n    # Decrease from 94 to the missing number should be half of 14, which is 7.\n    # Therefore, the missing number should be 94 - 7 = 87.\n\n    # Now let's check if the pattern holds for the rest of the sequence:\n    # Decrease from 87 to 80 should be half of 7, which is 3.5 (but since we are dealing with whole numbers, this part of the pattern breaks here)\n    # However, since we only need to fill the missing number and the next decrease is not relevant to the missing number itself, the missing number (87) is still valid.\n\n    # Thus, the missing number in the sequence is 87.\n    return 87\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age = solve_congruence(*congruences)\n    return age[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    # Amount of orange juice sold in wine glasses in ml\n    wine_glasses_ml = 25 * 100\n    # Amount of orange juice sold in tumblers in ml\n    tumblers_ml = 12 * 200\n    \n    # Total amount sold in ml\n    total_ml = wine_glasses_ml + tumblers_ml\n    \n    # Convert to litres (1000 ml in 1 litre)\n    total_litres = total_ml / 1000\n    \n    # Number of cartons needed, rounded up to nearest whole as you can't buy part of a carton\n    from math import ceil\n    num_cartons = ceil(total_litres)\n    \n    return num_cartons\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the number of fruits as multiples of the ratio.\n    a, p, l = symbols('a p l')\n    \n    # Original ratios 2:9:8\n    equation1 = Eq(a, 2*p/9)\n    equation2 = Eq(l, 8*p/9)\n\n    # After selling, the ratio of peaches to lemons becomes 6:5\n    # p - 12 : l - 60 = 6 : 5\n    # Solve above equation for p and l\n    sold_peaches = 12\n    sold_lemons = 60\n    equation3 = Eq((p - sold_peaches) * 5, (l - sold_lemons) * 6)\n\n    # The total number of avocados sold\n    sold_avocados = 52\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, p, l))\n    \n    # Total number left\n    total_left = solutions[a] - sold_avocados + solutions[p] - sold_peaches + solutions[l] - sold_lemons\n    \n    return total_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of any number in base 10 depends only on the last digit of the power of 2.\n    # Since the powers of 2 cycle every 4, we find the remainder of the exponent divided by 4.\n\n    # Cycle of last digits of powers of 2: 2 -> 4 -> 8 -> 6 -> 2 -> ... (repeats every 4)\n    # Calculate the remainder when exponent 859433 is divided by 4 to find the position in the cycle\n    remainder = 859433 % 4\n\n    # Create a mapping for the last digit based on the remainder (cycle position)\n    last_digits = {0: 6, 1: 2, 2: 4, 3: 8}\n\n    # Return the corresponding last digit from the mapping\n    return last_digits[remainder]\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    face_teacher = 0\n    # Loop through all students in line\n    for i in range(1, 61):  # from 1 to 60 inclusive\n        # If a multiple of 3 or 5, the student turns; a multiple of both, turns back.\n        # We need to count those who are initially facing, turn away, and then turn back (divisible by both).\n        if i % 3 != 0 and i % 5 != 0 or (i % 3 == 0 and i % 5 == 0):\n            face_teacher += 1\n    return face_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if age % 2 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sweets Jess and Jill have originally\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, (6/5) * jess)\n\n    # After Jill gives eight sweets to Jess:\n    # Jill has (jill - 8) sweets, Jess has (jess + 8) sweets\n    # Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, (4/7) * (jess + 8))\n\n    # Solve the system of equations for jess and jill\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total sweets they have altogether\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7]  # the digit cards available\n    max_number = 0\n\n    # Check all permutations of all lengths\n    for i in range(1, len(digits)+1):\n        for perm in permutations(digits, i):\n            num = int(''.join(map(str, perm)))  # form the number\n            if all(num % d == 0 for d in perm):  # check divisibility\n                max_number = max(max_number, num)  # update maximum if necessary\n\n    return max_number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for n in range(1, 900, 2):\n        sum = 0\n        length = 0\n        for i in range(n, 900, 2):\n            sum += i\n            length += 1\n            if sum == 900:\n                max_length = max(max_length, length)\n                break\n            elif sum > 900:\n                break\n    return max_length\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A represent Adam's weight, B represent Ben's weight, and C represent Carl's weight.\n    # The given equations can be written as:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Sum all equations: A + B + B + C + A + C = 102 + 97 + 93\n    # Simplify: 2A + 2B + 2C = 292\n    # Divide by 2 to find the total weight: A + B + C = 146\n\n    total_weight = (102 + 97 + 93) // 2\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):  # two-digit numbers range from 10 to 99\n        if number % 3 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_num = 121  # start checking from the smallest number above 120\n\n    while True:\n        if (smallest_num - remainder) % divisor == 0:\n            return smallest_num\n        smallest_num += 1\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm_to_m = 2 / 100\n\n    ans = height_m + height_cm_to_m\n    return ans\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.80\n    total_score = first_test_score + second_test_score + third_test_score\n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(bookmarks - 6*pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n    \nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    jan_saving = 13\n    feb_saving = 18\n    mar_saving = 5\n\n    mean_saving = (jan_saving + feb_saving + mar_saving) / 3\n\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            # Convert the hour and minute into a string to check for the presence of '4's\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count the number of '4's present in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    ans = isprime(233)\n    return ans\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum((7*i)**2 for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(131, 150))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Calculate the multiple of 4 that is just below or equal to 56\n    start = 56 // 4\n    # Calculate the multiple of 4 that is just below or equal to 92\n    end = 92 // 4\n    # Calculate the number of multiples of 4 in the range\n    count = end - start + 1  # Add 1 because the range is inclusive\n    return count\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Distance between Magic Town and Super Town\n    distance = 144\n    # Time taken to travel downstream\n    time_downstream = 8\n    # Speed of the ship in still water\n    speed_ship = 15\n\n    # Calculate the speed of the current as downstream speed - ship speed in still water\n    # Downstream speed = Distance / Time taken to travel downstream\n    speed_current = (distance / time_downstream) - speed_ship\n\n    # Speed of the ship upstream\n    speed_upstream = speed_ship - speed_current\n\n    # Time taken to travel upstream is distance / speed_upstream\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    num_to_select = 2\n    return comb(total_students, num_to_select)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo, kangaroo = symbols('hippo kangaroo')\n\n    # Hippo eats 45 kg more food than the kangaroo each day\n    equation1 = Eq(hippo, kangaroo + 45)\n\n    # After 20 days, hippo has consumed 10 times as much food as the kangaroo in total\n    equation2 = Eq(20 * hippo, 10 * (20 * kangaroo))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n\n    # Total amount of food the hippo consumed in 20 days\n    total_food_hippo = 20 * solutions[hippo]\n\n    return total_food_hippo\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    initial_time = datetime.strptime('3:15 PM', '%I:%M %p')\n    meet_time = initial_time + wait_time\n    return meet_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the remainders and moduli for each division\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\n    # Solve the system of congruences\n    answer, _ = solve_congruence(*congruences)\n\n    return answer\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(2, 21) for i in range(j, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rates of workers A and B\n    rate_a = 1 / 15\n    rate_b = 1 / 20\n\n    # Total work done by A and B in 2 days\n    work_done = 2 * (rate_a + rate_b)\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n\n    # Time for worker A to finish the remaining job\n    time_a = remaining_work / rate_a\n\n    return time_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure at least two balls of the same color, consider the worst-case scenario.\n    # Worst-case scenario: you pick alternately one green and one blue until you are forced to pick a matching one.\n    # So you pick 1 green then 1 blue.\n    # The next ball you pick MUST be either green or blue, so you will have at least two balls of the same colour.\n    return 1 + 1 + 1  # 1st green, 1st blue, and then either a 2nd green or blue\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # Based on the pigeonhole principle,\n    # to ensure that there are at least 11 students sharing the same zodiac,\n    # if every zodiac sign had 10 students (not enough to make 11), and the next student,\n    # regardless of their sign, would create a group of 11 students with the same sign.\n    students_per_sign = 10\n    total_signs = 12\n    students_needed = students_per_sign * total_signs + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "def solution():\n    from itertools import permutations\n\n    total_count = 0\n    \n    for permutation in permutations(\"ABCDEFG\"):\n        p = ''.join(permutation)\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or p.index('A') > p.index('C') and p.index('A') < p.index('B'):\n            if abs(p.index('F') - p.index('G')) != 1:\n                if p.index('D') == p.index('E') - 1 or p.index('D') == p.index('E') + 1:\n                    total_count += 1\n    \n    return total_count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n\n    # In the worst case, she will take out 9 balls without getting 10 balls of the same color.\n    # She could take 4 yellow, 4 white and 1 black and still not have 10 of the same color.\n    \n    # However, as soon as she takes one more ball, regardless of the color, she will have 10 of that color.\n    # This is due to the Pigeonhole Principle.\n    \n    # Therefore, she needs to take out one more ball in addition to the worst case to be sure to have 10 of the same color.\n    worst_case = yellow_balls - 1 + white_balls - 1 + 1  # (minus one from yellow and white to not reach 10, then add one black)\n    ans = worst_case + 1  # Adding that one more ball to get 10 of the same color\n    \n    return ans\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    start_seat = 3\n\n    last_child_seat = (start_seat + total_candies - 1) % total_children\n    if last_child_seat == 0:\n        last_child_seat = total_children\n\n    return last_child_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "from math import lcm\n\ndef solution():\n    spaghetti_interval = 7\n    apple_pie_interval = 3\n\n    # Find the least common multiple of the two intervals\n    days_until_same_day = lcm(spaghetti_interval, apple_pie_interval)\n\n    return days_until_same_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Using the Inclusion-Exclusion Principle\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # |A ∩ B| = |A| + |B| - |A ∪ B|\n    # The smallest possible number is when the intersection is the largest.\n    children_with_both = children_with_dogs + children_with_cats - total_children\n\n    return children_with_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming \"the table\" refers to the arithmetic sequence provided in the examples above\n    first_term = 2\n    last_term = 240\n    difference = 2\n    \n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) / difference) + 1\n    \n    # Using the formula for the sum of an arithmetic series: n/2 * (first_term + last_term)\n    sum_of_numbers = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_sorted = sorted(data)\n    range_of_data = data_sorted[-1] - data_sorted[0]\n    return range_of_data\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # Natalie had 36 less shirts than skirts\n    eq1 = Eq(shirts, skirts - 36)\n    \n    # After selling 2/3 of her shirts and 5/6 of her skirts, 72 were left\n    eq2 = Eq((1 - 2/3) * shirts + (1 - 5/6) * skirts, 72)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    num_months = 3\n    total_saving = monthly_saving * num_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n    \n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n    \n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n    \n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # speed going to the place is 20 mph\n    speed_going = 20\n    \n    # distance to the place is 120 miles\n    distance = 120\n    \n    # time taken to go to the place is distance/speed\n    time_going = distance / speed_going\n    \n    # total time for round trip is distance/speed average, where speed average is 30 mph\n    speed_average = 30\n    total_time_round_trip = (2 * distance) / speed_average\n    \n    # time taken to return is total time for round trip - time taken to go to the place\n    time_returning = total_time_round_trip - time_going\n    \n    # speed when returning is distance/time returning\n    speed_returning = distance / time_returning\n    \n    return speed_returning\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 400:\n        ans += 5 * 6 * 11\n\n    return ans\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    ones = 34  # There's always a '1' in the ones place for each number 1-34\n    tens = (34 - 10 + 1) * 1  # '1' for each number in tens place starting from 10 to 34\n    return ones + tens\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make one cut to create two pieces. \n    # To create 5 pieces, we need 4 cuts because with each cut the number of pieces increases by 1.\n    cuts_needed = 5 - 1\n    # Therefore, it takes 2 minutes per cut. Multiply the number of cuts needed by the time per cut.\n    total_time = cuts_needed * 2\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    count_numbers = 3\n\n    original_total = original_average * count_numbers\n    new_total = new_average * (count_numbers + 1)\n\n    num_to_add = new_total - original_total\n    \n    return num_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    total_hay = horses_initial * days_initial  # Total units of hay for 12 horses for 15 days\n    days_final = total_hay / horses_final  # Divide the total units of hay by the number of final horses\n    \n    return days_final\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    difference = 4\n    last_term = 65\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    return 301 + 303 + 305 - 9\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Create the equations based on the information given\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n    \nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_expressway / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price_per_set = 78\n    sock_price_per_pair = 12\n    number_of_legs_per_alien = 5\n    number_of_aliens = 6\n\n    total_shoe_sets_needed = number_of_legs_per_alien * number_of_aliens // 5\n    total_sock_pairs_needed = number_of_legs_per_alien * number_of_aliens // 2\n\n    total_cost = total_shoe_sets_needed * shoe_price_per_set + total_sock_pairs_needed * sock_price_per_pair\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n\n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean_value = np.mean(data)\n    mad = np.mean(np.abs(data - mean_value))\n\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total_oranges = 13\n    kids = 3\n    # We need to find partitions of 13 into at most 3 parts. Each way to partition represents\n    # a way of distributing oranges to kids. Since someone can get zero oranges, we can imagine\n    # 3 extra \"placeholder\" oranges ensure that each kid gets at least one.\n    total_choices = total_oranges + kids - 1\n\n    # Combinations with replacement is equivalent to placing \"dividers\" between oranges to\n    # represent how they are split among the kids. This requires (kids - 1) dividers.\n    required_dividers = kids - 1\n\n    # The number of ways to arrange these dividers in the sequence is the solution.\n    ans = len(list(combinations_with_replacement(range(total_choices), required_dividers)))\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    \n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    for i in range(1000, 10000):\n        new_number = (i % 10) * 1000 + i // 10\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of $0.50 cookies David has\n    # let y be the number of $0.50 cookies Jeremy has\n    # let z be the number of $0.10 cookies Jeremy has\n    \n    x, y, z = symbols('x y z')\n\n    # Given that David's cookies were cost thrice as much as Jeremy’s\n    # So for every $0.50 of cookie that David has, Jeremy has $0.50 * 3 = $1.50 worth of cookies\n    # Since David has only $0.50 worth of cookies, we can equate it directly:\n    # 0.5 * x = 0.5 (since David has only $0.50 cookies)\n    equation1 = Eq(0.5 * x, 0.5)\n    \n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(y, (3/5) * z)\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(z, y + 60)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # How much were Jeremy’s cookies worth\n    # Calculating the total worth of Jeremy's cookies\n    jeremy_cookies_worth = 0.50 * solutions[y] + 0.10 * solutions[z]\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from collections import Counter\n    from itertools import combinations\n    from math import prod\n    \n    # List of numbers to pick from\n    numbers = [6, 12, 35, 175, 245, 300]\n    # Get all possible product combinations for Candy (2 cards) and Candice (3 cards)\n    candy_comb = [prod(comb) for comb in combinations(numbers, 2)]\n    candice_comb = [prod(comb) for comb in combinations(numbers, 3)]\n    \n    # Find the counts of each product\n    candy_counter = Counter(candy_comb)\n    candice_counter = Counter(candice_comb)\n    \n    # Intersection of Counters will give us the common products\n    common_products = list((candy_counter & candice_counter).elements())\n    \n    # Now find which numbers did not contribute to the common product\n    for common_product in common_products:\n        selected_numbers = []\n        for number in numbers:\n            if common_product % number == 0:\n                selected_numbers.append(number)\n        if len(selected_numbers) == 5:\n            return list(set(numbers) - set(selected_numbers))[0]\n    return None\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            return total\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # The distance between the first and fifth tree is 20m, which means there are 4 intervals.\n    interval_length = 20 / 4\n    \n    # The whole road is 200m long.\n    road_length = 200\n    \n    # The number of intervals is the road length divided by the interval length.\n    num_intervals = road_length / interval_length\n    \n    # The number of trees is the number of intervals plus one (since we start counting from the first tree).\n    num_trees = num_intervals + 1\n    \n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # Tap A fills the tank in 12 minutes, so its rate is 1/12 tank per minute\n    rate_B = 1 / 8   # Tap B fills the tank in 8 minutes, so its rate is 1/8 tank per minute\n\n    combined_rate = rate_A + rate_B  # The combined rate of both taps\n\n    half_tank_time = 0.5 / combined_rate  # Time to fill half the tank, at the combined rate\n\n    return half_tank_time\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Calculation according to BODMAS/BIDMAS rules\n    result = (36 * 21) / (6 * 7)\n    \n    # Convert the floating-point result to an integer\n    ans = int(result)\n    \n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruits = 48\n    fraction_of_apples = 5 / 8\n    apples = total_fruits * fraction_of_apples\n    pears = total_fruits - apples\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    # Start from 1, because the number of boys in the square array should be at least 1.\n    for boys_side_length in range(1, girls + 1):\n        total_boys = boys_side_length ** 2\n        # The new square array will have one more row and column.\n        total_students = (boys_side_length + 1) ** 2\n        # The number of girls should be equal to the number of new students added by the extra row and column.\n        if total_students - total_boys == girls:\n            return total_boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    \n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between_ann_david = 3\n\n    # Since Ann is 8th and there are 3 people between her and David, we add these.\n    david_position = ann_position + people_between_ann_david + 1  # +1 because David is after those 3 people\n\n    # David is the second last person, so the total number of people is David's position plus 1.\n    total_people = david_position + 1\n\n    return total_people\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    net_progress = day_climb - night_slide\n    days_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days_count += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n\n    return days_count\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define a symbol for the variable\n    equation = Eq(6 * 1.5 + 4 * x, 19)  # Translate the equation into SymPy syntax\n\n    solution = solve(equation, x)  # Solve the equation for x\n\n    return solution[0]  # Return the value of x\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england = 978\n    height_world = 8848\n\n    difference = height_world - height_england\n\n    return difference\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure getting 29 balls of one color while picking the worst-case scenario,\n    # we need to consider the case where we pick the maximum number of balls of the other colors first.\n    # To guarantee 29 balls, we must pick all balls but one from the other two colors.\n    # Therefore, to get 29 blue balls, we may pick all red and white balls first:\n    red_and_white = 40 + 30 - 1\n\n    # To guarantee 28 balls, we now pick balls until we reach 28 of one color considering the previous pick:\n    # Following the worst-case scenario, we pick 28 blue balls, which might include all of the remaining red balls:\n    red_and_white_and_some_blue = red_and_white + (80 - 29)\n\n    # At this point, we have picked 28 blue balls and all red and white balls except for one.\n    # To ensure the remaining count for the last color, we must pick at least 10 of that color.\n    # Adding the 10 picks to the count: \n    total_picks = red_and_white_and_some_blue + 10\n\n    return total_picks\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(10, 50):\n        if i % 3 == 2 and isprime(i) and (i - 2) % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    # Alicia spends half of her money\n    equation1 = Eq(alicia - alicia / 2, beth - 60)\n    # Beth spends $60\n    equation2 = Eq(beth - 60, casey - 3 * (alicia / 2))\n    # Casey spends three times as much as Alicia did\n    equation3 = Eq(casey - 3 * (alicia / 2), beth - 60)\n    # They have $900 together\n    equation4 = Eq(alicia + beth + casey, 900)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (alicia, beth, casey))\n    \n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # After 10! every factorial will end with a zero since the factors will include 2 and 5.\n    # So the last non-zero digit of 2014! is actually the last non-zero digit of 10!\n    # Since 10! is 3628800, the last non-zero digit is 8.\n\n    return 0  # Every number factorial greater than 9! will end with a zero.\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2 * 2 * 3 * 8 * 5 * 5 * 5\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    return count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 6\n    denominator = 20\n    desired_numerator = 30\n\n    scale_factor = desired_numerator / numerator\n\n    ans = denominator * scale_factor\n\n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    answer = 1\n    step1 = answer + 8\n    step2 = step1 * 8\n    step3 = step2 // 3\n\n    number = step3 - 6\n\n    return number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n    equation = Eq(original_number + new_number, 253)\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    # Initialize variables\n    total_eights = 22\n    count_eights = 0\n    page = 0\n\n    # Loop through the page numbers\n    while count_eights < total_eights:\n        page += 1\n        # Count the number of '8's in the current page number\n        count_eights += str(page).count('8')\n\n    return page\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # total cookies\n    total_cookies = 100\n    # difference between the number of cookies each day\n    difference = 6\n    # number of days\n    num_days = 5\n\n    # Using the sum formula for arithmetic sequences S = n/2 * (2a + (n-1)d),\n    # where S is the sum of the sequence, n is the number of terms,\n    # a is the first term, and d is the difference between terms.\n    # We also know S is 100, n is 5, and d is 6.\n    # We solve for the first term a: 100 = 5/2 * (2a + (5-1)*6)\n    # Simplify the equation 100 = 5/2 * (2a + 24)\n    # 100 = (5 * (2a + 24)) / 2\n    # 100 * 2 = 5 * (2a + 24)\n    # 200 = 10a + 120\n    # 80 = 10a\n    # a = 8\n    first_day_cookies = (total_cookies * 2 - difference * (num_days - 1) * num_days) // (2 * num_days)\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = Eq(2 * ashley)\n    justin = Eq(10 * ashley)\n\n    total_pages = Eq(ashley + crystal + justin, ashley + 2*ashley + 10*ashley + 72)\n    solutions = solve(total_pages, ashley)\n\n    return solutions[0] + 2*solutions[0] + 10*solutions[0] + 72\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2 / 5\n    total_children = girls / (1 - fraction_boys)\n    boys = total_children * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - (given_to_sister + given_to_friend) + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 90))\n    for n in range(1, 90):\n        if (n % 9 == 0) and ((n + 1) in primes) and ((n - 1) % 5 == 0):\n            return n\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of questions completed by each person\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    # The total number of questions is the sum of questions completed by each student\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    ways_men = factorial(4)  # Count of ways to arrange 4 men\n    ways_women = factorial(4)  # Count of ways to arrange 4 women\n\n    # Since men and women have to stand alternately, we have two configurations:\n    # men starting or women starting. Therefore, we multiply by 2.\n    total_ways = ways_men * ways_women * 2\n\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(len(\"HAPPY\"))  # factorial of total letters\n    repeat_h = factorial(\"HAPPY\".count(\"H\"))  # factorial of repeated 'H'\n    repeat_p = factorial(\"HAPPY\".count(\"P\"))  # factorial of repeated 'P'\n    ans = total_letters // (repeat_h * repeat_p)  # divide by factorial of repetitions\n    return ans\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    # Prime Factorization of 96: 2^5 * 3^1\n    # Number of divisors of 96 can be calculated using the formula:\n    # If n = p1^a * p2^b * ... * pk^k, then the number of factors is (a+1)*(b+1)*...*(k+1)\n    num_factors = (5 + 1) * (1 + 1)\n    return num_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    ans = 900 * (10 / 100) * (60 / 100)\n    return ans\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time_hours = 12  # Departure in England at 12 noon\n    flight_duration_hours = 4  # Flight duration is 4 hours\n    time_difference_hours = 3  # Time difference between England and St Petersburg is 3 hours\n\n    # Calculate the landing time\n    landing_time_hours = departure_time_hours + flight_duration_hours + time_difference_hours\n    \n    # If landing time is greater than 24, subtract 24 to get the correct time\n    if landing_time_hours >= 24:\n        landing_time_hours -= 24\n\n    return landing_time_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 2): # 2 different digits for N and O\n        N, O = p\n        if N != 0: # Ensuring N is not zero to fulfill the \"two-digit\" requirement\n            NO = N * 10 + O\n            return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([50 - i * 2 if i % 2 == 0 else -1 * (50 - i * 2) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are three colors, so Cindy must pick at least one of each color to ensure\n    # that she does not have a matching pair, which accounts for 3 socks.\n    # Therefore, the next sock she picks (sock number 4) will definitely match one of the previous ones picked.\n    # This is due to the Pigeonhole Principle.\n    num_socks_to_pick = 3 + 1\n    return num_socks_to_pick\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kilograms = 2.5\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let x be the total number of children\n    boys = fraction_boys * x\n    girls = x - boys\n\n    # Total sweets given out by teacher is the sum of sweets taken by boys and girls\n    equation = sweets_per_boy * boys + sweets_per_girl * girls - total_sweets\n\n    # Substitute boys with 3/8 * x and solve for x\n    x = total_sweets * 8 / (sweets_per_boy * fraction_boys + sweets_per_girl * (1 - fraction_boys))\n\n    # Calculate the number of girls\n    girls = x - (fraction_boys * x)\n    \n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km on the ground is represented by 5 cm on the map\n    distance_on_map_cm = 12\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number as a symbol\n    n = symbols('n')\n    \n    # Create equations based on the given remainders\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n\n    # Sum of the quotients\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n    \n    # We need the least positive solution that satisfies all conditions\n    ans = min([sol for sol in solutions if sol.is_integer and sol > 0])\n    \n    return ans\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2  # speed in kilometers per hour\n    time_s = 24  # time in seconds\n\n    # Convert speed to meters per second (1 km = 1000 m, 1 hour = 3600 seconds)\n    speed_mps = (speed_kmh * 1000) / 3600\n    \n    # Calculate distance traveled in meters\n    distance_m = speed_mps * time_s\n    \n    return distance_m\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # In number theory, a composite number is a positive integer that has\n    # at least one divisor other than 1 and itself. In contrast, a prime\n    # number is a positive integer that has exactly two distinct divisors: 1 and itself.\n    \n    # However, the definition of a composite number excludes 1, because 1 has only\n    # one divisor (itself) and hence is neither prime nor composite. Therefore,\n    # while it is true that a positive integer that is not a prime is usually \n    # a composite number, we also need to consider the special case of the number 1.\n    \n    ans = \"Pip is mostly correct, but not completely. The number 1 is neither prime nor composite.\"\n    return ans\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    foreign_language_students = 54\n\n    both_classes_students = math_students + foreign_language_students - total_students\n    only_math_students = math_students - both_classes_students\n\n    return only_math_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for a in range(1, 12):\n        for b in range(1, 12):\n            for c in range(1, 12):\n                for d in range(1, 12):\n                    if a + b + c + d == 12 and len({a, b, c, d}) == 4:\n                        count += 1\n    return count // 24  # Dividing by the permutation of 4 groups (4!)\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef solution():\n    num = 40309\n    adder = 0\n    while not is_palindrome(num + adder):\n        adder += 1\n    return adder\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    shared_sweets = (total_sweets - kasia_keeps) // 2\n    \n    lucie_keeps = shared_sweets - (shared_sweets * 2 // 7)\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of carrots eaten by Jack as 'jack'\n    jack = symbols('jack')\n\n    # According to the problem 'Jimmy ate 7 more carrots than Jack'\n    jimmy = jack + 7\n\n    # 'Tommy says: \"The carrots I ate are 3 times the carrots Jimmy ate.\"'\n    tommy = 3 * jimmy\n\n    # Jack says: \"We ate a total of 43 carrots.\"\n    total = Eq(jack + jimmy + tommy, 43)\n\n    # Now we solve the equation for the number of carrots Jack ate\n    jack_carrots = solve(total, jack)[0]\n\n    # Calculate the number of carrots Jimmy and Tommy ate based on Jack's number\n    jimmy_carrots = jack_carrots + 7\n    tommy_carrots = 3 * jimmy_carrots\n\n    return tommy_carrots\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_difference = 52\n    for boys_side in range(1, total_difference+1, 2):\n        girls_side = boys_side - 2\n        if girls_side < 1:\n            continue\n        boys = boys_side**2\n        girls = girls_side**2\n        if boys - girls == total_difference:\n            total_students = boys + girls\n            return total_students\n    return None\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Friday night out:1/4. So, 3/4 remains.\n    remains_after_friday = 3 / 4\n\n    # Saturday night out:1/3 of the remaining.\n    remains_after_saturday = remains_after_friday * (2 / 3)\n\n    return remains_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n\n    # Let's denote the number of adults as 'a' and the number of children as 'c'.\n    # From the ratio, we know that c = 4 * a.\n    # Also, from the total number of people, we know that a + c = total_people.\n\n    # Therefore:\n    # a + 4 * a = total_people\n    # 5 * a = total_people\n    # a = total_people / 5\n\n    adults = total_people / (1 + 4)\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    total_combinations = num_school_bags * num_pencil_boxes\n    return total_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from fractions import Fraction\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, p = symbols('a p')\n\n    # Original ratio of apples to pears\n    equation1 = Eq(a/p, Fraction(3, 4))\n\n    # After replacing pears with apples\n    equation2 = Eq((a + 36)/(p - 36), Fraction(3, 2))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, p))\n\n    # Get the number of apples at first\n    return solutions[a]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_part = '6129043'\n    len_recurring_part = len(recurring_part)\n\n    # Find out how many complete sets of the recurring part there are in 212 digits\n    complete_sets = 212 // len_recurring_part\n\n    # Find out how many additional digits of the recurring part are needed to make up 212 digits\n    additional_digits = 212 % len_recurring_part\n\n    # Calculate sum of digits for the complete sets\n    sum_complete_sets = sum(map(int, recurring_part)) * complete_sets\n\n    # Calculate sum of additional digits\n    sum_additional_digits = sum(map(int, recurring_part[:additional_digits]))\n\n    # The total sum is the sum of the complete sets and the additional digits\n    total_sum = sum_complete_sets + sum_additional_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let n be the size of the original square array side\n    # After adding a column and a row, the new array is (n+1) by (n+1)\n    # The additional soldiers added to the original square (which has n*n soldiers) is equal to 31\n    # The additional soldiers include the new row and column, minus the overlapping soldier (which is counted twice)\n    # So the equation is: n*n + n + n + 1 - 1 = n*n + 2n + 1 + 31\n    # Rearrange the equation: n*n + 2n - 30 = 0\n\n    # Solve the quadratic equation for n\n    from math import sqrt\n    n = (sqrt(4 * 30 + 1) - 2) // 2  # Only the positive root is considered and we subtract 2 from the root\n\n    # Calculate the total number of soldiers in the array now\n    total_soldiers = (n + 1) * (n + 1)\n\n    return int(total_soldiers)\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    num_ginkgo_trees = 30\n    willow_trees = num_ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # If he uses a 5-litre pail, 4 litres of water will overflow.\n    # This means the capacity of the tank is 5 litres less than a multiple of 5 litres.\n    \n    # If he uses a 3-litre pail, he needs another 4 more pails of water.\n    # This means the capacity of the tank is 3 litres more than a multiple of 3 litres.\n    for litres in range(1, 1000):  # Assuming the tank can't hold more than 1000 litres.\n        if (litres + 4) % 5 == 0 and (litres - 12) % 3 == 0:\n            return litres\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            count += 1\n            n //= 10\n        return count\n\n    n = 1\n    while True:\n        if count_trailing_zeros(factorial(n)) == 28:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2/3) * 729\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    total_people = 12\n    # Each person shakes hands with every other person exactly once\n    handshakes = total_people * (total_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # The worst scenario to pick at least two pairs of matching socks:\n    # Pick one of each color (there will be no pair): 9 yellow, 1 green, 1 white, 2 red, 1 black\n    # Get another green or another white to have one complete pair (choose whichever is less, here white).\n    # Still need to pick 6 more socks (since there are potentially 2 more colors that do not have a pair)\n    # to ensure we have a second pair of the same color in the worst-case scenario.\n    \n    # 1 of each color (4) + 1 to get a white pair (1) + maximum of different socks left (6)\n    socks_to_pick = 4 + 1 + 6\n    return socks_to_pick\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_lemonade_cost = 5 * 1.09\n    total_chocolate_cost = 6 * 0.55\n    total_cost = total_lemonade_cost + total_chocolate_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Sam's current age as `sam`.\n    sam = symbols('sam')\n\n    # Sam's age in four years will be `sam + 4`.\n    # Sam's age four years ago was `sam - 4`.\n    # According to the problem, Sam's age in four years is twice his age four years ago.\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    # Solve the equation to find Sam's current age.\n    sam_age = solve(equation, sam)\n\n    # Since `sam_age` is a list, we return the first (and only) element.\n    return sam_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    vowels = \"AI\"\n    consonants = \"RNBW\"\n    total_letters = len(vowels) + len(consonants)\n\n    # Total permutations of the letters\n    total_permutations = factorial(total_letters)\n\n    # Permutations when vowels are together as a single unit\n    vowels_together = factorial(len(consonants) + 1) * factorial(len(vowels))\n    \n    # Subtracting the permutations where vowels are together from total permutations\n    ans = total_permutations - vowels_together\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    perm = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in perm if int(p[-1]) % 2 != 0]\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)          # Total chickens and goats\n    equation2 = Eq(3 * chickens, 5 * cows)        # 3 times chickens equals 5 times cows\n    equation3 = Eq(2 * goats, 10 * cows)          # 2 times goats equals 10 times cows\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Each animal has a specific number of feet: chickens have 2, goats have 4, and cows have 4\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let the first term of the arithmetic progression be a1 and the common difference be d.\n    # The sum of the first n terms of an arithmetic progression can be given by the formula:\n    # S_n = (n/2) * (2*a1 + (n-1)*d), where n is the number of terms.\n    # We have two equations based on the given sums:\n    # S_10 = (10/2) * (2*a1 + (10-1)*d) = 20\n    # S_30 = (30/2) * (2*a1 + (30-1)*d) = 90\n    \n    # Let's solve for a1, considering 10 terms and the sum is 20:\n    # 5 * (2*a1 + 9*d) = 20\n    # 10*a1 + 45*d = 20 => (1)\n    \n    # Similarly, for 30 terms with the sum of 90:\n    # 15 * (2*a1 + 29*d) = 90\n    # 30*a1 + 435*d = 90 => (2)\n    \n    # Let's solve these two linear equations for a1 and d.\n    from sympy import symbols, Eq, solve\n    \n    a1, d = symbols('a1 d')\n    equation1 = Eq(10*a1 + 45*d, 20)\n    equation2 = Eq(30*a1 + 435*d, 90)\n    \n    # Solve the system of equations for a1 and d\n    solutions = solve((equation1, equation2), (a1, d))\n    \n    # Extract the common difference d from the solutions\n    d_value = solutions[d]\n    \n    return d_value\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy_to_penny = 5 / 4\n    penny_stickers = total_stickers / (1 + ratio_amy_to_penny)\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    speed_mps = (speed_kmh * 1000) / (60 * 60)\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let 'x' be the total number of apples Jack has.\n    # According to the question, yesterday he sold 40 apples which is (4/7) of what he brought.\n    # Also, he brought (1/2) of all apples he has.\n    # Therefore, the number of apples he brought is (4/7) * (1/2) * x = 40.\n    # We solve for x to find the total number of apples.\n\n    brought_fraction = 4 / 7\n    sold_apples = 40\n    brought_apples = sold_apples / brought_fraction\n    total_apples = brought_apples * 2\n\n    return total_apples\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    first_two_avg = 10\n    last_two_avg = 22\n    first_last_avg = 14\n\n    # Calculate the sum of the first two numbers and the last two numbers\n    sum_first_two = 2 * first_two_avg\n    sum_last_two = 2 * last_two_avg\n    \n    # Calculate the total sum of the four numbers\n    total_sum = (sum_first_two + sum_last_two) - (2 * first_last_avg)\n    \n    # Calculate the average of the two middle numbers\n    avg_middle_two = total_sum / 2\n\n    return avg_middle_two\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [int(''.join(permutation)) for permutation in permutations(digits)]\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    # Determining the number of rows (n) using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    number_of_rows = ((last_term - first_term) // difference) + 1\n    \n    # Sum of an arithmetic sequence: (n/2) * (first_term + last_term)\n    total_seats = (number_of_rows / 2) * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # The prime factorization of 7007 is 7 * 7 * 11 * 13\n    # Since we are looking for two 2-digit multiples of 7,\n    # they must be combinations of the factors that result in two 2-digit numbers\n    # The only such combinations are 7*11 and 7*13\n    multiple_1 = 7 * 11\n    multiple_2 = 7 * 13\n    # Their sum\n    sum_of_multiples = multiple_1 + multiple_2\n    return sum_of_multiples\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    number = (result + 10) / 2\n    return number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n\n    # Since the average of A and B is 22, the sum of A and B is 2 * 22\n    sum_AB = 2 * average_AB\n\n    # The sum of A, B, and C\n    sum_ABC = sum_AB + C\n\n    # The average of A, B, and C\n    average_ABC = sum_ABC / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_age_chinese_english = 34\n    average_age_english_math = 36\n    average_age_chinese_math = 44\n\n    sum_two_teachers = average_age_chinese_english + average_age_english_math + average_age_chinese_math\n    average_age_three_teachers = (sum_two_teachers - 34) / 2\n\n    return average_age_three_teachers\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "from datetime import datetime\n\ndef solution():\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    age_at_death = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n    \n    return age_at_death\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # Each set of n lines can intersect in at most C(n, 2) points, each of which may result in 0 or 1 new regions.\n    # Each new line can intersect with each of the previous lines at most once, leading to at most n new regions.\n    # The total maximum number of different parts (regions) is given by the sum of the first n+1 natural numbers.\n    \n    # We initialize the total number of regions as 1 as a plane without any line has one region.\n    total_regions = 1\n\n    # For each line added, it can intersect with all the previous lines, creating additional regions.\n    # The nth line can create n new regions at most, therefore we sum up all the numbers from 1 to n (inclusive).\n    for n in range(1, 11):  # as there are 10 lines\n        total_regions += n\n\n    return total_regions\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    coins = 37\n    children = 5\n\n    remainder = coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using Pigeonhole Principle\n    # To find the minimum number in the layer with the most cakes,\n    # we divide the total number of cakes by the number of layers\n    # and then take the ceiling of the result.\n    cakes_in_most_layer = (total_cakes + total_layers - 1) // total_layers\n\n    return cakes_in_most_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = int(23**0.5)\n    rope_to_cut = 23 - max_side**2\n    return rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    difference = (21 + 1) * 7 - (20 + (1 * 7))\n    return difference\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac = (2018 + i) / 5\n        frac_part = frac - int(frac)\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Number of terms in the arithmetic progression\n    n = 10\n    # The first term of the arithmetic progression\n    a1 = 11\n    # Sum of all terms in the arithmetic progression\n    S = 425\n\n    # Using the formula for the sum of an arithmetic progression: S = n/2 * (2a1 + (n-1)d)\n    # We need to solve for d, the common difference\n    from sympy import symbols, solve, Eq\n\n    # Symbol for the common difference\n    d = symbols('d')\n    # Equation obtained from the sum formula\n    equation = Eq(n/2 * (2*a1 + (n-1)*d), S)\n    # Solve for the common difference\n    common_difference = solve(equation, d)[0]\n    \n    return common_difference\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_money = solutions[chelsia] + solutions[benson]\n    \n    return total_money\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    total_numbers = 7\n    sum_of_numbers = 357\n    # sum of n consecutive odd numbers is n times the middle number\n    middle_number = sum_of_numbers // total_numbers\n    # smallest number is 3 numbers before the middle number\n    smallest_number = middle_number - 3 * 2\n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    duplicate_1_count = 2\n\n    # Calculate the factorial of the total number of digits\n    total_permutations = factorial(total_digits)\n    \n    # Divide by the factorial of the number of duplicate digits to remove duplicate permutations\n    permutations_with_duplicates = total_permutations // factorial(duplicate_1_count)\n    \n    return permutations_with_duplicates\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    \n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inv = sum(1/x for x in range(1995, 2009))\n    A = 1 / A_inv\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the cost of a table and 'c' be the cost of a chair\n    t, c = symbols('t c')\n\n    # 5 tables and 12 chairs cost $720\n    equation1 = Eq(5 * t + 12 * c, 720)\n\n    # Each table costs $25 more than each chair\n    equation2 = Eq(t, c + 25)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Return the cost of a table\n    return solutions[t]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the speed of Carter\n    c = symbols('c')\n    \n    # According to the question, we have the following equations\n    # Martin's speed = Carter's speed + 20\n    # Time taken by Martin / Time taken by Carter = Martin's speed / Carter's speed = 9 / 13\n    # We can use the inverse ratio for time because speed * time = distance (which is constant for both)\n    \n    equation = Eq((c + 20) / c, 13 / 9)\n    \n    # Solve for Carter's speed, c\n    carter_speed = solve(equation, c)[0]\n\n    return carter_speed\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences are (remainder, modulus)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n    return smallest_number\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\nans = solution(x)"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # This is a direct application of the Pigeonhole Principle\n    # If we have n + 1 pigeons (apples in our case) and n pigeonholes (colors),\n    # at least two pigeons must end up in the same hole, according to the Pigeonhole Principle.\n    # With 2 colors (red and yellow), we must take out 2 + 1 apples to ensure we have two of the same color.\n\n    return 2 + 1\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    cat_legs = 2 * 4\n    dog_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    birds_legs = 0  # birds are assumed to have 2 legs, but they are not counted here\n\n    # Total legs of cats, dogs, and rabbit\n    total_legs = cat_legs + dog_legs + rabbit_legs\n\n    # Remaining legs to be assigned to birds, assuming they have 2 legs each\n    remaining_legs_for_birds = 28 - total_legs\n\n    # Since each bird has 2 legs, divide by 2 to get the number of birds\n    number_of_birds = remaining_legs_for_birds / 2\n\n    return int(number_of_birds)\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Let George's time to paint the room alone be x hours\n    # Fred's rate of work is 1/9 per hour (since he can finish in 9 hours)\n    # George's rate of work is 1/x per hour\n    # Together, their combined rate of work is 1/6 per hour (since they can finish in 6 hours)\n    # According to work equation: 1/9 + 1/x = 1/6\n    # Solving the equation for x\n\n    # Find the least common multiple (LCM) of the denominators 9, x, and 6\n    lcm = 18 * x  # (LCM(9, 6) is 18, we multiply by x to incorporate George's time)\n\n    # Convert the equation to the same denominator and solve for x\n    # (2*lcm) / (9*x) + (lcm) / (x) = (3*lcm) / (6*x)\n    # 2*lcm + 9*lcm = 3*lcm\n    # lcm*(2 + 9) = 3*lcm\n    # 11*lcm = 3*lcm\n    # This above step is incorrect, the correct formulation is:\n    \n    # Multiply both sides by 18x to clear the denominators:\n    # 2*x + 18 = 3*x\n    # Subtract 2x from both sides:\n    # 18 = x\n\n    x = 18\n\n    return x\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    ways_per_person = 5  # Since there are 5 entrances, each person has 5 choices\n    people_count = 4     # There are 4 people\n\n    # Each person can independently choose any of the 5 entrances, so we use the \n    # multiplication principle of counting. The number of ways is 5^4.\n    total_ways = ways_per_person ** people_count\n\n    return total_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    increased_value_last_year = 10500\n    original_price = increased_value_last_year / 1.05\n    current_value = original_price * (1 - 0.05)\n    profit_or_loss = current_value - original_price\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    # Numbers divisible by 5 between 1 and 200\n    divisible_by_5 = 200 // 5\n    \n    # Numbers divisible by 7 between 1 and 200\n    divisible_by_7 = 200 // 7\n    \n    # Numbers divisible by both 5 and 7 (i.e., 35) between 1 and 200\n    divisible_by_5_and_7 = 200 // (5 * 7)\n    \n    # Using Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the initial number of red pens be 3x and black pens be 7x\n    # Let y be the number of pens sold\n    # After selling, red pens left = (3x - y) and black pens left = (7x - y)\n    # According to the problem, (3x - y) : (7x - y) = 5 : 13\n    # Also, we know that red pens left in the end are 20, so (3x - y) = 20\n    \n    # Now we can set up the equations\n    # 1. (3x - y) / (7x - y) = 5 / 13\n    # 2. (3x - y) = 20\n    \n    # Solving these equations, we get:\n    # 13 * (3x - y) = 5 * (7x - y)\n    # 39x - 13y = 35x - 5y\n    # 4x = 8y\n    # x = 2y\n    \n    # Substitute x in second equation:\n    # 3(2y) - y = 20\n    # 6y - y = 20\n    # 5y = 20\n    # y = 4\n    \n    # So the initial number of red pens is 3x\n    # And using x = 2y:\n    # x = 2 * 4 = 8\n    \n    # Initial number of red pens is 3 * 8 = 24\n    \n    # Red pens sold = initial - left\n    # Red pens sold = 24 - 20 = 4\n    \n    # The answer is that 4 red pens were sold\n    return 4\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    valid_factors = [factor for factor in factors_of_42 if 10 < factor < 20]\n    return valid_factors[0] if valid_factors else None\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    total_of_known_numbers = 8 + 3 + 9\n    total_numbers = 4\n    desired_average = 6\n\n    total_for_desired_average = desired_average * total_numbers\n    number_in_the_box = total_for_desired_average - total_of_known_numbers\n\n    return number_in_the_box\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    equation1 = Eq(ruler_price, pen_price + 0.9)\n    equation2 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return int(num_bags) if num_bags.is_integer() else int(num_bags) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    result += 50   # Step 8: Add 50\n    day = result % 100  # Get the day of birth from last two digits\n    month = (result - day) // 100  # Get the month of birth from the other digits\n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(10, 50):  # two-digit numbers range from 10 to 49\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first = int(''.join(perm[:2]))\n        second = int(''.join(perm[2:5]))\n        third = int(''.join(perm[5:]))\n\n        if second == 2 * first and third == 4 * first:\n            return third\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Since the sequence is symmetric, the sum of 4+8+12+...+396+400 is equal to the sum of 396+...+12+8+4\n    # We can calculate the sum of the sequence from 4 to 400 and then double it\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Use the formula for the sum of an arithmetic sequence: S = n/2 * (a1 + an)\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n\n    # Double the sum to account for the symmetric part of the sequence\n    ans = sum_sequence * 2\n\n    return int(ans)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_cost = 5\n    refill_cost = 1\n    total_money = 10\n    remaining_money = total_money - initial_cup_cost\n\n    if remaining_money < 0:\n        return 0\n\n    refills = remaining_money // refill_cost\n\n    return 1 + refills  # Initial cup + refills\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Number of peaches eaten by 1 monkey in 1 day\n    peaches_per_monkey_per_day = 96 / (3 * 2)\n    \n    # Number of peaches eaten by 5 monkeys in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    total_types = 3\n    \n    ways_to_arrange_types = factorial(total_types)\n    \n    ways_to_arrange_story_books = factorial(story_books)\n    ways_to_arrange_comic_books = factorial(comic_books)\n    ways_to_arrange_science_books = factorial(science_books)\n    \n    ans = (ways_to_arrange_types *\n           ways_to_arrange_story_books *\n           ways_to_arrange_comic_books *\n           ways_to_arrange_science_books)\n           \n    return ans\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50k_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    total_tax_paid = 10000\n\n    tax_on_remaining_income_eq = Eq(first_50k_tax + remaining_income * (0.06 + T / 100), total_tax_paid)\n    T_value = solve(tax_on_remaining_income_eq, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend gets at least 1 ice-cream, we give 1 to each first.\n    remaining_icecreams = 5 - 3\n    \n    # The problem now reduces to distributing `remaining_icecreams` ice-cream to 3 friends,\n    # which is equivalent to partitioning `remaining_icecreams` into 3 parts.\n    # This is a problem of distributing n identical objects into r distinct boxes,\n    # which can be done in C(n+r-1, r-1) ways, where C is the combination formula.\n    # Here n = remaining_icecreams, r = 3.\n    \n    from math import comb\n    ans = comb(remaining_icecreams + 3 - 1, 3 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Spendings from January to March, 3 months at $450 per month\n    jan_to_mar = 3 * 450\n    # Spendings from April to July, 4 months at $350 per month\n    apr_to_jul = 4 * 350\n    # Spendings from August to October, a total of $1250\n    aug_to_oct = 1250\n    # Spendings from November to December, 2 months at $400 per month\n    nov_to_dec = 2 * 400\n\n    # Total spendings from January to December\n    total_spendings = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Total number of months from January to December\n    total_months = 12\n\n    # Average spending per month from January to December\n    average_per_month = total_spendings / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her\n    # 5 servings of ice cream cost x + 2.30, as Sophie was short of $2.30\n    # 3 servings of ice cream cost x - 0.30, as Sophie had $0.30 left after buying\n    # The cost of 2 servings of ice cream is the difference:\n    # 5 servings - 3 servings = 2 servings\n    # (x + 2.30) - (x - 0.30) = cost of 2 servings of ice cream\n    # 2.30 + 0.30 = cost of 2 servings of ice cream\n    # 2.60 = cost of 2 servings of ice cream\n    # Therefore, one serving of ice cream costs 2.60 / 2\n    each_servings_cost = 2.60 / 2\n    # Now we can know that 3 servings of ice cream cost:\n    cost_of_three_servings = 3 * each_servings_cost\n    # Now, we can find how much money Sophie's mother gave her:\n    # x - 0.30 (remaining money) = cost of three servings\n    money_given = cost_of_three_servings + 0.30\n\n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5/(3*x + 2)) + (2/(1.5*x + 1)), (4.5/(5 - 6*x)) - (3/(2.5 - 3*x)))\n\n    solution_set = solve(equation, x)\n\n    return solution_set\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    # Pamela has 25 bags, and the total number of sweets has the form 127M\n    # Therefore, the number of sweets in each bag must be a divisor of 127M\n    # 127 is a prime number, hence the only possible divisors of 127M are 1, 127, and any divisor of M\n    \n    # We know that M is a digit, so its possible values are 0 through 9\n    # We will try each possible value of M and check if it makes the total sweets a multiple of 25\n    \n    for M in range(10):  # Possible values for M\n        total_sweets = 1270 + M  # As 127M is the number with M in the units place\n        if total_sweets % 25 == 0:\n            sweets_per_bag = total_sweets // 25\n            return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Given proportion relationship 9:x = y:2, we can write this as equation\n    equation = Eq(9 * y, x * 2)\n    \n    # Solve the equation for y in terms of x\n    relation = solve(equation, y)[0]\n\n    # Calculate the value of y when x = 3\n    y_value = relation.subs(x, 3)\n    \n    return relation, int(y_value)\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    odd_numbers = filter(lambda x: int(x[-1]) % 2 != 0, permutations(digits))\n    \n    smallest_odd_number = min(map(lambda x: int(''.join(x)), odd_numbers))\n    \n    return smallest_odd_number\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You would need to take out 8 balls without looking to ensure that you have at least two balls of the same colour.\n    # This is because in the worst scenario, you could take out one ball of each colour, which totals 7 + 1.\n    # So, the eighth ball you take out must be the same colour as one of those you already took out.\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # in meters/minute\n    cycling_speed = 60  # in meters/minute\n\n    # Since the distance to the library and back is the same,\n    # we can assume it to be 'd' meters.\n    # Total distance for the whole trip is 2*d.\n\n    # Time taken to walk to the library is distance/speed = d/walking_speed\n    # Time taken to cycle back from the library is distance/speed = d/cycling_speed\n    # Total time for the whole trip is d/walking_speed + d/cycling_speed\n\n    # Average speed is defined as total distance traveled divided by total time taken.\n    # avg_speed = total_distance / total_time\n    # avg_speed = (2 * d) / (d/walking_speed + d/cycling_speed)\n\n    # We can simplify the expression by dividing numerator and denominator by 'd':\n    # avg_speed = (2 * d) / (d/walking_speed + d/cycling_speed) * (1/d)\n    # avg_speed = 2 / (1/walking_speed + 1/cycling_speed)\n\n    # Now calculate the average speed:\n    avg_speed = 2 / (1/walking_speed + 1/cycling_speed)\n\n    return avg_speed\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    x = symbols('x')  # Let x be the number we think of\n    # Perform the operations step by step\n    expression = ((x + 3) * 2 - 2 + 10) / 2 - x\n    ans = simplify(expression)  # Simplify the expression\n\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from sympy import root, sqrt\n\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Excluding the number starting with 0\n    no_sevens = 8 * 9 * 9  # Numbers with no 7 at all (0 and 7 not allowed as first digit)\n\n    exactly_one_seven = (1 * 9 * 9) * 3  # One 7 can be in any of the three places\n    # Total - no_sevens gives all numbers with at least one seven\n    # Subtracting exactly_one_seven gives all numbers with at least two sevens\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - exactly_one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, kyle = symbols('jack kyle')\n    \n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    \n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, 2/7 * (jack - 72))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n    \n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Annabella needs to take out at most all non-yellow shirts\n    non_yellow_shirts = 6 + 4 + 12 # orange, pink, and brown\n    # Then one more shirt to make sure one is yellow\n    ans = non_yellow_shirts + 1 \n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let's denote the original number of bracelets Felicia had as F\n    # and original number of bracelets Janice had as J = 96.\n    \n    J = 96\n    \n    # Felicia sold 3/5 of her bracelets and Janice bought 2/5 of the bracelets Felicia sold. \n    # Janice's new amount of bracelets is J + (2/5) * (3/5) * F.\n    # Felicia's new amount of bracelets is F - (3/5) * F = (2/5) * F.\n    \n    # The new ratio is 5:7 (Felicia's to Janice's), so we have:\n    # (2/5) * F / (J + (2/5) * (3/5) * F) = 5/7\n    \n    # By cross-multiplying:\n    # 7 * (2/5) * F = 5 * (J + (2/5) * (3/5) * F)\n    # Now let's solve for F:\n    F = symbols('F')\n    equation = Eq(7 * (2/5) * F, 5 * (J + (2/5) * (3/5) * F))\n    solutions = solve(equation, F)\n    \n    F_value = solutions[0]\n    \n    # Number of bracelets Janice bought from Felicia is (2/5) * (3/5) * F\n    num_bracelets_bought = (2/5) * (3/5) * F_value\n    \n    return num_bracelets_bought\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    total_individual_cost = individual_cost * 15\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    initial_amount = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = initial_amount * (1 + interest_rate * years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    day_distance = 3\n    night_distance = -2\n    net_distance_per_day = day_distance + night_distance\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_read_first_four_days = 25 * 4\n    pages_read_following_six_days = 40 * 6\n    pages_read_last_five_days = 80\n    total_days = 4 + 6 + 5\n    total_pages_read = pages_read_first_four_days + pages_read_following_six_days + pages_read_last_five_days\n    \n    average_pages_per_day = total_pages_read / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n\n    total_birds = birds_on_tree_A + birds_on_tree_B\n\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    lcm_value = solve_congruence(*congruences)\n\n    return lcm_value[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20  # number of terms in the arithmetic progression\n    S_n = 560  # sum of the arithmetic progression\n    d = 2  # common difference\n\n    # Formula for the sum of an arithmetic progression:\n    # S_n = n / 2 * (2 * a_1 + (n - 1) * d)\n    # Where a_1 is the first term of the progression\n    \n    # We need to find a_1 using the given S_n, n, and d\n    # Rearranging the formula:\n    # 2 * S_n = n * (2 * a_1 + (n - 1) * d)\n    # 2 * a_1 = (2 * S_n) / n - (n - 1) * d\n    # a_1 = ((2 * S_n) / n - (n - 1) * d) / 2\n\n    a_1 = ((2 * S_n) / n - (n - 1) * d) / 2\n\n    return a_1\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100): # Alberta's age is a two-digit number\n        tens, ones = divmod(age, 10)\n        new_age = (ones * 10 + tens) + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the number of toys Penny originally had\n    # Let y be the number of toys her brother originally had\n    \n    # From the problem statement\n    # Penny now has 14 toys\n    # Brother now has 12 toys\n    # Penny's original number of toys is 10 more than her brother's original number\n    \n    # We create two equations based on the above information\n    # x - y = 10 (Penny has 10 more toys than her brother originally)\n    # x - (x -y - k) = 14, where k is the number of toys given (Penny has 14 toys after giving k toys to her brother)\n    # y + k = 12 (Brother has 12 toys now after receiving k toys)\n    \n    # Re-arrange the equation to express k in terms of x and y\n    # k = 14 - (x - y)\n    # substitute k in the third equation\n    # y + 14 - (x - y) = 12\n    # This simplifies to:\n    # 2y - x = -2\n    \n    # Now we can solve the 2 equations for x and y:\n    # x - y = 10\n    # 2y - x = -2\n    \n    # By adding these two equations, we can solve for y directly\n    # (x - y) + (2y - x) = 10 - 2\n    # y = 8\n    \n    y = 8  # Brother's original number of toys\n    \n    return y\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # We use the pigeonhole principle. Since there are 4 suits,\n    # Tom needs to draw one card from each suit to ensure that he has\n    # 4 different suits represented. However, to guarantee a 4th card\n    # of the same suit, he must draw one more card.\n    \n    # 3 cards from each suit will not guarantee 4 of the same suit (3 * 4 = 12).\n    # By drawing one more card (13th card), he will definitely have 4 cards of the same suit.\n    max_cards_without_4_of_a_suit = 3 * 4\n    cards_to_draw = max_cards_without_4_of_a_suit + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 0.60\n    remaining_tickets = 28\n    total_capacity = remaining_tickets / (1 - percent_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hayden, mitchell, spent = symbols('hayden mitchell spent')  # Define the symbols\n\n    # Hayden's equation after spending\n    equation1 = Eq(hayden - spent, 4 * (mitchell - spent))\n\n    # Mitchell's and Hayden's initial amount of money\n    equation2 = Eq(hayden, 1420)\n    equation3 = Eq(mitchell, 505)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (hayden, mitchell, spent))\n\n    # Answer: How much each of them spent\n    return solutions[spent]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2 / 3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    adults = 3 / 7 * total_people\n    children = total_people - adults\n    boys = 3 / 8 * children\n    girls = children - boys\n\n    # We know there were 45 girls\n    equation = Eq(girls, 45)\n\n    # Solve the equation to find the total number of people\n    solutions = solve(equation, total_people)\n    return solutions[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_price = 11.95\n\n    total_two_dollar_notes = two_dollar_notes * 2\n    total_fifty_cent_coins = fifty_cent_coins * 0.50\n    total_money = total_two_dollar_notes + total_fifty_cent_coins\n    money_left = total_money - file_price\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n\n    total_sales = saturday_sales + sunday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_per_day\n        \n        if total_distance <= 0:\n            break\n        \n        total_distance += slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_ways = permutations(18, 3)\n\n    return total_ways\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between_each = 2\n\n    # Subtracting 1 because there's no space for willow trees after the last ginkgo tree\n    total_spaces_for_willow = ginkgo_trees - 1 \n\n    total_willow_trees = total_spaces_for_willow * willow_trees_between_each\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    # Speed upstream is the speed in still water minus the speed of the current\n    speed_upstream = speed_in_still_water - speed_of_current\n    \n    # Time is distance divided by speed\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # The system of equations is:\n    # Adam + Ben = 102\n    # Ben + Carl = 97\n    # Adam + Carl = 93\n    # Adding all equations, we get:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 93\n    # 2 * (Adam + Ben + Carl) = 292\n    # Adam + Ben + Carl = 146\n    # Thus, the total weight is 146 kg.\n\n    # Total weight\n    total_weight = (102 + 97 + 93) // 2  # Integer division since weight is in whole numbers\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) // 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_cost_per_kg = 7.48  # cost in pounds per kilogram\n    cheese_cost = (cheese_weight / 1000) * cheese_cost_per_kg  # total cheese cost in pounds\n    \n    apple_cost_each = 0.12  # cost in pounds per apple\n    apple_quantity = 8\n    apple_cost = apple_cost_each * apple_quantity  # total apple cost in pounds\n    \n    yoghurt_cost_each = 0.46  # cost in pounds per yoghurt\n    yoghurt_quantity = 2\n    yoghurt_cost = yoghurt_cost_each * yoghurt_quantity  # total yoghurt cost in pounds\n    \n    total_cost = cheese_cost + apple_cost + yoghurt_cost  # total cost\n    \n    money_given = 10  # amount in pounds Jane gives\n    change = money_given - total_cost  # change Jane gets\n    \n    return round(change, 2)  # rounded to 2 decimal places\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    zack_rate = 150  # Zack's rate (aircrafts per hour)\n    total_aircrafts = 1200  # Total number of aircrafts\n    combined_time = 6  # Time it takes for Andy and Zack to sell all aircrafts together (hours)\n\n    # Total rate when Andy and Zack work together (aircrafts per hour)\n    combined_rate = total_aircrafts / combined_time  \n\n    # Andy's rate = combined rate - Zack's rate\n    andy_rate = combined_rate - zack_rate\n\n    # Time for Andy to sell all aircrafts by himself = total aircrafts / Andy's rate\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total_amount = 400\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total_amount)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n    \n    volume_orange = (orange_ratio / ratio_sum) * total_volume\n    \n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    smaller, bigger = symbols('smaller bigger')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(bigger, 3 * smaller)  # The bigger number is three times the smaller number\n    equation2 = Eq(smaller + bigger, 528)  # The sum of the two numbers is 528\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (smaller, bigger))\n\n    # Return the value of the bigger number\n    return solutions[bigger]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    initial_amount = 20\n    money_saved = 1 * 7\n    money_lent = 5\n    money_spent = 3\n\n    final_amount = initial_amount + money_saved - money_lent - money_spent\n\n    return final_amount\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid = 10.50\n    remaining_money = total_money - money_repaid\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and their powers\n    factors = factorint(44000)\n\n    # A number is a cube if all prime factors have powers that are multiples of 3\n    q = 1\n    for prime, power in factors.items():\n        # If power is not a multiple of 3, we must multiply q by the prime raised\n        # to the smallest multiple of 3 that is greater than the current power\n        if power % 3 != 0:\n            q *= prime ** (3 - (power % 3))\n\n    return q\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Assuming n is the side length of the square array and n is odd since the innermost layer will contain students\n    # Let's start with a small odd number and increment by 2 (to maintain the odd side length) until we find the solution\n    n = 1\n    while True:\n        # Calculate total people in the array: n * n\n        total_people = n * n\n        # Calculate the number of students\n        # Students are in the outermost layer and in every other layer inwards\n        # This is a form of summing odd squares (1^2 + 3^2 + 5^2 + ...)\n        students = sum((2*i+1)**2 for i in range(0, n//2 + 1))\n        # Calculate the number of teachers\n        teachers = total_people - students\n        # Check if difference is 80\n        if students - teachers == 80:\n            ans = total_people\n            break\n        n += 2\n    return ans\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    width = symbols('width')\n    length = 2 * width\n    perimeter = Eq(2 * (length + width), 72)\n    \n    dimensions = solve(perimeter, width)\n    actual_length = 2 * dimensions[0]\n    \n    return actual_length\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors_count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    coefficient_of_static_friction = 0.4\n    applied_force = 250  # force applied in N\n\n    # Calculate the normal force (force perpendicular to the floor)\n    normal_force = mass * g\n\n    # Calculate the force of static friction\n    force_of_static_friction = coefficient_of_static_friction * normal_force\n\n    # The force of static friction cannot exceed the applied force\n    force_of_static_friction = min(force_of_static_friction, applied_force)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Nick's solution\n    nick_salt = 300 * 0.12\n    \n    # Nicole's solution\n    nicole_salt = 500 * 0.28\n    \n    # Total salt and total solution\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    \n    # Concentration of the resulting solution\n    concentration = (total_salt / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assume Mark has x money\n    # Steve will have x + 40\n    # Assume the total cost of the meal is y\n    # Then, the money left after Steve pays will be: Steve - y (for Steve), x (Mark) and Ryan (Let it be R)\n    # The money left after Ryan pays will be: Steve (x+40), Mark (x) and Ryan - y (R - y)\n    # The money left after Mark pays will be: Steve (x+40), Mark - y (x - y) and Ryan (R)\n    \n    x, y, R = symbols('x y R')\n    \n    # When Steve paid for the meal, the ratio of the remaining money is 3:8:9\n    equation1 = Eq((x + 40 - y)/3, x/8)\n    equation2 = Eq(x/8, (R - y)/9)\n    \n    # When Ryan paid for the meal, the ratio of the remaining money is 5:4:1\n    equation3 = Eq((x + 40)/5, x/4)\n    equation4 = Eq(x/4, (R - y)/1)\n    \n    # When Mark paid for the meal, the ratio of the remaining money is 10:1:9\n    equation5 = Eq((x + 40)/10, (x - y)/1)\n    equation6 = Eq((x - y)/1, R/9)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (x, y, R))\n    \n    # The cost of the meal is the value of y\n    return solutions[y]\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n    n_3 = 3\n    n_15 = 15\n\n    common_difference = (term_15 - term_3) / (n_15 - n_3)\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # B scored 50 points less than A\n    equation1 = Eq(B, A - 50)\n    # If B gave A 25 points, A's score would be 5 times B's score\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    num = 1\n    while True:\n        cube_root = round(num ** (1/3))\n        if cube_root ** 3 == num - 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n    diff = 6\n    \n    # Let x be the number of buttons James originally has, then Nina has x + diff\n    # After Nina gives James 6 of her buttons, they have the same number, so:\n    # James will have x + diff/2 and Nina will have x + diff/2\n    # The sum of these equals to the total number of buttons, which is 24\n    # 2 * (x + diff/2) = total_buttons\n    # 2 * (x + 3) = 24\n    # x + 3 = 12\n    # x = 9\n    \n    nina_original = 9 + diff  # x + diff\n\n    return nina_original\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1)\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    day_climb = 5\n    night_slide = 3\n    accumulated_distance = 0\n    day_count = 0\n    \n    while accumulated_distance < total_distance:\n        day_count += 1\n        accumulated_distance += day_climb\n        \n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= night_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    from sympy import symbols, Eq\n\n    x, y = symbols('x y')\n    equation = Eq(y, 15 + 3*x)\n\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_number = 8 / 100\n    decimal_number = 0.7\n    ans = decimal_number if decimal_number > fraction_number else fraction_number\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_5_days_or_less = 25\n    daily_fee_after_5_days = 20\n    total_paid = 275\n\n    # Calculate the total cost if the car is kept for 5 days or less\n    cost_for_5_days = flat_fee + (5 * daily_fee_5_days_or_less)\n    \n    if total_paid <= cost_for_5_days:\n        # Steven paid less than or equal to the cost for 5 days\n        days = (total_paid - flat_fee) / daily_fee_5_days_or_less\n    else:\n        # Steven paid more than the cost for 5 days, so he must have kept the car for more than 5 days\n        additional_days = (total_paid - cost_for_5_days) / daily_fee_after_5_days\n        days = 5 + additional_days\n\n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    dog_to_chickens = 8 * 2\n    \n    return dog_to_chickens\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i+1))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height\n\n    next_height = initial_height * rebound_ratio\n\n    while next_height > 0:\n        total_distance += 2 * next_height\n        next_height *= rebound_ratio\n\n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of green toy cars Sam had in the end\n    g = symbols('g')\n    \n    # The equation models the problem statement\n    equation = Eq((g + 60) - 14, 3 * g)\n\n    # Solve the equation\n    solutions = solve(equation, g)\n\n    # The initial number of green toy cars Sam had is g + 60\n    initial_green_cars = solutions[0] + 60\n\n    return initial_green_cars\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    total_distance = 3000\n    buck_speed = 600  # in meters per minute\n    elephant_speed = 250  # in meters per minute\n    \n    # Time taken for the buck to finish the race\n    buck_time = total_distance / buck_speed\n    # Time taken for the elephant to finish the race\n    elephant_time = total_distance / elephant_speed\n    \n    # The difference in time between the buck and the elephant\n    time_difference = elephant_time - buck_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate the sum of the arithmetic sequence from 4 to 400 (inclusive)\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_forward = (num_terms * (first_term + last_term)) // 2\n    \n    # The sequence is symmetric, so the sum forward is the same as the sum backward\n    sum_backward = sum_forward\n    \n    # The final answer is the sum of both sequences\n    ans = sum_forward + sum_backward - last_term  # Subtract 400 as it is counted twice\n    return ans\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Time taken by Simon to overtake his wife\n    t = symbols('t')\n\n    # Simon's distance = Simon's speed * time\n    distance_simon = 80 * t\n\n    # Wife's distance = Wife's speed * time + initial distance between offices\n    distance_wife = 60 * t + 15\n\n    # Equation where Simon overtakes his wife\n    equation = Eq(distance_simon, distance_wife)\n\n    # Solve for t\n    t_solved = solve(equation, t)[0]\n\n    # Time Simon overtakes his wife in hours\n    time_overtake_hours = 6 + 10/60 + t_solved\n\n    # Calculate hours and minutes\n    hours = int(time_overtake_hours)\n    minutes = int((time_overtake_hours - hours) * 60)\n\n    ans = f\"{hours:02d}:{minutes:02d} pm\"\n\n    return ans\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # The numbering of the pages in a folded booklet goes like this:\n    # Sheet 1: 1, 2 | (last-1), last\n    # Sheet 2: 3, 4 | (last-3), (last-2), and so on.\n    # Hence, each sheet contributes sums of 4 of last+first, where last is the last page and the first is the first page\n    # Since each sheet contributes 2 pages of numbers, the last page number (last) is the total number of pages, which is twice the original number of sheets\n    # thus, first + last + (first+1) + (last-1) = sum, simplifying this expression, we get: 2*first + 2*last = sum, then, first + last = sum // 2\n    # in this problem sum is 58, then we must find first and last such that first + last = 58 // 2 = 29\n    # knowing the pattern of booklet numbering, we have first=1, last=n*2 (where n is the number of sheets)\n    # we look for a sheet number where the first page plus the last page equals 29\n    # since the last page of a sheet will be twice the number of sheets, and the first page of the same sheet will be (last page - 1)\n    # therefore, we'll check for every even last page, if the (last + (last // 2 * 2 - 1)) == 58\n    \n    n = 1 # start checking from the first possible sheet number\n    while True:\n        last_page = n * 2\n        first_page = last_page // 2 * 2 - 1\n        if (last_page + first_page) == 58:\n            break\n        n += 1\n        \n    return n\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n\n    combinations = drinks * food_items\n\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    lockers = [False] * 101  # False means unlocked, True means locked.\n\n    # For every third locker, change its state (lock if unlocked, unlock if locked).\n    for i in range(3, 101, 3):\n        lockers[i] = not lockers[i]\n\n    # For every fifth locker, change its state (lock if unlocked, unlock if locked).\n    for i in range(5, 101, 5):\n        lockers[i] = not lockers[i]\n\n    # Count how many lockers are unlocked at the end.\n    num_unlocked_lockers = sum(not locker for locker in lockers[1:])\n\n    return num_unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def fibonacci(n):\n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return a\n    \n    # Number of ways to reach the 5th step\n    ways_to_5th = fibonacci(5)\n    \n    # Number of ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = fibonacci(6)\n    \n    # Total number of ways to reach the 10th step via the 5th step\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n    \n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "from itertools import permutations\n\ndef solution():\n    # Define the time each person takes to cross the river\n    times = [5, 5, 9, 7]\n    \n    # Initialize minimum time to a large number\n    min_time = float('inf')\n    \n    # Try every permutation of crossings to find the minimum time\n    for perm in permutations(times):\n        # Every crossing consists of two trips:\n        # 1) Two people go to the other side\n        # 2) One person returns with the boat\n        # Except for the last crossing, because no one needs to return\n        time = 0\n        time += max(perm[0], perm[1])  # First crossing\n        time += perm[0]                # One returns\n        time += max(perm[2], perm[3])  # Second crossing\n        time += perm[1]                # Another returns\n        \n        # The first element in this permutation does not need to return the last time\n        time += max(perm[0], perm[2])  # Last crossing\n        \n        # Update minimum time if current permutation is better\n        min_time = min(time, min_time)\n        \n    return min_time\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    # Cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    # Ratio of the cost of a pen to the cost of a pencil is 7:3\n    # Let's assume the cost of a pencil is 3x and cost of a pen is 7x\n    # 3x = cost_of_1_pencil => x = cost_of_1_pencil / 3\n    x = cost_of_1_pencil / 3\n    # Cost of a pen is 7x\n    cost_of_1_pen = 7 * x\n    # Cost of 5 pens would be 5 times the cost of 1 pen\n    cost_of_5_pens = 5 * cost_of_1_pen\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500\n    total_days = 5\n\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_same_country = 9\n\n    # To ensure that one country has at least 9 participants,\n    # if every country has 8 participants, the next participant will make 9 for one country.\n    participants = (people_same_country - 1) * countries + 1\n\n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Sum of an arithmetic sequence is given by: sum = n/2 * (first_term + last_term)\n    # Where n is the number of terms, first_term is the first number in the sequence, and last_term is the last number.\n    # For the sum of 53 consecutive whole numbers equal to 2014, we can denote the first term as x and the last term as x+52\n    # We'll have the following equation:\n    # 2014 = 53 / 2 * (x + (x+52))\n    # Solving for x gives us the first term of the sequence\n    \n    n = 53                # number of terms\n    total_sum = 2014      # given sum of the sequence\n\n    # Solving the equation for the first term (x)\n    first_term = (total_sum * 2 / n) - 52\n\n    # The largest number is the last term, which is first_term + (n - 1)\n    last_term = first_term + (n - 1)\n\n    return int(last_term)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra mistakenly wrote 88 instead of 98 and got 22\n    mistaken_dividend = 88\n    result = 22\n\n    # Find the divisor A from the mistaken calculation\n    A = mistaken_dividend / result\n\n    # Calculate the correct answer using the correct dividend 98\n    correct_answer = 98 / A\n    \n    return (A, correct_answer)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Speeds of Lucas and Miller\n    speed_lucas = 5 / 6  # laps per minute\n    speed_miller = 5 / 10  # laps per minute\n\n    # Relative speed\n    relative_speed = speed_lucas - speed_miller  # laps per minute\n\n    # Time required for Lucas to overtake Miller once\n    time_to_overtake_once = 1 / relative_speed  # minutes per lap\n\n    # Lucas overtakes Miller every time they complete a lap relative to each other\n    ans = time_to_overtake_once  # The time between first and second overtake is the same as time to overtake once\n\n    return ans\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    # When rounded off to the nearest $10, the amount could be anywhere from $1665 to $1674\n    # We are looking for the greatest possible amount she could have saved\n    greatest_possible_amount = rounded_amount + 4\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1 / 2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    # Let total_visitors be the total number of visitors at the fair\n    # Children contribution (3/5) * total_visitors\n    # Remaining visitors total_visitors - (3/5) * total_visitors\n    # Men contribution (1/4) * (Remaining visitors)\n    # Equation based on the problem statement\n    equation = Eq((3/5) * total_visitors - (1/4) * (total_visitors - (3/5) * total_visitors), 120)\n    \n    solutions = solve(equation, total_visitors)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # in cents\n    additional_rate = 5  # in cents per minute\n    total_cost = 140  # in cents\n    \n    if total_cost > base_rate:\n        additional_minutes = (total_cost - base_rate) / additional_rate\n        total_minutes = 15 + additional_minutes\n    else:\n        total_minutes = 15\n    \n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    years_until_tim_is_moms_age = 54 - tim_age_now\n    moms_age_now = tim_age_now + years_until_tim_is_moms_age\n\n    return moms_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    orange_to_purple_ratio = 9.2  # orange is 9.2 times longer than purple\n\n    # Since 1 meter = 100 centimeters, convert the orange string length to centimeters to match the green string additional length unit.\n    orange_length_cm = orange_length_m * 100  \n\n    # Find the length of the purple string in centimeters.\n    purple_length_cm = orange_length_cm / orange_to_purple_ratio\n    \n    # Length of the green string is 24.9 cm longer than the purple string.\n    green_length_cm = purple_length_cm + 24.9\n\n    # Convert the length of the green string back to meters.\n    green_length_m = green_length_cm / 100\n    \n    return green_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    ans = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's work rate is 1/24 of the job per day\n    # Kevin's work rate is 1/20 of the job per day\n    # Together, their combined work rate is 1/24 + 1/20 per day\n    combined_rate = 1/24 + 1/20\n    # They finish the job by the end of the 18th day\n    # Hence the whole job is equal to combined_rate * 18\n    total_work_done = combined_rate * 18\n    \n    # Let's denote the days Kevin takes off as x\n    # Ivy works alone for x days doing 1/24 of the job per day\n    # Ivy and Kevin work together for (18 - x) days\n    # The job done by Ivy alone is x/24\n    # The job done by Ivy and Kevin together is (18 - x) * combined_rate\n    # The sum of these works should be equal to the total job (which is 1)\n    \n    # Equation: x/24 + (18 - x) * combined_rate = 1\n    # Solve the equation for x\n    \n    kevin_days_off = (1 - 18 * combined_rate) / (1/24 - combined_rate)\n    \n    return int(kevin_days_off)\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + x, 49.5)\n    solution = solve(equation, x)\n    longer_piece = round(5 * solution[0], 1)\n    \n    return longer_piece\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60  # 60p from Mum per day\n    money_from_dad_per_day = 40  # 40p from Dad per day\n\n    # Calculating the total money for one day and then multiply by 3 since Monday, Tuesday, and Wednesday\n    total_money_per_day = money_from_mum_per_day + money_from_dad_per_day\n    total_money_for_three_days = total_money_per_day * 3\n\n    return total_money_for_three_days\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    \n    # The snail reaches or surpasses the top of the well during the day,\n    # so we count full periods and add one for the final day\n    full_periods = (total_distance - day_distance) // net_distance\n    final_day = full_periods + 1\n    \n    return final_day\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variable as a symbol\n    A = symbols('A')\n\n    # Equation representing the puzzle, examining each column vertically:\n    # The sum of digits in each column is a multiple of 11 and individually contribute to the total\n    # Hence, for 1st column from right: A + A + A should be equal to A with a possible carryover from the 2nd column\n    # For the 2nd column: A + A, considering the carryover of 1, should form A with a possible carryover to the 3rd column\n    # For the 3rd column: A, considering the carryover of 1, should form A with no carryover as A has only one digit\n    # The system of equations:\n    # 1st column: 3A % 10 = A (A must be 0 or 5 for this to be true)\n    # 2nd column: (A + A + 1) % 10 = A\n    # 3rd column: (A + 1) % 10 = A which implies A = 9 but contradicts the 2nd column\n    # Hence A + A cannot be 9, it must be 14 or 4 (if A were 5 or 0 respectively)\n\n    # Since this equation must hold true for A being a single digit (0-9), we attempt to solve it using modulus\n    # The equation simplifies to (3A - A) % 10 = 0\n    equation = (3 * A - A) % 10\n\n    # Solve for A\n    solutions = solve(equation, A)\n\n    # Filter the solutions for those which are single digit natural numbers including 0\n    solution_single_digit = [s for s in solutions if s >= 0 and s < 10]\n\n    return solution_single_digit[0]\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy completes the book in 6 days, her work rate is 1/6 per day\n    nancy_rate = 1/6\n    \n    # Together they complete the book in 4 days, their combined work rate is 1/4 per day\n    combined_rate = 1/4\n    \n    # Tim's work rate is the difference between the combined rate and Nancy's rate\n    tim_rate = combined_rate - nancy_rate\n    \n    # Tim's time to complete the book by himself is the inverse of his work rate\n    tim_time = 1 / tim_rate\n    \n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_money = 100\n    cycle = 15 // 2  # Each cycle is 2 days\n    remaining_days = 15 % 2\n    \n    # In each 2-day cycle, Bob deposits £5 and spends £8, resulting in a loss of £3\n    total_money += (cycle * (5 - 8))\n    \n    if remaining_days > 0:  # For the odd day, Bob deposits £5\n        total_money += 5\n\n    return total_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    slip_down = 2\n    effective_jump = (3 * jump_up) - slip_down\n    jumps_to_top = total_distance // effective_jump * 3\n    remainder = total_distance % effective_jump\n\n    if remainder == 0:\n        return jumps_to_top\n    elif remainder <= jump_up:\n        return jumps_to_top + 1\n    else:\n        return jumps_to_top + 3\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # 20% of x are in Year 7 normally\n    # 10% of 400 are in Year 7 after some girls miss school for a sports match\n    # So 20% of x - the girls who missed school = 10% of 400 (which is 40)\n    # Therefore, 20% of x = 40 + the girls who missed school\n    # Since the total number of pupils left at school is 400\n    # x - the girls who missed school = 400\n    # Solving these two equations will give us the value of x (the total number of pupils)\n\n    # Equation: 0.2 * x - girls_missed = 0.1 * 400\n    # Equation: x - girls_missed = 400\n    \n    # from the 1st equation, we can say girls_missed = 0.2 * x - 40\n    # replacing in the 2nd equation: x - (0.2 * x - 40) = 400\n    # x - 0.2 * x + 40 = 400\n    # 0.8 * x + 40 = 400\n    # 0.8 * x = 400 - 40\n    # 0.8 * x = 360\n    # x = 360 / 0.8\n    x = 360 / 0.8\n    \n    return int(x)\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    ans = sum((i / ((i**2 - 1) * (i**2 + i))) for i in range(1, 7)) + 1 / 22\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let x be the money Helen had at the start\n    # After spending one-third on a dress, she is left with 2/3 of x\n    # Then she spends three-fifths of what is left, which is 3/5 * (2/3 * x)\n    # According to the problem, she is left with £40 after that\n    # Therefore, (1 - 3/5) * (2/3 * x) = £40\n    # Simplifying the equation: (2/5) * (2/3 * x) = £40\n    # Solving for x: x = £40 * (5/2) * (3/2)\n    \n    money_left = 40\n    fraction_left = (2/5) * (2/3)  # Fraction of money left after all spending\n    initial_money = money_left / fraction_left  # Original amount of money Helen had\n    \n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n    \n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n    \n    num = factorial(999) // factorial(300)\n    ans = count_trailing_zeros(num)\n    \n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    result = (4 * a) + (0.6 * b)\n    return result\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries % 2, 0) # this will check for even number\n    equation4 = Eq(cars + bikes + lorries, 98) # assuming the number is less than 100 but also even\n\n    solutions = solve((equation1, equation2, equation3, equation4), (cars, bikes, lorries))\n\n    for sol in solutions:\n        if all(map(lambda x: x.is_integer and x > 0, sol)):\n            return sol\n    \n    return None\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, x = symbols('A B x')  # A and B are the original numbers in boxes A and B; x is the number Ken added to A.\n\n    # Setting up the equations based on the problem.\n    equation1 = Eq(A, B + 64)               # There were 64 more buttons in box A than box B.\n    equation2 = Eq(B - 2*x, B - 28)         # The number of buttons in box B became 28 fewer than before.\n    equation3 = Eq((A + x) + (B - 2*x), 4*(B - 2*x))  # The ratio of total buttons to B's buttons is 4:1 in the end.\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, x))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    common_difference = 4\n\n    # Formula to find number of terms in an arithmetic sequence: n = ((last - first) / d) + 1\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n    while True:\n        tiles_in_layer = (layer*2 - 1)**2\n        if red_tiles + green_tiles + tiles_in_layer > total_tiles:\n            break\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        layer += 1\n    \n    remaining_tiles = total_tiles - red_tiles - green_tiles\n    if layer % 2 == 1:\n        red_tiles += remaining_tiles\n    else:\n        green_tiles += remaining_tiles\n    \n    more_tiles_color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return more_tiles_color, difference\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Since the students formed a square, we can consider each side of the square\n    # being constructed by 'layers' of students, where the outermost layer has 60 students.\n    # Thus, the square has a perimeter made up of these students. For a square,\n    # the perimeter is 4 times one of the sides.\n    # The perimeter formed by the outermost layer of students: 4*S = 60,\n    # where S is the length of the side of the outermost layer.\n    # Since the square is formed of concentric layers of students, each inner square\n    # has a perimeter 8 less than the previous (as we move inwards by 1 student on each side),\n    # and thus the side length diminishes by 2. \n    # If we let n be the total number of layers, including the outermost one, then the side\n    # of each successive inner square will be: 60 - 2*(n-1).\n    # This occurs until we reach the most inner layer which has a side of 2 or 1 (even or odd total side length).\n    # Hence, when we add all students in all layers, we have a total in the form of a square number.\n    # This number can be calculated as the sum of odd numbers: 1 + 3 + 5 + ... + (2n-1) = n^2.\n    # The sum of the first n odd numbers is always a perfect square, and in this case,\n    # it will be the total number of students.\n    # To find n, we can set up and solve the equation for the side of the innermost layer to be 1 or 2:\n    # 60 - 2*(n-1) = 1 (for the last layer possibly being a single student)\n    # or\n    # 60 - 2*(n-1) = 2 (for the last layer possibly being 2 students on the side).\n\n    # Solving for n from the first equation:\n    n1 = (60 - 1) // 2 + 1\n    # Solving for n from the second equation:\n    n2 = (60 - 2) // 2 + 1\n\n    # Check which one creates a perfect square when squared\n    student_count1 = n1**2\n    student_count2 = n2**2\n\n    # Check which one is the correct square (both could be, but n1 will be larger)\n    if student_count1 < student_count2:\n        total_students = student_count2\n    else:\n        total_students = student_count1\n\n    return total_students\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number_str = \"26\" + \"2011\" * n + \"7\"\n        number = int(number_str)\n\n        if number % 33 == 0:\n            return n\n        else:\n            n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    X, Y, Z, rounds = 20, 19, 18, 0\n    while X > 0 and Y > 0 and Z > 0:\n        if X >= Y and X >= Z:\n            X -= 3\n            Y += 1\n            Z += 1\n        elif Y > X and Y >= Z:\n            Y -= 3\n            X += 1\n            Z += 1\n        elif Z > X and Z > Y:\n            Z -= 3\n            X += 1\n            Y += 1\n        rounds += 1\n    return rounds\n    \nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # This problem is equivalent to finding the number of solutions to the equation\n    # x1 + x2 + x3 = 7, where x1, x2, x3 are non-negative integers representing the lollipops on each plate.\n    # This is a problem of combinations with repetition (also known as \"stars and bars\" or \"balls and urns\").\n    # The formula for combinations with repetition is (n + r - 1) choose (r - 1),\n    # where n is the number of items to choose from, and r is the number of items to choose.\n    \n    # In this case, n = 7 (lollipops) and r = 3 (plates).\n    # Therefore, we need to calculate (7 + 3 - 1) choose (3 - 1).\n    \n    from math import comb\n    num_ways = comb(7 + 3 - 1, 3 - 1)\n    return num_ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # It takes 3 minutes to make 3 cuts, since the fourth piece is result \n    # of the final third cut.\n    minutes_per_cut = 3 / 3\n\n    # To have 8 pieces, we need 7 cuts.\n    total_minutes = minutes_per_cut * 7\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_gained = 24\n    total_rounds = 12\n    cards_win = 4\n    cards_lose = 2\n\n    # Since we know the total cards gained and total rounds, we can set up an equation:\n    # cards_win * wins - cards_lose * losses = total_cards_gained\n    # And we know that wins + losses = total_rounds\n    # From these two equations, we can solve for losses (the rounds she lost).\n\n    # Let losses be the number of lost rounds and wins be the number of won rounds\n    # total_cards_gained = cards_win * wins - cards_lose * losses\n    # Rearranging the equation, we get losses = (cards_win * wins - total_cards_gained) / cards_lose\n    # Since we don't know the number of wins yet, we use wins = total_rounds - losses\n\n    # Setting up the equations\n    # 4 * wins - 2 * losses = total_cards_gained\n    # wins + losses = total_rounds\n\n    # Rearranging the first equation for losses\n    # losses = (4 * wins - total_cards_gained) / 2\n\n    # Putting the second equation in terms of wins, and substituting in the first equation\n    # losses = total_rounds - wins\n    # (4 * wins - total_cards_gained) / 2 = total_rounds - wins\n    # Solving for wins\n    # wins = (2 * total_rounds + total_cards_gained) / 6\n    \n    # Therefore, the number of losses is\n    wins = (2 * total_rounds + total_cards_gained) / 6\n    losses = total_rounds - wins\n\n    return int(losses)\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for Rasidah and Chai Seng's money\n    Rasidah, Chai_Seng = symbols('Rasidah Chai_Seng')\n\n    # Chai_Seng = Rasidah + 48\n    equation1 = Eq(Chai_Seng, Rasidah + 48)\n    # Rasidah spent 3/5, so she has 2/5 left\n    # Chai_Seng spent 6/7, so he has 1/7 left\n    # Chai_Seng left money = 1/2 Rasidah's left money\n    equation2 = Eq(Chai_Seng * 1/7, Rasidah * 2/5 / 2)\n\n    # solve the equations\n    solution = solve((equation1, equation2), (Rasidah, Chai_Seng))\n    \n    return solution[Rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    remaining_cards = initial_cards - duplicates + new_cards\n\n    return remaining_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial as fact\n    \n    # Treat Amy and Judy as one person, hence 7 entities to arrange.\n    arrange_7 = fact(6)  # 7-1 entities because it's circular table. \n    \n    # Amy and Judy can switch places between themselves in 2! ways.\n    arrange_amy_judy = fact(2) \n    \n    # The number of different orders is the product of the two arrangements.\n    total_arrangements = arrange_7 * arrange_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of Andy's cookies be 'a' and Ben's cookies be 'b'\n    andy, ben = symbols('andy ben')\n    \n    # Andy had 84 fewer cookies than Ben at first.\n    eq1 = Eq(andy, ben - 84)\n    \n    # After Andy bought more cookies, and Ben bought more cookies.\n    andy_final = andy + (andy / 3)\n    ben_final = ben + (ben / 5)\n    \n    # Andy had 1/3 as many cookies as Ben in the end.\n    eq2 = Eq(andy_final, ben_final / 3)\n    \n    # Solve the equations for 'a' and 'b'\n    solutions = solve((eq1, eq2), (andy, ben))\n\n    # Andy's final count is a + 1/3*a \n    return solutions[andy] + (solutions[andy] / 3)\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_sum = sum(1 / i for i in range(1, 8))\n    return int(total_sum)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n    years_claimed = 5\n\n    # Calculate using the formula for compound interest\n    # A = P(1 + r/n)^(nt), where\n    # A = final amount\n    # P = initial principal balance (principal)\n    # r = annual interest rate (decimal)\n    # n = number of times that interest is compounded per year\n    # t = number of years the money is invested for\n\n    # Since the interest is simple interest, we simplify the formula to:\n    # A = P(1 + rt), where\n    # A = final amount\n    # P = principal\n    # r = annual interest rate (decimal)\n    # t = number of years\n\n    # Rearrange the formula to solve for t\n    # t = (A/P - 1) / r\n\n    years_actual = (final_amount / principal - 1) / rate\n\n    # Check if the claimed years is the same as calculated years\n    correct_years = round(years_actual, 2) == years_claimed\n    return correct_years if correct_years else round(years_actual, 2)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    return gcd(pencils, pens)\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Define initial values\n    positive_num = 18\n    negative_num = -16\n    # Initialize counter\n    count = 1\n\n    # Find the nth term in the sequence\n    while count < 1000:  # Here 1000 is a big number to ensure we reach our desired term\n        positive_num += 1\n        negative_num += 1\n        count += 1\n        # If the count is odd, return the positive number, else the negative_num\n        if count % 2 == 1:\n            n = positive_num\n        else:\n            n = negative_num\n\n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d with a > b > c > d (descending order)\n    # We are given that d + (a + b + c)/3 = 39 and a + (b + c + d)/3 = 51.\n    \n    # Multiply both equations by 3 to get rid of denominators\n    # 3d + a + b + c = 117 and 3a + b + c + d = 153\n    \n    # Now, let's sum these two equations to eliminate b and c\n    # 3d + a + b + c + 3a + b + c + d = 117 + 153\n    # 4a + 4d = 270 => a + d = 67.5 (but since we deal with whole numbers a + d = 67 or 68)\n    \n    # Now we need to find the largest possible value for 'a' (the largest number),\n    # keeping in mind that all four numbers are distinct positives and a + d = 67 or 68.\n    \n    # We can start with the largest possible 'a' when a + d = 68 and subtract until\n    # we find a solution where all numbers are distinct and positive whole numbers.\n    \n    # Since a > b > c > d, we can assume d is 1 to start with.\n    # If a + 1 = 68 => a = 67 but this does not leave room for b and c to be distinct\n    # Let's decrease 'a' further and increase 'd' to find the next potential solution\n    \n    a = 67\n    d = 1\n    while True:\n        # Calculate b + c using the rearranged first equation: b + c = 117 - 3d - a\n        b_plus_c = 117 - 3*d - a\n        # Now, b and c are the two middle terms and must be distinct whole numbers\n        # and b > c. For the maximum 'a', 'b' should be as small as possible:\n        # This means b = d + 1 and c = d + 2 (as smallest increments to maintain distinctness)\n        b = d + 1\n        c = d + 2\n        if b + c == b_plus_c:\n            break\n        # If not found, decrease 'a' and increase 'd' and try again\n        a -= 1\n        d += 1\n        \n    return a\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of pupils who passed at least one test\n    total_passed_at_least_one = 43\n\n    # Total number of pupils who passed each individual test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # By inclusion-exclusion principle, the maximum number of pupils who passed all tests\n    # is obtained when the intersection of the passing students of any two tests is minimized.\n    # Since the total of individual test passers (30 + 28 + 25) is 83, which is 40 more than\n    # the number of pupils who passed at least one test (43), and we assume minimal overlap \n    # between the tests, this extra 40 could represent students who are being double or \n    # triple-counted (i.e., passed two or all three tests).\n\n    # The maximum number of students passing all three tests occurs when all 40 of these\n    # \"extra\" students are triple-counted, making the number passing all three tests:\n    max_passed_all_three = 40\n\n    return max_passed_all_three\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all possible two-digit numbers\n    two_digit_numbers = list(range(10, 100))\n    \n    # Generate all possible combinations of 9 hats\n    all_combinations = list(permutations(two_digit_numbers, 9))\n    \n    # Helper function to check if 4 students know about the divisibility by the mystery number and 6 by 24\n    def check(combination):\n        divisible_by_mystery_number = 0\n        divisible_by_24 = 0\n        \n        for num in combination:\n            # Since Tom is raising his hand in both cases, we exclude his number at first\n            if num % 24 == 0:\n                divisible_by_24 += 1\n                \n        # Check divisibility by a mystery number by iterating through 1 to 23 (since we are already checking 24)\n        for mystery_number in range(1, 24):\n            divisible_by_mystery_number = 0\n            for num in combination:\n                if num % mystery_number == 0 or num % mystery_number != 0:\n                    # Every student would know if their number is divisible or not by any number other than their own number\n                    divisible_by_mystery_number += 1\n            # Check if the condition satisfies, 4 know about the mystery number and 6 know about 24\n            if divisible_by_mystery_number == 4 and divisible_by_24 == 6:\n                return mystery_number\n        \n        return 0\n    \n    for combination in all_combinations:\n        # Since Tom raised his hand for both numbers, his number must be divisible by 24\n        # and since all other numbers must be different, they can't be divisible by 24\n        if combination[0] % 24 == 0 and all(num % 24 != 0 for num in combination[1:]):\n            mystery_number = check(combination)\n            if mystery_number:\n                # Since Tom sees 8 other numbers, we calculate the sum of these numbers\n                return sum(combination[1:])\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    speed_ahmad = 80     # in meters per minute\n    speed_brother = 50   # in meters per minute\n    distance_met = 210   # the distance from the school where they met\n\n    # When they meet, let's say the younger brother has walked t minutes, so Ahmad has walked t minutes to school and t minutes back.\n    # Thus, Ahmad's walking time is `2t` when he meets his brother.\n    \n    # Distance covered by the younger brother in t minutes\n    distance_brother = speed_brother * t\n    \n    # Distance covered by Ahmad in 2*t minutes\n    distance_ahmad = speed_ahmad * 2 * t\n    \n    # Ahmad has walked to the school and back to the meeting point, so his distance is \n    # the total distance to the school plus the distance from school to the meeting point\n    # distance_ahmad = total_distance + distance_met\n\n    # Now we set the equations equal to each other:\n    # distance_brother = distance_ahmad - distance_met\n    # speed_brother * t = (speed_ahmad * 2 * t) - distance_met\n\n    # Solving the equation for t:\n    t = distance_met / (speed_ahmad * 2 - speed_brother)  # time taken by the brother till they meet\n\n    # The total distance from home to school is the distance brother covered in time t plus the distance_met\n    total_distance = speed_brother * t + distance_met\n\n    return total_distance\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):  # x1: number of pens in the first pencil case\n        for x2 in range(1, 6):  # x2: number of pens in the second pencil case\n            x3 = 6 - x1 - x2  # x3: number of pens in the third pencil case\n            if 1 <= x3 <= 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # Solve the complex fraction\n    numerator_first_part = (1/30) + (1/6)\n    denominator_first_part = 2/25\n    first_part = numerator_first_part / denominator_first_part\n    \n    numerator_second_part = 2 - (2/3)\n    denominator_second_part = 8/3\n    second_part = numerator_second_part / denominator_second_part\n    \n    # Sum the results of the two parts\n    ans = first_part + second_part\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    place_value_1 = 8 * 1000  # The first 8 is in the thousands place\n    place_value_2 = 8 * 10  # The second 8 is in the tens place\n    difference = place_value_1 - place_value_2\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find the largest 5-digit palindromic number that is a multiple of 45 \n    # by starting at the max 5-digit number and decrementing until we find\n    # a palindromic multiple of 45\n    for i in range(99999, 9999, -1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            largest = i\n            break\n    \n    # Find the smallest 5-digit palindromic number that is a multiple of 45 \n    # by starting at the min 5-digit number and incrementing until we find\n    # a palindromic multiple of 45\n    for i in range(10000, 100000):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            smallest = i\n            break\n\n    # The difference between the largest and smallest\n    ans = largest - smallest\n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # since the number is divisible by 5, A must be 0 or 5\n    # since the number is also divisible by 4, the last two digits must be divisible by 4 - this rules out 5 (5725 is not divisible by 4), leaving A to be 0\n    return 0\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    number = 40309\n    added_number = 0\n\n    while True:\n        if is_palindrome(number + added_number):\n            return added_number\n        else:\n            added_number += 1\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    ribbon1 = 16\n    ribbon2 = 24\n    longest_piece = gcd(ribbon1, ribbon2)\n\n    return longest_piece\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    \n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_wage\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    top_mean = 92  # mean of the top 3 students\n    total_mean = symbols('total_mean')  # mean of all 10 students\n\n    # Define equations based on the problem statement\n    last_mean = total_mean - 6  # mean of the last 7 students\n\n    # Equation: sum of the top 3 students' scores\n    equation_top = Eq(3 * top_mean, 3 * total_mean)\n\n    # Equation: sum of the last 7 students' scores\n    equation_last = Eq(7 * last_mean, 7 * total_mean - 7*6)\n\n    # Solve the system of equations\n    solution = solve((equation_top, equation_last), (total_mean))\n\n    return solution[total_mean]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Check if all digits are unique\n            for perm in permutations(digits, 4):\n                num = int(''.join(perm))\n                if num + 1 == int(perm[0]) + 1 == int(perm[1]) + 2 == int(perm[2]) + 3 == int(perm[3]) + 4:\n                    lucky_years += 1\n                    break  # No need to check other permutations if one valid is found\n    return lucky_years\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Step 1: Find the common supplement\n    # As the remainders are the numbers left over, the common supplement is the differences of \n    # each divisor minus the remainders given for each pile.\n    common_supplement = (5 - 1, 6 - 2, 11 - 7)\n    \n    # Step 2: Find the LCM of all the divisors\n    # We want to find the least common multiple of the original divisors 5, 6, and 11.\n    lcm_divisors = 5 * 6 * 11\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # Using the Chinese Remainder Theorem to find a number that when divided by each divisor,\n    # leaves the remainder specified.\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    unknown, _ = solve_congruence(*congruences)\n    \n    # Next, we find the unique solution less than 500.\n    ans = unknown\n    while ans < 500:\n        ans += lcm_divisors\n    \n    # Subtracting one cycle of the LCM to get the maximum number under 500\n    ans -= lcm_divisors\n    \n    return ans\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n\n    for red_marbles in bags:\n        x_bags = [bag for bag in bags if bag != red_marbles]\n        combinations = [(x1, x2, x3) for x1 in x_bags for x2 in x_bags for x3 in x_bags if x1 < x2 < x3]\n        for combo in combinations:\n            if sum(combo) == 2 * (sum(x_bags) - sum(combo)):\n                return red_marbles\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    for num in range(1, 100):\n        if 5*num + 20 == 100:\n            return num\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550\n    time_original = 5\n    time_new = 3\n    \n    speed = distance / time_original\n    distance_new = speed * time_new\n    \n    return distance_new\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    remaining_fraction = 1 - 2/5\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from itertools import permutations\n    from math import factorial\n    from fractions import Fraction\n\n    def is_even(arrangement):\n        for c in 'RBGYOP':\n            indices = [i for i, x in enumerate(arrangement) if x == c]\n            if (indices[1] - indices[0]) % 2 != 1:\n                return False\n        return True\n\n    blocks = 'RRBBYYGGOOPP'\n    even_count = sum(is_even(arrangement) for arrangement in set(permutations(blocks)))\n\n    total_count = factorial(12) // (factorial(2) ** 6)\n    probability = Fraction(even_count, total_count)\n    \n    return probability.numerator + probability.denominator\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    total_jumps = 14  # Since the frog jumps from post 1 to 15, it makes 14 jumps\n    jump_length = 3  # Each jump is 3 inches long\n    total_distance = total_jumps * jump_length  # Total distance is jumps multiplied by the length of each jump\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let beth_original represent the number of sweets Beth originally had\n    # Since both Andre and Beth had a total of 24 sweets,\n    # Andre originally had (24 - beth_original) sweets.\n    #\n    # After their teacher gave them 4 sweets each,\n    # Andre will have (24 - beth_original + 4) sweets,\n    # and Beth will have (beth_original + 4) sweets.\n    #\n    # According to the problem, Andre now has 6 sweets more than Beth,\n    # which gives us the equation:\n    # (24 - beth_original + 4) = (beth_original + 4) + 6\n    # Simplifying the equation gives us:\n    # 24 - beth_original + 4 = beth_original + 10\n    # 28 - beth_original = beth_original + 10\n    # 28 - 10 = 2 * beth_original\n    # 18 = 2 * beth_original\n    # beth_original = 9\n    #\n    # Now, we add the 4 sweets given by the teacher to Beth's original number\n    # beth_now = beth_original + 4\n    # beth_now = 9 + 4\n    # beth_now = 13\n    #\n    # Thus, Beth now has 13 sweets.\n\n    beth_original = 9\n    beth_now = beth_original + 4\n    return beth_now\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # pears + strawberries + apples\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_A = 1 / 36 \n    rate_B = 1 / 48 \n    cycle_time = 6 \n    cycle_fill = 1 * rate_A + 2 * rate_B + 2 * rate_A + 1 * rate_B \n    full_pool = 1\n    time = 0 \n\n    while full_pool > 0:\n        if time % cycle_time < 1:\n            full_pool -= rate_A\n        elif time % cycle_time < 3:\n            full_pool -= rate_B\n        elif time % cycle_time < 5:\n            full_pool -= rate_A\n        else:\n            full_pool -= rate_B\n        time += 1 \n    \n    return time\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    \n    # Alan and Bob paint together\n    equation1 = Eq(1/alan + 1/bob, 1/4)\n    \n    # Bob's rate on his own\n    equation2 = Eq(1/bob, 1/6)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_saturday = 0.7\n    probability_rain_sunday = 0.5\n\n    # Probability it will not rain on Saturday and Sunday\n    probability_no_rain_saturday = 1 - probability_rain_saturday\n    probability_no_rain_sunday = 1 - probability_rain_sunday\n\n    # Probability it will not rain on both days\n    probability_no_rain_both_days = probability_no_rain_saturday * probability_no_rain_sunday\n\n    # Probability that it will rain at least one day\n    probability_rain_at_least_one_day = 1 - probability_no_rain_both_days\n\n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_for_correct = 10\n    points_for_incorrect = -3\n    total_questions = 10\n    \n    # Let x be the number of correct answers.\n    # Then the number of incorrect answers is total_questions - x.\n    # total_points = x * points_for_correct + (total_questions - x) * points_for_incorrect\n\n    # We solve for x using a linear equation.\n    # We have: 48 = 10x + (-3)(10 - x)\n    \n    for x in range(total_questions + 1):\n        incorrect_answers = total_questions - x\n        if points_for_correct * x + points_for_incorrect * incorrect_answers == total_points:\n            return incorrect_answers\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # Start with the fact that zeros at the end of a product come from factors of 10,\n    # which are a product of 2 and 5. Since 2 is more common than 5, we count the number of 5s.\n    zeros_count = 28\n    current_zeros = 0\n    n = 0\n\n    # Count the number of consecutive 5's in factorial(n) to match the number of zeros\n    while current_zeros < zeros_count:\n        n += 1\n        # Check if this term contributes to the count of 5's\n        temp_n = n\n        while temp_n % 5 == 0:\n            current_zeros += 1\n            temp_n //= 5\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    henry, fred, richard = symbols('henry fred richard')\n\n    # Given information represented by equations\n    equation1 = Eq(henry + fred + richard, 204.56)\n    equation2 = Eq(richard, henry - 3.24)\n    equation3 = Eq(fred, richard + 5.6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    # Get Fred's weight from the solutions\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    empty_bottles = 10  # Lucas starts with 10 empty bottles after drinking\n    total_drinks = 10  # Lucas bought 10 bottles of mineral water to drink\n    loan_bottle = 1  # The shop owner can lend him 1 empty bottle\n\n    # Add the loaned bottle to his empty bottles count\n    empty_bottles += loan_bottle\n\n    # While he can exchange bottles\n    while empty_bottles >= 2:\n        # Exchange two empty bottles for one full one\n        full_bottles = empty_bottles // 2\n        # Drink them\n        total_drinks += full_bottles\n        # Now those full bottles are empty\n        empty_bottles = empty_bottles % 2 + full_bottles\n\n    # Return the loaned bottle\n    if empty_bottles and loan_bottle:\n        empty_bottles -= loan_bottle\n        loan_bottle = 0\n\n    # Calculate if there's a remaining empty bottle to return the loan\n    if empty_bottles >= 2:\n        total_drinks += 1\n        empty_bottles = 0  # Return the loaned bottle\n\n    return total_drinks\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # t is the time in minutes after which the water level in pool A is 3 times pool B\n    t = symbols('t')\n\n    # Write the equation representing the situation\n    # The portion of the pool drained in pool A is t/10 and in pool B is t/6\n    # After t minutes, the fraction of the pool A left undrained should be 3 times that of pool B\n    equation = Eq((1 - t/10)/(1 - t/6), 3)\n\n    # Solve the equation\n    solution = solve(equation, t)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    \n    # Total positions is one less than the total number of children\n    total_positions = total_children - 1\n    \n    # Find Andrea's position from the front\n    andrea_position_from_front = total_positions - andrea_position_from_end + 1\n    \n    # Calculate the number of children between Vanessa and Andrea\n    num_children_between = abs(andrea_position_from_front - vanessa_position_from_front) - 1\n    \n    return num_children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    initial_sweets = 320\n    sweets_bought_each_week = 30\n    total_weeks = 7\n    final_sweets = 348\n\n    # Calculate the total sweets acquired over the weeks\n    total_acquired_sweets = sweets_bought_each_week * total_weeks + initial_sweets\n\n    # Calculate the total sweets eaten over the weeks\n    sweets_eaten = total_acquired_sweets - final_sweets\n\n    # Calculate the number of sweets eaten each week\n    sweets_eaten_each_week = sweets_eaten / total_weeks\n    \n    return int(sweets_eaten_each_week)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(\"281\" + str(digit))\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = louise_time * 3\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let the number of sweets Yue Ying has be y\n    # Then the number of sweets Chenxi has is y + 5\n    # After Chenxi gives Yue Ying 10 sweets:\n    # New number of sweets Yue Ying has = y + 10\n    # New number of sweets Chenxi has = y + 5 - 10 = y - 5\n    # The difference in number of sweets they have now is:\n    # (y + 10) - (y - 5) = 15\n    return 15\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # There is 1 way to make the number 1 using positive numbers, by using 1 itself.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 8 / 60\n\n    # Let the distance be d\n    # At 3km/h, time taken is d/3 hours\n    # At 7km/h, time taken is d/7 hours\n\n    # According to the problem,\n    # (d/3) - (d/7) = late_time + early_time\n    # Solve for d\n    d = (3 * 7 * (late_time + early_time)) / (7 - 3)\n    \n    return d\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 69):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime2 - prime1\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    school_a, school_b = symbols('school_a school_b')\n    \n    # Equation before transferring students\n    equation1 = Eq(school_a + school_b, 1050)\n    \n    # Equation after transferring 20 students from A to B\n    equation2 = Eq(school_a - school_b, 10 + 2 * 20)\n    \n    # Solve the system of equations\n    original_school_counts = solve((equation1, equation2), (school_a, school_b))\n    \n    return original_school_counts[school_a]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Insert brackets in judicious positions for maximizing the value\n    # The multiplication operation should be prioritized and summed with the highest possible values\n    # As there are two pairs of brackets to be used, we look for two multiplications that maximize value\n    \n    # Pair first bracket with multiplication and the largest addition, which is before 5*5\n    # Pair second bracket with the sum of values after the first multiplication, specifically adding 15\n    ans = (15 + (5 * 5) + 15) - 6 + 7\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if correct * 10 - incorrect * 5 == 70:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_class = 10\n\n    # Students taking at least one class\n    at_least_one_class = total_students - neither_class\n\n    # Students taking only the writing class\n    only_writing_class = at_least_one_class - math_students\n\n    # Add the students taking both classes to get the total number of students in the writing class\n    writing_class = only_writing_class + both_classes_students\n\n    return writing_class\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = \"08072003\"\n    primes = []\n\n    # Generate all permutations of the given digits\n    for i in range(1, 4):  # Only need to check numbers with at most 2 digits to satisfy the condition of being less than 50\n        for number in itertools.permutations(digits, i):\n            number = int(''.join(number))\n            if number < 50 and isprime(number):\n                primes.append(number)\n    \n    return max(primes)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    total_sum = total_average * 5\n    \n    first_two_average = 48\n    first_two_sum = first_two_average * 2\n    \n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n    \n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    teddy_age_now, father_age_now = symbols('teddy_age_now father_age_now')\n\n    # Construct the equations based on the problem description\n    equation1 = Eq(father_age_now, 7 * teddy_age_now)  # Father's age is 7 times Teddy's age\n    equation2 = Eq(father_age_now - teddy_age_now, 40 - 5)  # Difference in their ages will remain constant\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (teddy_age_now, father_age_now))\n\n    # Find out how old will Teddy be when his father is 40\n    teddy_age_when_father_40 = 40 - solutions[father_age_now] + solutions[teddy_age_now]\n\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Total ratio of the audience\n    total_ratio = 35  # Obtained from common denominator of 7 (adults) and 5 (remaining audience)\n\n    # Adult ratio of the audience\n    adults_ratio = 2 * (total_ratio / 7)\n\n    # Girls ratio of the audience\n    girls_ratio = total_ratio - adults_ratio * (4/5)\n\n    # Now we check the error in Adriana's workings:\n    # Ratio difference between adults and girls should be (adults_ratio - girls_ratio)\n    ratio_difference = adults_ratio - (1/5) * (total_ratio / 7)\n\n    # The ratio difference represents 80 people\n    people_per_ratio = 80 / ratio_difference\n\n    # Total people at the play\n    total_people = people_per_ratio * total_ratio\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Andrea's rule is that each new cut can intersect all the previous cuts,\n    # creating at most n new pieces with the nth cut.\n    # This rule, however, doesn't include the first cut, which always creates 2 pieces.\n    # Therefore, we adjust the sequence by adding 1 to each term,\n    # Starting from the second term which should represent the first effective cut.\n    # i.e., the sequence becomes 2 (first cut), 2 (second cut), 3 (third cut), 4 (fourth cut)\n\n    # Now, we sum these terms\n    total_slices = 2 + 2 + 3 + 4\n\n    return total_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_elephant_and_rabbit = 5 - 1  # excluding the rabbit itself\n\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between_elephant_and_rabbit\n\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for number in range(1, 110):\n        sum_digits += sum(int(digit) for digit in str(number))\n    return sum_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = 1\n    gray = 11\n    total_dolphins = 48\n\n    num_pink_dolphins = total_dolphins / (pink + gray)\n\n    return int(num_pink_dolphins)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n\n    # Using the formula for the area of a triangle (Area = 0.5 * base * height)\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the original number of tables and c be the original number of chairs\n    t, c = symbols('t c')\n\n    # Original, c = t\n    equation1 = Eq(c, t)\n    # After changes, c + 24 = 4 * (t - 42)\n    equation2 = Eq(c + 24, 4 * (t - 42))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 700 * (35 / 100)\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n    \n    total_cabinets = left_of_candy + right_of_candy + candy_cabinet\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits_sum = sum(int(digit) for digit in str(i))\n            if digits_sum == 7:  # Check if the sum of digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since we're looking for the remainder when divided by 5, we can make use of modular arithmetic properties.\n    # We can reduce the problem to finding the remainder of 2^2019 with respect to 5, and the remainder of (4^982 - 2^1963) with respect to 5.\n    # Let's calculate these remainders.\n\n    # First calculate the remainder for 2^2019 divided by 5 using modular exponentiation.\n    remainder_2_2019 = pow(2, 2019, 5)\n\n    # Then calculate the remainder for 4^982 - 2^1963 divided by 5, which is the same as (2^2)^982 - 2^(2*982)\n    # Simplify this using properties of modular arithmetic.\n    remainder_4_982 = pow(2, 1964, 5)  # This is 4^982 mod 5, or (2^2)^982 mod 5\n\n    # Now we're subtracting two numbers so we can calculate this directly\n    final_remainder_numerator = (remainder_2_2019 - remainder_4_982) % 5\n\n    # The denominator in the expression (4^982 - 2^1963) is actually (remainder_4_982 - remainder_2_2019)\n    # Since the denominator in our original problem cannot be 0 when calculating modulus, we need to ensure it is also not 0 under mod 5.\n    # If it is 0, we can't use modular inverse and the problem does not have a solution.\n    final_remainder_denominator = (remainder_4_982 - pow(2, 1963, 5)) % 5\n\n    # Ensure the denominator is not zero before we apply modular inverse,\n    # If final_remainder_denominator is 0, we have Division by Zero under mod 5, which is invalid.\n    if final_remainder_denominator == 0:\n        return None  # or raise an exception, depending on desired behavior\n  \n    # Now we can find the multiplicative inverse of the denominator mod 5\n    # Multiplicative inverses can be found, since 5 is a prime number, using Fermat's Little Theorem\n    inverse_denominator = pow(final_remainder_denominator, 5 - 2, 5)\n\n    # Finally, we get our answer by multiplying the numerator's remainder with the inverse of the denominator's remainder modulo 5\n    ans = (final_remainder_numerator * inverse_denominator) % 5\n    return ans\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    cookies_eaten = 6\n    remaining_cookies = total_cookies - cookies_eaten\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    max_value = 0\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"49{i}{j}\")\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                max_value = max(max_value, number)\n    return max_value\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    total_vehicles = Eq(motorcycles + cars + lorries, 27)\n    total_wheels = Eq(2*motorcycles + 4*cars + 6*lorries, 96)\n    equal_vehicles = Eq(cars, lorries)\n    \n    solutions = solve((total_vehicles, total_wheels, equal_vehicles), (motorcycles, cars, lorries))\n    \n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Formula for the sum of the first n natural numbers\n    sum_n = lambda n: n * (n + 1) // 2\n\n    # Using the identity 1³ + 2³ + ... + n³ = (1 + 2 + ... + n)²\n    n = 100\n    sum_cubes = sum_n(n) ** 2\n    sum_naturals = sum_n(n)\n\n    ans = sum_cubes / sum_naturals\n\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    mass_with_5_chocolates = 185\n    mass_with_17_chocolates = 317\n    \n    mass_of_12_chocolates = mass_with_17_chocolates - mass_with_5_chocolates\n    mass_of_1_chocolate = mass_of_12_chocolates / 12\n    \n    mass_of_10_chocolates = mass_of_1_chocolate * 10\n    mass_of_empty_jar = mass_with_5_chocolates - 5 * mass_of_1_chocolate\n    \n    mass_with_10_chocolates = mass_of_empty_jar + mass_of_10_chocolates\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    # Given values\n    ana_height = 150  # Ana's height in cm\n    \n    # Ana is 116 cm taller than Olaf, which means Olaf's height is (Ana's height - 116 cm)\n    olaf_height = ana_height - 116  # Olaf's height in cm\n    \n    # Kristoff is five and a half times the height of Olaf\n    kristoff_height = 5.5 * olaf_height  # Kristoff's height in cm\n    \n    # The difference in height between Kristoff and Ana\n    height_difference = kristoff_height - ana_height\n    \n    return height_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_mass = 700\n    sugar_concentration = 0.32\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800  # in meters\n    number_of_trees = 21\n\n    # Subtract one from the number of trees because the interval is the space between trees\n    intervals_between_trees = number_of_trees - 1\n    \n    # Calculate the distance between each tree\n    distance_between_trees = total_distance / intervals_between_trees\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    jessica_age_difference = 3\n\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - jessica_age_difference\n\n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of apples as 'a', pears as 'p', and mangoes as 'm'\n    # Let's denote the amount paid for apples as 'cost_a', for pears as 'cost_p', and for mangoes as 'cost_m'\n    a, p, m, cost_a, cost_p, cost_m = symbols('a p m cost_a cost_p cost_m')\n    \n    # The amount paid for the fruits can be expressed as the product of number of fruits and cost per fruit\n    # Given:\n    # John bought 4/5 as many pears as apples => p = 4/5 * a\n    # John bought 2/5 as many mangoes as apples => m = 2/5 * a\n    # Total paid = 150 => cost_a + cost_p + cost_m = 150\n    # The ratio of money spent on apples to pears is 3:2 => cost_a : cost_p = 3:2\n    # The ratio of money spent on pears to mangoes is 1:5 => cost_p : cost_m = 1:5\n    # The cost of each apple is $0.60 => cost_a = 0.60 * a\n    \n    # Translating the above into equations:\n    equation1 = Eq(p, 4/5 * a)\n    equation2 = Eq(m, 2/5 * a)\n    equation3 = Eq(cost_a + cost_p + cost_m, 150)\n    equation4 = Eq(cost_a, 0.60 * a)\n    equation5 = Eq(3 * cost_p, 2 * cost_a) # since cost_a : cost_p = 3:2\n    equation6 = Eq(5 * cost_p, cost_m)     # since cost_p : cost_m = 1:5\n\n    # Now we'll solve these equations for the unknowns\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (a, p, m, cost_a, cost_p, cost_m))\n\n    # Now we'll find the total number of fruits bought\n    total_fruits = solutions[a] + solutions[p] + solutions[m]\n\n    return int(total_fruits)\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_total = 366\n    second_half_average = 65\n    months_in_second_half = 6\n    months_in_year = 12\n\n    second_half_total = second_half_average * months_in_second_half\n    yearly_total = first_half_total + second_half_total\n    yearly_average = yearly_total / months_in_year\n\n    return yearly_average\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_perms = factorial(len(word))\n    for count in letter_counts.values():\n        total_perms //= factorial(count)\n    return total_perms\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # We know the following from the divisibility rules:\n    # Divisible by 2: The last digit must be even\n    # Divisible by 5: The last digit must be 0 or 5\n    # As the last digit should be even and divisible by 5, it must be 0.\n    last_digit = 0\n\n    # Divisible by 3: The sum of all digits must be divisible by 3\n    # Divisible by 11: The difference between the sum of the digits in the odd positions and \n    # the sum of the digits in the even positions is either 0 or a number divisible by 11\n\n    # Initialize the number with last digit as 0 and calculate sum of digits at odd and even positions\n    number = \"1992\" + \"___\" + str(last_digit)\n    sum_digits_odd = 1 + 9 + 2 + 0  # Sum of digits in odd positions (1st, 3rd, 5th, 7th)\n    sum_digits_even = 9 + 9  # Sum of digits in even positions (2nd, 4th)\n\n    # Find the digits for the three blank spaces\n    for digit_1 in range(10):\n        for digit_2 in range(10):\n            # The sum of all digits should be divisible by 3\n            if (sum_digits_odd + digit_1 + digit_2) % 3 == 0:\n                # The difference between the odd and even sums must be divisible by 11\n                if abs((sum_digits_odd + digit_1 + digit_2) - (sum_digits_even + digit_1 + digit_2)) % 11 == 0:\n                    # Construct the full number and check divisibility by 11\n                    full_number = int(\"1992\" + str(digit_1) + str(digit_2) + \"0\")\n                    if full_number % 11 == 0:\n                        return full_number\n                \n    return None\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    number_of_terms = last_term - first_term + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_first_five = 94 * 5\n    total_score_six_assignments = 92 * 6\n    score_sixth_assignment = total_score_six_assignments - total_score_first_five\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    profit_per_pair = selling_price_per_pair - cost_price_per_pair\n    remaining_pairs = 5\n    total_profit = 440\n\n    total_pairs_sold = total_profit // profit_per_pair\n    initial_pairs_purchased = total_pairs_sold + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    duration = end_time - half_time  # This is the duration of the second half of the musical\n    start_time = half_time - duration  # The first half has the same duration\n    \n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let's denote the initial number of cars as x.\n    # According to the problem, 8 cars enter the car park, so we get x + 8.\n    # Then 10 cars exit the car park, thus we have x + 8 - 10.\n    # Now there are 30 cars in the car park, so we set up the equation: x + 8 - 10 = 30.\n    # Solving this equation we get: x = 30 + 10 - 8.\n    \n    x = 30 + 10 - 8\n    return x\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Let the original number be x.\n    # According to the problem statement, the operations on x give us 6.\n    # Working back through the inverse of these operations we have:\n    \n    # Step 1: Multiply by 10 (inverse of divide by 10)\n    step1 = 6 * 10\n    \n    # Step 2: Add 4 (inverse of subtract 4)\n    step2 = step1 + 4\n    \n    # Step 3: Take the square root (inverse of multiply the number by itself)\n    step3 = step2 ** 0.5\n    \n    # Step 4: Multiply by 4 (inverse of divide the result by 4)\n    step4 = step3 * 4\n    \n    # Step 5: Divide by 2 (inverse of multiply it by 2)\n    ans = step4 / 2\n    \n    return ans\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_water = 3\n    days = 0\n\n    while current_water < total_water_needed:\n        days += 1\n        if days > 1:  # From the second day onwards, the pipe fills and pool leaks.\n            current_water += (fill_rate - leak_rate)\n        else:  # On the first day, only 3 liters are filled.\n            current_water += (fill_rate - 3)\n\n    return days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visits = 24\n    ginny_visits = 36\n\n    cycle_days = (amy_visits * ginny_visits) // gcd(amy_visits, ginny_visits)\n\n    return cycle_days\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    digits_written = 0\n\n    while digits_written + len(str(current_number)) <= total_seconds:\n        digits_written += len(str(current_number))\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96,\n    ]\n    smallest = min(amounts)\n    largest = max(amounts)\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Calculate the time Kit started playing\n    end_time = datetime.strptime(\"11:20PM\", \"%I:%M%p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n\n    # Format the time to 12-hour clock format\n    start_time_formatted = start_time.strftime(\"%I:%M%p\")\n    return start_time_formatted.strip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell wants to get at least one green marble.\n    # In the worst case, he will get all the non-green marbles first.\n    # There are 5 blue, 9 white, and 2 black marbles, which are not green.\n\n    blue = 5\n    white = 9\n    black = 2\n\n    # The total number of non-green marbles\n    non_green_marbles = blue + white + black\n\n    # To guarantee he gets a green one, he must take all non-green marbles first\n    # and then one more marble which will be green.\n    draws_for_first_green = non_green_marbles + 1\n\n    return draws_for_first_green\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # 6 metres for the first six days and 2 metres on the seventh day\n    total_days = 7\n    height = 20\n    \n    # Calculate the height the snail slides down during the night\n    slide_down = (total_climbed - height) / (total_days - 1)\n    \n    return slide_down\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_population = 32\n    years = 3\n\n    for _ in range(years):\n        initial_population = 3 * initial_population\n        initial_population = initial_population // 2\n    \n    return initial_population\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Define the time it took for them to meet in minutes\n    # Candy walked for 12 minutes, Ivy walked 6 minutes longer so 18 minutes\n    candy_time = 12\n    ivy_time = candy_time + 6\n    \n    # Assume Candy's walking speed is x meters per minute.\n    # Ivy walked 20 more meters per minute than Candy, so Ivy's speed is x + 20 meters per minute.\n    # Ivy's distance = Ivy's speed * Ivy's time\n    # Candy's distance = Candy's speed * Candy's time\n    # Total distance is the sum of Ivy's and Candy's distances and equals 1200 meters.\n    \n    # Ivy's distance + Candy's distance = 1200\n    # (x + 20) * ivy_time + x * candy_time = 1200\n    \n    # Now solve for x (Candy's speed)\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 20) * ivy_time + x * candy_time, 1200)\n    candy_speed = solve(equation, x)\n    \n    return candy_speed[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # There are 8 players and each player plays with each other player once.\n    # Hence, the total number of games is C(8, 2), which is the number of ways to choose 2 players from 8.\n    # Since the champion wins against every other player, the champion has 7 wins.\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Total mass of the new metal\n    total_mass = 6 + 14  # mg\n\n    # Mass of nickel in the 6 mg metal\n    nickel_mass1 = 6 * (45 / 100)  # mg\n\n    # Mass of nickel in the 14 mg metal\n    nickel_mass2 = 14 * (60 / 100)  # mg\n\n    # Total mass of nickel in the new metal\n    total_nickel_mass = nickel_mass1 + nickel_mass2  # mg\n\n    # Percent concentration of nickel in the new metal\n    percent_concentration_nickel = (total_nickel_mass / total_mass) * 100\n\n    return percent_concentration_nickel\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n\n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # 1cm to 6m ratio\n    plan_length_cm = 5  # playground length on plan in cm\n    real_length_m = plan_length_cm / scale_ratio  # real length in meters\n\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let's denote n = number of students on one side of the first square\n    n = 1\n    while True:\n        if (n * n + 11) + 12 == (n + 1) * (n + 1):  # Check the condition\n            break\n        n += 1\n    \n    num_students = n * n + 11  # Calculate total number of students\n    return num_students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = boys * 30\n    average_apples = 26\n    \n    # Let the number of girls be g.\n    # The total number of apples picked by the girls would then be 20g.\n    # The total number of apples picked by both boys and girls together is boys_apples + 20g.\n    # The total number of students is boys + g.\n    # Since the average number of apples picked by everyone is 26,\n    # (boys_apples + 20g) / (boys + g) = 26.\n    \n    # Solve for g.\n    g = symbols('g')\n    equation = Eq((boys_apples + 20 * g) / (boys + g), average_apples)\n    solution = solve(equation, g)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_tank_a = 673\n    oil_tank_b = oil_tank_a + 56\n\n    return oil_tank_b\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_items + 1):\n        volleyballs = total_items - basketballs\n        if cost_basketball * basketballs + cost_volleyball * volleyballs == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3 / 4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1 / 3)\n    remaining_candy = remaining_after_lily - given_to_brother\n    return int(remaining_candy)\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/j for j in range(1, i)) for i in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money Roy had initially, and y be the amount Dennis had initially.\n    x, y = symbols('x y')\n\n    # We know that the total money is $340, so x + y = 340\n    eq1 = Eq(x + y, 340)\n\n    # After spending, Roy has (1 - 2/3)x left, and Dennis has (1 - 1/4)y left.\n    # Dennis had twice as much money left as Roy: (1 - 1/4)y = 2 * (1 - 2/3)x\n    eq2 = Eq((1 - 1/4) * y, 2 * (1 - 2/3) * x)\n\n    # Solve the two equations to find the values of x and y.\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculate the amount of money Dennis had in the end: (1 - 1/4)y\n    dennis_end_money = (1 - 1/4) * solutions[y]\n\n    return dennis_end_money\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n    saturday = friday + 27\n    sunday = friday - 14\n\n    equation = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve(equation, friday)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    while digits_used < 300:\n        pages += 1\n        digits_used += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of mint candies in each container, which is constant.\n    # Let y be the mass of chocolate candies in each container.\n    # Let m1, m2, m3 be the total mass of the first, second, and third containers respectively.\n\n    x, y, m1, m2, m3 = symbols('x y m1 m2 m3')\n\n    # We have the ratios for strawberry candies, so we can express m1, m2, m3 in terms of x and y.\n    # 1st container: 2/5 of strawberries, so 3/5 is the rest, which is x + y.\n    equation1 = Eq((3/5) * m1, x + y)\n\n    # 2nd container: 2/7 of strawberries, so 5/7 is the rest, which is x + y, since mint is constant.\n    equation2 = Eq((5/7) * m2, x + y)\n\n    # 3rd container: 2/9 of strawberries, so 7/9 is the rest, which is x + y, since mint is constant.\n    equation3 = Eq((7/9) * m3, x + y)\n\n    # The total mass of all containers is 1371g.\n    equation4 = Eq(m1 + m2 + m3, 1371)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, m1, m2, m3))\n\n    # Now we have m1, m2, and m3, extract them from the solutions.\n    m1 = solutions[m1]\n    m2 = solutions[m2]\n    m3 = solutions[m3]\n\n    # Calculate the total mass of strawberry candies from all containers.\n    mass_strawberry = (2/5) * m1 + (2/7) * m2 + (2/9) * m3\n    \n    return mass_strawberry\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    ball_cost = 20.45\n    num_hoops = 6\n\n    total_ball_cost = num_balls * ball_cost\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / num_hoops\n    \n    return round(cost_per_hoop, 2)\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(693)\n    product = 1\n    for factor, power in factors.items():\n        if power % 2 != 0:  # If the power is odd\n            product *= factor  # Multiply by the factor to make the power even\n\n    return product\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Unit digit of powers of 13 cycle every 4 iterations: 3^1 = 3, 3^2 = 9, 3^3 = 7, 3^4 = 1\n    # Thus, 13^242 has the same unit digit as 3^(242 % 4) = 3^2 (since 242 % 4 = 2)\n    unit_digit_13_242 = (3**2) % 10  # unit digit of 13^242\n\n    # Unit digit of powers of 17 cycle every 4 iterations: 7^1 = 7, 7^2 = 9, 7^3 = 3, 7^4 = 1\n    # Thus, 17^379 has the same unit digit as 7^(379 % 4) = 7^3 (since 379 % 4 = 3)\n    unit_digit_17_379 = (7**3) % 10  # unit digit of 17^379\n\n    # Unit digit of powers of 4 cycle every 2 iterations: 4^1 = 4, 4^2 = 6\n    # Since 2012 is even, 4^2012 has the same unit digit as 4^2\n    unit_digit_4_2012 = (4**2) % 10  # unit digit of 4^2012\n\n    # Calculate the unit digit of the entire expression\n    ans = (unit_digit_13_242 + unit_digit_17_379 * unit_digit_4_2012) % 10\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters_initially = 8 * 3\n    total_liters_remaining = total_liters_initially - 9\n    containers_needed = -(-total_liters_remaining // 5)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the number of stickers each person originally had\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # equations based on the problem description\n    equation1 = Eq(marry, 7/5 * alexis)  # Marry had 7/5 as many stickers as Alexis\n    equation2 = Eq(marry - 0.2 * marry, charlotte + 0.2 * charlotte + 20)  # After giving stickers to Charlotte, Marry had 20 more than Charlotte\n    equation3 = Eq(alexis - 0.2 * alexis, charlotte + 0.2 * charlotte)  # After giving stickers to Charlotte, Alexis's amount\n    equation4 = Eq(0.2 * (marry + alexis), 0.8 * charlotte)  # Charlotte's stickers increased by 80%\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    total_kg = 3.5\n    cost_per_kg = 7.50\n    note_value = 20\n\n    total_cost = total_kg * cost_per_kg\n    money_needed = max(total_cost - note_value, 0)\n\n    return money_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position = 12\n\n    position_from_end = total_people - eddie_position + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    # Then 2x is the mass of a heavy bowling ball\n    x = symbols('x')\n\n    # Equation: 6 * x (light balls) + 6 * 2 * x (heavy balls) = 65.7 kg\n    equation = Eq(6 * x + 6 * 2 * x, 65.7)\n    \n    # Solve the equation for x\n    mass_light_ball = solve(equation, x)[0]\n    \n    # Return the mass of a light bowling ball to the nearest kg\n    return round(mass_light_ball)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - calculator_price, clive - racket_price)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be 1-9 for a four-digit number\n        for j in range(0, 10):  # The second digit can be 0-9\n            count += 1  # The last two digits are determined by the first two\n    \n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Computing the average of A, B, and C\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    total_pens = 126\n    factor_difference = 6 + 1  # Jay has 6 times as many as Denise, plus Denise's own share.\n    denise_pens = total_pens // factor_difference\n\n    return denise_pens\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_cost = 1.26\n    total_chocolate_cost = 5 * chocolate_bar_cost\n    cookie_cost = total_chocolate_cost / 6\n    money_initial = 9.05\n    cost_of_cookies = 4 * cookie_cost\n    money_left = money_initial - cost_of_cookies\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    equation2 = Eq(boys + girls, 650)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    # Let the original number of girls be G and the original number of boys be B\n    # After 25 girls went out: Girls inside = G - 25\n    # The number of girls is now 2/3 the number of boys: G - 25 = 2/3 * B\n    # After 15 boys went out: Boys inside = B - 15\n    # Now the number of boys and girls is equal: G - 25 = B - 15\n    # We can set up a system of equations and solve for G and B\n    # G - 25 = 2/3 * B            ...(1)\n    # G - 25 = B - 15             ...(2)\n    # Solve equation (1) for B: B = (G - 25) * 3/2\n    # Substitute B in equation (2): G - 25 = (G - 25) * 3/2 - 15\n    # Rearrange and solve for G: G - 25 = 1.5 * G - 37.5\n    # 0.5 * G = 12.5\n    # G = 25\n    # Then B = (25 - 25) * 3/2 = 0 (which clearly doesn't make sense for the number of boys)\n    # We made an algebraic error, let's correct it:\n    # G - 25 = 1.5 * G - 37.5\n    # 0.5 * G = 12.5\n    # G = 25 (which is the number after the girls went out to play)\n    # Now solve for B using equation (2): 25 = B - 15\n    # B = 40\n    # The total number of students originally was G + B\n    total_students = (25 + 25) + (40 + 15)\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of $0.10 coins\n    # Let y be the number of $0.50 coins\n\n    # The ratio given is 8:3, hence we can say:\n    # x / y = 8 / 3  =>  3x = 8y  =>  x = (8/3) * y\n\n    # The total value from the coins is given as $75.90. Hence:\n    # (0.10 * x) + (0.50 * y) = 75.90\n\n    # Substituting x from the first equation into the second, we get:\n    # (0.10 * (8/3) * y) + (0.50 * y) = 75.90\n\n    # Calculate the total value of $0.50 coins by solving the\n    # equation for y and then finding 0.50 * y\n\n    # Combine terms and solve for y\n    y = (75.90) / ((0.10 * (8/3)) + 0.50)\n    \n    # Now calculate the total value for $0.50 coins\n    total_value_of_50c_coins = 0.50 * y\n    \n    return round(total_value_of_50c_coins, 2)\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for number in range(1, 100):  # Reasonable range to search for the solution\n        if 8 * 11 == number * 9 + 34:\n            return number\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    temp_drop = 12\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_rate = 0.8\n    money_saved = total_spent / (1 - discount_rate) - total_spent\n    return money_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side = 7\n    hole_side = 3\n    prism_volume = 320\n\n    # Calculate the solid volume without the hole\n    base_area = base_side**2\n    hole_area = hole_side**2\n    solid_volume_without_hole = prism_volume + hole_area\n\n    # Calculate the height of the prism\n    height = solid_volume_without_hole / base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # There are 7 units to arrange [6 individuals + (Amy and Judy together as 1 unit)]\n    # Since the arrangement is circular, we fix one unit and arrange the rest, so we have 6! arrangements.\n    units_arrangement = factorial(6)\n\n    # Amy and Judy can switch places within their unit, which gives 2 possible arrangements.\n    amy_judy_arrangement = 2\n    \n    # Multiply the possible arrangements of the units with the possible arrangements between Amy and Judy\n    total_arrangements = units_arrangement * amy_judy_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize variables to count the sequence\n    sequence_sum, n, current_num = 0, 0, 0\n\n    # Run until we reach or surpass the 2008th term\n    while sequence_sum < 2008:\n        n += 1  # Increment the size of the sequence block (1,2,3,4...,n)\n        sequence_sum += n  # Add n to the sequence sum to move to next block\n\n    # Correct for the increment that caused the sequence sum to surpass 2008\n    sequence_sum -= n\n\n    # Find the exact number in the sequence\n    current_num = 2008 - sequence_sum\n\n    return current_num\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    ratio = 3 / 10  # ratio of x's to y's based on balance\n    y_weight = (3 * x_weight) / 10\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    # Let's denote the number of cucumbers as c.\n    # According to the problem, the number of tomatoes is 3 more than 3 times the number of cucumbers.\n    # So we can set up the equation: 27 = 3 + 3 * c\n    \n    # To find the number of cucumbers, we solve for c.\n    c = (tomatoes - 3) / 3\n    return int(c)\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # The 16th term (a16) is 100\n    a16 = 100\n    \n    # The common difference (d) is 6\n    d = 6\n    \n    # We need to calculate the first term (a1)\n    # Using the formula for the nth term of an arithmetic sequence:\n    # a16 = a1 + (16 - 1)*d\n    a1 = a16 - (16 - 1) * d\n\n    # Now we need to find the sum of the first 31 terms\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = (n/2) * (2 * a1 + (n - 1) * d)\n    # Where n is the number of terms\n    n = 31\n    S_n = (n / 2) * (2 * a1 + (n - 1) * d)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris must leave a multiple of 3 (1 or 2 matches)\n    # after his first turn no matter what since there are total 7 matches.\n    # If 1 or 2 are left for Dylan, Chris can take 1 or 2 matches next to leave\n    # none ($7-1-1-1-1-1-1=1$ or $7-1-2-1-1-1=1$ or $7-2-1-1-1-1-1=0$) to ensure his win.\n\n    # The strategy for Chris is to take away matches such that the remaining\n    # number of matches is a multiple of 3 after his first turn.\n    # Since Dylan can only take away 1 or 2 matches on his turn,\n    # he will never be able to leave Chris in a position where Chris could lose.\n\n    # Chris must figure out how many matches to take to make the remaining number a multiple of 3.\n    # Starting with 7, the next multiple of 3 is 6.\n    # To get to 6, Chris must take away 1 match on his first turn.\n    matches_to_remove = 7 % 3\n\n    return matches_to_remove\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "import itertools\n\ndef solution():\n    for A, B, C in itertools.permutations(range(10), 3):\n        if A != 0:\n            return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        ABAC = A * 1001 + B * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n\n        if ABAC + DBEC == ACEDC and A != 0 and D != 0:\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to total minutes past midnight\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to total minutes past midnight (Note: 1pm is 13:00 in 24-hour format)\n\n    ans = afternoon_time - morning_time  # Calculate the difference in minutes\n    \n    return ans\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assume there are \"n\" restaurants.\n    # Choosing 1 from \"n\" is just \"n\" ways.\n    n = 10  # Replace with the actual number of restaurants if it's given.\n    # Number of choices is equal to the number of restaurants.\n    return n\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(1, 10)) - 1\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases, and 5 erasers for $50\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n\n    # A notebook and a pencil case cost $6\n    equation2 = Eq(notebook + pencil_case, 6)\n\n    # A pencil case and an eraser cost $8\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    sum = 0\n    for i in range(0, 8):\n        sum += (53 - 3 * i) - (50 - 3 * i)\n    return sum\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, E, _, _ = perm\n        if A == 0:  # A cannot be zero as it is the most significant digit\n            continue\n        num = A*1001 + E*110  # Construct the number AEEA\n        sqrt_num = int(num**0.5)\n        if sqrt_num*sqrt_num == num:\n            return num\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    family_members = 4\n    avg_age = 25\n    total_age = family_members * avg_age\n\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n\n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Define the height options in meters\n    options_in_meters = [83, 200 / 100, 8 / 100, 1/2]\n\n    # Assume a standard classroom door height around 2 meters or 200 centimeters\n    standard_door_height = 2  # in meters\n\n    # Calculate the closest measurement to the standard door height\n    closest_height = min(options_in_meters, key=lambda x: abs(x - standard_door_height))\n\n    # The result should be the one closest to 2 meters, which is 200 cm or 2 m. Convert to the asked unit if necessary.\n    if closest_height == 200 / 100:\n        ans = \"200 cm\"  # This is the correct height, because closest_height in meters is 2.0 meters which is 200 centimeters.\n    elif closest_height == 83:\n        ans = \"83 m\"\n    elif closest_height == 8 / 100:\n        ans = \"8 cm\"\n    elif closest_height == 1 / 2:\n        ans = \"1/2 m\"\n    \n    return ans\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 450\n    current_page = 1\n    used_digits = 0\n\n    while used_digits < total_digits:\n        used_digits += digits_per_page\n        if current_page == 9 or current_page == 99:\n            digits_per_page += 1\n        current_page += 1\n        \n    # Subtract 1 because we add 1 in the last iteration of the loop\n    return current_page - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n    lunch_cost = initial_amount * (5/12)\n    remaining_after_lunch = initial_amount - lunch_cost\n    dinner_cost = remaining_after_lunch * (2/7)\n    remaining_after_dinner = remaining_after_lunch - dinner_cost\n\n    # Create equation for remaining amount after dinner\n    equation = Eq(remaining_after_dinner, 45)\n\n    # Solve the equation for the initial amount\n    solution = solve(equation, initial_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 1 # start with pages having 1-digit numbers\n    pages_count = 0\n    digit_sum = 0\n\n    while True:\n        pages_with_current_digits = 9 * (10 ** (digits_per_page - 1))  # calculate number of pages contributing 'digits_per_page' digits\n        if digit_sum + digits_per_page * pages_with_current_digits < 1524:\n            digit_sum += digits_per_page * pages_with_current_digits\n            pages_count += pages_with_current_digits\n            digits_per_page += 1\n        else:\n            remaining_digits = 1524 - digit_sum\n            pages_count += -(-remaining_digits // digits_per_page) # ceiling division to count all pages including those not completely filled with digits\n            break\n\n    return pages_count\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Each pair is a unique game\n    wins_by_others = 2 + 1 + 4 + 3  # Wins by Lily, Eva, Tina, and Emma\n    gina_wins = total_games - wins_by_others  # Remaining games are won by Gina\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n\n    return 2 * (largest - smallest)\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Given values\n    angle = 20  # incline angle in degrees\n    d = 400  # distance in meters\n    mu_k = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity in m/s^2\n    \n    # Convert angle to radians for calculation\n    angle_rad = math.radians(angle)\n    \n    # Calculate the acceleration component along the slope\n    a = g * math.sin(angle_rad) - mu_k * g * math.cos(angle_rad)\n    \n    # Using kinematic equation v^2 = u^2 + 2ad, where u(initial velocity) = 0\n    v_final_sqr = 2 * a * d\n\n    # Calculate the final speed, v = sqrt(v^2)\n    v_final = math.sqrt(v_final_sqr)\n    \n    return v_final\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    point_diff = 15\n    points_per_correct = 10\n    points_per_wrong = -5\n    total_questions = 10\n\n    # Let x be the number of questions Avril answered correctly.\n    # Let y be the number of questions Eddie answered correctly.\n\n    # Avril's points: 10 * x + 5 * (10 - x)\n    # Eddie's points: 10 * y + 5 * (10 - y)\n\n    # Avril's points + Eddie's points = 155\n    # Eddie's points - Avril's points = 15\n\n    # From both equations we get:\n    # (10 * x + 5 * (10 - x)) + (10 * y + 5 * (10 - y)) = 155\n    # (10 * y + 5 * (10 - y)) - (10 * x + 5 * (10 - x)) = 15\n\n    # Simplifying the equations:\n    # 10 * x - 5 * x + 50 + 10 * y - 5 * y + 50 = 155\n    # 10 * y - 5 * y + 50 - 10 * x + 5 * x - 50 = 15\n\n    # Further simplification:\n    # 5 * x + 5 * y + 100 = 155\n    # 5 * y - 5 * x = 15\n\n    # Finally:\n    # x + y + 20 = 31 => x + y = 11\n    # y - x = 3\n\n    # Solving the system of equations:\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11)\n    equation2 = Eq(y - x, 3)\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n\n    # Marcus' workings assume 1 bag per shirt, but the question states 1 bag per 4 shirts\n\n    # Total price for one group (4 shirts and 1 bag)\n    group_price = (4 * shirt_price) + bag_price\n    \n    # Number of groups she could buy with $300\n    num_groups = total_spent // group_price\n    \n    # Number of shirts she bought (4 shirts per group)\n    shirts_bought = num_groups * 4\n\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Rate of work for men and women\n    men_rate = 1 / (6 * 5)   # One man's work rate per day\n    women_rate = 1 / (5 * 6) # One woman's work rate per day\n\n    # Combined rate for 10 men and 5 women\n    combined_rate = (10 * men_rate) + (5 * women_rate)\n    \n    # Total time to complete the job with the combined rate\n    total_time = 1 / combined_rate\n    \n    return total_time\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original situation: 3 times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    \n    # After the changes: 12 boys leave, 20 girls join, boys and girls are equal\n    equation2 = Eq(boys - 12, girls + 20)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the coffee beans\n    weight_a = 56\n    weight_b = 96\n    weight_c = 120\n\n    # Greatest Common Divisor Function\n    def find_gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    # Finding the greatest common divisor for all three weights\n    gcd_ab = find_gcd(weight_a, weight_b)\n    gcd_abc = find_gcd(gcd_ab, weight_c)\n    \n    return gcd_abc\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors_sum = sum(i for i in range(1, n+1) if n % i == 0)\n    return factors_sum\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Initial number of apples to give away, ensuring each child gets at least one\n    remaining_apples = 30 - 6  # since there are 6 children and each needs at least one apple\n    \n    # Number of children minus the one who will get the most.\n    remaining_children = 5\n\n    # Distributing the remaining apples equally to get the minimum for the child who gets the most\n    # as we need to ensure that the rest can get at least 1 apple.\n    # Since we are looking for the smallest number possible for the kid who gets the most,\n    # we distribute the remaining as evenly as possible among the others\n    apples_for_rest = remaining_apples // remaining_children\n\n    # The child who gets the most will get the remaining apples plus the one apple everyone gets guaranteed\n    apples_for_most = (remaining_apples - apples_for_rest * remaining_children) + 1\n\n    return apples_for_most\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n    \n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short_ribbon_length_cm = 40\n    may_long_ribbon_length_cm = 70\n\n    may_short_ribbon_count = 7\n    nancy_long_ribbon_count = 18\n    \n    # Convert May's extra length in meters to centimeters\n    extra_length_cm = 2.4 * 100\n\n    # Define the total length of Nancy's ribbons\n    nancy_total_length_cm = nancy_long_ribbon_count * may_long_ribbon_length_cm\n\n    # Calculate the total length of May's ribbons, knowing it is 2.4 m longer than Nancy's\n    may_total_length_cm = nancy_total_length_cm + extra_length_cm\n\n    # Now calculate how many long ribbons May has using her total length\n    # Subtract the length of all short ribbons from the total to find the length of all long ribbons\n    may_long_ribbon_length_total_cm = may_total_length_cm - (may_short_ribbon_count * may_short_ribbon_length_cm)\n\n    # Now find the count of long ribbons by dividing the total length of long ribbons by the length of one long ribbon\n    may_long_ribbon_count = may_long_ribbon_length_total_cm / may_long_ribbon_length_cm\n\n    # The total count of May's ribbons is the sum of her long and short ribbons\n    may_total_ribbon_count = may_short_ribbon_count + may_long_ribbon_count\n\n    return int(may_total_ribbon_count)\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assume all animals are chickens at first (2 legs each)\n    total_legs = 34\n    total_animals = 12\n    chicken_legs = 2\n\n    # Therefore, we have this number of legs if all are chickens\n    all_chickens_legs = chicken_legs * total_animals\n\n    # The difference in the number of legs comes from rabbits (since they have 2 extra legs than chickens)\n    extra_legs_needed = total_legs - all_chickens_legs\n    \n    # Each rabbit has 4 legs, but we have already counted 2 legs for each as chickens\n    # So we only need to count the extra 2 legs that rabbits have over chickens\n    rabbits_extra_legs = 2\n\n    # Therefore, the number of rabbits can be found by dividing the extra legs by the difference between rabbit legs and chicken legs\n    number_of_rabbits = extra_legs_needed / rabbits_extra_legs\n\n    return int(number_of_rabbits)\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    solution_weight = sugar + water\n    concentration = (sugar / solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    return 2.4 * 0.52 + 7.6 * 0.52\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for i in range(99, 9, -1):\n        if (i % 4 == 3) and (i % 5 == 3):\n            return i\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_quantity = 1 # 1 Litre of Purple Fire paint\n    ratio_red = 3\n    ratio_blue = 1\n    total_ratio = ratio_red + ratio_blue\n    red_paint = (total_quantity * ratio_red) / total_ratio\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Number of books in bookshelves A and B\n\n    # If A gives B 40 books, they have the same number of books\n    equation1 = Eq(A - 40, B + 40)\n\n    # If B gives A 40 books, A has 3 times the books B has\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    # Total sum of numbers is mean multiplied by number of values\n    total_sum = 6 * 8\n    # Sum of known numbers\n    known_sum = 9 + 7 + 5 + 8 + 4 + 1 + 8\n    # The missing number is the difference\n    missing_number = total_sum - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    ben_money = 68\n    sister_share = ben_money * (1/4)\n    ben_left = ben_money - sister_share\n    return ben_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, blue = symbols('red blue')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(red + blue, 18)\n\n    solutions = solve((equation1, equation2), (red, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # 8 cows for 10 days\n    total_feed_8_cows_10_days = 8 * 10\n    \n    # 4 cows for 15 days\n    total_feed_4_cows_15_days = 4 * 15\n    \n    # Total amount of feed is the same in both scenarios\n    # thus, 8 cows * 10 days = 4 cows * 15 days\n    # Therefore, we can find out how many cows can be fed for 5 days\n    # Let x be the number of cows that can be fed for 5 days\n    # Then x * 5 days should equal the total feed available\n    total_feed_available = total_feed_8_cows_10_days # Which is equal to total_feed_4_cows_15_days\n    \n    # Solve for x:\n    x = total_feed_available / 5\n    \n    return x\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_per_packet = 1.02 / 12\n    total_mass = mass_per_packet * 4\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    cost_of_tapes = 3 * 9  # cost for 3 tapes at £9 each\n    cost_of_cds = 83 - cost_of_tapes  # total cost minus the cost of tapes gives cost for 4 CDs\n    cost_per_cd = cost_of_cds / 4  # since there are 4 identical CDs, divide by 4 to find the cost per CD\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    wrong_result = 99.396\n    divisor_with_decimal = 1.22\n    divisor_without_decimal = 122\n    \n    true_result = wrong_result / (1 - (1/divisor_without_decimal))\n    \n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let H be the number of cards Hisham had\n    # Melissa had twice as many cards as Hisham, so she had 2H\n    # H + 2H = 876\n    # 3H = 876\n    # H = 876 / 3\n\n    # Find the number of cards Hisham had\n    H = total_cards / 3\n\n    # Melissa had two times more cards than Hisham\n    M = 2 * H\n\n    # Number of cards Melissa should give Hisham\n    # to make the number of cards equal would be\n    # (M - H) / 2\n    cards_to_give = (M - H) / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # The problem can be translated to finding the least maximum number when\n    # all 8 numbers are distinct and sum up to 50. Start by giving 1 apple to\n    # each child as the minimum possible, which takes away 8 apples. Now we need\n    # to distribute the remaining 42 apples ensuring each child has a different amount.\n    \n    # To minimize the maximum number for the child with the most apples, we need\n    # to distribute the apples as evenly as possible, starting from 1.\n    # We thus start the count for each child at 1, 2, 3, ..., which means:\n    # 1+2+3+...+8 (the minimum amount needed to keep each amount distinct)\n    # This sum can be calculated using the formula for the sum of the first n\n    # natural numbers: n*(n+1) / 2\n    \n    # The sum for 8 children would be:\n    sum_for_distinct = 8 * (8 + 1) // 2\n\n    # Remaining apples after giving the minimum distinct amount to each:\n    remaining_apples = 50 - sum_for_distinct\n\n    # We then distribute the remaining apples starting from the child with the most,\n    # moving down to the child with the least, in rounds until we run out:\n    # Since the list 1..8 is an arithmetic sequence with a difference of 1,\n    # we can distribute 1 apple to each of the last 7 children (except the first one)\n    # The child with the most will not take part in these rounds initially.\n    # After the rounds complete once (7 rounds), we will include the first child\n    # in the next round of distributions.\n    rounds = remaining_apples // 7\n    \n    # Add the rounds to the initial maximum child's apples (so far the\n    # distribution was from 1 to 8; the 8th child is the one with the most):\n    max_apples = 8 + rounds\n\n    # We may have some remaining apples after the full rounds that we need \n    # to distribute to the top few children, starting from the most:\n    remaining_after_rounds = remaining_apples % 7\n\n    # If there are any remaining apples after the rounds, they should be added to\n    # the maximum (as the first child will take these apples as well):\n    if remaining_after_rounds >= 1:\n        max_apples += 1\n\n    return max_apples\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b, c, d, e, f = symbols('a b c d e f')\n    \n    eq1 = Eq(d, a + b)  # Third number is sum of first two\n    eq2 = Eq(e, b + d)  # Fourth number is sum of second and third (6 in this case)\n    eq3 = Eq(f, d + e)  # Fifth number is sum of third and fourth\n    eq4 = Eq(d, 6)      # Given fourth number\n    eq5 = Eq(f, 15)     # Given sixth number\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5), (a, b, c, d, e, f))\n    a_value = solutions[a]\n    b_value = solutions[b]\n\n    # The seventh number is the sum of fifth (which is f) and sixth (which is 15)\n    seventh_number = solutions[f] + 15\n\n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number Tasha thought of\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq(3 * x + 8, 35)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n    \n    return greatest_common_divisor\n    \nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    liters = 1.7\n    millilitres_per_liter = 1000\n    n = liters * millilitres_per_liter\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (sum(1 / ((5 * i + 1) * (5 * i + 6)) for i in range(7)))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    odd_combinations = [int(''.join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 != 0]\n    return min(odd_combinations)\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # One man's work per day\n    man_work_per_day = 1 / (24 * 16)\n    \n    # One woman's work per day\n    woman_work_per_day = 1 / (16 * 24)\n    \n    # Work per day for 10 men and 6 women\n    total_work_per_day = 10 * man_work_per_day + 6 * woman_work_per_day\n    \n    # Total days needed\n    total_days = 1 / total_work_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    num_rectangles = 4\n    \n    # Calculate the regions following the sequence for rectangles:\n    # Rn = n(n+1)/2 + 1\n    # where n is the number of rectangles\n    ans = num_rectangles * (num_rectangles + 1) // 2 + 1\n\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    ways_total = factorial(total_people)  # Total number of ways to arrange 5 people\n    ways_middle = factorial(total_people - 1)  # Eddie is fixed in the middle position\n    \n    # Subtracting the arrangements where Eddie is in the middle from the total arrangements\n    ans = ways_total - ways_middle\n    return ans\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Since the sequence is a geometric sequence,\n    # we can find the common ratio by dividing the terms.\n    ratio = 24 / 96\n\n    # Applying the common ratio to find the missing number n.\n    n = 96 * ratio\n\n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n     from sympy import symbols, Eq, solve\n\n     initial_amount = symbols('initial_amount')\n     spent_on_watch = initial_amount / 3\n     spent_on_tie = 56\n     remaining_amount = 3 * initial_amount / 8\n\n     equation = Eq(spent_on_watch + spent_on_tie + remaining_amount, initial_amount)\n\n     total_spent = solve(equation, initial_amount)\n\n     ans = spent_on_watch + spent_on_tie  # How much Hamid spent altogether\n     return ans.subs(initial_amount, total_spent[0])\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3    # Eddie's speed in m/s\n    train_speed = 57    # Train's speed in m/s\n    time = 10           # Time for the train to pass Eddie in seconds\n    \n    # The relative speed at which the train approaches Eddie\n    relative_speed = train_speed + eddie_speed\n    \n    # The length of the train can be found by multiplying the relative speed with the time\n    train_length = relative_speed * time\n    \n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Creating the congruence system as tuples: (remainder, modulo)\n    congruences = [(1, 5), (2, 7), (3, 9)]\n\n    # Solve the congruence system\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    for ops in product(['+', '*'], repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_marks = 8\n    incorrect_deduction = -3\n    total_questions = 12\n\n    # Let x be the number of correct answers\n    for x in range(total_questions + 1):\n        incorrect_ans = total_questions - x\n        # The total marks is calculated by the number of correct answers times \n        # the marks awarded for correct answers plus the number of incorrect \n        # answers times the deduction for incorrect answers.\n        if (x * correct_marks) + (incorrect_ans * incorrect_deduction) == total_marks:\n            return x\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900  # length of train + length of bridge\n    speed = 400  # speed in meters per minute\n    time = total_distance / speed  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Number of terms\n    n = 60\n\n    # Sum of the first 5 terms of the arithmetic sequence\n    S_first_5 = 10\n    # Sum of the last 5 terms of the arithmetic sequence\n    S_last_5 = 120\n\n    # Average of the first 5 terms\n    average_first_5 = S_first_5 / 5\n    # Average of the last 5 terms\n    average_last_5 = S_last_5 / 5\n    \n    # Since they are equally spaced, the average of the averages will be the average of the sequence\n    average_sequence = (average_first_5 + average_last_5) / 2\n    \n    # Sum of all the terms is average times the number of terms\n    total_sum = average_sequence * n\n    \n    return total_sum\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3\n    return b\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # p = initial number of stickers Peter had\n    # s = initial number of stickers Sam had\n\n    p, s = symbols('p s')\n\n    # Sam had 40 stickers more than Peter\n    eq1 = Eq(s, p + 40)\n\n    # After trading, Sam has 96 stickers more than Peter\n    # Sam trades 20% of his stickers to Peter\n    # Peter trades 25% of his stickers to Sam\n    # New Sam's stickers = s - 20% of s + 25% of p\n    # New Peter's stickers = p + 20% of s - 25% of p\n    eq2 = Eq(s - 0.20 * s + 0.25 * p, p + 0.20 * s - 0.25 * p + 96)\n\n    # Now we solve these two equations to find the initial number of stickers\n    solutions = solve((eq1, eq2), (p, s))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # current ages\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    # we just need to iterate until Peter's age is the sum of his sons' ages\n    while True:\n        # Sum of sons' ages\n        sum_sons = pip_age + pit_age\n        \n        # When Peter's age equals sum of sons' ages\n        if peter_age == sum_sons:\n            break\n        \n        # Increment all ages by 1 for the next year\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_n = sum(range(1, n+1))\n    ans = sum_n**2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 / 6\n    return int(ans)\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers, so we consider them as pigeonholes\n    # Drawing one card from each number ensures no consecutive numbers (13 cards)\n    # Drawing one more card ensures at least one consecutive number pair due to the Pigeonhole Principle\n    num_cards_to_draw = 13 + 1\n    return num_cards_to_draw\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    dividend = 296\n    divisor = 8\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for Hazel's current age and her mom's current age\n    h_current, m_current = symbols('h_current m_current')\n\n    # define equations based on the problem statement\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(h_current + 12, 3 * h_current)\n    # On Hazel's 18th birthday, her mom will be three times her age\n    # At that time, Hazel's age = Hazel's current age + (18 - Hazel's current age)\n    # Mom's age at that time = Mom's current age + (18 - Hazel's current age)\n    equation2 = Eq(m_current + (18 - h_current), 3 * (h_current + (18 - h_current)))\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (h_current, m_current))\n\n    # Hazel's mom's current age is what we need\n    m_current_age = solution[m_current]\n    \n    return m_current_age\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    ans = 10 * 2\n    return ans\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    total_seats = (num_terms * (first_term + last_term)) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 130):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    total_sheets = 36 // 2  # Since each sheet has a front and back page.\n    fifth_sheet = total_sheets - 4  # Counting from the last sheet, which is the 18th.\n\n    # The pages on the fifth sheet are:\n    # (fifth_sheet * 2 - 1) which is the left page when opened and viewed from front side\n    # (fifth_sheet * 2) which is the right page when opened and viewed from front side\n    # (total_sheets - fifth_sheet) * 2 + 1 which is the right page when opened and viewed from back side\n    # (total_sheets - fifth_sheet) * 2 + 2 which is the left page when opened and viewed from back side\n    \n    left_page_front = fifth_sheet * 2 - 1\n    right_page_front = fifth_sheet * 2\n    right_page_back = (total_sheets - fifth_sheet) * 2 + 1\n    left_page_back = (total_sheets - fifth_sheet) * 2 + 2\n\n    # Sum of page numbers on the fifth sheet\n    sum_of_pages = left_page_front + right_page_front + right_page_back + left_page_back\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of laptops (x) and the original cost per laptop (c)\n    x, c = symbols('x c')\n    \n    # Original total profit\n    original_profit = 60000\n    \n    # Selling price per laptop\n    selling_price = 2000\n    \n    # The profit when the cost price decreases by 1/5\n    new_profit = original_profit * 1.3\n    \n    # Original cost price equation\n    equation1 = Eq(x * selling_price - x * c, original_profit)\n    \n    # New cost price equation when cost decreases by 1/5\n    equation2 = Eq(x * selling_price - x * (c - c / 5), new_profit)\n    \n    # Solve the system of equations for x and c\n    solutions = solve((equation1, equation2), (x, c))\n    \n    # Extract the solution for the number of laptops (x)\n    number_of_laptops = solutions[x]\n    \n    return number_of_laptops\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    boys = 0\n    girls = 0\n    layer = 0\n\n    while True:\n        boys_layer = (layer * 2 + 1)**2\n        girls_layer = (layer * 2)**2 if layer > 0 else 0\n\n        new_boys = boys_layer - girls_layer\n        new_girls = girls_layer - ((layer - 1) * 2)**2 if layer > 1 else girls_layer\n\n        if new_boys - new_girls == 36 and layer > 0:\n            total_students = boys_layer\n            boys += new_boys\n            girls += new_girls\n            break\n        else:\n            boys += new_boys\n            girls += new_girls\n            layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Work rate of three men to dig 120 metres in two days\n    rate_three_men = 120 / (3 * 2)\n\n    # Work rate of one man to dig x metres in one day\n    rate_one_man = rate_three_men / 3\n\n    # Total required work for 880 metres\n    total_work = 880\n\n    # Time taken by four men to complete the total work\n    time_four_men = total_work / (4 * rate_one_man)\n\n    return time_four_men\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    M = symbols('M', integer=True)\n    a = symbols('a', integer=True)\n\n    # Define the equations based on the remainders forming an arithmetic sequence\n    # r is the common difference in the arithmetic sequence\n    r = symbols('r', integer=True)\n    eq1 = Eq(M % 7, r)\n    eq2 = Eq(M % 9, 2 * r)\n    eq3 = Eq(M % a, 3 * r)\n    eq4 = Eq(M % 28, 4 * r)\n    \n    # Additional constraints based on the problem\n    eq5 = Eq(a % 7, 0)  # a must be a multiple of 7 since 7 divides both a and 28\n    eq6 = Eq(a % 9, 0)  # a must be a multiple of 9 since 9 and 28 both leave the same remainder for M\n    \n    # We also know 7*r < 7, 9*r < 9, and 28*r < 28 since they are remainders\n    eq7 = Eq(7 * r < 7, True)\n    eq8 = Eq(9 * r < 9, True)\n    eq9 = Eq(28 * r < 28, True)\n\n    # Now we solve the system of equations.\n    # We are looking for the smallest positive integer M, so we will loop through possible values of r\n    for common_diff in range(1, 7):\n        solutions = solve((eq1, eq2, eq4, eq5, eq6, eq7.subs(r, common_diff), eq8.subs(r, common_diff), eq9.subs(r, common_diff)), (M, a, r))\n        if solutions:\n            smallest_M = min( M_val for (M_val, a_val) in solutions if M_val.is_positive and a_val.is_positive )\n            return smallest_M\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    ellie_rate = 60\n    total_people = 400\n    total_weeks_together = 4\n\n    # Total work done by Ellie when working together\n    ellie_work = ellie_rate * total_weeks_together\n    \n    # Remaining work Gloria needs to do\n    gloria_work = total_people - ellie_work\n\n    # Gloria's rate per week\n    gloria_rate = gloria_work / total_weeks_together\n\n    # Time taken for Gloria to do the whole work alone\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    ans = (2/5) * 15\n    return ans\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books to move from the first shelf to the second shelf\n    x = symbols('x')\n\n    # After x books are moved, the first shelf will have (18 - x) books\n    # and the second shelf will have (24 + x) books\n    # The second shelf should have twice as many books as the first shelf\n    equation = Eq((24 + x), 2 * (18 - x))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # convert mixed numbers to improper fractions\n    num1 = 285 * 7 + 6\n    num2 = 181 * 11 + 10\n    num3 = 153 * 13 + 12\n\n    # calculate the sum of numerators\n    numerator_sum = (num1 / 7) + (num2 / 11) + (num3 / 13)\n\n    # calculate the sum of denominators\n    denominator_sum = (1 / 7) + (1 / 11) + (1 / 13)\n\n    # divide the sums to get the final result\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils\n    # The number of pupils in the band is known, which is 5\n    # The fraction of pupils not in band or choir is 2/9, so the part in band or choir is 1 - 2/9 = 7/9\n    # 5 pupils are in the band, so the remaining are in the choir, which is 3/4 of the remaining pupils\n    # We can create an equation:\n    # (5 / x) + (3/4)(1 - (5 / x)) = 7/9\n    # Now solve for x\n\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (5 / x) + (3/4) * (1 - (5 / x)) - (7/9)\n    solution = solve(equation, x)\n\n    # Since the number of pupils has to be a positive integer, we will select the appropriate solution\n    return int(max(solution))\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_last_box_7 = 3\n\n    # Start with the number of lollipops left over when using 4 per box\n    lollipops = lollipops_left_4\n\n    # Increase the total number of lollipops until it fits the condition \n    # for both packing scenarios\n    while (lollipops - lollipops_last_box_7) % 7 != 0 or (lollipops - lollipops_left_4) % 4 != 0:\n        lollipops += 4\n\n    return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    long_tubes, short_tubes = symbols('long_tubes short_tubes', integer=True)\n\n    equation = Eq(8 * long_tubes + 5 * short_tubes, 47)\n\n    # We are only interested in the number of long tubes, so we create a range for short_tubes\n    # considering the problem context where the number of balls and tubes should be non-negative integers.\n    solutions = [solve(equation.subs(short_tubes, i), long_tubes) for i in range(10)]\n    # Find the solution where the number of long_tubes is an integer\n    valid_solutions = [s[0] for s in solutions if s and s[0].is_Integer]\n\n    return valid_solutions[0] if valid_solutions else None\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    difference = (ninth_term - third_term) / (9 - 3)\n    \n    eleventh_term = third_term + (n - 3) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    total = 0\n    for i in [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]:\n        total += i**3\n    return total\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the other number in the multiplication\n    # 4.32 without decimal is 432\n    # if 432 * x = 2138.4 + (4.32 * x) then we can solve for x\n    # 432 * x - 4.32 * x = 2138.4\n    # (432 - 4.32) * x = 2138.4\n    # 427.68 * x = 2138.4\n    x = 2138.4 / 427.68\n    \n    # Now we calculate the true result with the correct decimal point\n    true_result = 4.32 * x\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    differences = [2758 - 2017, 3670 - 2017]\n    gcd_result = differences[0]\n    for num in differences[1:]:\n        gcd_result = math.gcd(gcd_result, num)\n    \n    A_values = set()\n    for i in range(2, math.isqrt(gcd_result) + 1):\n        if gcd_result % i == 0:\n            A_values.add(i)\n            A_values.add(gcd_result // i)\n            \n    return sum(A_values)\n\nimport math\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    total_sum = 9 + 99 + 999 + 9999\n    return total_sum\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    boys, girls = symbols('boys girls')\n\n    # Each boy gets 5 candies, each girl gets 3 candies\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    \n    # There are 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of children is the sum of boys and girls\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    felicia_initial = symbols('felicia_initial')  # The initial number of bracelets Felicia had\n    janice_initial = 96  # The initial number of bracelets Janice had\n\n    # Felicia sells 3/5 of her bracelets\n    felicia_sold = 3/5 * felicia_initial\n    \n    # Janice buys 2/5 of the bracelets Felicia sold\n    janice_bought = 2/5 * felicia_sold\n\n    # After selling and buying, the ratio of Felicia's to Janice's bracelets is 5:7\n    # Felicia now has felicia_initial - felicia_sold\n    # Janice now has janice_initial + janice_bought\n    equation = Eq((felicia_initial - felicia_sold) / (janice_initial + janice_bought), 5/7)\n    \n    # Now we solve for the initial number of bracelets Felicia had\n    felicia_initial_count = solve(equation, felicia_initial)[0]\n    \n    # Calculate how many bracelets Janice bought\n    janice_bought_count = janice_bought.subs(felicia_initial, felicia_initial_count)\n    return janice_bought_count\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n\n    # Original ratio of milk to fruit candies is 7:9\n    equation1 = Eq(milk / fruit, 7/9)\n    \n    # After eating 8 milk candies, the ratio becomes 2:3\n    equation2 = Eq((milk - 8) / fruit, 2/3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (milk, fruit))\n    \n    # Return the number of milk candies in the beginning\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    for B in range(1, 3*5):  # Reasonable starting point, since we're looking for the smallest B\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    # mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # years between 2008 and 1996\n    years_between = 2008 - 1996\n    \n    # mum's birth year\n    mum_birth_year = 1996 - mum_age_1996\n    \n    # grandmother's age when mum was born\n    grandmother_age_when_mum_born = grandmother_age_2008 - (years_between + mum_age_1996)\n    \n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i):\n            if str(i)[-1] == '3':\n                ans = count\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_income = 2012\n    price_lemonade = 4\n    price_plus = 7\n    total_bottles = 350\n    \n    min_plus = 0  # Initially, assume no bottles of \"1000 Plus\" are sold.\n    \n    # As per the problem, we need minimum \"1000 Plus\" bottles,\n    # so we start checking from minimum to maximum possible bottles.\n    \n    for plus_bottles in range(total_bottles + 1):\n        # Calculate the remaining income after selling \"1000 Plus\" bottles.\n        remaining_income = total_income - (price_plus * plus_bottles)\n        # If the remaining income is divisible by the price of lemonade\n        # and the division is less or equal to the remaining bottles,\n        # then we have a valid scenario. Exit loop once such a scenario is found.\n        if remaining_income >= 0 and remaining_income % price_lemonade == 0 and \\\n           remaining_income // price_lemonade <= (total_bottles - plus_bottles):\n            min_plus = plus_bottles\n            break  # Found the minimum \"1000 Plus\" so break loop.\n\n    return min_plus\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initially = 60\n    apples_per_friend_initially = 4\n    friends_count = apples_initially // apples_per_friend_initially\n    apples_each_friend_asks_for = apples_per_friend_initially + 1\n    total_apples_needed = friends_count * apples_each_friend_asks_for\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # He could take out all red and black socks without getting a pair of white socks.\n    # That's 10 red + 10 black = 20 socks.\n    # Then he takes out one white sock - he still doesn't have a pair.\n    # The next sock he takes out must be white to make a pair.\n    # So he must take out at most 20 + 1 + 1 = 22 socks to guarantee a pair of white socks.\n    return 22\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n    for groups_of_6 in range(total_groups + 1):\n        groups_of_4 = total_groups - groups_of_6\n        if 6 * groups_of_6 + 4 * groups_of_4 == total_students:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # The sum of the first three numbers\n    sum_first_three = 3 * 60\n\n    # The sum of all four numbers\n    sum_all_four = 4 * 90\n\n    # The fourth number is the difference between the sums\n    fourth_number = sum_all_four - sum_first_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters = meters * 100\n    return centimeters\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since A,B,C are different and they are digits, they can range from 0 to 9\n    # Also, ABC becomes a 3-digit number when A is not 0.\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and B != C and A != C:\n                    # Create 3-digit number from digits\n                    ABC = 100 * A + 10 * B + C\n                    # Check if the condition for ABC is met\n                    if ABC == (10 * A + B) + (10 * A + C) + (10 * B + A) + (10 * B + C) + (10 * C + A) + (10 * C + B):\n                        return ABC\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = 3 * 1.60 + 2 * 0.62 + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # Let x be the original price of the purse before the discount\n    # Let y be the total discount for the purse\n    # The discount for the handbag is 20% of its original price,\n    # So, the original price of the handbag is 428 / (1 - 20%)\n    original_price_handbag = 428 / 0.8\n    \n    # Total discount for both is 121, and we already know the discount for the handbag\n    discount_handbag = original_price_handbag * 0.2\n    # Therefore, the total discount for the purse is 121 minus the discount for the handbag\n    y = 121 - discount_handbag\n    \n    # The price of the purse before the discount is the discounted price divided by (1 - 28%)\n    # y is 28% of the original price of the purse\n    original_price_purse = y / 0.28\n    \n    return original_price_purse\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    i = 5\n    while n >= i:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Since there are two digits in the recurring pattern, it will be ABABAB...\n    # The sum for one cycle of the pattern is A + 2, where A is the first digit \n    # and 2 is the second digit in the recurring decimal. The sum of the first 20 digits\n    # implies there are 10 cycles for the pattern as each cycle is of 2 digits.\n    \n    # Let's set up an equation based on this information given.\n    # 10 cycles * (A + 2) = 80\n    \n    for A in range(10):\n        if 10 * (A + 2) == 80:\n            return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_distance = 4\n    slide_distance = 1\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < well_height:\n        day += 1\n        total_climbed += climb_distance\n        if total_climbed >= well_height:\n            break\n        total_climbed -= slide_distance\n    \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n    total_dances = dances_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen trades 3 fish for 2 rabbits\n    # So the ratio of fish to rabbit is 3:2\n    fish_to_rabbit = 3 / 2\n\n    # Oscar trades 3 rabbits for 4 packs of wheat\n    # So the ratio of rabbit to wheat is 3:4\n    rabbit_to_wheat = 3 / 4\n\n    # We want to find out the equivalent amount of fish for 8 packs of wheat\n    # First, find the ratio of fish to wheat by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Then, calculate the amount of fish for 1 pack of wheat\n    fish_per_pack_wheat = 1 / fish_to_wheat\n\n    # Calculate the amount of fish for 8 packs of wheat\n    fish_for_eight_packs_wheat = fish_per_pack_wheat * 8\n\n    return fish_for_eight_packs_wheat\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n    chair_cost = 120\n\n    # Equation based on the problem statement\n    equation = Eq(original_amount * 0.30, original_amount - chair_cost - 0.40 * (original_amount - chair_cost))\n\n    # Solving for the original amount\n    original_amount_solution = solve(equation, original_amount)\n\n    return original_amount_solution[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    result = 398 / 4\n    return result\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n    lcm = a * b // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    max_books_in_layer = (total_books + layers - 1) // layers\n    \n    return max_books_in_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # the hundred's place can't be 0\n        for ten in range(0, 4):\n            for one in range(0, 4):\n                if hundred != ten and hundred != one and ten != one:\n                    if ten == 0 and one == 0:  # cannot have both tens and ones places as 0\n                        continue\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Jogging speed and time\n    jogging_speed = 6 # miles per hour\n    jogging_time = 0.5 # from 6:30 AM to 7:00 AM is half an hour\n\n    # Jogging distance\n    jogging_distance = jogging_speed * jogging_time\n\n    # Walking speed and time\n    walking_speed = 5 # miles per hour\n    walking_time = 1 # from 7:00 AM to 8:00 AM is one hour\n\n    # Walking distance\n    walking_distance = walking_speed * walking_time\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is -4\n    # the first negative term will be when the sequence becomes less than 0\n    # we need to find n such that 50 + (n-1)*(-4) < 0\n    n = 1\n    term = first_term\n    while term >= 0:\n        n += 1\n        term += common_difference\n\n    return n - 1  # subtract 1 because we went one term too far\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # They both eat 8 pieces, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total pieces originally\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_in_grams = 1.2 * 1000  # Convert kg to g\n    weight_per_piece = 30\n    num_pieces = total_weight_in_grams / weight_per_piece\n    return int(num_pieces)\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of books Ahmad originally bought\n    x = symbols('x')\n    \n    # Equation representing the total cost of the original books \n    equation1 = Eq(x * 3.50, x * 3.50)\n    \n    # Equation for the total cost after buying 2 more books at $6 each\n    equation2 = Eq((x * 3.50 + 2 * 6), (x + 2) * 4)\n    \n    # Solve for x\n    num_books = solve(equation2, x)\n    \n    # Get the total number of books by adding the 2 additional books to the original number\n    total_books = num_books[0] + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is equivalent to 1.05668821 quarts\n    liters_to_quarts = 2.5 * 1.05668821\n    # Capacity of the cup in quarts\n    cup_capacity = 0.5\n    # Calculate the number of cups\n    number_of_cups = liters_to_quarts / cup_capacity\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging: from 6:30am to 7:30am, i.e., 1 hour\n    jogging_time = 1\n    jogging_speed = 6 # in miles per hour\n\n    # Distance travelled while jogging\n    distance_jogging = jogging_speed * jogging_time\n\n    # Time spent walking: from 7:30am to 9:30am, i.e., 2 hours\n    walking_time = 2\n    walking_speed = 5 # in miles per hour\n\n    # Distance travelled while walking\n    distance_walking = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    equation1 = Eq(angel, 5/6 * belle)\n    equation2 = Eq(angel - 58, 3/4 * belle)\n    \n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, amount = symbols('children amount')\n\n    equation1 = Eq(amount + 20, 70 * children)\n    equation2 = Eq(amount, 60 * children + 210)\n\n    solutions = solve((equation1, equation2), (children, amount))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len({vase1, vase2, vase3}) == 3:\n                    count += 1\n    return count // 6 # each arrangement is counted six times due to permutation of the vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment = 120.75\n\n    ans = initial_amount + payment\n    return ans\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import date\n\ndef solution():\n    start_date = date(2023, 3, 2)  # 2nd March 2023\n    end_date = date(2023, 4, 15)   # 15th April 2023\n    delta = end_date - start_date\n    return delta.days + 1  # include the start day in the count\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10**6):\n            original_number = j * 10 + 9\n            new_number = int('9' + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n    # Eddie is fixed at the left end, so we treat Eddie and Avril as one unit.\n    # We now have 6 units to arrange (Eddie_Avril together, and the other 5 students).\n    ways_for_6_units = factorial(5)  # There are 5! ways to arrange 5 units.\n    \n    # Avril can be on the right or left of Eddie since she just needs to be next to him.\n    ways_for_avril = 2 \n    \n    # Apply the principle of multiplication\n    total_ways = ways_for_6_units * ways_for_avril\n    \n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Number of gloves for each color and hand\n    blue_left = 1\n    green_left = 2\n    blue_right = 3\n    green_right = 4\n\n    # Using the Pigeonhole Principle to calculate minimum number of gloves needed\n    # To ensure Dilly has a matching pair, she must have at least one of each type plus one\n\n    minimum_gloves = (blue_left + green_left + blue_right + green_right) - 3  # Minus three because we need to exclude one of each type and include one more\n\n    return minimum_gloves\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    base_price = 200\n    percentage_increase = 45\n\n    increased_price = base_price * (1 + percentage_increase / 100)\n\n    return increased_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = 8\n    mean_value = 6\n    \n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    interval_initial = 3\n    interval_new = 5\n    \n    # Initial number of holes\n    num_holes_initial = circumference // interval_initial  # Integer division\n    # Actual number of holes dug initially\n    holes_dug = 30\n    # Remaining circumference after digging 30 holes\n    remaining_circumference = circumference - (holes_dug * interval_initial)\n    \n    # New number of holes needed with the new interval of 5m\n    num_holes_new = remaining_circumference // interval_new\n    if remaining_circumference % interval_new != 0:\n        num_holes_new += 1  # We need one extra hole if it's not perfectly divisible\n    \n    # Total number of holes needed is the sum of what have been dug and what needs to be dug\n    total_holes_needed = holes_dug + num_holes_new\n    \n    # Total holes needed now minus what would have been the initial number of holes\n    more_holes_needed = total_holes_needed - num_holes_initial\n    \n    return more_holes_needed\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Function to calculate the factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Function to calculate the number of combinations\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Ways to reach the 5th step: 1+1+1+1+1, 1+1+1+2, 1+2+2, 2+1+2, 2+2+1 (5 ways)\n    # From the 5th to the 10th step:\n    # If he steps 2 steps after the 5th step, he needs to take 2+2+1 or 2+1+2 or 1+2+2 (3 ways).\n    # If he steps 1 step after the 5th, he can have sequences like 1+1+1+1+1, 1+1+1+2, etc. up to the 10th step (6 ways).\n    # Thus, there are 5 * (3 + 6) = 45 different ways.\n    \n    # Number of ways to climb the first 5 steps\n    ways_to_5 = nCr(4, 1) + nCr(3, 1) # (1+1+1+1+1) and (1+1+2 and permutations)\n    \n    # Number of ways to climb from the 5th to the 10th step\n    ways_from_5_to_10 = nCr(4, 1) + nCr(3, 1) + nCr(2, 0) # (2+1+2), (1+1+1+1+1), (1+1+2 and permutations)\n\n    return ways_to_5 * ways_from_5_to_10\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of sweets Rachel has originally\n    # Let a represent the number of sweets Alice has originally\n    r, a = symbols('r a')\n\n    # Equation1: If Rachel gives Alice 10 sweets, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation2: If both eat 8 sweets, Rachel has 3 times what Alice has\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total number of sweets they had originally is the sum of r and a\n    total_sweets = solutions[r] + solutions[a]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # As B=2 and D=0, we can plug these into the equation:\n    # 5*(100000A + 20000 + 1000C + 1000E + 100F) = 6*(100000E + 10000F + 1000A + 200 + 10C)\n    # To simplify this, let us assume that X = 100A + 10C + E and Y = 10F\n    # Thus, the equation becomes: 5000X + 500Y = 600X + Y*600\n    # Which simplifies to: 4400X = 100Y\n    # The above equation implies that: X = Y/44, but since X and Y only represent digits, the only solution is Y = 0 and X = 0\n    # Therefore A, C, E, and F must be 0 as well, which contradicts the condition that all letters represent different digits.\n    # Hence, we made an error in assuming that X and Y are independent of B and D.\n    # Correcting this: 5*(100000A + 20000 + 1000C + 1000E + 100F) = 6*(100000E + 10000F + 1000A + 200 + 10C)\n    # 500000A + 100000C + 50000E + 5000F - 60000E - 600000F - 6000A - 60C = -1000\n    # 494000A + 99940C - 10000E - 594000F = -1000\n    # Using modulo analysis (mod 10) gives us that C - F must end with the number 9 since the -1000 contributes a 0 in the ones place.\n    # This implies that either C = 9 and F = 0 or C = 8 and F = 9. But we know D=0, so F cannot be 0 because different letters represent different numbers.\n    # This means C = 8 and F = 9.\n    # Now we can solve the equations:\n    # 5 * (100000A + 20000 + 8000 + 100E + 900) = 6 * (100000E + 90000 + 1000A + 200 + 80)\n    # 5 * (100000A + 28900 + 100E) = 6 * (100000E + 90280 + 1000A)\n    # 500000A + 144500 + 500E = 600000E + 541680 + 6000A\n    # 494000A + 500E - 600000E = 541680 - 144500\n    # 494000A - 599500E = 397180\n    # If A is not zero, then E must be 1 (since if E was 2, A would have to be less than one and cannot be a digit).\n    # With E = 1 we get 494000A - 599500 = 397180\n    # 494000A = 996680\n    # A = 996680 / 494000\n    A = 996680 // 494000  # Integer division since we are looking for a digit\n    E = 1                  # As derived above\n    C = 8                  # As derived above\n    F = 9                  # As derived above\n    # Now we return the four-digit number FACE\n    FACE = 1000 * F + 100 * A + 10 * C + E\n\n    return FACE\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for page_number in range(1, 51):\n        if '3' in str(page_number):\n            erased_sum += page_number\n    return erased_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Options to maximize: by operator precedence, we want to maximize the multiplication part and add it to the maximum sum.\n    # Option 1: (15+5) * (5+15) - 6 + 7\n    # Option 2: 15 + (5*5) + (15-6) + 7\n    # Option 3: 15 + 5 * (5+15) - (6-7)\n    # If we manually calculate these options, we find Option 3 to be the largest.\n\n    # Calculating these options:\n    option1 = (15+5) * (5+15) - 6 + 7\n    option2 = 15 + (5*5) + (15-6) + 7\n    option3 = 15 + 5 * (5+15) - (6-7)\n\n    # We return the maximum value.\n    return max(option1, option2, option3)\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits_per_page = 1\n    current_page = 1\n    while total_digits > 0:\n        total_digits -= digits_per_page * 9 * current_page\n        current_page *= 10\n        digits_per_page += 1\n    current_page //= 10\n    digits_per_page -= 1\n    pages = current_page + (total_digits + digits_per_page * current_page * 9 - 1) // digits_per_page\n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Given data\n    ivan_average = 80\n    billy_average = 89\n    billy_target_increase = 10\n    num_assignments = 5\n\n    # Calculate Ivan's total score for five assignments\n    ivan_total = ivan_average * num_assignments\n\n    # Calculate Billy's total score for the first four assignments\n    billy_total_first_four = billy_average * (num_assignments - 1)\n\n    # Calculate the target average score for Billy\n    billy_target_average = ivan_average + billy_target_increase\n\n    # Calculate the total score Billy needs to achieve his target average\n    billy_target_total = billy_target_average * num_assignments\n\n    # Calculate the score Billy needs in the fifth assignment\n    billy_fifth_score = billy_target_total - billy_total_first_four\n\n    return billy_fifth_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = (total_length + pipe_length - 1) // pipe_length\n    \n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    for i in range(1, 1000//2 + 1):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    a7 = 39  # 7th term\n    common_difference = 44 - 39  # common difference between terms\n\n    a1 = a7 - (7 - 1) * common_difference  # finding the 1st term\n\n    a100 = a1 + (100 - 1) * common_difference  # finding the 100th term\n\n    return a100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    m = min(i**2 for i in range(1, 1261) if (1260 * i**2)**0.5 % 1 == 0)\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + (2 * peaches)\n    \n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_with_4 = 3\n    remainder_with_7 = 3\n    max_cards = 28 * 7  # Since we're looking for a number that leaves the same remainder when divided by both 4 and 7\n    for cards in range(remainder_with_4, max_cards, 4):\n        if cards % 7 == remainder_with_7:\n            ans = cards % 28\n            return ans\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for number in range(10, 100):\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Since we're only interested in the ones digit of the number 999^99,\n    # we can focus on the ones digit of 9^99, because the trailing digits of 999\n    # will be the same as those of 9 for the purposes of determining the ones digit.\n\n    # We'll look at the pattern of the ones digit for powers of 9:\n    # 9^1 = 9 (ones digit is 9)\n    # 9^2 = 81 (ones digit is 1)\n    # 9^3 = 729 (ones digit is 9)\n    # 9^4 = 6561 (ones digit is 1)\n    # We can see that the ones digit alternates between 9 and 1 every other power.\n    \n    # Since 99 is odd, the ones digit of 9^99 will be the same as that of 9^1,\n    # which is 9.\n    \n    return 9\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    total_cost = 151.25 + 24.15\n    return total_cost\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    # Let x be the total value of the 5 other ponies.\n    # The average value of the ponies in the small stable before Rein Beau wanders across is (x) / 3.\n    # The average value of the ponies in the large stable before Rein Beau wanders across is (x) / 3.\n    # When Rein Beau wanders across, the average value of the ponies in both stables becomes (x + 250000) / 4.\n    \n    # Set up the equation based on the information given about the average rising by £10000.\n    # Thus, [(x + 250000) / 4] - [x / 3] = 10000\n    # Solving for x, which is the total value of the 5 other ponies.\n    x = symbols('x')\n    equation = Eq((x + 250000) / 4 - x / 3, 10000)\n\n    total_value_other_ponies = solve(equation, x)\n    \n    # Add Rein Beau's value to get the total value of all six ponies.\n    return int(total_value_other_ponies[0] + 250000)\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Reverse of step (5)\n    \n    # Reverse of step (4)\n    # We will handle the unknown day of birth (dob) after reversing step (3)\n    \n    # Reverse of step (3)\n    result /= 50  # This will lead to a fractional value due to the unknown dob\n    \n    # Reverse of step (2)\n    result -= 1\n    \n    # Since the number of the month times 4 plus 1 was multiplied by 50,\n    # after reversing steps (3) and (2), the fractional part of the result\n    # should represent the day. To reverse step (1), we need to divide by 4.\n    # But first, we need to extract the day from the fractional part.\n\n    # Extracting month and the fractional part representing the dob\n    month = int(result) // 4  # This should give us the exact month\n    dob_fraction = result - (month * 4)\n    \n    # To get the actual dob, we remember that dob was added twice,\n    # this means the fractional part times 50 should be twice the dob.\n    dob = (dob_fraction * 50) / 2\n    \n    # Since dob was an integer to begin with, we round it to the nearest integer\n    dob = round(dob)\n    \n    return (month, dob)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_to_sister = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_to_sister\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    # Since we only need the remainder of 2^2015 divided by 3,\n    # we can use modular exponentiation to find the result.\n    remainder = pow(2, 2015, 3)\n    return remainder\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Treat the 4 pupils who insist on standing together as a single unit\n    # Now we have 5 units to arrange (4 individual pupils + 1 group unit)\n    arrange_units = factorial(5)\n    \n    # The 4 pupils within the group unit can be arranged among themselves in 4! ways\n    arrange_within_group = factorial(4)\n    \n    # Multiply the arrangements of the units with the arrangements within the group\n    total_arrangements = arrange_units * arrange_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n\n    percent_concentration = (sugar / total_mixture) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # The consecutive numbers are n, n+1, n+2\n    # Their sum is given by 3n + 3 = 60\n    # Solving for n gives n = (60 - 3) / 3\n    n = (60 - 3) // 3\n    # The largest number is then n+2\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gold, silver = symbols('gold silver')\n\n    # 5 points per gold and 4 points per silver medal with total points 331\n    equation1 = Eq(5 * gold + 4 * silver, 331)\n    # Total number of medals is 80\n    equation2 = Eq(gold + silver, 80)\n\n    solutions = solve((equation1, equation2), (gold, silver))\n\n    return solutions[gold]\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb = 8.70\n    cost_of_beef = 9.40\n    total_cost = cost_of_lamb * 7 + cost_of_beef * 30\n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `m` be the work done by a master in a day\n    # Let `a` be the work done by an apprentice in a day\n    m, a = symbols('m a')\n\n    # 4 days with 1 master and 3 apprentices\n    equation1 = Eq(1 * m + 3 * a, 1/4)\n\n    # 3 days with 2 masters and 1 apprentice\n    equation2 = Eq(2 * m + 1 * a, 1/3)\n\n    # Solve for individual rates of work\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Find how long it takes for 1 apprentice to complete the task alone\n    time_for_apprentice = 1 / solutions[a]\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Fraction remaining after children are accounted for\n    fraction_remaining = 1 - 1/3\n    # Fraction of the remainder that are men\n    fraction_men = 5/8\n    # Since the remaining fraction of men and women together make the whole remainder, the fraction of women can be derived\n    fraction_women = 1 - fraction_men\n    # Total spectators are computed by the number of women divided by their fraction\n    total_spectators = women / (fraction_remaining * fraction_women)\n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Given operations suggest that the operation depends on the ordering of the numbers.\n    # Analysing the provided operations:\n    # 5★2 = 5 + 2 + 1\n    # 2★5 = 2 + 5 - 2\n    # 6★3 = 6 + 3 + 3\n    # 8★2 = 8 + 2 + 4\n    # We can see that when the first number is greater than the second, it's a sum of the two numbers plus the second.\n    # When the second number is greater than the first, it's the sum of the two numbers minus the first.\n    \n    # Let's define this operation\n    def star_op(a, b):\n        if a > b:\n            return a + b + b\n        else:\n            return a + b - a\n    \n    # Now, let's calculate the value of 11★10\n    return star_op(11, 10)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Position of the elephant doll from the left (L)\n    position_elephant_L = 10\n    # Position of the rabbit doll from the right (R)\n    position_rabbit_R = 9\n    # Number of dolls between the elephant and the rabbit\n    dolls_between = 5\n\n    # Total number of dolls is the sum of the dolls to the left of the elephant (L-1)\n    # plus the number of dolls between the elephant and the rabbit\n    # plus the dolls to the right of the rabbit (R-1) and the rabbit doll itself\n    total_dolls = (position_elephant_L - 1) + dolls_between + (position_rabbit_R - 1) + 1\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    calculation = 0.4 * (11 / 52 / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    ans = calculation\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    num_students = 0\n    boys_more = 32\n    # Assuming that the square has sides of length 'n',\n    # the pattern of boys and girls can be represented as follows:\n    # B B B B ... B, for the outermost layer of boys, which would have n^2 students (if there were no girls).\n    # In each subsequent layer, there are 4 less students than the outermost one.\n    # We notice that the total number of students in each layer is n^2, (n-2)^2, (n-4)^2, ...\n    # Where the (n-2i)^2 term has boys if i is even and girls if i is odd.\n    \n    # We need to solve for n in the equation:\n    # n^2 + (n-2)^2 + (n-4)^2 + ... - ((n-1)^2 + (n-3)^2 + ...) = 32\n    # To do this, we iterate over possible 'n' until the condition is satisfied.\n    \n    for n in range(1, 100):  # Upper bound for reasonable square sizes in a schoolyard\n        boy_count = 0\n        girl_count = 0\n        for i in range(0, n, 2):  # Boy layers\n            boy_count += (n - i)**2\n        for i in range(1, n, 2):  # Girl layers\n            girl_count += (n - i)**2\n            \n        if boy_count - girl_count == boys_more:\n            # Once we find the correct 'n', calculate the total number of students\n            num_students = boy_count + girl_count\n            break\n    \n    return num_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months = symbols('original_roses original_daisies months', integer=True)\n    plants_per_month = symbols('plants_per_month', integer=True)\n\n    total_original = Eq(original_roses + original_daisies, 300)\n    future_roses = Eq(original_roses + months * plants_per_month, 280)\n    future_daisies = Eq(original_daisies + months * plants_per_month, 180)\n    total_future = Eq(original_roses + original_daisies + 2 * months * plants_per_month, 280 + 180)\n    \n    # Since we know the total number of plants originally, future_roses and future_daisies will also contain\n    # the total number of plants in the future, which must be equal to 280 + 180.\n    # Solving the equations now.\n    solutions = solve((total_original, future_roses, future_daisies, total_future), (original_roses, original_daisies, months, plants_per_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    prime_sum = sum(primerange(50, 61))\n\n    return prime_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given values\n    nth1 = 10\n    nth_term1 = 23\n    nth2 = 15\n    nth_term2 = 38\n    nth_find = 102\n\n    # Calculating the common difference\n    common_diff = (nth_term2 - nth_term1) / (nth2 - nth1)\n\n    # Calculating the first term using nth1 and nth_term1\n    first_term = nth_term1 - (nth1 - 1) * common_diff\n\n    # Calculating the nth term to find\n    nth_term = first_term + (nth_find - 1) * common_diff\n\n    return int(nth_term)\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n\n    remaining_books = total_books - english_books  # Chinese books + Comics\n    comics = remaining_books / 3  # Because Chinese books = 2 * Comics\n\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    ratio_per_litre = coffee_litres / coffee_ratio\n    total_litres = ratio_per_litre * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_shots = accurate_shots + missed_shots\n    total_score = accurate_shots * score_per_accurate_shot\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Compute the numerators and denominators separately\n    numerator1 = 1/30 + 1/6\n    denominator1 = 2/25\n    fraction1 = numerator1 / denominator1\n    \n    numerator2 = 2 - 2/3\n    denominator2 = 8/3\n    fraction2 = numerator2 / denominator2\n    \n    # Add the two fractions\n    ans = fraction1 + fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    \n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    # Time taken for train to completely enter the tunnel\n    enter_tunnel_time = train_length / speed\n    # Time taken to pass through the entire tunnel length\n    pass_tunnel_time = tunnel_length / speed\n\n    # Total duration is the time taken to enter plus the time to pass completely\n    total_time = enter_tunnel_time + pass_tunnel_time\n\n    return total_time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Assuming that everyone with a bow tie also has spectacles\n    # The number of people with neither would be total minus those with spectacles\n    ans = total_men - spectacles\n\n    return ans\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # If each child gets a different number of apples, start with the minimum case\n    # where each child gets 1 more apple than the previous one.\n\n    # Using summation formula for an arithmetic sequence: n/2 * (first_term + last_term)\n    def min_sum(n):\n        return n / 2 * (1 + n)\n\n    # Initialize the number of apples to distribute\n    total_apples = 50\n\n    # Since there is no order in which the children receive apples, and each child must get at least\n    # one apple, we start by finding the minimum apples we can distribute to 7 children so we can\n    # identify how many apples the last child will get.\n    # We try to allocate apples starting from the minimum possible to 7 children and calculate what that\n    # leaves for the 8th child. We increase the least possible allocation for the 7 children until the 8th child\n    # gets apples, respecting the property of having distinct amounts.\n    \n    # Start with the youngest child getting 1 apple and check for distribution\n    # We increment the number of apples for the first child until we find the minimum for the 8th child\n    for first_child_apples in range(1, total_apples):\n        apples_left = total_apples - min_sum(7) - first_child_apples\n        # Check if the remaining apples for the 8th child are more than the 7th child\n        if apples_left > first_child_apples + 6:  # +6 because it's the difference from the first to the 7th child\n            return apples_left\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8 - x1 + 1):\n            if x1 + x2 == 8:\n                count += 1\n            for x3 in range(1, 8 - x1 - x2 + 1):\n                if x1 + x2 + x3 == 8:\n                    count += 1\n                for x4 in range(1, 8 - x1 - x2 - x3 + 1):\n                    if x1 + x2 + x3 + x4 == 8:\n                        count += 1\n                    for x5 in range(1, 8 - x1 - x2 - x3 - x4 + 1):\n                        if x1 + x2 + x3 + x4 + x5 == 8:\n                            count += 1\n                        for x6 in range(1, 8 - x1 - x2 - x3 - x4 - x5 + 1):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                count += 1\n                            for x7 in range(1, 8 - x1 - x2 - x3 - x4 - x5 - x6 + 1):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.50 * 0.20 * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, blue, green = symbols('red blue green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = 414 * (1/3)\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Start with the smallest possible distribution to each child such that\n    # each gets at least one apple and no two get the same number of apples\n    # 1, 2, 3, 4, ... -> The minimum number they can get with 5 children is 1+2+3+4 = 10 (sum of first four natural numbers)\n    # Therefore, the maximum number the fifth child can get is 19 - 10 = 9.\n    return 19 - 10\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial as f\n    \n    # Ali and Bala can be considered as one unit plus three other people, making it 4 \"units\" to arrange.\n    units = f(4)\n    \n    # Now within the Ali-Bala unit, there are two ways Ali and Bala can stand.\n    ali_bala_perm = f(2)\n    \n    # Dan must stand at the furthest left, so there is only 1 way to place Dan.\n    dan_fixed = 1\n\n    # Total arrangements are the product of the possible permutations.\n    total_arrangements = dan_fixed * units * ali_bala_perm\n\n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 3 / 4\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    wheat_needed = 8\n    fishes_needed = wheat_needed / (1 / fish_to_wheat_ratio)\n    \n    return int(fishes_needed)\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 141):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Let's assume the minuend (the number being subtracted from) is a two-digit number 'ab' as '10a + b'\n    # The subtrahend (the number to subtract) originally is '10*3 + 2' which is 32\n    # Serene mistook the subtrahend to be '10*5 + 3' which is 53\n    # She got a difference of 36, so we have the equation: (10a + b) - 53 = 36\n    # To find the correct difference, we need to solve for: (10a + b) - 32\n\n    # since the original difference when she mistook the digits was 36, we know that (10a + b) = 36 + 53\n    minuend = 36 + 53\n    correct_subtrahend = 32\n\n    # The correct difference:\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Since we want to make sure to have 3 different colored balls,\n    # we consider the worst case scenario based on the Pigeonhole Principle:\n\n    # Draw all white balls (9), then all yellow balls (6), \n    # then we need just one more draw to guarantee a red ball.\n    # If we don't do it this way, we might get a red ball earlier, \n    # but we can't be certain until we've drawn after all white and yellow.\n\n    # Total balls drawn in the worst case scenario:\n    # All white balls + all yellow balls + 1 red ball = 9 + 6 + 1\n    return 9 + 6 + 1\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    return sum(terms)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    fence_length = 3.2\n    wood_length = 6.5\n    used_length = fence_length + wood_length\n\n    remaining_length = total_length - used_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e denote the number of sweets Ellen initially has\n    # Let l denote the number of sweets Lenny initially has\n    e, l = symbols('e l')\n\n    # Equation based on the problem statement for Ellen\n    equation1 = Eq(e - 12, (13/24) * (e + l))\n    # Equation based on the problem statement for Lenny\n    equation2 = Eq(l - 12, (3/8) * (e + l))\n\n    # Solving the system of equations for e and l.\n    solutions = solve((equation1, equation2), (e, l))\n\n    # Calculating the total number of sweets both have\n    total_sweets = solutions[e] + solutions[l]\n\n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    # First $50000 at 6%\n    tax_first_part = 0.06 * 50000\n\n    # Tax for amount above $50000 at (6 + T)%\n    tax_remaining_part = (0.06 + T / 100) * (120000 - 50000)\n\n    # Total tax paid is $10000\n    total_tax_paid = 10000\n\n    # Equation based on total tax paid\n    equation = Eq(tax_first_part + tax_remaining_part, total_tax_paid)\n\n    # Solve for T\n    solution = solve(equation, T)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Digits from 0 to 9\n    digits = list(range(10))\n\n    # To minimize the difference, we need to distribute the digits evenly\n    # between the two numbers, with the most significant digits having\n    # the smallest difference. We also need to account for the fact that\n    # a number cannot start with 0.\n\n    # Let's assign the smallest non-zero digit 1 to the most significant digit\n    # of the smaller number and continue with even distribution.\n    smaller_number = [1]\n    larger_number = [0]\n\n    # Exclude assigned digits from the list\n    digits.remove(1)\n\n    # Distribute the remaining digits in descending order\n    digits.sort(reverse=True)\n\n    for i, digit in enumerate(digits):\n        if i % 2 == 0:\n            larger_number.append(digit)\n        else:\n            smaller_number.append(digit)\n\n    # Convert lists to the actual numbers\n    smaller_number_val = int(''.join(map(str, smaller_number)))\n    larger_number_val = int(''.join(map(str, larger_number)))\n\n    # Calculate the difference between the two formed numbers\n    difference = larger_number_val - smaller_number_val\n\n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    # All distinct presents\n    presents = ['toy_car', 'puzzle', 'calculator', 'present_4', 'present_5',\n                'present_6', 'present_7']\n    \n    # Initialize count to zero\n    count = 0\n    \n    # Generate all possible ways to give presents to 5 children\n    for perm in permutations(presents, 5):\n        # Extract the present for Richard and Kevin\n        if 'toy_car' in perm[:2] or 'puzzle' in perm[:2] or 'calculator' in perm[:2]:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    tunnel_length = 500  # length of the tunnel in meters\n    train_speed = 10     # speed of the train in meters per second\n\n    # The whole train is in the tunnel when the front of the train enters the tunnel\n    # and ends when the back of the train leaves the tunnel.\n\n    # So the total distance covered by the train to completely clear the tunnel\n    # is the length of the train plus the length of the tunnel.\n    total_distance = train_length + tunnel_length\n\n    # Time is distance divided by speed.\n    time_to_pass = total_distance / train_speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n\n    budget = 100  # £1 is 100 pence\n    change = budget - total_cost  # change in pence\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n    \n    # We start with a number greater than 3 since 2, 3 are prime but won't work with these rules\n    n = 4\n    while True:\n        # Check if all the numbers in the sequence are prime\n        if (isprime(n) and isprime(n + 4) and isprime(n + 6)\n                and isprime(n + 132) and isprime(n + 250)):\n            # Just return the first match since n is lowest in lexicographical order\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    ans = 374 * 36\n    return ans\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time in hours they meet each other\n    \n    # Calculate the distance Jack travels\n    jack_distance = jack_speed * time\n    \n    # Calculate the distance Rose travels\n    rose_distance = rose_speed * time\n    \n    # The distance between Town A and Town B is the difference in distances\n    # traveled by Jack and Rose when they meet\n    distance_AB = jack_distance - rose_distance\n    \n    return distance_AB\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4 * i ** 2) for i in range(1, 1016))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 4.6*x - 0.35 - 0.57\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    # Calculate multiples of 7\n    multiples_of_7 = 5000 // 7\n    \n    # Calculate multiples of 13\n    multiples_of_13 = 5000 // 13\n    \n    # Calculate multiples of both 7 and 13 (which is the multiple of 7*13=91)\n    multiples_of_7_and_13 = 5000 // (7 * 13)\n    \n    # Use the inclusion-exclusion principle to compute the total count\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    \n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n  \n    r1, r2, r3 = symbols('r1 r2 r3')  # r1: first rabbit, r2: second rabbit, r3: third rabbit\n\n    # The system of equations according to the problem statement\n    equation1 = Eq(r2, r1 + 2)               # The second rabbit costs £2 more than the first\n    equation2 = Eq(r3, r2 - 0.80)            # The third rabbit costs 80p less than the second\n    equation3 = Eq(r1 + r2 + r3, 19.70)      # The total cost of the three rabbits\n\n    solutions = solve((equation1, equation2, equation3), (r1, r2, r3))\n\n    return solutions[r1]\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    count_total = len(set(permutations(word)))\n    \n    # separate out 'S' characters and count permutations where 'S's are together\n    word_without_s = \"UCCES\"  # remove S from SUCCESS\n    grouped_s = \"SSSS\"  # consider all S's as one group\n    combined_word = grouped_s + word_without_s\n    count_s_together = 0\n\n    # Add one 'S' at a time to the rest of the characters and count permutations\n    for i in range(len(word_without_s) + 1):\n        modified_word = word_without_s[:i] + grouped_s + word_without_s[i:]\n        count_s_together += len(set(permutations(modified_word)))\n\n    ans = count_total - count_s_together\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    difference = boys - teachers\n\n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')\n    david_rate = 1/10\n    emma_rate = 1/18\n\n    equation = Eq(david_rate * (14 - emma_days) + emma_rate * emma_days, 1)\n\n    solutions = solve(equation, emma_days)\n\n    return solutions[emma_days]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    total_shirts = 145\n    bought_shirts = 138\n    money_left = 56\n\n    price_per_shirt = money_left / (total_shirts - bought_shirts)\n    initial_money = (price_per_shirt * total_shirts)\n\n    return initial_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    # Using the formula for the sum of the first n cubes:\n    # 1³ + 2³ + 3³ + ..... + n³ = (1 + 2 + 3 + ..... + n)²\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The mean of an evenly spaced set of numbers (i.e., an arithmetic sequence) is the middle value(s).\n    # Since we have an even count of numbers (14), the average will be the mean of the 7th and 8th numbers.\n    # n + (n + 2) = 2 * average\n    # 2n + 2 = 2 * 119\n    # 2n = 238 - 2\n    # n = (236) / 2\n    n = (238 - 2) / 2\n    # The smallest number is the first term of the sequence, which is n - 6 * difference (since each term is 2 apart)\n    smallest_number = n - 6 * 2\n    return int(smallest_number)\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    # Loop through the possible digits for 'a'\n    for a in range(10):\n        # Construct the number based on the value of 'a'\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        \n        # Check if the number is divisible by 11 using the divisibility rule\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    difference = 132 - 124\n    min_class_size = difference + 1 # minimum class size without considering the condition\n    # Applying Pigeonhole Principle: if at least 4 students are of the same height,\n    # we need to have at least one more height difference to cover\n    # the extra students if they were of different heights.\n    # So we calculate:\n    # (number of different heights - 1) * (students per height - 1) + 1\n    # which simplifies to:\n    min_class_size_with_condition = (difference - 1) * (4 - 1) + 1 + 4\n    return min_class_size_with_condition\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percent = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percent)\n\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Time to cut wood into 5 sections is 12 minutes\n    time_for_5_sections = 12\n    # We subtract one because the first cut gives two sections\n    # Hence, Rachel makes 4 cuts to get 5 sections\n    cuts_to_make_5_sections = 5 - 1\n    # The time per cut is the total time divided by number of cuts\n    time_per_cut = time_for_5_sections / cuts_to_make_5_sections\n    # The total time to cut the piece of wood 5 times is 5 cuts time per cut\n    total_time_for_5_cuts = time_per_cut * 5\n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let n be the number of each type of coin\n    # We have n 2p coins and n 5p coins\n    # Total value of 2p coins in pounds is 0.02 * n\n    # Total value of 5p coins in pounds is 0.05 * n\n    # The total amount in the bag is £1.26\n    # Therefore, the equation is: 0.02 * n + 0.05 * n = 1.26\n    # Simplifying the above equation gives us: 0.07 * n = 1.26\n    # Solve for n\n\n    total_amount = 1.26\n    coin_value = 0.07  # Sum of the value of one 2p and one 5p coin in pounds\n\n    n = total_amount / coin_value\n\n    # Since the number of coins must be an integer, round n to nearest integer\n    num_coins = round(n) * 2  # Multiply by 2 because we have two types of coins\n\n    return num_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Finding the ones digit of a power of 3 forms a repeating pattern: 3, 9, 7, 1,...\n    # This pattern has a length of 4.\n    power_pattern_length = 4\n\n    # Finding the place of 2009 in the pattern\n    # 2009 modulo 4 gives us the place in the pattern\n    pattern_place = 2009 % power_pattern_length\n\n    # Mapping the pattern place to the ones digit\n    ones_digit_pattern = {1: 3, 2: 9, 3: 7, 0: 1}\n\n    # We use 0 for the case when pattern_place is 4 because 2009 % 4 = 0 means\n    # we are at the end of the pattern, which corresponds to the digit 1\n    ones_digit_of_power = ones_digit_pattern[pattern_place]\n\n    return ones_digit_of_power\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be x.\n    # According to the problem, the fraction of adults at the party is 2/5,\n    # so the fraction of non-adults (children) is 1 - 2/5 = 3/5.\n    # Among the children, the fraction of boys is 5/9 and the rest are girls.\n    # Therefore, the fraction of girls among all the people at the party is:\n    # (3/5) * (1 - 5/9) = (3/5) * (4/9) = 12/45 = 4/15.\n    # It is given that there are 36 girls at the party, which represents the above fraction.\n    # We set up the equation: (4/15) * x = 36, and solve for x to find the total number of people.\n\n    # Solving the equation for x\n    x = 36 * (15/4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2*5  # start with the smallest common multiple of 2 (even) and 5\n    while True:\n        if (num ** 0.5) % 1 == 0:  # check if num is a perfect square\n            return num\n        num += 2*5  # increment by the LCM of 2 and 5 to maintain the multiple of 2 and 5 condition\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    child_ticket_cost = 30\n\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy.functions.combinatorial.numbers import stirling\n\ndef solution():\n    ans = stirling(20 + 4 - 1, 4, kind=2)\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    work = men * days  # Total work done is a product of men and days\n    new_men = 2\n    new_days = work / new_men  # Dividing the total work by the number of new men gives us the days they need\n    return new_days\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for Will's current age\n    will_age = symbols('will_age')\n    \n    # Create the equation based on the problem statement\n    # In 8 years, Will will be 4 times as old as he was 4 years ago\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n    \n    # Solve the equation for Will's age\n    solution = solve(equation, will_age)\n    \n    # Since we expect a single solution for age, we return the first (and only) element\n    return solution[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    num_terms = int((last_term - first_term) / difference) + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the Law of Addition for independent events\n    ans = trains + cars + boats\n\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    num_days = total_pages / pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Start by reducing the problem, ensuring that each child gets at least two books\n    # Since each child gets at least 2 books, we subtract the given 2*5 = 10 books from the total\n    total_books = 30\n    minimum_books_per_kid = 2\n    books_to_divide = total_books - (5 * minimum_books_per_kid)\n\n    # Now divide the remaining books among 5 kids\n    # This is equivalent to finding the number of ways to place 4 partitions in the 20 books\n    # which is the same as choosing 4 positions from 24 possible positions (20 books + 4 partitions)\n    ans = comb(books_to_divide + 5 - 1, 5 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 4/10 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_milliliters = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_liters = total_soup_milliliters / 1000  # converting milliliters to liters\n\n    return total_soup_liters\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    return likes_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\n\ndef calculate_value(fraction1, fraction2, operator):\n    if operator == '+':\n        return fraction1 + fraction2\n    elif operator == '-':\n        return fraction1 - fraction2\n    elif operator == '*':\n        return fraction1 * fraction2\n    elif operator == '/':\n        return fraction1 / fraction2\n\ndef solution():\n    fractions = [(1/2, 1/9), (1/3, 1/8), (1/4, 1/7), (1/5, 1/6)]\n    operators = ['+', '-', '*', '/']\n    max_sum = None\n    second_largest_term = None\n    \n    for permutation in permutations(operators):\n        current_sum = 0\n        values = []\n        for i in range(4):\n            fraction1, fraction2 = fractions[i]\n            operator = permutation[i]\n            value = calculate_value(fraction1, fraction2, operator)\n            values.append(value)\n            current_sum += value\n\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n            values.sort()\n            second_largest_term = values[-2]\n\n    A, B = second_largest_term.as_integer_ratio()\n    ans = A + B\n    return ans\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    trees = (road_length // interval) + 1\n    return trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    j, c = symbols('j c')\n\n    # 4 jugs and 5 cups cost $85\n    equation1 = Eq(4 * j + 5 * c, 85)\n\n    # 2 jugs and 2 cups cost $40\n    equation2 = Eq(2 * j + 2 * c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Define the coin denominations in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # The price of the bus fare\n    bus_fare = 44\n    \n    # Start with a large denomination, typically the number of coins will be smaller.\n    for coin in coins:\n        if coin > bus_fare:\n            continue\n        # Find the minimum number of coins that Susan can use to pay.\n        # If Susan uses a coin that is larger than the bus fare, she gets the minimum change.\n        change = coin - bus_fare\n        num_coins = 1 # Susan gives one coin\n        \n        # Calculate the number of coins needed for the change\n        for c in coins:\n            num_coins += change // c\n            change %= c\n            if change == 0:\n                break\n        \n        # If the change can be given, this is the minimum number of coins.\n        if change == 0:\n            break\n    \n    return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    num_chairs_each = 28\n    total_chairs = num_classrooms * num_chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, S\n\n    x = symbols('x', real=True, positive=True)\n    inequality = (x + 3) / (2 * x + 5) > S('0.505')\n    solution_set = solve(inequality, x)\n\n    # Since x must be an integer, and we want the largest number of matches won before the weekend\n    # round down the 47.5 to the nearest integer\n    largest_wins = int(solution_set[0].evalf()) - 1\n\n    return largest_wins\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    sum = 0\n    for i in range(1, 89, 2):\n        sum += (i + 1) - i\n    return sum\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n    initial_amount = spent + remaining\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_at_center = total_points // 4\n    other_combinations = total_points * (right_angle_at_center - 1)\n    ans = right_angle_at_center + other_combinations\n    return ans\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference / (15 - 10)\n\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # Define the sum of the series\n    total = 0\n    \n    # Loop to calculate each fractional component of the series\n    numerator = 1\n    denominator_a = 1\n    denominator_b = 2  # Starting values for the pattern in denominators\n    \n    # Iterate through the series based on the pattern observed\n    for i in range(1, 8):\n        total += numerator / (denominator_a * denominator_b)\n        numerator += 1\n        denominator_a = denominator_b\n        denominator_b += i + 2  # The pattern in the denominator increments by i + 2\n    \n    # Add the last fractional part 1/29\n    total += 1 / denominator_a\n    \n    return total\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    students_A = 24\n    students_B = 36\n    students_C = 42\n\n    # Calculate the greatest common divisor (GCD)\n    g1 = gcd(students_A, students_B)\n    gcd_all = gcd(g1, students_C)\n\n    return gcd_all\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([i if i % 4 < 2 else -i for i in range(1, 201)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_lunch_cost * days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    # Since Justin answers all the questions, x + y = 20\n    # Each correct answer gives 5 points: 5x\n    # Each wrong answer deducts 3 points: -3y\n    # The total points Justin scores is 76: 5x - 3y = 76\n    \n    # We can find y by using the first equation: y = 20 - x\n    # Then we substitute y in the second equation and solve for x:\n    for x in range(21):\n        y = 20 - x\n        if 5*x - 3*y == 76:\n            return x\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3 / 8) * 16\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    cost_price = symbols('cost_price')\n\n    # Define the equations based on the problem statement\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = selling_price - cost_price\n\n    # Create the equation for profit\n    equation = Eq(profit, 120)\n\n    # Solve for the cost price\n    solutions = solve(equation, cost_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    group_size = 38\n    total_cost = cost_per_person * group_size\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n\n    solutions = solve(equation, x)\n    return [sol.evalf() for sol in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n    # For four different colored socks in a row\n    ways_different_socks = factorial(4)  # 4!\n    \n    # For two pairs of different colored socks in a row (2 colors, 2 socks each)\n    ways_same_pairs = factorial(4) // (factorial(2) * factorial(2))  # 4! / (2! * 2!)\n    \n    return ways_different_socks, ways_same_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    # We can consider each number as a digit in the equation\n    for a in range(1, 10): # a cannot be zero\n        for b in range(10): # b can be zero\n            # Convert to the actual numbers based on the equation\n            ab = 10 * a + b\n            ba = 10 * b + a\n            aab = 100 * a + 10 * a + b\n            # Check if the equation holds true\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    total_handshakes = (num_people * (num_people - 1)) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    points = 10\n    vertices = 3\n    triangles = comb(points, vertices)\n    return triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the number of sweets Andre and Beth originally have.\n    andre, beth = symbols('andre beth')\n\n    # Equation 1: The total number of sweets they originally had combined.\n    equation1 = Eq(andre + beth, 24)\n\n    # Andre and Beth each receive 4 more sweets from the teacher.\n    # Andre now has 6 sweets more than Beth:\n    # (andre + 4) = (beth + 4) + 6\n\n    # Equation 2: The amount of sweets after the teacher gave them 4 each, with Andre having 6 more.\n    equation2 = Eq(andre - beth, 6)\n\n    # Solving the system of equations for the original number of sweets.\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Return Beth's sweets count after receiving 4 more from the teacher.\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To win the game, Anthea needs to leave a multiple of 4 apples after her turn\n    # so that she can always match Ben's move to leave a multiple of 4 until the last apple.\n    total_apples = 18\n    \n    # Anthea can leave 4 * k apples for some k after her turn.\n    # Thus to find out how many apples she needs to take, we subtract the\n    # nearest multiple of 4 below the total apples from the total.\n    # We get the multiple of 4 by taking integer division of total by 4 and multiplying by 4.\n    nearest_multiple_of_4 = (total_apples // 4) * 4\n    \n    # The apples she needs to take to leave a multiple of 4.\n    apples_to_take = total_apples - nearest_multiple_of_4\n    \n    # If the result is 0, it means she can't win by leaving a multiple of 4\n    # In this case, she can take 1, 2, or 3 apples to proceed with the game.\n    if apples_to_take == 0:\n        apples_to_take = 1\n    \n    return apples_to_take\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the chair and table mass\n    chair_mass, table_mass = symbols('chair_mass table_mass')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chair_mass, table_mass))\n    \n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    tall_men = 4500\n    taller_men = 750\n    men_between = tall_men - taller_men\n    return men_between\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand at either of the 2 ends of the line\n    judy_positions = 2\n\n    # Number of ways to arrange the remaining 5 friends\n    friends_arrangements = factorial(5)\n\n    # Total different ways they can perform\n    total_ways = judy_positions * friends_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andre and Beth's sweets\n    andre, beth = symbols('andre beth')\n\n    # Equation 1: The total number of sweets they both had originally\n    equation1 = Eq(andre + beth, 24)\n\n    # Equation 2: After the teacher gave them 4 sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4, beth + 4 + 6)\n\n    # Solve the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Return the number of sweets Beth has now (beth + 4)\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtakes = 5\n    finished_position = 2\n    total_cars = finished_position + overtakes\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Let x be the number you are thinking of.\n    # From the problem: (x - 6) / 12 = 2\n    # Apply the inverse operations to find x.\n    # First, inverse the division by multiplying both sides by 12.\n    # Then, inverse the subtraction by adding 6 to both sides.\n    x = (2 * 12) + 6\n    return x\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the minutes each sister spent on maths and English\n    elder_maths, elder_english, younger_maths, younger_english = symbols('elder_maths elder_english younger_maths younger_english')\n    \n    # Given relationships\n    equation1 = Eq(elder_maths, younger_maths + 10)  # Elder sister spent 10 more minutes on maths\n    equation2 = Eq(younger_english, younger_maths + 4)  # Younger sister spent 4 more minutes on English\n    equation3 = Eq(elder_maths + elder_english, 88)  # Elder sister spent 88 minutes total\n    equation4 = Eq(younger_maths, younger_english - 12)  # Younger sister spent 12 minutes less on maths than English\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, elder_english, younger_maths, younger_english))\n    \n    # Retrieve the time the younger sister spent on English\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Total sum of the original four numbers\n    total_sum_four_numbers = 130 * 4\n    \n    # Total sum of the remaining three numbers after one is removed\n    total_sum_three_numbers = 110 * 3\n    \n    # The number that was removed is the difference between the two sums\n    number_removed = total_sum_four_numbers - total_sum_three_numbers\n    \n    return number_removed\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert all times to seconds for common units\n    light1_interval = 1 * 60  # every minute\n    light2_interval = 1.5 * 60  # every 1.5 minutes\n    min_third_interval = 30  # at least 30 seconds\n\n    # Calculate the least common multiple for the first two traffic lights\n    lcm_two_lights = lcm(light1_interval, light2_interval)\n\n    # Now we need to find the smallest interval for the third light\n    # that is at least 30 seconds and also divides the lcm_two_lights\n    for interval in range(min_third_interval, lcm_two_lights + 1):\n        if lcm_two_lights % interval == 0:\n            return interval  # Return the smallest valid interval in seconds\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure victory, Leo must leave a multiple of 3 apples for Mia\n    # This way, no matter if she takes 1 or 2 apples, Leo can always take 2 or 1\n    # so that the total number taken (by both players) in each round is 3.\n    # Therefore, Leo should take either 1 or 2 apples so that the remaining\n    # apples (13 or 12) are not multiples of 3.\n\n    for first_move in [1, 2]:\n        remaining_apples = 14 - first_move\n        if remaining_apples % 3 != 0:\n            return first_move\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon and y be the value of one gold ring.\n    # According to the problem, 12 silver spoons (12x) have three quarters the value of 6 gold rings (6y).\n    # So, we have the equation: 12x = (3/4) * 6y\n    # Simplifying this, we get x = (3/4) * (6y / 12)\n    # x = (3/4) * (y / 2)\n    # x = (3 * y) / 8\n    # To find how many silver spoons (n) have the same value as 3 gold rings (3y),\n    # we set up the equation n * x = 3y\n    # Substituting the value of x from above, we get n * ((3 * y) / 8) = 3y\n    # Simplifying that, we get n * (3/8) = 3\n    # So, n = 3 / (3/8)\n    # n = 3 * (8/3)\n    # n = 8\n    return 8\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_diff = 55\n    total_students = 0\n    # Assuming the square array is n x n\n    for n in range(1, 1000, 2):  # The square array must have an odd side length\n        boys = n * n  # Total boys in a n x n square\n        girls = (n - 2) * (n - 2)  # Total girls in a (n-2) x (n-2) square\n        diff = boys - girls\n        if diff == total_diff:\n            # Since boys are on the outer layer and girls on the next, we repeat this pattern\n            total_students = boys + girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3*pencil + 2*marker, 13)\n    equation2 = Eq(2*pencil + 3*marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    paintbrush_cost = 1\n    \n    # Assume all items were paintbrushes first\n    paintbrushes = total_items\n    markers = 0\n    \n    # Now replace paintbrushes with markers one by one and check the total cost\n    while paintbrushes * paintbrush_cost + markers * marker_cost != total_cost:\n        paintbrushes -= 1\n        markers += 1\n    \n    return markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n\n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n\n    # Average weight of all teachers (male + female)\n    average_weight_all_teachers = 65\n\n    # Average weight of female teachers\n    average_female_weight = 60\n\n    # Equation for total weight of all teachers (male + female)\n    total_weight_all_teachers = average_weight_all_teachers * (3 + f)\n\n    # Equation for total weight of female teachers\n    total_female_weight = average_female_weight * f\n\n    # The equation which relates all the given\n    equation = Eq(total_male_weight + total_female_weight, total_weight_all_teachers)\n\n    # Solve for number of female teachers\n    num_female_teachers = solve(equation, f)[0]\n\n    return num_female_teachers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    rows = 5 + 7 - 1  # Cora is 5th from the front, 7th from the back, so there's one overlap\n    columns = 2 + 4 - 1  # Cora is 2nd from the left, 4th from the right, so there's one overlap\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Calculate the product of the factorized numbers including their powers\n    product_factors = {k: factors_33.get(k, 0) + factors_55.get(k, 0) for k in set(factors_33) | set(factors_55)}\n\n    # Find the smallest m that makes the product a perfect square by ensuring all powers are even\n    m = 1\n    for factor, power in product_factors.items():\n        if power % 2 == 1:  # If the power is odd, we multiply m by the factor to make it even\n            m *= factor\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces of candy,\n    # We start by placing 2 pieces on each plate,\n    # which uses 2 * 3 = 6 pieces of candy.\n    # This leaves us with 8 - 6 = 2 pieces of candy to distribute freely.\n    \n    # The problem now is equivalent to distributing 2 identical pieces of candy\n    # to 3 plates, where each plate can have 0 or more pieces.\n\n    # We can solve this by thinking of the problem as placing two dividers\n    # among the remaining two candies to divide them into three parts.\n    # The number of ways to arrange two identical candies (C) and two dividers (D)\n    # in a sequence is the combinations of selecting 2 positions from 4 (2 candies + 2 dividers).\n\n    from math import comb\n\n    # Choose 2 positions for the dividers out of 4 positions.\n    count = comb(4, 2)\n\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    # Since Star must be the first runner, we only need to arrange the other four teammates.\n    # The number of ways to arrange the 4 teammates is the same as the number of permutations of 4 items.\n    ans = factorial(4)\n\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for d1 in range(1, 10):\n        for d2 in range(d1 + 1, 10):\n            for d3 in range(d2 + 1, 10):\n                for d4 in range(d3 + 1, 10):\n                    num1 = d1*1000 + d2*100 + d3*10 + d4\n                    num2 = d4*1000 + d3*100 + d2*10 + d1\n                    for p1, p2, p3, p4 in permutations([d1, d2, d3, d4]):\n                        num3 = p1*1000 + p2*100 + p3*10 + p4\n                        if num1 + num2 + num3 == 26352:\n                            return min(num1, num2, num3)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (a * b) + (a + b)\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Time required to make one cut\n    time_per_cut = 60 / (31 - 1)\n    \n    # Total time to cut into 50 segments\n    total_time = time_per_cut * (50 - 1)\n    \n    return total_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n    \n    while num < 100:\n        num += 3 * 5 * 7\n\n    return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    # Let x be the number we need to find\n    # According to the problem statement, x - 0.3 * x = 210\n    # Simplify the equation: x * (1 - 0.3) = 210\n    # Solve for x: x = 210 / (1 - 0.3)\n    x = 210 / (1 - 0.3)\n    return x\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002 \n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candy_initial = 11\n    nancy_initial = 9\n    \n    candy_now, flowers_given = symbols('candy_now flowers_given')\n    \n    # Nancy has 8 more flowers than Candy after the exchange\n    nancy_now = candy_now + 8\n    \n    # Candy gave some flowers to Nancy\n    # So we subtract those from Candy's initial count\n    equation1 = Eq(candy_now, candy_initial - flowers_given)\n    \n    # Nancy's new amount is her initial count plus what Candy gave\n    equation2 = Eq(nancy_now, nancy_initial + flowers_given)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candy_now, flowers_given))\n    \n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 0.45\n    final_cost = initial_cost * (1 + increase_percentage)\n    return final_cost\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temperature = -5  # Midnight on Friday\n    midday_temperature = 17   # Midday on Saturday\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    n = 1  # Initialize to the term value indicating the first term\n    term = 1\n    while term <= 50:\n        n += 1       # Move to the next term in the sequence\n        term += n    # Each term is obtained by adding n to the previous term\n\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n    total_paid_p = 1000  # 1 pound = 100 pence, so 10 pounds = 1000 pence\n\n    change_p = total_paid_p - total_cost_p\n    # Convert pence back to pounds for the final answer\n    change_pounds = change_p / 100\n\n    return change_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    sibel_position_from_back = 14\n    \n    total_people = people_in_front + sibel_position_from_back - 1\n    \n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # According to the knowledge base available till March 2021, the population of St. Petersburg, Russia is around 5.4 million.\n    # However, for an accurate answer as per the current date or any specific year, this data might require an update from an actual current source.\n    # Assuming the task is to convert the textual population number into numerical form without updating the data:\n    \n    population_text = 'five point four million'\n    population_numerical = 5400000  # Conversion of 'five point four million' to numerical form\n    \n    return population_numerical\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # 3-digit numbers range from 100 to 999\n        # Converting the number to a string to check digit differences\n        num_str = str(i)\n        first_digit, second_digit, third_digit = map(int, num_str)\n        if abs(first_digit - second_digit) >= 7 and abs(second_digit - third_digit) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousands in range(5, 10):\n        for hundreds in range(10):\n            for tens in range(10):\n                for ones in range(1, 10):  # ones cannot be zero to avoid division by zero\n                    if thousands % ones == 0 and (tens == 0 or thousands % tens == 0) and (hundreds == 0 or thousands % hundreds == 0):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # All the guesses provided\n    guess_1 = '5648'\n    guess_2 = '3628'\n    guess_3 = '3147'\n    guess_4 = '5629'\n    guess_5 = '1258'\n\n    # We go through the range of 0 - 9 for each of the four digit\n    for d1 in range(10):\n        for d2 in range(10):\n            for d3 in range(10):\n                for d4 in range(10):\n                    code = str(d1)+str(d2)+str(d3)+str(d4)\n\n                    # Define a function to count matching digits\n                    def match_count(attempt, code):\n                        return sum(1 for a, b in zip(attempt, code) if a == b)\n\n                    # Check conditions\n                    if (match_count(guess_1, code) == 2 and\n                        match_count(guess_2, code) == 2 and\n                        match_count(guess_3, code) == 2 and\n                        match_count(guess_4, code) == 2 and\n                        match_count(guess_5, code) == 0):\n                        return code  # return correct code when all conditions match\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n    solutions = solve(equation, x)\n    \n    return int(solutions[0])\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child,\n    # it means that there are (22 - 4) children between them\n    # in half of the circle.\n    children_between = 22 - 4\n    \n    # The total number of children in the circle is twice the number\n    # between the 4th and 22nd child, plus the 4th and 22nd themselves.\n    total_children = 2 * children_between + 2\n    \n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10  # The first week she collected 10 coins\n    difference = 4   # Each week the number of collected coins increases by 4\n    weeks = 10       # We want to find out the total for the first 10 weeks\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n-1)d), where S_n is the sum of n terms, a is the first term, and d is the difference\n    total_coins = weeks * (first_term + (weeks - 1) * difference) / 2\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    # Lily had 24 dresses, which is twice as many as Gina\n    gina = 24 / 2\n    # Gina had 4 times as many dresses as Fiona\n    fiona = gina / 4\n    # The total number of dresses Gina and Fiona have\n    total_dresses = gina + fiona\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's marks\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given average conditions\n    equation1 = Eq((A + B + C) / 3, 95)\n    equation2 = Eq((B + C + D) / 3, 94)\n    equation3 = Eq(E, 96)  # E's mark\n\n    # Given conditions about ranking and same scores\n    conditions = [\n        A > 96,  # A has the highest mark, meaning it's greater than E's\n        B == D,  # B and D have the same score\n        A > E,   # A's mark is higher than E's mark\n        B > 91,  # All scores above 91\n        C > 91,\n        D > 91,\n        E > 91\n    ]\n\n    # Solve the system of equations\n    solution_dict = solve((equation1, equation2, equation3, *conditions), (A, B, C, D, E))\n\n    # Filter the solution_dict for valid answers where A has the highest score and E is second\n    valid_solutions = [s for s in solution_dict if s[A] > s[E] and s[E]==96]\n\n    # Return the mark of D from the valid solutions list\n    D_mark = valid_solutions[0][D]\n    \n    return D_mark\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = 0\n    current_amount = principal\n\n    while current_amount < final_amount:\n        years += 1\n        current_amount += current_amount * rate\n\n    is_correct = (years == 5)\n    return (is_correct, years)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # total weight of male teachers = 3 * 75\n    # total weight of female teachers = x * 60\n    # total number of teachers = x + 3\n    # total weight of all teachers = (x + 3) * 65\n\n    # Set up the equation based on the average weight information provided\n    # (3 * 75 + x * 60) / (x + 3) = 65\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * 75 + x * 60) / (x + 3), 65)\n\n    # Solve for number of female teachers\n    num_female_teachers = solve(equation, x)[0]\n\n    return num_female_teachers\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    # Let x be the mass of the empty jar and y be the mass of Marmite per 1/4 of the jar.\n    # We can then set up the following equations:\n    # 1. x + 1/4 * y = 250g (mass of the jar when 1/4 full)\n    # 2. x + 3/4 * y = 350g (mass of the jar when 3/4 full)\n\n    # By solving these equations:\n\n    # From equation 1, we can express y as:\n    # y = (250 - x) * 4\n\n    # Substitute y in equation 2:\n    # x + 3/4 * (250 - x) * 4 = 350\n    # x + 3 * (250 - x) = 350\n    # x + 750 - 3x = 350\n    # -2x = -400\n    # x = 200\n\n    # The mass of the empty jar is:\n    x = 200\n    return x\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_capacity_liters = 9.1\n    cup_capacity_ml = 350\n    liters_per_cup = cup_capacity_ml / 1000\n\n    soda_for_bottle = bottle_capacity_liters * (1/7)\n    soda_for_cups = 4 * liters_per_cup\n\n    soda_left = total_soda_liters - soda_for_bottle - soda_for_cups\n    \n    return soda_left\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    father, son = symbols('father son')\n    \n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n    \n    solutions = solve((equation1, equation2), (father, son))\n    \n    return solutions[father]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n    \n    # Given values\n    m = 2.0       # mass in kg\n    k = 500       # spring constant in N/m\n    A = 8.0 / 100 # amplitude in meters (converted from cm to m)\n    x = 4.0 / 100 # distance from equilibrium in meters (converted from cm to m)\n\n    # Total energy (E) of the oscillator is given by the formula E = (1/2) * k * A^2\n    E = 0.5 * k * A**2\n\n    # Maximum speed (v_max) of the block is given by v_max = ω * A,\n    # where ω (omega) is the angular frequency and A is the amplitude.\n    # Angular frequency ω can be calculated as ω = sqrt(k/m)\n    omega = sqrt(k/m)\n    \n    # Speed of the block (v) at position x is given by v = ω * sqrt(A^2 - x^2)\n    v = omega * sqrt(A**2 - x**2)\n\n    return (E, v)\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    ans = 1  # Rose takes 1 marble.\n    # After Rose's turn, there will always be an odd number of marbles. This means no matter how many marbles Kylie takes (1 or 2),\n    # Rose can always pick 1 or 2 marbles to leave an odd number. Eventually, Rose will force Kylie to take the second last marble, \n    # leaving the last for herself. Therefore, by taking 1 marble, Rose can ensure her victory in a perfect play scenario.\n    return ans\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # £45 in pence\n    coin_value = 5  # value of a 5p coin in pence\n    num_coins = total_pence // coin_value\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the distance Bud runs each minute\n    x = symbols('x')\n    # Pip runs x + 20 metres each minute\n    # Total distance run by Pip and Bud in 3 minutes is 540 metres\n    equation = Eq(3 * x + 3 * (x + 20), 540)\n\n    # Solve for x\n    bud_per_minute = solve(equation, x)[0]\n    # Calculate distance run by Pip in 3 minutes\n    pip_total = 3 * (bud_per_minute + 20)\n\n    return pip_total\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C_initial, C_final = symbols('A B C_initial C_final')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(A, 4 * B)                                # A contains four times as many coins as B\n    equation2 = Eq(C_final, C_initial + 0.06 * A + 0.20 * B)  # Coins transferred to Box C\n    equation3 = Eq(C_final, C_initial * 1.22)                # C_final is 22% more than original C\n    equation4 = Eq(C_final, 1220)                            # Box C has 1220 coins at the end\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C_initial, C_final))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    initial_coffee_percentage = 60\n    final_coffee_percentage = 40\n\n    # Let's assume Sally had 100 bottled drinks initially for simplicity.\n    # You can assume any number, results will be the same as we'll calculate percentage.\n    initial_total_bottles = 100\n    initial_coffee_bottles = (initial_coffee_percentage / 100) * initial_total_bottles\n    initial_tea_bottles = initial_total_bottles - initial_coffee_bottles\n    \n    final_total_bottles = initial_coffee_bottles / (final_coffee_percentage / 100)\n    final_tea_bottles = final_total_bottles - initial_coffee_bottles\n    \n    increase_in_tea_bottles = final_tea_bottles - initial_tea_bottles\n    percentage_increase_in_tea = (increase_in_tea_bottles / initial_tea_bottles) * 100\n    \n    return percentage_increase_in_tea\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # convert hexadecimal numbers to integers\n    num1 = int('2A3', 16)\n    num2 = int('17B', 16)\n    \n    # sum the integers\n    sum_num = num1 + num2\n\n    # convert the sum back to hexadecimal representation\n    ans = hex(sum_num)[2:].upper()\n    \n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = 25 / 100 * 30 / 100 * 40 / 100 * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = 5 * 2 + 2 * 5 + 3 * 10\n    total_flowers = 5 + 2 + 3\n    average_price = total_revenue / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tricycles, cars = symbols('tricycles cars')\n    \n    # Equation 1: number of vehicles (tricycles + cars = 24)\n    eq1 = Eq(tricycles + cars, 24)\n    \n    # Equation 2: total number of wheels (3 * tricycles + 4 * cars = 86)\n    eq2 = Eq(3 * tricycles + 4 * cars, 86)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (tricycles, cars))\n    \n    return solutions[tricycles]\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_pounds = 1.10\n    \n    # Convert pounds to pence\n    james_money_p = james_money_pounds * 100\n    \n    total_money_p = lewis_money_p + james_money_p\n    \n    # Convert back to pounds\n    ans = total_money_p / 100\n    return ans\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "def solution():\n    from math import factorial as fact\n\n    total_letters = 7  # Length of the word 'WINNING'\n    n_i = 3  # Number of 'N's\n    n_g = 1  # Number of 'G's\n    n_w = 1  # Number of 'W's\n    n_i = 2  # Number of 'I's\n\n    # Total permutations = 7! / (3! * 2! * 1! * 1!)\n    permutations = fact(total_letters) // (fact(n_i) * fact(n_g) * fact(n_w) * fact(n_i))\n\n    return permutations\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # We subtract 3 books for each stack initially because each stack must have at least 3 books.\n    # So we distribute the remaining (13 - 3*3) = 4 books.\n    for x1 in range(4+1):  # x1 can be between 0 and 4\n        for x2 in range(4+1):  # x2 can be between 0 and 4\n            x3 = 4 - x1 - x2  # x3 is the remainder of the books\n            if 0 <= x3 <= 4:  # x3 must be non-negative and can't exceed the number of remaining books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import Derivative, Symbol\n\n    # This problem is known as a derangement problem or subfactorials.\n    # The formula for derangement is !n = (n! / e) where n is the number of items.\n\n    n = 6  # number of students\n    \n    # Since direct calculation of the derangement using factorial and division by e might\n    # not be precise, we use an alternative way to compute it: !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    derangement = factorial(n)\n    for i in range(1, n + 1):\n        derangement += (-1)**i * factorial(n) / factorial(i)\n\n    return int(derangement)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all possible permutations of 9 numbers out of 13\n    all_nine_combinations = list(permutations(range(1, 14), 9))\n    possible_combinations = []\n\n    # Filter the permutations based on the conditions given\n    for combination in all_nine_combinations:\n        factors_count = [sum(combination[i] % j == 0 for j in range(1, combination[i] + 1)) for i in range(9)]\n        # Two students know the count of factors of their numbers, which means these counts are unique in the context\n        # We check if there are exactly two unique factor counts\n        if len(set(factors_count)) == 7:\n            possible_combinations.append(combination)\n\n    # Based on Alice's and May's statements, refine the possible combinations\n    final_combinations = []\n    for combination in possible_combinations:\n        for idx, number in enumerate(combination):\n            if number % 2 == 1:  # Alice's number is odd\n                may_number = number - 2  # May's number is less by 2 than Alice's number\n                if may_number in combination:  # May's number must be in the group\n                    may_idx = combination.index(may_number)\n                    if may_idx != idx and may_number + 1 in combination:  # May's number is bigger than Mark's by 1\n                        # Now make sure no other student can deduce their number based on factor count\n                        factors_count = [sum(num % j == 0 for j in range(1, num + 1)) for num in combination]\n                        unique_factors_count = [factors_count.count(x) for x in factors_count]\n                        if unique_factors_count.count(1) == 2:  # Only two students should have unique factor count\n                            final_combinations.append(combination)\n\n    # Calculate products of numbers not picked in each valid combination\n    # as we expect one solution based on the problem constraints\n    products_not_picked = []\n    for final_combination in final_combinations:\n        all_numbers = set(range(1, 14))\n        picked_numbers = set(final_combination)\n        not_picked_numbers = all_numbers - picked_numbers\n        product = 1\n        for number in not_picked_numbers:\n            product *= number\n        products_not_picked.append(product)\n\n    # Given the problem, we expect only one valid answer\n    return products_not_picked[0] if products_not_picked else None\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the symbols for the number of lemonade and 1000 Plus bottles\n    lemonade, plus_1000 = symbols('lemonade plus_1000', integer=True)\n\n    # Create equations based on the problem statement\n    total_bottles = Eq(lemonade + plus_1000, 350)\n    total_income = Eq(4*lemonade + 7*plus_1000, 2012)\n\n    # Use sympy's solve function to find the solutions of the system of equations\n    solutions = solve((total_bottles, total_income), (lemonade, plus_1000))\n\n    # Find and sort the solutions by the number of 1000 Plus bottles sold\n    valid_solutions = [(int(s[lemonade]), int(s[plus_1000])) for s in solutions if s[lemonade] >= 0 and s[plus_1000] >= 0]\n    valid_solutions.sort(key=lambda x: x[1])  # sort by the number of 1000 Plus bottles\n\n    # Return the minimum number of 1000 Plus bottles sold\n    return valid_solutions[0][1]\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Given the original ratio 3:5 of blue to red pens\n    # Let the original number of blue pens be 3x and red pens be 5x\n    # So, 3x + 5x = 96 => 8x = 96 => x = 12\n    # Thus, original number of blue pens is 3x = 36, and red pens is 5x = 60\n\n    original_blue = 3 * 12\n    original_red = 5 * 12\n    \n    # When 60 red pens and y blue pens added, total pens become\n    # New blue pens = original blue + y\n    # New red pens = original red + 60 = 60 + 60 = 120\n    # New total pens = New blue pens + New red pens\n    # Also given that 40% of the pens are blue after adding pens\n    # So New blue pens = 0.4 * New total pens\n\n    # Let the number of blue pens added be y\n    # original_blue + y = 0.4 * (original_blue + y + 120)\n    \n    # Now solve for y\n    y = symbols('y')\n    equation = Eq(original_blue + y, 0.4 * (original_blue + y + 120))\n    y_value = solve(equation, y)\n    \n    return y_value[0]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n\n    # Using the formula F = m * a, where a is the acceleration\n    # To find the acceleration, we use the formula a = (v - u) / t, where v is final velocity and u is initial velocity (u = 0 since the object is stationary)\n\n    initial_velocity = 0  # m/s, since the object is stationary\n    acceleration = (final_velocity - initial_velocity) / time  # m/s^2\n    force = mass * acceleration  # Newtons\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    a = 3  # Box size of 3 wings\n    b = 7  # Box size of 7 wings\n\n    # Using the Chicken McNugget Theorem. For any two relatively prime positive integers\n    # a and b, the greatest number that can't be formed by a combination of a and b\n    # is a*b - a - b.\n    \n    ans = a * b - a - b  # Calculating the largest number that can't be purchased\n    \n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    \n    # Given equation 1: correct = 12 + 3 * incorrect\n    equation1 = Eq(correct, 12 + 3 * incorrect)\n    \n    # Total points equation: 5 * correct - 2 * incorrect = 151\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n    \n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    number_of_friends = 11\n    \n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / number_of_friends\n    \n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers from base 7 to decimal\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n\n    # Add the numbers in decimal\n    sum_decimal = num1 + num2\n\n    # Convert the sum back to base 7\n    ans = \"\"\n    while sum_decimal > 0:\n        ans = str(sum_decimal % 7) + ans\n        sum_decimal //= 7\n\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Each match involves two players. \n    # We can calcluate the total matches by half of the sum of individual matches.\n    total_individual_matches = 4 + 6 + 2 + 1 + 3 + 5  # matches played by A, B, C, D, E, and G\n    # Since F has played an unknown number of matches which we represent as x, \n    # the number of matches played by F should be added to the above sum.\n    # The total matches played should be even because every match has two players.\n    # We can find the smallest even number not less than total_individual_matches to find the total matches played.\n\n    # Calculate the total number of matches by taking the current sum of matches, \n    # adding the unknown number of matches played by F, and dividing by 2 (since every match has 2 players).\n    # If the sum is odd, one more match (involving F) would make it even.\n\n    total_matches = (total_individual_matches + 1) // 2 if total_individual_matches % 2 != 0 else total_individual_matches // 2\n    \n    # Since we've added x matches of player F and made sure the total sum is even, \n    # we now subtract the pairs we've counted without F to find x.\n    matches_played_by_F = total_matches - (total_individual_matches // 2)\n\n    return matches_played_by_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Import the library for calculating the Least Common Multiple (LCM)\n    from math import gcd, lcm\n\n    # Find the least common multiple of the first 20 natural numbers\n    all_lcm = lcm(*range(1, 21))\n    \n    for i in range(1, 20):\n        # Compute the LCM of all numbers except two consecutive ones\n        lcm_without_consecutive = lcm(*range(1, i), *range(i+3, 21))\n        \n        # Check if the LCM without two consecutive numbers is a divisor of the LCM of all 20\n        # This implies that those two numbers do not divide N\n        if all_lcm % lcm_without_consecutive == 0:\n            # Sum of the two consecutive numbers\n            return i + (i+1)\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Cici's and Linda's ages\n    cici, linda = symbols('cici linda')\n\n    # Cici was born means Cici's age is 0 when Linda was 11 years old\n    equation1 = Eq(cici, 0)\n    equation2 = Eq(linda, 11)\n\n    # The sum of their ages 4 years later will be 37\n    equation3 = Eq((cici + 4) + (linda + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cici, linda))\n\n    # Calculate Linda's age 3 years later\n    lindas_age_later = solutions[linda] + 3\n\n    return lindas_age_later\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the number of stamps Natasha has be x\n    # Then the number of stamps Jamie-Anne has will be x + 18\n    # According to the problem, the ratio (Jamie-Anne's stamps):(Natasha's stamps) is 5:3\n    # So, we have (x + 18) / x = 5 / 3\n\n    # Solving the equation for x gives us the number of stamps Natasha has,\n    # and x + 18 gives us the number of stamps Jamie-Anne has.\n    # Total stamps will be x + (x + 18)\n\n    # Solving the proportions\n    ratio_jamie_to_natasha = 5 / 3\n    x = 18 / (ratio_jamie_to_natasha - 1)\n\n    # Calculate total number of stamps they have\n    total_stamps = x + (x + 18)\n    return int(total_stamps)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = 0\n    for num in range(161, 15*15):  # 15*15 is the largest number that can be formed with the same quotient and remainder\n        if num % 15 == num // 15:\n            ans += num\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Using the arithmetic series sum formula: sum = n/2 * (first_term + last_term)\n    sum_series = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_series)\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # meters\n    speed_uphill = 10  # meters per minute\n    speed_downhill = 30  # meters per minute\n\n    time_uphill = distance_one_way / speed_uphill  # minutes\n    time_downhill = distance_one_way / speed_downhill  # minutes\n\n    total_time = time_uphill + time_downhill  # minutes\n    total_distance = 2 * distance_one_way  # meters, round trip\n\n    average_speed = total_distance / total_time  # meters per minute\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_people = 4\n    num_entrances = 5\n    \n    # Since each person can choose any of the 5 entrances independently,\n    # and the order in which they enter the zoo matters,\n    # each person has 5 choices, making it 5^4 in total.\n    ways = num_entrances ** num_people\n\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    number_of_bags = total_peaches // peaches_per_bag\n    return number_of_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of apples, pears, and oranges that can be distributed\n    apples_distributable = 226 - 10\n    pears_distributable = 352 - 28\n    oranges_distributable = 157 - 13\n\n    # Find the greatest common divisor of the distributable fruits\n    gcd_1 = gcd(apples_distributable, pears_distributable)\n    gcd_final = gcd(gcd_1, oranges_distributable)\n\n    return gcd_final\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "from math import factorial\n\ndef solution():\n    # Total number of friends including Judy\n    total_friends = 6\n\n    # Judy can stand either at the first place or the last place, so there are 2 choices for Judy\n    judy_positions = 2\n\n    # The rest (total_friends - 1) people can stand in any order\n    # The number of different ways to arrange them is (total_friends - 1) factorial\n    arrangement_ways = factorial(total_friends - 1)\n\n    # Use the multiplication rule to find the total number of different ways\n    total_ways = judy_positions * arrangement_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number1 = 6\n    lcm = 12\n\n    for i in range(1, lcm + 1):\n        if lcm % i == 0 and i % number1 == 0 and i != number1:\n            number2 = i\n            if (number1 % 2 == 0 and number2 % 2 == 0) or (number1 % 2 != 0 and number2 % 2 != 0):\n                continue\n            else:\n                return number2\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    number = 1\n    while digit_count < 200:\n        digit_count += len(str(number))\n        if digit_count < 200:\n            number += 1\n    return int(str(number)[-(digit_count - 200) - 1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let q be the number of qualified products and u be the number of unqualified products\n    \n    # Total number of products for 4 days\n    total_products = 500 * 4\n\n    # Hypothetical situation if all products are qualified\n    all_qualified_points = total_products * 5\n    \n    # Actual points scored\n    actual_points = 9931\n\n    # Difference between hypothetical and actual points\n    diff_points = all_qualified_points - actual_points\n    \n    # Each unqualified product contributes to a loss of (5 + 18) points as it gets 0 instead of 5\n    # and also loses 18 points.\n    loss_per_unqualified_product = 5 + 18\n\n    # Finding the number of unqualified products from the difference and loss per unqualified product\n    unqualified_products = diff_points // loss_per_unqualified_product\n    \n    # Finding the number of qualified products\n    qualified_products = total_products - unqualified_products\n\n    return qualified_products\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    price = cost + 40\n    sale_price = price * 0.8\n    profit = sale_price - cost\n    \n    equation = Eq(profit, 12)\n    solution = solve(equation, cost)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # original numbers\n    equation1 = Eq(hens, 6 * roosters)\n\n    # after increasing the numbers\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_initial = 7 * 12\n    total_final = 8 * 11\n    eighth_number = total_final - total_initial\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    ans = sum(range(1, 9)) + sum(range(1, 9)) + sum(range(7, 0, -1)) + sum(range(1, 3))\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_sequence = \"538462\"\n\n    index = (2021 - 1) % len(recurring_sequence)\n\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = sum(str(i).count('9') for i in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let d be the distance Baye walked when April met her 800m from Q.\n    # Since they started at the same time and met 800m from Q,\n    # the distance April walked is 1800 + 800 - d.\n\n    # Let's denote April's speed as A and Baye's speed as B.\n    # So, the time for both to meet is the same:\n    # Time for April = (1800 + 800 - d) / A\n    # Time for Baye = d / B\n\n    # Also, we know that April runs back to P at 4 times her original speed.\n    # So, the time it takes her to run back to P is:\n    # Time for April to run back = 800 / (4 * A)\n    # This is also the time Baye continues to walk towards Q.\n    \n    # Hence the distances are in the ratio:\n    # (1800 + 800 - d) / A = d / B = 800 / (4 * A)\n\n    # Which simplifies to:\n    # (2600 - d) / A = d / B = 200 / A\n    # Since the speed of April and Baye remains constant until they meet,\n    # their speed ratio is constant as well. Therefore, A / B is a constant.\n    # Let's denote the ratio A / B as R. Then we have:\n    # (2600 - d) / d = 200 / (800 / 4)\n    # (2600 - d) / d = 200 / 200\n    # 2600 - d = d\n    # 2600 = 2d\n    # d = 1300\n\n    # Since Baye is 1300m from P when they meet, the remaining distance to Q is:\n    # distance to Q = 1800 - 1300\n    baye_remaining_distance = 1800 - 1300\n\n    return baye_remaining_distance\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    position = 100\n\n    index = (position - 1) % len(sequence)\n\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    total_cost = 132\n    fraction_book = 1/3\n    fraction_bag = 2/5\n\n    total_fraction_spent = fraction_book + fraction_bag\n\n    original_amount = total_cost / total_fraction_spent\n\n    return original_amount\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for masses of parcels A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(A, 5 * B)               # A is 5 times B\n    equation2 = Eq(C, B - 75)              # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)         # Sum of A, B, and C is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Get the mass of Parcel A from the solutions\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Maximum beads drawn without getting 5 green beads would be:\n    # All 5 blue beads and 6 white beads, and 4 green beads\n    max_without_5_green = 5 + 6 + 4\n\n    # Since Darrell needs to get at least 5 green beads,\n    # one more bead drawn after the above number will guarantee the 5th green bead.\n    return max_without_5_green + 1\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    total_numbers = 105\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (5 * 7)\n\n    # Apply Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 216):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 99999 + 1):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    time_to_fourth_floor = 12\n    floors_walked = 4 - 1  # from the first floor to the fourth floor\n\n    # Since he walks at a constant speed, the time to walk is directly proportional to the number of floors.\n    time_to_eighth_floor = (time_to_fourth_floor / floors_walked) * (8 - 1)  # from the first floor to the eighth floor\n\n    return time_to_eighth_floor\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "from sympy import symbols, solve\n\ndef solution():\n    x, y, z = symbols('x y z')\n    equation = Eq(x + y + z, 6)\n    solutions = solve(equation, (x, y, z))\n\n    # To account for only the non-negative integer solutions and identical baskets\n    non_neg_solutions = [sol for sol in solutions if all(num.is_integer and num >= 0 for num in sol)]\n\n    # Divide by 3! since the baskets are identical (to account for permutations of the same solution)\n    distinct_combinations = len(non_neg_solutions) // 6\n\n    return distinct_combinations\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio\n    birds_to_squirrels = 8/5\n    # Squirrel increase by 20%\n    squirrel_increase = 1.2\n\n    # Calculate the new number of squirrels in terms of the original amount\n    new_squirrels = squirrel_increase * 5\n\n    # Total number of birds and squirrels remains the same (before: 8 birds + 5 squirrels)\n    total = 8 + 5\n\n    # Hence, the new number of birds (total - new squirrels)\n    new_birds = total - new_squirrels\n\n    # Calculate the percentage decrease in the number of birds\n    bird_decrease_percent = ((8 - new_birds) / 8) * 100\n\n    return bird_decrease_percent\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = (5 * a) - (2 * b)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Fiona, Gary, and Harold\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    # Equations based on the problem statement\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    per_day_increase = 4\n\n    # Calculate the number of days using arithmetic sequence sum formula:\n    # S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the sequence, n is the number of terms,\n    # a_1 is the first term, and a_n is the last term.\n    # Also, a_n = a_1 + (n - 1) * d, where d is the common difference.\n    # By rearranging the formula to find n, we get\n    # n = (a_n - a_1) / d + 1\n    \n    num_days = (last_day_pages - first_day_pages) / per_day_increase + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 3 + b % 3) + (a // 3 + b // 3) * 3\n\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3\n    juice_left = total_juice - 9\n    containers_needed = -(-juice_left // 5) # Ceiling division to get the number of full containers needed\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 8\n    position = 5\n\n    next_term = first_term + (position - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve, N\n\n    # Define symbols and equations based on the problem statements\n    D, A, R, T, C = symbols('D A R T C', integer=True)\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n\n    # Set the constraints for the symbols: they should not be 0 and should be different integers\n    constraints = (\n        D != A, D != R, D != T, D != C,\n        A != R, A != T, A != C,\n        R != T, R != C,\n        T != C,\n        \n        D > 0, A > 0, R > 0, T > 0, C > 0,\n        D < 10, A < 10, R < 10, T < 10, C < 10\n    )\n\n    # Solve the equations under the constraints\n    solutions = solve((equation1, equation2, equation3) + constraints)\n\n    # Find the largest possible value of A + R + T from the solutions\n    max_art = max(map(lambda sol: sol[A] + sol[R] + sol[T], solutions))\n\n    return max_art\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 81):  # Loop through range of possible A values\n        if 5/9 < 9/A < 1:   # Check if the inequality is satisfied\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    required_loafs = 35\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Equation representing the total students\n    equation_total = Eq(boys + girls, 39)\n    # Equation representing the given condition: 1/4 of the boys is equal to 2/5 of the girls\n    equation_condition = Eq(1/4 * boys, 2/5 * girls)\n\n    # Solving the system of equations\n    solutions = solve((equation_total, equation_condition), (boys, girls))\n\n    # Number of more boys than girls\n    boys_more_than_girls = solutions[boys] - solutions[girls]\n\n    return boys_more_than_girls\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1  # Tanya herself\n\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    number = 87878\n    largest_prime_factor = max([i for i in primerange(1, 10000) if number % i == 0])\n    \n    return largest_prime_factor\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # First section of the race\n    distance1 = 280\n    speed1 = 7\n    time1 = distance1 / speed1\n\n    # Middle section of the race\n    distance2 = 400\n    speed2 = 5\n    time2 = distance2 / speed2\n\n    # Final section of the race\n    distance3 = 800 - (distance1 + distance2)  # remaining distance\n    speed3 = 8\n    time3 = distance3 / speed3\n\n    # Total time taken\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_crate_weight = 24 * 5\n    max_load_per_van = 12\n    vans_needed = -(-total_crate_weight // max_load_per_van)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, patrick = symbols('daniel patrick')\n    \n    # Daniel gives away 24 stickers\n    # Patrick buys another 10 stickers\n    # Patrick has twice as many stickers as Daniel\n    equation1 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Daniel and Patrick had an equal number of stickers at first\n    equation2 = Eq(daniel, patrick)\n    \n    solutions = solve((equation1, equation2), (daniel, patrick))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    memo = {}\n\n    def count_partitions(n, largest_number):\n        if n == 0:\n            return 1\n        elif n < 0 or largest_number == 0:\n            return 0\n        if (n, largest_number) in memo:\n            return memo[(n, largest_number)]\n        \n        memo[(n, largest_number)] = count_partitions(n, largest_number - 1) + count_partitions(n - largest_number, largest_number)\n        return memo[(n, largest_number)]\n\n    ans = count_partitions(5, 5)\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + (3 * henry_situps)\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Whale is 82 metres below sea level\n    plane_height = 569  # Plane is 569 metres above sea level\n\n    vertical_distance = plane_height - whale_depth  # Calculate the vertical distance\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    max_left_handed_girls = girls - (total_pupils - right_handed)\n    right_handed_girls = girls - max_left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # To minimize the difference between two nine-digit numbers containing all digits 1 to 9, we should minimize the higher place values and maximize the lower place values for the smaller number, while doing the opposite for the larger number.\n    # The smallest number would hence start with 1, and the largest number would start with 9\n\n    # The largest number will have 9 in the highest place, followed by 8, 7, 6, 5, 4, 3, 2, 1\n    # The smallest number will have 1 in the highest place, followed by 0, 2, 3, 4, 5, 6, 7, 8\n    # We are just switching the places of 1 and 9 to make sure we get the smallest and largest possible numbers\n\n    # Therefore, the two numbers are 123456789 and 987654321\n    smallest_number = int(\"123456789\")\n    largest_number = int(\"987654321\")\n\n    # Subtracting the smaller number from the larger gives us the smallest possible difference\n    difference = largest_number - smallest_number\n    \n    return difference\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    apples = (2/3) * total_fruits\n    bananas = (1/9) * total_fruits\n    lemons = total_fruits - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    solutions = solve((equation,), (total_fruits,))\n\n    num_lemons = lemons.subs(total_fruits, solutions[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    workers_start = 1\n    total_days = 9\n\n    total_skirts = sum((workers_start + day) * skirts_per_worker for day in range(total_days))\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    ans = 234000 // 520\n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n    \n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Time taken for 5 taps to fill 1 litre\n    time_for_5_taps = 2  # minutes\n\n    # Total capacity filled by 5 taps in the given time\n    total_capacity_5_taps = 1  # litre\n\n    # Capacity filled by one tap in the given time\n    capacity_per_tap = total_capacity_5_taps / 5  # litre per tap\n\n    # Time taken for one tap to fill 1 litre (by unitary method)\n    time_for_1_tap_for_1_litre = time_for_5_taps / capacity_per_tap  # minutes\n\n    # Since we need to find out the time for one tap to fill 500 ml, which is half of a litre\n    time_for_1_tap_for_500_ml = time_for_1_tap_for_1_litre / 2  # minutes\n\n    return time_for_1_tap_for_500_ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n    total_erasers = 246\n    difference = 32\n\n    # John has 32 more erasers than his brother\n    equation1 = Eq(john, brother + difference)\n    # Combined, they have a total of 246 erasers\n    equation2 = Eq(john + brother, total_erasers)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The height difference in cm\n\n    sally_height = ben_height + difference  # Calculate Sally's height\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children, men + 140)\n    \n    total_visitors_solution = solve(equation, total_visitors)\n    \n    return total_visitors_solution[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n    \n    for p in permutations(digits, 3):\n        remaining_digits = set(digits) - set(p)\n        for p2 in permutations(remaining_digits, 3):\n            num1 = p[0] * 100 + p[1] * 10 + p[2]\n            num2 = p2[0] * 100 + p2[1] * 10 + p2[2]\n            total = num1 + num2\n            if total > max_sum:\n                max_sum = total\n\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume_ml = 2000  # Convert 2 liters to millilitres\n    drank_volume_ml = 350\n    remaining_volume_ml = initial_volume_ml - drank_volume_ml\n    return remaining_volume_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    result = 0.4 * 3280\n    return result\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # The rate at which horses eat grass per day\n    horse_rate = 1 / 12\n    # The rate at which sheep eat grass per day\n    sheep_rate = 1 / (60 * 4)\n\n    # The total eating rate of 12 horses\n    total_horse_rate = 12 * horse_rate\n    # The total eating rate of 88 sheep\n    total_sheep_rate = 88 * sheep_rate\n\n    # The total eating rate of 12 horses and 88 sheep\n    total_rate = total_horse_rate + total_sheep_rate\n\n    # Calculate the number of days 12 horses and 88 sheep can eat all grass\n    days = 1 / total_rate\n\n    return days\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Recognizing the pattern:\n    # The sequence is alternating between adding 7 and doubling the number\n    # We can deduce the pattern by observing the changes step by step\n    # 1 (x2) -> 8 (+7) -> 16 (x2) -> 23 (+7) -> 46 (x2) -> 53 (+7) -> next number\n    # Therefore, the next operation should be a multiplication by 2\n\n    last_number = 53  # The last number in the sequence given\n    next_number = last_number * 2  # The next number is double the last number\n\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the capacities of inlets A, B, and C be a, b, c respectively.\n    a, b, c = symbols('a b c')\n    \n    # Given that flow rate of B is twice that of A.\n    equation1 = Eq(b, 2 * a)\n    \n    # When A and C are turned on, the pool can be filled and A contributes 18 tons.\n    equation2 = Eq(a + c, 18)\n    \n    # When B and C are turned on, the pool can be filled and B contributes 27 tons.\n    equation3 = Eq(b + c, 27)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # The total capacity of the pool is the sum of A's and B's contributions when C is turned on.\n    pool_capacity = solutions[a] + solutions[b]\n\n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    payment_per_match = 500\n    payment_per_goal = 100\n    number_of_matches = 20\n    goals_per_game = 2\n\n    total_earnings = (payment_per_match * number_of_matches) + (payment_per_goal * goals_per_game * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    for m in range(1, 10):\n        for a in range(10):\n            for t in range(10):\n                for h in range(10):\n                    if len({m, a, t, h}) == 4:\n                        if (m*1000 + a*100 + t*10 + h) + (h*1000 + t*100 + a*10 + m) == 12221:\n                            return a + m + t + h\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    count = 10\n    ans = sum(range(start, start + 2 * count, 2))\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No restrictions\n    no_seven = 8 * 9 * 9  # No 7 present anywhere\n    \n    # At least two sevens:\n    # Case 1: The first and second digits are sevens: _77 -> 1 possibility for the first (7), 1 for the second (7), 10 for the third (0-9)\n    first_second_seven = 1 * 1 * 10\n    # Case 2: The first and third digits are sevens: 7_7 -> 1 possibility for the first (7), 9 for the second (non-7), 1 for the third (7)\n    first_third_seven = 1 * 9 * 1\n    # Case 3: The second and third digits are sevens: _77 -> 9 possibilities for the first (1-9), 1 for the second (7), 1 for the third (7)\n    second_third_seven = 9 * 1 * 1\n\n    # Subtract no_sevens from total_three_digit_numbers to get at least one seven\n    # Then subtract cases with exactly one seven from the result to get at least two sevens\n    exactly_one_seven = (9 * 1 * 9) + (9 * 9 * 1) + (1 * 9 * 9)  # Only one seven in each place\n    at_least_two_sevens = total_three_digit_numbers - no_seven - exactly_one_seven\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n    \n    cost_per_ball = total_cost / total_balls\n    \n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes and y be the number of $5 notes.\n    x, y = symbols('x y')\n\n    # Initially, Cindy had a total of 55 pieces of notes.\n    equation1 = Eq(x + y, 55)\n\n    # She spent 1/3 of the $2 notes.\n    spent_two_notes = x / 3\n\n    # She received another 8 pieces of $5 notes.\n    new_five_notes = y + 8\n\n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes.\n    remaining_notes = x - spent_two_notes + new_five_notes\n    equation2 = Eq(new_five_notes, 3/7 * remaining_notes)\n\n    # Solve the system of equations to find the number of $2 and $5 notes.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total amount of money Cindy had at first.\n    total_money = solutions[x] * 2 + solutions[y] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial as fact\n\ndef solution():\n    # Mr. Spencer and his 2 children can be seen as a single unit,\n    # with Mr. Spencer being in the middle (1 way to arrange within the unit).\n    unit_spencer_children = 1\n\n    # There are 4! ways to arrange the unit and the 3 other people.\n    perm_other_people = fact(4)\n\n    # Mr. Spencer's unit can sit in 4 different places (choosing 1 of the 4 places\n    # for the unit to start, given that they take up 3 seats).\n    places_for_unit = 4\n\n    # Total arrangements = arrangements of all individuals x places for Mr. Spencer's unit\n    total_arrangements = perm_other_people * places_for_unit * unit_spencer_children\n\n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    initial_sweets = 60\n    sweets_after_eating = initial_sweets / 2\n    sweets_given_away = sweets_after_eating / 3\n    sweets_left = sweets_after_eating - sweets_given_away\n\n    return int(sweets_left)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_marks = 5\n    wrong_marks = -2\n    total_questions = 6\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_marks + wrong * wrong_marks == total_marks:\n            return correct\n            \nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    smallest_sum = float('inf') # Start with infinity as the smallest sum of A + C\n    # Since A * B = 24, we look at the factors of 24\n    factors_of_24 = [1, 2, 3, 4, 6, 8, 12, 24]\n    \n    # Since B * C = 52, we look at the factors of 52 and match with factors of 24 (common B)\n    factors_of_52 = [1, 2, 4, 13, 26, 52]\n    \n    # We look for common factors of 24 and 52 which will be our potential B values\n    common_factors = set(factors_of_24).intersection(factors_of_52)\n    \n    # For each common B, find corresponding A and C and check if their sum is smaller than the smallest found\n    for B in common_factors:\n        A = 24 // B # A = 24 / B\n        C = 52 // B # C = 52 / B\n        A_plus_C = A + C\n        if A_plus_C < smallest_sum:\n            smallest_sum = A_plus_C\n    \n    return smallest_sum\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time = distance / speed\n    return time\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Treat ABC as one unit and EF as another unit\n    remaining_students = 8 - 3 - 2 + 2  # The \"+2\" is to add the units back\n    \n    # Calculate permutations of remaining units and individual students\n    unit_and_students_permutations = factorial(remaining_students)\n    \n    # Calculate permutations within the ABC unit and the EF unit\n    abc_permutations = factorial(3)\n    ef_permutations = factorial(2)\n    \n    # Multiply permutations of units with permutations within units\n    total_permutations = unit_and_students_permutations * abc_permutations * ef_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Set up the equation: (number / 3) + 7 = 18\n    # Solve for the original number: (18 - 7) * 3\n    original_number = (18 - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # Odd numbers follow a simple arithmetic sequence with a common\n    # difference of 2. The first term is 1.\n    first_odd = 1\n    common_difference = 2\n    # To find the nth term of an arithmetic sequence,\n    # we use the formula: nth_term = first_term + (n - 1) * common_difference\n    nth_odd = first_odd + (20 - 1) * common_difference \n    return nth_odd\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of scarfs produced per day as 'x'.\n    x = symbols('x')\n\n    # The original plan was to produce x scarfs per day for 6 days: 6x scarfs in total.\n    # With increased productivity, she would produce (x+24) scarfs per day for (6-2) days: 4*(x+24) scarfs in total.\n    # Both expressions should result in the same total number of scarfs produced.\n    equation = Eq(6*x, 4*(x + 24))\n\n    # Solving the equation will give us the original number of scarfs produced per day.\n    original_per_day = solve(equation, x)[0]\n\n    # The total number of scarfs to be produced (original plan) is then 6 times the number of scarfs produced per day.\n    total_scarfs = 6 * original_per_day\n\n    return total_scarfs\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of students\n    # If each student gets 6 sweets, the shortage is 26 sweets\n    # If each student gets 5 sweets, the shortage is 5 sweets\n    # This implies that giving one more sweet to each student would require x more sweets\n    # So, x = 26 - 5 = 21 (the difference in shortages)\n    \n    students = 26 - 5\n    \n    # Now we use the second scenario to find the total sweets\n    # If each student gets 5 sweets and the shortage is 5 sweets, \n    # then the total sweets is 5 (sweets per student) * 21 (students) + 5 (shortage)\n    \n    total_sweets = 5 * students + 5\n    \n    return total_sweets\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys / girls, 5 / 3)\n    equation2 = Eq((boys - 15) / girls, 5 / 6)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_pupils = solutions[boys] + solutions[girls]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x in range(1, 15):\n        for y in range(1, 15):\n            for z in range(1, 15):\n                if x + y + z == 15 and len({x, y, z}) == 3:\n                    count += 1\n    # Since we have considered permutations of the set (x,y,z), \n    # we need to divide by 3! which is 6 because a trio x,y,z can be arranged \n    # in 6 possible ways (x,y,z), (x,z,y), (y,x,z), (y,z,x), (z,x,y), (z,y,x).\n    return count // 6\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series = range(2, 15, 2)\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    import math\n\n    # Find the prime factors of 675\n    prime_factors = []\n    number = 675\n    for i in range(2, int(math.sqrt(number)) + 1):\n        while number % i == 0:\n            prime_factors.append(i)\n            number //= i\n    if number > 1:\n        prime_factors.append(number)\n\n    # Count the occurrences of each prime factor\n    prime_counts = {}\n    for factor in prime_factors:\n        if factor in prime_counts:\n            prime_counts[factor] += 1\n        else:\n            prime_counts[factor] = 1\n\n    # For each prime factor with an odd count, multiply B by the prime factor\n    B = 1\n    for prime, count in prime_counts.items():\n        if count % 2 == 1:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = 65 - 5\n    # Josh's age 5 years ago (3/5 of Shelby's age at that time)\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost = 6.95  # cost of 12 cans in pounds\n    single_can_cost = 65  # cost of 1 can in pence\n    total_single_cost = 12 * single_can_cost  # cost of 12 cans bought individually in pence\n    total_multipack_cost = multipack_cost * 100  # convert the multipack cost to pence\n\n    savings = total_single_cost - total_multipack_cost\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    valid_numbers = 0\n    \n    # Generate all numbers with the given digits\n    for i in range(3267, 5121):\n        # Convert number to a set of digits to compare with our digit set\n        digit_set = set(str(i))\n        if all(digit in {'1', '2', '3', '4', '5', '6'} for digit in digit_set) and len(digit_set) == len(str(i)):\n            valid_numbers += 1\n            \n    return valid_numbers\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n\n    return quarter_amount\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let A, B, and C represent the weights of Adam, Ben, and Carl respectively.\n\n    # From the question, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Adding all three equations, we get:\n    # 2(A + B + C) = 102 + 97 + 93\n    # Therefore:\n    total_double_weight = 102 + 97 + 93\n    total_weight = total_double_weight / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    rate_alan_bob = 1 / 4  # Combined rate of Alan and Bob working together\n    rate_bob = 1 / 6       # Bob's individual rate\n\n    # Alan's individual rate = combined rate - Bob's individual rate\n    rate_alan = rate_alan_bob - rate_bob\n\n    # Time Alan takes to paint on his own is the inverse of his rate\n    time_alan = 1 / rate_alan\n\n    return time_alan\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    ans = 55 / 100 * 80\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # Here, n (number of times interest is compounded per year) is 1 (yearly)\n    amount = principal * (1 + rate)**time\n    \n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10024\n    num2 = 3968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    total_weeks = 26\n\n    return weekly_food * total_weeks\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    solution = solve(equation, original_score)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes = 22 + 27 + 35  # Mark + Nicole + Peter\n    remaining_votes = total_votes - current_votes\n    half_votes = total_votes // 2 + 1 # we add 1 to be sure that Peter has more than half\n\n    peter_votes_needed = max(0, half_votes - 35)  # if number is negative, Peter already has enough votes\n    return peter_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, nicholas = symbols('alex nicholas')\n\n    equation1 = Eq(nicholas - 13, 6 * (alex - 58))\n    equation2 = Eq(alex, nicholas)\n\n    solutions = solve((equation1, equation2), (alex, nicholas))\n\n    total_money = solutions[alex] + solutions[nicholas]\n\n    return total_money\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    initial_value = 250\n    subtractions = 6 * 6 + 8 * 6  # six 6s and six 8s\n    ans = initial_value - subtractions\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    current_day_code = 1  # Monday is coded as 1\n    days_later = 28\n    day_of_week_code = (current_day_code + days_later) % 7\n    # Mapping day code to the corresponding output format\n    day_code_to_output = {0: '0007', 1: '0001', 2: '0002', 3: '0003', 4: '0004', 5: '0005', 6: '0006'}\n    return day_code_to_output[day_of_week_code]\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    \n    used_flour = total_flour - remaining_flour\n    \n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9**(3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    digit_value = 6 * 0.001\n    return digit_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    num = 52\n    denom = 2/3\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # Subtracting intervals at both ends and dividing by the interval distance.\n    num_poles = (road_length - 2 * interval) / interval\n    return int(num_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencils, rulers = symbols('pencils rulers')\n    \n    equation1 = Eq(pencils, rulers + 10)\n    equation2 = Eq(pencils + rulers, 52)\n\n    solutions = solve((equation1, equation2), (pencils, rulers))\n\n    return solutions[rulers]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    data = [11, 13, 17, 12]  # x is excluded for now.\n    total_sum = sum(data)\n    desired_mean = 11\n    dataset_count = len(data) + 1  # Including x.\n\n    # mean = total sum of all numbers / number of items\n    # desired_mean * dataset_count gives the total sum including x.\n    x_value = desired_mean * dataset_count - total_sum\n\n    return x_value\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The first 7 is in the thousands place, so its value is 7 * 1000 = 7000\n    first_seven_value = 7 * 1000\n    \n    # The second 7 is in the tens place, so its value is 7 * 10 = 70\n    second_seven_value = 7 * 10\n    \n    # The difference between the values of the two 7s\n    difference = first_seven_value - second_seven_value\n    \n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the cost of the blue dress\n    # Therefore cost of red dress will be b/2 and the cost of yellow dress will be b + 2.40\n    b = symbols('b')\n    equation = Eq(b + b/2 + b + 2.40, 65.40)\n    \n    # Solve the equation to find the cost of the blue dress\n    cost_blue = solve(equation, b)[0]\n    \n    return cost_blue\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Assuming the worst case scenario to pick the marbles so that we don't have 4 of the same color is:\n    # Pick 3 max of each before getting the same color\n    # So we can pick 3 red, 3 yellow, and 3 blue without getting 4 marbles of the same color.\n    # The next pick, regardless of the color, will ensure 4 marbles of the same color.\n\n    # 3 red + 3 yellow + 3 blue + 1 (any color)\n    min_marbles = 3 + 3 + 3 + 1\n\n    return min_marbles\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_to_girls_ratio = 5 / 6\n    number_of_boys = 200\n\n    number_of_girls = number_of_boys * (1 / boys_to_girls_ratio)\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = str(1 / 3)[2:]  # Get the repeating decimal part '333...'.\n    digits_sum = sum(int(digit) for digit in decimal_part[:1000])  # Sum the first 1000 digits.\n    return digits_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    return 0.15 * 29\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    return 100 // 2\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # Given the equation: 4 * x - 13 = 55\n    # We need to find the value of x.\n    # First, we add 13 to both sides of the equation to isolate the term with x.\n    # This gives us: 4 * x = 55 + 13.\n    \n    # Adding 13 to 55\n    result = 55 + 13\n    \n    # Now we have: 4 * x = result, where result is 68.\n    # Next, we divide both sides of the equation by 4 to solve for x.\n    # x = result / 4\n    \n    # Dividing result by 4\n    x = result / 4\n    \n    # Returning the value of x.\n    return int(x)\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percent = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percent + decimal\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n\n    # Find the prime factors and their multiples for the given years.\n    divisors_2016 = divisors(2016)\n    divisors_1377 = divisors(1377)\n\n    # Loop through the divisors of 2016 and check if any combination satisfies the condition\n    for age_x in divisors_2016:\n        for age_y in divisors_2016:\n            for age_z in divisors_2016:\n                if age_x * age_y * age_z == 2016 and (age_x - 1) * (age_y - 1) * (age_z - 1) == 1377:\n                    # We've found their current ages, calculate their ages two years ago and multiply them\n                    two_years_ago_product = (age_x - 2) * (age_y - 2) * (age_z - 2)\n                    return two_years_ago_product\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Treat the two people who want to stand next to each other as one unit.\n    # So we have 4 units to arrange.\n    units_to_arrange = factorial(4)\n\n    # The two people can switch places within their unit in 2 ways.\n    switch_places = 2\n\n    # Multiply the arrangements of units with the arrangements within the unit.\n    total_arrangements = units_to_arrange * switch_places\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_apples_first_3_days = 33\n    average_last_4_days = 18\n    last_4_days = average_last_4_days * 4\n    total_week = total_apples_first_3_days + last_4_days\n    average_week = total_week / 7\n    return average_week\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal_1 = 12\n    nickel_percent_1 = 40\n    weight_metal_2 = 13\n    nickel_percent_2 = 60\n\n    nickel_metal_1 = (nickel_percent_1 / 100.0) * weight_metal_1\n    nickel_metal_2 = (nickel_percent_2 / 100.0) * weight_metal_2\n\n    total_weight = weight_metal_1 + weight_metal_2\n    total_nickel = nickel_metal_1 + nickel_metal_2\n\n    percent_concentration = (total_nickel / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player exactly once.\n    # Therefore, each player plays 7 games since there are 7 other players.\n    # The champion, having the highest number of wins, can win at most 7 games.\n\n    # We know that everyone scores a different number of wins and there are no ties. This means that the number of\n    # wins are distributed from 0 to 7, inclusive.\n\n    # Assign the number of wins to each player such that they all have different numbers. Since the champion will\n    # have the most number of wins, and there are 7 different possible win counts, the champion must have 7 wins.\n    ans = 7\n\n    return ans\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        sum_to_n = (n * (n + 1)) // 2\n        if sum_to_n > 3405:\n            break\n        if (3405 - sum_to_n) % (n + 1) == 0:\n            ans = (3405 - sum_to_n) // (n + 1)\n            return ans\n        n += 1\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration in container A (in percent)\n    x = symbols('x')\n\n    # The amount of pure substance in the original solution put into container A is x * 10 grams\n    # After putting 10g of this solution into container B, container A has (30 + 10) grams of liquid\n    # Since 10g from A is added to B, B now has (40 + 10) grams of liquid\n    # Finally, when 10g from B is added to C, C has (50 + 10) grams of liquid\n\n    # Concentration in B just after transferring from A: \n    # 10 grams of the solution from A has x% concentration, so B has 0.1 * x grams of the substance.\n    # The total amount of substance in B converts into ([0.1 * x + 40 * 0] / 50)\n\n    # Concentration in C just after transferring from B:\n    # We need to take into account the substance transferred from A to B and then from B to C. \n    # 0.1 grams from the first transfer and 0.1 * ([0.1 * x + 40 * 0] / 50) grams from the second transfer\n    # Total substance in container C is (0.1 + 0.1 * ([0.1 * x] / 50)) grams\n    # Final concentration in C is 0.5% or 0.005 when in pure form.\n    \n    # Setting up the equation based on the concentration in C: \n    # ((original substance from A to B to C) + (original water in C)) / total mass in C = final concentration in C\n    # ((0.1 * x + 0.1 * ([0.1 * x] / 50)) + 0) / 60 = 0.005\n    \n    equation = Eq((0.1 * x) + (0.1 * ((0.1 * x) / 50)) / 60, 0.005)\n    \n    # Solving for the original concentration x\n    solution = solve(equation, x)\n    concentration = solution[0]\n\n    return concentration * 100  # Return the concentration as a percentage\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of pens before and after\n    pens_before = 24\n    pens_after = pens_before + 6\n\n    # Number of chickens per pen before and after\n    chickens_per_pen_before = symbols('chickens_per_pen_before')\n    chickens_per_pen_after = chickens_per_pen_before - 6\n\n    # Total number of chickens stays the same\n    total_chickens = pens_before * chickens_per_pen_before\n    equation = Eq(pens_after * chickens_per_pen_after, total_chickens)\n\n    # Solve the equation\n    solutions = solve((equation), (chickens_per_pen_before,))\n    num_chickens = solutions[0] * pens_before\n\n    return num_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n    \n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if dividend + divisor + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n                \n    return len(possible_values)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    history_to_math_ratio = 7 / 8\n    history_club_total = math_club_total * history_to_math_ratio\n    return int(history_club_total)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Calculate the reversed subtraction on planet Zog\n    # Reverse the digits of the two numbers first\n    reversed_subtrahend = int(str(926)[::-1])\n    reversed_minuend = int(str(62)[::-1])\n\n    # Perform the subtraction\n    reversed_difference = reversed_subtrahend - reversed_minuend\n\n    # Reverse the result to get the answer Pluto would write down\n    ans = int(str(reversed_difference)[::-1])\n\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    number1 = 45\n    number2 = 60\n\n    ans = gcd(number1, number2)\n\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Calculate the common difference (d) using the given sums of arithmetic progression\n    S6 = 64  # Sum of the first 6 terms\n    S12 = 156 # Sum of the first 12 terms\n\n    # Formula for the sum of an arithmetic series: S_n = n/2 * (2a + (n-1)d)\n    # Where S_n is the sum of the first n terms, a is the first term, and d is the common difference\n    # S6 = 6/2 * (2a + 5d) = 3 * (2a + 5d)\n    # S12 = 12/2 * (2a + 11d) = 6 * (2a + 11d)\n    \n    # Two equations can be formed:\n    # 3 * (2a + 5d) = S6 -> 1\n    # 6 * (2a + 11d) = S12 -> 2\n\n    # From equation 1: 2a + 5d = S6/3 -> 3\n    # From equation 2: 2a + 11d = S12/6 -> 4\n\n    # Subtract equation 3 from equation 4: (2a + 11d) - (2a + 5d) = (S12/6) - (S6/3)\n    # This gives: 6d = (S12/6) - (S6/3)\n    \n    d = ((S12/6) - (S6/3)) / 6\n\n    # Using d, calculate a from equation 3:\n    # a = (S6/(3*2)) - (5d/2)\n    a = (S6/6) - (5*d/2)\n\n    # Now calculate the sum of the first 18 terms using the formula for sum of an arithmetic series:\n    # S18 = 18/2 * (2a + (18-1)d)\n    n = 18\n    S18 = (n/2) * (2*a + (n-1)*d)\n\n    return S18\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    brother_age = (ashley_age - 3) - 2\n    return brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    train_length = 160  # meters\n    time_to_pass = 30  # seconds\n\n    distance_covered = train_speed * time_to_pass\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    \n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    jogging_time = 0.5  # time from 6:30 AM to 7:00 AM in hours\n    walking_time = 1    # time from 7:00 AM to 8:00 AM in hours\n    \n    jogging_speed = 9   # jogging speed in km per hour\n    walking_speed = 7.5 # walking speed in km per hour\n    \n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n    \n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are two possibilities for the first digit: 3 or 4 (since it cannot be 0 for a three-digit number)\n    first_digit_options = 2\n    \n    # The second and third digits can be 0, 3, or 4, so three possibilities each\n    second_digit_options = 3\n    third_digit_options = 3\n    \n    # Compute the total number of different three-digit numbers\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'w' be the number of games won, 'l' be the number of games lost\n    w, l = symbols('w l')\n\n    # The team won twice as many games as it lost\n    equation1 = Eq(w, 2 * l)\n\n    # The team played a total of 63 games\n    equation2 = Eq(w + l, 63)\n\n    # Solve for 'l'\n    solutions = solve((equation1, equation2), (w, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    subtraction = 55 - 44\n    ans = common_factor * subtraction\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, goats = symbols('total_animals goats')\n\n    # Initially, 65% of the animals are cows, so 35% are goats\n    equation1 = Eq(goats, 0.35 * total_animals)\n\n    # After adding 240 animals, 85% of the animals are cows,\n    # and the number of goats has doubled\n    equation2 = Eq(0.15 * total_animals + 240, 2 * goats)\n\n    # Solving the equations for total_animals and goats\n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    # Using the built-in sum function with a list comprehension\n    ans = sum([(-1)**(i % 2) * (9 - i) for i in range(0, 9)])\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    import math\n\n    # Formula for the area of an equilateral triangle: area = (sqrt(3)/4) * side^2\n    def area_of_triangle(side_length):\n        return (math.sqrt(3) / 4) * side_length**2\n\n    # Calculate the areas of both triangles\n    area_x = area_of_triangle(3)\n    area_y = area_of_triangle(9)\n\n    # Calculate how many times Triangle X fits into Triangle Y\n    times_fit = area_y / area_x\n\n    return times_fit\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for x in range(100, 1000):\n        if x % 7 == 4 and x % 8 == 4 and x % 9 == 4:\n            return x\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x*12 + 3*x*5, 120)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_students_to_choose = 2\n\n    ans = comb(num_students, num_students_to_choose)\n\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    ans = product1 - product2\n    return ans\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_options = 2  # 1 soup + 1 no soup option\n    desserts_options = 2 # 1 dessert + 1 no dessert option\n    \n    combinations = appetisers * main_courses * soup_options * desserts_options\n    return combinations\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    # Total number of people\n    n_people = 9\n    \n    # Factorial for 3 people (3 girls as a block, 3 boys and 3 teachers as individuals)\n    fac_3 = factorial(3)\n    \n    # There are 7 entities: [3 girls as a single entity] + [3 boys] + [3 teachers]\n    # Number of permutations for these 7 entities\n    entities_perm = factorial(7)\n    \n    # For no two boys standing together, we can think of inserting each boy into gaps\n    # between girls, teachers, or ends of the line. Hence, 5 gaps for 3 boys.\n    # Number of ways to choose gaps for the boys\n    boys_gaps = factorial(5) // factorial(5 - 3)\n    \n    # The 3 girls can permute among themselves as well.\n    girls_perm = fac_3\n    \n    # Calculate total permutations\n    total_permutations = entities_perm * boys_gaps * girls_perm\n    \n    return total_permutations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create congruences based on the problem statements\n    # x % 8 = 5 (since 3 had to sit out, and the remainder when divided by 8 should be 3)\n    # x % 9 = 8 (since 1 had to sit out, and the remainder when divided by 9 should be 1)\n\n    congruences = [(3, 8), (1, 9)]\n    \n    # Use the Chinese Remainder Theorem to find a solution to the congruences\n    ans, _ = solve_congruence(*congruences)\n    \n    # Check if answer is in the range\n    while ans < 100:\n        ans += 8 * 9\n\n    return ans\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    blue_balls = Symbol('blue_balls', integer=True)\n\n    # Total balls\n    total_balls = 4 + blue_balls\n\n    # Probability of taking one red ball out of the bag\n    prob_one_red = 4 / total_balls\n\n    # Probability of taking another red ball after the first red ball without replacement\n    prob_two_red = 3 / (total_balls - 1)\n\n    # Probability that both balls are red\n    prob_both_red = prob_one_red * prob_two_red\n\n    # Equation set up according to the given probability 2/7\n    equation = Eq(prob_both_red, 2/7)\n\n    # Solve for the number of blue balls\n    num_blue_balls = solve(equation, blue_balls)\n\n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence where the first term a1 = 6, common difference d = 5\n    # We need to find the number of terms n and then apply the formula for the sum of an arithmetic sequence\n    # Sum = n/2 * (2*a1 + (n-1)*d)\n    a1 = 6\n    d = 5\n    \n    # Calculate the last term of the sequence\n    an = 41\n\n    # Calculate the number of terms n in the sequence\n    n = ((an - a1) / d) + 1\n    \n    # Calculate the sum of the arithmetic sequence\n    sum_seq = (n/2) * (2*a1 + (n-1)*d)\n    return int(sum_seq)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    weight_dog_to_rabbit = 8\n    weight_rabbit_to_chicken = 2\n\n    weight_dog_to_chicken = weight_dog_to_rabbit * weight_rabbit_to_chicken\n    \n    return weight_dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from collections import Counter\nfrom math import factorial\n\ndef perm_count(val_count):\n    dividend = factorial(sum(val_count.values()))\n    divisor = 1\n    for num in val_count.values():\n        divisor *= factorial(num)\n    return dividend // divisor\n\ndef solution():\n    count = 0\n    # Factors of 2^27 = 2 * 2 * 2 ... (27 times)\n    factors = [2] * 27\n    # Digits can only range from 1 to 9 (0 is excluded as it would make the number not 10 digit)\n    possible_digits = [1, 2, 4, 8]\n\n    # At most 27 twos\n    for a in range(28):\n        for b in range(14):\n            for c in range(9):\n                for d in range(4):\n                    if a + 2*b + 3*c + 4*d == 27:\n                        # Create a list with the current combination of digits\n                        chosen_digits = [1]*(10-a-b-c-d) + [2]*a + [4]*b + [8]*c \n                        # Counting the unique permutations of the chosen digits\n                        permutations = perm_count(Counter(chosen_digits))\n                        count += permutations\n    return count\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices Terry had at first.\n    # (3/5)x slices were eaten by her family.\n    # She gave away 2 slices to her friends.\n    # She had 4 slices left.\n    # So, the equation is: (3/5)x + 2 + 4 = x\n    # We can simplify this to: (3/5)x + 6 = x\n    # Which is the same as saying: 2/5x = 6\n    # Therefore, x = 6 / (2/5)\n    # x = 6 * (5/2)\n    # x = 15\n    \n    x = 6 * (5/2)\n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the time it takes for Mike to finish the job by himself\n    # Let 'd' be the time it takes for Danny to finish the job by himself\n    m, d = symbols('m d')\n\n    # 1/m + 1/d = 1/10 because working together they finish in 10 hours\n    eq1 = Eq(1/m + 1/d, 1/10)\n\n    # Mike works for 8 hours (8/m) and then Danny works for 13 hours (13/d)\n    # Together they finish the job.\n    eq2 = Eq(8/m + 13/d, 1)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (m, d))\n    \n    # We need the time it takes for Danny to finish the job by himself\n    return solutions[d]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    return 51+50-45+40-35+30-25+20-15\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_diff = 3 * 1000 - 3 * 10  # Difference between the place values of thousands and tens\n    return place_value_diff\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    num_cases = 2\n    min_pencils = (total_pencils // num_cases) + 1\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # We know that a⊕b = a + (a+1) + (a+2) + ... + (a+b)\n    # This is an arithmetic series starting with 'a' and having 'b+1' terms\n    # The sum of an arithmetic series is given by S = n/2 * (first_term + last_term)\n    # Here, n = b + 1, first_term = a, last_term = a + b\n    # We want to find 'm' in m⊕10 = 66\n    # This means the sum S = 66, n = 10 + 1 = 11, first_term = m, last_term = m + 10\n\n    n = 10 + 1\n    S = 66\n\n    # S = n/2 * (first_term + last_term)\n    # 66 = 11/2 * (m + (m + 10))\n    # 66 = 11/2 * (2m + 10)\n    # 66 = 11 * (m + 5)\n    # 6 = m + 5\n    # m = 6 - 5\n    # m = 1\n    \n    m = 6 - 5  # The value of 'm'\n\n    return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance_between_chess = 3\n    # Number of chess per side (not counting the corners twice)\n    chess_per_side = (side_length // distance_between_chess) - 1\n    total_chess = 4 * chess_per_side + 4  # adding the 4 corners\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "from math import comb\n\ndef solution():\n    # The smallest possible number of red squares would occur \n    # when the distribution of digits is as uniform as possible.\n    # Each digit should appear exactly 4 times to avoid painting.\n    # Since there are 10 digits, a maximum of 40 squares can be filled without painting.\n    # The remaining 60 squares must then be filled with repeated digits.\n    # These 60 will be painted red.\n    \n    ans = 60\n    return ans\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    term_count = 0\n\n    while term > 0:\n        term_count += 1\n        term += common_difference\n    \n    return term_count\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4/5\n    \n    remaining_money = initial_money - spent_money + father_gave\n    \n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for x in range(32, 100):  # Because the smallest 4-digit perfect square is 32^2 = 1024\n        num = x ** 2\n        str_num = str(num)\n        if str_num[0] == str_num[1] and str_num[2] == str_num[3]:\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    count_zeros = 0\n    n = 1\n    while count_zeros < 28:\n        temp = n\n        while temp % 5 == 0:\n            count_zeros += 1\n            temp //= 5\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return (3 * m - 1) + m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # The distance covered by both combined until the distance between them is 130 km\n    covered_distance = initial_distance - remaining_distance\n\n    # Combined speed of Tim and Bob when driving towards each other\n    combined_speed = tim_speed + bob_speed\n\n    # Time taken to cover the covered_distance is the covered distance divided by the combined speed\n    time_taken = covered_distance / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_climb = day_climb - night_slide\n    days = 0\n    current_height = 0\n\n    while True:\n        days += 1\n        current_height += day_climb\n        if current_height >= total_distance:\n            break\n        current_height -= night_slide\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5\n    sum_of_four_numbers = 3 + 4 + 6 + 10\n    fifth_number = total_sum - sum_of_four_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "def solution():\n    from itertools import permutations\n    \n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for perm in permutations(digits):\n                num = int(''.join(perm))\n                if num <= 2022 and num >= 1000:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    repeating_pattern = [8, 3, 5, 4]  # The repeating part of the decimal\n    total_digits = 84\n    sum_of_digits = 0\n\n    # Sum the digits of the repeating pattern until the length is reached\n    for i in range(total_digits):\n        sum_of_digits += repeating_pattern[i % len(repeating_pattern)]\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # The time take from the first strike to the end of the last strike\n    # can be thought of as the sum of intervals between strikes plus\n    # the time of the last strike.\n\n    # For 6 strikes, there are 5 intervals between strikes.\n    num_intervals_6 = 6 - 1\n    total_time_6 = 43\n    # The time of the last strike is constant (3 seconds).\n    last_strike_time = 3\n\n    # Calculate the interval time\n    interval_time = (total_time_6 - last_strike_time) / num_intervals_6\n\n    # For 12 strikes, there are 11 intervals.\n    num_intervals_12 = 12 - 1\n    # Calculate the total time for 12 strikes.\n    total_time_12 = (interval_time * num_intervals_12) + last_strike_time\n\n    return total_time_12\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # We will use the stars and bars theorem (nCr(n+k-1, k-1)) for this problem\n    # We have 20 pens to divide among 6 kids, with each kid getting at least one pen\n    # We subtract 1 pen for each kid initially (-6), and 14 pens are left to distribute freely\n    total_ways = nCr(14 + 6 - 1, 6 - 1)\n\n    return total_ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Start with the understanding that m^2 + 5 = n^2 - 18\n    # We are looking for two perfect squares that differ by 23 (since 5 + 18 = 23)\n    \n    # We can start checking from the smallest possible square i.e., 1\n    # and go up to a reasonable limit since the number of students can't be negative or zero\n    m = 1\n    while True:\n        # Calculate the number of students for the current m\n        students_with_5_left = m * m + 5\n        # Test if it's possible to form a new square by adding 18 students\n        if int((students_with_5_left + 18)**0.5) == (students_with_5_left + 18)**0.5:\n            return students_with_5_left\n        m += 1\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n\n    work_rate_initial = people_initial / time_initial\n    people_required = work_rate_initial * time_required\n\n    return int(people_required)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    # Time for 1 quiz in hours\n    time_per_quiz = 30 / 60\n    # Total quizzes\n    total_quizzes = 4\n    # Total time for 4 quizzes\n    total_time = time_per_quiz * total_quizzes\n    return total_time\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Digits from 100 to 999 (9 choices for first dig, 10 for next two)\n    no_zero_numbers = 9 * 9 * 9  # No zeros allowed (9 choices for each digit)\n\n    # At least one zero means total possibilities minus the possibilities of no zeros\n    at_least_one_zero = total_three_digit_numbers - no_zero_numbers\n\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30  # speed of the ball in meters per second\n    kinetic_energy = 0.5 * mass * speed ** 2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for i in range(100, 200):\n        if i % 3 == 1 and i % 4 == 1 and i % 5 == 1 and i % 7 == 2:\n            return i\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    ans = solve_congruence(*congruences)\n    \n    while ans[0] < 300:\n        if ans[0] < 300:\n            return ans[0]\n        ans = (ans[0] + ans[1], ans[1])\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Since the ones digit must be the greatest odd number, it must be 9.\n    ones_place = 9\n\n    # The smallest 4-digit number has a leading digit of 1 (to make it as small as possible).\n    thousands_place = 1\n\n    # The hundreds and tens place digits add up to 13.\n    # Since we want the smallest number and we've already used 1, we should use the next \n    # smallest digits that add up to 13, which are 4 and 9. We have used 9 in the ones place,\n    # so we must use 4 and the other number is 3, we use 3 here as it is smaller than 4.\n    tens_place = 3\n    hundreds_place = 4\n\n    # Construct the number by combining the digits.\n    number = thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n    return number\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # after 8 cuts, there will be 9 pieces\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    num_pictures = 10\n\n    # The total space available to place pictures is the width of the wall minus the width of two pictures\n    space_available = total_width - (2 * picture_width)\n\n    # The number of spaces between the pictures is one less than the number of pictures\n    num_spaces = num_pictures - 1\n    \n    # Each space between the pictures is equal\n    space_between_pictures = space_available / num_spaces\n\n    # The center of the wall\n    center_of_wall = total_width / 2\n\n    # The center of the third picture from the left (first picture is at 0 mm, second picture at space_between_pictures)\n    center_of_third_picture = 2 * space_between_pictures\n\n    # The distance from the center of the third picture to the center of the wall\n    distance_from_center = abs(center_of_third_picture - center_of_wall)\n\n    return distance_from_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height_fraction = 0.75\n    threshold = 0.25\n    height = 1\n    bounces = 0\n\n    while height >= threshold:\n        height *= height_fraction\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    numbers = [5, 8, 11, 14, 17, 20]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    # Assume uncle's current age is x\n    # When Doris reaches uncle's current age, uncle will be 40\n    # So the difference in age will always be (40 - Doris' future age)\n    # Which is the same as saying uncle's current age - Doris' current age\n    # Therefore uncle's age is the sum of this difference and Doris' age\n    uncle_age = (40 - doris_age) + doris_age\n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one banana and one apple\n    banana, apple = symbols('banana apple')\n\n    # Equation 1: 1.50 = 2*banana + 3*apple\n    eq1 = Eq(1.50, 2*banana + 3*apple)\n    \n    # Equation 2: 1.45 = 3*banana + 2*apple\n    eq2 = Eq(1.45, 3*banana + 2*apple)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (banana, apple))\n\n    # Calculate the price for 1 banana and 1 apple\n    price_for_one_of_each = solution[banana] + solution[apple]\n\n    return price_for_one_of_each\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let's denote the speed of Jerry as s and the speed of Kevin as 1.5s.\n    # Let t be the time taken for them to meet.\n    # Jerry's distance traveled is s * t.\n    # Kevin's distance traveled is 1.5s * t.\n    # The sum of both distances should be equal to 225 miles.\n    \n    # Equations:\n    # s * t + 1.5s * t = 225\n    # t * (s + 1.5s) = 225\n    # t * 2.5s = 225\n    \n    # Let's solve for t:\n    # t = 225 / (2.5 * s)\n    \n    # Jerry's distance traveled is:\n    # distance_jerry = s * t\n    #\n    # Substitute the value of t from the previous calculation (t = 225 / (2.5 * s))\n    # distance_jerry = s * (225 / (2.5 * s))\n    #\n    # Simplify the equation:\n    # distance_jerry = 225 / 2.5\n    \n    distance_jerry = 225 / 2.5\n    return distance_jerry\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for each girl\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    # Equations based on the problem statement\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for i in range(10):\n        if 8 + i == 15:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    watch_cost = 200\n    shirt_fraction = 2 / 7\n    remaining_fraction = 1 / 3\n\n    # After buying the watch\n    remaining_money_after_watch = original_money - watch_cost\n    # After buying the shirt\n    remaining_money_after_shirt = remaining_money_after_watch * (1 - shirt_fraction)\n    # Jerry has 1/3 of the original money left\n    equation = Eq(remaining_money_after_shirt, original_money * remaining_fraction)\n\n    # Solve for original_money\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n    \n    # Consider Tom and Harry as one entity TH, then we have 5 \"entities\" to arrange (students and TH)\n    arrangements_of_entities = factorial(5)\n    \n    # TH can stand together in two different ways (Tom on left, Harry on right or vice versa)\n    arrangements_of_th = factorial(2)\n    \n    # Total arrangements\n    total_arrangements = arrangements_of_entities * arrangements_of_th\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n\n    # Compounded for the first three years at 5% interest\n    amount_after_three_years = initial_investment * (1.05 ** 3)\n\n    # Compounded for the next two years at 8% interest\n    final_amount = amount_after_three_years * (1.08 ** 2)\n\n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # Rounded price\n    rounded_price = 125000\n\n    # Finding the difference that the number could have to still round to 125000\n    diff = 50\n\n    # The actual lowest possible price before rounding\n    actual_lowest_price = rounded_price - diff\n\n    return actual_lowest_price\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_tests = 4\n    current_average = 89\n    desired_average = 95\n    full_score = 100\n    \n    total_current_score = current_tests * current_average\n    required_total_score = desired_average - current_average\n    \n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_average = (total_current_score + full_score * additional_tests) / (current_tests + additional_tests)\n        if new_average >= desired_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate the time for each section of the race\n    time_first_section = 540 / 9\n    time_middle_section = 300 / 6\n    distance_last_section = 1000 - (540 + 300)  # remaining distance for the last section\n    time_last_section = distance_last_section / 10\n\n    # Sum the time for all sections to get the total time\n    total_time = time_first_section + time_middle_section + time_last_section\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    doris_future_age = 40\n    uncle_future_age = 40\n\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_future_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    extra_performances = 2  # One extra performance each for Lia and Liz\n    total_performances = class_performances + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30\n\n    # Total distance to be covered by the train to cross the bridge completely\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep_beginning, cows_beginning = symbols('sheep_beginning cows_beginning')\n    \n    equation1 = Eq(sheep_beginning, (5/7) * cows_beginning)\n    equation2 = Eq(cows_beginning - 7, (3/4) * (sheep_beginning + 21))\n\n    solutions = solve((equation1, equation2), (sheep_beginning, cows_beginning))\n\n    return solutions[sheep_beginning]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between city P and Q\n    # Let v be the original speed of the car\n    # Let t be the original time taken to reach from P to Q at speed v\n    # When speed is increased by 20%, time taken is t - 1\n    # When the first 200 km is travelled at speed v and the rest at 25% increased speed, time taken is t - 1/5\n    d, v, t = symbols('d v t', real=True, positive=True)\n    \n    # Original Equation: d = v * t\n    original_eq = Eq(d, v * t)\n\n    # Increased Speed by 20% Equation: d = v * 1.2 * (t - 1)\n    increased_speed_eq = Eq(d, v * 1.2 * (t - 1))\n    \n    # Increased Speed for last part Equation: 200/v + (d - 200)/(1.25*v) = t - 1/5\n    partial_speed_increase_eq = Eq(200/v + (d - 200)/(1.25*v), t - 1/5)\n\n    # Solving the system of equations\n    solutions = solve((original_eq, increased_speed_eq, partial_speed_increase_eq), (d, v, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    # Calculate the difference in time from 08:30 to 09:25\n    hours_diff = 9 - 8\n    minutes_diff = 25 - 30\n\n    # Convert the hour difference to minutes and add the minutes difference\n    n = hours_diff * 60 + minutes_diff\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency\n    efficiency_A = 1 / 6\n    # B's efficiency\n    efficiency_B = efficiency_A / 2\n    \n    # Combined efficiency\n    combined_efficiency = efficiency_A + efficiency_B\n    \n    # Total days to complete the job when A and B work together\n    days_together = 1 / combined_efficiency\n    \n    return days_together\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let Geoff's current age be x and his sister's age be y.\n    # Given that the initial sum of their ages is 22, we have:\n    # x + y = 22\n\n    # We want to find when the sum of their ages will be 30.\n    # Let's assume that this will happen after n years, so we have:\n    # (x + n) + (y + n) = 30\n\n    # However, since x + y = 22, we can substitute it into the second equation:\n    # (22 + n) + n = 30\n    # 22 + 2n = 30\n    # 2n = 30 - 22\n    # 2n = 8\n    # n = 4\n\n    # The sum of their ages will be 30 after 4 years.\n    return 4\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    price_haribo = 50\n    price_mamee = price_haribo - 30\n    price_big_jelly = 6 * price_mamee\n\n    return price_big_jelly / 100\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n\n    anna = 3 / 8 * total_candies\n    belle = 1 / 4 * total_candies\n    cathy_and_dawn = total_candies - anna - belle\n\n    equation = Eq(anna + belle - cathy_and_dawn, 90)\n\n    solution = solve(equation, total_candies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    value = (18 / 36) * 32\n    return value\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4 # The final remaining bricks\n\n    # Since Joel removes 2 less than half, the remaining before Joel removes was twice of (4+2)\n    before_joel = 2 * (remaining_bricks + 2)\n    \n    # Since Valerie removes 3 less than half, the remaining before Valerie removes was twice of (before_joel+3)\n    before_valerie = 2 * (before_joel + 3)\n    \n    # Since Ethan removes 1 less than half, the initial number of plants was twice of (before_valerie+1)\n    initial_bricks = 2 * (before_valerie + 1)\n\n    return initial_bricks\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3*(x + 7), 5*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of fish balls Mr. Tan made.\n    x = symbols('x')\n\n    # He sold 3/4 in the morning, so 1/4 was left.\n    # Then he sold 1/3 of what was left, so 2/3 of 1/4 was left.\n    # After making another 506 balls, he has twice as much as he originally made.\n    equation = Eq(1/4 * 2/3 * x + 506, 2 * x)\n\n    # Solve the equation for x\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's denote the number of vanilla cupcakes as x\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # chocolate cupcakes = vanilla cupcakes + 72\n    eq1 = Eq(chocolate, vanilla + 72)\n    # blueberry cupcakes = vanilla cupcakes - 36\n    eq2 = Eq(blueberry, vanilla - 36)\n    # After selling cupcakes\n    sold_chocolate = chocolate / 6\n    sold_vanilla = 2 * vanilla / 3\n    sold_blueberry = 7 * blueberry / 9\n    eq3 = Eq(sold_chocolate + sold_vanilla + sold_blueberry, 427)\n    \n    # solve for vanilla\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n    \n    # calculate the number of chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    beck_give_chris = (beck_books - chris_books) / 2\n\n    return int(beck_give_chris)\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys_to_girls = 2 / 7\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_of_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n    solutions = solve(equation, circle)\n    return solutions[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples = total_pigs  # One green apple per pig\n    red_apples = total_pigs / 2  # One red apple per two pigs\n    total_apples = green_apples + red_apples\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    sunflowers_grown = total_seeds - died_seeds\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 3 (mod 5), x ≡ 4 (mod 7), and x ≡ 5 (mod 9)\n    congruences = [(3, 5), (4, 7), (5, 9)]\n\n    # Use the Chinese Remainder Theorem to find the smallest x that satisfies all congruences\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    actions = [(\"deposit\", 10), (\"spend\", 8)]  # (action, amount) pairs\n    balance = 100  # Initial amount\n\n    for day in range(1, total_days + 1):\n        action_index = (day - 1) % len(actions)  # Modulo to repeat the pattern\n        action, amount = actions[action_index]\n        if action == \"deposit\":\n            balance += amount\n        elif action == \"spend\":\n            balance -= amount\n\n    return balance\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creating the system of congruences according to the problem statement\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n\n    return durians_left\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_value = 54\n    initial_value = (final_value * 4 - 178) / 2\n    return initial_value\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n\n    average_apples =  total_apples / num_students\n    \n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the original speed, d be the distance\n    s, d = symbols('s d')\n\n    # If she keeps her original speed, she will arrive at the destination in 8 hours\n    original_time = 8\n    # Distance is speed multiplied by time\n    equation1 = Eq(d, s * original_time)\n\n    # If she travels 5 extra kilometers per hour, she will arrive an hour earlier, which is 7 hours\n    faster_time = 7\n    new_speed = s + 5\n    # Distance is the same but with increased speed and decreased time\n    equation2 = Eq(d, new_speed * faster_time)\n\n    # Solve the two equations to find the values of s and d\n    solutions = solve((equation1, equation2), (s, d))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # The total ways without restrictions.\n    ways_with_Claire_Tony_opposite = 2! * 2!  # The ways where Claire and Tony sit opposite each other.\n\n    # Subtracting the restricted arrangements from the total possible arrangements.\n    ans = total_ways - ways_with_Claire_Tony_opposite\n\n    return ans\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and a pear\n    b, p = symbols('b p')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(b + 2*p, 94)\n    equation2 = Eq(b + p, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # Return the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    # Generate all permutations of the three-digit numbers using the digits\n    perms = sorted([''.join(p) for p in permutations(digits)])\n    # Return the number in the fifth position\n    return int(perms[4])\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    import math\n    \n    # Determine the number of test tubes needed to test for poison in a binary manner\n    num_bottles = 1000\n    test_tubes_needed = math.ceil(math.log2(num_bottles))\n    \n    return test_tubes_needed\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    total_chairs = 10\n    removed_chairs = 3\n\n    remaining_chairs = total_chairs - removed_chairs\n    gaps_with_chairs = total_chairs - 1\n    gaps_without_chairs = remaining_chairs - 1\n\n    distance_between_chairs_with_all = total_distance / gaps_with_chairs\n    new_total_distance = distance_between_chairs_with_all * gaps_without_chairs\n\n    return new_total_distance / gaps_without_chairs\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import Eq, symbols, solve\n    \n    # Define the symbols for the number of stickers Marry, Alexis, and Charlotte have\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    # Since Marry and Alexis give 20% of their stickers to Charlotte,\n    # and Marry had 20 stickers more than Charlotte in the end,\n    # we can set up the following system of equations:\n    # marry_final = marry_initial - 0.2 * marry_initial\n    # alexis_final = alexis_initial - 0.2 * alexis_initial\n    # charlotte_final = charlotte_initial + 0.2 * marry_initial + 0.2 * alexis_initial\n    \n    # Additionally, Charlotte's stickers increased by 80%\n    # charlotte_final = charlotte_initial * 1.8\n    \n    # Lastly, we have the ratio of Marry's and Alexis's stickers and the final difference between Marry's and Charlotte's stickers\n    # marry_initial / alexis_initial = 7 / 5\n    # marry_final = charlotte_final + 20\n    \n    # We can now set up our three equations based on these relationships\n    equations = (\n        Eq(0.8 * marry, charlotte * 1.8 + 20),\n        Eq(0.8 * alexis, charlotte * 1.8),\n        Eq(marry / alexis, 7 / 5)\n    )\n    \n    # Solve the system of equations\n    solutions = solve(equations)\n    \n    # We want the number of stickers Alexis had at first\n    return solutions[alexis]\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # Since each brother has to get at least two books, we start by giving out two books to each.\n    remaining_books = 10 - 2 * 3\n\n    # Now we have 4 books left to distribute to 3 brothers.\n    # This is a problem of distributing indistinguishable items into distinguishable boxes,\n    # which is equivalent to putting two dividers among the 4 books to divide them into 3 parts.\n    # The formula for distributing n indistinguishable items into k distinguishable boxes is (n+k-1) choose (k-1).\n    # In our case, n = remaining_books and k = 3 (the number of brothers).\n\n    from math import comb\n    ans = comb(remaining_books + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the angles\n    angle1, angle2 = symbols('angle1 angle2')\n    \n    # Two of the angles are right angles, so they are 90 degrees each\n    right_angle1 = right_angle2 = 90\n    \n    # One angle is five times larger than the fourth angle\n    equation = Eq(angle1, 5 * angle2)\n    \n    # The sum of the angles in a quadrilateral is 360 degrees\n    sum_equation = Eq(right_angle1 + right_angle2 + angle1 + angle2, 360)\n    \n    # Solve the system of equations\n    solutions = solve((equation, sum_equation), (angle1, angle2))\n    \n    # The largest angle is the one that is five times the other\n    largest_angle = solutions[angle1]\n    \n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Calculate the number of ways to reach each step\n    def ways_to_step(step, avoid):\n        if step < 0:\n            return 0\n        if step == 0:\n            return 1\n        if step in avoid:\n            return 0\n\n        # Recursively calculate the number of ways to reach this step\n        return ways_to_step(step - 1, avoid) + ways_to_step(step - 2, avoid) + ways_to_step(step - 3, avoid)\n\n    # We avoid the fifth step\n    avoid_step = {5}\n\n    # Calculate the total number of ways to reach the tenth step\n    total_ways = ways_to_step(10, avoid_step)\n\n    return total_ways\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if (small_boxes * 5 + medium_boxes * 7 + large_boxes * 10) == 54:\n                    total_boxes = small_boxes + medium_boxes + large_boxes\n                    if total_boxes < min_boxes:\n                        min_boxes = total_boxes\n    return min_boxes\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            other_factor = 7007 // i\n            if 10 <= other_factor < 100 and other_factor % 7 == 0:\n                factors.append((i, other_factor))\n    sum_of_factors = sum(factors[0])  # as we only need one pair since they're unique\n    return sum_of_factors\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    cans_in_1_day = cans_in_6_days / 6\n    cans_in_9_days = cans_in_1_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n    \n    # With one entrance, no queue after 16 minutes implies:\n    visitors_16_min = 16 * visitors_per_minute\n    # The number of visitors processed through one entrance in 16 minutes is:\n    processed_16_min = 16 * check_in_per_entrance_per_minute\n\n    # The total number of visitors who arrived and have been processed is the same\n    # Therefore, visitors_16_min = processed_16_min\n\n    # With two entrances, the rate of check-in doubles\n    check_in_two_entrances_per_minute = 2 * check_in_per_entrance_per_minute\n    \n    # Since the numbers of arrivals and processing have to match again,\n    # We find the time at which the processed visitors equal the total visitors after 16 minutes\n    time_with_two_entrances = visitors_16_min / check_in_two_entrances_per_minute\n    \n    return int(time_with_two_entrances)\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    hours = 15 / 60  # converting 15 minutes to hours\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934  # converting miles to kilometers\n\n    return kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    frogs_before = 11 + 10 - 9\n    return frogs_before\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    total_distance = 16\n    distance_covered = 0\n    days = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_climb\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_slide\n\n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    num_bottles = remaining_cookies // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # Layla baked 24 more cookies than muffins\n    equation1 = Eq(cookies, muffins + 24)\n    \n    # Layla sold 3/4 of her muffins and 5/8 of her cookies\n    # She had 74 cookies and muffins left in total\n    equation2 = Eq((1 - 3/4) * muffins + (1 - 5/8) * cookies, 74)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    # The number of cookies she baked at first is part of the solution\n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # The greatest multiple of 25 that has exactly 3 digits is the largest 3-digit number divisible by 25\n    # Since 25 is a multiple of 100, we start from 999 (the largest 3-digit number) and check downwards\n    # We find the greatest number less than 1000 that is divisible by 25\n    \n    # Largest 3-digit number\n    largest_three_digit_number = 999\n    \n    # Find the greatest multiple of 25 less than or equal to 999\n    ans = largest_three_digit_number - (largest_three_digit_number % 25)\n    \n    return ans\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # let's define the costs for one person\n    metro_ticket = 2  # cost for the metro ticket both ways\n    coffee = 3        # cost for a cup of coffee\n    game_entry = 20   # cost for the entry fee to the game\n    \n    # Total cost per person including Richard\n    total_cost_per_person = metro_ticket + coffee + game_entry\n    \n    # Richard also needs to pay for himself, so subtract his own costs\n    available_money = 40 - total_cost_per_person\n    \n    # Now find out how many friends he can treat with the remaining money\n    number_of_friends = available_money // total_cost_per_person\n    \n    return number_of_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    # To find the value of A such that the number is divisible by 9,\n    # the sum of the digits (including A) must be divisible by 9.\n    # Since the number is even and not divisible by 5, A cannot be 5 or any multiple of 5,\n    # so A must be 0, 2, 4, 6, or 8.\n    # We will start by calculating the sum of the given digits excluding A.\n    sum_fixed_digits = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9  # sum of the non-A digits\n\n    # Now we can iterate over the possible values for A and check divisibility by 9.\n    for A in (0, 2, 4, 6, 8):\n        if (sum_fixed_digits + 3*A) % 9 == 0:  # There are three A's in the original number\n            return A  # This is the only value that makes the number divisible by 9\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let x be the time it takes for the driver to reach the destination.\n    speed_ratio_driver_to_cyclist = 13 / 2\n    extra_time_cyclist = 143\n\n    # The time taken by the cyclist will be the driver's time plus the extra 143 minutes.\n    # Also, the time taken by the cyclist will be (13/2) times the driver's time because the speed ratio is 13:2.\n    # Therefore, we have the equation: x + 143 = (13/2) * x\n\n    # Now, we need to solve for x.\n    # x = (2/11) * 143\n    x = (2 / 11) * extra_time_cyclist\n    return x\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_n = (n * (n + 1) // 2) # Calculate the sum of the series 1+2+...+n\n    sum_cubes = sum_n**2  # Square the sum to get the sum of cubes\n\n    return sum_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Statement 1 cannot be correct, as it would mean all statements including itself are correct, which is a contradiction.\n    # Statement 2 cannot be correct, as if no statements are correct, then Statement 2 itself is correct, which is a contradiction.\n    # Statement 3 cannot be correct, as if one above is correct, it would mean either Statement 1 or Statement 2 is correct, which we have already proven is not possible.\n    # Statement 4 cannot be correct for the same reason as Statement 1, it would imply all are correct including itself.\n    # Statement 5 is the only one that can be correct, as it would mean all other statements are not correct, which does not lead to a contradiction.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    total_coins = symbols('total_coins')\n\n    # Before flipping, one quarter of the coins are showing heads\n    heads_before = total_coins / 4\n\n    # After flipping two more coins show heads\n    heads_after = heads_before + 2\n\n    # Now, one third of the coins are showing heads\n    equation = Eq(heads_after, total_coins / 3)\n\n    # Solve the equation\n    solution = solve(equation, total_coins)\n\n    # Return the number of total coins\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3\n    # position the 5 singing shows first, creating 6 slots (including at the beginning and end)\n    # where the 3 comedy shows can be placed\n    # we can choose any 3 slots from these 6 to position the comedy shows\n    slots_for_comedy = 6\n    comedy_shows = 3\n    \n    # calculate the number of ways to choose any 3 slots from the 6 available\n    ways_to_choose_slots = factorial(slots_for_comedy) // (factorial(comedy_shows) * factorial(slots_for_comedy - comedy_shows))\n    \n    # calculate the number of ways to arrange the 5 singing shows (5!) and the 3 comedy shows (3!)\n    ways_to_arrange_shows = factorial(5) * factorial(3)\n    \n    # Multiply the ways to choose the slots by the ways to arrange the shows\n    count = ways_to_choose_slots * ways_to_arrange_shows\n\n    return count\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    # The number of ways Mike can choose to travel by each type of transport\n    trains = 4\n    cars = 3\n    planes = 2\n\n    # The total number of different ways Mike can choose by using the Law of Addition\n    total_ways = trains + cars + planes\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 36)\n\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    per_day_paving = total_length / total_days\n    return per_day_paving\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def recurring_sum(digit, length):\n    str_digit = str(digit)\n    total = 0\n    for i in range(length):\n        total += int(str_digit[i % len(str_digit)])\n    return total\n\ndef solution():\n    # The sum of the first 2100 digits will consist of the sum of the first\n    # 2100 digits of each sequence in S. Note that each recurring cycle is 1 longer than the previous.\n    total_sum = 0\n    digits_counted = 0\n    digit = 2\n\n    while digits_counted < 2100:\n        cycle_length = 2100 - digits_counted\n        actual_cycle_length = min(digit, cycle_length)\n        total_sum += recurring_sum(digit, actual_cycle_length)\n        digits_counted += actual_cycle_length\n        digit += 1\n\n    return total_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    values.sort()\n    middle_index = len(values) // 2\n    return values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((x / 2) - 9, 12)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # Circular permutation formula for n people around (n-1) seats: (n-1)!\n    # Since we have 6 people and 8 seats, it's like 5 remaining seats after choosing 1 as reference.\n    num_ways = factorial(5)\n\n    return num_ways\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    min_even_number = float('inf')  # Initialize to positive infinity\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))  # Create a number from the permutation\n        if num % 2 == 0 and num < min_even_number:  # Check if the number is even and smaller than the current minimum\n            min_even_number = num\n            \n    return min_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of steps Peter walks when he is not on the escalator\n    # and y be the number of steps the escalator moves in 1 second\n    x, y = symbols('x y')\n\n    # When Peter walks 1 step/sec, the escalator moves 10 steps:\n    equation1 = Eq(x + 10*y, 10)\n\n    # When Peter walks 2 steps/sec, the escalator moves 16 steps:\n    equation2 = Eq(x + 16*y, 16*2)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    ans = solutions[x]\n    return ans\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return int(ans)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar_cost = 72  # cost in pence\n    balloon_cost = 20  # cost per balloon in pence\n    change_received = 388  # change received in pence\n    amount_paid = 1000  # amount paid in pence (￡10 note)\n\n    # Calculate the total cost of the chocolate bar and balloons\n    total_cost = amount_paid - change_received \n\n    # Subtract the cost of the chocolate bar to find the cost spent on balloons\n    cost_on_balloons = total_cost - chocolate_bar_cost\n\n    # Divide the cost on balloons by the cost of each balloon to find the number bought\n    num_balloons = cost_on_balloons // balloon_cost\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000  # in meters\n\n    ans = (percentage / 100) * total_length\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    total_students = 17\n    capacity_per_kayak = 4\n\n    num_kayaks = (total_students + capacity_per_kayak - 1) // capacity_per_kayak\n\n    return num_kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_ratio = 2/9\n    money_spent = total_money * spent_ratio\n    money_left = total_money - money_spent\n\n    # Let the cost of one slice of pizza be x, then the cost of one cupcake will be (3/2)x.\n    # He spent money on 5 cupcakes and 6 slices of pizza. So, 5*(3/2)x + 6x = money_spent.\n    # 15x/2 + 12x/2 = 27x/2 = money_spent\n    # So, x = (2/27) * money_spent\n    x = (2/27) * money_spent \n\n    # The cost of one cupcake is (3/2)x.\n    cost_of_cupcake = (3/2) * x\n\n    # The greatest number of cupcakes he could buy is the money he has left divided by the cost of one cupcake.\n    max_cupcakes = money_left // cost_of_cupcake\n\n    return int(max_cupcakes)\n\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import solve, symbols, Eq, sqrt\n\n    x = symbols('x')\n    a = 4 * sqrt(3)\n    equation = Eq(3 * a, sqrt(3 * x))\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Find the average age of the youngest three\n    average_age_youngest_three = 42 // 3\n    \n    # In an arithmetic sequence, the average age of the entire sequence is the same as the middle term.\n    # Hence, the age of the fourth dwarf (the middle term) is the same as the average of the youngest three.\n    age_middle_dwarf = average_age_youngest_three\n\n    # The age difference between each consecutive dwarf\n    age_difference = 1  # Because they are born in consecutive years\n\n    # Calculate the ages of the oldest three dwarfs using the middle term as reference\n    age_oldest_first = age_middle_dwarf + age_difference\n    age_oldest_second = age_oldest_first + age_difference\n    age_oldest_third = age_oldest_second + age_difference\n\n    # Sum the ages of the oldest three dwarfs\n    sum_oldest_three = age_oldest_first + age_oldest_second + age_oldest_third\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        if len(set(str(num))) == len(str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from sympy import is_square\n\n    count = 0\n    for i in range(10):\n        number_str = \"2\" + \"5\" * i\n        number = int(number_str)\n        if is_square(number):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_pieces = 3 - 1  # A cut piece turns into 3 pieces, so increases by 2 compared to initial piece\n\n    # Let x be the number of pieces cut into three parts\n    # Then, initial_pieces + x * cut_pieces = final_pieces\n    \n    # Solve the equation for x\n    x = (final_pieces - initial_pieces) // cut_pieces\n    \n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Given that 6 workers produce 120 parts in 4 minutes\n    # Calculate the production rate per worker per minute\n    rate_per_worker_per_minute = 120 / (6 * 4)\n\n    # Given that 3 workers produce parts in 10 minutes\n    # Calculate the number of parts produced by 3 workers in 10 minutes\n    parts_produced_by_3_workers = rate_per_worker_per_minute * 3 * 10\n\n    return parts_produced_by_3_workers\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divs = divisors(2240)\n\n    # Find the largest divisor for which 2240 / n is a square\n    ans = max([d for d in divs if is_square(2240 // d)])\n\n    return ans\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = total_pupils * 0.70\n    girls_swim = 200\n\n    # Let's denote the number of boys as 'b' and the number of girls as 'g'.\n    # Since total_pupils = b + g and swim_pupils = total_pupils - b * 0.40, we have\n    # swim_pupils = 0.60 * b + g\n    # girls_swim = g - b * 0.40\n\n    # Since we know swim_pupils and girls_swim, the system of equations becomes:\n    # 0.60b + g = swim_pupils\n    # g = girls_swim\n    # we can solve for 'b' and then 'g'.\n\n    # From the second equation g = girls_swim, so we replace g with 200 in the first equation\n    b = (swim_pupils - girls_swim) / 0.60\n    \n    # Now we find the number of girls 'g' by subtracting the number of boys 'b' from the total number of pupils.\n    g = total_pupils - b\n\n    return int(g)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    non_rotten_apples = total_apples * (1 - rotten_ratio)\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation based on the concentration of sugar in the mixture\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solve the equation for x\n    amount_10_percent = solve(equation, x)\n\n    return amount_10_percent[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    discount_amount = original_price - final_price\n    total_discount_percentage = (discount_amount / original_price) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j represent the mass of the jar and c represent the mass of one chocolate.\n    # From the given information, we can write down two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n    # We can solve these two linear equations to find j and c.\n\n    from sympy import symbols, Eq, solve\n\n    j, c = symbols('j c')\n    equation1 = Eq(j + 5*c, 185)\n    equation2 = Eq(j + 17*c, 317)\n\n    # Solve the equations for j and c\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solutions[j] + 10 * solutions[c]\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    import math\n    n = 200\n    count = 0\n    # Start from 2 because a number can always be divided into one part which is the number itself\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            count += 1\n    # Add one for division into 1 equal part (the number itself)\n    return count + 1\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Dimensions of the field\n    length = 144\n    width = 204\n    \n    # Total number of wheats\n    total_wheats = 116\n\n    # Number of wheats along the length and width\n    # Subtract the 4 corner wheat from total wheat and divide by 2 since there are 2 lengths and 2 widths\n    wheats_along_sides = (total_wheats - 4) // 2\n\n    # Because we already have a wheat at each corner, we subtract one from each side's number of spaces\n    wheats_along_length = (wheats_along_sides // 2) - 1 \n    wheats_along_width = (wheats_along_sides // 2) - 1\n\n    # Calculate the distance between each wheat along the length and width\n    distance_between_wheats_length = length / (wheats_along_length + 1)\n    distance_between_wheats_width = width / (wheats_along_width + 1)\n\n    # Assuming the distance between each 2 wheat is uniform, we take one of the distances\n    # The distance will be the same on both length and width since it must be the max number that fits the criteria\n    distance_between_wheats = max(distance_between_wheats_length, distance_between_wheats_width)\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let lana_sweets and mark_sweets represent the number of sweets Lana and Mark had originally.\n    lana_sweets, mark_sweets = symbols('lana_sweets mark_sweets')\n    \n    # After Lana gave away 1/3 of her sweets\n    lana_after = lana_sweets - lana_sweets / 3\n    \n    # After Mark ate 34 of his sweets\n    mark_after = mark_sweets - 34\n    \n    # They had the same number of sweets after the respective actions.\n    equation1 = Eq(lana_after, mark_after)\n    \n    # Together they had 674 sweets at first\n    equation2 = Eq(lana_sweets + mark_sweets, 674)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (lana_sweets, mark_sweets))\n    \n    # How many more sweets did Lana have than Mark at first\n    diff = solutions[lana_sweets] - solutions[mark_sweets]\n\n    return diff\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n\n    # According to the problem, the holiday structure can be broken down as:\n    # total_days = (1/2 * total_days) + (1/4 * total_days) + 4 + (2 * 7)\n\n    # Simplifying the above gives us:\n    # total_days = (3/4 * total_days) + 18\n\n    # Rearrange equation to solve for total_days\n    equation = Eq(total_days, (3/4 * total_days) + 18)\n\n    solutions = solve(equation, total_days)\n\n    # There should be only one solution in a valid problem\n    return solutions[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # minutes for one cat to catch one fish\n    num_cats = 5  # number of cats\n    num_fish = 5  # number of fish\n\n    time_to_catch_all_fish = time_per_cat_per_fish  # the time is the same regardless of the number of cats\n\n    return time_to_catch_all_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n    \n    # Watermelon is 5 times heavier than pineapple\n    equation1 = Eq(watermelon, 5 * pineapple)\n    \n    # Watermelon is 5.6 kg heavier than pineapple\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    # Solve for watermelon weight\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    # Subtracting the 4 corners as they are already counted\n    wheat_count_with_no_corners = 116 - 4\n    distance_between_wheat = perimeter / wheat_count_with_no_corners\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    multiplied_by_4 = result / 9\n    subtract_3 = multiplied_by_4 * 4\n    original_number = subtract_3 - 3\n\n    return original_number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_after_morning\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    \n    return int(more_bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total people to interview\n    total_people = 200\n    \n    # Ellie interviews 40 people every week\n    ellie_rate = 40\n    \n    # Combined work, finished in 4 weeks\n    combined_time = 4\n    \n    # Total work done by Ellie alone in 4 weeks\n    ellie_work = ellie_rate * combined_time\n    \n    # Remaining work to be done by Gloria\n    gloria_work = total_people - ellie_work\n    \n    # Rate at which Gloria works\n    # Since Gloria and Ellie together finish the work in 4 weeks\n    combined_rate = total_people / combined_time\n    \n    # Gloria's rate is the combined rate minus Ellie's rate\n    gloria_rate = combined_rate - ellie_rate\n    \n    # Time it takes for Gloria to finish the work alone\n    gloria_time = gloria_work / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    # Since we know B=2 and D=0, we need to find combinations for A, C, E, F without these digits.\n    for perm in permutations('1356789', 4):\n        A, C, E, F = perm\n\n        # Construct the numbers using the given digits and convert them to integers.\n        ABCDEF = int(f\"{A}2{C}0{E}{F}\")\n        EFABCD = int(f\"{E}{F}A2{C}0\")\n\n        # Check if the condition of the puzzle is met:\n        if 5 * ABCDEF == 6 * EFABCD:\n            # If the condition is met, construct the FACE number and return it.\n            return int(f\"{F}{A}{C}{E}\")\n\n# Call the solution function and assign the return value to \"ans\".\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    fraction = 3/8\n    number = 48\n    result = fraction * number\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * 0.28\n    \n    weight_B = 60\n    rice_in_B = (total_rice - 15 * 0.40) / weight_B\n\n    percent_rice_B = rice_in_B * 100\n\n    return percent_rice_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for the four numbers\n    a, b, c, d = symbols('a b c d')\n\n    # Given equations based on the problem statements\n    equation1 = Eq(a + (b + c + d) / 3, 39)\n    equation2 = Eq(d + (a + b + c) / 3, 51)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b, c, d))\n\n    # Since we want the distinct positive whole numbers and a,b,c,d are in descending order\n    # We need to ensure that a > b > c > d and they are whole numbers\n    # We use a loop to find the largest value of d that satisfies these conditions\n    max_d = None\n    for sol in solutions:\n        if all(sol[i] > sol[i+1] for i in range(3)) and all(isinstance(num, (int, float)) for num in sol):\n            if max_d is None or sol[d] > max_d:\n                max_d = sol[d]\n\n    # Return the largest possible value of the largest number\n    return max_d\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # in milliliters\n    total_minutes = 2 * 60  # 2 hours in minutes\n    total_milliliters = rate_per_minute * total_minutes\n    total_liters = total_milliliters / 1000  # converting milliliters to liters\n\n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Since there are trees at both ends, subtract the length for one tree\n    # because the last tree is not counted when we divide the road length\n    # by the tree spacing.\n    num_trees = (road_length - tree_spacing) // tree_spacing + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Assume Barbara took t minutes to reach the shopping mall\n    # Barbara walks 60 metres in a minute, so she walks 60 * t metres in t minutes\n    # Catherine walks 45 metres in a minute, so she walks 45 * t metres in t minutes\n    # When Barbara reaches the shopping mall, Catherine is 60 metres behind her\n    # So, 60 * t = 45 * t + 60\n    # Therefore, (60 - 45) * t = 60\n    # t = 60 / (60 - 45)\n    \n    t = 60 / (60 - 45)\n    \n    # Distance = speed * time\n    # Distance to the shopping mall is Barbara's speed * time taken\n    distance = 60 * t  # Barbara's speed (60) * time taken (t)\n    \n    return distance\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = (2 * 10) + (5 * 5) + (4 * 0.20)\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    total_money = 200\n    ratio_A_to_B = Eq(A / B, 4 / 3)\n    more_than_C = Eq(A - C, 20)\n    total_sum = Eq(A + B + C, total_money)\n\n    solutions = solve((ratio_A_to_B, more_than_C, total_sum), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    number_of_plates = total_time / time_per_plate\n    return int(number_of_plates)\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Nini's age and her dad's age.\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Create two equations based on the problem statement.\n    eq1 = Eq(dad_age, nini_age + 25)\n    eq2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (nini_age, dad_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 50\n    multiples_of_4 = set(range(4, 51, 4))\n    multiples_of_6 = set(range(6, 51, 6))\n\n    # Turning first group of students\n    for student_number in multiples_of_4:\n        # If they are facing the teacher, they turn backwards\n        if student_number in multiples_of_6:\n            students_facing_teacher += 1  # Turn from backward to facing\n        else:\n            students_facing_teacher -= 1  # Turn from facing to backward\n\n    # Turning second group of students\n    for student_number in multiples_of_6:\n        # If they are facing the teacher, they turn backwards\n        if student_number not in multiples_of_4:\n            students_facing_teacher -= 1  # Turn from facing to backward\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    num = 471471471471\n    den = 157157157157\n    ans = num // den\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 // 5\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * 7 // 9\n    return sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    # Since at least one student gets at least 3 apples, we can give 3 apples to one student\n    remaining_apples = apples - 3\n    # Now distribute the remaining 26 apples, each student gets at least 1 apple\n    # Use the Pigeonhole Principle: if n items are put into m containers, with n > m, then at least one container must contain more than one item.\n    # In this case, there can be at most as many students as remaining apples (26 students),\n    # because giving 1 apple to each student would use all apples.\n    # If there is one more student (27th), there would be no apples to give.\n    \n    class_size = remaining_apples\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for prime in range(10, 100): # Only check two-digit numbers\n        if isprime(prime):\n            reverse_prime = int(str(prime)[::-1])\n            if prime != reverse_prime and isprime(reverse_prime): \n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    initial_value = 140\n    final_value = 87.5\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of green balls and b represent the number of blue balls initially.\n    g, b = symbols('g b')\n\n    # Total number of balls is given.\n    total_balls_eq = Eq(g + b, 140)\n\n    # After removing 2/5 of the blue balls and 28 green balls, there is an equal number of each left.\n    balls_left_eq = Eq(g - 28, b - (2/5) * b)\n\n    # Solving the system of equations.\n    solutions = solve((total_balls_eq, balls_left_eq), (g, b))\n\n    # We want the initial number of blue balls.\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # If the alcoholic goes to three fixed bars at random,\n    # the probability of choosing any one of them is 1/3.\n    # If he is not at two of the bars, he must be at the third bar.\n    # Therefore, the probability that he is at the third bar is 1.\n    probability = 1\n    return probability\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_future_age = solutions[cousin] + 4\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average_num = (num1 + num2) / 2\n    return average_num\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_first_catch = 100\n    total_fish_second_catch = 100\n    marked_fish_second_catch = 16\n\n    estimated_total_fish = (marked_fish_first_catch * total_fish_second_catch) / marked_fish_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let the distance walked by Nancy be x meters, then Randy walks x + 10 meters\n    # According to the problem, the ratio of their walking distances is 2:3.\n    # Thus, we can write the proportion 2/3 = x / (x + 10)\n    # Cross multiply to solve for x\n    # 3x = 2(x + 10)\n    # 3x = 2x + 20\n    # x = 20 (Nancy's distance)\n    nancy_distance = 20\n    \n    # Randy's distance is 10 meters more than Nancy's\n    randy_distance = nancy_distance + 10\n    \n    # Total distance between them when they set off\n    total_distance = nancy_distance + randy_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    elaine_future_age = 12\n\n    age_difference = elaine_future_age - elaine_current_age\n    mandy_future_age = mandy_current_age + age_difference\n\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Fraction represented by repeating decimal 0.2014141414...\n    # can be written as 0.2 + 0.0014141414...\n    # Let's call 0.0014141414... as y\n    # then y = 0.0014 + 0.00001414 + 0.0000001414 + ...\n    # This is a geometric series with first term a = 0.0014 and common ratio r = 0.01\n    a = 14 / 10000\n    r = 1 / 100\n    # Sum of infinite geometric series s = a / (1 - r)\n    s = a / (1 - r)\n    \n    # Now, add the non-repeating part 0.2\n    repeating_decimal = 0.2 + s\n    \n    # The equation given is x/9900 = repeating_decimal\n    # So, x = repeating_decimal * 9900\n    x = repeating_decimal * 9900\n    \n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    series1_sum = sum(range(10, 21, 2))\n    series2_sum = sum(range(9, 20, 2))\n    ans = series1_sum - series2_sum\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # Loop through all possible three-digit even numbers\n    for i in range(100, 1000, 2):\n        # Split the number into separate digits\n        digits = [int(d) for d in str(i)]\n        # Check if the sum of digits is 8 and all digits are different\n        if sum(digits) == 8 and len(set(digits)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        if num % 10 == 2:\n            new_num = int(str(2) + str(num)[:-1])\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Using inclusion-exclusion principle\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n    failed_both_exams = total_students - passed_first_exam - failed_second_exam + passed_both_exams\n    passed_only_first_exam = passed_first_exam - passed_both_exams\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(3, 5), (6, 8), (7, 9)]\n\n    # Use the Chinese Remainder Theorem to find the solution\n    ans, _ = solve_congruence(*congruences)\n\n    # Ensure the answer is between 500 and 1000\n    while ans < 500:\n        ans += 5 * 8 * 9\n\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n    remainder = total_cereal_bars % people\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Each digit (a, b, c) will appear in the units, tens and hundreds place exactly twice\n    # in the six permutations of the three-digit numbers.\n    twice_each_position = 2 * (100 + 10 + 1)  # multiplier for each digit for the three positions\n    sum_of_all_numbers = twice_each_position * (a + b + c)\n\n    return sum_of_all_numbers\n\na, b, c = 1, 1, 1  # Temporary values to enable testing the function's logic\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            if product % 100 == 0:  # The last two digits are 0s\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_for_6_5_hours = 78\n    pay_per_hour = pay_for_6_5_hours / 6.5\n    required_hours = 300 / pay_per_hour\n    return required_hours\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    small_sack, large_sack = symbols('small_sack large_sack')\n\n    equation1 = Eq(large_sack, small_sack * 1.2)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Let's define the equations based on the information given.\n    # After selling, Mrs. Lee had an equal number of oranges and apples.\n    equation1 = Eq(oranges - 35, apples / 2)\n    \n    # Mrs. Lee had a total of 125 oranges and apples initially.\n    equation2 = Eq(oranges + apples, 125)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    # We need to return the number of oranges she had at first.\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome\n    least_5_digit_palindrome = 10001  # Number 10001 is the smallest 5-digit palindrome\n    \n    # The greatest 6-digit palindrome\n    greatest_6_digit_palindrome = 999999  # Number 999999 is the largest 6-digit palindrome\n    \n    # Calculate the difference\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 59))\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Initialize the sum of the digits from the right\n    digits_count = 0 \n    # Initialize the current number to start checking from\n    current_number = 1200\n    \n    # Loop through the numbers backwards until we find the position of the 2011th digit\n    while digits_count < 2011:\n        # Get the length of the current number when written as a string\n        current_len = len(str(current_number))\n        # Add the length to the digits count\n        digits_count += current_len\n        # If we haven't reached the 2011th digit, we decrease the current number\n        if digits_count < 2011:\n            current_number -= 1\n            \n    # Calculate the difference to know the exact position in the current number\n    difference = digits_count - 2011\n    # Convert the current number to string and get the required digit\n    ans = int(str(current_number)[difference])\n    \n    return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_coins = symbols('total_coins', integer=True)\n\n    # One quarter of the coins are showing heads before flipping\n    heads_before_flip = total_coins / 4\n\n    # After flipping two more, one third of the coins are showing heads\n    heads_after_flip = (total_coins / 3)\n\n    # Equation representing the scenario after flipping two coins\n    equation = Eq(heads_before_flip + 2, heads_after_flip)\n\n    # Solve the equation to find 'total_coins'\n    solution = solve(equation, total_coins)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # The book Linda likes is the 14th from the left\n    books_on_left = 14\n\n    # There are 6 books on the right of the picture book\n    books_on_right = 6\n\n    # Total number of books is the sum of books on the left and right\n    total_books = books_on_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_multiple = 50 // 5 * 5\n    num_multiples = last_multiple // 5\n    sum_multiples = (num_multiples * (5 + last_multiple)) // 2\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes ago\n\n    # Calculate the relative distance traveled by both planets in 5 minutes\n    distance = (speed_planet1 + speed_planet2) * time\n\n    return distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let's denote the number of cars by c and the number of motorbikes by m.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # c + m = 140 (the total number of vehicles)\n    # 4c + 2m = 490 (the total number of tyres)\n    \n    # Solving the equations\n    # 2c + 2m = 2 * 140 => 2c + 2m = 280\n    # Now subtract 2m from the second equation\n    # 4c + 2m - (2c + 2m) = 490 - 280 => 2c = 210\n    # Now divide by 2 to find the number of cars\n    c = 210 // 2\n    \n    return c\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    count = 0\n    for tens_place in [1, 2, 3, 4, 5]:  # Tens place cannot be 0\n        for ones_place in [0, 1, 2, 3, 4, 5]:  # Ones place can be 0\n            if tens_place != ones_place:  # Tens and ones places must be different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20  # 20%\n    \n    # Calculate original price before the sale\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5  # Sum of the parts of the ratio (apple:orange = 4:5)\n    total_litres = 36     # Total litres of the fruit drink\n    apple_ratio = 4       # Apple part of the ratio\n\n    apple_juice = (apple_ratio / total_ratio) * total_litres\n\n    return apple_juice\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    effective_distance = day_distance - night_distance\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    return round(8.765, 1)\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_kg_avocados = 960\n    kg_per_box = 8\n\n    num_boxes = total_kg_avocados // kg_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    added_number = 12\n\n    original_number = (result - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    n = 1\n    while True:\n        if n % 2 == 1 and n % 13 == 1:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # d represents the divisor\n    eq1 = Eq(190 % d, a)\n    eq2 = Eq(137 % d, a + 4)\n    eq3 = Eq(101 % d, a + 6)\n\n    # Because we are looking for the same divisor d for all three equations,\n    # there must be equivalence between these residues when reduced by d.\n    # Therefore, we are finding a d such that the difference between the numbers (190-137, 137-101, and 190-101)\n    # is divisible by d.\n    eqs = [\n        Eq((190 - 137) % d, 0),\n        Eq((137 - 101) % d, 0),\n        Eq((190 - 101) % d, 0)\n    ]\n\n    # We are now solving for the divisor 'd'\n    sol = solve(eqs, d)\n\n    # We are only interested in non-trivial positive integer solutions for the divisor\n    valid_divisors = [s for s in sol if s.is_integer and s > 0]\n\n    if not valid_divisors:\n        return None  # Return None if no valid divisor is found\n\n    # Choose the valid divisor (it should be unique for this system to have a unique solution for 'a')\n    divisor = valid_divisors[0]\n\n    # Solving for the remainder 'a' using the valid divisor\n    a_val = solve(eq1.subs(d, divisor), a)\n\n    # Now we find the remainder when 299 is divided by the divisor\n    ans = 299 % divisor\n\n    return ans\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    number_of_classes = 5\n    donation_per_student = 5.78\n\n    total_donation = students_per_class * number_of_classes * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import isprime\n\ndef solution():\n    max_sum = 0\n    for y in range(2, 200):  # Since y is a prime number, start with 2, the smallest prime\n        if isprime(y):\n            x = (200 + y) / (2 + y)\n            if x.is_integer() and isprime(x) and x != y:  # Check if x is an integer and a different prime\n                max_sum = max(max_sum, int(x + y))\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial as fact\n\ndef solution():\n    total_digits = 6\n    n_2 = 2  # Number of 2's\n    n_3 = 2  # Number of 3's\n    n_4 = 1  # Number of 4's\n    n_5 = 1  # Number of 5's\n    \n    ans = fact(total_digits) // (fact(n_2) * fact(n_3) * fact(n_4) * fact(n_5))\n    \n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction = 1/4\n    initial_money = spent / fraction\n    return initial_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each dwarf's height\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Equations based on the given information\n    equations = (\n        Eq(doc, happy + 10),             # Doc is 10cm taller than Happy\n        Eq(happy, dopey + 10),           # Happy is 10cm taller than Dopey\n        Eq(sneezy, dopey),               # Sneezy is the same height as Dopey\n        Eq(bashful, dopey),              # Bashful is the same height as Dopey\n        Eq(grumpy, dopey),               # Grumpy is the same height as Dopey\n        Eq(sleepy, 80),                  # Sleepy is 80cm tall\n        Eq(doc + sleepy, dopey + sneezy) # Doc and Sleepy's combined height is the same as Dopey and Sneezy\n    )\n\n    # Solve the system of equations\n    solutions = solve(equations)\n\n    # Calculate the total height of the seven dwarfs\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    # In a round-robin tournament, each team plays with each other team once\n    # There are n(n-1)/2 matches in a round-robin tournament with n teams\n    \n    teams = 8\n    rounds = (teams * (teams - 1)) // 2\n    return rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert the mixed numbers to improper fractions\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n    \n    # Perform the addition\n    numerator = num1 + num2\n    \n    # Calculate the denominator\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n\n    # Perform the division\n    result = numerator / denominator\n    \n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # The construction company can construct 1000 meters in 5 days.\n    # This means they can construct 1000/5 = 200 meters per day.\n    meters_per_day = 1000 / 5\n    \n    # To construct a 2600-meter highway, we divide the total length\n    # by the construction speed (meters per day).\n    days_needed = 2600 / meters_per_day\n    \n    return days_needed\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time_original = 5\n    time_new = 3\n\n    speed = distance / time_original\n    distance_new = speed * time_new\n\n    return distance_new\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for i in range(10, 60):\n        if i % 8 == 3 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = (last_term - first_term + 1)\n    sum_of_series = (first_term + last_term) * num_terms // 2\n    return 'odd' if sum_of_series % 2 == 1 else 'even'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    qiang, rory, sophia = symbols('qiang rory sophia')\n    \n    equation1 = Eq(qiang + rory, 22)\n    equation2 = Eq(qiang + sophia, 17)\n    equation3 = Eq(rory + sophia, 11)\n\n    solutions = solve((equation1, equation2, equation3), (qiang, rory, sophia))\n\n    return max(solutions[qiang], solutions[rory], solutions[sophia])\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_between_trees = 5  # in meters\n    \n    # The total length would be the distance for 29 intervals between 30 trees.\n    total_length = (number_of_trees - 1) * distance_between_trees\n    \n    return total_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    for prime in range(20):\n        if is_prime(prime) and is_prime(prime + 6) and is_prime(prime - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Distance covered in the first 30 minutes at speed x mph\n    distance_first_30 = x * (30 / 60)\n    \n    # Distance covered in the second 30 minutes at speed (x-20) mph\n    distance_second_30 = (x - 20) * (30 / 60)\n    \n    # Distance covered in the last 30 minutes at speed (x+10) mph\n    distance_last_30 = (x + 10) * (30 / 60)\n    \n    # Total distance is the sum of the distances covered in each interval\n    total_distance = distance_first_30 + distance_second_30 + distance_last_30\n\n    # Equation for the total distance driven\n    equation = Eq(total_distance, 70)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n\n    # 1-9: single-digit pages\n    digits += 9\n\n    # 10-99: double-digit pages\n    digits += 2 * (99 - 10 + 1)\n\n    # 100-345: triple-digit pages\n    digits += 3 * (pages - 100 + 1)\n\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = -(-total_people // bus_capacity)  # Ceiling division to get the number of buses\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    total_prize = symbols('total_prize')\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    solution = solve(equation, total_prize)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # The coach must stand in the middle, so there are 3 positions on each side.\n    coach_positions = 1  # Fixed position for the coach.\n\n    # There are two positions available for the captain: left or right of the coach.\n    captain_positions = 2\n\n    # There are 5 remaining players to arrange in 5 positions.\n    remaining_player_arrangements = factorial(5)\n\n    # Total arrangements is the product of the individual possibilities.\n    total_arrangements = coach_positions * captain_positions * remaining_player_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    boys_more_than_girls = 20\n    total_students = 0\n    layer = 0\n\n    while True:\n        boys = (layer * 4 + 1) ** 2 - ((layer - 1) * 4 + 1) ** 2 if layer > 0 else 1\n        if layer > 0:\n            girls = ((layer * 4 + 1) ** 2 - (2 * layer) ** 2) + ((layer - 1) * 4 + 1) ** 2 - ((2 * (layer - 1)) ** 2)\n        else:\n            girls = 0\n\n        if boys - girls == boys_more_than_girls:\n            total_students = (layer * 4 + 1) ** 2\n            break\n        \n        if boys - girls > boys_more_than_girls:\n            break\n\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of penguins\n    penguins = symbols('penguins')\n\n    # If $3 fish to each penguin, there will be $25 fish left.\n    # The total fish can be expressed as: 3 * penguins + 25\n    # If $6 fish to each penguin, there will be 1 penguin with only $1 fish.\n    # The total fish can also be expressed as: 6 * (penguins - 1) + 1\n\n    # Equate the two expressions to get the equation\n    equation = Eq(3 * penguins + 25, 6 * (penguins - 1) + 1)\n\n    # Solve equation for penguins\n    solution = solve(equation, penguins)\n\n    return solution[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    for i in range(1, 31):\n        n = int(((8*i + 1)**0.5 - 1)/2)\n        sum_of_terms += n\n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = 0.25 * 20 + 1/5 * 30 + 2/3 * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f'1{a}7731')\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n    \n    max_other = max(alice_votes, betty_votes)\n    votes_needed = max_other - cindy_votes + 1  # Cindy needs one more vote than the current highest to ensure winning\n    \n    if votes_needed <= remaining_votes:\n        # Cindy can get enough votes to ensure she is the Model Student\n        ans = votes_needed\n    else:\n        # It is impossible for Cindy to ensure she is the Model Student with the remaining votes\n        ans = -1  # or some indication that it's impossible\n\n    return ans\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Evaluating the given expressions step by step \n    # Convert the repeating decimals to fractions\n    repeat_1 = 10/3      # -3.\\dot{3} is -10/3 as a fraction\n    repeat_2 = 1/0.142857  # 0.\\dot{1}\\dot{4}\\dot{2}\\dot{8}\\dot{5}\\dot{7} is 1/7 as a fraction\n\n    # Calculate the first term\n    first_term_numerator = 7 / (-repeat_1)\n    first_term_denominator = (-0.027) ** (1/3)  # Cube root\n    first_term = first_term_numerator / first_term_denominator\n\n    # Calculate the second term\n    second_term_numerator = (2**3) / (4**2)\n    second_term_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_term = second_term_numerator / second_term_denominator\n\n    # Calculate the third term\n    third_term = (0.1 / repeat_2) + (2 * 0.3)\n\n    # Calculate final answer by adding/subtracting each term\n    ans = first_term + second_term - third_term\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    # Correct the mistake in the equation (the fractional values)\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_birth_year = 2005 - 50\n    james_birth_year = 1997 - 20\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    sales = symbols('sales')\n    \n    # Defining the piecewise commission function\n    commission = 0.02 * sales if sales <= 25000 else 0.02 * 25000 + 0.05 * (sales - 25000)\n\n    # Salary equation: base salary + commission = total salary\n    total_salary = 2500 + commission\n    salary_equation = total_salary - 3300 \n\n    # Solving for the sales\n    sales_july = solve(salary_equation, sales)\n    \n    return sales_july[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    # Let r represent the original amount of marbles Ryan had,\n    # and a represent the original amount of marbles Audrey had.\n\n    # The problem gives us two equations:\n    # 1. r/a = 2/7 => 7r = 2a\n    # 2. (r + 20)/(a - 80) = 1/3 => 3(r + 20) = a - 80\n\n    # We need to solve these two equations to find the value of a.\n    from sympy import symbols, Eq, solve\n    r, a = symbols('r a')\n\n    equation1 = Eq(7 * r, 2 * a)\n    equation2 = Eq(3 * (r + 20), a - 80)\n\n    # Use sympy's solve function to solve for 'a' and 'r'\n    solutions = solve((equation1, equation2), (r, a))\n\n    # We only need the original amount of Audrey's marbles\n    return solutions[a]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_for_four = 150 - 2\n    total_height_for_four = 4 * average_height_for_four\n    \n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_for_other_two = total_height_for_other_two / 2\n    \n    return average_height_for_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing the first test\n    p_pass_first = 0.4\n    \n    # Probability of failing the first test and passing the second\n    p_fail_first_pass_second = (1 - p_pass_first) * 0.5\n    \n    # Probability of failing the first two tests and passing the third\n    p_fail_first_two_pass_third = (1 - p_pass_first) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    total_probability = p_pass_first + p_fail_first_pass_second + p_fail_first_two_pass_third\n    \n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digits_per_page = 1\n    \n    while digits > 0:\n        possible_pages = 9 * (10 ** (digits_per_page - 1)) * digits_per_page\n        if digits - possible_pages > 0:\n            pages += 9 * (10 ** (digits_per_page - 1))\n            digits -= possible_pages\n        else:\n            pages += digits // digits_per_page\n            digits = 0\n        digits_per_page += 1\n        \n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_from_A_to_B = 2\n    routes_from_B_to_C = 3\n    \n    total_routes = routes_from_A_to_B * routes_from_B_to_C\n    \n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    # Using the arithmetic series sum formula: S_n = n/2 * (a_1 + a_n)\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    product = 1\n    for i in range(1, 16):\n        product *= i\n\n    count_zeros = 0\n    while product % 10 == 0:\n        product //= 10\n        count_zeros += 1\n\n    return count_zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq((age / 4) + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n    # The total distance climbed after 5 days not reaching the surface\n    distance_after_5_days = (daily_climb * 5) - sixth_day_climb\n    # On the 6th day, the snail climbs out, so we need to calculate how much it climbed\n    # during the nights before the 6th day. We do this by subtracting the distance climbed\n    # during the days from the total distance to find the total slid distance.\n    total_slide = distance_after_5_days - total_distance\n\n    # The snail slides the same distance each night, so total slide distance is divided by 5 nights\n    nightly_slide = -total_slide / 5\n\n    return int(nightly_slide)\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples = 0\n    for a in range(1, 48):\n        for b in range(a+1, 48):\n            for c in range(b+1, 48):\n                d = 48 - (a+b+c)\n                if d > c:\n                    max_apples = max(max_apples, b)\n    return max_apples\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    fastest = 1  # Eddie takes 1 minute\n    fast = 2     # Jack takes 2 minutes\n    slow = 5     # Rose takes 5 minutes\n    slowest = 10 # Mary takes 10 minutes\n\n    # Strategy: First the two fastest cross, then the fastest goes back.\n    # Next, the two slowest cross, and the fast one returns.\n    # Finally, the two fastest cross again.\n    total_time = fastest + (2 * fast) + slowest\n\n    return total_time\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for n in range(1, 45):\n        ans += (2*n - 1)**2 - (2*n)**2\n    ans += 89**2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    prime_number = 2**19 - 1\n    remainder = prime_number % 5\n    return remainder\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n\n    # Starting from the assumption that there will be at least one layer and the difference has to accommodate the fact that the outer layer has to be boys.\n    # Therefore, starting at 3x3 to make sure the inner layer is girls.\n    side_length = 3\n\n    while True:\n        # The total number of boys is equal to the perimeter of the square minus the 4 corners,\n        # because we're counting corners twice (it's the number of boys on the outer layer of the current square)\n        boys = 4 * side_length - 4\n\n        # The total number of girls is equal to the perimeter of the square with two less on each dimension, to account for the inner square,\n        # minus the 4 corners, for the same reason as before.\n        girls = 4 * (side_length - 2) - 4\n\n        # Calculate the total students by adding the square of the side length\n        # (which includes all the students inside this layer)\n        total_students = side_length * side_length\n\n        # If the number of boys minus number of girls equals 44,\n        # then the total number of students is the current side_length squared.\n        if boys - girls == boys_more_than_girls:\n            break\n\n        # If the current side length does not give the correct number of students,\n        # try the next square by incrementing the side_length by 2 (to keep an even number of layers and alternate between boys and girls).\n        side_length += 2\n\n    return total_students\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    return factorial(4)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are 3 choices for the first day: Chocolate (C), Peaches (P), Strawberries (S)\n    # Jenny eats chocolate on the first day, so we have only 'C' for day 1.\n    # For the second day, Jenny has 2 choices: Peaches (P) or Strawberries (S), since she can't eat Chocolate again.\n    # For the third day, Jenny again has 2 choices, which depend on what she ate on the second day:\n    # If she ate Peaches on the second day, she can only have Chocolate or Strawberries on the third day.\n    # If she ate Strawberries on the second day, she can only have Chocolate or Peaches on the third day.\n    # So each choice for the second day gives 2 possibilities for the third day, resulting in 2*2 = 4 possibilities in total.\n\n    # Since Jenny eats Chocolate on the first day, we can ignore it and calculate the possibilities for the remaining 2 days.\n    ways = 2 * 2  # For each choice of the second day, there are two choices for the third day.\n\n    return ways\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let l be the original length and w be the width of the rectangle.\n    # When we increase the length by 12 cm, the new length will be l + 12.\n    # The perimeter of a rectangle is given by P = 2*(length + width).\n    # We are given that the new perimeter is 38 cm, so we have:\n    # 38 = 2 * ((l + 12) + w)\n    # From this equation, we can solve for w in terms of l:\n    # 19 = l + 12 + w\n    # w = 19 - l - 12\n    # w = 7 - l\n    # The perimeter of the original rectangle is P_original = 2 * (l + w)\n    # We substitute w from the equation derived above to find the original perimeter:\n    # P_original = 2 * (l + (7 - l))\n    # P_original = 2 * 7\n    # P_original = 14 cm\n    \n    P_original = 2 * 7\n    return P_original\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    num_ways = 0\n    for i in range(1, 8):\n        if i < 8 - i:\n            num_ways += 1\n    return num_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    money_left = 160\n    \n    # Let the total salary be x\n    # She spent (5/9)x on the television\n    # She had (4/9)x left\n    # She spent 3/4 of the remainder on the table, i.e., 3/4 * (4/9)x = (1/3)x\n    # Therefore, she had (4/9)x - (1/3)x left which is equivalent to 160\n    \n    # Calculating the total salary (x)\n    x = money_left / (1/9)\n    \n    # Calculating the cost of the television\n    cost_of_television = (5/9) * x\n    \n    return cost_of_television\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n    \n    # There are 7 people and 8 seats at a round table.\n    # Fix one person and arrange the remaining 6 around\n    # the table to avoid counting rotations as different arrangements.\n    ans = factorial(6)  # 6! for the remaining seats\n    \n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5/3)\n    return result\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # In 3 years, the sum of the ages is 27\n    equation1 = Eq((john_age + 3) + (emma_age + 3), 27)\n    # Emma's age is the difference between her and John's ages\n    equation2 = Eq(emma_age, john_age - emma_age)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earning_per_day = 70\n    days_worked_in_a_week = 6\n    total_earnings = average_earning_per_day * days_worked_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    points = 15\n    triangles = comb(points, 3)\n    return triangles\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed in km/h\n    speed_tom = 48\n    # Jack's speed in km/h\n    speed_jack = 50\n    \n    # The time after which Jack starts, in hours\n    delay_jack = 3\n    # The time after Jack starts when they are 15 km apart, in hours\n    time_to_meet = 5\n    \n    # Distance traveled by Tom before Jack starts\n    distance_tom_before_jack_starts = speed_tom * delay_jack\n    \n    # Total time Tom travels\n    total_time_tom = delay_jack + time_to_meet\n    \n    # Total time Jack travels\n    total_time_jack = time_to_meet\n    \n    # Distance traveled by Tom until they are 15 km apart\n    distance_tom = total_time_tom * speed_tom\n    \n    # Distance traveled by Jack until they are 15 km apart\n    distance_jack = total_time_jack * speed_jack\n    \n    # Total distance between A and B\n    distance_AB = distance_tom + distance_jack + 15\n    \n    return distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Calculate the total percentage represented by 'Water' in the pie chart\n    # Since 'Water' is represented as 36 degrees in the pie chart,\n    # we can find its percentage by the formula (angle/360)*100.\n    water_percentage = (36 / 360) * 100\n\n    # The sum of the percentages for all drink choices should add up to 100%.\n    # tea_percentage = 25% (since one quarter chose tea)\n    # 7 people choose coffee, but we don't know the percentage yet\n    # cola_percentage = 30%\n    # water_percentage was calculated above.\n\n    # Let's denote the unknown total number of people as 'p'.\n    # The percentage of people who chose coffee can be calculated by subtracting the known percentages from 100%.\n    # coffee_percentage = 100 - tea_percentage - cola_percentage - water_percentage\n    tea_percentage = 25\n    cola_percentage = 30\n    coffee_percentage = 100 - tea_percentage - cola_percentage - water_percentage\n\n    # Since 7 people chose coffee, we can find the total number of people by\n    # dividing the number of coffee choosers by the coffee_percentage and multiplying by 100.\n    # p = (number_of_coffee_choosers / coffee_percentage) * 100\n    number_of_coffee_choosers = 7\n\n    # Calculate the total number of people\n    p = (number_of_coffee_choosers / coffee_percentage) * 100\n\n    return int(round(p))\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    children, dogs = symbols('children dogs')\n    # Each child has 2 legs, each dog has 4 legs\n    # There are 3 times as many dogs as children\n    equation1 = Eq(dogs, 3 * children)\n    # Total number of legs is 56\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # Let the total number of pupils be x.\n    # According to the problem, when two fifths are absent, three fifths are present.\n    # Three fifths of the class equals 18 pupils.\n    # Hence (3/5)*x = 18\n    # Now we solve for x.\n    x = (18 * 5) / 3\n    return int(x)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 * 7 + 5 * 7) // 7\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    tree_spacing = 2\n    perimeter = 2 * (length + width)\n    number_of_trees = perimeter // tree_spacing\n\n    return int(number_of_trees)\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    original_income = 500\n    income_tax_percent = 3\n    income_tax_amount = (income_tax_percent / 100) * original_income\n    final_income = original_income - income_tax_amount\n\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n    children_count = 0\n\n    # The minimum number of adults is 2\n    for adults_count in range(2, total_charge // adult_price + 1):\n        remaining_charge = total_charge - (adults_count * adult_price)\n        if remaining_charge % child_price == 0:\n            children_count = remaining_charge // child_price\n            break  # We break after finding the first valid solution\n\n    return children_count\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_each = total_sweets // people\n\n    return sweets_each\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_mixture_volume = 750 * (1 + 9)\n    volume_per_bottle = 1000  # 1 litre = 1000 ml\n    num_bottles = total_mixture_volume // volume_per_bottle\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    \n    ans = right_side / left_side\n    \n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # Let x be the total money Li Yan had at first.\n    # She spent 1/3 of it on a book, so she spent x/3 on the book.\n    # She then had 2/3 left, and spent 1/2 of that on a bag,\n    # which means she spent (1/2)*(2/3)*x = 1/3*x on the bag.\n    # The total money spent on the book and the bag is 1/3*x + 1/3*x = 2/3*x\n    # According to Thomas's calculation, 5/6 of x is spent, which is incorrect.\n\n    # We set up the equation as 2/3*x = total_cost\n    # Then we solve for x to find the amount of money Li Yan had at first.\n    x = total_cost / (2/3)\n    \n    return x\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Using modulus to find the last 2 digits (which is equivalent to modulo 100)\n    mod_result = (6 ** 2015 + 2015 * 6 + 2015 ** 6) % 100\n    return mod_result\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n\n    # As B=2 and D=0, we can generate permutations of the other four digits\n    for p in permutations('123456789', 4):\n        if '2' in p or '0' in p:  # Skip the permutations containing 2 or 0\n            continue\n        A, C, E, F = p\n        ABCDEF = int(f\"{A}{2}{C}{0}{E}{F}\")\n        EFABCD = int(f\"{E}{F}{A}{2}{C}{0}\")\n        \n        # Check the condition\n        if 5 * ABCDEF == 6 * EFABCD:\n            FACE = int(f\"{F}{A}{C}{E}\")\n            return FACE\n\n    return None\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    # Use a loop to find the number of cookies\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # The factors multiply to the square of the number.\n    # Given that 1 and the number itself are factors, and assuming that the factors are unique, we have 6 known factors: 1, 2, 4, 7, 8, and the number itself.\n    # The 7th and 8th factors must be a pair that multiplies to the number. But since no other factors are mentioned and 7 is one of the factors, \n    # the number must be a multiple of 7. As 8 and 4 are already factors, the number cannot be a multiple of these (as that would introduce more factors than what is allowed).\n    # Therefore, with 7 being a factor, the number should also be a multiple of 7. Moreover, the number must be 7 multiplied by a factor that has not been listed yet.\n\n    # We can infer that the only factor that can be paired with 7 to reach the number is 14,  \n    # as 14 is twice 7 and it would not introduce any new factors other than 14 itself.\n    # So the number is 7 times 14, which is 98.\n\n    return 98\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10  # 10% discount\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the original number of cows and 'g' be the original number of goats\n    # Let 't' be the total number of animals originally (c + g)\n    c, g, t = symbols('c g t')\n\n    # Initial conditions\n    initial_cows_percentage = 65 / 100\n    equation1 = Eq(c, initial_cows_percentage * t)\n    equation2 = Eq(c + g, t)\n\n    # After adding 240 animals\n    # The percentage of cows becomes 65% + 20% = 85%\n    new_cows_percentage = (65 + 20) / 100\n    equation3 = Eq(c + 240, new_cows_percentage * (t + 240))  # New number of cows\n    equation4 = Eq(g * 2, g + 240)  # The number of goats doubled\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g, t))\n\n    # goats were 'g' initially\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    sold_first_month = 1680\n    # Let x be the original total number of cookies in the box\n    # James sold 7/20 more cookies from another similar box in the second month\n    # James kept 3/20 less of the number of cookies he kept the first month\n    # This means in the second month he kept 1 - (7/20) = 13/20 of the second box,\n    # and he kept 20/20 - 3/20 = 17/20 of the first box\n\n    # Thus, (17/20 of x) - (13/20 of x) = 1680\n    # (17/20)x - (13/20)x = 1680\n    # (4/20)x = 1680\n    # Simplify by dividing by 4\n    # (1/5)x = 1680\n    total_cookies = 1680 * 5  # Multiply both sides by 5 to find x\n\n    return total_cookies\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene's position from the front:\n    jolene_position = 6\n    # Amy's position from the back:\n    amy_position = 8\n\n    # Total children in the queue equals Jolene's position plus Amy's position\n    # since Amy is directly behind Jolene.\n    total_children = jolene_position + amy_position - 1\n\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n    net_gain_per_period = jumps_per_period * jump_up - slide_down\n\n    periods = (total_height - jump_up) // net_gain_per_period\n    remaining_height = total_height - periods * net_gain_per_period\n\n    jumps = periods * jumps_per_period\n    while remaining_height > 0:\n        jumps += 1\n        remaining_height -= jump_up\n        if remaining_height > 0:\n            remaining_height += slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    # Possible numbers for each condition\n    num_5 = set(range(1, 1000, 5))\n    num_6 = set(range(2, 1000, 6))\n    num_11 = set(range(9, 1000, 11))\n    \n    # Find intersection of the three sets which gives the common number\n    common_num = num_5 & num_6 & num_11\n    \n    # Return the smallest number among the common\n    return min(common_num)\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # Total perimeter of the garden\n    perimeter = 5 * side_length\n\n    # Sunflowers on the corners are already counted\n    num_corners = 5\n\n    # Calculate the number of sunflowers that can be planted between corners\n    sunflowers_between_corners = (side_length - distance_apart) // distance_apart\n\n    # Total number of sunflowers planted\n    total_sunflowers = (sunflowers_between_corners * 5) + num_corners\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300\n    stamps_can_buy = pounds_to_pence // stamp_cost_pence\n\n    return stamps_can_buy\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_time = 2\n\n    # Since the boat can only carry 7 people at a time and needs to return,\n    # it will take 'total_trips' round trips to ferry all except for the last trip,\n    # and one one-way trip for the last batch.\n    total_trips = (total_people // boat_capacity)\n    \n    # If there's no need for the boat to return on the last trip, subtract 1 from total_trips\n    if total_people % boat_capacity == 0:\n        total_trips -= 1\n\n    # Time calculation as round trips take 2 times the trip time, and the last trip takes only trip_time\n    total_time = total_trips * 2 * trip_time + trip_time\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let x be the time Ryan drives at his usual speed\n    usual_speed = 45\n    reduced_speed = 30\n    delay = 2\n\n    # Distance = Speed * Time\n    # The distance remains the same, so we can set the two distance expressions equal to each other:\n    # usual_speed * x = reduced_speed * (x + delay)\n    \n    # Solving for x:\n    x = (reduced_speed * delay) / (usual_speed - reduced_speed)\n    \n    return x\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum of the first half 3+4+5+...+10\n    first_half = sum(range(3, 11))\n    # The second half of the sequence is symmetric to the first half, so the sum is the same\n    second_half = first_half\n\n    # The total sum is the sum of both halves\n    total_sum = first_half + second_half\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    # Using the itertools library to generate partitioned combinations\n    from itertools import combinations_with_replacement\n\n    # Find all combinations for number 5 by varying the length of tuples\n    count = 0\n    for i in range(1, 5):  # The maximum length of tuple would be one less than the number itself\n        # Finding all unique sets where the sum equals 5\n        for comb in combinations_with_replacement(range(1, 5), i):\n            if sum(comb) == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3  # We only need the remainder when dividing by 3\n    return a\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (14/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n\n    equation1 = Eq(sweets - 6 * students, -26)\n    equation2 = Eq(sweets - 5 * students, -5)\n\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If the difference between each tree is exactly 1 fruit,\n    # then the number of fruits for the trees form an arithmetic sequence.\n    \n    # For the sum to be 225, the average (mean) number of fruits per tree\n    # needs to be 225 / 8, but this is not an integer since 225 is not divisible by 8.\n    # The sum of an even number of integers in an arithmetic progression is even,\n    # but 225 is odd. Therefore, it is not possible.\n    \n    return \"It is not possible because the sum of an even number of terms in an arithmetic progression where the common difference is 1 must be even, but 225 is odd.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    # Let Leo's current age be L and his son's age be S\n    for L in range(1, 100):\n        for S in range(1, L):\n            # When Leo was S years old, his son was 4 years old\n            if L - S == S - 4:\n                # When the son reaches Leo's current age, Leo will be 70 years old\n                if L + (L - S) == 70:\n                    return L\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    # equation for the cost of a blouse and a dress\n    equation1 = Eq(blouse + dress, 41)\n\n    # equation for the cost of 4 blouses and 3 dresses\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef permutations_count(n, r):\n    return factorial(n) // factorial(n - r)\n\ndef solution():\n    # There can be at most 2 dancing performances at the beginning or end without a singing performance in between\n    # and 1 dancing performance between any two singing performances. So we arrange the singing performances first,\n    # which can be done in 4! ways, and then insert the dancing performances in the 5 available spots.\n    \n    # Count the number of ways to arrange singing performances\n    sing_permutations = factorial(4)\n    \n    # There are 5 spots where we could potentially place dancing performances: \n    # before the first singing performance, between the first and second, second and third, third and fourth, \n    # and after the fourth singing performance. We need to choose 3 spots out of these 5 to place the dancing performances. \n    # We can use combinations to calculate this.\n    \n    # Count the number of ways to choose spots for the dancing performances\n    dance_spots_combinations = permutations_count(5, 3)\n    \n    # The total number of different arrangements\n    total_arrangements = sing_permutations * dance_spots_combinations\n    return total_arrangements\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years_later = 0\n    while True:\n        heidi_age += 1\n        dad_age += 1\n        years_later += 1\n        if dad_age == 4 * heidi_age:\n            break\n    return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return int(words_in_9_minutes)\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    number = 60\n    count_of_2 = 0\n    count_of_5 = 0\n    \n    for i in range(2, number + 1):\n        while i % 2 == 0:\n            count_of_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_of_5 += 1\n            i = i // 5\n    \n    # The number of zeros is determined by the number of pairs of 2 and 5\n    ans = min(count_of_2, count_of_5)\n    \n    return ans\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_numbers_initial = 3\n\n    # Using the formula for average: sum_of_numbers / number_of_values = average\n    sum_initial = average_initial * num_numbers_initial  # Sum of the first three numbers\n    sum_final = average_final * (num_numbers_initial + 1)  # Sum of all four numbers including the new number\n\n    # Finding the fourth number by subtracting the initial sum from the final sum\n    fourth_number = sum_final - sum_initial\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    r = symbols('r')\n    \n    # Equation for 216r being a square number\n    equation = Eq(sqrt(216*r) % 1, 0)\n\n    # Find the value of r\n    solutions = solve(equation, r)\n\n    # Select the appropriate solution as answer\n    for sol in solutions:\n        if sol.is_real and sol > 0:\n            ans = sol\n            break\n\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3/13) * 52\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    net_distance_per_day = 8 - 3  # Snail climbs up 8m and slips down 3m\n    total_days = 9\n\n    # On the 9th day, the snail climbs out, so we don't count the slip back.\n    # For the first 8 days, the snail climbs net_distance_per_day\n    # On the 9th day, it climbs the remaining distance to get out which is 8m.\n    total_distance_covered = net_distance_per_day * (total_days - 1) + 8\n\n    return total_distance_covered\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    \n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = quotient + 1\n    smallest_dividend = (quotient * smallest_divisor) + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    know_french = 75\n    know_japanese = 45\n    \n    # Since everyone is a foreign language teacher, the overlap of those who know\n    # French and Japanese must be the sum of teachers who know either minus the total.\n    know_both = (know_french + know_japanese) - total_teachers\n    \n    # Teachers who only know French are those who know French minus those who also know Japanese.\n    only_know_french = know_french - know_both\n\n    return only_know_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of a bag of sweets and a can of drink\n    sweets, drink = symbols('sweets drink')\n    \n    # Create the equations based on the given information\n    equation1 = Eq(3 * sweets + 5 * drink, 4.90)\n    equation2 = Eq(sweets + 3 * drink, 2.70)\n    \n    # Solve the equations to find the cost of a bag of sweets\n    solutions = solve((equation1, equation2), (sweets, drink))\n    \n    return solutions[sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)  # Total ways to arrange 6 people in a line\n    ways_teddy_leftmost = factorial(5)  # Ways to arrange the remaining 5 people if Teddy is on the furthest left\n    ways_teddy_not_leftmost = total_ways - ways_teddy_leftmost\n\n    return ways_teddy_not_leftmost\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n    n = 1  # Start with the first term\n      \n    # Use the formula for the nth term of an arithmetic sequence to find when it becomes negative\n    # nth_term = first_term + (n - 1) * common_difference\n    # To find when nth_term < 0, solve the inequality:\n    # 0 > first_term + (n - 1) * common_difference\n    while first_term + (n - 1) * common_difference > 0:\n        n += 1\n\n    return n - 1  # Subtract 1 because we want the term before it becomes negative\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    amount = total_pence * fraction\n    return amount\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # iterate from two-digit number 10 to 99\n        if (i // 10 + i % 10) % 7 == 0:  # check if the sum of the digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # The sum of seven consecutive numbers can be represented by\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) + (x + 5) + (x + 6) = 280.\n    # Simplifying that gives\n    # 7x + 21 = 280\n    # 7x = 280 - 21\n    # x = (280 - 21) / 7\n    x = (280 - 21) // 7\n    \n    # The largest number will be x + 6\n    largest_number = x + 6\n    \n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    def difference_of_squares(a, b):\n        # (a^2 - b^2) = (a + b)(a - b)\n        return (a + b) * (a - b)\n    \n    ans = difference_of_squares(1000, 990) + difference_of_squares(980, 970) + difference_of_squares(20, 10)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):  # A is a 3-digit number\n        if a % 75 != 0:         # A must be divisible by the HCF 75\n            continue\n        for b in range(a+1, 1000):  # B is a 3-digit number, must be greater than A\n            if b % 75 != 0 or a == b:  # B must be divisible by the HCF 75 and not equal to A\n                continue\n            str_a = str(a)\n            str_b = str(b)\n            # Check if A and B have two equal digits\n            common_digits = 0\n            for digit in str_a:\n                if digit in str_b:\n                    common_digits += 1\n            if common_digits >= 2:\n                max_sum = max(max_sum, a + b)\n\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    sign = 1  # Start with addition (+)\n    for number in range(20, 1, -2):\n        total += sign * number\n        sign *= -1  # Alternate between addition and subtraction\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n    \n    # The problem can be interpreted as placing the 5 magazines (M) in the 6 possible slots\n    # that exist between the 5 storybooks (S) plus one slot at the beginning and end.\n    # For example: _ S _ S _ S _ S _ S _ (allowed: M in any slot)\n    # The arrangement is an example of a combination of placing 5 indistinguishable objects into 6 distinguishable slots\n    # So first we calculate the combinations of placing 5 magazines into 6 slots\n    magazines_slots_combinations = factorial(6) // (factorial(5) * factorial(6-5))\n    \n    # Then we have to arrange the 5 magazines and 5 storybooks, which are indistinguishable among themselves\n    # For this the formula is factorial(total_books) // (factorial(magazines) * factorial(storybooks))\n    total_arrangement = factorial(10) // (factorial(5) * factorial(5))\n    \n    # The final answer is the product of the combinations of the slots and the internal arrangements\n    ans = magazines_slots_combinations * total_arrangement\n    \n    return ans\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    # List of the 8 throws provided in the question\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0  # Starting position\n\n    for i, throw in enumerate(throws):\n        if throw == 6:\n            # If the throw is 6, we skip the current move and subtract the next throw\n            continue\n        else:\n            # If the previous throw was a 6, subtract the throw from the position instead\n            if i > 0 and throws[i - 1] == 6:\n                position -= throw\n            else:\n                # Otherwise, move forward by the number on the dice\n                position += throw\n\n    # Final answer: the position after all the moves\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a represent the initial amount Alex had\n    # Let b represent the initial amount Brayden had\n    a, b = symbols('a b')\n\n    # Equation 1: Alex and Brayden had $756 altogether\n    equation1 = Eq(a + b, 756)\n\n    # Equation 2: After Alex gave $65 to Brayden, Alex had three times as much money as Brayden\n    equation2 = Eq(a - 65, 3 * (b + 65))\n\n    # Solving the simultaneous equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for total_gums in range(1, 1000):  # Defining a reasonable range to search for the answer\n        remaining_after_music = total_gums - 2  # Ate 2 in music class\n        shared_at_break = remaining_after_music // 3  # Shared one third at break\n        \n        # Remaining after break should be divisible by 4 since ate an equal amount\n        if (remaining_after_music - shared_at_break) % 4 == 0:\n            if total_gums // 3 > 2 and (total_gums - total_gums // 3 - 2) % 4 == 0:\n                return total_gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    total_money = kate + james\n    each_share = total_money / 2\n    money_given_to_kate = each_share - kate\n    return money_given_to_kate\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            if ((4 + 2 + A + 2 + 8 + B) % 9 == 0) and ((4 * 10 + A) - (2 * 10 + B)) % 11 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_before = 10 * 10  # Since average of 10 numbers is 10\n    total_sum_after = 9 * 9     # Since average of the remaining 9 numbers is 9\n\n    removed_number = total_sum_before - total_sum_after\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmph = 3.6 # speed in kilometers per hour\n    time_seconds = 300 # time in seconds\n\n    speed_mps = speed_kmph * (1000 / 3600) # convert speed to meters per second\n    distance_meters = speed_mps * time_seconds # calculate distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_sum, each_brother, with_sister = symbols('total_sum each_brother with_sister')\n    \n    # If the brothers alone had shared the money, they would have received £20 more each.\n    equation1 = Eq(each_brother, with_sister + 20)\n    \n    # Total money shared equally among 3 brothers and a sister (4 people).\n    equation2 = Eq(with_sister, total_sum / 4)\n    \n    # Total money shared equally among 3 brothers.\n    equation3 = Eq(each_brother, total_sum / 3)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (total_sum, each_brother, with_sister))\n    \n    return solutions[total_sum]\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # This formula calculates the sum of the first n cubes: (1^3 + 2^3 + 3^3 + ... + n^3) = (1 + 2 + 3 + ... + n)^2\n    # The question asks for the sum of the odd cubes up to 21^3, so we need the sum up to (21 // 2) which corresponds to 1^3 + 3^3 + ... + 21^3\n\n    # Calculate the number of odd terms in 1^3 to 21^3\n    n = (21 // 2) + 1\n\n    # Sum of the first n odd numbers formula: n^2\n    sum_of_odds = n ** 2\n\n    # The sum of the odd cubes equals the square of the sum of the series of odd numbers\n    ans = sum_of_odds ** 2\n\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    red, green, blue = symbols('red green blue')\n\n    # Equation 1: Total beads left\n    total_beads_left = Eq(red + green + blue, 350)\n\n    # Equation 2: Relation between red and green beads\n    red_green_relation = Eq(red, 2 * green)\n\n    # Equation 3: Relation between blue and red beads\n    blue_red_relation = Eq(blue, red - 50)\n\n    # Equation 4: Blue beads given away\n    blue_beads_given = Eq(blue + 112, red)\n\n    # Solving the system of equations\n    solutions = solve((total_beads_left, red_green_relation, blue_red_relation, blue_beads_given), (red, green, blue))\n\n    # Total blue beads at first\n    blue_beads_initial = solutions[blue] + 112\n\n    return blue_beads_initial\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Katelyn and Jared's sticker counts\n    katelyn, jared = symbols('katelyn jared')\n\n    # Ratio of Katelyn and Jared's stickers\n    ratio_eq = Eq(katelyn/jared, 2/5)\n\n    # Jared has 60 more stickers than Katelyn\n    difference_eq = Eq(jared - katelyn, 60)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (katelyn, jared))\n\n    # Total number of stickers\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 1.05 ** 3\n    second_interest_rate = 1.10 ** 2\n    \n    final_amount = initial_investment * first_interest_rate * second_interest_rate\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Each person should get 16 / 24 = 2/3 of a sausage\n    # Each sausage can be cut into three pieces, and two pieces are given to each person.\n    # Thus, for 16 sausages to be cut into pieces of 2/3, we only need to cut each sausage into 3 pieces.\n    # Therefore, the number of cuts for each sausage is 2 (since 3 pieces require 2 cuts).\n    # Total cuts required = number of sausages * cuts per sausage\n    cuts_per_sausage = 2\n    total_sausages = 16\n    total_cuts = total_sausages * cuts_per_sausage\n    \n    return total_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n\n    gcd_chinese_math = gcd(textbooks_chinese, textbooks_math)\n    gcd_all = gcd(gcd_chinese_math, textbooks_nature)\n\n    return gcd_all\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Let's denote the five numbers as a, b, c, d, e\n    # their averages when one of them is removed are 36, 38, 39, 45, 49 \n    # then the sums when one of them is removed are 4*36, 4*38, 4*39, 4*45, 4*49\n    # these sums are essentially the total sum of the five numbers minus each of the numbers\n    # so total_sum - a = 4*36, total_sum - b = 4*38, total_sum - c = 4*39, total_sum - d = 4*45, total_sum - e = 4*49\n    \n    # we can add these five equations together to find the total sum of 5 * total_sum\n    # 5 * total_sum - (a + b + c + d + e) = 4*(36 + 38 + 39 + 45 + 49)\n    \n    total_sum_times_five = 4 * (36 + 38 + 39 + 45 + 49)\n    # now we divide by 5 to find the total sum\n    total_sum = total_sum_times_five / 5\n    \n    # Now, to find the largest number, we know that when it is removed we have the smallest sum\n    # which corresponds to the smallest average of the remaining numbers, which is 36\n    # so the largest number will be total_sum - 4*36\n    largest_number = total_sum - 4*36\n    \n    return largest_number\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for distances\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    t_qiqi = symbols('t_qiqi')  # Qiqi's travel time\n\n    # Weiling starts 2 minutes later but arrives 4 minutes earlier\n    t_weiling = t_qiqi - 2 - 4\n\n    # Equation representing the fact they both cover the same distance\n    eq = Eq(qiqi_speed * t_qiqi, weiling_speed * t_weiling)\n\n    # Solve the equation for t_qiqi (Qiqi's travel time)\n    t_qiqi_solution = solve(eq, t_qiqi)[0]\n\n    # Calculate the distance between the library and the school\n    distance = qiqi_speed * t_qiqi_solution\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work Star does per hour and n be the work Nini does per hour.\n    star, nini = symbols('star nini')\n\n    # Star types for 5 hours then Nini types for 20 hours to finish\n    # Star's work + Nini's work = 1 job\n    equation1 = Eq(5 * star + 20 * nini, 1)\n\n    # Star types for 20 hours then Nini types for 8 hours to finish\n    # Star's work + Nini's work = 1 job\n    equation2 = Eq(20 * star + 8 * nini, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (star, nini))\n\n    # Time taken by Nini to finish the job by herself = 1 / nini's work rate\n    time_nini = 1 / solutions[nini]\n\n    return time_nini\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # 4 companies build 900 m in 5 days\n    # Rate of work done by 4 companies together in one day\n    rate_4_companies = 900 / 5\n    \n    # Rate of work done by 1 company in one day\n    rate_1_company = rate_4_companies / 4\n    \n    # Number of days required by 1 company to build 2700 m\n    days_1_company = 2700 / rate_1_company\n    \n    return days_1_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # St Petersburg is GMT+3, Manchester is GMT+0\n    time_difference = timedelta(hours=3)\n    \n    # Richard meets the plane at 12 noon St Petersburg time\n    st_petersburg_time = datetime.strptime(\"12:00\", \"%H:%M\")\n\n    # Calculate the time the plane left Manchester\n    manchester_departure_time = st_petersburg_time - time_difference\n\n    return manchester_departure_time.time()\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg = 5\n    lbs_per_kg = 2.2\n    lbs = kg * lbs_per_kg\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front\n    ben_front = 6\n    # Frank's position from the back\n    frank_back = 9\n    # People between Ben and Frank\n    between_ben_frank = 10\n\n    # Total people in front of Frank including Ben\n    total_in_front_frank = ben_front + between_ben_frank\n    # Total people in the queue\n    total_people = total_in_front_frank + frank_back - 1 # -1 because we counted Ben twice (from front and back)\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    # Ratio of coffee to milk\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio  # Total parts of the mixture\n\n    # Amount of coffee used\n    coffee_amount = 6  # litres\n\n    # Calculate the amount of milk based on the given ratio\n    milk_amount = (milk_ratio * coffee_amount) / coffee_ratio\n\n    # Calculate the total amount of Latte made\n    total_amount = coffee_amount + milk_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):  # Search through all three-digit numbers\n        if num % 8 == 2 and num % 11 == 2:\n            return num  # Return the first number that satisfies both conditions\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total = 0\n    for i in range(2, 33, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    ans = (72 / 100) * 140\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n    \n    # Create equations based on the fractions and the number of yellow marbles\n    red_marbles = Eq((2/5) * total_marbles, total_marbles - (1/3) * total_marbles - 96)\n    green_marbles = Eq((1/3) * total_marbles, total_marbles - (2/5) * total_marbles - 96)\n    yellow_marbles = Eq(96, total_marbles - (2/5) * total_marbles - (1/3) * total_marbles)\n\n    # Use the system of equations to solve for the total number of marbles\n    solutions = solve((red_marbles, green_marbles, yellow_marbles), total_marbles)\n    # There should be only one solution for total marbles\n    return solutions[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total = sum(int('1' * i) for i in range(1, 2016))\n    last_four_digits = total % 10000\n    return last_four_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for a in range(1, 10):  # Hundreds digit, cannot be zero\n        for b in range(0, 10):  # Tens digit\n            for c in range(0, 10, 2):  # Units digit, must be even\n                if a + b + c == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1/20\n    return ans\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If we take out 3 marbles, according to the Pigeonhole Principle,\n    # we will definitely have 2 marbles of the same color.\n    # Because if the first two are of different colors, the third one\n    # will match one of the previous colors.\n    \n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    # (remainder, modulo)\n    congruences = [\n        (2, 4),\n        (3, 5),\n        (3, 11)\n    ]\n    \n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # We will brute force through the ages to find the solution.\n    j = 1  # Start with John's age as 1 and increment it to find the valid ages.\n    while True:\n        m = j - 1  # Mary is one year younger than John\n        product_jm = j * m\n        if product_jm >= 2019:\n            break\n\n        for c1 in range(1, 100):  # Start with the youngest child's age from 1 and increment\n            for diff in range(1, 100):  # The difference in ages of the children\n                c2 = c1 + diff  # The middle child is 'diff' years older than the youngest\n                c3 = c2 + diff  # The oldest child is 'diff' years older than the middle child\n\n                product_c = c1 * c2 * c3  # Product of the children's ages\n\n                # Conditions:\n                # This year, products are less than 2019\n                # Next year, products will be greater than 2020\n                if product_jm < 2019 and product_c < 2019 and \\\n                   (j + 1) * (m + 1) > 2020 and (c1 + 1) * (c2 + 1) * (c3 + 1) > 2020:\n                    return j + m + c1 + c2 + c3\n\n        j += 1\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    n = 7\n    \n    seventh_term = first_term + (n - 1) * common_difference\n    \n    return seventh_term\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        A = (100 * perm[0] + 10 * perm[1] + perm[2]) + \\\n            (100 * perm[1] + 10 * perm[2] + perm[3]) + \\\n            (100 * perm[2] + 10 * perm[3] + perm[4]) + \\\n            (100 * perm[3] + 10 * perm[4] + perm[5]) + \\\n            (100 * perm[4] + 10 * perm[5] + perm[6]) + \\\n            (100 * perm[5] + 10 * perm[6] + perm[7]) + \\\n            (100 * perm[6] + 10 * perm[7] + perm[8])\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_in_minutes = 2 + 30 / 60\n    time_in_hours = 1\n    miles_per_hour = 60 / time_per_mile_in_minutes\n    miles_travelled = miles_per_hour * time_in_hours\n    return miles_travelled\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a power of an integer is periodic. \n    # For 13, the units digit cycles every 4 powers: 3, 9, 7, 1, ...\n    # For 17, the units digit also cycles every 4 powers: 7, 9, 3, 1, ...\n    # For 4, the units digit cycles every 2 powers: 4, 6, ...\n    \n    # So we find the remainder of the exponents when divided by the cycle length.\n    remainder_13 = 242 % 4  # Cycle length for 13 is 4\n    remainder_17 = 379 % 4  # Cycle length for 17 is 4\n    remainder_4 = 2012 % 2  # Cycle length for 4 is 2\n    \n    # Now we find the units digit for each exponent by using the remainders.\n    # If remainder is 0, we use the last digit in the cycle.\n    units_digit_13 = [3, 9, 7, 1][remainder_13 - 1 if remainder_13 != 0 else 3]\n    units_digit_17 = [7, 9, 3, 1][remainder_17 - 1 if remainder_17 != 0 else 3]\n    units_digit_4 = [4, 6][remainder_4 - 1]  # Since cycle length is 2, remainder is either 1 or 0.\n    \n    # Calculate the unit digit of the product of 17^379 and 4^2012\n    units_digit_17_4_product = (units_digit_17 * units_digit_4) % 10\n    \n    # Add the units digit of 13^242 to the above product and find the unit digit of the result\n    final_units_digit = (units_digit_13 + units_digit_17_4_product) % 10\n    \n    return final_units_digit\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 1  # start with '-8-'\n    number = 8\n    while count < 2012:\n        number += 1\n        if str(number)[0] == '8':\n            count += 1\n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle number of the five consecutive numbers be x\n    # Then the numbers are (x-2), (x-1), x, (x+1), (x+2)\n    # Their sum should be 160\n    # 5x = 160\n    # x = 160 / 5\n    middle_number = 160 // 5\n    \n    # The number of balls the student with the most balls has is (x+2)\n    most_balls = middle_number + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let the original sum of money be x.\n    # She spent $36 on plates, so she has x - 36 left.\n    # Then she spends 3/4 of the remaining money on cups, leaving her with 1/6 of x.\n    \n    # Let's denote the money spent on cups as y. According to the problem, we have:\n    # y = 3/4 * (x - 36)\n    # And the money left is x/6:\n    # x/6 = x - 36 - y\n\n    # Now we rewrite the equation for y and substitute it in the equation for money left\n    # x/6 = x - 36 - 3/4 * (x - 36)\n    \n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Equation representing the remaining money after plates and cups\n    equation = Eq(x/6, x - 36 - 3/4 * (x - 36))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum((2*i)**2 for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 / 10\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from math import comb\n\ndef solution():\n    count = 0\n    total_envelopes = 15\n    min_boxA = 2\n    min_boxB = 4\n    min_boxC = 3\n    min_boxD = 0  # Assuming no minimum for box D.\n\n    # Subtracting the minimum number of envelopes already placed in boxes A, B, and C.\n    remaining_envelopes = total_envelopes - (min_boxA + min_boxB + min_boxC)\n\n    # Iterating over the remaining envelopes that can go into each mailbox,\n    # including a possibility of 0 for mailbox D.\n    for boxA_extra in range(0, remaining_envelopes + 1):\n        for boxB_extra in range(0, remaining_envelopes - boxA_extra + 1):\n            for boxC_extra in range(0, remaining_envelopes - boxA_extra - boxB_extra + 1):\n                boxD_extra = remaining_envelopes - boxA_extra - boxB_extra - boxC_extra\n                # Apply combination formula on each mailbox to distribute the \"extra\" envelopes.\n                ways = comb(boxA_extra + min_boxA - 1, min_boxA - 1) * \\\n                       comb(boxB_extra + min_boxB - 1, min_boxB - 1) * \\\n                       comb(boxC_extra + min_boxC - 1, min_boxC - 1) * \\\n                       comb(boxD_extra + min_boxD - 1, min_boxD - 1) if boxD_extra >= 0 else 0\n                count += ways\n\n    return count\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Calculate the repeating portion of the decimal representation of 1/13\n    decimal_string = format(1 / 13, '.54f')  # at least 54 to capture the repeating cycle\n    # Removing the leading '0.' part to find the repeating cycle\n    repeating_cycle = decimal_string[2:8]  # '076923' is the repeating cycle of 1/13\n\n    # The length of the repeating cycle\n    cycle_length = len(repeating_cycle)\n\n    # The position of the desired digit in the repeating cycle\n    position_in_cycle = (2022 - 1) % cycle_length  # subtract 1 because index starts at 0\n\n    # The digit at the 2022nd place, using the position_in_cycle index\n    digit = repeating_cycle[position_in_cycle]\n\n    return int(digit)\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n    rope_lengths = [28, 14, 56]\n    longest_piece = gcd(gcd(rope_lengths[0], rope_lengths[1]), rope_lengths[2])\n    return longest_piece\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    # Total number of animals\n    total_animals = 40\n    # Total number of legs\n    total_legs = 100\n    # Each chicken has 2 legs and each rabbit has 4 legs\n    # Let's assume all animals are chickens, so we start with 40 * 2 legs\n    all_chickens_legs = total_animals * 2\n    # The excess legs are from rabbits, since they have 2 more legs than chickens\n    excess_legs = total_legs - all_chickens_legs\n\n    # Each rabbit contributes to 2 excess legs (4 legs of a rabbit - 2 legs of a chicken)\n    # The number of rabbits will be the number of excess legs divided by 2\n    rabbits = excess_legs / 2\n    # The number of chickens will be the total number of animals minus the number of rabbits\n    chickens = total_animals - rabbits\n\n    return int(chickens)\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable x represent the number of packs each store had originally\n    x = symbols('x')\n    \n    # After selling 290 packs, store A has x - 290 packs\n    # Store B has 3 times the number of packs as store A after A sold 290 packs\n    # Store B has not sold any packs, so it still has x packs\n    # The equation representing the relationship is: 3 * (x - 290) = x\n\n    equation = Eq(3 * (x - 290), x)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since both stores had x packs each at first, the total is 2 * x\n    total_packs = 2 * solution[0]\n\n    return total_packs\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Since there is a base rate of 15% for the first 20000 and then 20% for the rest,\n    # let's solve it step by step.\n    # First, calculate the tax for the base amount.\n    base_income = 20000\n    base_tax_rate = 0.15\n    base_tax = base_income * base_tax_rate\n    \n    # The remaining tax that would make up to the total 7000 dollars is taxed at 20%.\n    # If the tax is more than what would be for the base amount,\n    # calculate the additional income that would lead to the total tax of 7000 dollars.\n    total_tax = 7000\n    additional_tax_rate = 0.20\n    \n    if total_tax > base_tax:\n        additional_tax = total_tax - base_tax\n        # Now calculate additional income using the additional tax rate of 20%.\n        additional_income = additional_tax / additional_tax_rate\n        # The total income would be the sum of the base income and the additional income.\n        total_income = base_income + additional_income\n    else:\n        # In the case where the total tax is not more than the base tax,\n        # the total income is calculated solely based on the base tax rate.\n        total_income = total_tax / base_tax_rate\n\n    return total_income\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    boys_packed_lunch = 4\n    total_girls = total_students - total_boys\n    girls_school_lunch = 7\n    students_home = 5\n    boys_home = 3\n    \n    girls_packed_lunch = total_girls - girls_school_lunch - (students_home - boys_home)\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    stawberry_chocolate_price = 4\n\n    total_dark = 20 * dark_chocolate_price\n    total_milk = 20 * milk_chocolate_price\n    total_stawberry = 20 * stawberry_chocolate_price\n\n    total_cost = total_dark + total_milk + total_stawberry\n    total_chocolates = 20 + 20 + 20\n\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    uniforms_per_day = 720 / 5\n    total_days = 3600 / uniforms_per_day\n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    import math\n\n    num = 36\n    factors = set()\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 12 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of train in meters per second\n    time = 19   # time taken to pass the tree in seconds\n\n    length_of_train = speed * time  # distance formula: distance = speed * time\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_rate = 1 / 15\n    couple_rate = 1 / 12\n    wife_rate = couple_rate - man_rate\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n    \n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n\n    total_wheels = wheels_per_tricycle * num_tricycles\n\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    books_for_offer = 3\n    free_books_with_offer = 1\n\n    total_books_to_buy = 5\n    effective_books_to_pay_for = total_books_to_buy - (total_books_to_buy // (books_for_offer + free_books_with_offer)) * free_books_with_offer\n\n    total_cost = effective_books_to_pay_for * price_per_book\n\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    total_people = symbols('total_people')\n    children = symbols('children')\n\n    # Equation for the number of women\n    equation1 = Eq((2/5)*total_people, children + 190)\n    # Equation for the number of men which is thrice the number of children\n    equation2 = Eq((3/5)*total_people, 3*children)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (total_people, children))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    # equation representing the total pencils (boy_pencils + girl_pencils = total_pencils)\n    equation = Eq(boys*20 + girls*60, 40*35)\n    \n    boys_count = solve(equation, boys)\n    \n    return boys_count[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n    distance = mount_fuji_tip - turpan_depression_base\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    current_number = 1\n    for _ in range(50):\n        total += current_number\n        current_number = current_number * 10 + 1\n    return total % 100\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(6 * apple + 7 * banana, 8 * apple + 4 * banana)\n    solutions = solve((equation1), (apple, banana))\n\n    apple_price = solutions[apple]\n\n    # we can assume he has a total of 8 * apple_price to spend since that would leave him with 0 after buying 8 apples\n    total_money = 8 * apple_price\n\n    bananas_he_can_buy = total_money / solutions[banana]\n\n    return bananas_he_can_buy\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from math import comb as combination\n\ndef solution():\n    total_envelopes = 15\n    # Deduct the minimum required envelopes for each mailbox\n    adjusted_total = total_envelopes - (2 + 4 + 3)  # A minimum of 2, B minimum of 4, C minimum of 3\n\n    # Since we're interested in combinations where boxes can have a minimum of 0 envelopes,\n    # (after adjusting for the minimum required) calculate how many ways to distribute\n    # the remaining adjusted_total among the 4 boxes.\n    # This is equivalent to the problem of distributing \"adjusted_total + 4 - 1\" items into 4 categories,\n    # which is a problem of combinations with repetition (stars and bars method),\n    # n+r-1 choose r-1, where n is the adjusted total and r the number of boxes.\n    num_ways = combination(adjusted_total + 4 - 1, 4 - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    true_result, false_result = symbols('true_result false_result')\n    divisor_without_decimal = 211\n    divisor_with_decimal = 2.11\n\n    # Equation based on the problem statement\n    equation = Eq(false_result, true_result - 98.01)\n\n    # The false result is basically the true result times the ratio of the divisor without decimal to the divisor with decimal\n    false_result_expr = true_result * (divisor_without_decimal / divisor_with_decimal)\n\n    # Incorporate the false result expression into the equation\n    equation = equation.subs(false_result, false_result_expr)\n\n    # Solve the equation to find the true result\n    true_result_value = solve(equation, true_result)\n\n    return true_result_value[0]\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the inclusion-exclusion principle\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of money for John and Choon Mui as \"x\"\n    x = symbols('x')\n    \n    # After John spends $30, he has (x - 30)\n    # After Choon Mui spends $150, she has (x - 150)\n    # It is given that what John has left is four times what Choon Mui has left, so we can write this condition as an equation:\n    equation = Eq(x - 30, 4 * (x - 150))\n\n    # Solving the equation gives us John's initial amount of money\n    solution = solve(equation, x)\n\n    # John's initial amount of money minus what he spent will give us the amount he has left\n    john_left = solution[0] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_1st_day, female_1st_day = symbols('male_1st_day female_1st_day')\n    \n    equation1 = Eq(male_1st_day, female_1st_day + 450)\n    equation2 = Eq(male_1st_day * 0.82 + female_1st_day * 1.15, 1354)\n    \n    solutions = solve((equation1, equation2), (male_1st_day, female_1st_day))\n\n    return solutions[male_1st_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_batch = remaining_eggs * 2 + 4\n    first_remaining = sold_second_batch + sold_second_batch // 2\n    total_eggs = first_remaining + 5\n\n    return total_eggs\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    increase_percentage = 10 / 100\n    increased_amount = original_amount * (1 + increase_percentage)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # converting meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Calculate the number of derangements for 4 items,\n    # which is a subfactorial or !n, here n=4.\n    # !4 = 4! * (1 - 1/1! + 1/2! - 1/3! + 1/4!)\n    # This is the number of permutations where no element appears in its original position.\n    n = 4\n    derangement = factorial(n)\n    for i in range(n+1):\n        if i % 2 == 0:\n            derangement += ((-1)**(i)) * (factorial(n) // factorial(i))\n        else:\n            derangement -= ((-1)**(i)) * (factorial(n) // factorial(i))\n\n    return derangement\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    balloons_per_pupil = total_balloons // num_pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    mph_to_kph_factor = 1.60934  # 1 mile per hour is approximately 1.60934 kilometers per hour\n    speed_limit_mph = 65  # speed limit in miles per hour\n    time_hours = 15 / 60  # time in hours (15 minutes converted to hours)\n\n    distance_km = speed_limit_mph * time_hours * mph_to_kph_factor\n    return distance_km\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    effective_distance_per_day = day_distance - night_distance\n    days_to_reach_top_without_last_climb = (total_distance - day_distance) // effective_distance_per_day\n\n    if (total_distance - day_distance) % effective_distance_per_day == 0:\n        ans = days_to_reach_top_without_last_climb + 1\n    else:\n        ans = days_to_reach_top_without_last_climb + 2\n\n    return ans\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal_amount = 12000\n    interest_rate = 0.10\n    years = 2\n    \n    # Compound interest formula for yearly compounded interest: \n    # A = P(1 + r/n)^(nt)\n    # Where: A = the future value of the investment/loan, including interest\n    # P = the principal investment amount (initial deposit or loan amount)\n    # r = the annual interest rate (decimal)\n    # n = the number of times that interest is compounded per year (yearly = 1)\n    # t = the number of years the money is invested or borrowed for\n\n    # Since the interest is compounded yearly, n = 1\n    n = 1\n\n    # Applying the compound interest formula\n    amount = principal_amount * ((1 + interest_rate/n) ** (n * years))\n    \n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    answer = solve(equation, x)\n\n    return answer[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for num in range(2, 100):\n        if num % 7 == 2 and num % 13 == 2:\n            return num\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_earnings = hourly_rate * 8 * 5\n    remaining_debt = 700 - total_earnings\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    ans = 53 * 627\n    return ans\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time_str = \"20:30\"\n    work_duration_hours = 8\n    work_duration_minutes = 45\n\n    end_time = datetime.strptime(end_time_str, \"%H:%M\")\n    work_duration = timedelta(hours=work_duration_hours, minutes=work_duration_minutes)\n    start_time = end_time - work_duration\n\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Start with a value that probably isn't the answer but in the right ballpark.\n    # It needs to be a 3-digit number ending with 4.\n    for A in range(104, 994, 100):\n        # Construct number AB=2A in expanded form.\n        # Since A is a 3-digit number and AB is a 4-digit number, B would be A * 2 - 1000\n        B = A * 2 - 1000\n        # Check if B is a single digit number\n        if 0 <= B <= 9:\n            # We have found the correct value for A\n            return A\n    return None\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_i = str(i)\n        if str_i.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_cycle = 2 * 7  # 2 weeks in days\n    yahya_cycle = 10  # 10 days\n    ans = lcm(arjun_cycle, yahya_cycle)\n    return ans\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):             # Possible digits for the first square (0-9)\n        for digit2 in range(10):         # Possible digits for the second square (0-9)\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:  # Divisible by both 3 and 5\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n\n    num_trees = (highway_length // distance_apart) - 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_after_giving = 34 + 2  # Reverse the \"used 2 stamps\" operation.\n    stamps_after_buying = stamps_after_giving - 11  # Reverse the \"bought 11 stamps\" operation.\n    initial_stamps = stamps_after_buying + 14  # Reverse the \"gave 14 stamps\" operation.\n\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    lucas_loss = fake_note + cost_of_shoes\n    return lucas_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n    \n    # Consider A, B, C as a single entity (X) since they always line up together.\n    # We then have 8 entities: X, D, E, F, G, H, I, J to line up.\n    entity_count = 8\n\n    # The number of ways to arrange these 8 entities is the factorial of the count\n    eight_entities_perm = factorial(entity_count)\n    \n    # Now, consider the internal permutations of A, B, C (since they can be in any order)\n    abc_permutations = factorial(3)\n    \n    # Total permutations is the product of the two permutation counts\n    total_permutations = eight_entities_perm * abc_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Jack's speeds\n    speed1 = 7  # meters per second for the first 280 meters\n    speed2 = 5  # meters per second for the middle 400 meters\n    speed3 = 8  # meters per second for the last part of the race\n\n    # Jack's distances\n    distance1 = 280  # meters\n    distance2 = 400  # meters\n    distance3 = 800 - (distance1 + distance2)  # meters\n\n    # Calculate the time for each part of the race\n    time1 = distance1 / speed1  # time to run the first 280 meters\n    time2 = distance2 / speed2  # time to run the middle 400 meters\n    time3 = distance3 / speed3  # time to run the last part of the race\n\n    # Calculate the total time to complete the race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    ans = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20  # cm\n    overlap_length = 3  # cm\n    number_of_rulers = 3\n\n    # We subtract the overlaps from the total length of the individual rulers\n    # and add them together as they are being tied into one long ruler.\n    total_length = (number_of_rulers * short_ruler_length) - ((number_of_rulers - 1) * overlap_length)\n    \n    return total_length\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Initially, all digits are concatenated from 1 to 30\n    initial_number = ''.join(str(i) for i in range(1, 31))\n    # To get the smallest number, we should remove 46 '1's first\n    number_of_ones_to_remove = min(46, initial_number.count('1'))\n    remaining_ones = initial_number.count('1') - number_of_ones_to_remove\n    # Remaining digits to remove after taking out '1's\n    remaining_to_remove = 46 - number_of_ones_to_remove\n    \n    # Updated number after removal of 1's\n    updated_number = initial_number.replace('1', '', number_of_ones_to_remove)\n    \n    # Now remove the smallest digits first to keep the number as small as possible\n    for digit in '23456789':\n        if remaining_to_remove == 0:\n            break\n        count_of_digit = updated_number.count(digit)\n        if count_of_digit <= remaining_to_remove:\n            updated_number = updated_number.replace(digit, '', count_of_digit)\n            remaining_to_remove -= count_of_digit\n        else:\n            updated_number = updated_number.replace(digit, '', remaining_to_remove)\n            remaining_to_remove = 0\n    \n    # Convert the updated number after removals to integer\n    smallest_number_after_removal = int(updated_number)\n    return smallest_number_after_removal\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    jogging_time = 1          # Jogging from 6:30 AM to 7:30 AM\n    jogging_speed = 6         # miles per hour\n    walking_time = 2          # Walking from 7:30 AM to 9:30 AM\n    walking_speed = 5         # miles per hour\n\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    new_cups = 0\n\n    while total_used_cups >= 7:\n        new_cups_made_this_round = total_used_cups // 7\n        new_cups += new_cups_made_this_round\n        total_used_cups = new_cups_made_this_round + total_used_cups % 7\n\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000\n    less_by = 222\n    \n    final_number = number - less_by\n    \n    return final_number\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert meters to cm\n    spacing_cm = 15  # Spacing between plants in cm\n    first_plant_offset_cm = 20  # Distance from start for the first plant in cm\n    cauliflower_width_cm = 45  # Width of a cauliflower in cm\n\n    # Calculate effective planting length, considering the space taken by the first cauliflower\n    effective_length_cm = plot_length_cm - first_plant_offset_cm - cauliflower_width_cm\n\n    # Calculate maximum number of cauliflowers that can be planted\n    number_of_cauliflowers = effective_length_cm // (cauliflower_width_cm + spacing_cm) + 1\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Number of pages used on each day\n    daily_usages = [14, 14, 14, 9, 9, 12]\n\n    # Total number of pages used over the 6 days\n    total_pages = sum(daily_usages)\n\n    # Number of days\n    days = len(daily_usages)\n\n    # Calculate the average number of pages used per day\n    average_pages = total_pages / days\n\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    a_students = 8\n    b_students = 12\n    c_students = 20\n\n    # Calculate the greatest common divisor (GCD) for the three numbers\n    gcd_ab = gcd(a_students, b_students)\n    gcd_abc = gcd(gcd_ab, c_students)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of members in each club\n    badminton, bowling = symbols('badminton bowling')\n\n    # Equation representing the initial number of members\n    equation1 = Eq(badminton, 3 * bowling)\n    # Equation after 36 members left the Badminton Club and 4 left the Bowling Club\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # Final number of members in each club after the members left\n    final_badminton = solutions[badminton] - 36\n    final_bowling = solutions[bowling] - 4\n\n    return final_badminton, final_bowling\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, you need to take out all blue balls plus one more (which will be white).\n    # This ensures that even in the worst case scenario where you pick all blue balls first, \n    # the next ball you pick has to be white.\n    blue_balls = 6\n    balls_to_guarantee_white = blue_balls + 1\n    return balls_to_guarantee_white\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # 1.5 kilometers in meters\n\n    time = distance / speed_of_sound  # time in seconds\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    num1 = 1234\n    num2 = 678\n    ans = num1 - num2\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    diff = 6\n\n    num_cards = total_sum // average\n\n    largest_number = (average * num_cards) + (diff // 2)\n    smallest_number = largest_number - diff\n\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)  # Wendy is twice as old as Vivien\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)  # Vivien was 1/4 as old as Wendy 10 years ago\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5  # Wendy's age in 5 years' time\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    for i in range(301, 1000):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total_sum = sum(1/i for i in range(10, 20))\n    return int(total_sum)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if i % 6 == 0 and (i-1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    total_distance = 6990  # m\n    sleep_time = 215  # min\n    head_start_time = 10  # min\n\n    # Distance covered by rabbit before sleeping\n    rabbit_distance_before_sleep = head_start_time * rabbit_speed\n    # Distance covered by turtle during rabbit's sleep\n    turtle_distance_during_rabbit_sleep = turtle_speed * (sleep_time + head_start_time)\n    # Remaining distance for rabbit after waking up\n    remaining_rabbit_distance = total_distance - rabbit_distance_before_sleep\n\n    # Time taken for rabbit to finish after waking up\n    rabbit_time_after_sleep = remaining_rabbit_distance / rabbit_speed\n    # Total time taken by rabbit to reach finish line\n    total_rabbit_time = head_start_time + sleep_time + rabbit_time_after_sleep\n\n    # Total time taken by turtle to reach finish line\n    total_turtle_time = total_distance / turtle_speed\n\n    # Check who reached first\n    if total_rabbit_time < total_turtle_time:\n        winner = \"rabbit\"\n        # Distance between them when rabbit finishes\n        turtle_distance_when_rabbit_finishes = total_turtle_time - total_rabbit_time\n        distance_between = turtle_distance_when_rabbit_finishes * turtle_speed\n    else:\n        winner = \"turtle\"\n        # Distance between them when turtle finishes\n        rabbit_distance_when_turtle_finishes = total_rabbit_time - total_turtle_time\n        distance_between = rabbit_distance_when_turtle_finishes * rabbit_speed\n\n    return {'winner': winner, 'distance_between': distance_between}\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_only = 20 - 15\n    math_only = 35 - 15\n    both_classes = 15\n\n    total_students = english_only + math_only + both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 0.10  # 10% increase\n    base_year = 2018\n    target_year = 2020\n    years_passed = target_year - base_year\n    initial_amount = final_amount / ((1 + increase_rate) ** years_passed)\n    \n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4*(2+7) - 2*(5+3)\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 1690\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_more = 90\n    boys_swim_less = 120\n\n    # Let's denote g as the number of girls, b as the number of boys\n    g, b = symbols('g b')\n    \n    # Equation for total students\n    eq1 = Eq(g + b, total_students)\n    \n    # Equation for the excess number of boys\n    eq2 = Eq(g + boys_more, b)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (g, b))\n    \n    # Get the number of girls and boys\n    girls = solutions[g]\n    boys = solutions[b]\n    \n    # Divide girls into swimmers and non-swimmers based on the ratio\n    girls_swim = (girls_swim_ratio / (girls_swim_ratio + girls_not_swim_ratio)) * girls\n    girls_not_swim = (girls_not_swim_ratio / (girls_swim_ratio + girls_not_swim_ratio)) * girls\n    \n    # Calculate the number of boys who can swim based on the given conditions\n    boys_not_swim = boys_swim_less + boys / 2\n    boys_swim = boys - boys_not_swim\n    \n    # Total number of students who cannot swim\n    cannot_swim = girls_not_swim + boys_not_swim\n\n    return int(cannot_swim)\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "import math\n\ndef solution():\n    total_ways = math.factorial(7) # Total ways without restriction\n    \n    # Calculate ways in which the 3 people stand together\n    ways_3_together = math.factorial(3) * math.factorial(5)\n    \n    # Subtract the ways in which the 3 people are together from total ways\n    ans = total_ways - ways_3_together\n    \n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n-1)d\n    # where an is the nth term, a1 is the first term, and d is the common difference\n    a1 = 10  # first term\n    a4 = 25  # fourth term\n    n = 25   # total number of rows\n\n    # common difference calculation using fourth term\n    d = (a4 - a1) // (4 - 1)\n\n    # total number of athletes using the sum formula for arithmetic sequence: S = n/2 * (a1 + an)\n    # where S is the sum, n is the total number of terms, a1 is the first term, and an is the last term\n    # an can be calculated using the formula for nth term: an = a1 + (n-1)d\n    an = a1 + (n - 1) * d\n    total_athletes = n * (a1 + an) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    # Count the number of times 5 appears in the prime factorization,\n    # since the number of twos will always be higher.\n    ans = count_factors(789, 5)\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    \n    # Sum of arithmetic series formula: sum = n/2 * (first_term + last_term)\n    sum_arithmetic_series = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_arithmetic_series)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    schools_with_3_or_less = 3  # maximum participants per school to not guarantee 4 participants\n    \n    # Use Pigeonhole Principle: at least one school will have more than 3 participants\n    max_schools = participants // (schools_with_3_or_less + 1)\n    \n    # As per the principle, add one more school to ensure that\n    # the school with the most participants has at least 4\n    return max_schools + 1\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "import itertools\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    all_possible_combinations = list(itertools.permutations(digits, 6))\n    min_product = float('inf')\n\n    for combination in all_possible_combinations:\n        num1 = combination[0]*100 + combination[1]*10 + combination[2]\n        num2 = combination[3]*100 + combination[4]*10 + combination[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = range(1, 10)\n    max_product = 0\n    min_product = float('inf')\n    \n    for perm in permutations(all_digits, 7):\n        ABCD = 1000*perm[0] + 100*perm[1] + 10*perm[2] + perm[3]\n        EFG = 100*perm[4] + 10*perm[5] + perm[6]\n        \n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    diff = max_product - min_product\n    return diff\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_roll = 6\n    target_position = 25\n    min_rolls = (target_position - 1) // max_roll\n\n    return min_rolls + 1\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Total score for Team A = average score * number of students = 76 * 20\n    total_score_A = 76 * 20\n\n    # Average score of both teams combined = 70\n    # Total score of both teams combined = 70 * (number of students in A + number of students in B)\n    # 70 * (20 + x) = total_score_A + x * average score of B\n\n    # Solve for x\n    # 70 * 20 + 70 * x = total_score_A + 67 * x\n    # 70 * x - 67 * x = total_score_A - 70 * 20\n    # 3 * x = total_score_A - 70 * 20\n    x = (total_score_A - 70 * 20) / 3\n\n    return int(x)\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    result = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return result\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    distance_to_climb = 220\n    climb_per_hour = 40\n    slip_back = 10\n    net_climb_per_hour = climb_per_hour - slip_back\n    hours = 0\n\n    while distance_to_climb > climb_per_hour:\n        distance_to_climb -= net_climb_per_hour\n        hours += 1\n    hours += 1  # for the final climb that doesn't include a slip back\n\n    return hours\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # first term (a) of the arithmetic sequence\n    a = 2019\n    \n    # common difference (d) of the arithmetic sequence\n    d = -50\n    \n    # finding the number of terms (n) using the formula for the nth term of an arithmetic sequence:\n    # last_term = a + (n - 1) * d\n    # We solve for n: n = (last_term - a) / d + 1\n    # We know the last term is 19, so we can calculate n directly\n    last_term = 19\n    n = (last_term - a) / d + 1\n    \n    # calculating sum of arithmetic series using the formula sum = n/2 * (2*a + (n - 1) * d)\n    ans = n/2 * (2*a + (n - 1) * d)\n    return int(ans)\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(29, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    remaining_typists = original_typists - sick_typists\n\n    words_original = 6000\n    minutes_original = 20\n    words_needed = 9000\n\n    # Find the rate at which the group of 5 typists type\n    group_rate_per_minute = words_original / minutes_original\n\n    # Now find the rate for each typist\n    typist_rate_per_minute = group_rate_per_minute / original_typists\n\n    # Find the rate for the remaining 3 typists as a group\n    remaining_group_rate_per_minute = typist_rate_per_minute * remaining_typists\n\n    # Calculate the time needed for 9000 words\n    time_needed = words_needed / remaining_group_rate_per_minute\n\n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_amount = 0.96 * 8\n    price_per_lettuce = total_amount / 6\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_on_shoes = 97\n    \n    saved_money = total_money - spent_on_shoes\n    \n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_plants = 11\n    remaining_plants = 11 - 8  # After removing 8 plants\n    intervals = remaining_plants - 1  # The number of intervals is one less than the number of plants\n\n    new_interval = total_distance / intervals\n\n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    # Cost in pence per minute\n    cost_per_minute = 14\n\n    # Start and end time of the phone call\n    start_time = (13 * 60) + 52  # 13 hours and 52 minutes\n    end_time = (14 * 60) + 5     # 14 hours and 5 minutes\n\n    # Duration of the phone call in minutes\n    duration = end_time - start_time\n\n    # Total cost of the phone call\n    total_cost = duration * cost_per_minute\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n    \n    return sum(divisors(20))\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return int(0.40 * 320)\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all three-digit numbers\n        num_str = str(i)\n        if '2' in num_str and '3' in num_str:  # check if both 2 and 3 are present\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    day_count = (end_date - start_date).days + 1  # +1 to include the end date\n\n    # Since we know 17th October is Tuesday, we can find the first Sunday\n    days_to_sunday = (6 - start_date.weekday()) % 7  # Days from Tuesday to Sunday\n    first_sunday = start_date + timedelta(days=days_to_sunday)\n\n    # Now count Sundays between the first Sunday and the end date\n    sundays_count = 0\n    current_sunday = first_sunday\n    while current_sunday <= end_date:\n        sundays_count += 1\n        current_sunday += timedelta(weeks=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of strawberry tarts\n    x = symbols('x')\n    \n    # The price of an apple tart be 'p'\n    # The price of a strawberry tart be 'p + 0.40'\n    p = symbols('p')\n\n    # Since she bought twice as many apple tarts, the number of apple tarts is 2x\n    # Total cost for apple tarts is 2x * p\n    # Total cost for strawberry tarts is x * (p + 0.40)\n    # The total spent is $40\n    \n    # Equation: cost for apple tarts + cost for strawberry tarts = $40\n    equation = Eq(2 * x * p + x * (p + 0.40), 40)\n\n    # Solve the equation\n    solution = solve(equation, (x, p))\n\n    # Since we want the total number of tarts, it will be number of apple tarts + number of strawberry tarts\n    total_tarts = 2 * solution[x] + solution[x]\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import gcd\nfrom fractions import Fraction\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    first_light = Fraction(1, 2)  # half a minute\n    second_light = Fraction(3, 4)  # 0.75 minutes\n    goal_period = 9  # 9 minutes\n\n    # Find the least common multiple of first two lights in minutes\n    lcm_first_second = lcm(first_light.denominator, second_light.denominator)\n\n    # Convert LCM to actual time in minutes\n    lcm_minutes = lcm_first_second / (first_light.denominator * second_light.denominator)\n\n    # Now we try to find the smallest cycle for third light\n    # It should be at least 30 seconds, convert this to minutes for comparison\n    min_third_light = Fraction(1, 2)  # 30 seconds in minutes\n\n    # Find the LCM of the three lights cycle times (in minutes)\n    while True:\n        if lcm(lcm_minutes, min_third_light) <= goal_period:\n            break\n        min_third_light += Fraction(1, 2)  # increasing by 30 seconds\n\n    # Convert the time back to seconds from minutes\n    ans = int(min_third_light * 60)\n    \n    return ans\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # Since there are 5 skiboards and 5 people, the number of ways is the number of permutations of 5 items\n    num_ways = factorial(5)\n\n    return num_ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    percentage_increase = ((new_price - original_price) / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pieces in the puzzle.\n    x = symbols('x')\n\n    # On the first day, Tim fits 20% of the pieces, so he fits 0.2 * x pieces.\n    # On the second day, he fits 60 more pieces.\n    \n    # After fitting 60 pieces on the second day, the ratio of the number of fitted pieces to the \n    # number of unfitted pieces becomes 2:5. This means fitted pieces are 2/7 of the total and \n    # the unfitted are 5/7 of the total.\n\n    # Equation based on the fitted pieces:\n    # (0.2 * x) pieces from the first day + 60 pieces = (2/7) * x (total fitted pieces)\n    # (5/7) * x - 60 = (5/7) * x (total unfitted pieces because 60 pieces were fitted the second day)\n    # This simplifies to 0.2 * x + 60 = (2/7) * x\n    equation = Eq(0.2 * x + 60, (2/7) * x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    count_from_henry_to_tony = total_children - henry_position_from_left - tony_position_from_right + 1\n\n    return count_from_henry_to_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres = metres * 1000  # 1 metre is 1000 millimetres\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_integers = 100\n    count_multiples_of_10 = 0\n\n    for i in range(1, total_integers+1):\n        if i % 10 == 0:\n            count_multiples_of_10 += 1\n\n    not_multiples_of_10 = total_integers - count_multiples_of_10\n    percentage = (not_multiples_of_10 / total_integers) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_amount = 4\n    paid_back = original_amount * 0.30\n    owed_amount = original_amount - paid_back\n    return owed_amount\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for cats, dogs, and rabbit\n    legs_from_cats_dogs_rabbit = 2 * (4 + 4) + 4\n\n    # Total number of legs from birds is the difference    \n    legs_from_birds = 28 - legs_from_cats_dogs_rabbit\n\n    # Since each bird has 2 legs\n    number_of_birds = legs_from_birds / 2\n\n    return int(number_of_birds)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km per hour\n    rose_speed = 10  # Rose's speed in km per hour\n    time = 10        # Time they travel before meeting in hours\n\n    # Total distance is the sum of distances covered by Jack and Rose\n    distance = (jack_speed + rose_speed) * time\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    melvin_gain_first = 5 / 8 * melvin_original\n    melvin_after_first = melvin_original + melvin_gain_first\n    cards_lost_by_each = 1 / 4 * melvin_original\n    melvin_after_second = melvin_after_first - cards_lost_by_each\n    nelson_after_second = melvin_original - melvin_gain_first - cards_lost_by_each\n    oliver_after_second = 2 * cards_lost_by_each\n    melvin_gain_third = 1 / 8 * melvin_original\n    melvin_final = melvin_after_second + melvin_gain_third\n    nelson_final = nelson_after_second - melvin_gain_third\n    # After the final round, they all have the same number of cards\n    total_cards_initial = melvin_original + (melvin_final - melvin_after_first) + (melvin_final - oliver_after_second)\n    return total_cards_initial\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n    \n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Generate all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = combinations(cards, 2)\n    candice_combinations = combinations(cards, 3)\n    \n    # Convert combinations to lists of products\n    candy_products = {prod(combo) for combo in candy_combinations}\n    candice_products = {prod(combo) for combo in candice_combinations}\n    \n    # Find the common product\n    common_product = candy_products & candice_products\n    \n    # Find the combination of numbers that results in the common product\n    combined_numbers = []\n    for combo in combinations(cards, 5):\n        if prod(combo) in common_product:\n            combined_numbers.extend(combo)\n            break\n    \n    # Identify which number was not picked\n    for number in cards:\n        if number not in combined_numbers:\n            return number\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Polly's age when her first child was born is 20\n    # Let x be the number of years after her first child's birth\n    # Polly's age would be 20 + x\n    \n    # By the problem statement, her first child's age would be x,\n    # her second child would be x - 2, and her third would be x - 4.\n    \n    # We need to find when Polly's age equals the sum of her children's ages:\n    # 20 + x = x + (x - 2) + (x - 4)\n    \n    # Solving for x:\n    # 20 + x = 3x - 6\n    # 2x = 26\n    # x = 13\n    \n    # Now we find Polly's age when the sum of ages is equal\n    polly_age_when_sum_equals = 20 + 13 # Polly's age at that time\n    return polly_age_when_sum_equals\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n\n    ans = part1 == part2\n\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple = 5\n\n    weight_of_suitcase = total_weight_with_presents / (multiple - 1)\n\n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age was 10 years.\n    combined_age_four_years_ago = 10\n    \n    # The current combined age would be 10 + 4 * 2 (since there are 2 dogs).\n    current_combined_age = combined_age_four_years_ago + 4 * 2\n    \n    # In 2 years, the combined age will be current age + 2 * 2 (for 2 dogs).\n    combined_age_in_two_years = current_combined_age + 2 * 2\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    x, y = symbols('x y')\n    eq1 = Eq(x - y, 39)\n    eq2 = Eq(x + y, 59)\n    solutions = solve((eq1, eq2), (x, y))\n    smaller_number = min(solutions[x], solutions[y])\n    return smaller_number\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n    \n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    ab = 30\n    bc = 35\n    ca = 42\n\n    a_square_times_b_square_times_c_square = ab * bc * ca\n    abc_square = a_square_times_b_square_times_c_square\n\n    # Since abc_square is A^2 * B^2 * C^2, we'll take the square root to find ABC\n    abc = int(abc_square ** 0.5)\n\n    # Now we'll find each of A, B, and C by dividing ABC by the other two values\n    a = abc // bc\n    b = abc // ca\n    c = abc // ab\n\n    # Final sum A + B + C\n    sum_abc = a + b + c\n\n    return sum_abc\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    total_amount = 340\n    result = (percentage / 100) * total_amount\n    return result\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n    \n    while mother_age != 3 * (justin_age + years):\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n    \n    solutions = solve((equation1), (cora, qingle))\n    \n    difference = solutions[cora] - solutions[qingle]\n    \n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # The graph passes through the origin, which means the point (0, 0) is on the line.\n    # Hence, b must be 0 because when x=0, y must also equal 0.\n    # Therefore, the equation so far is y=mx.\n\n    # Now, the graph also passes through point (4, 8). We can use this point to find m.\n    x = 4\n    y = 8\n    m = y / x  # because y=mx when b=0\n    \n    # Now we have m and b, we can write the final linear equation as y = mx.\n    b = 0\n    # The equation in the form y = mx + b is thus y = m*x + b\n    equation = f\"y = {m}x + {b}\"\n    return equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Jane's and Eric's seashells\n    J, E = symbols('J E')\n\n    # Equation 1: Initial ratio of Jane's to Eric's seashells\n    equation1 = Eq(J, 5/7 * E)\n\n    # Equation 2: Ratio after Eric gives Jane 6 seashells\n    equation2 = Eq((J + 6)/(E - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (J, E))\n\n    # Calculate total seashells\n    total_seashells = solutions[J] + solutions[E]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    add_number = 20\n    subtract_number = 1\n\n    while add_number > 0:\n        current_number += add_number\n        largest_number = max(largest_number, current_number)\n        current_number -= subtract_number\n        add_number -= 1\n        subtract_number += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    time_to_fill = 1 / total_rate\n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "from sympy import primefactors\n\ndef solution():\n    # Prime factors of the base components of the numbers that contribute to trailing zeros\n    factors_2 = 0\n    factors_5 = 0\n    \n    # List of numbers to analyze\n    numbers = [48, 925, 38, 435]\n    \n    # Count the number of 2s and 5s in the prime factorization of each number\n    for number in numbers:\n        while number % 2 == 0:\n            factors_2 += 1\n            number //= 2\n        while number % 5 == 0:\n            factors_5 += 1\n            number //= 5\n            \n    # The number of trailing zeros is equal to the minimum of the counts of factors 2 and 5\n    return min(factors_2, factors_5)\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['5', '3', '9', '4', '8']\n    even_permutations = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 == 0]\n    smallest_even_number = min(even_permutations)\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    pianists_also_play_violin = piano_pupils / 4\n    \n    # Subtract the number of pianists who also play the violin from both the piano and violin players\n    # to avoid double counting.\n    unique_piano_players = piano_pupils - pianists_also_play_violin\n    unique_violin_players = violin_pupils - pianists_also_play_violin\n    \n    # Add the unique piano and violin players and the ones who play both to get the total number of \n    # music players.\n    total_music_players = unique_piano_players + unique_violin_players + pianists_also_play_violin\n    \n    # Subtract the total number of music players from the total number of pupils to get the number \n    # of pupils that don't play either.\n    neither_play = total_pupils - total_music_players\n\n    return neither_play\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n\n    amount = principal * (1 + interest_rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, pi, integrate, sqrt\n\n    # Define the symbols used in the Cartesian plane\n    x, y = symbols('x y')\n\n    # The equation of the hypotenuse of the isosceles right triangle (y = 2 - x)\n    hypotenuse = 2 - x\n\n    # Define the area of the isosceles right triangle\n    area_triangle = integrate(y, (y, 0, hypotenuse), (x, 0, 2))\n\n    # Define the region where the distance to the right angle vertex is less than 1\n    region_circle = integrate(y, (y, 0, sqrt(1 - x**2)), (x, 0, 1))\n\n    # Calculate the probability\n    probability = region_circle / area_triangle\n\n    return probability.evalf()\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    a_math = 10\n    a_english = 15\n    a_both = 2\n\n    a_either = a_math + a_english - a_both\n    \n    return a_either\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time format\n    time_format = '%H:%M'\n\n    # Define the times based on the question\n    time_left_school = datetime.strptime('15:22', time_format)\n    time_bus_caught = datetime.strptime('16:01', time_format)\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime('16:35', time_format)\n\n    # Calculate walking times\n    walk_to_bus = time_bus_caught - time_left_school\n    bus_drop_off_time = time_bus_caught + time_bus_trip\n    walk_home = time_got_home - bus_drop_off_time\n\n    # Calculate total walking time\n    total_walking_time = walk_to_bus + walk_home\n\n    # Convert the total walking time to minutes\n    total_walking_minutes = total_walking_time.seconds // 60\n\n    return total_walking_minutes\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result_after_addition = 25\n    result_after_division = result_after_addition - 10\n    original_number = result_after_division * 3\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    sum_of_numbers = mean * total_numbers\n    sum_of_given_numbers = sum(numbers)\n    a = sum_of_numbers - sum_of_given_numbers\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    constant_terms = 30000 + 452\n\n    # Subtract the constant terms from the left side\n    remaining = left_side - constant_terms\n\n    # Divide the remaining value by 2 to find the missing number\n    missing_number = remaining // 2\n    \n    return missing_number\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # First digit, cannot be 0\n        for D in range(1, 10):  # Last digit, cannot be 0\n            if A == (1/4) * D:  # First condition\n                B = A - 1  # Second condition\n                if B >= 0:  # B must be a valid single digit\n                    C = 3 * A  # Derived from multiplying 4, third digit\n                    if C < 10:  # C must be a single digit\n                        ABCD = A * 1000 + B * 100 + C * 10 + D\n                        DCBA = D * 1000 + C * 100 + B * 10 + A\n                        if ABCD * 4 == DCBA and len({A, B, C, D}) == 4:  # Third condition and uniqueness\n                            return ABCD\n    return None\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    result = 0.20 * 8880\n    return result\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    length_cm = 150\n    length_m = (length_cm / 2) / 100\n    return length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Lina is not considering the worst case scenario.\n    # Using the Pigeonhole Principle, \n    # Lina must consider the possibility of taking out one of each color before getting a pair.\n    # Since there are three colors, taking one sock of each color will require 3 socks.\n    # However, to ensure getting at least one pair, Lina needs to take one more sock.\n    # Therefore, Lina must take out a total of 4 socks to guarantee having at least one pair of the same color.\n    return 4\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7\n    total_rows = 1 + 1 + 8\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_for_3_tests = 75 * 3\n    total_for_2_tests = 172\n    marks_in_remaining_test = total_for_3_tests - total_for_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number\n    number = symbols('number')\n\n    # Define the equation representing the problem\n    equation = Eq(((number + 3) / 4) * 9, 81)\n\n    # Solve the equation for the unknown number\n    solutions = solve(equation, number)\n\n    # The solution will be a list, we take the first (and only) solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator\n    denominator = sum(1/(i*(39-i)) for i in range(11, 16))\n    \n    # Calculate the final result\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # Distance Peter covered from 8.00 am to 8.30 am\n    distance_covered = 6300 - 1800\n    \n    # Time taken to cover that distance (30 minutes or 0.5 hours)\n    time_taken = 0.5\n    \n    # Peter's average speed (distance/time)\n    average_speed = distance_covered / time_taken\n    \n    # Distance left to cover at 8.30 am\n    distance_left = 1800\n    \n    # Time Peter will take to cover the remaining distance\n    time_to_cover_distance_left = distance_left / average_speed\n    \n    # Time when Peter will reach his friend's house\n    # Convert the time to cover the remaining distance to hours and minutes\n    hours = int(time_to_cover_distance_left)\n    minutes = (time_to_cover_distance_left - hours) * 60\n    \n    # Since he was 1800m away at 8.30 am, add the time to cover the remaining distance to 8.30 am\n    arrival_hour = 8 + hours\n    arrival_minutes = 30 + minutes\n    \n    # If there are more than 60 minutes, adjust the hours and minutes\n    if arrival_minutes >= 60:\n        arrival_hour += int(arrival_minutes / 60)\n        arrival_minutes = arrival_minutes % 60\n\n    # Assuming Peter reaches on the same day and not after 12 midnight\n    arrival_hour = arrival_hour % 24\n\n    # Final answer in 24h format HH:MM\n    ans = '{:02d}:{:02d}'.format(int(arrival_hour), int(arrival_minutes))\n    \n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # For Mr. Smith\n    total_sugar_smith = 300 * 0.50 + 600 * 0.20\n    \n    # For Mrs. Smith\n    total_sugar_mrs_smith = 700 * 0.10 + 300 * (x / 100)\n    \n    # They end up with the same sugar percentage\n    total_volume_smith = 300 + 600\n    total_volume_mrs_smith = 700 + 300\n\n    sugar_percentage_smith = total_sugar_smith / total_volume_smith\n    sugar_percentage_mrs_smith = total_sugar_mrs_smith / total_volume_mrs_smith\n    \n    # Equation: The sugar percentage must be equal\n    equation = Eq(sugar_percentage_smith, sugar_percentage_mrs_smith)\n\n    # Solve for x\n    solutions = solve(equation, x)\n    solution_x = solutions[0]\n\n    return round(solution_x, 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = (3 / 4) * total_candy\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = (1 / 3) * remaining_candy\n    final_candy = remaining_candy - candy_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_7 = 7\n    may_age_10 = 10\n\n    kenny_age_now, brother_age_now = symbols('kenny_age_now brother_age_now')\n\n    # When May is 10, Kenny and his brother's age sum is 3 times May's age.\n    equation1 = Eq(kenny_age_now + brother_age_now, 3 * may_age_10)\n\n    # Kenny is 2 years older than his brother.\n    equation2 = Eq(kenny_age_now, brother_age_now + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny_age_now, brother_age_now))\n\n    # Calculate how much older Kenny is, compared to May's current age (7 years old).\n    kenny_age_difference = solutions[kenny_age_now] - may_age_7\n\n    return kenny_age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables to represent how much money Amy had and how many muffins and donuts she bought\n    money, muffins, donuts = symbols('money muffins donuts')\n    \n    # Price per unit for muffins and donuts\n    price_muffin = 6 / 3\n    price_donut = 10 / 7\n    \n    # Equations based on given statements\n    equation1 = Eq(donuts - muffins, 54)\n    equation2 = Eq(money / 2, price_donut * donuts)\n    equation3 = Eq(money / 2, price_muffin * muffins)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (money, muffins, donuts))\n\n    return solutions[money]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n    \n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    bag_weight_kg = 0.25\n    sell_price_per_bag_pence = 65\n    \n    number_of_bags = total_weight_kg / bag_weight_kg\n    total_sell_price_pence = number_of_bags * sell_price_per_bag_pence\n    total_sell_price_pounds = total_sell_price_pence / 100\n    \n    profit = total_sell_price_pounds - cost_price_pounds\n    profit_percentage = (profit / cost_price_pounds) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children_count = 5\n\n    # Since each child must get at least one apple,\n    # we distribute one apple to each child first.\n    apples_remaining = total_apples - children_count\n\n    # We then give all remaining apples to one child.\n    max_apples_to_one_child = apples_remaining + 1\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The total number of intervals between teeth is 99 (because the width is negligible)\n    # Since the distance between the 4th and 9th teeth is 30 mm, there are 5 intervals between them\n    # Each interval is then 30 mm / 5 = 6 mm\n    interval_length = 30 / 5\n    \n    # Calculate the total length in mm\n    total_length_mm = interval_length * 99\n    \n    # Convert the length into cm (1 cm = 10 mm)\n    total_length_cm = total_length_mm / 10\n    \n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the difference in years between when grandmother turned 80 and mum turned 40\n    years_diff = 2008 - 1996  # 12 years\n    # Since mum was 40 years old in 1996, she was born in 1956\n    mum_birth_year = 1996 - 40\n\n    # Grandmother age when mum was born\n    grandmum_age_when_mum_born = 80 - years_diff\n\n    # Mum age when she was 25\n    mum_25_year = mum_birth_year + 25\n\n    # Grandmother age when mum was 25\n    grandmum_age_when_mum_25 = grandmum_age_when_mum_born + 25\n\n    return grandmum_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = factorial(5)  # Total ways 5 people can line up\n    together_ways = factorial(3) * 2  # Ways in which the two people stand together times 2 for their internal arrangement\n\n    return total_ways - together_ways\n\nfrom math import factorial\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = (2/3) * total_vegetables\n    tuesday_sales = (2/5) * (total_vegetables - monday_sales)\n    return int(monday_sales + tuesday_sales)\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To guarantee 16 balls of one color and 13 balls of another color\n    # We take the worst-case scenario where we pick up every color but one less than we need\n    # Then, with the next pick, we are guaranteed to get to the count we need\n\n    # The number of picks needed: 15 (one less from 16) of each color + 12 (one less from 13) of another color\n    # Then one more pick guarantees 16 of one color and 13 of another color\n    picks = (15*5) + 12 + 1\n    return picks\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P, Q + 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_claire = total_biscuits / 4\n    remaining_biscuits = total_biscuits - given_to_claire\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Define equations based on the given conditions\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Use sympy.solve() to solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # The problem is asking to distribute 5 identical ice-cream cones\n    # to three friends such that each of them gets at least 1 ice-cream cone.\n    # Since each friend must get at least one ice-cream cone,\n    # we can subtract 3 from the total number of ice-cream cones (to ensure\n    # that each one gets one). Then we want to distribute the remaining\n    # 2 ice-cream cones among 3 friends.\n    \n    # The question now reduces to finding the number of non-negative solutions\n    # to the equation Zyan + Xuan_Ying + SiCheng = 2.\n    # This is an application of the \"stars and bars\" combinatorial method.\n    \n    # In general, the number of non-negative solutions to the equation\n    # x_1 + x_2 + ... + x_k = n is given by C(n+k-1, k-1),\n    # where C is the binomial coefficient.\n    \n    # Here, we have k = 3 friends and n = 2 ice-cream cones.\n    # So the number of ways to distribute the cones is C(2+3-1, 3-1) = C(4,2).\n    \n    # Calculate the binomial coefficient using `math.comb()` function.\n    from math import comb\n    return comb(4, 2)\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining = 4 / 5\n    initial_money = spent / (1 - remaining)\n    return initial_money\n    \nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100  # Convert percentage to decimal\n    time = 5  # Years\n\n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 0.40 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    difference_time = 5\n    lily_walk_time = hook_walk_time - difference_time\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    total_coins = joann_coins + sana_coins + nancy_coins\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    lucas_to_mother_ratio = 3/5\n    \n    walked_distance = (total_distance - remaining_distance) / (1 + lucas_to_mother_ratio)\n    lucas_walked = walked_distance * lucas_to_mother_ratio\n    \n    return lucas_walked\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_original = 30\n    pizzas_original = 12\n    people_new = 35\n\n    # Finding the unit rate (pizzas per person)\n    unit_rate = pizzas_original / people_original\n\n    # Finding the number of pizzas needed for the new number of people\n    pizzas_needed = unit_rate * people_new\n\n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    import math\n    # There are 16 teams, a single elimination tournament will always have n-1 games\n    # where n is the number of teams. Since it's a knockout, half the teams get eliminated each round.\n    num_teams = 16\n    rounds = int(math.log2(num_teams))\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Julie, Marion, Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    # Calculate the total earnings of the three of them\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5 / 35\n    return ans\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    # big_class students get 2 apples and 3 oranges each\n    # small_class students get 2 apples and 2 oranges each\n    # Total of 48 apples and 55 oranges are given out\n\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)  # Equation for apples\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)  # Equation for oranges\n    \n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    for i in range(1, 2017):\n        if sqrt(i * 72).is_integer():\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    total_items = 69\n    difference = 17\n\n    # Let's denote the number of cards to be x\n    # Then the number of wands will be x + difference\n    # We know that x + (x + difference) = total_items\n    # This simplifies to 2x + difference = total_items\n    # Hence we can find the value of x and then calculate the number of wands\n\n    number_of_cards = (total_items - difference) // 2\n    number_of_wands = number_of_cards + difference\n\n    return number_of_wands\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Danny's age as 'd' and Efron's age as 'e'\n    d, e, n = symbols('d e n')\n\n    # Efron is 30 years younger than Danny\n    age_difference = Eq(d - e, 30)\n    \n    # The current ratio of Danny's age to Efron's age is 8:3\n    current_ratio = Eq(d/e, 8/3)\n    \n    # In 'n' years, the ratio of Danny's age to Efron's age should be 5:3\n    future_ratio = Eq((d+n)/(e+n), 5/3)\n\n    # Solve the system of equations\n    solutions = solve((age_difference, current_ratio, future_ratio), (d, e, n))\n    \n    # Extract the solution for 'n' which is the number of years into the future.\n    return solutions[n]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We have the following congruences:\n    # child_count = 0 (mod 5)\n    # child_count = 6 (mod 7) because one child had to sit out\n    # child_count = 7 (mod 8) because one child had to sit out\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    child_count = solve_congruence(*congruences)\n\n    return child_count[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n    \n    butter_for_desired_cookies = (butter_used / cookies_made) * desired_cookies\n    \n    return butter_for_desired_cookies\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    results = [27, 28, 26, 24, 20]\n    mean_mark = sum(results) / len(results)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage games\n    # 6 games per group as every team plays every other team once\n    # 8 groups total\n    group_games = 6 * 8\n    \n    # Knockout round games\n    # Each round, the number of teams left is halved.\n    # Round of 16, quarter-finals, semi-finals, third place playoff and final\n    knockout_games = 16 + 8 + 4 + 2 + 1\n    \n    # Total number of games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for digit1 in range(0, 10):\n        for digit2 in range(0, 10):\n            for digit3 in range(1, 10):  # the first digit cannot be 0 in a 3-digit number\n                if digit3 == 1 + 2 * digit2 and 9 < sum([digit1, digit2, digit3]) < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    \n    equation1 = Eq(ball + racket, 30)\n    equation2 = Eq(racket, ball + 28)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # 3 apples and 2 bananas costs 1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n\n    # 1 apple and 1 banana costs 0.48\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    # Variable to hold the number of teams.\n    n = 1  # Starting from 1 as there needs to be at least 1 team\n    \n    # Loop to find the number of teams.\n    while n * (n - 1) / 2 != 15:\n        n += 1\n    \n    # Return the number of teams.\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    num = 224\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the problem, x - 0.3x = 210\n    # Simplify the equation to find x\n    \n    x = 210 / (1 - 0.3)\n    \n    return x\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    total_combinations = pencil_colours * ruler_colours * pen_colours\n\n    return total_combinations\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n    \n    # Number of sides for shapes\n    sides_pentagons = 5 * pentagons\n    sides_quadrilaterals = 4 * quadrilaterals\n    sides_triangles = 3 * triangles\n    \n    # Equations based on the problem\n    equation1 = Eq(sides_triangles + sides_quadrilaterals + sides_pentagons, 394)\n    equation2 = Eq(quadrilaterals, triangles + 82)\n    equation3 = Eq(pentagons, 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangles, quadrilaterals, pentagons))\n    \n    return solutions[quadrilaterals]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens_digit in range(1, 10):\n        ones_digit = tens_digit - 3\n        if 0 <= ones_digit < 10:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 sweets, they will have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # as there are 4 lamp posts, there would be 3 gaps\n\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of incorrect answers\n    # total_points = correct_points*x + incorrect_points*(total_questions - x)\n    total_points = 44\n\n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for i in range(10):\n        for j in range(10):\n            number = int('6' + str(i) + str(j))\n            if number % lcm == 0:\n                return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    product_str = str(product)\n    sum_of_digits = sum(int(digit) for digit in product_str)\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    operand1 = '61'  # number in base 7\n    operand2 = '34'  # number in base 7\n\n    # Convert to base 10\n    operand1_base10 = int(operand1, 7)\n    operand2_base10 = int(operand2, 7)\n    \n    # Perform the subtraction in base 10\n    result_base10 = operand1_base10 - operand2_base10\n\n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-boys teams\n    # and y be the number of all-girls teams\n    total_students = 150\n    teams_with_1_boy = 15\n    teams_with_2_or_more_boys = 27\n    # Equation representing the number of all-boys teams is twice the number of all-girls teams\n    # x = 2y\n    \n    # All possible teams will be a sum of these specific types\n    # Number of all-girl teams (y) + number of all-boy teams (x) + 15 (1-boy teams) + 12 (2-boys teams) = total number of teams 150/3\n    # Note: All teams with two or more boys consist of the all-boys teams and 2-boys teams, so 27 = x + (2-boys teams)\n    # This means (2-boys teams) = 27 - x, and we already have (1-boy teams) = 15\n    # y + x + 15 + (27 - x) = 150 / 3\n    # Simplify to find y, the number of all-girl teams:\n    # y + 15 + 27 = 50\n    # y = 50 - 15 - 27\n    \n    y = 50 - 15 - 27\n    # Now, since the number of all-boys teams is twice the number of all-girls teams,\n    # we have x = 2y\n    x = 2 * y\n    \n    # Each team consists of 3 students, so the number of girls will be:\n    # Number of all-girls teams (y) * 3 per team + Number of teams with 1 boy * 2 girls per team\n    girls = y * 3 + teams_with_1_boy * 2\n    \n    return girls\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Worst case scenario for each color:\n    # Pick up all the gloves of one hand for one color + 1 glove of the other color\n    # Since Dilly can differentiate colors, we consider colors as our pigeonholes\n\n    # Since there are 1 blue left and 3 blue right,\n    # Dilly could pick them all and still not have a matching pair of blue gloves,\n    # so we have to pick up 1 green glove to be sure for a matching blue pair.\n    worst_case_blue = 1 + 3 + 1\n\n    # Since there are 2 green left and 4 green right,\n    # Dilly could pick them all and still not have a matching pair of green gloves,\n    # so we have to pick up 1 blue glove to be sure for a matching green pair.\n    worst_case_green = 2 + 4 + 1\n\n    # The minimum number of gloves required to guarantee a matching pair is the\n    # smaller of the two worst case scenarios.\n    min_gloves = min(worst_case_blue, worst_case_green)\n\n    return min_gloves\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies_before = 5 * 12\n    total_students_after = 6\n    candies_each_student_after = total_candies_before // total_students_after\n\n    return candies_each_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4),  # x % 4 = 3 -> x ≡ 3 (mod 4)\n        (4, 5),  # x % 5 = 4 -> x ≡ 4 (mod 5)\n        (6, 7)   # x % 7 = 6 -> x ≡ 6 (mod 7)\n    ]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * approximate_depreciation\n\n    return final_value\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    students_diff = 52\n    total_students = 0\n    side_length = 1  # start checking from the smallest possible square dimension (1x1)\n\n    # Increasing the side of the square until the difference between boys and girls meets the condition\n    while True:\n        if side_length % 2 == 0:\n            boys = (side_length*4 - 4) + ((side_length - 2)*4 - 4)\n            girls = total_students - boys\n        else:\n            girls = ((side_length - 1)*4) + ((side_length - 3)*4)\n            boys = total_students - girls\n        if boys - girls == students_diff:\n            break\n        side_length += 1\n        total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n    \n    # Eugene had 3 times as many pins as Yuna.\n    equation1 = Eq(eugene, 3 * yuna)\n    \n    # After Yuna bought 76 pins, she had 7/9 as many pins as Eugene.\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n\n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_ways = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # A six-digit number 12345A is divisible by 9\n    # The sum of the digits in a number that is divisible by 9 must also be divisible by 9\n    sum_of_digits = 1 + 2 + 3 + 4 + 5  # Sum of the known digits\n    # We need to find the value for A that results in the sum being divisible by 9\n    for A in range(10):\n        if (sum_of_digits + A) % 9 == 0:\n            # Once the correct A is found, check the remainder when divided by 4\n            # For a number to be divisible by 4, the last two digits of the number must be divisible by 4\n            # Here the last two digits are \"5A\"\n            remainder = int(f\"5{A}\") % 4\n            return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 825\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percent = 35\n    discount_amount = original_price * (discount_percent / 100)\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure Kelly's victory, she must make sure that after her turn,\n    # the number of matches left is a multiple of 3 (since whatever Dan takes,\n    # Kelly can adjust her next pick to bring it back down to a multiple of 3).\n    # Knowing that, Kelly can work backwards from 11 to find the correct amount to take.\n\n    # Start by assuming Kelly takes 1 match\n    for kelly_pick in range(1, 3):\n        if (11 - kelly_pick) % 3 == 0:\n            # This pick ensures that Kelly can always leave a multiple of 3 for Dan\n            return kelly_pick\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    # Let total_flowers be the total number of flowers in the garden\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n\n    # Equation based on the information that there are 6 more red flowers than pink flowers\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    # Solve for total_flowers\n    total_flowers_solution = solve(equation, total_flowers)\n\n    return total_flowers_solution[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num_1 = (5 * 7 + 1) / 7\n    num_2 = (3 * 11 + 3) / 11\n    num_3 = (1 * 23 + 13) / 23\n\n    den_1 = (3 * 7 + 3) / 7\n    den_2 = (2 * 11 + 2) / 11\n    den_3 = (1 * 23 + 1) / 23\n\n    # Sum up the numerators and the denominators\n    numerator = num_1 + num_2 + num_3\n    denominator = den_1 + den_2 + den_3\n\n    # Calculate the final result\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(2*n+1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    num_kids = 3\n    arrangements = factorial(num_kids)\n    return arrangements\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cars, motorcycles = symbols('cars motorcycles')\n    total_vehicles = 27\n    total_wheels = 78\n    \n    # Equation based on the number of vehicles (cars + motorcycles = total vehicles)\n    equation1 = Eq(cars + motorcycles, total_vehicles)\n    # Equation based on the number of wheels (cars*4 + motorcycles*2 = total wheels)\n    equation2 = Eq(4*cars + 2*motorcycles, total_wheels)\n    \n    solutions = solve((equation1, equation2), (cars, motorcycles))\n    \n    return solutions[cars]\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_stickers = 20\n    nicole_stickers = jason_stickers + 18  # After giving Jason 18 stickers\n    jason_final = jason_stickers + 18\n    nicole_final = nicole_stickers - 18\n\n    # Jason finally has 5 fewer stickers than Nicole\n    # jason_final + 5 = nicole_final\n    nicole_initial = nicole_final + jason_final - jason_stickers\n\n    return nicole_initial\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume of the cuboid, V = l * b * h\n    # New volume of the cuboid, V' = (l * 110/100) * (b * 4/5) * (h * 11/10)\n    \n    # The percentage of the new volume compared to the original is (V'/V) * 100%\n    new_volume_ratio = (110 / 100) * (4 / 5) * (11 / 10)\n    percentage_new_volume = new_volume_ratio * 100\n\n    return percentage_new_volume\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    # x represents the number of 2 gram weights and y represents the number of 3 gram weights\n    for x in range(39):\n        for y in range(26):\n            if 2*x + 3*y == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000  # convert km to m\n    number_of_intervals = 9 - 1  # 9 marshals create 8 intervals\n\n    distance_between_marshals = total_distance_m / number_of_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180\n    time_initial = 6\n    speed_tired = 120\n    time_tired = 8\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the counts for red and green tiles\n    red_tiles = 0\n    green_tiles = 0\n    total_tiles = 400\n\n    # Calculate the size of the wall (since it's square, both sides are the same)\n    wall_side_length = int(total_tiles**0.5)  # square root of 400\n\n    # Iterate through the layers (rings) of the wall\n    for layer in range(0, wall_side_length // 2):\n        # The size of each side for this layer\n        side_length = wall_side_length - (2 * layer)\n        \n        # Number of tiles for the current layer (subtract 4 for the corners)\n        num_tiles_this_layer = (side_length * 4) - 4\n        \n        if layer % 2 == 0:\n            # Even layers are red\n            red_tiles += num_tiles_this_layer\n        else:\n            # Odd layers are green\n            green_tiles += num_tiles_this_layer\n\n    # Add the center tile if the wall side length is odd\n    if wall_side_length % 2 == 1:\n        red_tiles += 1\n    \n    # Calculate the difference and find the dominant color\n    if red_tiles > green_tiles:\n        dominant_color = 'Red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'Green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    # The incorrect total score is average * number of students\n    incorrect_total = 74 * 7\n    # Correct the error by subtracting the incorrect score and adding the correct score\n    correct_total = incorrect_total - 81 + 18\n    # Calculate the correct average\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03\n    # Calculate interest for the first year\n    first_year_interest = initial_amount * interest_rate\n    # Total amount after the first year\n    total_after_first_year = initial_amount + first_year_interest\n    # Calculate interest for the second year\n    second_year_interest = total_after_first_year * interest_rate\n    # Total interest earned after the second year\n    total_interest = first_year_interest + second_year_interest\n\n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = (1 * 60) + 20  # 1 hour and 20 minutes\n    number_of_pictures = total_minutes / minutes_per_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + 4/7\n    ans = round(mixed_number, 1)\n    return ans\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    vastco_2014 = 100  # Assume Megacorp sold 100 widgets in 2014\n    vastco_2015 = vastco_2014 * 1.32  # Vastco's sales increased by 32%\n    megacorp_2014 = vastco_2014 / 1.68  # Calculate Megacorp's 2014 sales\n    megacorp_2015 = vastco_2015 / 1.44  # Calculate Megacorp's 2015 sales\n    percentage_increase = ((megacorp_2015 - megacorp_2014) / megacorp_2014) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # The recurring sequence in the fraction 3/7\n    index = (69 - 1) % len(recurring_sequence)  # Get the index of the 69th digit\n    ans = int(recurring_sequence[index])  # Retrieve the digit at the corresponding index\n    return ans\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    \n    return concentration * 100\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    sweets_left = y / 2\n    return sweets_left\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    for older_son in range(1, 55):\n        for younger_son in range(1, 55):\n            for older_daughter in range(1, 55):\n                for younger_daughter in range(1, 55):\n                    if (older_son - younger_son == 3) and \\\n                       (older_daughter - younger_daughter == 2) and \\\n                       (younger_son == 2 * older_daughter) and \\\n                       (older_son + younger_son + older_daughter + younger_daughter == 55):\n                        return min(older_son, younger_son, older_daughter, younger_daughter)\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Define two scenarios with different speeds and arrival times\n    speed1 = 10  # km/h\n    arrival1 = 10  # 10 am\n    speed2 = 15  # km/h\n    arrival2 = 8  # 8 am\n\n    # Calculate the time taken for each scenario\n    # Since time is linearly dependent on speed and inversely proportional to distance, we get two equations:\n    # distance = speed1 * (arrival2 - arrival1 + time1)\n    # distance = speed2 * time2\n    # Since the distances are the same, we can equate the two expressions and solve for time1:\n    # speed1 * (arrival2 - arrival1 + time1) = speed2 * time2\n    # time1 = (speed2 * time2 / speed1) - (arrival2 - arrival1)\n    # where time1 is the time to arrive at 9 am at speed1\n\n    # arrival time for the required speed\n    arrival3 = 9  # 9 am\n\n    # Calculate the time taken to travel at the first and the second speeds\n    time1 = arrival1 - arrival3  # time1 is the time from 9 am to 10 am\n    time2 = arrival3 - arrival2  # time2 is the time from 8 am to 9 am\n\n    # distance remains the same in both cases, so we can use the times to find the ratio of the speeds\n    # time1 / time2 = speed2 / speed3, where speed3 is the required speed\n    \n    # We solve the equation for speed3, using the property that distance remains constant\n    speed3 = (speed1 * time1) / time2\n\n    return speed3\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n\n    while total_bottles >= 4:\n        new_bottles = total_bottles // 4\n        total_bottles = total_bottles - (new_bottles * 4) + new_bottles\n\n        if total_bottles == 3:\n            total_bottles += 1 \n\n    return 48 + (48 // 4) + (48 // 4 // 4) + (48 // 4 // 4 // 4) + 1\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Intialize total number of digits to 0\n    total_digits = 0\n    \n    # Calculate the total number of digits for 1-9\n    total_digits += 9 * 1\n    \n    # Calculate the total number of digits for 10-99\n    total_digits += (99 - 10 + 1) * 2\n    \n    # Calculate the total number of digits for 100-113\n    total_digits += (113 - 100 + 1) * 3\n    \n    return total_digits\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let's denote the cost price of the goods as C\n    # The expected profit is 50% of C, which is 0.5 * C\n    # On the first day, he sold 70% at a profit of 50%, so the profit is 0.7 * C * 0.5\n    # On the second day, he sold 30% of the goods (100% - 70%)\n    # The total profit he actually made is 82% of the planned profit, which is 0.82 * 0.5 * C\n    \n    # Let's denote the discount rate on the second day as D\n    # The sale price on the second day is (1 - D) times the cost price, resulting in lesser profit or possibly a loss\n    # The actual profit made from the second day sales would be 0.3 * C * (1 - D) - 0.3 * C where 0.3 * C is the cost price\n    # The actual profit made from the second day sales subtracted from the cost price\n    \n    # The sum of the profits from both days equates to the total actual profit:\n    # 0.7 * C * 0.5 + 0.3 * C * (1 - D) - 0.3 * C = 0.82 * 0.5 * C\n    \n    # By simplifying and solving for D, we get:\n    # 0.35 * C + 0.3 * (1 - D) * C - 0.3 * C = 0.41 * C\n    # Subtract 0.35 * C from both sides:\n    # 0.3 * (1 - D) * C - 0.3 * C = 0.41 * C - 0.35 * C\n    # 0.3 * (1 - D) * C - 0.3 * C = 0.06 * C\n    # 0.3 * (1 - D) * C = 0.06 * C + 0.3 * C\n    # 0.3 * (1 - D) * C = 0.36 * C\n    # Divide by 0.3 * C from both sides:\n    # 1 - D = 0.36 / 0.3\n    # D = 1 - (0.36 / 0.3)\n    \n    D = 1 - (0.36 / 0.3)\n    \n    return D\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pearls = symbols('total_pearls')\n\n    equation = Eq(total_pearls / 2 + total_pearls / 4 + total_pearls / 6 + 3, total_pearls)\n\n    solutions = solve(equation, total_pearls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    total_work = workers * days_for_3_workers\n    days_for_1_worker = total_work / 1\n    return days_for_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3]\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    all_possible_permutations = permutations(people, len(entrances))\n    valid_permutations = set()\n\n    for perm in all_possible_permutations:\n        for entrance in entrances:\n            if entrance not in perm:\n                break\n        else:\n            valid_permutations.add(perm)\n\n    return len(valid_permutations) * 4  # Multiply by 4 since the 4th person can choose any entrance\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black_rabbits, white_rabbits, grey_rabbits = symbols('black_rabbits white_rabbits grey_rabbits')\n\n    equation1 = Eq(black_rabbits, white_rabbits + 14)\n    equation2 = Eq(grey_rabbits, white_rabbits - 2)\n    equation3 = Eq(black_rabbits + white_rabbits + grey_rabbits, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black_rabbits, white_rabbits, grey_rabbits))\n\n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    equation1 = Eq(john_erasers - brother_erasers, 32)\n    equation2 = Eq(john_erasers + brother_erasers, 246)\n\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):  # 80 is included\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    earned = 1\n    lost = -1\n    total_earnings = 92\n\n    # Let x be the number of glasses delivered safely,\n    # and y be the number of glasses broken.\n    # x + y = total_glasses  (1)\n    # earned * x + lost * y = total_earnings  (2)\n\n    # From equation (1), we get y = total_glasses - x.\n    # Substituting y into equation (2):\n    # earned * x + lost * (total_glasses - x) = total_earnings\n    # x - (total_glasses - x) = total_earnings\n    # 2 * x - total_glasses = total_earnings\n    # 2 * x = total_earnings + total_glasses\n    # x = (total_earnings + total_glasses) / 2\n\n    x = (total_earnings + total_glasses) // 2\n    y = total_glasses - x\n\n    return y\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let n be the number of teams\n    n = Symbol('n')\n\n    # In a round-robin tournament, each team plays every other team exactly once.\n    # Therefore, there are n*(n-1)/2 matches in total.\n    # We set this equal to 45 (the total number of rounds played) to solve for n.\n    equation = n*(n-1)/2 - 45\n\n    # Solve the equation for n\n    teams = solve(equation, n)\n    \n    # Since the number of teams can't be negative, we take the positive solution\n    ans = [team for team in teams if team.is_real and team > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define x as the number of boats initially and y as the number of people in the class\n    x, y = symbols('x y')\n\n    # If the number of boats reduces by 1, then each boat will take exactly 9 people\n    equation1 = Eq((x - 1) * 9, y)\n    # If the number of boats increases by 1, then each boat will take exactly 6 people\n    equation2 = Eq((x + 1) * 6, y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change = 1200 - total_cost  # because 12 pounds equals 1200 pence\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let the smallest odd integer be x\n    # Then the second one is x+2 and the third one is x+4\n    # Their sum is x + (x+2) + (x+4) = 57\n    # Solving this, we get 3x + 6 = 57\n    # Thus, 3x = 51\n    # And x = 17\n    # The smallest integer is 17\n    \n    x = (57 - 6) // 3\n    return x\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for number in [2, 6, 1, 10, 5, 3]:\n        if (number * 3) == 6:\n            return number\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john_initial, peter_initial = symbols('john_initial peter_initial')\n\n    # John had 180 more cookies than Peter\n    equation1 = Eq(john_initial, peter_initial + 180)\n\n    # After transactions\n    equation2 = Eq((john_initial * (4/5)), (peter_initial * (3/10)) * 2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (john_initial, peter_initial))\n\n    return solutions[john_initial]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for number in range(5, 16):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    nums = [1, 3, 4, 7]\n    perm = permutations(nums, 4)\n    min_sum = float('inf')\n    for comb in perm:\n        # Generate two 2-digit numbers and calculate their sum\n        sum_comb = (comb[0] * 10 + comb[1]) + (comb[2] * 10 + comb[3])\n        min_sum = min(min_sum, sum_comb)\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60  # Total percentage for 4 tests\n    total_marks_after = total_marks_before + 70  # Add the fifth test percentage\n\n    new_average = total_marks_after / 5  # Divide by total number of tests to get the new average\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    horses = 6\n    pigs = 12\n    rabbits = 12\n\n    horse_apples = horses * 20\n    pig_apples = pigs * 15\n    rabbit_apples = rabbits * 5\n\n    total_apples = horse_apples + pig_apples + rabbit_apples\n    total_animals = horses + pigs + rabbits\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if int(str_num[2]) == int(str_num[0]) + int(str_num[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n\n    # Assuming the two sale plans mentioned without details refer to paying the full price\n    # since no details are provided about the discount rates or conditions.\n    total_cost = full_price_per_cup * total_cups\n\n    return total_cost\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's introduce variables for the number of students and peaches\n    classA_students, classB_students, peaches = symbols('classA_students classB_students peaches')\n\n    # From the problem, we have the following equations:\n    # Equation for Class A: peaches = 5 * classA_students + 10\n    # Equation for Class B: peaches = 8 * classB_students - 2\n    # Number of students in class A is 3 more than class B: classA_students = classB_students + 3\n\n    equation1 = Eq(peaches, 5 * classA_students + 10)\n    equation2 = Eq(peaches, 8 * classB_students - 2)\n    equation3 = Eq(classA_students, classB_students + 3)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (classA_students, classB_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    b_left, j_left = symbols('b_left j_left')\n\n    b_spent = 74\n    j_spent = 120\n    total = 590\n\n    # Benson had left 3 times as much as Jayden\n    equation1 = Eq(b_left, 3 * j_left)\n    # Total money left\n    equation2 = Eq(b_left + j_left, total - (b_spent + j_spent))\n\n    solutions = solve((equation1, equation2), (b_left, j_left))\n    \n    return solutions[j_left]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    lcm_value = solve_congruence(*congruences)\n\n    return lcm_value[0]\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    last_5_digits_sum = sum(int('2' * i)[-5:] for i in range(1, 2018))\n    return int(str(last_5_digits_sum)[-5:])\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    water_fraction = 3/4\n\n    water_quantity = total_orange_drink * water_fraction\n\n    return water_quantity\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (547 * 479) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    b_speed, k_speed = symbols('b_speed k_speed')\n    betty_time, kevin_time = symbols('betty_time kevin_time')\n    \n    # Given in question\n    betty_to_store = 6  # In minutes\n    kevin_distance = 150  # In meters\n    both_walk_additional = 3  # In minutes\n    betty_from_cinema = 900  # In meters after walking additional 3 minutes\n    \n    # Equations based on the question\n    equation1 = Eq(b_speed * betty_to_store, k_speed * kevin_time)\n    equation2 = Eq(k_speed * (kevin_time + both_walk_additional), b_speed * (betty_to_store + both_walk_additional))\n    equation3 = Eq(b_speed * (betty_to_store + both_walk_additional), betty_from_cinema)\n    equation4 = Eq(k_speed * kevin_time, kevin_distance)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (b_speed, k_speed, betty_time, kevin_time))\n\n    # Kevin's speed will be the distance he covered in the time before Betty reached the store\n    kevin_speed = solutions[k_speed]\n\n    # Total distance covered by Kevin when Betty is at the store\n    kevin_distance_at_store = kevin_speed * (kevin_time + both_walk_additional)\n\n    # Time difference we need to find is kevin_time - betty_to_store\n    time_difference = kevin_time - betty_to_store\n\n    # Return the time difference\n    return solutions[kevin_time] - betty_to_store\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # Since the numbers are the same, let's call the number x.\n    # We have the equation x * x + x = 380\n    # Which simplifies to x^2 + x - 380 = 0\n    # We need to find the positive whole number solution to this quadratic equation.\n    \n    from math import sqrt\n\n    # coefficients for the quadratic equation ax^2 + bx + c = 0\n    a = 1\n    b = 1\n    c = -380\n\n    # discriminant\n    discriminant = b**2 - 4*a*c\n\n    # solving the quadratic equation for the positive root since the number must be whole\n    x1 = (-b + sqrt(discriminant)) / (2*a)\n    x2 = (-b - sqrt(discriminant)) / (2*a)\n\n    # Return the positive whole number\n    ans = max(x1, x2) if max(x1, x2) > 0 and max(x1, x2).is_integer() else min(x1, x2)\n    return int(ans)\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    part_size = 300 / total_parts\n    raspberry_juice = part_size * 1\n    return raspberry_juice\n\nans = solution()"
    ]
}